unit xe_JON01;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, XMLDoc, XMLIntf, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxLookAndFeels, IDGlobal,
  cxLookAndFeelPainters, Vcl.Menus, cxControls, cxContainer, cxEdit, Magnetic, SmartSRXLib_TLB,
  cxCheckBox, Vcl.StdCtrls, cxClasses, cxGroupBox, cxTL, Web.HTTPApp, IniFiles,
  cxTextEdit, cxMaskEdit, cxDropDownEdit, Vcl.ExtCtrls, cxLabel, cxMemo, ComObj,
  dxGDIPlusClasses, Vcl.ComCtrls, dxCore, cxDateUtils, cxSpinEdit, cxTimeEdit, MSHTML,
  cxCalendar, cxStyles, cxCustomData, cxFilter, cxData, cxDataStorage, xe_gnl,
  cxNavigator, Data.DB, cxDBData, cxGridCustomTableView, cxGridTableView, xe_structure,
  cxGridDBTableView, cxGridLevel, cxGridCustomView, cxGrid, cxCurrencyEdit, System.DateUtils,
  IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, System.StrUtils, System.Math,
  cxRichEdit, cxPropertiesStore, AdvGlowButton, cxListBox, System.AnsiStrings,
  cxImage, AdvPanel, Vcl.Grids, AdvObj, BaseGrid, AdvGrid, Vcl.ImgList, xe_gnl3,
	Vcl.Buttons, dxSkinsCore, dxSkinscxPCPainter, Clipbrd, SHDocVw,
	System.ImageList, cxButtons, AdvUtil, dxSkinOffice2010Blue,
	cxButtonEdit, cxImageList, dxSkinDevExpressStyle, dxDateRanges, cxCustomListBox, dxSkinOffice2016Colorful, dxSkinOffice2010Silver;
{
A 위치지정방법 어플(고객용어플, 기타 어플) 전화걸기와 연동됨 
B 위치지정방법 추가접수
C 위치지정방법 고객정보에 출발지 내용  
D 위치지정방법 동선택   
E 위치지정방법 AI를 통하여 출발지 접수
H 위치지정방법 과거이용내역  
I 위치지정방법 내부검색  
L 위치지정방법 Local선택  
M 위치지정방법 MAP선택  
N 위치지정방법 네이버검색  
T 위치지정방법 타대표번호 타대표번호로 접수콜의 출도 정보 
W 위치지정방법 wisenut  

AS	0	접수상태	접수
AS	1	접수상태	배차
AS	2	접수상태	완료
AS	3	접수상태	강제
AS	4	접수상태	문의
AS	5	접수상태	대기
AS	6	접수상태	대기해제
AS	7	접수상태	배차취소
AS	8	접수상태	취소
AS	9	접수상태	오더수정
AS	A	접수상태	재접수
AS	B	접수상태	배차중
AS	C	접수상태	확정배차
AS	D	접수상태	운행
AS	E	접수상태	후불정산
AS	L	접수상태	LOCK
AS	P	접수상태	후불입금
AS	R	접수상태	예약
AS	S	접수상태	문자전송
AS	T	접수상태	전화
AS	U	접수상태	UNLOCK
AS	V	접수상태	가배차

PY	0	결제구분	현금
PY	1	결제구분	마일리지
PY	2	결제구분	후불
PY	3	결제구분	모바일결제
PY	4	결제구분	외상
PY	5	결제구분	카드
PY	6	결제구분	즉불
PY	7	결제구분	후불(카드)
PY	8	결제구분	후불(마일)

}
type
  TMsgRecord = record
		Tag : Integer;
		Index : Integer;
  end;

  TJONStaChkXY = record
    Area1 : string;
    Area2 : string;
    Area3 : string;
    Area4 : string;
    Area5 : string;
    X : string;
    Y : String;
		GUIDE_X : string;
    GUIDE_Y : String;
    Gubun : string;
	end;

	TCustChangeInfo = record
		Name         : string;
		CbCuGb       : Integer;
		meoCuCCMemo  : string;
		meoCuWorMemo : String;
		edt_CardMemo : String;
		cboBrOnly    : Integer;
		KeyNumChange : Boolean;
	end;

type
  TRec = record
    FieldName: string;  // 그리드 타이틀 명
    TagName: string;    // xml 태그 명
  end;
const
	OrderTitle: array[0..42] of TRec = (
      (FieldName: '최초접수일시';	  TagName: 'InTime')
    , (FieldName: '상태';	      TagName: 'Status')
    , (FieldName: '출발지';	    TagName: 'Area5')
    , (FieldName: '도착지';	    TagName: 'EdArea5')
    , (FieldName: '기사';	      TagName: 'WkSabun')
    , (FieldName: '요금';	      TagName: 'Charge')
    , (FieldName: '마일리지';	  TagName: 'Mileage')
    , (FieldName: '취소사유';	  TagName: 'CReason')
    , (FieldName: '적요';	      TagName: 'ConfInfo')
    , (FieldName: '접수자';	    TagName: 'Member')
    , (FieldName: '대표번호';	  TagName: 'KeyNumber')
    , (FieldName: '고객메모';	  TagName: 'Memo')
    , (FieldName: '접수번호';	  TagName: 'ConfSlip')
    , (FieldName: '접수일시';	  TagName: 'InDate')
		, (FieldName: '상태코드2';  TagName: 'Status')
		, (FieldName: '고객전화';	  TagName: 'CustTel')
    , (FieldName: '출좌표X';	  TagName: 'MapX')
    , (FieldName: '출좌표Y';	  TagName: 'MapY')
    , (FieldName: '출1';	      TagName: 'Area')
    , (FieldName: '출2';	      TagName: 'Area2')
    , (FieldName: '출3';	      TagName: 'Area3')
    , (FieldName: '출4';	      TagName: 'Area4')
    , (FieldName: '출5';	      TagName: 'Area5')
    , (FieldName: '도좌표X';	  TagName: 'DestX')
    , (FieldName: '도좌표Y';	  TagName: 'DestY')
    , (FieldName: '도1';	      TagName: 'EdArea')
    , (FieldName: '도2';	      TagName: 'EdArea2')
    , (FieldName: '도3';	      TagName: 'EdArea3')
    , (FieldName: '도4';	      TagName: 'EdArea4')
    , (FieldName: '도5';	      TagName: 'EdArea5')
    , (FieldName: '복수콜';	    TagName: 'MultiCallGB')
    , (FieldName: 'No';	        TagName: '')
    , (FieldName: '지사명';	     TagName: 'BrName')
    , (FieldName: '콜센터코드';	 TagName: 'Callcenter')
    , (FieldName: '오더타입';	   TagName: 'OrderType')
    , (FieldName: '배차시간';    TagName: 'BaechaTime')
    , (FieldName: '완료시간';    TagName: 'FinishTime')
    , (FieldName: '기사본사코드';   TagName: 'WkHead')
    , (FieldName: '기사지사코드';   TagName: 'WkBrch')
		, (FieldName: '기사콜센터';     TagName: 'WkCenter')
		, (FieldName: '접수구분';       TagName: 'FirstInSource')
		, (FieldName: '적요2';       TagName: 'ConfInfo2')
		, (FieldName: '경유요금';     TagName: 'ViaCharge')
	);

type
  TFrm_JON01 = class(TForm)
    cboBrOnly: TcxComboBox;
    cboBranch: TcxComboBox;
    GBTop5: TPanel;
    meoStartArea: TcxMemo;
    cxGroupBox2: TcxGroupBox;
    cxGBSearch: TcxGroupBox;
    pmBigo: TPopupMenu;
    N1: TMenuItem;
    pmSpop: TPopupMenu;
    MenuItem1: TMenuItem;
    pmEpop: TPopupMenu;
    MenuItem2: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    N4: TMenuItem;
    advPMnuWTR: TPopupMenu;
    MenuItem3: TMenuItem;
    MenuItem4: TMenuItem;
    tmMent: TTimer;
    cxLblConfSlipUseFlg: TcxLabel;
    cxtJoinNum: TcxTextEdit;
    cxtCallTelNum: TcxTextEdit;
    cxtWorkerNm: TcxTextEdit;
    cxLblCIDUseFlg: TcxLabel;
    tmFormClose: TTimer;
    cxTxtBrNameCaption: TcxTextEdit;
    shrDNIS_DSP: TcxGroupBox;
    lblDNISInfo: TcxLabel;
    shaPrcMsg: TcxGroupBox;
    lblCapItem: TLabel;
    lblRltCnt: TLabel;
    Label4: TLabel;
    pnlServerDisconn: TPanel;
    Label2: TLabel;
    GrpHelp: TcxGroupBox;
    tmrDisAc: TTimer;
    tmrStartPos: TTimer;
    pnlBubin: TcxGroupBox;
    cxtBubinSearchName: TcxTextEdit;
    cxGrdBubin: TcxGrid;
    cxBubinView: TcxGridDBTableView;
    cxGrdCol1: TcxGridDBColumn;
    cxGrdCol2: TcxGridDBColumn;
    cxGrdCol3: TcxGridDBColumn;
    cxGrdCol4: TcxGridDBColumn;
    cxGrdCol5: TcxGridDBColumn;
    cxGrdBubinLevel1: TcxGridLevel;
    pnlCustAppinfo: TcxGroupBox;
    mmoCuInfo: TcxMemo;
    pnlJonMain: TPanel;
    LblTop: TLabel;
    LblBottom: TLabel;
    LblLeft: TLabel;
    LblRigth: TLabel;
    mmoCuAppInfo: TcxRichEdit;
    cxGrdCuList: TcxGrid;
    cxCustView: TcxGridDBTableView;
    cxGridDBColumn1: TcxGridDBColumn;
    cxGridDBColumn2: TcxGridDBColumn;
    cxGridDBColumn3: TcxGridDBColumn;
    cxGridDBColumn4: TcxGridDBColumn;
    cxGridDBColumn5: TcxGridDBColumn;
    cxGrdCol6: TcxGridDBColumn;
    cxGrdCol7: TcxGridDBColumn;
    cxGrdCol8: TcxGridDBColumn;
    cxGrdCol9: TcxGridDBColumn;
    cxGrdCol10: TcxGridDBColumn;
    cxGrdCol11: TcxGridDBColumn;
    cxGrdCol12: TcxGridDBColumn;
    cxGrdCol13: TcxGridDBColumn;
    cxGrdCol14: TcxGridDBColumn;
    cxGrdCol15: TcxGridDBColumn;
    cxGrdCol16: TcxGridDBColumn;
    cxGrdCol17: TcxGridDBColumn;
    cxGrdCol18: TcxGridDBColumn;
    cxGrdCol19: TcxGridDBColumn;
    cxGrdCol20: TcxGridDBColumn;
    cxGrdCol21: TcxGridDBColumn;
    cxGrdCol22: TcxGridDBColumn;
    cxGrdCol23: TcxGridDBColumn;
    cxGrdCol24: TcxGridDBColumn;
    cxGrdCol25: TcxGridDBColumn;
    cxGrdCol26: TcxGridDBColumn;
    cxGrdCol27: TcxGridDBColumn;
    cxGrdCol28: TcxGridDBColumn;
    cxGrdCol29: TcxGridDBColumn;
    cxGrdCuListLevel1: TcxGridLevel;
    PnlMain: TPanel;
    grpOrderInfoView: TcxGroupBox;
    cxMeoOrderUpInfo: TcxRichEdit;
    GBTop3: TPanel;
		pnlOrderInfoView: TPanel;
    GrpCReason: TcxGroupBox;
    lblCReason: TcxLabel;
    cxPropertiesStore1: TcxPropertiesStore;
    lblStartAreaName: TcxRichEdit;
    cxtStartAreaDetail: TcxRichEdit;
    cb_00: TAdvGlowButton;
    cb_01: TAdvGlowButton;
    cb_03: TAdvGlowButton;
    cb_02: TAdvGlowButton;
    cb_04: TAdvGlowButton;
    lst_BRList: TcxListBox;
    cxLStartAreaFlag: TcxLabel;
    GBTop2: TPanel;
    pnlBrNoMent: TPanel;
    lblBrNoMent: TLabel;
    pnlNewCustYN: TPanel;
    Label3: TLabel;
    lblNewCustYN: TLabel;
    Shape12: TShape;
    PnlBottom: TPanel;
    cxImage1: TcxImage;
    PnlSuggest: TPanel;
    AdvGridSj: TAdvStringGrid;
    TT4: TTimer;
    PnlPOISch: TPanel;
    cxImgLock: TcxImageList;
    tmrKeyDown: TTimer;
    tmrXYChange: TTimer;
    tmrDistance: TTimer;
    PnlBtm: TPanel;
    tmrResponse: TTimer;
    Pop01Setup: TPopupMenu;
    N5: TMenuItem;
    tmrWKSearch: TTimer;
    tmrThRealDis: TTimer;
    tmrCharge: TTimer;
    BtnStLock: TAdvGlowButton;
    btnSBigo1: TAdvGlowButton;
    BtnViaAdd: TAdvGlowButton;
    btnStartLocalSave: TAdvGlowButton;
    BtnCall: TAdvGlowButton;
    BtnCall2: TAdvGlowButton;
    cxButton1: TAdvGlowButton;
    BtnViaMinus1: TAdvGlowButton;
    GBTop1: TPanel;
    GbViaArea: TPanel;
    cxLblBar2: TLabel;
		GBStartXYView: TPanel;
    cxLabel7: TLabel;
    cxLabel8: TLabel;
    pnl_charge: TPanel;
    Lbl_charge: TLabel;
    lbl_PlusAreaNotice: TLabel;
    Lbl_Distance: TLabel;
    cxtEndGUIDEXval: TcxTextEdit;
    cxtEndGUIDEYval: TcxTextEdit;
    cxtStartXval: TcxTextEdit;
    cxtStartYval: TcxTextEdit;
    cxtStartGUIDEXval: TcxTextEdit;
    cxtStartGUIDEYval: TcxTextEdit;
    tmHoTranRlt: TTimer;
    PopupMenuHoTrans: TPopupMenu;
    N1Seoul: TMenuItem;
    N1Kyeonggi: TMenuItem;
    N1InCheon: TMenuItem;
    N17: TMenuItem;
    N1DaeJeon: TMenuItem;
    N1ChungNam: TMenuItem;
    N1ChungBuk: TMenuItem;
    N1GangWon: TMenuItem;
    N18: TMenuItem;
    N1DaeGu: TMenuItem;
    N1GyeongBuk: TMenuItem;
    N1BuSan: TMenuItem;
    N1UlSan: TMenuItem;
    N1GyeongNam: TMenuItem;
    N19: TMenuItem;
    N1JeonBuk: TMenuItem;
    N1GwangJu: TMenuItem;
    N1JeonNam: TMenuItem;
    N1JeJu: TMenuItem;
    IdHoTrans: TIdTCPClient;
    cxViaAreaName1: TcxLabel;
    cb_05: TAdvGlowButton;
    cxLblBar1: TLabel;
    cxLblBar3: TLabel;
    trmBubinState: TTimer;
    Label7: TLabel;
    tmrAutoCall: TTimer;
    TT4_1: TTimer;
    TT3_1: TTimer;
    PnlKTPOIYN: TPanel;
    btnCmdJoin: TcxButton;
    btnCmdWait: TcxButton;
    btnCmdQuestion: TcxButton;
    btnCmdNoSMS: TcxButton;
    btnCmdExit: TcxButton;
    btnPickupInsert: TcxButton;
    btnCmdMultiCall: TcxButton;
    btnCmdUpdSave: TcxButton;
    btnCmdWaitCopy: TcxButton;
    btnCmdJoinCopy: TcxButton;
    btnSClose: TcxButton;
    btnHiPOIY: TcxButton;
    btnKtPOIY: TcxButton;
    cxButton7: TcxButton;
    cxButton2: TcxButton;
    cxButton46: TcxButton;
    cxButton6: TcxButton;
    cxButton4: TcxButton;
    cxBtnSelect: TcxButton;
    cxBtnChoice: TcxButton;
    cxBtnClose: TcxButton;
    cxtCuTel: TcxTextEdit;
    cxtCuTel2: TcxTextEdit;
    cxTSearchMainTel: TcxTextEdit;
    PnlCtrlV: TPanel;
    btnCtrlVCancel: TcxButton;
    CbCuGb: TcxComboBox;
    cboCuLevel: TcxComboBox;
    pnlMileage: TPanel;
    lblCuMile: TLabel;
    lblCuMileUnit: TLabel;
    Label5: TLabel;
    Label1: TLabel;
    lblCuMileCnt: TLabel;
    lblMoCuMile: TLabel;
    Label9: TLabel;
    PnlOCC: TPanel;
    Label6: TLabel;
    lblCuCntTotal: TLabel;
    Label8: TLabel;
    lblCuCancelR: TLabel;
    Label10: TLabel;
    lblCoCntTotal: TLabel;
    chkCenterMng: TcxCheckBox;
    ChkCuSmsNo: TcxCheckBox;
    btnBubinSch: TcxButton;
    cxBtnCuDel: TcxButton;
    cxBtnCuNew: TcxButton;
    cxBtnCuUpdate: TcxButton;
    cxBtnSpSave: TcxButton;
    cxBtnHoTrans: TcxButton;
    BtnCustAdd: TcxButton;
    edtCuName: TcxTextEdit;
    cxtCuBubin: TcxTextEdit;
    pnlBubinState: TPanel;
    pnlBubinState1: TPanel;
    lbBubinStateName: TcxLabel;
    lbBubinStateMemo: TcxLabel;
    cxLabel2: TcxLabel;
    cxLabel4: TcxLabel;
    SpeedButton2: TcxButton;
    meoCuWorMemo: TcxMemo;
    meoCuCCMemo: TcxMemo;
    cxLCuCCMemoFlg: TcxLabel;
    cxLCuWorMemoFlg: TcxLabel;
    mmoCbMemo: TcxMemo;
    BtnViewMemo: TAdvGlowButton;
    edt_CardMemo: TcxMemo;
    cxLCuCCMemoFlg1: TcxLabel;
    BtnSimMemo: TAdvGlowButton;
    chkViewLevel: TcxCheckBox;
    shpModifyTitle: TShape;
    GB3: TPanel;
    cxReEndArea: TcxRichEdit;
    meoEndArea: TcxMemo;
    cxtEndAreaDetail: TcxLabel;
    lblEndAreaName: TcxLabel;
    cxLEndAreaFlag: TcxLabel;
    BtnEdLock: TAdvGlowButton;
    btnEpop: TAdvGlowButton;
    BtnSR: TAdvGlowButton;
    btnViewMap: TAdvGlowButton;
    btnDCalc: TAdvGlowButton;
    GBEndXYView: TPanel;
    cxLabel10: TLabel;
    cxLabel11: TLabel;
    cxtEndXval: TcxTextEdit;
    cxtEndYval: TcxTextEdit;
    btnEClose: TcxButton;
    BtnCenterMng: TAdvGlowButton;
    BtnOptionSexF: TAdvGlowButton;
    BtnOptionSexM: TAdvGlowButton;
    BtnPlusYN: TAdvGlowButton;
    cxLabel13: TcxLabel;
    cxLblRate1: TcxLabel;
    cxLblRate2: TcxLabel;
    cxLblSmartRate: TcxLabel;
    Pnl_BubinV: TPanel;
    cxTBubinMemo: TcxTextEdit;
    cxCurPathRate: TcxCurrencyEdit;
    cxTmWaitTime: TcxTimeEdit;
    cxCurWaitTmRate: TcxCurrencyEdit;
    cxCurRevisionRate: TcxCurrencyEdit;
    lblCurPathRate: TcxLabel;
    lblCurRevisionRate: TcxLabel;
    cxBtnWaitTmRate: TAdvGlowButton;
    cxLBubinMemoFlag: TcxLabel;
    BtnOptionCallMu: TAdvGlowButton;
    chkNoSet: TAdvGlowButton;
    chkRangeRate: TAdvGlowButton;
    BtnSmartRate: TAdvGlowButton;
    btn_ChargeSave: TAdvGlowButton;
    BtnWkAge: TAdvGlowButton;
    BtnWKJAmt: TAdvGlowButton;
    meoBigo: TcxMemo;
    LbmeoBigo: TcxLabel;
		meoBigo2: TcxMemo;
    meoBigo3: TcxMemo;
    LbmeoBigo2: TcxLabel;
    LbmeoBigo3: TcxLabel;
    cxGbReserv: TcxGroupBox;
    Shape16: TShape;
    BtnResJ: TSpeedButton;
    BtnResD: TSpeedButton;
    cxLabel15: TcxLabel;
    dtpResvDate: TcxDateEdit;
    dtpResvTime: TcxTimeEdit;
    cxlblState: TcxLabel;
    CbSecond: TcxComboBox;
    cxLabel14: TcxLabel;
    BtnResvClose: TcxButton;
    BtnResvCsl: TcxButton;
    BtnResv: TcxButton;
    lbA1: TListBox;
    lbB1: TListBox;
    lbC1: TListBox;
    lbD1: TListBox;
    lbE1: TListBox;
		pnlWkAge: TPanel;
		Panel1: TPanel;
    cxLabel20: TcxLabel;
    edtWkFAge: TcxTextEdit;
    cxLabel1: TcxLabel;
		edtWkTAge: TcxTextEdit;
    cxLabel5: TcxLabel;
    btnWkAgeClose: TcxButton;
    BtnResvView: TcxButton;
    btnAddBigo: TcxButton;
    tmrCShare: TTimer;
    pnlRShare: TPanel;
    btnRCShare: TcxButton;
    cxLabel21: TcxLabel;
    lblCShareJId: TcxLabel;
    pnlShare: TPanel;
    lblCShareRId: TcxLabel;
    btnCShareClose: TcxButton;
    lblTS1: TcxLabel;
    btnCShareChange: TcxButton;
    lblCShareRJ: TcxLabel;
    tmrRate: TTimer;
    PnlWkJi: TPanel;
    cxLblWkJAmt: TcxLabel;
    pnlCallBellAll: TPanel;
    cxLabel6: TcxLabel;
    lbUpsoName: TcxLabel;
    lbUpsoPee: TcxLabel;
    pnlCallBell: TPanel;
    tmUpsoPnl: TTimer;
    gbRQAList: TcxGroupBox;
    grdRQAList: TcxGrid;
    RQAListView: TcxGridDBTableView;
    cxGridDBColumn6: TcxGridDBColumn;
    RQAListViewColumn9: TcxGridDBColumn;
    cxGridDBColumn7: TcxGridDBColumn;
    cxGridDBColumn8: TcxGridDBColumn;
    cxGridDBColumn9: TcxGridDBColumn;
    RQAListViewColumn10: TcxGridDBColumn;
    cxGridDBColumn10: TcxGridDBColumn;
    cxGridDBColumn11: TcxGridDBColumn;
    cxGridDBColumn12: TcxGridDBColumn;
    cxGridDBColumn13: TcxGridDBColumn;
    RQAListViewColumn1: TcxGridDBColumn;
    RQAListViewColumn2: TcxGridDBColumn;
    RQAListViewColumn3: TcxGridDBColumn;
    RQAListViewColumn4: TcxGridDBColumn;
    RQAListViewColumn5: TcxGridDBColumn;
    RQAListViewColumn6: TcxGridDBColumn;
    RQAListViewColumn7: TcxGridDBColumn;
    RQAListViewColumn8: TcxGridDBColumn;
    cxGridLevel1: TcxGridLevel;
    btnRQALExit: TcxButton;
    popQRMenu: TPopupMenu;
    miQRate: TMenuItem;
    miQRList: TMenuItem;
    cb_06: TAdvGlowButton;
		pnlWkLicType: TPanel;
    Panel2: TPanel;
    cxLabel3: TcxLabel;
    btnWkLicTypeClose: TcxButton;
    cbbLicType: TcxComboBox;
    pnlClose: TPanel;
    Image1: TImage;
    PnlModifyTitle: TPanel;
    Image2: TImage;
    cxLblOrderUpInfo: TcxLabel;
    cxLblCuLevel: TcxLabel;
    TT5_1: TTimer;
    TT5: TTimer;
    trmPnlSuggest: TTimer;
    pnl_LockMent: TPanel;
    lb_LockMent: TLabel;
    imgLockMent: TcxImage;
    tmLockMent: TTimer;
    Label11: TLabel;
    lblCuMileLost: TLabel;
    cxlblResvG: TcxLabel;
    dtpResvDateJ: TcxDateEdit;
    dtpResvTimeJ: TcxTimeEdit;
    cbTelView: TcxComboBox;
    meoViaArea1: TcxMemo;
    lblCuTel: TcxLabel;
		cb_CarType: TcxComboBox;
    BtnViaLock1: TAdvGlowButton;
    pnl_ViaMent: TPanel;
    lb_ViaMent: TLabel;
    cxButton8: TcxButton;
    btn_LBS: TcxButton;
    pnl_ViaAlert: TPanel;
    btn_ViaCheck: TcxButton;
    pnl_ViaAlert_Title: TcxLabel;
    cxLabel9: TcxLabel;
    cxLabel16: TcxLabel;
    cxLabel17: TcxLabel;
    cxLabel18: TcxLabel;
    btn_ViaSkip: TcxButton;
    cxLabel12: TcxLabel;
    btnMileGive: TcxButton;
    btnMileCharge: TcxButton;
    btnMileList: TcxButton;
    btnCustAppinfo: TcxButton;
    pnl_MileOut: TPanel;
    Shape5: TShape;
    Shape8: TShape;
    Shape4: TShape;
    lb_MileTitle: TcxLabel;
    cbbCuProduct: TcxComboBox;
    cxLabel19: TcxLabel;
    edtMileMemo: TcxTextEdit;
    curOutMileMny: TcxCurrencyEdit;
    cxLabel22: TcxLabel;
    lbMileCaption: TcxLabel;
    btn_MileOut_Close: TcxButton;
    btnMileOut: TcxButton;
    GrpCoupon: TcxGroupBox;
    Shape11: TShape;
    edtCouponHP: TcxTextEdit;
    btnCouponSend: TcxButton;
    btnCouponClose: TcxButton;
    lblCouponDesc: TcxLabel;
    cxLabel25: TcxLabel;
    cxButton9: TcxButton;
    PnlHint: TPanel;
    Lbl_Hint: TLabel;
    Shape_LBS: TShape;
    pnl_AIStart: TPanel;
    lb_AIStart: TLabel;
    cxButton3: TcxButton;
    cbbPayMethod: TcxComboBox;
    cbbPostTime: TcxComboBox;
    curKm: TcxTextEdit;
    curRate: TcxSpinEdit;
    cxDriverCharge: TcxCurrencyEdit;
    edtPostPay: TcxSpinEdit;
    LbDriverCharge: TcxLabel;
    LblPostPay: TcxLabel;
    cbCardSanction: TcxButton;
    BtnQRate: TAdvGlowButton;
    BtnRaLock: TAdvGlowButton;
    btnMileSave: TAdvGlowButton;
    btnCashSave: TAdvGlowButton;
    btnTakAlly: TAdvGlowButton;
    chk_AIReCall: TcxCheckBox;
    pnl_AIOB: TPanel;
    cxButton5: TcxButton;
    lb_AIOB: TcxLabel;
    cb_WiseNutSntest: TcxComboBox;
    pnl_EndDetail_Update: TPanel;
    edt_EndDetail_Update: TcxTextEdit;
    btn_EndDetail_Update: TAdvGlowButton;
    btnEndLocalSave: TAdvGlowButton;
    PnlTitle: TPanel;
    lblCuBubinName: TLabel;
    cxLblActive: TLabel;
    cxCallTitle: TLabel;
    ChkMini: TcxCheckBox;
    ChkGroup: TcxCheckBox;
    BtnFix: TcxButton;
    btnNew: TcxButton;
    BtnClose: TcxButton;
    edt_POIIP: TcxTextEdit;
    edt_RPIP: TcxTextEdit;
		procedure btnCmdExitClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
		procedure BtnViaAddClick(Sender: TObject);
		procedure BtnViaMinus1Click(Sender: TObject);
		procedure BtnResvViewClick(Sender: TObject);
    procedure meoStartAreaKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cxButton46Click(Sender: TObject);
		procedure btnAddBigoClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure meoBigoEnter(Sender: TObject);
    procedure AutoSelectMouseEnter(Sender: TObject);
    procedure AutoSelectMouseMouseLeave(Sender: TObject);
    procedure cb_00Click(Sender: TObject);
    procedure btnSBigo1Click(Sender: TObject);
    procedure btnEpopClick(Sender: TObject);
    procedure btnSCloseClick(Sender: TObject);
    procedure btnECloseClick(Sender: TObject);
    procedure cbbPayMethodPropertiesChange(Sender: TObject);
    procedure cxBtnWaitTmRateClick(Sender: TObject);
    procedure CbCuGbPropertiesChange(Sender: TObject);
    procedure MenuItem3Click(Sender: TObject);
    procedure pnl_chargeClick(Sender: TObject);
    procedure tmMentTimer(Sender: TObject);
    procedure tmFormCloseTimer(Sender: TObject);
    procedure lblNewCustYNClick(Sender: TObject);
    procedure cxButton7Click(Sender: TObject);
    procedure tmrDisAcTimer(Sender: TObject);
    procedure tmrStartPosTimer(Sender: TObject);
    procedure btnCmdJoinClick(Sender: TObject);
    procedure btnCmdWaitClick(Sender: TObject);
    procedure btnCmdQuestionClick(Sender: TObject);
    procedure btnCmdJoinCopyClick(Sender: TObject);
    procedure btnCmdWaitCopyClick(Sender: TObject);
    procedure btnPickupInsertClick(Sender: TObject);
    procedure cxtBubinSearchNameKeyPress(Sender: TObject; var Key: Char);
    procedure cxBtnSelectClick(Sender: TObject);
    procedure cxtBubinSearchNameKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxtBubinSearchNamePropertiesChange(Sender: TObject);
    procedure cxBtnChoiceClick(Sender: TObject);
    procedure cxBtnCloseClick(Sender: TObject);
    procedure cxBubinViewCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure cxBubinViewKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnCustAppinfoClick(Sender: TObject);
    procedure cxBtnCuUpdateClick(Sender: TObject);
    procedure cxBtnCuNewClick(Sender: TObject);
    procedure cxBtnCuDelClick(Sender: TObject);
    procedure cxButton1Click(Sender: TObject);
    procedure meoStartAreaEnter(Sender: TObject);
    procedure meoStartAreaExit(Sender: TObject);
		procedure meoStartAreaKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure meoEndAreaEnter(Sender: TObject);
    procedure meoEndAreaExit(Sender: TObject);
		procedure meoEndAreaKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
		procedure meoEndAreaKeyUp(Sender: TObject; var Key: Word;
			Shift: TShiftState);
    procedure meoViaArea1Enter(Sender: TObject);
    procedure meoViaArea1Exit(Sender: TObject);
    procedure meoViaArea1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure meoViaArea1KeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cboCuLevelPropertiesChange(Sender: TObject);
    procedure cboBranchPropertiesChange(Sender: TObject);
    procedure btnMileOutClick(Sender: TObject);
    procedure btn_ChargeSaveClick(Sender: TObject);
    procedure cbCardSanctionClick(Sender: TObject);
    procedure meoStartAreaPropertiesChange(Sender: TObject);
    procedure btnStartLocalSaveClick(Sender: TObject);
    procedure BtnCustAddClick(Sender: TObject);
    procedure btnCmdMultiCallClick(Sender: TObject);
    procedure cxCustViewCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure cxCustViewEditKeyPress(Sender: TcxCustomGridTableView;
      AItem: TcxCustomGridTableItem; AEdit: TcxCustomEdit; var Key: Char);
		procedure btnViewMapClick(Sender: TObject);
    procedure BtnStLockClick(Sender: TObject);
    procedure BtnEdLockClick(Sender: TObject);
    procedure N3Click(Sender: TObject);
		procedure curRateEnter(Sender: TObject);
    procedure curRateExit(Sender: TObject);
    procedure curRateKeyDown(Sender: TObject; var Key: Word;
			Shift: TShiftState);
    procedure curRateKeyPress(Sender: TObject; var Key: Char);
    procedure curRateKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cbbPostTimePropertiesChange(Sender: TObject);
    procedure edtPostPayExit(Sender: TObject);
    procedure edtPostPayKeyDown(Sender: TObject; var Key: Word;
			Shift: TShiftState);
		procedure edtPostPayKeyPress(Sender: TObject; var Key: Char);
		procedure edtPostPayPropertiesChange(Sender: TObject);
    procedure LblPostPayClick(Sender: TObject);
    procedure cboBrOnlyPropertiesChange(Sender: TObject);
    procedure LbDriverChargeClick(Sender: TObject);
		procedure meoBigoKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxLblOrderUpInfoMouseLeave(Sender: TObject);
    procedure cxLblOrderUpInfoMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure btnBubinSchClick(Sender: TObject);
    procedure cxBtnSpSaveClick(Sender: TObject);
    procedure cxCurPathRateKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxTmWaitTimeKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxCurWaitTmRateKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxCurRevisionRateKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxCurRevisionRateExit(Sender: TObject);
    procedure BtnResJClick(Sender: TObject);
    procedure BtnResvClick(Sender: TObject);
    procedure btnCmdUpdSaveClick(Sender: TObject);
    procedure lblCurRevisionRateClick(Sender: TObject);
    procedure lblCurPathRateClick(Sender: TObject);
    procedure BtnCloseClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure BtnResvCslClick(Sender: TObject);
    procedure BtnResvCloseClick(Sender: TObject);
    procedure cxTxtBrNameCaptionMouseEnter(Sender: TObject);
    procedure cboBranchMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure FormActivate(Sender: TObject);
    procedure BtnOptionSexMClick(Sender: TObject);
    procedure BtnOptionSexFClick(Sender: TObject);
		procedure FormShow(Sender: TObject);
    procedure meoBigoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
		procedure meoBigo2KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
		procedure meoCuCCMemoKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure mmoCbMemoKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure meoCuWorMemoKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxButton2Click(Sender: TObject);
    procedure cxLblOrderUpInfoClick(Sender: TObject);
		procedure lst_BRListDblClick(Sender: TObject);
    procedure lst_BRListExit(Sender: TObject);
    procedure lst_BRListKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxTSearchMainTelKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxTSearchMainTelKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
		procedure cxLCuNmFlgClick(Sender: TObject);
    procedure cxLBuNmFlgClick(Sender: TObject);
    procedure cxLCuCCMemoFlgClick(Sender: TObject);
    procedure meoCuCCMemoEnter(Sender: TObject);
    procedure meoCuCCMemoExit(Sender: TObject);
    procedure meoCuCCMemoPropertiesChange(Sender: TObject);
    procedure cxLCuWorMemoFlgClick(Sender: TObject);
    procedure meoCuWorMemoEnter(Sender: TObject);
    procedure meoCuWorMemoExit(Sender: TObject);
    procedure meoCuWorMemoPropertiesChange(Sender: TObject);
    procedure cxLSearchMainTelFlgClick(Sender: TObject);
    procedure cxLCuTel2FlgClick(Sender: TObject);
    procedure cxLCuTelFlgClick(Sender: TObject);
    procedure cxLStartAreaFlagClick(Sender: TObject);
    procedure cxLEndAreaFlagClick(Sender: TObject);
    procedure meoEndAreaPropertiesChange(Sender: TObject);
    procedure cxLBubinMemoFlagClick(Sender: TObject);
    procedure cxTSearchMainTelMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure cboBrOnlyEnter(Sender: TObject);
    procedure GB3MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure cxGroupBox7MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure cxGroupBox6MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure cxGroupBox10MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure PnlRightMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure cxDriverChargeEnter(Sender: TObject);
    procedure cxDriverChargeExit(Sender: TObject);
    procedure cxDriverChargePropertiesChange(Sender: TObject);
    procedure edtPostPayEnter(Sender: TObject);
    procedure LbmeoBigoClick(Sender: TObject);
    procedure LbmeoBigo2Click(Sender: TObject);
    procedure meoBigoExit(Sender: TObject);
		procedure meoBigo2Exit(Sender: TObject);
    procedure meoBigoPropertiesChange(Sender: TObject);
    procedure meoBigo2PropertiesChange(Sender: TObject);
    procedure cxImage1Click(Sender: TObject);
    procedure cboBranchClick(Sender: TObject);
    procedure cboBrOnlyClick(Sender: TObject);
    procedure Panel3MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure cxCurRevisionRateEnter(Sender: TObject);
    procedure cxCurRevisionRatePropertiesChange(Sender: TObject);
    procedure cxCurPathRatePropertiesChange(Sender: TObject);
    procedure cxCurPathRateEnter(Sender: TObject);
    procedure cxCurPathRateExit(Sender: TObject);
    procedure meoCuCCMemoFocusChanged(Sender: TObject);
    procedure meoCuWorMemoFocusChanged(Sender: TObject);
    procedure meoStartAreaFocusChanged(Sender: TObject);
    procedure meoEndAreaFocusChanged(Sender: TObject);
    procedure cxDriverChargeFocusChanged(Sender: TObject);
    procedure edtPostPayFocusChanged(Sender: TObject);
    procedure cxCurPathRateFocusChanged(Sender: TObject);
    procedure cxCurRevisionRateFocusChanged(Sender: TObject);
    procedure meoBigoFocusChanged(Sender: TObject);
		procedure meoBigo2FocusChanged(Sender: TObject);
    procedure BtnViewMemoClick(Sender: TObject);
    procedure curRatePropertiesChange(Sender: TObject);
    procedure cxGroupBox8MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure TT4Timer(Sender: TObject);
    procedure AdvGridSjEnter(Sender: TObject);
    procedure AdvGridSjClickCell(Sender: TObject; ARow, ACol: Integer);
    procedure meoStartAreaMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure cxtCuTelMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure BtnSmartRateClick(Sender: TObject);
    procedure AdvGridSjKeyPress(Sender: TObject; var Key: Char);
    procedure btnCmdNoSMSClick(Sender: TObject);
    procedure BtnCallClick(Sender: TObject);
    procedure BtnCall2Click(Sender: TObject);
    procedure tmrKeyDownTimer(Sender: TObject);
    procedure FormDeactivate(Sender: TObject);
    procedure CbSecondPropertiesChange(Sender: TObject);
    procedure AdvGridSjKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure tmrXYChangeTimer(Sender: TObject);
    procedure cxtStartYvalPropertiesChange(Sender: TObject);
    procedure cxtEndYvalPropertiesChange(Sender: TObject);
    procedure AdvGridSjKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure curKmEnter(Sender: TObject);
    procedure curKmExit(Sender: TObject);
    procedure tmrDistanceTimer(Sender: TObject);
    procedure BtnSREnter(Sender: TObject);
    procedure BtnSRExit(Sender: TObject);
    procedure BtnSRClick(Sender: TObject);
    procedure PnlBtmMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure tmrResponseTimer(Sender: TObject);
    procedure N5Click(Sender: TObject);
    procedure tmrWKSearchTimer(Sender: TObject);
    procedure btnDCalcClick(Sender: TObject);
    procedure tmrThRealDisTimer(Sender: TObject);
    procedure tmrChargeTimer(Sender: TObject);
    procedure BtnOptionCallMuClick(Sender: TObject);
		procedure ChkMiniClick(Sender: TObject);
		procedure chkCenterMngClick(Sender: TObject);
    procedure lblCuBubinNameMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure PnlTitleMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure ChkGroupClick(Sender: TObject);
    procedure cxtStartXvalChange(Sender: TObject);
    procedure cxtEndXvalChange(Sender: TObject);
    procedure edt_CardMemoEnter(Sender: TObject);
    procedure edt_CardMemoExit(Sender: TObject);
    procedure edt_CardMemoFocusChanged(Sender: TObject);
    procedure edt_CardMemoKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edt_CardMemoPropertiesChange(Sender: TObject);
    procedure cxLCuCCMemoFlg1Click(Sender: TObject);
    procedure cxTBubinMemoEnter(Sender: TObject);
    procedure cxTBubinMemoExit(Sender: TObject);
    procedure cxTBubinMemoFocusChanged(Sender: TObject);
    procedure cxTBubinMemoPropertiesChange(Sender: TObject);
    procedure BtnSimMemoClick(Sender: TObject);
    procedure curRateMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure tmHoTranRltTimer(Sender: TObject);
    procedure cxBtnHoTransClick(Sender: TObject);
    procedure N1SeoulClick(Sender: TObject);
    procedure ChkCuSmsNoClick(Sender: TObject);
    procedure dtpResvDatePropertiesChange(Sender: TObject);
    procedure dtpResvTimePropertiesChange(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure trmBubinStateTimer(Sender: TObject);
    procedure BtnPlusYNClick(Sender: TObject);
    procedure tmrAutoCallTimer(Sender: TObject);
    procedure BtnFixClick(Sender: TObject);
    procedure BtnWkAgeClick(Sender: TObject);
    procedure btnWkAgeCloseClick(Sender: TObject);
    procedure edtWkFAgeKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edtWkTAgeKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure chkViewLevelClick(Sender: TObject);
    procedure TT4_1Timer(Sender: TObject);
    procedure LbmeoBigo3Click(Sender: TObject);
    procedure meoBigo3Exit(Sender: TObject);
    procedure meoBigo3FocusChanged(Sender: TObject);
    procedure meoBigo3KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoBigo3PropertiesChange(Sender: TObject);
    procedure TT3_1Timer(Sender: TObject);
    procedure btnKtPOIYClick(Sender: TObject);
    procedure btnHiPOIYClick(Sender: TObject);
    procedure btnCtrlVCancelClick(Sender: TObject);
    procedure cxtStartXvalClick(Sender: TObject);
    procedure Image1Click(Sender: TObject);
    procedure curRateMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure curRateEditing(Sender: TObject; var CanEdit: Boolean);
    procedure cboBrOnlyKeyPress(Sender: TObject; var Key: Char);
    procedure cxtCuTelKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure tmrCShareTimer(Sender: TObject);
    procedure BtnQRateClick(Sender: TObject);
    procedure tmrRateTimer(Sender: TObject);
    procedure tmUpsoPnlTimer(Sender: TObject);
    procedure pnlCallBellAllClick(Sender: TObject);
    procedure btnRQALExitClick(Sender: TObject);
    procedure RQAListViewCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure RQAListViewEditKeyPress(Sender: TcxCustomGridTableView;
      AItem: TcxCustomGridTableItem; AEdit: TcxCustomEdit; var Key: Char);
    procedure RQAListViewStylesGetContentStyle(Sender: TcxCustomGridTableView;
      ARecord: TcxCustomGridRecord; AItem: TcxCustomGridTableItem;
      var AStyle: TcxStyle);
    procedure miQRListClick(Sender: TObject);
    procedure miQRateClick(Sender: TObject);
    procedure RQAListViewColumn10GetProperties(Sender: TcxCustomGridTableItem;
      ARecord: TcxCustomGridRecord; var AProperties: TcxCustomEditProperties);
    procedure popQRMenuPopup(Sender: TObject);
    procedure RQAListViewColumn10PropertiesButtonClick(Sender: TObject;
      AButtonIndex: Integer);
    procedure btnWkLicTypeCloseClick(Sender: TObject);
    procedure edtCuNameKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure TT5_1Timer(Sender: TObject);
    procedure TT5Timer(Sender: TObject);
    procedure trmPnlSuggestTimer(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure BtnRaLockClick(Sender: TObject);
    procedure tmLockMentTimer(Sender: TObject);
    procedure lb_LockMentClick(Sender: TObject);
    procedure lblStartAreaNamePropertiesChange(Sender: TObject);
    procedure cxTSearchMainTelExit(Sender: TObject);
    procedure cxTSearchMainTelMouseLeave(Sender: TObject);
    procedure cxTSearchMainTelMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure cxtCuTel2PropertiesChange(Sender: TObject);
    procedure meoViaArea1PropertiesChange(Sender: TObject);
    procedure cbTelViewPropertiesChange(Sender: TObject);
    procedure BtnCenterMngClick(Sender: TObject);
    procedure BtnViaLock1Click(Sender: TObject);
    procedure cxButton8Click(Sender: TObject);
		procedure btn_LBSClick(Sender: TObject);
    procedure btn_ViaCheckClick(Sender: TObject);
    procedure btn_ViaSkipClick(Sender: TObject);
		procedure btnMileGiveClick(Sender: TObject);
    procedure cbbCuProductKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cbbCuProductPropertiesChange(Sender: TObject);
    procedure cxButton9Click(Sender: TObject);
    procedure btnMileListClick(Sender: TObject);
		procedure curOutMileMnyKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edtMileMemoKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btn_MileOut_CloseClick(Sender: TObject);
    procedure Shape_LBSMouseLeave(Sender: TObject);
    procedure Shape_LBSMouseEnter(Sender: TObject);
    procedure cxButton3Click(Sender: TObject);
    procedure lb_AIStartClick(Sender: TObject);
    procedure btnMileSaveClick(Sender: TObject);
    procedure btnCashSaveClick(Sender: TObject);
    procedure btnTakAllyClick(Sender: TObject);
    procedure chk_AIReCallMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure cxButton5Click(Sender: TObject);
    procedure lb_AIOBClick(Sender: TObject);
    procedure cxReEndAreaClick(Sender: TObject);
    procedure btn_EndDetail_UpdateClick(Sender: TObject);
    procedure btnEndLocalSaveClick(Sender: TObject);
    procedure edt_EndDetail_UpdateKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxtCuTelKeyPress(Sender: TObject; var Key: Char);
  private
    { Private declarations }
    sRespSParam1, sRespSParam2, sRespSParam3 : String;  // 와이즈넛 성공/실패 여부 전송 파라메타 - 출발지
    sRespEParam1, sRespEParam2, sRespEParam3 : String;  // 와이즈넛 성공/실패 여부 전송 파라메타 - 도착지

    sSSlip : array [0..19] of string;
		iSCount : array [0..19] of Integer;
    iSRow : array [0..19] of Integer;
    sESlip : array [0..19] of string;
		iECount : array [0..19] of Integer;
    iERow : array [0..19] of Integer;

		gsStArea : array [0 .. 19] of String;  // 출발지 내용 저장 - 경유지 분리건으로 선언   2018.07.18 LYB
    gsEdArea : array [0 .. 19] of String;  // 도착지 내용 저장 - 경유지 분리건으로 선언

    CustGroup : TCustGroup;

    AUseMileage : Boolean;
    lsFirstShow : Integer;

    sProdName : String;

    sPreSuggestWord : String;

 		SCboLevelSeq : TStringList;

    sAnsiSchTxt : AnsiString;

    FHidePhoneNum: Boolean; // 수정전문 요청후 화면 초기화 완료여부

    lvs_ReceiveText: string; // 임시변수 : Socket에서 사용
    sNowRate: string; // 현재 지사의 기본요금 설정액.

		loc_bUpdateLock: boolean;   // 수정화면 Lock 설정 여부.[True:설정, False:미설정]

		FBigoList: TStringList;
		FSpopList: TStringList;
		FEpopList: TStringList;

    FCurrBigo: TcxMemo;
    FCurrSpop: TcxMemo;
    FCurrEpop: TcxMemo;

    giRealKmCnt, giRealKmIdx : Integer;
		searchBRlist: TStringList;  //접수장 지사명, 대표번호 검색 시 인덱스 저장 2013.06.15  KHS

    loc_Up_Recv_YN: boolean;

    loc_TmClose: string; // 화면 종료 타이머 변수. CDS. 080830.

    lsBr_KeyNumber : String;

		loc_sHoTransArea: string; // 콜라우팅 호전환 지역 정보 저장.

		pbPayMethod : Integer;   // 법인콜 체크박스 선택시 이전값 되돌리기 위한 변수.
		glsMapRltVal : TStringList;  // 출/도착지 조회 결과값을 매칭 점수 저장.

		loc_RateNOT: boolean; // 요금 계산을 막음.

    pbISStartEndXY : Boolean;   // 20130724 LYB 고객전화번호 조회 시 출발지/도착지에 자료가 있는지 없는지 여부 체크

    // ------------------------------  고객
    FCustBrTelYN: string;

    PAY_METHOD_BUSAN_YN : Boolean;   // 하트콜 사용유무 20150610

    sTelRanDom : String;

		bOther : Boolean; //타업체 접수건 여부 f:없음. T:있음     2016.07.16 KHS

		FCustChangeInfo : TCustChangeInfo; //콜링 오더의 지사변경 시 고객 기본정보 유지를 위하여 사용 2016.07.20 KHS

		gUpdate_CardTranNo : string; //수정창(결제구분 = 후불(카드)) 오픈 시 원 결제 Tran_No를 저장한다 2016.08.24 KHS

		bCurRateEditMode : Boolean;
		
		gsCuCallBellID, gsOrderCallBellID, gsUpdateCallBellStatus, gsUpdateCallBellID : string; //콜벨업소 아이디(고객정보저장된 ID, 오더정보에저장된ID), 수정 시 저장될 ID

		sNaverSuggest : string; //네이버 자동완성 검색어

		gsKDWkHp : string; //KD드라이버 연락처. 빈값이 아니면 KD기사

		giDesignMargin : integer;

		bKakaoOrder : Boolean; //수정창 오픈시 카카오 오더여부 Ture : 카카오 False : 일반
		bResToJoin : Boolean; //대기 해제 여부 2019.06.18 KHS
		bJoinBtn : Boolean; //접수버튼 클릭여부(T : 수정버튼클릭) 대기오더 접수로 전환에서 사용

		bAppOrder, bAppOrderOpen : Boolean; //앱오더 여부 True-앱오더, false-일반오더, 앱오더창 여부 True-앱오더, false-일반오더; 
		gAppSlip, gAppInDate : string;// 앱접수창 오픈용 접수번호화 접수일자
		
		procedure mniUserClick(Sender: TObject);
		procedure mniSpopClick(Sender: TObject);
    procedure mniEpopClick(Sender: TObject);
		procedure LoadPayMethod;
    procedure LoadPostTime;
    function IsPayMethodPost: Boolean;
		function GetPayMethod: string;
    procedure SetPayMethod(const Value: string = PAY_METHOD_MONEY);
    function GetPostTime: string;
    procedure SetPostTime(const Value: string);
    procedure proc_Wisenut_GetSuggest(word: string);
    procedure proc_WiseNut_Response( sPoiName, sGubun, sNo : String );
    procedure proc_Wisenut_GetSuggest_Proc(wURL: String);
		procedure proc_Naver_GetSuggest(word: string);
		procedure proc_Naver_GetSuggest_Proc(wURL: String);
    procedure Init_AdvGridSj;
		procedure pCall_Cust(sCtHp: string);
    procedure SetMunuChecked(sName: String; bCheck: Boolean);
    procedure _SetItem(Combo : TcxComboBox; AValue: string);
    procedure ptmrThRealDisTimer(var RealKmPtr: TRealKmRecord);
		function Proc_HoTransferReq(sAreaCode, sAreaName: string): boolean;
    function fGetCity(sGubun, sCity, sWard, sStree, sDep : String): String;
    function proc_Wisenut_GetTelPOI_Proc(wURL, word: string): Boolean;
		function proc_Wisenut_GetTelPOILast(wURL, word: String): Boolean;

    property PayMethod: string read GetPayMethod write SetPayMethod;
    property PostTime: string read GetPostTime write SetPostTime;
    procedure RemovePriceDesc;

    function fGetDiffDay( sEndDate : String ) : String;
    function GetTimeGap(StrStartDate, StrEndDate: string): Int64;

		function proc_AIOB_CtrlYN : string;
		function proc_TakCall_CtrlYN : string;
		function proc_PlusCall_CtrlYN : string;
		function proc_PlusCall_YN_Cont: string;
		function proc_PlusCall_RateYN: Boolean;
		function func_LBS_YN: Boolean;
		function func_CashPayMileSave_YN: Boolean;
		function func_MilePayMileSave_YN: Boolean;

    //기사수수료 검색
		procedure Proc_Driver_Charge;

    //  사용자 추가 지역 저장
    procedure proc_Save_Area(iGubun: Integer);
    // 접수전 기본값 체크..
    function NotNullCheck(b24HourCheck: boolean = False): Boolean;
		// 대표번호 검색 리스트 생성 2013.06.15 KHS..
		function Func_KeyNumberList_Search: Boolean;
    // 대표번호로 조회 후 결과 처리를 한다.
    procedure Proc_NumberInsert(rxxml: String);
		// 오토콜 고객번호로 조회 후 결과 처리를 한다.
		procedure Proc_AutoCallInsert(rxxml: String);

		// 조회 한 오더 정보를 수정 한다. : DB Update~~
		procedure Proc_OrderUpdateSave(AStatus: string = '');

		procedure Proc_recieve(ls_rxxml: String);
    // 접수 전에 조회 조건 관련 전역변수 초기화..
    procedure SetPrivateVariable;
    // 대기시간 메뉴 클릭시 대기시간, 대기요금 입력 이벤트 처리..
    procedure Proc_WTRateMenu_Click(Sender: TObject);
    // 대기시간별 요금 메뉴 생성.
    procedure Proc_WTRMenuCreate(sTitle, sComponentName: string; iTagMoney: Integer);
    // 선택 오더에 대해 Lock 을 설정한다.
    procedure Proc_AcceptLock(ss_Gubun: string);
		// 오더 일련번호를 받아 오더 수정정보를 조회 한다.  sTodayGubun:1(당일오더), 2:(과거오더)
		procedure Proc_ConfSlip_Select_New(sConfSlip, sTodayGubun: string);
    // 버튼 활성/비활성 처리.
    procedure Proc_BtnEnabled(bTF: boolean = True);
		// 지사별 멘트 구하기..  CDS. 080827.
		function Func_brtel_memo(sBrNo, sKeyNum: string): string;
    // 받아온 경유지 정보를 배열에 저장한다.
    procedure proc_ViaInfo_insert(rxxml: String);
    // 접수등록 후 결과를 처리 한다.
    procedure Proc_SaveReturn(ss_RxXml: String);
		// 고객 기본정보를 저장 한다.
    procedure Proc_CustBasicSave;
    // 고객 SMS거부 정보를 저장한다.
		procedure Proc_CustSMSSave;
    // 고객기본정보를 저장 요청 후 결과 처리를 한다.
    procedure Proc_CustBasicSave_Result(rxxml: String);
    // 고객 SEQUENCE 조회 해 온다.
		procedure Proc_CuSeq_Select;
    // 고객 SEQUENCE 조회에 대한 결과를 처리 한다.
    procedure Proc_RequestResult(ls_rxxml: String; ls_ClientKey: string);
		// [수정화면 띄우기..]오더일련번호:접수번호로 조회 후 그 결과 처리를 한다.
		procedure Proc_ConfSlipSelectResult(rxxml: String);
		// 지사명으로 지사리스트 뿌리기..  2013.06.15 KHS
		function proc_BrNameList_Search: boolean;

    // 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
    procedure Proc_Cust_AreaSave(sStartDest: string);
    // 조회 고객삭제를 한다.
    procedure proc_delete_customer;

    function IsMultiCallFixPrice: Boolean;

    procedure Proc_GetTelPOISearch( vTelNo : String );

		// 오더를 접수등록을 한다.
    procedure Proc_OrderJoinIns;
    // 오더를 대기로 접수 한다.
    procedure Proc_OrderWaitJoinIns;
    // 오더를 문의로 접수 한다.
    procedure Proc_OrderQuesJoinIns;
    // 오더 수신거부 등록을 한다.
    procedure Proc_OrderSMSRecvNo;
    // 주문 접수를 처리 한다.
		procedure Proc_Save(ss_Mode: string);

    procedure SetCustBrTelYN(const Value: string); {Domain: '': Unkown, 'y': yes, 'n': no}

    // 법인정보를 조회한다.
    procedure Proc_BubinListSearch;
    // 고객정보 컨트롤을 초기화 한다.
    procedure ControlClear(bTF: boolean = False);
    // 법인 선택 정보를 보여준다.
    procedure Proc_BubinChoice;

    // 수정일 경우,,  경유지 정보를 조회 한다.
    procedure proc_ViaInfo;

		procedure SetCboBranch(bBrNoSetType: boolean = False);

    procedure LoadCustLevel;
    procedure SetCustLevelData;
    procedure DefaultCustLevel;
    function GetCustLevelSeq: string;
    procedure SetCustLevelSeq(ASeq: string);

		procedure SetCustAppInfo(AAppCode, AAppLastRegDate, AAppLastDelDate, AAppLastFinishDate, AAppCuArea, AAppTermModel, AAppTermOS, AAppDelYn: string);
    // 고객 당일 오더 구분 : 폼의 라벨 컨트롤 칼라를 설정 한다.
    procedure SetCustControlColor(bType: boolean = False);
		procedure CheckResvDateTime( bView : Boolean );

		procedure ReSetPosition(ComponentName, ComponentGubun: string; iTop, ileft, iHeight, iWidth : integer);
		procedure ReSetVisible(ComponentName, ComponentGubun: string);
		procedure pCompareQRateInfo;
    function func_ecukrCheck: Boolean;
		procedure pSetSearchMainTel( bView : Boolean );

		function func_ViaCheck(AStart : String): Boolean;

    function GetPriceFromProduct(AStr: string): Integer;
		procedure RequestMobileCoupone(ACuSeq, AHP: string; ACharge: Integer);
		procedure RequestData(AData: string);
		procedure ResponseData(AXmlData: string);
		// 고객 마일리지를 충전 처리 한다.
		// 고객 마일리지를 즉시차감 처리 한다.
		procedure Proc_CustMileDeduct(ATag : integer; AMsg:string);
		procedure SetCuProduct(AProdName: string; AProdPrice: Integer);
		function IsUseCoupon(ABrNo: string): Boolean;
		function func_ResToJoin(AGubun, ASlip, AStatus : string): Boolean;
    procedure proc_CaActiveComplete;
	public
		{ Public declarations }

		Jon03Tag : Integer;

		ViaSA1        : array[1..5] of string;  // 경유지 시도
		ViaSA2        : array[1..5] of string;  // 경유지 시군구
		ViaSA3        : array[1..5] of string;  // 경유지 읍면동
		ViaAreaDetail : array[1..5] of string;  // 경유지 검색어
		ViaAreaName   : array[1..5] of string;  // 경유지 POI
		DocId         : array[1..5] of string;  // UID
    CellSel       : array[1..5] of String;  // 셀선택구분
    SchWord       : array[1..5] of String;  // 검색어
		XposVia       : array[1..5] of string;  // 추가된 경유지 X좌표
		YposVia       : array[1..5] of string;  // 추가된 경유지 Y좌표
		GUIDE_X       : array[1..5] of string;  // 추가된 경유지 GUIDE_X좌표
		GUIDE_Y       : array[1..5] of string;  // 추가된 경유지 GUIDE_Y좌표

    fCruKm : Real;   // 거리
    fChgKm : Real;   // 배수거리
    fDirKm : Real;   // 직선거리
    fTotalTime : Real;  //  소요시간
    fViaKm : Real;   // 경유거리
    fStEdKm : Real;   // 경유계산시 출도착지 거리
    bViaKm : Boolean; // 경유여부

    RVHandle : Hwnd;

		giKmComplet : Boolean;
    giViaKmComplet : Boolean;
    giKmComPletG : String;

    pJON01Dock : TUNDOCKMNG;

    gsRanDom, gslsText, gsNaverRanDom : AnsiString;
    gilsCnt : Integer;
    gbEnter : Boolean;

		gsCuTelHint : string;    // 검색전 전화번호 저장(검색후 다른지 비교)

 		FResize : Boolean;
		locNowControlName: string; // 현재 활성화된 컨트롤 명.

		ViaNowTag : integer;   //현재 입력중인 경유지위치
		ViaADDTag : integer;   //현재 추가한 경유지위치

    blChkCuSMS, blCompulWor : Boolean;   // 기사 강제 배차
    sWkSabun : String;

		cxViaAreaName : array[2..5] of TcxLabel;
		meoViaArea    : array[2..5] of TcxMemo;
		BtnViaMinus   : array[2..5] of TAdvGlowButton;
		BtnViaLock    : array[2..5] of TAdvGlowButton;

		FIsCalcPrice: Boolean;  // JON03에서 고객 전화번호로  조회시 사용함.
		sTaksong, sTakHwak, sStickCall, sLicType : string; //탁송콜, 스틱콜 여부 기본 :n, n 2012.04.24 KHS //탁송확대 추가 2017.04.07 KHS

		lcsCu_seq: string; // 현재 선택된 고객seq
		locHDNO, locBRNO, locKNum, locSndTime, locAutoCallYn : string;  // 조회 고객 본사, 지사코드, 대표번호 임시저장.
		sOrgHDNO, sOrgBRNO, sOrgKNum : string ; //수정창 오픈 시 최초 본사, 지사, 대표번호, 고객전화번호
    locCustHP_MainNum_Search: string;

    sBHSAddr, sBHEAddr : String;
		bAUTOCMDQUESTION : Boolean; // 접수설정에서 종료 시 자동 문의 처리 할경우 종료 무한 루프 방지 위함  20120801  LYB

		gJONStaChkXY, gJONEndChkXY : TJONStaChkXY;  // 출발지 좌표 오류 검증을 위한 내부 레코드 변수 20120806 LYB

		locsCuTel, locsCuTel2, locsCuTelTxtBoxVal: string;
    locbWkToCust: Boolean;

    J30ShowS, J30ShowE : Boolean;      //접수, 수정, 문의 에 따른 조회창 띄울지 여부값

    TmplcsSta1, TmplcsSta2, TmplcsSta3, TmplcsSta4, TmplcsSta5, TmplcsX, TmplcsY, TmpDef : String;  // KT POI검색시 과거이용내역 POI 임시 저장

		lcsSta1, lcsSta2, lcsSta3, lcsSta4, lcsConfAREA4, lcsStaDocId, lcsStaCellSel, lcsStaSchWord, lcsStaDebug, lcsStaUrl, GS_Grid_DEP : string; // 출1, 출2, 출3
		lcsEnd1, lcsEnd2, lcsEnd3, lcsEnd4, lcsEndDocId, lcsEndCellSel, lcsEndSchWord, lcsEndDebug, lcsEndUrl, GS_Grid_DES : string; // 도1, 도2, 도3
		lg_Save: string;       //저장구분 1:저장, 2:업데이트

		StartListN, EndListN : String;    // 출 도착지 리스트 선택 시 어떤 리스트 선택했는지 번호값(1: 지역리스트, 2: 상세지명, 3: 포탈검색)

		locCardPaySeq, locCardTranNo, locCardPayInfo : string; // 결제일련번호, 거래번호, 카드결제정보저장(파이프 구분자로 저장됨)
    locLogSeq, locDNIS: string;
    locWkSabun, locWkBrNo: string; // 조회기사 사번, 기사지사코드 저장.

		OrgRate : Integer;  //요금저장변수 2012.04.23 KHS
		gRate_Update : Integer;  //수정창 오픈시 최초 요금  2018.12.11 KHS

		sCust_Gubun : string; //고객인지 기사인지 구분 1:기사, 2:고객, 0 : 기사+고객 2013.05.22 KHS
    FHasTodayData: Boolean; // 당일 내역 존재 여부
    FWk_sabun : String;  // 기사 사번

		Pay_Gubun : string;    // 결제구분(현금, 카드등)

    sRet, eRet : Integer;          //고객정보에 출발지 도착지 정보확인변수 2012.04.18 KHS

		Only_Exit : Boolean; //창 종료 구분

		FType : integer; //다중 요금제 선택 시 선정된 요금제 순서 20140625 KHS

		//앱고객 정보 2013.03.30 KHS
		sAppCode, sAppLastRegDate, sAppLastDelDate, sAppLastFinishDate, sAppCuArea, sAppTermModel, sAppTermOS, sAppDelYn, sFirstInSource : string;

		gCardStatus : string;      //수정창(결제구분 = 후불(카드)) 카드 결제 상태를 저장한다 0: 승인, 1: 취소  2016.08.24 KHS

    gsrKey : String;

    ABubinStateIndex : integer; //0:정상, 1~2 : 이용제한 , 3 : 기타(정상이용)

		giArea_Charge_YN : String;

		procedure AppendPostDesc;
    procedure RemovePostDesc;

    property CustBrTelYN: string read FCustBrTelYN write SetCustBrTelYN;

    procedure SearchCuTel(AIsUpdate: Boolean = False);

		property HidePhoneNum: Boolean read FHidePhoneNum write FHidePhoneNum;

		function IsNotModifyPrice: Boolean;

    function fnc_RealKmThread_End : Boolean;

    procedure LoadBigoList;
    procedure LoadSpopList;
    procedure LoadEpopList;

    function IsBubuinUse: Boolean;

    procedure AddBigo(ABigo: string; Atag : Integer);
		// 접수화면의 기본 컨트롤을 초기화 한다.
		procedure FControlInitial(bTF: Boolean = False; bBrNoSetType: boolean = False);
    procedure AddSpop(ASpop: string; Atag: Integer);
    procedure AddEpop(AEpop: string; Atag: Integer);

    // 지사리스트에서 대표번호, 지사코드로 index를 찾는다.
    function Proc_BrNoListIdxFind(sBrNo, sKeyNumber: string): Boolean;

    // 고객전화번호 마킹처리..
    function Func_Cust_Tel(sCall, sBrch, sBrch2: string; ATodayOrder: Boolean): string; overload;
    function Func_Cust_Tel(sCall, sBrch, sBrch2, sDatetime: string): string; overload;

    // 고객 전화번호로 오토콜 기본정보 조회
		procedure Proc_AutoCallSearch(ss_KeyNumber: string; bCid: Boolean = False);
    // 고객 이용내역을 띄워준다.
    procedure Proc_Jon012Show;
		// 고객 전화번호로 고객 기본정보 조회
		procedure Proc_KeyNumberSearch(ss_KeyNumber: string; bCid: Boolean = False);
    // 전화번호, 고객명 으로 조회 한다... sGB : NAME(고객명으로 조회), : TELL(전화번호로 조회)
    procedure CustomerSearch(sGB: string);
    // 고객조회 그리드에서 그리드 선택시에 고객관련 정보를 입력 컨트롤에 Display~
		procedure Proc_GridCustChoice(iRcIdx: Integer);
    // 고객 등급별 폼 칼라를 변경해 준다.
    procedure Proc_SetFormColor;
		// CU_LEVEL_TYPE : 1 : 고객 등급별 폼 칼라를 변경해 준다.
		procedure Proc_SetFormColor_1(iType: integer);
    // CU_LEVEL_TYPE : 0 : 고객 자동등급별 라벨 칼라를 변경해 준다.
    procedure Proc_SetFormColor_2(iType: integer);
    // 고객 구분에 따른 라벨 칼라를 변경해 준다.
    procedure Proc_SetFormColor_3(iType: integer);
		// 선택된 지사정보에서 지사코드호를 추출 한다.
    function Proc_BRNOSearch: string;
    // 선택된 지사정보에서 본사코드를 추출 한다.
    function Proc_HDNOSearch: string;
    // 선택된 지사정보에서 대표번호를 추출 한다.
		function Proc_MainKeyNumberSearch: string;
    // 접수시에 또는 수정시에 버튼위치 설정.
    procedure SetCmdOrderUpdate;
    // 오더 일련번호를 받아 오더 수정창을 열어 준다.
		procedure Proc_OrderUpdate_Select(sConfSlip, sTodayGb, sInsGubun: string);
    // 오더 일련번호를 받아 오더 수정창을 열어 준다.  sTodayGb:1(당일오더), 2:(과거오더); sInsGubun:"수정", "추가접수"
		procedure Proc_OrderUpdate_Select_New(sConfSlip, sTodayGb, sInsGubun: string);
    // 지사리스트에서 지사코드, 본사코드로 첫번째 대표번호 index를 찾는다.  CDS. 080818.
    function Proc_HeNoBrNoListIdxFind(sHdNo, sBrNo: string): Boolean;
    // 전문 요청후 결과에 따라 화면 Enabled: True/False 처리를 해준다.
    procedure Proc_JobAfterProc(bFormLock: boolean; bOrderInsGB: boolean = False);
    // 고객전화번호 조회 후 결과 처리를 한다.
		procedure Proc_KeyNumberInsert(rxxml: String);
    // 고객 이용내역을 그리드에 보여준다.
    procedure Proc_CustOrderListView;
 		procedure Proc_Cust_History(sCuSeq : string);
    // 고객 기사내역을 표시한다.
    procedure Proc_WorkListView(rxxml: String);
    // 경유지 포함 거리 계산
		procedure proc_dis_alculation(iLow: Integer; bDisp : Boolean);
    // 경유지 포함 실거리 계산
    procedure proc_Realdis_Mng;

    procedure SetPosLblDistance;
 		procedure ViaOK;

		procedure proc_dis_alculation_Via(bSearchFlag: boolean = False);
		// 요금설정에 의한 요금 계산
		function func_search_charge: Integer;
    // 요금설정에 의한 요금 계산 --> [수도권 플러스콜 시행에 따른 고가요금 참고한다.] : 고가요금표 조회.
    function func_search_charge_high: Integer;

    // CID 정보 들어왔을경우 고객정보를 자동 조회 시킨다...
		procedure Proc_CIDEventAutoSearch(sCID, sKeyNumber, sDNIS, sSndTime, sBrNo, sAutoCall : string);

    // 접수창을 닫는다.
		procedure Proc_JoinFromClose;
		// ipwIPPort1 전문을 전송한다. 알림화면을 실행해준다.[bOrderInsGB: True:Ascending False:Descending]
    procedure LocNewSocketSend(lsSendText: string; bOrderInsGB: boolean = False);
    // 선택된 지사정보에서 지사명을 추출 한다.
    function Proc_BrNameReadSearch: string;

    // 출발지, 도착지 컨트롤에서 KeyDown 이벤트시에 호출됨.
    procedure Proc_AreaSearchKDown_Added(Key: Word; sSchTxt : String);

    procedure proc_RealKmPtr_Init;
    procedure pInitFormSize;
    procedure pSetCuTelLabel( iG : Integer );

		procedure SetStartAreaMap(const ASido, AGugun, ADong, ADetail, AX, AY: string);
		procedure SetStartAreaMapNew(const ASido, AGugun, ADong, ADetail, AX, AY: string);
		procedure SetEndAreaMap(const ASido, AGugun, ADong, ADetail, AX, AY: string);
		procedure SetEndAreaMapNew(const ASido, AGugun, ADong, ADetail, AX, AY: string);
    procedure lcs_Clear(Panel: string);
    procedure Hide_Panel(Panel: string; Showhide : integer);
    procedure AllClear;
		procedure SetMileColorChange;
    function fJON01_SmartCharge(AOderWorker, AWeather, ASta1, ASta2, ASta3, ASPOI, ASX, ASY, AEnd1, AEnd2, AEnd3, AEPOI, AEX, AEY, AType : string; Var OType : String) : Integer;

		procedure WMEnterSizeMove(var Msg: TMessage); message WM_ENTERSIZEMOVE;
		procedure WMSizing(var Msg: TMessage); message WM_SIZING;
		procedure WMMoving(var Msg: TMessage); message WM_MOVING;
		procedure WMExitSizeMove(var Msg: TMessage); message WM_ExitSIZEMOVE;
		procedure WMSysCommand(var Msg: TMessage); message WM_SYSCOMMAND;
		procedure WMCommand(var Msg: TMessage); message WM_COMMAND;
		function proc_SmartCharge(var outPriceInfo, outAreaType: string; var  outType: Integer): Integer; //스마트 요금 계산
		procedure pSetFormScroll(iFix, iHeight: Integer);

		
		function func_StartAreaFunc(AStartArea : string):string;
	end;

var
  Frm_JON01: TFrm_JON01;

  MagneticWndProc : TSubClass_Proc;
	dummyHandled : boolean;
	lGlue : Boolean;

  function str2integer(str:AnsiString):integer;
  function str2string(str:string):string;
  function rpos1(substr1: string; str1: string): Integer;  // pos 우측우선조회

implementation

{$R *.dfm}

uses xe_Msg, xe_Func, xe_Lib, xe_xml, xe_XmlProtocal, xe_packet, xe_Dm,
  xe_Query, xe_charge, xe_JON012, Main, uLkJSON, FastStrings, FastStringFuncs,
  xe_JON30, xe_gnl2, xe_COM40, xe_JON018, xe_JON34, xe_CUT012,
  xe_JON015, xe_JON31, xe_JON016, xe_CUT011, xe_WOR11, xe_JON019,
  xe_JON011, xe_JON01Size, xe_JON01SPThread, xe_JON56, xe_JON020,
  xe_AllShot, xe_JON01WNThread, xe_JON58, xe_JON30S, xe_JON00, xe_SETA1,
	xe_JON01Share, xe_JON60, CidSi415Lib, xe_AIC10, xe_JON54
	;

var
  CS : TRTLCriticalSection;

function NewSubFormWnddowProc(Wnd: HWND; Msg, wParam, lParam : Integer):Integer;stdcall; //procedure NewSubFormWnddowProc(Wnd:HWND;msg: integer;wparam:integer;lparam:integer;handled:boolean);stdcall;
var
  dummyHandled: boolean;
  Message: TMessage;
  OldWndProc: Integer;
begin
    if not Assigned(MagneticWndProc) then Exit;

    Message.Msg:=Msg;
    Message.WParam:=wParam;
    Message.LParam:=lParam;
		Message.Result:=0;

    if ( Msg = WM_SYSCOMMAND) or  ( Msg = WM_ENTERSIZEMOVE) or (Msg =WM_ExitSIZEMOVE) or ( Msg =WM_WINDOWPOSCHANGED) or (Msg =WM_COMMAND)then
    begin
      MagneticWndProc(Wnd, Msg, lGlue, Message, dummyHandled);
    end
    else if(Message.Msg=WM_MOVING) or (Msg=WM_SIZING) then
    begin
      MagneticWndProc(Wnd, Msg, lGlue, Message, dummyHandled);
			if( not dummyHandled ) then
        Exit;
    end;

  OldWndProc:=GetWindowLong(Wnd ,GWL_USERDATA);
//  if(OldWndProc=0)then Exit;
  Result := CallWindowProc(Pointer(OldWndProc), Wnd, Msg, wParam, lParam)
end;

//---------------------- Custom Message Handling procedures ----------------------
// These procedures shold be placed per every forms which we want to give magnetic
//  effect.

procedure TFrm_JON01.WMEnterSizeMove(var Msg: TMessage);
begin
	if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  inherited;

  if Assigned(MagneticWndProc) then
     MagneticWndProc(Self.Handle, WM_ENTERSIZEMOVE, lGlue, Msg, dummyHandled);
end;

procedure TFrm_JON01.WMSizing(var Msg: TMessage);
var
   bHandled: Boolean;
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  if not Assigned(MagneticWndProc) then
     inherited
  else
  if MagneticWndProc(Self.Handle, WM_SIZING, lGlue, Msg, bHandled) then
		if not bHandled then
       inherited;
end;

procedure TFrm_JON01.WMMoving(var Msg: TMessage);
var
   bHandled: Boolean;
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  lGlue := True;
  if not Assigned(MagneticWndProc) then
     inherited
  else
  if MagneticWndProc(Self.Handle, WM_MOVING, lGlue, Msg, bHandled) then
    if not bHandled then
       inherited;
end;

procedure TFrm_JON01.WMExitSizeMove(var Msg: TMessage);
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  inherited;

  if Assigned(MagneticWndProc) then
     MagneticWndProc(Self.Handle, WM_ExitSIZEMOVE, lGlue, Msg, dummyHandled);
end;

procedure TFrm_JON01.WMSysCommand(var Msg: TMessage);
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
		inherited;
    Exit;
  end;

  inherited;

  if Assigned(MagneticWndProc) then
     MagneticWndProc(Self.Handle, WM_SYSCOMMAND, lGlue, Msg, dummyHandled);
end;

procedure TFrm_JON01.WMCommand(var Msg: TMessage);
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  inherited;
  if Assigned(MagneticWndProc) then
     MagneticWndProc(Self.Handle, WM_COMMAND, lGlue, Msg, dummyHandled);
end;

//------------------- end of Custom Message Handling procedures -----------------

// 문자열에서 숫자만 추출(소숫점제외)
// 2010.12.13
function str2integer(str:AnsiString):integer;
var
 ii:integer;
 TempStr:String;
begin
 TempStr:= '';
 for ii:= 1 to length(str) do
  begin
    if (str[ii] >= '0') and (str[ii] <= '9') then
      TempStr:= TempStr+str[ii];
   end;
 Result:= StrToIntDef(TempStr, 0);
end;

// 문자열에서 숫자제외한 문자 추출(소숫점제외)
// 2010.12.13
function str2string(str:string):string;
var
 ii:integer;
 TempStr:String;
begin
 TempStr:= '';
 for ii:= 1 to length(str) do
  begin
    if not((str[ii] >= '0') and (str[ii] <= '9')) then
      TempStr:= TempStr+str[ii];
   end;
 Result:= TempStr;
end;

function rpos1(substr1: string; str1: string): Integer;
var
  i: integer;
  tpos: integer;
begin
  if (substr1='') or (str1='') or (Length(substr1)>Length(str1)) then
  begin
    result:=0;
  end else
  begin
    tpos:=0;
    for i:=1 to Length(str1) do
    begin
      if substr1=Copy(str1,i,Length(substr1)) then
        tpos:=i;
    end;
    result:=tpos;
  end;
end;

procedure TFrm_JON01.cbbCuProductKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if Ord(Key) = VK_RETURN then
		curOutMileMny.SetFocus;
end;

procedure TFrm_JON01.cbbCuProductPropertiesChange(Sender: TObject);
begin
	curOutMileMny.Enabled := True;
  curOutMileMny.Value := 0;

  case TcxComboBox(Sender).ItemIndex of
  -1:
    TcxComboBox(Sender).Properties.DropDownListStyle := lsEditList;
  0:
    begin
      TcxComboBox(Sender).Properties.DropDownListStyle := lsEditList;
      TcxComboBox(Sender).Text := '';
		end;
  else
		TcxComboBox(Sender).Properties.DropDownListStyle := lsFixedList;
		if Pos('원 주유할인권', TcxComboBox(Sender).Text) > 0 then
    begin
      curOutMileMny.Value := GetPriceFromProduct(TcxComboBox(Sender).Text);
      curOutMileMny.Enabled := False;
		end;
  end;
end;

procedure TFrm_JON01.cbbPayMethodPropertiesChange(Sender: TObject);
var
  UserMile, iCoupon : Integer;
	Price: Integer;
  sTmp, sHDNO, sBRNO : string;
begin
	if pnlShare.Visible then Exit;

	try
    LoadPostTime;

    PAY_METHOD_BUSAN_YN := False;
    PnlWkJi.Visible := False;
    cxLblWkJAmt.Caption := '0';

    // 결재구분 콤보 박스에서 유저 별도체크 원복용으로 사용함. 2011-11-08
    // 법인콜 여부(수도권만 사용함)
    if GS_PRJ_AREA = 'S' then
		begin
			sTmp := Proc_BRNOSearch;
      // 플러스콜 사용 [접수창체크옵션,지사,본사,연합] 조회
			sTmp := GetPlusCallYN(sTmp);
			//if proc_PlusCall_CtrlYN = 'nyyy' then
			if copy(sTmp,1,4) = 'nyyy' then
      begin //법인콜 사용여부,,  'nyyy' : 미설정. 모드
        if BtnPlusYN.Tag < 10 then
          BtnPlusYN.Down := False;
      end;
    end;

    cbbPayMethod.Tag := 0;  // 법인콜 체크 박스에서 결재방법 변경할수 있는 모드 초기화. 2011-11-11.

    if cbbPayMethod.Text = '후불(카드)' then
    begin
      if btnCmdUpdSave.Visible then
      begin
        btnCmdJoin.Enabled := False;
        btnCmdWait.Enabled := False;
        btnCmdJoinCopy.Enabled := False;
        btnCmdWaitCopy.Enabled := False;
      end else
      begin
        btnCmdJoin.Enabled := True;
        btnCmdWait.Enabled := True;
        btnCmdJoinCopy.Enabled := True;
        btnCmdWaitCopy.Enabled := True;
      end;
    end else
    begin
      btnCmdJoin.Enabled := True;
      btnCmdWait.Enabled := True;
			btnCmdJoinCopy.Enabled := True;
      btnCmdWaitCopy.Enabled := True;
    end;

    // -- 오토콜은 문의접수만 가능
    if locAutoCallYn = 'Y' then
    begin
      btnCmdJoin.Enabled := False; // 접수버튼
      btnCmdWait.Enabled := False; // 대기버튼
      btnCmdQuestion.Enabled := True; // 문의버튼
      btnCmdJoinCopy.Enabled := False; // 접수후복사
      btnCmdWaitCopy.Enabled := False; // 대기후복사
      btnCmdMultiCall.Enabled := False; // 복수콜
    end;

    // 후불인 경우 자동입금 금액설정
		if IsPayMethodPost then
		begin
      PostTime := POST_TIME_TOMORROW;

      // 마일리지는 한도내에서 적용
      if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
      begin
				if StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0) < 0 then
				begin
					GMessagebox('마일리지 금액이 (-)금액입니다. ', CDMSI);
					cbbPayMethod.ItemIndex := 0;
					Exit;
				end;
				Price := curRate.Value;
				UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0) 
									+ StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);

				iCoupon := StrToIntDef(RemoveComma(edtPostPay.Hint), 0);  // 20130603  LYB  쿠폰결

				if iCoupon = 0 then
				begin
//          if edtPostPay.Value = 0 then
					begin
						if Price >= UserMile then
						begin
							edtPostPay.Value := Trunc(UserMile / 1000) * 1000;
						end
						else
							edtPostPay.Value := Price;
					end;
				end else
        begin
//          if edtPostPay.Value = 0 then
          begin
            edtPostPay.Value := IfThen(Price > (UserMile + iCoupon), UserMile+iCoupon, Price);
          end;
        end;
      end else
      begin
        if Not pJON01Dock.bUnDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

        if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
        begin
					edtPostPay.Value := 0;
          cxLblWkJAmt.Caption := '1,000';
          PAY_METHOD_BUSAN_YN := True;
          if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then PnlWkJi.Visible := True;
        end else
        if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
        begin
					edtPostPay.Value := 0;
          cxLblWkJAmt.Caption := '2,000';
          PAY_METHOD_BUSAN_YN := True;
          if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then PnlWkJi.Visible := True;
        end else
        if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
        begin
					edtPostPay.Value := 0;
          cxLblWkJAmt.Caption := '3,000';
          PAY_METHOD_BUSAN_YN := True;
          if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then PnlWkJi.Visible := True;
        end else
        begin
          if edtPostPay.Value = 0 then
            edtPostPay.Value := curRate.Value;
        end;
			end;

      sHDNO := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
      sBRNO := Proc_BRNOSearch; // 지사코드 정보를 읽는다.

			// 쿠폰제
      if GS_PRJ_AREA = 'S' then
      begin
        // KCP 카드 결제 체크. 2011-10-19.
        if cbbPayMethod.Text = PAY_METHOD_CARD_KCP then
        begin
					cbCardSanction.Caption := '카드결제';
					cbCardSanction.Enabled := True;
				end else
				if cbbPayMethod.Text = PAY_METHOD_POST_MILE then     // 20130603  LYB  쿠폰결제
				begin
					// 쿠폰 결제는 코리아드라이브-A1531, 서울/경기/인천-G891, 천안/안성/평택/아산-Q452/콜마너/콜마너영업 만 사용 가능
					if (sHDNO = 'A1531') or (sBRNO = 'G891') or (sBRNO = 'Q452') or (sHDNO = 'A100') or (sHDNO = 'A283')  then
					begin
						cbCardSanction.Caption := '쿠폰결제';
						cbCardSanction.Enabled := True;
					end else
					begin
						cbCardSanction.Enabled := False;
						cbCardSanction.Caption := '카드결제';
          end;
        end	else
        begin
          cbCardSanction.Enabled := False;
					cbCardSanction.Caption := '카드결제';
				end;
			end else
			begin
				// KCP 카드 결제 체크. 2011-10-19.
				if cbbPayMethod.Text = PAY_METHOD_CARD_KCP then
				begin
					cbCardSanction.Caption := '카드결제';
					cbCardSanction.Enabled := True;
        end else
				if cbbPayMethod.Text = PAY_METHOD_POST_MILE then     // 20130603  LYB  쿠폰결제
        begin
					// 쿠폰 결제는 코리아드라이브(대전-L290, 광주-M135, 전주-O914, 구미,대구-P263/콜마너/콜마너영업 만 사용 가능
          if (sBRNO = 'L290') or (sBRNO = 'M135') or (sBRNO = 'O914') or (sBRNO = 'P263') or
             (sHDNO = 'A100') or (sHDNO = 'A283')  then
          begin
						cbCardSanction.Caption := '쿠폰결제';
						cbCardSanction.Enabled := True;
					end else
					begin
						cbCardSanction.Enabled := False;
						cbCardSanction.Caption := '카드결제';
					end;
				end	else
				begin
					cbCardSanction.Enabled := False;
          cbCardSanction.Caption := '카드결제';
        end;
      end;

      // 법인콜 여부(수도권만 사용함)
      if GS_PRJ_AREA = 'S' then
      begin
				if copy(sTmp,1,4) = 'nyyy' then
        begin //법인콜 사용여부,,  'nyyy' : 미설정. 모드

          // "후불" 선택시 "법인콜" 자동선택 처리. 2011-11-07(영업요청)
          if btnPlusYN.Tag < 10 then
          begin
            if cbbPayMethod.Text = PAY_METHOD_POST_NML then
            begin
              if btnPlusYN.Hint <> 'NOCHANGE' then // 법인콜 다른 함수에서 변경 못 하도록 함.[오더수정 모드에서 설정됨]
              begin
                if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;
                if pJON01Dock.HDNO <> 'A2279' then  // 20130801  LYB 드림세븐은 법인콜 자동 체크 제외  정회귀 팀장 요청
                begin
                  cbbPayMethod.Tag := 20;    // 후불 선택시  "법인콜" 체크 박스 선택하더라도 결재방법 자동변경 차단. 2011-11-11.
                  btnPlusYN.Down := True;
                end;
              end;
            end;
          end;
        end;
			end;
    end else
    begin
			edtPostPay.Value := 0;
      // 03.KCP, 06.KICC 카드 결제 지사 사용여부 체크. 2011-10-19.
      if ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '03' ) Or
         ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '06' ) then
      begin
				if cbbPayMethod.Text = PAY_METHOD_MONEY then
        begin
					cbCardSanction.Caption := '현금영수';
					cbCardSanction.Enabled := True;
				end else
				begin
					cbCardSanction.Enabled := False;
					cbCardSanction.Caption := '카드결제';
				end;
			end;
      AddSpop('',97);
    end;

		edtPostPay.Enabled := IsPayMethodPost;

    //setposttime으로 이동
		if Pos('후불',cbbPayMethod.Text) >= 1 then
		begin
			cbbPostTime.ItemIndex:=GT_USERIF.AfterPayMidx;
      cbbPostTime.Enabled := True;
    end else
    begin
      cbbPostTime.Enabled := False;
    end;

		// 마일리지 사용시 마일리지 적립
		if (cbbPayMethod.Text <> PAY_METHOD_POST_MILE) then 
		begin
			btnCashSave.visible := False; 
			btnMileSave.visible := False; 
		end else 
		begin
			btnCashSave.visible := True;
			btnMileSave.visible := True;
		end;

		if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) then
		begin
			if (func_MilePayMileSave_YN) then
			begin 
				btnMileSave.visible := True;
				btnMileSave.Down := True;
			end else
			begin 
				btnMileSave.Down := False;
			end;
			if (func_CashPayMileSave_YN) then
			begin 
				btnCashSave.visible := True;
				btnCashSave.Down := True;
			end else
			begin 
				btnCashSave.Down := False;
			end;
		end;

		AppendPostDesc;

  except
    on e: exception do
    begin
      Log('cbbPayMethodPropertiesChange Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cbbPayMethodPropertiesChange Error :' + E.Message);
    end;
	end;
end;

procedure TFrm_JON01.cbbPostTimePropertiesChange(Sender: TObject);
var UserMile : integer;
begin
	if PnlShare.Visible then Exit;

  try
    if GS_PRJ_AREA = 'S' then
    begin
      // 수도권 수정모드 기사자동입금액 변경 허용.
      if cbbPostTime.Text = POST_TIME_NOPAY then
				edtPostPay.Value := 0
      else
      begin
				if edtPostPay.Value = 0 then
				begin
//          if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
//					UserMile := StrToIntDef(lblCuMile.Caption, 0);
					edtPostPay.Value := curRate.Value;
				end;
      end;

    end else
    begin
			// 수정모드 일때는 기사자동입금액이 수정되지 않도록 요청하여 적용함(신과장요청). 2011.07.19
//      if (Pos('수정', Self.Caption) = 0 ) then    2017.12.28.  주석처리
//			begin
			if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

			if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
			begin
				edtPostPay.Value := 0;
				cxLblWkJAmt.Caption := IfThen(cbbPostTime.Text = POST_TIME_NOPAY, '', '1,000');
				if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then PnlWkJi.Visible := True;
			end else
			if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
			begin
				edtPostPay.Value := 0;
				cxLblWkJAmt.Caption := IfThen(cbbPostTime.Text = POST_TIME_NOPAY, '', '2,000');
				if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then PnlWkJi.Visible := True;
			end else
			if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
			begin
				edtPostPay.Value := 0;
				cxLblWkJAmt.Caption := IfThen(cbbPostTime.Text = POST_TIME_NOPAY, '', '3,000');
				if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then PnlWkJi.Visible := True;
			end else
			begin
				if cbbPostTime.Text = POST_TIME_NOPAY then
					edtPostPay.Value := 0
				else
				begin
					if edtPostPay.Value = 0 then
						edtPostPay.Value := curRate.Value;
				end;
			end;
//	end;
		end;                   

    edtPostPay.Enabled := not (cbbPostTime.Text = POST_TIME_NOPAY);
//-    edtPostPay.Refresh;

		AppendPostDesc;

  except
		on e: exception do
    begin
      Log('cbbPostTimePropertiesChange Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cbbPostTimePropertiesChange Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.cbCardSanctionClick(Sender: TObject);
var lsTemp : TStringList;
	sBrNo : string;
begin
	SetDebugeWrite('JON01.cbCardSanctionClick');
	try
    if ( pnlRShare.Visible ) Or ( pnlShare.Visible ) then
		begin
			GMessagebox('접수창 공유중에는 사용할수 없는 기능입니다.', CDMSI);
			Exit;
		end;
			//신규일때만
		if ((Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 )) and (gsCuTelHint <> cxtCuTel.Text) then
		begin
			GMessagebox('고객조회 후 이용하여 주십시오.', CDMSI);
			cxtCuTel.setFocus;
			Exit;
		end;

		if ( (curRate.Value >= 2000) And (cbbPayMethod.Text <> PAY_METHOD_POST_MILE) ) or   // 카드/현금은 최소 2000원 이상
       ( (curRate.Value >= 0   ) And (cbbPayMethod.Text  = PAY_METHOD_POST_MILE) ) then // 쿠폰은 적립만 할수 있으므로 0원도 가능   20130730  LYB
    begin
      Try
				if Not Assigned(Frm_JON34) Or (Frm_JON34 = Nil) then Frm_JON34 := TFrm_JON34.Create(Nil);

				//부산오천콜 요청사항. 특정지사 오더금액 90만원까지 늘림
				sBrNo := Proc_BRNOSearch;
				if (GS_PRJ_AREA = 'O') and ((sBrNo = 'P981') or (sBrNo = 'B100')) then 
				begin
					Frm_JON34.cxCurDRate.Properties.MaxValue := 900000;
					Frm_JON34.cxCurDecRate.Properties.MaxValue := 900000;
				end else
				if (GS_PRJ_AREA = 'S') and ((sBrNo = 'M628') or (sBrNo = 'B100')) then 
				begin
					Frm_JON34.cxCurDRate.Properties.MaxValue := 999000;
					Frm_JON34.cxCurDecRate.Properties.MaxValue := 999000;
				end	else 
				begin
					Frm_JON34.cxCurDRate.Properties.MaxValue := 500000;
					Frm_JON34.cxCurDecRate.Properties.MaxValue := 500000;
				end;
				
				if (cbbPayMethod.Text = PAY_METHOD_MONEY) then
        begin
					Frm_JON34.pnlTitle.Caption := '   현금영수증(지출증빙) 발급';
          // 카드결제 창 오픈.  2011-10-13.
          if not Assigned(Frm_JON34) then
          begin
						Frm_JON34 := TFrm_JON34.Create(self);
          end;
          Frm_JON34.Jon03Tag := Self.Jon03Tag;
          Frm_JON34.Card_Gubun := 0;
          Frm_JON34.proc_init;
          Frm_JON34.pnl1.Visible := False;
          Frm_JON34.pnl5.Visible := False;

          Frm_JON34.pnl3.Visible := True;
          Frm_JON34.pnl4.Visible := True;
          Frm_JON34.pnl6.Visible := False;
          Frm_JON34.pnl4.Left := 0;
          Frm_JON34.pnl4.Top := 1;
          Frm_JON34.Constraints.MinHeight := 375 - 33;
          Frm_JON34.Height := 375 - 33;

          //공통사항///////////////////
          Frm_JON34.lcBRNO    := Proc_BRNOSearch;           // 지사코드 정보를 읽는다.
          Frm_JON34.lcMainNum := Proc_MainKeyNumberSearch;  // 대표번호 정보를 읽는다.
          Frm_JON34.lcCustTel := cxtCuTel.Text;             // 고객전화번호.
          Frm_JON34.medtCashCardNum.Text := Frm_JON34.lcCustTel;
          Frm_JON34.lcCustSeq := lcsCu_seq;                 // 고객 시퀀스.
          //공통사항///////////////////

          Frm_JON34.cxCurDecRate_Cash.Value := curRate.Value;    // 요금(현금영수증)


          Frm_JON34.lcJON_IDX := Self.Tag;   // 접수창의 index 값 저장.

          // 기 결제 정보가 있으면, 해당 값을 넣어준다.
          if Length(locCardPayInfo) > 10 then
          begin
            try
              Frm_JON34.lcCustTel := '';             // 고객전화번호.
							Frm_JON34.medtCashCardNum.Text := '';
							
							lsTemp := TStringList.Create;
							lsTemp.Delimiter := '|';
							lsTemp.DelimitedText := locCardPayInfo;

              Frm_JON34.cxCurDecRate_Cash.Text  := lsTemp[0];
							Frm_JON34.lblCardStatus_Cash.Caption := lsTemp[1];  // 상태
              if lsTemp.Count = 3 then
              begin
                Frm_JON34.medtCashCardNum.Text := lsTemp[2];
              end;

              // 접수번호가 있을경우만 서버에서 재조회 한다.  2011-10-27
              if (length(cxtJoinNum.Text) > 1) or (locCardPaySeq <> '') then
                Frm_JON34.ProCardInfoSelect(cxtJoinNum.Text + '│' + locCardPaySeq);   // 카드결제 정보를 조회 한다.

              if Frm_JON34.lblCardStatus_Cash.Caption = '증빙완료' then
              begin
                // 카드결제 승인 취소 할 준비.
                Frm_JON34.sb_ApproveReq.Enabled    := False;
                Frm_JON34.sb_ApproveOK.Enabled     := False;
                Frm_JON34.sb_ApproveCancle.Enabled := True;
                Frm_JON34.sb_ApproveReceipt.Enabled := False;
                Frm_JON34.medtCashCardNum.Enabled      := False;
                Frm_JON34.cxCurDecRate_Cash.Enabled      := False;
              end	else
              if Frm_JON34.lblCardStatus_Cash.Caption = '증빙요청완료' then
              begin
                // 카드결제 승인 취소 할 준비.
                Frm_JON34.sb_ApproveReq.Enabled    := False;
                Frm_JON34.sb_ApproveOK.Enabled     := False;
                Frm_JON34.sb_ApproveCancle.Enabled := False;
                Frm_JON34.sb_ApproveReceipt.Enabled := False;
                Frm_JON34.medtCashCardNum.Enabled      := False;
                Frm_JON34.cxCurDecRate_Cash.Enabled    := False;
              end	else
              begin
                // 카드결제 승인 할 준비.
                Frm_JON34.sb_ApproveReq.Enabled    := True;
                Frm_JON34.cxButton1.Enabled     := False;
                Frm_JON34.sb_ApproveOK.Enabled     := False;
                Frm_JON34.sb_ApproveCancle.Enabled := False;
                Frm_JON34.sb_ApproveReceipt.Enabled := False;
                Frm_JON34.medtCashCardNum.Enabled      := True;
                Frm_JON34.cxCurDecRate_Cash.Enabled    := True;

                Frm_JON34.rg_charge_ser2.Enabled   := True;
								Frm_JON34.rg_charge_ser1.Enabled   := True;
              end;

              Frm_JON34.lcPaySeq := locCardPaySeq;   // 결제일련번호
              Frm_JON34.lcTranNo := locCardTranNo;   // 거래번호

              Frm_JON34.lblPaySeq_Cash.Caption := locCardPaySeq;
              Frm_JON34.lblTranNo_Cash.Caption := locCardTranNo;
            finally
              FreeAndNil(lsTemp);
            end;
          end else
          if Length(locCardPaySeq) > 1 then
          begin
            Frm_JON34.lcCustTel := '';             // 고객전화번호.
						Frm_JON34.medtCashCardNum.Text := '';
						Frm_JON34.lcPaySeq               := locCardPaySeq;   // 결제일련번호  만 있으면 승인취소 가능 함.
            Frm_JON34.lblPaySeq_Cash.Caption := locCardPaySeq;

            Frm_JON34.ProCardInfoSelect(cxtJoinNum.Text);   // 카드결제 정보를 조회 한다.

            if Frm_JON34.lblCardStatus_Cash.Caption =  '증빙완료' then
            begin
              // 카드결제 승인 취소 할 준비.
              Frm_JON34.sb_ApproveReq.Enabled    := False;
              Frm_JON34.sb_ApproveOK.Enabled     := False;
              Frm_JON34.sb_ApproveCancle.Enabled := True;
              Frm_JON34.sb_ApproveReceipt.Enabled := False;
              Frm_JON34.medtCashCardNum.Enabled      := False;
              Frm_JON34.cxCurDecRate_cash.Enabled    := False;
            end else
            if Frm_JON34.lblCardStatus_Cash.Caption = '증빙요청완료' then
            begin
              // 카드결제 승인 취소 할 준비.
              Frm_JON34.sb_ApproveReq.Enabled    := False;
              Frm_JON34.sb_ApproveOK.Enabled     := False;
              Frm_JON34.sb_ApproveCancle.Enabled := False;
              Frm_JON34.sb_ApproveReceipt.Enabled := False;
              Frm_JON34.medtCashCardNum.Enabled      := False;
              Frm_JON34.cxCurDecRate_cash.Enabled    := False;
            end else
						begin
              // 카드결제 승인 할 준비.
              Frm_JON34.sb_ApproveReq.Enabled    := True;
              Frm_JON34.sb_ApproveOK.Enabled     := False;
              Frm_JON34.sb_ApproveCancle.Enabled := False;
              Frm_JON34.sb_ApproveReceipt.Enabled := False;

              Frm_JON34.medtCashCardNum.Enabled      := True;
              Frm_JON34.cxCurDecRate_cash.Enabled    := True;
              Frm_JON34.rg_charge_ser2.Enabled   := True;
              Frm_JON34.rg_charge_ser1.Enabled   := True;
            end;
          end else
          begin
            // 카드결제 승인 할 준비.
            Frm_JON34.sb_ApproveReq.Enabled    := True;
            Frm_JON34.sb_ApproveOK.Enabled     := False;
            Frm_JON34.sb_ApproveCancle.Enabled := False;
            Frm_JON34.sb_ApproveReceipt.Enabled := False;
            Frm_JON34.medtCashCardNum.Enabled      := True;
            Frm_JON34.cxCurDecRate_cash.Enabled    := True;
            Frm_JON34.rg_charge_ser2.Enabled   := True;
            Frm_JON34.rg_charge_ser1.Enabled   := True;
          end;

          if Assigned(Frm_JON34) then
          begin
            if Frm_Main.JON01MNG[Self.Tag].Dock then
            begin
              Frm_JON34.Left := Frm_Jon00.Left - (Frm_JON34.Width + 1);
              Frm_JON34.Top  := Frm_Jon00.Top + 320;
            end else
            begin
              Frm_JON34.Left := Self.Left - (Frm_JON34.Width + 1);
              Frm_JON34.Top  := Self.Top + 320;
            end;
          end;

          Frm_JON34.Show;
          if Frm_JON34.medtCashCardNum.CanFocus then Frm_JON34.medtCashCardNum.SetFocus;          
        end else
				if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) then
        begin
          Frm_JON34.pnlTitle.Caption := '   모바일 쿠폰 결제';
          Frm_JON34.lcAppModify := 'N';

          // 카드결제 창 오픈.  2011-10-13.
          if not Assigned(Frm_JON34) then
          begin
            Frm_JON34 := TFrm_JON34.Create(self);
          end;
          Frm_JON34.Card_Gubun := 2;
          Frm_JON34.proc_init;
          Frm_JON34.pnl1.Visible := False;
          Frm_JON34.pnl5.Visible := False;

          Frm_JON34.pnl3.Visible := False;
          Frm_JON34.pnl4.Visible := False;
          Frm_JON34.pnl6.Visible := True;
          Frm_JON34.pnl6.Left := 0;
          Frm_JON34.pnl6.Top := 1;
          Frm_JON34.Constraints.MinHeight := 375 - (33 + 33);
          Frm_JON34.Height := 375 - (33 + 33);

          Frm_JON34.cxCurDecRate_Coupon.Value := curRate.Value;    // 요금

          //공통사항///////////////////
          Frm_JON34.lcBRNO    := Proc_BRNOSearch;           // 지사코드 정보를 읽는다.
          Frm_JON34.lcMainNum := Proc_MainKeyNumberSearch;  // 대표번호 정보를 읽는다.
          Frm_JON34.lcCustTel := cxtCuTel.Text;             // 고객전화번호.
          Frm_JON34.lcCustSeq := lcsCu_seq;                 // 고객 시퀀스.
          //공통사항///////////////////

          Frm_JON34.lcJON_IDX := Self.Tag;   // 접수창의 index 값 저장.

          // 기 결제 정보가 있으면, 해당 값을 넣어준다.
          if Length(locCardPayInfo) > 10 then
          begin
            try
              Frm_JON34.lcCustTel := '';             // 고객전화번호.

              lsTemp := TStringList.Create;
							lsTemp.Delimiter := '|';
              lsTemp.DelimitedText := locCardPayInfo;

              Frm_JON34.cxCurDec_Coupon1.Text     := lsTemp[1];
              Frm_JON34.lblCouponStatus.Caption   := lsTemp[2];
              Frm_JON34.medtCouponNum.Text        := lsTemp[3];
              Frm_JON34.Lbl_ChangeMile.Caption := '0';

              // 접수번호가 있을경우만 서버에서 재조회 한다.  2011-10-27
              if (length(cxtJoinNum.Text) > 1) or (locCardPaySeq <> '') then
                Frm_JON34.ProCardInfoSelect(locCardPaySeq);   // 모바일 쿠폰 결제 정보를 조회 한다.

              if Frm_JON34.lblCouponStatus.Caption = '인증완료' then
              begin
                // 쿠폰결제 승인 할 준비.
                Frm_JON34.sb_ApproveRed.Enabled     := False;
                Frm_JON34.sb_ApproveReq.Enabled     := True;
                Frm_JON34.sb_ApproveOK.Enabled      := False;
                Frm_JON34.sb_ApproveCancle.Enabled  := False;
                Frm_JON34.sb_ApproveReceipt.Enabled := False;

                Frm_JON34.medtCouponNum.Enabled        := False;
              end else
              if Frm_JON34.lblCouponStatus.Caption = '승인완료' then
              begin
                // 카드결제 승인 취소 할 준비.
                Frm_JON34.sb_ApproveRed.Enabled     := False;
                Frm_JON34.sb_ApproveReq.Enabled     := False;
                Frm_JON34.sb_ApproveOK.Enabled      := True;
                Frm_JON34.sb_ApproveCancle.Enabled  := True;
                Frm_JON34.sb_ApproveReceipt.Enabled := False;

                Frm_JON34.medtCouponNum.Enabled     := False;
              end else
              begin
                // 카드결제 인증 할 준비.
                Frm_JON34.sb_ApproveRed.Enabled    := True;
                Frm_JON34.sb_ApproveReq.Enabled    := False;
                Frm_JON34.cxButton1.Enabled        := False;
                Frm_JON34.sb_ApproveOK.Enabled     := False;
                Frm_JON34.sb_ApproveCancle.Enabled := False;
								Frm_JON34.sb_ApproveReceipt.Enabled := False;

                Frm_JON34.medtCouponNum.Enabled      := True;
              end;

              Frm_JON34.lcPaySeq := locCardPaySeq;   // 쿠폰일련번호
              Frm_JON34.lblPaySeq_Coupon.Caption := locCardPaySeq;
            finally
              FreeAndNil(lsTemp);
            end;
          end else
          if Length(locCardPaySeq) > 1 then
          begin
            Frm_JON34.lcCustTel := '';             // 고객전화번호.
            Frm_JON34.lcPaySeq                 := locCardPaySeq;   // 쿠폰일련번호  만 있으면 승인취소 가능 함.
            Frm_JON34.lblPaySeq_Coupon.Caption := locCardPaySeq;

            Frm_JON34.ProCardInfoSelect(locCardPaySeq);   // 쿠폰결제 정보를 조회 한다.

            if Frm_JON34.lblCouponStatus.Caption =  '인증완료' then
            begin
              // 쿠폰결제 승인 할 준비.
              Frm_JON34.sb_ApproveRed.Enabled    := False;
              Frm_JON34.sb_ApproveReq.Enabled    := True;
              Frm_JON34.sb_ApproveOK.Enabled     := False;
              Frm_JON34.sb_ApproveCancle.Enabled := False;
              Frm_JON34.sb_ApproveReceipt.Enabled := False;

              Frm_JON34.medtCouponNum.Enabled      := False;
            end else
            if Frm_JON34.lblCouponStatus.Caption = '승인완료' then
            begin
              // 쿠폰결제 승인 취소 할 준비.
              Frm_JON34.sb_ApproveRed.Enabled     := False;
              Frm_JON34.sb_ApproveReq.Enabled     := False;
              Frm_JON34.sb_ApproveOK.Enabled      := True;
              Frm_JON34.sb_ApproveCancle.Enabled  := True;
              Frm_JON34.sb_ApproveReceipt.Enabled := False;

              Frm_JON34.medtCouponNum.Enabled     := False;
            end else
						begin
              // 쿠폰결제 인증 할 준비.
              Frm_JON34.sb_ApproveRed.Enabled     := True;
              Frm_JON34.sb_ApproveReq.Enabled     := False;
              Frm_JON34.sb_ApproveOK.Enabled      := False;
              Frm_JON34.sb_ApproveCancle.Enabled  := False;
              Frm_JON34.sb_ApproveReceipt.Enabled := False;

              Frm_JON34.medtCouponNum.Enabled     := True;
            end;
          end else
          begin
            // 카드결제 인증 할 준비.
            Frm_JON34.sb_ApproveRed.Enabled     := True;
            Frm_JON34.sb_ApproveReq.Enabled     := False;
            Frm_JON34.sb_ApproveOK.Enabled      := False;
            Frm_JON34.sb_ApproveCancle.Enabled  := False;
            Frm_JON34.sb_ApproveReceipt.Enabled := False;

            Frm_JON34.medtCouponNum.Enabled     := True;
          end;

          if Assigned(Frm_JON34) then
          begin
						if Frm_Main.JON01MNG[Self.Tag].Dock then
            begin
              Frm_JON34.Left := Frm_Jon00.Left - (Frm_JON34.Width + 1);
              Frm_JON34.Top  := Frm_Jon00.Top + 320;
            end else
            begin
              Frm_JON34.Left := Self.Left - (Frm_JON34.Width + 1);
              Frm_JON34.Top  := Self.Top + 320;
            end;
          end;

          Frm_JON34.Show;

          if Frm_JON34.medtCouponNum.CanFocus then Frm_JON34.medtCouponNum.SetFocus;
        end else         //카드
        begin
          Frm_JON34.pnlTitle.Caption := '   카드결제';
					if Pay_Gubun  = '0' then
          begin

          end;
          // 카드결제 창 오픈.  2011-10-13.
          if not Assigned(Frm_JON34) then
          begin
            Frm_JON34 := TFrm_JON34.Create(self);
          end;

          Frm_JON34.Card_Gubun := 1;
          Frm_JON34.proc_init;

          if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

          if (pJON01Dock.HDNO = 'A1531') or (pJON01Dock.HDNO = 'A100')  then
          begin
            Frm_JON34.pnl1.Visible := True;
            Frm_JON34.pnl5.Visible := False;

            Frm_JON34.pnl3.Visible := False;
            Frm_JON34.Constraints.MinHeight := ( 375 - 33 ) + 0;
            Frm_JON34.Height := ( 375 - 33 ) + 0;
          end	else
          begin
            Frm_JON34.pnl1.Visible := False;
            Frm_JON34.pnl5.Visible := False;
            Frm_JON34.pnl3.Visible := False;
            Frm_JON34.Constraints.MinHeight := 375 - (33 + 33);
            Frm_JON34.Height := 375 - (33 + 33);
          end;
          Frm_JON34.pnl4.Left := 400;
          Frm_JON34.pnl6.Left := 400;

          //공통사항///////////////////
          Frm_JON34.lcBRNO    := Proc_BRNOSearch;           // 지사코드 정보를 읽는다.
          Frm_JON34.lcMainNum := Proc_MainKeyNumberSearch;  // 대표번호 정보를 읽는다.
          Frm_JON34.lcCustTel := cxtCuTel.Text;             // 고객전화번호.
          Frm_JON34.lcCustSeq := lcsCu_seq;                 // 고객 시퀀스.
          //공통사항///////////////////

					Frm_JON34.cxCurDRate.Value      := curRate.Value;    // 요금.

          if Frm_JON34.rbConfigVATset1.Checked then
            Frm_JON34.cxCurDecRate.Value := curRate.Value
          else
          if Frm_JON34.rbConfigVATset2.Checked then
            // 결제요금.  설정된 부가세 적용.
            Frm_JON34.cxCurDecRate.Value := curRate.Value + (curRate.Value * (StrToFloatDef(Frm_JON34.cxCurVATvalue.Text, 0.0) / 100))
					else
          if Frm_JON34.rbConfigVATset3.Checked then
          begin
            Frm_JON34.cxCurDecRate.Value := Frm_JON34.proc_getSvrCardCharge(Frm_JON34.lcBRNO, curRate.Value);
          end;

          Frm_JON34.lcJON_IDX := Self.Tag;   // 접수창의 index 값 저장.

          // 기 결제 정보가 있으면, 해당 값을 넣어준다.
          if Length(locCardPayInfo) > 10 then
          begin
            try
              lsTemp := TStringList.Create;
              lsTemp.Delimiter := '|';
              lsTemp.DelimitedText := locCardPayInfo;

              Frm_JON34.cxCurDRate.Text       := lsTemp[0];
              Frm_JON34.cxCurDecRate.Text     := lsTemp[1];
              Frm_JON34.cxCurTerm.Text        := lsTemp[2];
              Frm_JON34.lblCardStatus.Caption := lsTemp[3];  // 상태
              if lsTemp.Count = 6 then
              begin
                Frm_JON34.medCardNum.Text       := lsTemp[4];
                Frm_JON34.medLimiteDate.text    := lsTemp[5];
              end;

              // 접수번호가 있을경우만 서버에서 재조회 한다.  2011-10-27
              if (length(cxtJoinNum.Text) > 1) or (locCardPaySeq <> '') then
                Frm_JON34.ProCardInfoSelect(cxtJoinNum.Text + '│' + locCardPaySeq);   // 카드결제 정보를 조회 한다.

							if Frm_JON34.lblCardStatus.Caption = '결제완료' then
              begin
								// 카드결제 승인 취소 할 준비.
								Frm_JON34.sb_ApproveReq.Enabled    := False;
                Frm_JON34.sb_ApproveOK.Enabled     := False;
                Frm_JON34.sb_ApproveCancle.Enabled := True;
                Frm_JON34.sb_ApproveReceipt.Enabled := True;

                Frm_JON34.medCardNum.Enabled      := False;
                Frm_JON34.medLimiteDate.Enabled   := False;
                Frm_JON34.cxCurDRate.Enabled      := False;
                Frm_JON34.cxCurDecRate.Enabled    := False;
                Frm_JON34.cxCurTerm.Enabled       := False;
              end	else
              if Frm_JON34.lblCardStatus.Caption = '결제요청완료' then
              begin
                // 카드결제 승인 취소 할 준비.
                Frm_JON34.sb_ApproveReq.Enabled    := False;
                Frm_JON34.sb_ApproveOK.Enabled     := False;
                Frm_JON34.sb_ApproveCancle.Enabled := False;
                Frm_JON34.sb_ApproveReceipt.Enabled := False;

                Frm_JON34.medCardNum.Enabled      := False;
                Frm_JON34.medLimiteDate.Enabled   := False;
                Frm_JON34.cxCurDRate.Enabled      := False;
                Frm_JON34.cxCurDecRate.Enabled    := False;
                Frm_JON34.cxCurTerm.Enabled       := False;
              end	else
              begin
                // 카드결제 승인 할 준비.
                Frm_JON34.sb_ApproveReq.Enabled    := True;
                Frm_JON34.sb_ApproveOK.Enabled     := False;
                Frm_JON34.sb_ApproveCancle.Enabled := False;
                Frm_JON34.sb_ApproveReceipt.Enabled := False;

                Frm_JON34.medCardNum.Enabled      := True;
                Frm_JON34.medLimiteDate.Enabled   := True;
                Frm_JON34.cxCurDRate.Enabled      := True;
                Frm_JON34.cxCurDecRate.Enabled    := True;
                Frm_JON34.cxCurTerm.Enabled       := True;

                Frm_JON34.rb_Card1.Enabled        := True;
                Frm_JON34.rb_BaRo_Card1.Enabled   := True;
              end;

              Frm_JON34.lcPaySeq := locCardPaySeq;   // 결제일련번호
              Frm_JON34.lcTranNo := locCardTranNo;   // 거래번호

              Frm_JON34.lblPaySeq.Caption := locCardPaySeq;
              Frm_JON34.lblTranNo.Caption := locCardTranNo;
            finally
							FreeAndNil(lsTemp);
            end;
          end	else
					if Length(locCardPaySeq) > 1 then
          begin
            Frm_JON34.lcPaySeq          := locCardPaySeq;   // 결제일련번호  만 있으면 승인취소 가능 함.
            Frm_JON34.lblPaySeq.Caption := locCardPaySeq;

            Frm_JON34.ProCardInfoSelect(cxtJoinNum.Text);   // 카드결제 정보를 조회 한다.

            if Frm_JON34.lblCardStatus.Caption = '결제완료' then
            begin
              // 카드결제 승인 취소 할 준비.
              Frm_JON34.sb_ApproveReq.Enabled    := False;
              Frm_JON34.sb_ApproveOK.Enabled     := False;
              Frm_JON34.sb_ApproveCancle.Enabled := True;
              Frm_JON34.sb_ApproveReceipt.Enabled := True;

              Frm_JON34.medCardNum.Enabled      := False;
              Frm_JON34.medLimiteDate.Enabled   := False;
              Frm_JON34.cxCurDRate.Enabled      := False;
              Frm_JON34.cxCurDecRate.Enabled    := False;
              Frm_JON34.cxCurTerm.Enabled       := False;
            end else
            if Frm_JON34.lblCardStatus.Caption = '결제요청완료' then
            begin
              // 카드결제 승인 취소 할 준비.
              Frm_JON34.sb_ApproveReq.Enabled    := False;
              Frm_JON34.sb_ApproveOK.Enabled     := False;
              Frm_JON34.sb_ApproveCancle.Enabled := False;
              Frm_JON34.sb_ApproveReceipt.Enabled := False;

              Frm_JON34.medCardNum.Enabled      := False;
              Frm_JON34.medLimiteDate.Enabled   := False;
							Frm_JON34.cxCurDRate.Enabled      := False;
              Frm_JON34.cxCurDecRate.Enabled    := False;
              Frm_JON34.cxCurTerm.Enabled       := False;
            end	else
            begin
              // 카드결제 승인 할 준비.
              Frm_JON34.sb_ApproveReq.Enabled    := True;
              Frm_JON34.sb_ApproveOK.Enabled     := False;
              Frm_JON34.sb_ApproveCancle.Enabled := False;
              Frm_JON34.sb_ApproveReceipt.Enabled := False;

              Frm_JON34.medCardNum.Enabled      := True;
              Frm_JON34.medLimiteDate.Enabled   := True;
              Frm_JON34.cxCurDRate.Enabled      := True;
              Frm_JON34.cxCurDecRate.Enabled    := True;
              Frm_JON34.cxCurTerm.Enabled       := True;
              Frm_JON34.rb_Card1.Enabled        := True;
              Frm_JON34.rb_BaRo_Card1.Enabled   := True;
            end;
          end	else
          begin
            // 카드결제 승인 할 준비.
            Frm_JON34.sb_ApproveReq.Enabled    := True;
            Frm_JON34.sb_ApproveOK.Enabled     := False;
            Frm_JON34.sb_ApproveCancle.Enabled := False;
            Frm_JON34.sb_ApproveReceipt.Enabled := False;

            Frm_JON34.medCardNum.Enabled      := True;
            Frm_JON34.medLimiteDate.Enabled   := True;
            Frm_JON34.cxCurDRate.Enabled      := True;
            Frm_JON34.cxCurDecRate.Enabled    := True;
            Frm_JON34.cxCurTerm.Enabled       := True;
            Frm_JON34.rb_Card1.Enabled        := True;
            Frm_JON34.rb_BaRo_Card1.Enabled   := True;
          end;

          if Assigned(Frm_JON34) then
          begin
            if Frm_Main.JON01MNG[Self.Tag].Dock then
            begin
              Frm_JON34.Left := Frm_Jon00.Left - (Frm_JON34.Width + 1);
							Frm_JON34.Top  := Frm_Jon00.Top + 320;
            end else
            begin
              Frm_JON34.Left := Self.Left - (Frm_JON34.Width + 1);
              Frm_JON34.Top  := Self.Top + 320;
            end;
          end;

          Frm_JON34.Show;
          if Frm_JON34.medCardNum.CanFocus then Frm_JON34.medCardNum.SetFocus;
        end;
      except on E: Exception do
        Assert(False, E.Message);
      end;
    end else
    begin
      if (cbbPayMethod.Text = PAY_METHOD_MONEY) then
        GMessagebox('현금영수증 금액은 2000원 이상 입니다.', CDMSI)
      else
        GMessagebox('카드결제 최소 금액은 2000원 이상 입니다.', CDMSI);
      if curRate.CanFocus then curRate.SetFocus;
    end;
  except
    on e: exception do
    begin
      Log('cbCardSanctionClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cbCardSanctionClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.cboBranchClick(Sender: TObject);
begin
  if cboBranch.Properties.Items.Count > 40 then cboBranch.Properties.DropDownRows := 40
                                           else cboBranch.Properties.DropDownRows := cboBranch.Properties.Items.Count;
end;

procedure TFrm_JON01.cboBranchMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('JON01.cboBranchMouseDown');
	try
		if (Pos('신규', Self.Caption) < 1) and (cboBranch.Properties.ReadOnly = True) then
    begin
      if cxtCuTel.visible = True then cxtCuTel.SetFocus;
    end;

    if PnlSuggest.Visible then
    begin
      PnlSuggest.Visible := False;
      AdvGridSj.ShowSelection := False;
      PnlSuggest.Caption := '';
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.cboBranchPropertiesChange(Sender: TObject);
Var Key : Char;
begin
	SetDebugeWrite('JON01.cboBranchPropertiesChange');
  try
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 한다.
    if cboBranch.Tag <> 20 then
    begin
			LoadCustLevel;
			LoadPayMethod;
    end;

		if cboBranch.Tag < 5 then
		begin
			FCustChangeInfo.name := edtCuName.Text;
			FCustChangeInfo.CbCuGb := CbCuGb.ItemIndex;
			FCustChangeInfo.meoCuCCMemo := meoCuCCMemo.Text;
			FCustChangeInfo.meoCuWorMemo := meoCuWorMemo.Text;
			FCustChangeInfo.edt_CardMemo := edt_CardMemo.Text;

			// 고객조회 한 상태에서 지사정보를 바꾸면 고객정보를 초기화 해야 한다.
			cxCustView.DataController.SetRecordCount(0);

			if ((Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 )) and (cxtCuTel.Text <> '') then  //수정모드에서는 제외
				gsCuTelHint := '';  // 지사변경시 자동엔터가 아니면 다시 엔터를 치게 만들어야 됨.

			cxtCuBubin.Text := ''; // 법인명(법인정보)
			cxtCuBubin.Hint := '';

			sNowRate := ''; // 현재 지사의 기본요금 설정액.

      lcsCu_seq := ''; // 현재 선택된 고객seq

//			locHDNO := '';
//			locBRNO := '';
//	  	locKNum := ''; // 조회 고객 본사, 지사코드, 대표번호 임시저장.
//      locDNIS := '';  //콜링시 지사변경 가능. DNIS는 그대로 유지 20160715 KHS

			locWkSabun := '';
			locWkBrNo := ''; // 조회기사 사번, 기사지사코드 저장.
			locSndTime := '';
      locAutoCallYn := '';

{			sTaksong := 'n';
			sTakHwak := 'n';
			sStickCall := 'n';
			sLicType := '00';

			PnlModifyTitle.Visible := False;
	//		BtnLClose1.Visible := False;
			pnlClose.Visible := False;
			shpModifyTitle.Visible := False;

			cb_00.Down := False;
			cb_01.Down := False;
			cb_02.Down := False;
			cb_03.Down := False;
			cb_04.Down := False;
			cb_05.Down := False;
			cb_06.Down := False; //탁확   }

			// 플러스콜 사용여부 체크
			proc_PlusCall_CtrlYN;
			// 탁송연합콜 사용
			proc_TakCall_CtrlYN;
			//AI 아웃바운드 옵션 배차지연콜 사용여부
			proc_AIOB_CtrlYN;

			// LBS 사용여부 체크 수정창 제외
			if ((Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 )) and (func_LBS_YN) then 
				btn_LBS.Enabled := True else btn_Lbs.Enabled := False;


      // 고객구분 법인일때 개인으로 변경함.
			if CbCuGb.ItemIndex = 2 then
      begin
        CbCuGb.Hint := 'Clear';
        CbCuGb.ItemIndex := 0;
        CbCuGb.Hint := '';
      end;
      lblCuMile.Caption := '0'; // 현재 마일리지
      lblCuMileUnit.Caption := '0';
      // 선택지사 마일리지 지급단위
			lblCuMileCnt.Caption := '0';
      // 마일리지 지급횟수
			lblCuMileLost.Caption := '0';
			// 마일리지 소멸예정금액
      lblCuCntTotal.Caption := '0';
      lblCoCntTotal.Caption := '0';
      SetMileColorChange;
      // 접수/왼료
			lblCuCancelR.Caption := '0%'; // 취소율

  //-    curOutMileMny.Value := 0; // 지급마일
      sProdName := '';

			if (Pos('신규', Self.Caption) < 1) and (cxtCuTel.Text <> '') then
				Proc_CuSeq_Select; // 고객 SEQUENCE 를 조회 해 온다.[현재 조회한 고객정보를 다른지사의 고객정보로 그대로 등록 해주기 위해서..]

			if cxtCuTel.Text <> '' then  //수정모드는 별도로 SearchCuTel에서 체크
			begin
				Key := Char(13);
				cxtCuTelKeyPress(cxtCuTel, Key);
      end;
    end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.cboBrOnlyClick(Sender: TObject);
begin
  if cboBrOnly.Properties.Items.Count > 35 then cboBrOnly.Properties.DropDownRows := 35
                                           else cboBrOnly.Properties.DropDownRows := cboBrOnly.Properties.Items.Count;
end;

procedure TFrm_JON01.cboBrOnlyEnter(Sender: TObject);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01.cboBrOnlyKeyPress(Sender: TObject; var Key: Char);
begin
	if key in ['0'..'9', #13, #8] then
	else
		key := #0;
end;

procedure TFrm_JON01.cboBrOnlyPropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('JON01.cboBrOnlyPropertiesChange');
  if cboBrOnly.Tag = 0 then
  begin
		SetCboBranch(True);
    cxTSearchMainTel.Text := '';
  end;
end;

procedure TFrm_JON01.cboCuLevelPropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('JON01.cboCuLevelPropertiesChange');
  Proc_SetFormColor;
end;

procedure TFrm_JON01.CbSecondPropertiesChange(Sender: TObject);
Var sDateTime : TDateTime;
begin
  SetDebugeWrite('JON01.CbSecondPropertiesChange');
  if CbSecond.Tag = 1 then Exit;

  try
    if CbSecond.ItemIndex >= 0 then
    begin
      sDateTime := StrToDateTime(FormatDateTime('YYYY-MM-DD', dtpResvDateJ.date) + ' ' +
                                 FormatDateTime('HH:NN:SS'  , dtpResvTimeJ.Time));

      sDateTime := sDateTime - ((1 / 24 / 60) * StrToFloatDef(CBSecond.Text, 0));

      dtpResvDate.Text := FormatDateTime('YYYY-MM-DD', sDateTime);
      dtpResvTime.Text := FormatDateTime('HH:NN:SS'  , sDateTime);

      CheckResvDateTime(True);
    end;
  except on E: Exception do
		Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.SetMunuChecked( sName : String; bCheck : Boolean);
Var j : Integer;
begin
  SetDebugeWrite('JON01.SetMunuChecked');
  try
		if GS_PRJ_AREA = 'S' then
		begin
			for j := 0 to pmSpop.Items.Count - 1 do
			begin
				if pmSpop.Items.Items[j].Tag In [11..17] then
				begin
					if Copy(pmSpop.Items.Items[j].Caption, 1, 1) = sName then
					begin
						pmSpop.Items.Items[j].Checked := bCheck;
						Break;
					end
					else if sName = '탁확' then
					begin
						pmSpop.Items.Items[16].Checked := bCheck;
						Break;
					end;
						 
				end;
			end;
		end
		else
		begin
			for j := 0 to pmSpop.Items.Count - 1 do
			begin
				if pmSpop.Items.Items[j].Tag In [11..16] then
				begin
					if Copy(pmSpop.Items.Items[j].Caption, 1, 1) = sName then
					begin
						pmSpop.Items.Items[j].Checked := bCheck;
						Break;
					end;
				end;
			end;
		end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.cbTelViewPropertiesChange(Sender: TObject);
begin
  if cbTelView.ItemIndex = 1 then
  begin
    if cxtCuTel2.Text = '' then
    begin
      GMessagebox('전화번호2에 번호가 없습니다.',CDMSI);
      cbTelView.ItemIndex := 0;
    end;
  end;

  if cbTelView.ItemIndex = 2 then
  begin
    BtnCenterMng.Down := True;
  end else
  begin
    BtnCenterMng.Down := False;
  end;

  pSetCuTelLabel(cbTelView.ItemIndex);
end;

procedure TFrm_JON01.cb_00Click(Sender: TObject);
var wStr : string;
		i, j, iRow : Integer;
begin
	SetDebugeWrite('JON01.cb_00Click');
	try
		wStr := meoStartArea.Text;
		if TAdvGlowButton(Sender).Down then
		begin
			if TAdvGlowButton(Sender).Caption = '탁' then
			begin
				if cb_06.Down then
				begin
					cb_06.Down := False;
					i := Pos('탁확)', wStr);
					if i = 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁확)'), Length(widestring(wStr)) - Length(widestring('탁확)')));
						sTakHwak := 'n';
					end else
					if i > 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁확)') , Length(widestring(wStr)) - i);
						sTakHwak := 'n';
					end else
						sTakHwak := 'n';

					SetMunuChecked('탁확', False);
				end;

				pnlWkLicType.visible := False;		 		
				if Pos('탁송)', wStr) < 1 then
					AddSpop('탁송기사만', 11);
				sTaksong := 'y';
				SetMunuChecked('탁', True);
			end else
			if TAdvGlowButton(Sender).Caption = '탁확' then
			begin
				if cb_00.Down then
				begin
					cb_00.Down := False;
					i := Pos('탁송)', wStr);
					if i = 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁송)'), Length(widestring(wStr)) - Length(widestring('탁송)')));
						sTaksong := 'n';
					end else
					if i > 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁송)') , Length(widestring(wStr)) - i);
						sTaksong := 'n';
					end else
						sTaksong := 'n';

					SetMunuChecked('탁', False);
				end else
				if btnTakAlly.Down then
				begin
					cb_00.Down := False;
					i := Pos('탁송)', wStr);
					if i = 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁송)'), Length(widestring(wStr)) - Length(widestring('탁송)')));
						sTaksong := 'n';
					end else
					if i > 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁송)') , Length(widestring(wStr)) - i);
						sTaksong := 'n';
					end else
						sTaksong := 'n';

					SetMunuChecked('탁', False);
				end;
				if Pos('수정', Self.Caption) > 0 then //탁확에서 앱접수는 연관없음
				begin
					Try
						cbbLicType.ItemIndex := cbbLicType.Properties.Items.IndexOf(GetLicTypeValue(sLicType));
					Except
						cbbLicType.ItemIndex := -1;
          End;
				end
				else
					if cbbLicType.ItemIndex = 3 then cbbLicType.ItemIndex := 0;
					
				pnlWkLicType.visible := True;				
				
				if Not ChkMini.Checked then
					if cb_06.Left + 3 > 377 then pnlWkLicType.Left := 377 else pnlWkLicType.Left := cb_06.Left + 3
				else
					pnlWkLicType.Left := cb_06.Left - (pnlWkLicType.Width div 2);
				pnlWkLicType.Top  := GBTop3.Top + cb_06.Top + cb_06.height + 3;
				
				if Pos('탁확)', wStr) < 1 then
					AddSpop('탁송확대기사만', 16);
				sTakHwak := 'y';
				SetMunuChecked('탁확', True); 
			end else
			if TAdvGlowButton(Sender).Caption = '정' then
      begin
        if Pos('정장)', wStr) < 1 then
          AddSpop('정장기사만', 12);
        SetMunuChecked('정', True);
      end else
      if TAdvGlowButton(Sender).Caption = '경' then
      begin
        if Pos('경유)', wStr) < 1 then
          AddSpop('경유있음', 13);
        SetMunuChecked('경', True);
      end else
      if TAdvGlowButton(Sender).Caption = '적' then
      begin
        if Pos('적요)', wStr) < 1 then
          AddSpop('적요있음', 14);
        SetMunuChecked('적', True);
			end else
      if TAdvGlowButton(Sender).Caption = '스' then
      begin
        if Pos('스틱)', wStr) < 1 then
          AddSpop('스틱기사만', 15);
				sStickCall := 'y';
        SetMunuChecked('스', True);
      end else
      if TAdvGlowButton(Sender).Caption = Copy(Trim(GS_USERSELECT), 1, 1) then
      begin
        if Pos(Trim(GS_USERSELECT) + ')', wStr) < 1 then
					AddSpop(Trim(GS_USERSELECT1), 17);
				SetMunuChecked(Copy(Trim(GS_USERSELECT), 1, 1), True); 
      end;
    end else
    begin
			if TAdvGlowButton(Sender).Caption = '탁' then
			begin
				pnlWkLicType.visible := False;				
				i := Pos('탁송)', wStr);
				if i = 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁송)'), Length(widestring(wStr)) - Length(widestring('탁송)')));
					sTaksong := 'n';
				end else
				if i > 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁송)') , Length(widestring(wStr)) - i);
					sTaksong := 'n';
				end else
					sTaksong := 'n';

				SetMunuChecked('탁', False);
			end else
			if TAdvGlowButton(Sender).Caption = '탁확' then
			begin
				sLicType := '00';
				pnlWkLicType.visible := False;				
				i := Pos('탁확)', wStr);
				if i = 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁확)'), Length(widestring(wStr)) - Length(widestring('탁확)')));
					sTakHwak := 'n';
				end else
				if i > 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁확)') , Length(widestring(wStr)) - i);
					sTakHwak := 'n';
				end else
					sTakHwak := 'n';

				SetMunuChecked('탁확', False);

				if btnTakAlly.Down then
				begin
					if Pos('탁송)', wStr) < 1 then
						AddSpop('탁송기사만', 11);
					sTaksong := 'y';
				end;
			end else
			if TAdvGlowButton(Sender).Caption = '정' then
      begin
        i := Pos('정장)', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length('정장)'), Length(wStr) - Length('정장)'));
        end else
        if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('정장)') , Length(wStr) - i);
        end;
        SetMunuChecked('정', False);
      end else
      if TAdvGlowButton(Sender).Caption = '경' then
      begin
				i := Pos('경유)', wStr);
				if i = 1 then
				begin
					meoStartArea.text := Copy(wStr, 1 + Length('경유)'), Length(wStr) - Length('경유)'));
				end else
				if i > 1 then
				begin
					meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('경유)') , Length(wStr) - i);
				end;
				SetMunuChecked('경', False);

			end else
			if TAdvGlowButton(Sender).Caption = '적' then
			begin
        i := Pos('적요)', wStr);
				if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length('적요)'), Length(wStr) - Length('적요)'));
        end else
				if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('적요)') , Length(wStr) - i);
        end;
        SetMunuChecked('적', False);
      end else
      if TAdvGlowButton(Sender).Caption = '스' then
      begin
        i := Pos('스틱)', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length('스틱)'), Length(wStr) - Length('스틱)'));
				end else
				if i > 1 then
				begin
					meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('스틱)') , Length(wStr) - i);
				end;
				sStickCall := 'n';
				SetMunuChecked('스', False);
      end else
      if TAdvGlowButton(Sender).Caption = Copy(Trim(GS_USERSELECT), 1, 1) then
      begin
        i := Pos(Trim(GS_USERSELECT) + ')', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length(Trim(GS_USERSELECT) + ')'), Length(wStr) - Length(Trim(GS_USERSELECT) + ')'));
        end else
        if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length(Trim(GS_USERSELECT) + ')') , Length(wStr) - i);
        end;
        SetMunuChecked(Copy(Trim(GS_USERSELECT), 1, 1), False);
  		end;
  	end;

    if (lcsActiveEdit = 'meoStartArea') then
      if meoStartArea.CanFocus then meoStartArea.SetFocus;
		if (lcsActiveEdit = 'meoEndArea') then
      if meoEndArea.CanFocus then meoEndArea.SetFocus;
    if (lcsActiveEdit = 'meoViaArea') then
		begin
			if ViaNowTag = 1 then
				if meoViaArea1.CanFocus then meoViaArea1.SetFocus
			else
				if meoViaArea[ViaNowTag].CanFocus then meoViaArea[ViaNowTag].SetFocus;
		end;

  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.chkCenterMngClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.chkCenterMngClick');
  CustBrTelYN := IfThen(chkCenterMng.Checked, 'y', 'n');
  BtnCenterMng.Down := TcxCheckBox(Sender).Checked;

  if chkCenterMng.Checked then
  begin
    cbTelView.ItemIndex := 2;
  end else
  begin
    if ( Trim(cxtCuTel2.Text) <> '' ) then cbTelView.ItemIndex := 1
                                      else cbTelView.ItemIndex := 0
  end;
end;

procedure TFrm_JON01.cxBtnChoiceClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxBtnChoiceClick');
  // 법인 선택 정보를 보여준다.
  Proc_BubinChoice;
end;

procedure TFrm_JON01.cxBtnCloseClick(Sender: TObject);
begin
  pnlBubin.Visible := False;
end;

procedure TFrm_JON01.cxBtnCuDelClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxBtnCuDelClick');
  // 권한 적용 (지호 2008-08-19)
  if TCK_USER_PER.JON_CustDel <> '1' then
  begin
    GMessagebox('고객 삭제 권한이 없습니다.', CDMSI);
    Exit;
  end;
  proc_delete_customer;
end;

procedure TFrm_JON01.cxBtnCuNewClick(Sender: TObject);
Var iRow : Integer;
begin
  SetDebugeWrite('JON01.cxBtnCuNewClick');
  try
    if ( Not Assigned(Frm_CUT011) ) Or ( Frm_CUT011 = Nil ) then Frm_CUT011 := TFrm_CUT011.Create(Nil);

		Frm_CUT011.FControlInitial(true); // 컨트롤 초기화..

		Frm_CUT011.pCUT011Dock.bUnDock := pJON01Dock.bUnDock;
		Frm_CUT011.pCUT011Dock.HdNo    := Proc_HDNOSearch;//pJON01Dock.HdNo;
		Frm_CUT011.pCUT011Dock.BrNo    := Proc_BRNOSearch;//pJON01Dock.BrNo;
		Frm_CUT011.pCUT011Dock.BrName  := pJON01Dock.BrName;
    Frm_CUT011.pCUT011Dock.Gubun   := pJON01Dock.Gubun;
    Frm_CUT011.pCUT011Dock.Idx     := pJON01Dock.Idx;

		// 78 : 접수창에서 신규등록 58 : 수정창에서 신규등록
    if (btnCmdUpdSave.Visible) and (btnCmdUpdSave.Enabled) then
    begin
			iRow := Frm_CUT011.cxCustTel.DataController.AppendRecord;
      Frm_CUT011.cxCustTel.DataController.Values[iRow, 0] := strtocall(cxtCuTel.Text);
      Frm_CUT011.cxCustTel.DataController.Values[iRow, 1] := '수신';
      Frm_CUT011.cxCustTel.DataController.Values[iRow, 3] := '해제';
			Frm_CUT011.Tag := 79;
		end else
		if (not btnCmdUpdSave.Visible) then
		begin
			iRow := Frm_CUT011.cxCustTel.DataController.AppendRecord;
			Frm_CUT011.cxCustTel.DataController.Values[iRow, 0] := strtocall(cxtCuTel.Text);
			Frm_CUT011.cxCustTel.DataController.Values[iRow, 1] := '수신';
			Frm_CUT011.cxCustTel.DataController.Values[iRow, 3] := '해제';
			Frm_CUT011.Tag := 59;
		end;

		Frm_CUT011.Hint := IntToStr(Self.Tag);
    Frm_CUT011.clbCuSeq.Caption := '';
    Frm_CUT011.proc_search_brKeyNum(Proc_BRNOSearch, Proc_MainKeyNumberSearch);

//    if Frm_Main.JON01MNG[Self.Tag].Dock then
//    begin
//    	Frm_CUT011.Left := Frm_JON00.Left - (Frm_CUT011.Width + 1);
//      Frm_CUT011.Top  := Frm_JON00.Top + 100;
//    end else
//    begin
//    	Frm_CUT011.Left := Self.Left - (Frm_CUT011.Width + 1);
//      Frm_CUT011.Top  := Self.Top + 100;
//    end;

    Frm_CUT011.Show;
		Frm_CUT011.proc_cust_Intit;
		Frm_CUT011.cboCuLevel.itemindex := cboCuLevel.itemindex;
		Frm_CUT011.edtCuName.Text := edtCuName.Text;
		case CbCuGb.ItemIndex of
		0 : Frm_CUT011.rdoCuGb1.Checked := True;  
		1 : Frm_CUT011.rdoCuGb2.Checked := True;
		2 : 
			begin
				Frm_CUT011.rdoCuGb3.Checked := True;  
//				Frm_CUT011.cboCuBubin.ItemIndex := Frm_CUT011.cboCuBubin.properties.Items.IndexOf(Trim(cxtCuBubin.Text));
			end;
		end;
	except on E: Exception do
		Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.cxBtnCuUpdateClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.cxBtnCuUpdateClick');
  try
    // 권한 적용 (지호 2008-08-19)
    if TCK_USER_PER.COM_CustModify <> '1' then
    begin
      GMessagebox('고객 수정권한이 없습니다.', CDMSI);
      Exit;
    end;

    if Pos('*', cxtCuTel.Text) > 0 then
    begin
      GMessageBox('전화번호가 보호된 고객은 수정할 수 없습니다.', CDMSI);
      Exit;
		end;

		if Trim(lcsCu_seq) = '' then
		begin
			GMessagebox('신규 미등록고객은 고객등록 후 수정이 가능합니다.', CDMSI);
			Exit;
		end;

    if ( Not Assigned(Frm_CUT011) ) Or ( Frm_CUT011 = Nil ) then Frm_CUT011 := TFrm_CUT011.Create(Nil);
		Frm_CUT011.pCUT011Dock.bUnDock := pJON01Dock.bUnDock;
		Frm_CUT011.pCUT011Dock.HdNo    := Proc_HDNOSearch;//pJON01Dock.HdNo;
		Frm_CUT011.pCUT011Dock.BrNo    := Proc_BRNOSearch;//pJON01Dock.BrNo;
		Frm_CUT011.pCUT011Dock.BrName  := pJON01Dock.BrName;
    Frm_CUT011.pCUT011Dock.Gubun   := pJON01Dock.Gubun;
    Frm_CUT011.pCUT011Dock.Idx     := pJON01Dock.Idx;

		// 69 : 수정창에서 고객수정 49 : 접수창에서 고객수정
    if (btnCmdUpdSave.Visible) and (btnCmdUpdSave.Enabled) then
			Frm_CUT011.Tag := 69
    else
    if (not btnCmdUpdSave.Visible) then
			Frm_CUT011.Tag := 49;

    Frm_CUT011.FControlInitial(true); // 컨트롤 초기화..
    Frm_CUT011.Hint := IntToStr(Self.Tag);
		Frm_CUT011.clbCuSeq.Caption := lcsCu_seq;
    Frm_CUT011.proc_search_brKeyNum(Proc_BRNOSearch, Proc_MainKeyNumberSearch);
//    if Frm_Main.JON01MNG[Self.Tag].Dock then
//    begin
//    	Frm_CUT011.Left := Frm_JON00.Left - (Frm_CUT011.Width + 1);
//      Frm_CUT011.Top  := Frm_JON00.Top + 100;
//    end else
//    begin
//    	Frm_CUT011.Left := Self.Left - (Frm_CUT011.Width + 1);
//      Frm_CUT011.Top  := Self.Top + 100;
//    end;
    Frm_CUT011.Show;
    Frm_CUT011.proc_cust_Intit;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.cxBtnSelectClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxBtnSelectClick');
  // 법인 정보를 조회한다.
  Proc_BubinListSearch;
end;

procedure TFrm_JON01.cxBtnSpSaveClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxBtnSpSaveClick');
	if (lcsCu_seq <> '') then
  begin
 		// 고객 기본정보를 저장 한다.
  	Proc_CustBasicSave
  end else
	begin
		GMessagebox('신규 미등록 고객은 기본정보를 저장 할 수 없습니다. 고객등록을 먼저 하세요!', CDMSI);
	end;
end;

procedure TFrm_JON01.cxBtnWaitTmRateClick(Sender: TObject);
var
  pt: TPoint;
begin
	GetCursorPos(pt);
  advPMnuWTR.Popup(pt.X, pt.Y);
end;

procedure TFrm_JON01.btnCmdExitClick(Sender: TObject);
Var iCnt : Integer;
begin
	SetDebugeWrite('JON01.btnCmdExitClick');
  try
		if self.Tag <> 20 then //미리보기가 아닐때만   self.Tag = 20 미리보기
		begin
			if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) and (Pos('조회', Self.Caption) = 0) and (locCardPaySeq <> '') and (not Only_Exit) then
			begin
				GMessagebox('카드결제 및 현금영수증 발행 및 쿠폰결재를 한 후에 접수창 종료를 하게되면 ' + #13#10
									+ '거래내역이 사라지게 됩니다. ' + #13#10
									+ '최소한 "문의등록" 을 하셔서 거래내역을 보존하세요.' , CDMSI);
				Exit;
			end;

			if ( ( Not fnc_RealKmThread_End ) And ( GT_DISTANCE_ST = 1 ) )  Or  ( giViaKmComplet )  then
			begin
				GMessagebox('경로탐색거리 계산중입니다' + #13 +
										'완료 후 종료 바랍니다.', CDMSI);
				proc_CaActiveComplete; //종료시에는 1회 메세지 이후 종료될 수 있도록 강제로 False 처리 20191201 KHS						
				Exit;
			end;

			// 원 접수자가 종료시에는 무조건 종료 처리
      if ( ( pnlRShare.Visible ) Or ( pnlRShare.Tag = 1 ) ) And ( Not Frm_Main.JON01MNG[Self.Tag].rOriginal )  then
			begin
				if Application.MessageBox('접수창 제어중입니다.' + #13#10
																+ '상대 접수창도 함께 종료하시겠습니까?', '[확인]', MB_ICONQUESTION + MB_YESNO) = IDYES then
				begin   // 상대 접수창 종료 처리
					if lblCShareJId.Hint = GT_USERIF.ID then
					begin
						pSet705CShareDataClick(False, 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdExit', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
					end else
					if lblCShareRId.Hint = GT_USERIF.ID then
					begin
						pSet705CShareDataClick(False, 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdExit', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
					end;
				end else // 상대 접수창 공유만 종료 처리
				begin
					btnCShareClose.Click;
	//        Exit;
				end;
			end;

			// 종료 시 자동 문의 변경 옵션 처리  20120801  LYB
			if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) And GS_JON_AUTOCMDQUESTION and bAUTOCMDQUESTION then
			begin
				if (cxtCuTel.Text = '') and ((cxtCallTelNum.Text = '발신정보없음') or (cxtCallTelNum.Text = '')) then
				begin
					bAUTOCMDQUESTION := False;
				end else
				begin
					bAUTOCMDQUESTION := False;
					btnCmdQuestionClick(Sender);
					Exit;
				end;
			end;

			// DNIS 대표번호 찾기 정보창을 감춘다.  2011.05.17
			shrDNIS_DSP.Visible := False;

			if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
			begin
				if btnCmdExit.Hint = 'UPDATE_MODE' then
				begin // 오더정보 수정모드 설정을 한다.
					if Length(cxTxtBrNameCaption.Hint) > 18 then
					begin
						// 오픈된지 1분 지난 수정건에 대해서는 Lock 해제 처리를 하지 않는다.
						if StrToIntDef(FormatDateTime('hhnnss', (StrToDateTime(cxTxtBrNameCaption.Hint) - now)), 99) < 60 then
						begin
							if loc_bUpdateLock then
							begin // 수정화면 Lock 설정 여부.[True:설정, False:미설정]
								Proc_AcceptLock('2'); // 해당오더의 Lock을 해제 한다.
							end;
						end;
					end;
				end;
				cxTxtBrNameCaption.Hint := ''; // 수정모드 읽은 최초시간 초기화.
			end;

			tmrCShare.Enabled := False;
			BtnQRate.Enabled := True;
			BtnQRate.Tag := 0;
			RQAListView.DataController.SetRecordCount(0);


			lblCShareJId.Hint := '';
			lblCShareRId.Hint := '';
			lblCShareRId.Caption := '';
			GC_PRE_CSHAREDATA := '';

			PnlMain.Enabled := True;
			pnlJonMain.Enabled := True;
			PnlTitle.Enabled := True;
			pnlShare.Visible := False;
			pnlRShare.Visible := False;
      pnlRShare.Tag := 0;

			gbRQAList.Visible := False;

			if bAppOrder then sleep(300); //앱오더 이면 수정창 오픈을 위해 0.3초 대기
			bAppOrder := False;          //앱오더 여부 20191217 KHS
		end;
		// 접수창을 닫는다.
		Proc_JoinFromClose;
		if ( Frm_Jon012.Tag = Self.Tag ) And ( Frm_Jon012.Showing ) then
		begin
			Frm_Jon012.BtnpnlColorSetClose.Click;
			// 고객이용내역 화면을 닫는다.
			Frm_Jon012.bChkTime := False;
			Frm_Jon012.TmrChkTag.Tag := 100;
			Frm_Jon012.Hide;
		end;

			// 전화번호 위치 조회.
		if Assigned(Frm_CUT011) then Frm_CUT011.Close;

		if Assigned(Frm_Main.Frm_JON020[Self.Tag]) And
			( Frm_Main.JON020MNG[Self.Tag].CreateYN ) then Frm_Main.Frm_JON020[Self.Tag].Close;

		if Assigned(Frm_JON015) and Frm_JON015.HandleAllocated and (Frm_JON015.OrderHandle = Self.Handle) then
			if Frm_JON015.Tag = Self.Tag then Frm_JON015.Close;

		if Assigned(Frm_JON56) then Frm_JON56.Close;
		if Assigned(Frm_JON30S) then Frm_JON30S.Close;
		if Assigned(Frm_JON34) then Frm_JON34.Close;

		if Assigned(Frm_JON019) then
			if Frm_JON019.Tag = Self.Tag then Frm_JON019.Close;

		if Assigned(Frm_JON60)  then      // LBS동의
			if Frm_JON60.Tag = Self.Tag then Frm_JON60.Close;

		Screen.Cursor := crDefault;
    		
		sCust_Gubun := '';
		if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
		begin
			btnCmdExit.Tag := -1;
		end;

		if Assigned(Frm_Main.Frm_JON03[Jon03Tag]) then
		begin
      if ( Frm_Main.JON03MNG[Jon03Tag].Use ) And ( Frm_Main.JON03MNG[Jon03Tag].CreateYN ) then
      begin
       if Frm_Main.Frm_JON03[Jon03Tag].Grd2.CanFocus then
		   	 Frm_Main.Frm_JON03[Jon03Tag].Grd2.SetFocus
		   else
		   if Frm_Main.Frm_JON03[Jon03Tag].cxGridCounselToday.CanFocus then
		   	 Frm_Main.Frm_JON03[Jon03Tag].cxGridCounselToday.SetFocus;
      end;
		end;
	except
    on e: exception do
    begin
      Log('btnCmdExitClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdExitClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btnCmdJoinClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.btnCmdJoinClick');
  try
		bJoinBtn := False;
		if Pos('앱접수', Self.Caption) > 0 then //앱접수로 들어온 대기오더인지 먼저 처리 후 옵션 적용
		begin
			bAppOrderOpen := True;   //콜링창에서는 초기화 한뒤 수정창에서 다시 설정해줌
			btnCmdUpdSaveClick(btnCmdUpdSave);
			exit;
		end else
		if (btnCmdUpdSave.Visible) and (cxtJoinNum.Hint = '5') and ( GB_ResToJoin_USE ) then  //대기오더 수정시 접수로 변경 사용시 20190618 KHS
		begin
			bJoinBtn := True;
			btnCmdUpdSaveClick(btnCmdUpdSave);
		end;

		
		Proc_BtnEnabled(False);
		
		if GS_SEARCH_DEST_NOPOI_FALSE then
		begin
      if Trim(meoEndArea.Text) = '' then
      begin
        GMessagebox('[접수] 도착지명이 없으면 접수가 불가능합니다.' + #13#10
                  + '도착지를 입력하세요' + #13#10
                  + '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSI);
				if meoEndArea.CanFocus then meoEndArea.SetFocus;
				Proc_BtnEnabled(True);
        Exit;
      end;
    end;

		if ABubinStateIndex in [1,2] then
    begin
      if cbbPayMethod.Text = PAY_METHOD_POST_NML then
      begin
        GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSI);
				SetPayMethod(PAY_METHOD_MONEY);
				Proc_BtnEnabled(True);
        Exit;
      end;
    end;

    if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
    begin
      if (lcsCu_seq = '') And (edtPostPay.Value = 0) then
      begin
        GMessagebox('신규고객은 마일리지 사용을 할 수 없습니다.', CDMSI);
				SetPayMethod(PAY_METHOD_MONEY);
				Proc_BtnEnabled(True);
        Exit;
      end;
    end;

    if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) And ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
				begin
					Proc_BtnEnabled(True);
					Exit;
				end;
      end;
    end;

		// 플러스콜 표준요금을 비교한다. 2010.10.13
    if Not proc_PlusCall_RateYN then
      Exit;

    // 화면닫는 중이면 요청 무시
    if (tmFormClose.Enabled) and (tmFormClose.Tag = 99) and (loc_TmClose = 'CLOSE') then
    begin
			OutputDebugString(PChar(Format('Closing accept window', [])));
			Proc_BtnEnabled(True);
      Exit;
    end;

		if btnCmdUpdSave.Visible then
    begin
      if Application.MessageBox('현재 화면은 오더 수정모드 입니다.' + #13#10 + #13#10
        + '수정모드에서 해당 오더를 신규오더로 [접수] 하시겠습니까?',
				'[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
			begin
				Proc_BtnEnabled(True);
				exit;
			end;

      // 수정모드에서 신규오더는 쿠폰 정보 저장 않함
      if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
      begin
        locCardPaySeq := '';   // 결제일련번호
				locCardTranNo := '';   // 거래번호
        locCardPayInfo:= '';   // 카드결재 정보
      end;
	  	locCardPaySeq := '';   // 결제일련번호
			locCardTranNo := '';   // 거래번호
  		locCardPayInfo:= '';   // 결재 정보
    end;

    if (Assigned(Frm_JON015) and Frm_JON015.HandleAllocated) and
       (Frm_JON015.Count > 0) and (Frm_JON015.OrderHandle = Self.Handle) then
    begin
      if Application.MessageBox(PChar(Format('%d 건의 복수콜을 접수하시겠습니까?', [Frm_JON015.Count])),
        '복수콜 접수', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
			begin
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    // 오더정보 접수 모드 설정을 한다.
		btnCmdExit.Hint := 'INSERT_MODE';
    btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 접수 시 문의 처리 안타게 처리 20120806 LYB
		Only_Exit := True;   //종료버튼 힌트변경됨
    // 오더를 접수등록을 한다.
    gsOrderClick := '0';
		Proc_OrderJoinIns;
  Except
    on e: exception do
    begin
      Log('btnCmdJoinClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdJoinClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btnCmdJoinCopyClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.btnCmdJoinCopyClick');
  try
    if GS_SEARCH_DEST_NOPOI_FALSE then
    begin
      if Trim(meoEndArea.Text) = '' then
      begin
        GMessagebox('[접수후복사] 도착지명이 없으면 접수가 불가능합니다.' + #13#10
                  + '도착지를 입력하세요' + #13#10
                  + '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSI);
        if meoEndArea.CanFocus then meoEndArea.SetFocus;
  //      meoEndArea.SelStart := Length(meoEndArea.Text);
        Exit;
      end;
    end;

    if btnCmdUpdSave.Visible then
    begin
      if Application.MessageBox('현재 화면은 오더 수정모드 입니다.' + #13#10 + #13#10
        + '수정모드에서 해당 오더를 신규오더로 [접수후복사] 하시겠습니까?',
        '[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
        Exit;

      // 수정모드에서 신규오더는 쿠폰 정보 저장 않함
      if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
      begin
        locCardPaySeq := '';   // 결제일련번호
				locCardTranNo := '';   // 거래번호
        locCardPayInfo:= '';   // 카드결재 정보
      end;
    end;

    if ABubinStateIndex in [1,2] then
    begin
      if cbbPayMethod.Text = PAY_METHOD_POST_NML then
      begin
        GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSI);
        SetPayMethod(PAY_METHOD_MONEY);
        Exit;
      end;
    end;

    if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
    begin
      if (lcsCu_seq = '') And (edtPostPay.Value = 0) then
      begin
        GMessagebox('신규고객은 마일리지 사용을 할 수 없습니다.', CDMSI);
        SetPayMethod(PAY_METHOD_MONEY);
        Exit;
      end;
    end;

    if edtPostPay.Value > curRate.Value then
    begin
      if (cbbPayMethod.Text <> PAY_METHOD_BUSAN) and (cbbPayMethod.Text <> PAY_METHOD_BUSAN2K) And
         (cbbPayMethod.Text <> PAY_METHOD_BUSAN3K) then
      begin
        GMessagebox('기사송금금액이 요금보다 많습니다.', CDMSI);
        edtPostPay.Value := curRate.Value;
      end;
    end;

    if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) And ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
		begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
          Exit;
      end;
    end;

    // 플러스콜 표준요금을 비교한다. 2010.10.13
    if Not proc_PlusCall_RateYN then Exit;

    // 오더정보 접수후복사 모드 설정을 한다.
    btnCmdExit.Hint := 'INSERTCOPY_MODE';
    btnCmdJoinCopy.Hint := 'JOINCOPY'; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 접수후복사 시 문의 처리 안타게 처리 20120806 LYB
    Only_Exit := True;   //종료버튼 힌트변경됨

    // 오더를 접수등록을 한다.
    gsOrderClick := 'JC';
    Proc_OrderJoinIns;
  Except
    on e: exception do
    begin
      Log('btnCmdJoinCopyClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdJoinCopyClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btnCmdMultiCallClick(Sender: TObject);
var
  sBrNo: string;
	AData: TMultiCallData;
	sTmpLon, sTmpLat : string;
	dTmpLon, dTmpLat : Double;
	bLonLat : Boolean; //좌표유효성 검사
begin
  SetDebugeWrite('JON01.btnCmdMultiCallClick');
	try
		if func_ecukrCheck then exit;


		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
		begin
			sTmpLon := SetWGS84(cxtStartYval.Text); 
			sTmpLat := SetWGS84(cxtStartXval.Text);      //037XXXXX -> 37.XXXXXXX로 변환
			dTmpLon := StrToFloatDef(sTmpLon, 0);                        //더블형으로 변환
			dTmpLat := StrToFloatDef(sTmpLat, 0);
			bLonLat := PtInPolygon(dTmpLon, dTmpLat, FKOREAAREA_XY.Lon, FKOREAAREA_XY.Lat, FKOREAAREA_XY.Lon.count);
			if Not bLonLat then  //유효한 좌표가 아니면
			begin
				GMessagebox('[출발지 좌표오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
									+ '좌표(' + cxtStartYval.Text + '/' + cxtStartXval.Text + ')' + #13#10
									+ '출발지를 다시 조회하시기 바랍니다.', CDMSI);
				Assert(False, '출발지좌표 : ' + lcsStaDocId + '/'
										 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + meoStartArea.text + '/' + GS_Grid_DEP + '/' + '복수콜등록');
				if meoStartArea.CanFocus then meoStartArea.SetFocus;
				Exit;
			end;

			if (cxtStartAreaDetail.Text <> '') and ((lcsSta1 = '') or (lcsSta2 = '') or (lcsSta3 = '')) then
			begin
				GMessagebox('[출발지 정보오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
									+ '시도 : ' + lcsSta1 + ', 시군구 : ' + lcsSta2 + ', 읍면동 : ' + lcsSta3 + #13#10
									+ '출발지를 다시 조회하시기 바랍니다.', CDMSI);
				Assert(False, '출발지정보 : ' + lcsStaDocId + '/' + lcsSta1 + '/' + lcsSta2 + '/' + lcsSta3 + '/'
										 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + cxtStartAreaDetail.text + '/' + GS_Grid_DEP + '/' + '복수콜등록');
				if meoStartArea.CanFocus then meoStartArea.SetFocus;
				Exit;
			end;
		end;

		if (lcsEnd1 <> '') and ((lcsEnd2 <> '') or (lcsEnd3 <> '')) and ((cxtEndYval.Text = '') or (cxtEndXval.Text = '')) then
		begin
			GMessagebox('[도착지 좌표오류]' + #13#10 + '도착지좌표가 올바르지 않습니다.' + #13#10
								+ '좌표(' + cxtEndYval.Text + '/' + cxtEndXval.Text + ')' + #13#10
								+ '도착지를 다시 조회하시기 바랍니다.', CDMSI);
			Assert(False, '도착지좌표 : ' + lcsStaDocId + '/'
									 + cxtEndYval.Text + '/' + cxtEndXval.Text + '/' + meoEndArea.text + '/' + GS_Grid_DES + '/' + '복수콜등록');
			if meoEndArea.CanFocus then meoEndArea.SetFocus;
			Exit;
		end;

		if GS_SEARCH_DEST_NOPOI_FALSE then
		begin
			if Trim(meoEndArea.Text) = '' then
			begin
				GMessagebox('[복수콜] 도착지명이 없으면 접수가 불가능합니다.' + #13#10
									+ '도착지를 입력하세요' + #13#10
                  + '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSI);
				if meoEndArea.CanFocus then meoEndArea.SetFocus;
	//      meoEndArea.SelStart := Length(meoEndArea.Text);
        Exit;
      end;
    end;

    // 플러스콜 체크되어 있으면 자동 해제한다.
    if GS_PRJ_AREA = 'S' then
    begin
      if btnPlusYN.Down then
      begin
        btnPlusYN.Down := False;
      end;
    end;

    if edtPostPay.Value > curRate.Value then
    begin
      if (cbbPayMethod.Text <> PAY_METHOD_BUSAN) and (cbbPayMethod.Text <> PAY_METHOD_BUSAN2K) And
         (cbbPayMethod.Text <> PAY_METHOD_BUSAN3K) then
      begin
        GMessagebox('기사송금금액이 요금보다 많습니다.', CDMSI);
        edtPostPay.Value := curRate.Value;
      end;
    end;

    if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) And ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
					+ '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
          Exit;
      end;
    end;

    if not NotNullCheck(True) then Exit;

    if IsPayMethodPost then
    begin
      GMessageBox('후불오더는 복수콜로 등록할 수 없습니다. [접수후복사(Z)]를 이용바랍니다.', CDMSI);
      Exit;
    end;

		if (cxLblCIDUseFlg.Hint <> 'CID') and (gsCuTelHint <> cxtCuTel.Text) then
    begin // CID 조회인지 설정을 한다., 고객전화번호 변경여부를 체크하기 위해 저장한다.
      GMessagebox(
        Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10
        + Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
        + '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요',
        CDMSI);
      Exit;
    end;

		if not Assigned(Frm_JON015) or not Frm_JON015.HandleAllocated then
    begin
      Frm_JON015 := TFrm_JON015.Create(Self);
      Frm_JON015.Tag  := Self.Tag;
      if Frm_Main.JON01MNG[Self.Tag].Dock then
      begin
        Frm_JON015.Left := Frm_JON00.Left - (Frm_JON015.Width + 1);
        Frm_JON015.Top  := meoStartArea.ClientOrigin.Y;
      end else
      begin
        Frm_JON015.Left := Self.Left - (Frm_JON015.Width + 1);
        Frm_JON015.Top  := meoStartArea.ClientOrigin.Y;
      end;
    end else
    begin
      if Frm_JON015.OrderHandle <> Self.Handle then
      begin
        GMessagebox('복수콜은 동시에 접수할 수 없습니다.' + #13#10
					+ '(다른 복수콜을 먼저 접수하시고 시도해주세요.)', CDMSI);
        Exit;
      end;
    end;

    bAUTOCMDQUESTION := False; // 복수콜 시 문의 처리 안타게 처리 20120806 LYB

    AData.StArea1 := lcsSta1;
    AData.StArea2 := lcsSta2;
    AData.StArea3 := lcsSta3;
    AData.StArea4 := cxtStartAreaDetail.Text;
    AData.StArea5 := meoStartArea.Text;

    AData.EdArea1 := lcsEnd1;
		AData.EdArea2 := lcsEnd2;
    AData.EdArea3 := lcsEnd3;
    AData.EdArea4 := cxtEndAreaDetail.Caption;
		AData.EdArea5 := meoEndArea.Text;

		AData.Price   := StrToIntDef(ReplaceAll(curRate.Text, ',', ''), 0);
    AData.Km      := fCruKm;
    AData.TotalTime := fTotalTime;
		AData.Summary := meoBigo.Text;
    AData.PayType := cbbPayMethod.Text;

    AData.StPosX  := cxtStartXval.Text;
    AData.StPosY  := cxtStartYval.Text;
    AData.EdPosX  := cxtEndXval.Text;
    AData.EdPosY  := cxtEndYval.Text;
    AData.CorpYN  := False;
		AData.PriceYN := chkNoSet.Down;
		AData.Call2YN := '';//IfThen(chkCall2.Checked, 'y', 'n'); // 콜마너2 체크박스
		AData.DriverCharge := StringReplace(cxDriverCharge.Text,',','',[rfReplaceAll]);
		
		if Frm_JON015.AddMultiCallData(Self.Handle, AData) then
    begin
			// Editor clear
      meoEndArea.Clear;
      lcsEnd1 := '';
      lcsEnd2 := '';
      lcsEnd3 := '';
			cxtEndAreaDetail.Clear;
      lblEndAreaName.Clear;
      cxReEndArea.Clear;

      cxtEndXval.Clear;
			cxtEndYval.Clear;

      Lbl_charge.Caption := '';
      Lbl_Distance.Caption := '';

			if gsMyRateRemarkMaintain = 'FALSE' then 
			begin
				curRate.Clear;
				cxDriverCharge.Clear;
			end;
			curKm.Clear;
      fCruKm := 0;
      fChgKm := 0;
      fDirKm := 0;
      fTotalTime := 0;
      fViaKm := 0;
      fStEdKm := 0;
      bViaKm := False;
			if gsMyRateRemarkMaintain = 'FALSE' then meoBigo.Clear;

      Frm_JON015.Show;

      if meoEndArea.CanFocus then meoEndArea.SetFocus;
    end else
    begin
      GMessagebox('복수콜 접수를 실패 했습니다.', CDMSI);
    end;
  Except
    on e: exception do
    begin
      Log('btnCmdMultiCallClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdMultiCallClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btnCmdNoSMSClick(Sender: TObject);
var sRequest : string;
    sURL, sURL1 : AnsiString;
begin
  SetDebugeWrite('JON01.btnCmdNoSMSClick');
  if GB_JON_NOSMSCONFIRM then
    if Application.MessageBox('SMS거부 하시겠습니까?', PChar(Application.Title), MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON1) = IDNO then Exit;

  if Not Frm_Main.JON01MNG[Self.Tag].rOriginal then
  begin
    if lblCShareJId.Hint = GT_USERIF.ID then
    begin
      pSet705CShareDataClick(False, 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdNoSMS', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
    end else
    if lblCShareRId.Hint = GT_USERIF.ID then
    begin
      pSet705CShareDataClick(False, 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdNoSMS', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
    end;
    Exit;
  end;

  try
    // 오더정보 수신거부 모드 설정을 한다.
    btnCmdExit.Hint := 'NOSMSINSERT_MODE';
    btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.
    lg_Save := '1';
    // 오더 수신거부 등록을 한다.
    Proc_OrderSMSRecvNo;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 오더 수신거부 등록을 한다.
procedure TFrm_JON01.Proc_OrderSMSRecvNo;
Var sHdNo : String;
begin
  SetDebugeWrite('JON01.Proc_OrderSMSRecvNo');
  try
    if not NotNullCheck then Exit;
		if func_ecukrCheck then exit;

    if cxLblCIDUseFlg.Hint <> 'CID' then
    begin // CID 조회인지 설정을 한다.
      if gsCuTelHint <> cxtCuTel.Text then
        // 고객전화번호 변경여부를 체크하기 위해 저장한다.
      begin
        GMessagebox(Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10 +
          Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
          + '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요', CDMSI);
        Exit;
      end;
    end;

    lg_Save := '1';
    Proc_Save('S');

    if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
    begin
      btnCmdExit.Tag := -1;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.btnCmdQuestionClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.btnCmdQuestionClick');
  // 플러스콜 체크되어 있으면 자동 해제한다.
  try
		Proc_BtnEnabled(False);
		if Assigned(Frm_Main.Frm_JON020[Self.Tag]) And ( Frm_Main.JON020MNG[Self.Tag].CreateYN ) then
    begin
      if Frm_Main.Frm_JON020[Self.Tag].PnlMain.Tag = 0 then
      begin
        GMessagebox('오토콜 고객창의 "동의", "거부", "문자" 버튼중에 하나를 선택하세요!', CDMSI);
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    if ABubinStateIndex in [1,2] then
		begin
      if cbbPayMethod.Text = PAY_METHOD_POST_NML then
      begin
        GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSI);
        SetPayMethod(PAY_METHOD_MONEY);
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    if GS_PRJ_AREA = 'S' then
    begin
      if BtnPlusYN.Down then
      begin
        BtnPlusYN.Down := False;
      end;
    end;

    // 오더정보 수정모드 설정을 한다.
    btnCmdExit.Hint := 'QUESTINSERT_MODE';
    btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 문의 시 문의 처리 안타게 처리 20120806 LYB
  	Only_Exit := True;   //종료버튼 힌트변경됨

    lg_Save := '1';
    gsOrderClick := '4';
    // 오더를 문의로 접수 한다.
		Proc_OrderQuesJoinIns;
  except
    on e: exception do
    begin
      Log('btnCmdQuestionClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdQuestionClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btnCmdUpdSaveClick(Sender: TObject);
var
  Status, msg: string;
begin
	SetDebugeWrite('JON01.btnCmdUpdSaveClick');
  try
  	// 수정을 클릭.
    if ( btnCmdUpdSave.Tag = 99 ) And ( cxtJoinNum.Hint <> '4' ) then
		begin // 수정 할 수 없음.
      GMessagebox('이용한지 24시간이 지난 오더는 수정 할 수 없고, 내용만 볼 수 있습니다.', CDMSI);
      Exit;
    end;
		if Pos('앱접수', Self.Caption) = 0 then //앱접수로 들어온 대기오더인지 먼저 처리 후 옵션 적용
		begin
			bAppOrderOpen := False; //그냥수정창일때는 상태변경 안함.
		end;

		// 고객전화번호 변경여부를 체크하기 위해 저장한다.
		if gsCuTelHint <> cxtCuTel.Text then  //수정모드에서 전화번호1 변경 가능 2016.07.23 KHS
		begin
			GMessagebox(Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10 +
				Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 수정하세요', [cxtCuTel.Text]) + #13#10
				+ '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요', CDMSI);
			Exit;
		end;
		
		if ABubinStateIndex in [1,2] then
    begin
      if cbbPayMethod.Text = PAY_METHOD_POST_NML then
      begin
        GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSI);
        SetPayMethod(PAY_METHOD_MONEY);
        Exit;
      end;
    end;

    // 오더정보 수정모드 설정을 한다.
  	btnCmdExit.Hint := 'UPDATE_MODE';

    Status := '';
  	if (cxtJoinNum.Hint = '5') and ( BtnResv.Tag = 1 ) then
		begin
			msg := '대기오더에 예약시간을 넣으면 예약으로 변경됩니다.#13#10예약으로 변경하시겠습니까?'#13#10#13#10
				+ '([예] 예약으로 저장, [아니오] 대기로 저장)';
			if Application.MessageBox(PChar(msg), CDMSI, MB_YESNO +
				MB_ICONQUESTION + MB_DEFBUTTON1) = IDYES then
			begin
				Status := 'R';
			end;
		end;

    if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) And ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
		begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
          Exit;
      end;
    end;

		if ((Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['2', '4', '8'])) // 수정[완료/문의/취소] 건 경우
				and ( (cxtStartXval.Text <> cxtStartXval.Hint) or (cxtStartYval.Text <> cxtStartYval.Hint)
				 or (cxtEndXval.Text <> cxtEndXval.Hint) or (cxtEndYval.Text <> cxtEndYval.Hint))  // 좌표변환이 있었을경우
        and (not FIsCalcPrice)
    then
    begin
			msg := '출발지/도착지정보가 변경되었으나, 요금은 재계산되지 않았습니다.'#13#10
        + '(수정[완료/취소/문의]오더는 요금항목을 선택하여 수동요금계산 바랍니다.)'#13#10#13#10
        + '요금 변경없이 저장 하시겠습니까?';

      if Application.MessageBox(PChar(msg), CDMSI, MB_YESNO +
        MB_ICONQUESTION + MB_DEFBUTTON1) = IDNO then
      begin
        if curRate.CanFocus then curRate.SetFocus;
        Exit;
      end;
    end;

		// 플러스콜로 등록되었는데, 수정시 플러스콜여건이 안되면 해제
    if btnPlusYN.Down then
      if proc_PlusCall_RateYN=false then Exit;

    // 조회 한 오더 정보를 수정 한다. : DB Update~~
		Proc_OrderUpdateSave(Status);
  Except
    on e: exception do
    begin
      Log('btnCmdUpdSaveClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdUpdSaveClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btnCmdWaitClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.btnCmdWaitClick');
  try
		Proc_BtnEnabled(False);
		if GS_SEARCH_DEST_NOPOI_FALSE then
    begin
      if Trim(meoEndArea.Text) = '' then
      begin
        GMessagebox('[대기] 도착지명이 없으면 대기접수가 불가능합니다.' + #13#10
                  + '도착지를 입력하세요' + #13#10
                  + '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSI);
				if meoEndArea.CanFocus then meoEndArea.SetFocus;
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    if ABubinStateIndex in [1,2] then
    begin
      if cbbPayMethod.Text = PAY_METHOD_POST_NML then
      begin
        GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSI);
				SetPayMethod(PAY_METHOD_MONEY);
				Proc_BtnEnabled(True);
        Exit;
      end;
    end;

    if btnCmdUpdSave.Visible then
    begin
      if Application.MessageBox('현재 화면은 오더 수정모드 입니다.'#13#10#13#10
				+ '수정모드에서 해당 오더를 신규오더로 [대기] 접수 하시겠습니까?',
        '[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
			begin
				Proc_BtnEnabled(True);
				Exit;
			end;

      // 수정모드에서 신규오더는 쿠폰 정보 저장 않함
      if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
			begin
				locCardPaySeq := '';   // 결제일련번호
				locCardTranNo := '';   // 거래번호
				locCardPayInfo:= '';   // 카드결재 정보
			end;
    end;

    if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) And ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
				begin
					Proc_BtnEnabled(True);
					Exit;
				end;
      end;
    end;

    // 플러스콜 표준요금을 비교한다. 2010.10.13
    if Not proc_PlusCall_RateYN then
      Exit;

    // 오더정보 대기접수 모드 설정을 한다.
    btnCmdExit.Hint := 'WAITINSERT_MODE';
    btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 대기 시 문의 처리 안타게 처리 20120806 LYB
    Only_Exit := True;   //종료버튼 힌트변경됨

    gsOrderClick := '5';
    // 오더를 대기로 접수 한다.
		Proc_OrderWaitJoinIns;
  Except
    on e: exception do
    begin
			Log('btnCmdWaitClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdWaitClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btnCmdWaitCopyClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.btnCmdWaitCopyClick');
  try
  	if GS_SEARCH_DEST_NOPOI_FALSE then
  	begin
  		if Trim(meoEndArea.Text) = '' then
  		begin
  			GMessagebox('[대기후복사] 도착지명이 없으면 대기접수가 불가능합니다.' + #13#10
  								+ '도착지를 입력하세요' + #13#10
  								+ '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSI);
        if meoEndArea.CanFocus then meoEndArea.SetFocus;
  			Exit;
  		end;
  	end;

    if ABubinStateIndex in [1,2] then
    begin
      if cbbPayMethod.Text = PAY_METHOD_POST_NML then
      begin
        GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSI);
        SetPayMethod(PAY_METHOD_MONEY);
        Exit;
      end;
    end;

    if btnCmdUpdSave.Visible then
    begin
      if Application.MessageBox('현재 화면은 오더 수정모드 입니다.' + #13#10 +
        #13#10 + '수정모드에서 해당 오더를 신규오더로 [대기후복사] 하시겠습니까?',
        '[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
        Exit;

      // 수정모드에서 신규오더는 쿠폰 정보 저장 않함
      if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
			begin
        locCardPaySeq := '';   // 결제일련번호
				locCardTranNo := '';   // 거래번호
      	locCardPayInfo:= '';   // 카드결재 정보
      end;
    end;

    if edtPostPay.Value > curRate.Value then
    begin
      if (cbbPayMethod.Text <> PAY_METHOD_BUSAN) and (cbbPayMethod.Text <> PAY_METHOD_BUSAN2K) And
         (cbbPayMethod.Text <> PAY_METHOD_BUSAN3K) then
      begin
        GMessagebox('기사송금금액이 요금보다 많습니다.', CDMSI);
        edtPostPay.Value := curRate.Value;
      end;
    end;

    if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) And ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
          Exit;
      end;
    end;

    // 플러스콜 표준요금을 비교한다. 2010.10.13
    if Not proc_PlusCall_RateYN then  Exit;

    // 오더정보 대기후복사 모드 설정을 한다.
  	btnCmdExit.Hint := 'WAITINSERTCOPY_MODE';
  	btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := 'JOINCOPY'; // 접수후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 대기후복사 시 문의 처리 안타게 처리 20120806 LYB
  	Only_Exit := True;   //종료버튼 힌트변경됨

    // 오더를 대기로 접수 한다.
    gsOrderClick := 'WC';
    Proc_OrderWaitJoinIns;
	Except
    on e: exception do
    begin
      Log('btnCmdWaitCopyClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdWaitCopyClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btnCtrlVCancelClick(Sender: TObject);
begin
  gbCtrlVCancel := True;
  PnlCtrlV.Visible := False;
end;

procedure TFrm_JON01.BtnCustAddClick(Sender: TObject);
var
  sBrNo, sKeyNum, sSeq, sCustTel: string;
begin
	SetDebugeWrite('JON01.BtnCustAddClick');
  if Length(Proc_HDNOSearch) < 3 then
  begin
    GMessagebox('지사정보를 선택하지 않았습니다. 지사를 선택 한 후에 오더접수를 하세요!', CDMSI);
    Exit;
  end;
  if (cxtCuTel.Text = '') and ((cxtCallTelNum.Text = '발신정보없음') or (cxtCallTelNum.Text = '')) then
  begin
    GMessagebox('고객번호는 ' + MDXCI_0005, CDMSI);
    if cxtCuTel.CanFocus then cxtCuTel.SetFocus;
    Exit;
  end;

  if TCK_USER_PER.COM_CustModify <> '1' then
  begin
    GMessagebox('고객 수정권한이 없습니다.', CDMSI);
    Exit;
  end;

  sBrNo   := Proc_BRNOSearch;
  sKeyNum := Proc_MainKeyNumberSearch;
  sSeq    := lcsCu_seq;
  sCustTel:= locsCuTel;

  try
    if ( not Assigned(Frm_CUT012) ) Or ( Frm_CUT012 = Nil ) then Frm_CUT012 := TFrm_CUT012.Create(Self);
    Frm_CUT012.Show(sBrNo, sKeyNum, sSeq, sCustTel);
  Except
  end;
end;

procedure TFrm_JON01.BtnStLockClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.BtnStLockClick');
    if Not BtnStLock.Down then
    begin
      BtnStLock.Hint := 'F4)수정';
      BtnStLock.Tag  := 0;
      BtnStLock.ImageIndex := 0;
			Frm_JON30.N1.Enabled := True;
			Frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
			Frm_JON30.btnSPoiMove.Enabled := True;
      Frm_JON30.N6.Enabled := True;
      Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
      Frm_JON30.btnSPoiAMove.Enabled := True;
    end else
    begin
      BtnStLock.Hint := 'F4)잠금';
      BtnStLock.Tag  := 0;
      BtnStLock.ImageIndex := 1;
      Frm_JON30.N1.Enabled := False;
      Frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
      Frm_JON30.btnSPoiMove.Enabled := False;
      Frm_JON30.N6.Enabled := False;
      Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
      Frm_JON30.btnSPoiAMove.Enabled := False;
    end;
end;

procedure TFrm_JON01.btnTakAllyClick(Sender: TObject);
var wStr : string;
		i, j, iRow : Integer;
begin
	SetDebugeWrite('JON01.btnTakAllyClick');
	try
		wStr := meoStartArea.Text;
		if TAdvGlowButton(Sender).Down then
		begin
			if Not cb_06.Down then
			begin
				if Pos('탁송)', wStr) < 1 then
					AddSpop('탁송기사만', 11);
				sTaksong := 'y';
			end;
//			SetMunuChecked('탁', True);
		end else
		begin
			i := Pos('탁송)', wStr);
			if i = 1 then
			begin
				meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁송)'), Length(widestring(wStr)) - Length(widestring('탁송)')));
				sTaksong := 'n';
			end else
			if i > 1 then
			begin
				meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁송)') , Length(widestring(wStr)) - i);
				sTaksong := 'n';
			end else
				sTaksong := 'n';

			SetMunuChecked('탁', False);
		
    end;
	finally

  end;
end;

procedure TFrm_JON01.BtnViaAddClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.BtnViaAddClick');
  if ViaADDTag < 5 then
  begin
    pSetFormScroll(0, 22);

    ViaADDTag := ViaADDTag + 1;

		if ViaADDTag = 1 then 
		begin
			BtnViaLock1.Down := False;
			BtnViaLock1.ImageIndex := 0;
			meoViaArea1.SetFocus;
			if meoViaArea1.CanFocus then meoViaArea1.SetFocus;
		end else
		if ViaADDTag > 1 then 
		begin
			BtnViaLock[ViaADDTag].Down := False;
			BtnViaLock[ViaADDTag].ImageIndex := 0;
			meoViaArea[ViaADDTag].SetFocus;
			if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
		end;
	end else
  begin
    if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
  end;

  pSet705CShareClickEvent('BtnViaAdd', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.BtnViaLock1Click(Sender: TObject);
var BViaLock : TAdvGlowButton;
begin
	SetDebugeWrite('Frm_JON01.BtnStLockClick');
	BViaLock := TAdvGlowButton(sender);
	if Not BViaLock.Down then
	begin
		BViaLock.Hint := 'F4)수정';
		BViaLock.Tag  := 0;
		BViaLock.ImageIndex := 0;
	end else
	begin
		BViaLock.Hint := 'F4)잠금';
		BViaLock.Tag  := 0;
		BViaLock.ImageIndex := 1;
	end;
end;

procedure TFrm_JON01.btnAddBigoClick(Sender: TObject);
begin
  pmBigo.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
end;

procedure TFrm_JON01.BtnCall2Click(Sender: TObject);
begin
  SetDebugeWrite('JON01.BtnCall2Click');
  pCall_Cust(cxtCuTel2.Text);
end;

procedure TFrm_JON01.BtnCallClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.BtnCallClick');
  if Pos('*', cxtCuTel.Text) > 0  then
    pCall_Cust(cxtCallTelNum.Text)
  else
		pCall_Cust(cxtCuTel.Text);
end;

procedure TFrm_JON01.btnCashSaveClick(Sender: TObject);
begin
	if cbbPayMethod.Text <> PAY_METHOD_POST_MILE then
	begin
		btnCashSave.down := False;
		exit;
	end;
end;

procedure TFrm_JON01.BtnCenterMngClick(Sender: TObject);
begin
  if BtnCenterMng.Down then
  begin
    cbTelView.ItemIndex := 2;
  end else
  begin
    if ( Trim(cxtCuTel2.Text) <> '' ) then cbTelView.ItemIndex := 1
                                      else cbTelView.ItemIndex := 0
  end;
end;

procedure TFrm_JON01.pCall_Cust(sCtHp: string);
var vCustTel, vKeyNum, vSlip : String;
begin
	SetDebugeWrite('JON01.pCall_Cust');
  try
    if sCtHp = '' then
    begin
      GMessagebox('고객님의 전화번호을(를) 입력하세요',CDMSI);
      Exit;
		end;

		vKeyNum  := Proc_MainKeyNumberSearch;
    vCustTel := StringReplace(sCtHp, '-', '', [rfReplaceAll]);
		vSlip := cxtJoinNum.Text;

		SetDebugeWrite('대표번호:' + vKeyNum + ' - 고객번호:' + vCustTel);
		Frm_Main.pCallingCID(vCustTel, vKeyNum, vSlip);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.BtnCloseClick(Sender: TObject);
begin
  btnCmdExit.Click;
end;

procedure TFrm_JON01.btnEpopClick(Sender: TObject);
begin
  pmEpop.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
end;

procedure TFrm_JON01.BtnFixClick(Sender: TObject);
begin
  N5.Click;
end;

procedure TFrm_JON01.btnMileGiveClick(Sender: TObject);
var iTag : integer;
begin
	iTag := TcxButton(Sender).Tag;

	if iTag = 0 then 
	begin
		lb_MileTitle.Caption := ' 마일리지 지급';
		lb_MileTitle.style.Color := $00FFE0A2;
		cbbCuProduct.Enabled := True;
		lbMileCaption.Caption := '지급마일';
		btnMileOut.Caption := '지급';
		pnl_MileOut.Color := $00757575;
	end else
	begin
		lb_MileTitle.Caption :=  ' 마일리지 충전';
		lb_MileTitle.style.Color := clYellow;
		cbbCuProduct.Enabled := False;
		lbMileCaption.Caption := '충전마일';
		btnMileOut.Caption := '충전';
		pnl_MileOut.Color := $00646400;
	end;
	curOutMileMny.value := 0;
	edtMileMemo.Text := '';
	btnMileOut.Tag := iTag;

	cbbCuProduct.Clear; // 지급상품명
	cbbCuProduct.Properties.Items.Text := _PROD_BASE;
	curOutMileMny.Enabled := True;
	curOutMileMny.Value := 0; // 지급마일리지

	SetCuProduct(SProdName, 0);
	pnl_MileOut.Left := 0;
	pnl_MileOut.Top := 3;
	pnl_MileOut.Visible := True;
	curOutMileMny.SetFocus;
end;

procedure TFrm_JON01.btnMileListClick(Sender: TObject);
var
	sCurMlg, sPrzCnt: string;
begin
	SetDebugeWrite('JON01.btnMileOutClick');
	if Trim(cxtCuTel.Text) = '' then Exit;

	// 마일리지 지급 현황 띄우기..
	if Not Assigned(Frm_COM40) then Frm_COM40 := TFrm_COM40.Create(Self);

	try
		Frm_COM40.Tag := Self.Tag;
		Frm_COM40.SetCuProduct(SProdName, 0);
		Frm_COM40.clbCuSeq.Caption := Self.lcsCu_seq;
		Frm_COM40.CB_Gubun.ItemIndex := 0;
		sCurMlg := lblCuMile.Caption;
		sCurMlg := StringReplace(sCurMlg, ',', '', [rfReplaceAll]);
		if sCurMlg = '' then
			sCurMlg := '0';
		sPrzCnt := lblCuMileCnt.Caption;
		sPrzCnt := StringReplace(sPrzCnt, ',', '', [rfReplaceAll]);
		if sPrzCnt = '' then
			sPrzCnt := '0';
		Frm_COM40.curCurrent.Caption := sCurMlg;            // 20130703  LYB 수정
		Frm_COM40.curPrzCnt.Caption := sPrzCnt;
		Frm_COM40.curMileLost.Caption := lblCuMileLost.Caption;
		Frm_COM40.proc_search;

		Frm_COM40.Show;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_JON01.btnMileOutClick(Sender: TObject);
var
	 UseMile, TotalMile: Integer;
	 iTag : Integer;
	 sTmp : string;
begin
	SetDebugeWrite('Frm_JON01.btnMileOutClick');
	Try
		iTag := TcxButton(Sender).Tag;
		if iTag = 0 then sTmp := '지급' else sTmp := '충전';
		// 권한 적용 (지호 2008-08-19)
		if (iTag = 0) and (TCK_USER_PER.COM_CustMlgCharge <> '1') then
		begin
			GMessagebox('고객에게 상품 지급 권한이 없습니다.', CDMSI);
			exit;
		end;

		if curOutMileMny.Value < 1 then
		begin
			ShowMessage(sTmp + '할 마일리지 금액을 입력 하세요!');
			curOutMileMny.SetFocus;
			Exit;
		end;

		if (lcsCu_seq <> '') then
		begin
			// 고객 마일리지를 즉시차감 처리 한다.
	{		if Pos('원 주유할인권', cbbCuProduct.Text) > 0 then
			begin
				UseMile := StrToIntDef(RemoveComma(curOutMileMny.Text), 0);
				if UseMile = 0 then
				begin
					GMessagebox(Format('지급상품권을 다시 선택해주세요.(지급마일리지가 부적절합니다.[%s])', [curOutMileMny.Text]), CDMSI);
					Exit;
				end;

				TotalMile := StrToIntDef(RemoveComma(curCurrent.Caption), 0);
				if TotalMile < UseMile then
				begin
					GMessagebox(Format('사용가능 마일리지가 부족합니다.[현재: %s, 지급: %s]', [
						FormatCash(TotalMile), FormatCash(UseMile)]), CDMSI);
					Exit;
				end;

				GrpCoupon.Left := 39;
				GrpCoupon.Top  := 3;
				edtCouponHP.Text := Frm_Main.Frm_JON01[Self.Tag].locsCuTel;
				GrpCoupon.Visible := True;
				edtCouponHP.SetFocus;
			end else   }
			begin

				Proc_CustMileDeduct(iTag, sTmp);
			end;
		end else
		begin
			ShowMessage('신규 미등록 고객은 마일리지를 '+sTmp+'할 수 없습니다.');
		end;  
	except
		on e: exception do
		begin
			Assert(False, 'btnMileOutClick Error :' + E.Message);
		end;
	end;
end;

procedure TFrm_JON01.btnMileSaveClick(Sender: TObject);
begin
	if cbbPayMethod.Text <> PAY_METHOD_POST_MILE then
	begin
		btnMileSave.down := False;
		exit;
	end;
end;

procedure TFrm_JON01.btnNewClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.btnNewClick');
  Frm_Main.Proc_JoinFromView(Jon03Tag);
end;

procedure TFrm_JON01.BtnOptionCallMuClick(Sender: TObject);
begin
	AddSpop('콜무',96);
end;

procedure TFrm_JON01.BtnOptionSexFClick(Sender: TObject);
begin
	if BtnOptionSexF.Down then BtnOptionSexM.Down := False;
end;

procedure TFrm_JON01.BtnOptionSexMClick(Sender: TObject);
begin
	if BtnOptionSexM.Down then BtnOptionSexF.Down := False;
end;

procedure TFrm_JON01.btnPickupInsertClick(Sender: TObject);
var
  CustTel, WkSabun, HdNo, BrNm: string;
begin
  SetDebugeWrite('JON01.btnPickupInsertClick');
	if func_ecukrCheck then exit;

  if Application.MessageBox('픽업등록 하시겠습니까?', PChar(Application.Title), MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON1) = IDNO then Exit;

  if Not Frm_Main.JON01MNG[Self.Tag].rOriginal then
	begin
    if lblCShareJId.Hint = GT_USERIF.ID then
    begin
      pSet705CShareDataClick(False, 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnPickupInsert', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
    end else
    if lblCShareRId.Hint = GT_USERIF.ID then
    begin
      pSet705CShareDataClick(False, 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnPickupInsert', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
		end;
    Exit;
  end;

  try
    WkSabun   := locWkSabun;
    CustTel   := cxtCuTel.Text;
    BrNm      := locWkBrNo;
    HdNo      := '';

    if WkSabun = '' then
    begin
      BrNm := Proc_BrNameReadSearch;
      if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;
      if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
        HdNo := pJON01Dock.HDNO
      else
        HdNo := GT_USERIF.HD
    end;

    try
      if Not Assigned(Frm_WOR11) then Frm_WOR11 := TFrm_WOR11.Create(Nil);
      if Frm_WOR11.UpdatePickupData(
        '',                 // ASeq,
        'C',                // AAction,
        '',                 // AStatus,
        WkSabun,            // AWkSabun,
        HdNo,               // AHdNo,
        BrNm,               // ABrNm,
        CustTel,            // APhone
        lcsSta1,
        lcsSta2,
        lcsSta3,
        meoStartArea.Text,
        lcsEnd1,
        lcsEnd2,
        lcsEnd3,
        meoEndArea.Text,
        cxtStartXval.Text,
        cxtStartYval.Text,
        cxtEndXval.Text,
				cxtEndYval.Text
      ) then
      begin
        GMessagebox('픽업 등록 되었습니다.', CDMSI);
        btnCmdExitClick(Self);
      end;
    finally
      Frm_WOR11.Close;
      Frm_WOR11.Free;
    end;
  Except
    on e: exception do
    begin
			Log('btnPickupInsertClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnPickupInsertClick Error :' + E.Message);
    end;
	end;
end;

procedure TFrm_JON01.BtnPlusYNClick(Sender: TObject);
var idx : Integer;
begin
  if cbbPayMethod.Tag > 10 then       // "후불" 선택시  "법인콜" 체크 박스 선택하더라도 결재방법 자동변경 차단. 2011-11-11.
		Exit;

  if BtnPlusYN.Hint = 'NOCHANGE' then // 법인콜 다른 함수에서 변경 못 하도록 함.[오더수정 모드에서 설정됨]
		Exit;

  // 법인콜 선택시 결제방식 "후불" 자동변경 처리.  2011.09.01
  if BtnPlusYN.Down then
  begin
		if cbbPayMethod.Text <> PAY_METHOD_POST_NML then
    begin
			idx := cbbPayMethod.Properties.Items.IndexOf(PAY_METHOD_POST_NML);
      if idx > -1 then
      begin
				pbPayMethod := cbbPayMethod.ItemIndex;

        BtnPlusYN.Tag := 10;
        cbbPayMethod.ItemIndex := idx;
        BtnPlusYN.Tag := 0;
			end;
    end;
  end else
  begin
    if pbPayMethod > -1 then
    begin
      BtnPlusYN.Tag := 10;
      cbbPayMethod.ItemIndex := pbPayMethod;
      BtnPlusYN.Tag := 0;
    end;
	end;
end;

procedure TFrm_JON01.BtnQRateClick(Sender: TObject);
begin
  if ( BtnQRate.Tag = 0 ) And ( RQAListView.DataController.RecordCount = 0 ) then
  begin
    pSet601QRate(Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
  	RQAListView.DataController.SetRecordCount(0);
    btnRQALExit.Click;
    pCompareQRateInfo;

    pSet705CShareClickEvent('BtnQRate', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
  end else
  begin
    popQRMenu.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
    pCompareQRateInfo;
  end;
end;

procedure TFrm_JON01.BtnRaLockClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.BtnRaLockClick');
  if Not BtnRaLock.Down then
  begin
		BtnRaLock.Hint := 'F4)해제';
		BtnRaLock.Tag  := 0;
    BtnRaLock.Down := False;
    BtnRaLock.ImageIndex := 0;

//		curRate.Properties.Increment := 1000;
//    curRate.Properties.ReadOnly := False;
  end else
	begin
		BtnRaLock.Hint := 'F4)잠금';
		BtnRaLock.Tag  := 0;
    BtnRaLock.Down := True;
		BtnRaLock.ImageIndex := 1;

		curRate.Value := curRate.Value;           // 이부분을 안해주면 금액이 기존대로 돌아감
//    curRate.Properties.Increment := 0;
//    curRate.Properties.ReadOnly := True;
  end;
end;

procedure TFrm_JON01.BtnResJClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.BtnResJClick');
  fGetDiffDay( FormatDateTime('YYYYMMDD', dtpResvDate.Date) + FormatDateTime('HHNN00', dtpResvTime.Time) );
end;

procedure TFrm_JON01.BtnResvClick(Sender: TObject);
var
 BitMap1 : TBitMap;
 sTmp : String;
begin
  SetDebugeWrite('JON01.BtnResvClick');
  try
    if ( dtpResvDate.Text + ' ' + dtpResvTime.Text )  < FormatDateTime('YYYY-MM-DD HH:NN:SS', Now) then
    begin
      GMessagebox('과거날짜로는 예약할 수 없습니다', CDMSI);
      BtnResv.Tag := 0;
      Exit;
    end;

    BitMap1 := TBitMap.Create;
    try
      BitMap1.LoadFromFile(ExtractFilePath(Application.ExeName) + '\Image\Alarm.bmp');
      BtnResvView.Glyph := TdxSmartGlyph(BitMap1);
    finally
      BitMap1.Free;
    end;

    sTmp := FormatDateTime('YYYY-MM-DD', dtpResvDate.Date) + ' ' + FormatDateTime('HH:NN:SS', dtpResvTime.Time);
    if BtnResJ.Down then sTmp := sTmp + ' [접수] 상태로 예약' else
    if BtnResD.Down then sTmp := sTmp + ' [대기] 상태로 예약';

    BtnResvView.Hint := sTmp;
    BtnResvView.ShowHint := True;

    BtnResv.Tag := 1;
    cxGbReserv.Visible := False;

    pSet705CShareClickEvent('BtnResv', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.BtnResvCslClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.BtnResvCslClick');
  BtnResvView.Glyph := Nil;
  BtnResv.Tag := 0;
  cxGbReserv.Visible := False;
  BtnResvView.ShowHint := False;

  pSet705CShareClickEvent('BtnResvCsl', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.btnRQALExitClick(Sender: TObject);
begin
  gbRQAList.Visible := False;
  pCompareQRateInfo;
  pSet705CShareClickEvent('btnRQALExit', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.btnSBigo1Click(Sender: TObject);
begin
  SetDebugeWrite('JON01.btnSBigo1Click');
  pmSpop.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
end;

procedure TFrm_JON01.btnSCloseClick(Sender: TObject);
begin
  GBStartXYView.Visible := False;
  pSet705CShareClickEvent('btnSClose', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.btnStartLocalSaveClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.btnStartLocalSaveClick');
	// 로컬에 사용자 맵정보를 저장한다.
	if TCK_USER_PER.JON_LocalMap <> '1' then
	begin
		GMessagebox('권한이 없습니다',CDMSI);
		Exit;
	end;
	proc_Save_Area(0) // 출발지 저장.
end;

procedure TFrm_JON01.BtnViaMinus1Click(Sender: TObject);
Var i, iTag, j : Integer;

		TmpViaSA1        : array[1..5] of string;  // 경유지 시도
		TmpViaSA2        : array[1..5] of string;  // 경유지 시군구
		TmpViaSA3        : array[1..5] of string;  // 경유지 읍면동
		TmpViaAreaDetail : array[1..5] of string;  // 경유지 검색어
		TmpViaAreaNAME   : array[1..5] of string;  // 경유지 POI
		TmpDocId         : array[1..5] of string;  // UID
    TmpCellSel       : array[1..5] of String;  // 셀선택구분
    TmpSchWord       : array[1..5] of String;  // 검색어
		TmpXposVia       : array[1..5] of string[10];  // 추가된 경유지 X좌표
		TmpYposVia       : array[1..5] of string[10];  // 추가된 경유지 Y좌표
		TmpGUIDE_X       : array[1..5] of string[10];  // 추가된 경유지 GUIDE_X좌표
		TmpGUIDE_Y       : array[1..5] of string[10];  // 추가된 경유지 GUIDE_Y좌표
begin
	SetDebugeWrite('JON01.BtnViaMinus1Click');
  try
    if GbViaArea.Height < 10 then Exit;

    iTag := TSpeedButton(sender).Tag;
    if ViaADDTag < 1 THEN ViaADDTag := 1;

		// 경유지 삭제 자료 초기화
    ViaSA1[iTag] := '';
    ViaSA2[iTag] := '';
    ViaSA3[iTag] := '';
		ViaAreaDetail[iTag] := '';
		ViaAreaName[iTag] := '';
    DocId[iTag]  := '';
		CellSel[iTag]  := '';
    SchWord[iTag]  := '';
    XposVia[iTag] := '';
    YposVia[iTag] := '';

    // 경유지 화면 표시 내역 삭제
    for i := 1 to 5 do
    begin
      if i = 1 then
      begin
        meoViaArea1.Text := '';
        cxViaAreaName1.Caption := '';
      end else
      begin
        meoViaArea[i].Text := '';
        cxViaAreaName[i].Caption := '';
			end;
    end;

    // 경유지 정보 임시 자료 저장
    for i := 1 to 5 do
    begin
      TmpViaSA1[i]        := ViaSA1[i];
      TmpViaSA2[i]        := ViaSA2[i];
      TmpViaSA3[i]        := ViaSA3[i];
			TmpViaAreaDetail[i] := ViaAreaDetail[i];
			TmpViaAreaNAME[i]   := ViaAreaNAME[i];
			TmpDocId[i]         := DocId[i];
      TmpCellSel[i]       := CellSel[i];
      TmpSchWord[i]       := SchWord[i];
      TmpXposVia[i]       := XposVia[i];
      TmpYposVia[i]       := YposVia[i];
    end;

		// 경유지 기존 정보 삭제
    for i := 1 to 5 do
    begin
      ViaSA1[i]        := '';
      ViaSA2[i]        := '';
      ViaSA3[i]        := '';
			ViaAreaDetail[i] := '';
			ViaAreaNAME[i]   := '';			
			DocId[i]         := '';
			CellSel[i]       := '';
			SchWord[i]       := '';
      XposVia[i]       := '';
      YposVia[i]       := '';
    end;

    j := 1;
    for i := 1 to 5 do
    begin
      if TmpViaSA1[i] <> '' then
      begin
        ViaSA1[j]        := TmpViaSA1[i];
        ViaSA2[j]        := TmpViaSA2[i];
				ViaSA3[j]        := TmpViaSA3[i];
				ViaAreaDetail[j] := TmpViaAreaDetail[i];
				ViaAreaName[j]   := TmpViaAreaName[i];
				DocId[j]         := TmpDocId[i];
				CellSel[j]       := TmpCellSel[i];
        SchWord[j]       := TmpSchWord[i];
        XposVia[j]       := TmpXposVia[i];
				YposVia[j]       := TmpYposVia[i];
        Inc(j);
      end;
    end;

    for i := 1 to 5 do
    begin
      if i = 1 then
			begin
				meoViaArea1.Text := ViaAreaName[i];
        cxViaAreaName1.Caption := ViaSA1[i] + ' ' + ViaSA2[i] + ' '+ ViaSA3[i];
			end else
			begin
				meoViaArea[i].Text := ViaAreaName[i];
        cxViaAreaName[i].Caption := ViaSA1[i] + ' ' + ViaSA2[i] + ' '+ ViaSA3[i];
      end;
    end;

  //  if ViaADDTag >= 0 then
      ViaADDTag := ViaADDTag - 1;

		ViaOK;

    pSetFormScroll(0, -22);

    if ViaADDTag = 1 then
		begin
      if meoViaArea1.CanFocus then meoViaArea1.SetFocus;
    end else
    if ViaADDTag > 1 then
    begin
      if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
    end;

    pSet705CShareClickEvent('BtnViaMinus' + IntToStr(iTag), Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
  Except
    on e: exception do
    begin
			Log('BtnViaMinus1Click Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'BtnViaMinus1Click Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btnWkAgeCloseClick(Sender: TObject);
begin
  if StrToIntDef(edtWkFAge.Text, 0) > StrToIntDef(edtWkTAge.Text, 0) then
  begin
    ShowMessage('제한나이 설정이 잘못되었습니다.');
    Exit;
  end;

  pnlWkAge.Visible := False;
	if BtnWkAge.Down then BtnWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하'
                   else BtnWkAge.Hint := '';

  pSet705CShareClickEvent('btnWkAgeClose', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.btnWkLicTypeCloseClick(Sender: TObject);
begin
	pnlWkLicType.Visible := False;
end;

procedure TFrm_JON01.btn_ChargeSaveClick(Sender: TObject);
var
  msg: string;
begin
  SetDebugeWrite('JON01.btn_ChargeSaveClick');
  try
    if (cxtStartYval.Text = '') or (cxtEndYval.Text = '') then
    begin
      GMessageBox('출발지/도착지를 검색하여야 요금 저장이 가능합니다.', CDMSI);
      Exit;
    end;

    if gsMyMainTelUse = 'TRUE' then
    begin
      GMessageBox('대표번호 별 기본요금 강제적용 상태에서는 요금저장 할 수 없습니다.', CDMSI);
      Exit;
    end;

    if (CHARGE_GUBUN = 'P') and (GS_EXEC_GUBUN = 0) then
    begin
			msg := '콜마너 프로그램 동시 실행 시 나중에 실행된 프로그램에서는 발신번호(CID), 로컬요금DB 연동이 제한 됩니다.' + #13#10 + #13#10
					 + '먼저 실행한 프로그램을 통해 이용바랍니다.';
			GMessageBox(msg, CDMSI);
			Exit;
    end;


    if not Assigned(Frm_JON018) then Frm_JON018 := TFrm_JON018.Create(Nil);
    if Frm_Main.JON01MNG[Self.Tag].Dock then
    begin
			Frm_JON018.Left := Frm_JON00.ClientOrigin.X - Frm_JON018.Width;
      Frm_JON018.Top := Frm_JON00.ClientOrigin.Y;
    end else
    begin
      Frm_JON018.Left := Self.ClientOrigin.X - Frm_JON018.Width;
      Frm_JON018.Top := Self.ClientOrigin.Y;
    end;
    Frm_JON018.cxTreeFirstDetail.Root.TreeList.Clear;
    if (GS_Grid_DEP = 'D') or (GS_Grid_DES = 'D') then
    begin
      if (GS_Grid_DEP = 'D')  and (GS_Grid_DES <> 'D') then
        Frm_JON018.LoadCharge(FType, Proc_MainKeyNumberSearch, lcsSta1, lcsSta2, lcsSta3, '', cxtStartXval.Text, cxtStartYval.Text
                                                     , lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, Ceil(fCruKm))
      else
      if (GS_Grid_DEP <> 'D') and (GS_Grid_DES = 'D') then
        Frm_JON018.LoadCharge(FType, Proc_MainKeyNumberSearch, lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text
                                                     , lcsEnd1, lcsEnd2, lcsEnd3, '', cxtEndXval.Text  , cxtEndYval.Text, Ceil(fCruKm))
      else
      if (GS_Grid_DEP = 'D')  and (GS_Grid_DES = 'D')  then
        Frm_JON018.LoadCharge(FType, Proc_MainKeyNumberSearch, lcsSta1, lcsSta2, lcsSta3, '', cxtStartXval.Text, cxtStartYval.Text
                                                     , lcsEnd1, lcsEnd2, lcsEnd3, '', cxtEndXval.Text  , cxtEndYval.Text, Ceil(fCruKm))
    end
    else
      Frm_JON018.LoadCharge(FType, Proc_MainKeyNumberSearch, lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text
                                                   , lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text  , cxtEndXval.Text  , cxtEndYval.Text, Ceil(fCruKm));

    Frm_JON018.Show;
  Except
    on e: exception do
    begin
			Log('btn_ChargeSaveClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btn_ChargeSaveClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.btn_LBSClick(Sender: TObject);
var sStr : string;
	ErrCode, iCnt, iLeft : Integer;
  bSendOk : Boolean;
begin

	if CallToStr(Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber)) <> CallToStr(Trim(GS_JONCidInput.PhoneNumber)) then
	begin
		sStr := '이미 통화가 종료된 고객입니다.' + #13#10 + #13#10
					+ '통화가 종료된 고객은 LBS(고객위치확인) 요청이 불가능합니다.';
		GMessageBox(sStr, CDMSI);
		exit;
	end;

//	if CallToStr(Trim(btn_LBS.Hint)) <> CallToStr(Trim(cxtCuTel.Text)) then
	if CallToStr(Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber)) <> CallToStr(Trim(cxtCuTel.Text)) then
	begin
		sStr := '최초 인입된 연락처가 아닙니다.' + #13#10 
					+ '[인입]>>' + StrToCall(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber) + #13#10
					+ '[현재]>>' + StrToCall(cxtCuTel.Text) + #13#10 + #13#10
					+ 'LBS(고객위치확인)은  CID를 통하여 정상적으로 인입된' + #13#10
					+ '고객연락처에 대해서만 요청이 가능합니다.' + #13#10 + #13#10
					+ '** 통화관리, CID 내역에서 띄운 접수창에서는' + #13#10
					+ '   LBS를 이용할 수 없습니다.';
		GMessageBox(sStr, CDMSI);
		exit;
	end;

	if copy(Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber),1,2) <> '01' then
	begin
		sStr := 'LBS(고객위치확인)은 고객연락처가 일반전화일 경우 이용이 불가능합니다.' + #13#10 + #13#10
				 + '고객연락처를 확인하세요';
		GMessageBox(sStr, CDMSI);
		cxtCuTel.SetFocus;
		exit;
	end;

	if Frm_Main.JON01MNG[Self.Tag].Dock then
	begin
		iLeft := Frm_JON00.Left	;
	end else
	begin
		iLeft := Self.Left	;
	end;
		
	Try
		if (GT_OCX = 'SI415') then
		begin
			if fSi415IPCCSendData(fSI_MakeHeader_Only('8110', '0', '')) then
			begin
				btn_LBS.enabled := False;
				if ( Not Assigned(frm_JON60) ) Or ( frm_JON60 = Nil ) then 
					frm_JON60 := Tfrm_JON60.Create(Nil)
				else frm_JON60.proc_Init;
				frm_JON60.Top := 222;
				frm_JON60.Left := iLeft - frm_JON60.width;
				Frm_JON60.Tag := Self.Tag	;

		//		if GS_PRJ_AREA = 'S' then Frm_JON60.sArea := 's' else Frm_JON60.sArea := 'j';
				Frm_JON60.gsBrNo := Proc_BRNOSearch;
				//frm_main Frm_JON01[GI_JON01_LastFromIdx].btn_LBS.Hint := GS_JONCidInput.PhoneNumber;
				Frm_JON60.gsTel  := Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber);//cxtCuTel.Text; // btn_LBS.Hint; //GS_JONCidInput.PhoneNumber;
				frm_JON60.Show;
			end
		end else
		if (GT_OCX = 'SSIT') then
		begin
			// 서버에 연결
			if Not frm_main.bSSIO_CTI.Socket.Connected then
      begin
				iCnt := 0;
				while Not frm_main.bSSIOCTIConnected do
				begin
					frm_main.tmr_SSIO_check.Tag := 0;
					frm_main.tmr_SSIO_check.Interval := 10;
					frm_main.tmr_SSIO_check.Enabled := True;
					Application.ProcessMessages;
					Sleep(10);
					Inc(iCnt);
					if iCnt > 50 then
					begin
						 SetDebugeWrite('bSSIO_CTI Socket Active Error ');
						 Break;
					end;
				end;
			end;

			if frm_main.bSSIO_CTI.Socket.Connected then
			begin
				frm_main.gbCTI_Calling_Status := True;
				frm_main.gtCTI_Calling_Time   := Now;   // :: [분초(시간) 저장]

				// 2501. 전화걸기 요청 패킷
				sStr := '#';
				sStr := sStr + '8110';                    // 패킷 구분 값
				sStr := sStr + Rpad('5001'  ,   4, ' ');  // 사업자 구분 코드 ( 5001 )
				sStr := sStr + Rpad(''      ,  20, ' ');  // 사업자 자체 패킷 구분 번호
				sStr := sStr + Rpad('00'    ,   2, ' ');  // 결과값
				sStr := sStr + Rpad(''      ,  15, ' ');  // 전화걸번호    
				sStr := sStr + Rpad(''      ,  15, ' ');  // 발신번호
				sStr := sStr + Rpad(''      ,  15, ' ');  // 대표번호
				sStr := sStr + '$';

				frm_main.bSSIO_CTI.Socket.SendText(sStr);
				bSendOk := True;
				SetDebugeWrite('bSSIO_CTI Send: '+ sStr);

				btn_LBS.enabled := False;
				if ( Not Assigned(frm_JON60) ) Or ( frm_JON60 = Nil ) then 
					frm_JON60 := Tfrm_JON60.Create(Nil)
				else frm_JON60.proc_Init;
				frm_JON60.Top := 222;
				frm_JON60.Left := iLeft - frm_JON60.width;
				Frm_JON60.Tag := Self.Tag	;

		//		if GS_PRJ_AREA = 'S' then Frm_JON60.sArea := 's' else Frm_JON60.sArea := 'j';
				Frm_JON60.gsBrNo := Proc_BRNOSearch;
				//frm_main Frm_JON01[GI_JON01_LastFromIdx].btn_LBS.Hint := GS_JONCidInput.PhoneNumber;
				Frm_JON60.gsTel  := Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber);//cxtCuTel.Text;  btn_LBS.Hint; //GS_JONCidInput.PhoneNumber;
				frm_JON60.Show;
			end;
		end;
	except
		btn_LBS.enabled := True;
  End;
end;

procedure TFrm_JON01.btn_MileOut_CloseClick(Sender: TObject);
begin
	pnl_MileOut.visible := False;
end;

procedure TFrm_JON01.btn_ViaCheckClick(Sender: TObject);
begin
	pnlJonMain.Enabled := True; //다른입력 막음
	BtnViaAddClick(BtnViaAdd);
	pnl_ViaAlert.Visible := False;

	if lg_Save = '1' then
	else if lg_Save = '2' then
		Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
end;

procedure TFrm_JON01.btn_ViaSkipClick(Sender: TObject);
begin
	pnlJonMain.Enabled := True; //다른입력 막음
	pnl_ViaAlert.Visible := False;
	pnl_ViaAlert_Title.Hint := 'Skip';
	if lg_Save = '1' then
		Proc_Save(pnl_ViaAlert.Hint) 
	else if lg_Save = '2' then
		btnCmdUpdSaveClick(btnCmdUpdSave)
end;

procedure TFrm_JON01.btnHiPOIYClick(Sender: TObject);
begin
	GBTop3.Color := $008FEBFE;
	PnlKTPOIYN.Visible := False;
end;

procedure TFrm_JON01.btnKtPOIYClick(Sender: TObject);
begin
	gJONStaChkXY.Area1 := TmplcsSta1;
  gJONStaChkXY.Area2 := TmplcsSta2;
  gJONStaChkXY.Area3 := TmplcsSta3;
  gJONStaChkXY.Area4 := TmplcsSta4;
  gJONStaChkXY.Area5 := TmplcsSta5;
  gJONStaChkXY.X := TmplcsX;
  gJONStaChkXY.Y := TmplcsY;
  gJONStaChkXY.GUIDE_X := TmplcsX;
  gJONStaChkXY.GUIDE_Y := TmplcsY;

  lcsSta1 := TmplcsSta1;
  lcsSta2 := TmplcsSta2;
  lcsSta3 := TmplcsSta3;
  lcsSta4 := TmplcsSta4;
  lblStartAreaName.Text := TmplcsSta1 + ' ' + TmplcsSta2 + ' ' + TmplcsSta3;
  SetDebugeWrite('JON01.lblStartAreaName.Text 4018 : ' + lblStartAreaName.Text);
  meoStartArea.Text := TmplcsSta5;
  cxtStartAreaDetail.Text := TmplcsSta4;
  lcsConfAREA4 := TmplcsSta4;
  cxtStartXval.Text := TmplcsX;
  cxtStartYval.Text := TmplcsY;
  cxtStartGUIDEXval.Text := TmplcsX;
  cxtStartGUIDEYval.Text := TmplcsY;

  gJONStaChkXY.Gubun := TmpDef;
  GS_Grid_DEP := TmpDef;

  GBTop3.Color := $00FFCA8E;
	PnlKTPOIYN.Visible := False;
end;

procedure TFrm_JON01.cxBubinViewCellDblClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
begin
  SetDebugeWrite('JON01.cxBubinViewCellDblClick');
  // 법인 선택 정보를 보여준다.
  Proc_BubinChoice;
end;

procedure TFrm_JON01.cxBubinViewKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	SetDebugeWrite('JON01.cxBubinViewKeyUp');
	try
		if cxBubinView.DataController.FocusedRecordIndex = -1 then
      Exit;
    if Key = VK_RETURN then
    begin
      Key := 0;
      // 법인 선택 정보를 보여준다.
      Proc_BubinChoice;
    end else
    if Key = VK_UP then
    begin
      if cxGrdBubin.Tag = -1 then
      begin
        cxGrdBubin.Tag := 0;
        cxtBubinSearchName.SetFocus;
      end else
      if cxBubinView.DataController.FocusedRecordIndex = 0 then
      begin
        cxGrdBubin.Tag := -1;
      end else
      begin
        cxGrdBubin.Tag := 0;
      end;
    end else
    if Key = VK_DOWN then
    begin
      if cxGrdBubin.Tag = -2 then
      begin
        cxGrdBubin.Tag := 0;
        cxtBubinSearchName.SetFocus;
      end else
      if cxBubinView.DataController.FocusedRecordIndex =
        (cxBubinView.DataController.RecordCount - 1) then
      begin
        cxGrdBubin.Tag := -2;
      end else
      begin
        cxGrdBubin.Tag := 0;
      end;
    end;
	Except
		on e: exception do
		begin
			Log('cxBubinViewKeyUp Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'cxBubinViewKeyUp Error :' + E.Message);
		end;
	end;
end;

procedure TFrm_JON01.cxButton1Click(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxButton1Click');
  if Trim(cxtCuTel.Text) = '' then Exit;

  try
    if Frm_JON012.Tag <> Self.Tag then
    begin
      // 현재 할당된 폼 배열값을 저장.(현재 조회한 고객 데이터가 있는지 여부를 체킹)
      // 고객 이용내역을 그리드에 보여준다.
      Proc_CustOrderListView;
      Proc_WorkListView('');
    end else
      // 고객 이용내역을 띄워준다.
      Proc_Jon012Show;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.cxButton2Click(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxButton2Click');
  pnlOrderInfoView.Visible := False;
end;

procedure TFrm_JON01.cxButton3Click(Sender: TObject);
begin
	pnl_AIStart.visible := False;
end;

procedure TFrm_JON01.btnDCalcClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.cxButton3Click');
  tmrThRealDis.Tag := 0;
	tmrDistance.Enabled := True;

  pSet705CShareClickEvent('btnDCalc', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.BtnSimMemoClick(Sender: TObject);
begin
	if edt_CardMemo.Height = 29 then
  begin
    edt_CardMemo.Top := meoCuWorMemo.Top;
		edt_CardMemo.Height := meoCuWorMemo.Height + 29 + 2
  end else
  begin
    edt_CardMemo.Top := meoCuWorMemo.Top + meoCuWorMemo.Height + 2;
		edt_CardMemo.Height := 29;
  end;
  cxLCuCCMemoFlg1.Top := edt_CardMemo.Top + 3;
end;

procedure TFrm_JON01.BtnSmartRateClick(Sender: TObject);
var oOderWorker, oWeather, oType : string;
   ln_Env : TIniFile;
begin
  SetDebugeWrite('JON01.BtnSmartRateClick');
  try
    if ( Trim(cxtStartYval.Text) = '' ) Or ( Trim(cxtEndYval.Text) = '' ) then Exit;

    ln_Env := TIniFile.Create(ENVPATHFILE);
    try
      GT_AutoSmartCharge  := ln_Env.ReadBool('SmartOption', 'AutoSmartCharge',  False );
      GT_PopUpSmartCharge := ln_Env.ReadBool('SmartOption', 'PopUpSmartCharge', False );
      GT_AllPopUpSmartCharge := ln_Env.ReadBool('SmartOption', 'AllPopUpSmartCharge', False );
      GT_Smart_Section    := ln_Env.ReadString('SmartOption', 'SmartSection',   '0' );
		finally
			FreeAndNil(ln_Env);
		end;
    if not Assigned(frm_Jon019) then frm_Jon019 := Tfrm_Jon019.Create(Nil);

    if GT_RealTimeWorker then oOderWorker := ''
                         else oOderWorker := '0';
    if GT_RealTimeWeather then oWeather := ''
                          else oWeather := '0';
    //출발지 시도      lcsSta1
    //출발지 시군구    lcsSta2
    //출발지 읍면동    lcsSta3
    //출발지 세부명칭  cxtStartAreaDetail.Text
    //출발지 X         cxtStartXval.Text
    //출발지 Y         cxtStartYval.Text
    //도착지 시도      lcsEnd1
    //도착지 시군구    lcsEnd2
    //도착지 읍면동    lcsEnd3
    //도착지 세부명칭  cxtEndAreaDetail.Caption
    //도착지 X         cxtStartXval.Text
    //도착지 Y         cxtStartYval.Text
    oType := '';//검색타입

//    frm_Jon019.iSizeFlag := 1;
    frm_Jon019.rb_Auto.Tag := 1;
    frm_Jon019.rb_Auto.Checked := True;
    frm_JON019.Proc_SmartCharge(oOderWorker, oWeather
                              , lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text,  cxtStartXval.Text, cxtStartYval.Text
                              , lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption, cxtStartXval.Text, cxtStartYval.Text
                              , oType);

    frm_Jon019.bChkTime := True;
    frm_Jon019.Tag  := Self.Tag;
    frm_Jon019.Show;

		pSet705CShareClickEvent('BtnSmartRate', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
	Except
    on e: exception do
    begin
      Log('BtnSmartRateClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'BtnSmartRateClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.BtnSRClick(Sender: TObject);
Var i : Integer;
    bUse : Boolean;
    RealKmPtr : TRealKmRecord;
begin
  SetDebugeWrite('JON01.BtnSRClick');
  if (cxtStartXval.Text = '') or (cxtStartYval.Text = '') or
		 (cxtEndXval  .Text = '') or (cxtEndYval  .Text = '') then Exit;

  bUse := False;
  Case Self.Tag of
  0 : begin
        if RealKmPtr00_th1.UseYn then begin RealKmPtr := RealKmPtr00_th1;  bUse := True;  end;
        if RealKmPtr00_th2.UseYn then begin RealKmPtr := RealKmPtr00_th2;  bUse := True;  end;
        if RealKmPtr00_th3.UseYn then begin RealKmPtr := RealKmPtr00_th3;  bUse := True;  end;
        if RealKmPtr00_th4.UseYn then begin RealKmPtr := RealKmPtr00_th4;  bUse := True;  end;
      end;
  1 : begin
        if RealKmPtr01_th1.UseYn then begin RealKmPtr := RealKmPtr01_th1;  bUse := True;  end;
        if RealKmPtr01_th2.UseYn then begin RealKmPtr := RealKmPtr01_th2;  bUse := True;  end;
        if RealKmPtr01_th3.UseYn then begin RealKmPtr := RealKmPtr01_th3;  bUse := True;  end;
        if RealKmPtr01_th4.UseYn then begin RealKmPtr := RealKmPtr01_th4;  bUse := True;  end;
      end;
  2 : begin
        if RealKmPtr02_th1.UseYn then begin RealKmPtr := RealKmPtr02_th1;  bUse := True;  end;
        if RealKmPtr02_th2.UseYn then begin RealKmPtr := RealKmPtr02_th2;  bUse := True;  end;
        if RealKmPtr02_th3.UseYn then begin RealKmPtr := RealKmPtr02_th3;  bUse := True;  end;
        if RealKmPtr02_th4.UseYn then begin RealKmPtr := RealKmPtr02_th4;  bUse := True;  end;
      end;
  3 : begin
        if RealKmPtr03_th1.UseYn then begin RealKmPtr := RealKmPtr03_th1;  bUse := True;  end;
        if RealKmPtr03_th2.UseYn then begin RealKmPtr := RealKmPtr03_th2;  bUse := True;  end;
        if RealKmPtr03_th3.UseYn then begin RealKmPtr := RealKmPtr03_th3;  bUse := True;  end;
        if RealKmPtr03_th4.UseYn then begin RealKmPtr := RealKmPtr03_th4;  bUse := True;  end;
      end;
  4 : begin
        if RealKmPtr04_th1.UseYn then begin RealKmPtr := RealKmPtr04_th1;  bUse := True;  end;
        if RealKmPtr04_th2.UseYn then begin RealKmPtr := RealKmPtr04_th2;  bUse := True;  end;
        if RealKmPtr04_th3.UseYn then begin RealKmPtr := RealKmPtr04_th3;  bUse := True;  end;
        if RealKmPtr04_th4.UseYn then begin RealKmPtr := RealKmPtr04_th4;  bUse := True;  end;
      end;
  5 : begin
        if RealKmPtr05_th1.UseYn then begin RealKmPtr := RealKmPtr05_th1;  bUse := True;  end;
        if RealKmPtr05_th2.UseYn then begin RealKmPtr := RealKmPtr05_th2;  bUse := True;  end;
        if RealKmPtr05_th3.UseYn then begin RealKmPtr := RealKmPtr05_th3;  bUse := True;  end;
        if RealKmPtr05_th4.UseYn then begin RealKmPtr := RealKmPtr05_th4;  bUse := True;  end;
      end;
  6 : begin
        if RealKmPtr06_th1.UseYn then begin RealKmPtr := RealKmPtr06_th1;  bUse := True;  end;
        if RealKmPtr06_th2.UseYn then begin RealKmPtr := RealKmPtr06_th2;  bUse := True;  end;
        if RealKmPtr06_th3.UseYn then begin RealKmPtr := RealKmPtr06_th3;  bUse := True;  end;
        if RealKmPtr06_th4.UseYn then begin RealKmPtr := RealKmPtr06_th4;  bUse := True;  end;
      end;
  7 : begin
        if RealKmPtr07_th1.UseYn then begin RealKmPtr := RealKmPtr07_th1;  bUse := True;  end;
        if RealKmPtr07_th2.UseYn then begin RealKmPtr := RealKmPtr07_th2;  bUse := True;  end;
        if RealKmPtr07_th3.UseYn then begin RealKmPtr := RealKmPtr07_th3;  bUse := True;  end;
        if RealKmPtr07_th4.UseYn then begin RealKmPtr := RealKmPtr07_th4;  bUse := True;  end;
      end;
  8 : begin
        if RealKmPtr08_th1.UseYn then begin RealKmPtr := RealKmPtr08_th1;  bUse := True;  end;
        if RealKmPtr08_th2.UseYn then begin RealKmPtr := RealKmPtr08_th2;  bUse := True;  end;
        if RealKmPtr08_th3.UseYn then begin RealKmPtr := RealKmPtr08_th3;  bUse := True;  end;
        if RealKmPtr08_th4.UseYn then begin RealKmPtr := RealKmPtr08_th4;  bUse := True;  end;
      end;
  9 : begin
        if RealKmPtr09_th1.UseYn then begin RealKmPtr := RealKmPtr09_th1;  bUse := True;  end;
        if RealKmPtr09_th2.UseYn then begin RealKmPtr := RealKmPtr09_th2;  bUse := True;  end;
        if RealKmPtr09_th3.UseYn then begin RealKmPtr := RealKmPtr09_th3;  bUse := True;  end;
        if RealKmPtr09_th4.UseYn then begin RealKmPtr := RealKmPtr09_th4;  bUse := True;  end;
      end;
  10 : begin
        if RealKmPtr10_th1.UseYn then begin RealKmPtr := RealKmPtr10_th1;  bUse := True;  end;
        if RealKmPtr10_th2.UseYn then begin RealKmPtr := RealKmPtr10_th2;  bUse := True;  end;
        if RealKmPtr10_th3.UseYn then begin RealKmPtr := RealKmPtr10_th3;  bUse := True;  end;
        if RealKmPtr10_th4.UseYn then begin RealKmPtr := RealKmPtr10_th4;  bUse := True;  end;
      end;
  11 : begin
        if RealKmPtr11_th1.UseYn then begin RealKmPtr := RealKmPtr11_th1;  bUse := True;  end;
        if RealKmPtr11_th2.UseYn then begin RealKmPtr := RealKmPtr11_th2;  bUse := True;  end;
        if RealKmPtr11_th3.UseYn then begin RealKmPtr := RealKmPtr11_th3;  bUse := True;  end;
        if RealKmPtr11_th4.UseYn then begin RealKmPtr := RealKmPtr11_th4;  bUse := True;  end;
      end;
  12 : begin
        if RealKmPtr12_th1.UseYn then begin RealKmPtr := RealKmPtr12_th1;  bUse := True;  end;
        if RealKmPtr12_th2.UseYn then begin RealKmPtr := RealKmPtr12_th2;  bUse := True;  end;
        if RealKmPtr12_th3.UseYn then begin RealKmPtr := RealKmPtr12_th3;  bUse := True;  end;
        if RealKmPtr12_th4.UseYn then begin RealKmPtr := RealKmPtr12_th4;  bUse := True;  end;
      end;
  13 : begin
        if RealKmPtr13_th1.UseYn then begin RealKmPtr := RealKmPtr13_th1;  bUse := True;  end;
        if RealKmPtr13_th2.UseYn then begin RealKmPtr := RealKmPtr13_th2;  bUse := True;  end;
        if RealKmPtr13_th3.UseYn then begin RealKmPtr := RealKmPtr13_th3;  bUse := True;  end;
        if RealKmPtr13_th4.UseYn then begin RealKmPtr := RealKmPtr13_th4;  bUse := True;  end;
      end;
  14 : begin
        if RealKmPtr14_th1.UseYn then begin RealKmPtr := RealKmPtr14_th1;  bUse := True;  end;
        if RealKmPtr14_th2.UseYn then begin RealKmPtr := RealKmPtr14_th2;  bUse := True;  end;
        if RealKmPtr14_th3.UseYn then begin RealKmPtr := RealKmPtr14_th3;  bUse := True;  end;
        if RealKmPtr14_th4.UseYn then begin RealKmPtr := RealKmPtr14_th4;  bUse := True;  end;
      end;
  15 : begin
        if RealKmPtr15_th1.UseYn then begin RealKmPtr := RealKmPtr15_th1;  bUse := True;  end;
        if RealKmPtr15_th2.UseYn then begin RealKmPtr := RealKmPtr15_th2;  bUse := True;  end;
        if RealKmPtr15_th3.UseYn then begin RealKmPtr := RealKmPtr15_th3;  bUse := True;  end;
        if RealKmPtr15_th4.UseYn then begin RealKmPtr := RealKmPtr15_th4;  bUse := True;  end;
      end;
  16 : begin
        if RealKmPtr16_th1.UseYn then begin RealKmPtr := RealKmPtr16_th1;  bUse := True;  end;
        if RealKmPtr16_th2.UseYn then begin RealKmPtr := RealKmPtr16_th2;  bUse := True;  end;
        if RealKmPtr16_th3.UseYn then begin RealKmPtr := RealKmPtr16_th3;  bUse := True;  end;
        if RealKmPtr16_th4.UseYn then begin RealKmPtr := RealKmPtr16_th4;  bUse := True;  end;
      end;
  17 : begin
        if RealKmPtr17_th1.UseYn then begin RealKmPtr := RealKmPtr17_th1;  bUse := True;  end;
        if RealKmPtr17_th2.UseYn then begin RealKmPtr := RealKmPtr17_th2;  bUse := True;  end;
        if RealKmPtr17_th3.UseYn then begin RealKmPtr := RealKmPtr17_th3;  bUse := True;  end;
        if RealKmPtr17_th4.UseYn then begin RealKmPtr := RealKmPtr17_th4;  bUse := True;  end;
      end;
  18 : begin
        if RealKmPtr18_th1.UseYn then begin RealKmPtr := RealKmPtr18_th1;  bUse := True;  end;
        if RealKmPtr18_th2.UseYn then begin RealKmPtr := RealKmPtr18_th2;  bUse := True;  end;
        if RealKmPtr18_th3.UseYn then begin RealKmPtr := RealKmPtr18_th3;  bUse := True;  end;
        if RealKmPtr18_th4.UseYn then begin RealKmPtr := RealKmPtr18_th4;  bUse := True;  end;
      end;
  19 : begin
        if RealKmPtr19_th1.UseYn then begin RealKmPtr := RealKmPtr19_th1;  bUse := True;  end;
        if RealKmPtr19_th2.UseYn then begin RealKmPtr := RealKmPtr19_th2;  bUse := True;  end;
        if RealKmPtr19_th3.UseYn then begin RealKmPtr := RealKmPtr19_th3;  bUse := True;  end;
        if RealKmPtr19_th4.UseYn then begin RealKmPtr := RealKmPtr19_th4;  bUse := True;  end;
      end;
  End;

  if Not bUse then
  begin
		if (Pos('수정', Self.Caption) > 0 ) then
		begin
			tmrThRealDis.Tag := 1;
			proc_dis_alculation(Self.Tag, False);
			if GT_DISTANCE_ST = 1 then proc_Realdis_Mng;
			Exit;
		end else
    begin
			GMessagebox('경로 탐색 거리 계산 후 경로보기를 눌러주세요', CDMSI);
      Exit;
    end;
  end;

  try
    With Frm_Main.Frm_JON52[5] do
    begin
			CONFRec.ConfSlip := 'A';
      CONFRec.ConfStatus := '';
      CONFRec.UpDate := '';
      CONFRec.DepLat := RealKmPtr.StartXVal;
      CONFRec.DepLng := RealKmPtr.StartYVal;
      CONFRec.DepName := lcsSta1 + '|' + lcsSta2 + '|' + lcsSta3 + '|' +  cxtStartAreaDetail.Text;
			CONFRec.ArrLat := RealKmPtr.EndXVal;
      CONFRec.ArrLng := RealKmPtr.EndYVal;
			CONFRec.ArrName := lcsEnd1 + '|' + lcsEnd2 + '|' + lcsEnd3 + '|' + cxtEndAreaDetail.Caption;
      CONFRec.BaechaLat := '';
      CONFRec.BaechaLng := '';
      CONFRec.BaechaName := '';

      CONFRec.ViaCnt := 0;
      CONFRec.ViaLat.Clear;
      CONFRec.ViaLng.Clear;
      CONFRec.ViaName.Clear;

      for i := 0 to 4 do
      begin
        if RealKmPtr.ViaXVal[i] <> '' then
        begin
          CONFRec.ViaLat .Add(RealKmPtr.ViaXVal[i]);
          CONFRec.ViaLng .Add(RealKmPtr.ViaYVal[i]);
          CONFRec.ViaName.Add(GT_PASS_INFO[Self.Tag][i].AREA1 + '|' + GT_PASS_INFO[Self.Tag][i].AREA2 + '|' + GT_PASS_INFO[Self.Tag][i].AREA3 + '|' + GT_PASS_INFO[Self.Tag][i].AREA4);

          Inc(CONFRec.ViaCnt);
        end;
      end;

      CONFRec.WkSabun := '';
      CONFRec.WKConnState := '';
      CONFRec.WKLocLat := '';
      CONFRec.WKLocLng := '';
      CONFRec.WKLocType := '';
      CONFRec.WKLocElapseTime := '';

      Frm_Main.cxPageControl2.ActivePageIndex := 4;
      if Not Frm_Main.BtnFix.Down then
        Frm_Main.cxPageControl2Click(Frm_Main.cxPageControl2);

      Proc_MapMode_Bessel1(fDirKm); //출발지 도착지 한지도

      btn_Mod1.Down := True;

      btn_Mod2.Down := False;
      btn_Mod3.Down := False;
      btn_Mod4.Down := False;
    end;
    pSet705CShareClickEvent('BtnSR', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
  Except
    on e: exception do
    begin
			Log('BtnSRClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'BtnSRClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.BtnSREnter(Sender: TObject);
begin
  if ( Lbl_charge.Caption <> '' ) And ( GT_DISTANCE_ST = 1 ) then
  begin
    if Not ChkMini.Checked then
    begin
      if FPlusDongCHK = 2 then pnl_Charge.height := 36
                          else pnl_Charge.height := 21;
    end;
    if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                        else lbl_PlusAreaNotice.Visible := False;
    SetPosLblDistance;
    pnl_charge.Visible := True;

    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Top := pnl_charge.Top + pnl_Charge.height;
  end;
end;

procedure TFrm_JON01.BtnSRExit(Sender: TObject);
begin
  pnl_charge.Visible := False;
  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then
  begin
    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height + 25
                                                else PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height;
  end;
end;

procedure TFrm_JON01.BtnViewMemoClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.BtnViewMemoClick');
  try
//    if ( Trim(meoCuCCMemo.Text) <> '' ) Or ( Trim(meoCuWorMemo.Text) <> '' ) Or
//       ( Trim(mmoCbMemo.Text) <> '' ) Or ( Trim(edt_CardMemo.Text) <> '' ) then   // 사천사 대리 요청  2015.08.17 LYB
    begin
      if Not Assigned(Frm_JON011) Or (Frm_JON011 = Nil) then Frm_JON011 := TFrm_JON011.Create(Nil);
			Frm_JON011.lb_CuctName.Caption := edtCuName.Text;
			Frm_JON011.Tag := Self.Tag;

			if Frm_Main.JON01MNG[Self.Tag].Dock then
      begin
        Frm_JON011.Left := Frm_JON00.Left - (Frm_JON011.Width + 1);
				Frm_JON011.Top  := Frm_JON00.Top - 40;
      end else
			begin
        Frm_JON011.Left := Self.Left - (Frm_JON011.Width + 1);
				Frm_JON011.Top  := Self.Top - 40;
      end;

      if Not mmoCbMemo.Visible then
      begin
        Frm_JON011.mmoCbMemoS.Visible := False;
        Frm_JON011.meoCuCCMemoS.Width := Frm_JON011.meoCuWorMemoS.Width;
      end;

      if TCK_USER_PER.JON_CUSTMEMO2 = '1' then
        Frm_JON011.edt_CardMemo.Properties.ReadOnly := False
      else
        Frm_JON011.edt_CardMemo.Properties.ReadOnly := True;

      Frm_JON011.meoCuCCMemoS .Text := meoCuCCMemo.Text;
      Frm_JON011.meoCuWorMemoS.Text := meoCuWorMemo.Text;
      Frm_JON011.mmoCbMemoS.   Text := mmoCbMemo.Text;
      Frm_JON011.edt_CardMemo. Text := edt_CardMemo.Text;

      Frm_JON011.bChkTime := True;
      if chkViewLevel.Checked then
        Frm_JON011.chkViewLevel.Checked := True
      else
        Frm_JON011.chkViewLevel.Checked := False;
      Frm_JON011.Show;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.BtnWkAgeClick(Sender: TObject);
begin
  if BtnWkAge.Down then
  begin
    BtnWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하';
    pnlWkAge.Visible := True;
    if ChkMini.Checked then
      pnlWkAge.Left := BtnWkAge.Left
    else
			pnlWkAge.Left := BtnOptionCallMu.Left;

//		pnlWkAge.Top := BtnWkAge.Top + BtnWkAge.Height;
		if GBTop5.Height >	BtnWkAge.Top + BtnWkAge.Height + pnlWkAge.Height then
			pnlWkAge.Top := BtnWkAge.Top + BtnWkAge.Height   // GBTop5 아래로 내려가도 보이면 아래로
		else
			pnlWkAge.Top := BtnWkAge.Top - pnlWkAge.Height;   // 안보이면 위로
		 
    if edtWkFAge.CanFocus then edtWkFAge.SetFocus;
    pSet705CShareClickEvent('BtnWkAgeDown', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
  end else
  begin
    BtnWkAge.Hint := '';
    pnlWkAge.Visible := False;

    pSet705CShareClickEvent('BtnWkAgeUp', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
  end;
end;

procedure TFrm_JON01.btnBubinSchClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.btnBubinSchClick');
  try
    if TCK_USER_PER.JON_BUBININFO = '1' then
    begin
      GMessagebox('접수창 법인정보 변경 권한이 없습니다.', CDMSI);
      Exit;
    end;

    // 법인 버튼 클릭시 자동 선택 해준다.
    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
    begin
      pnlBubin.Top := 168;
      pnlBubin.Left := 5;
    end else
    begin
      pnlBubin.Top := 148;
      pnlBubin.Left := 5;
    end;
    pnlBubin.Visible := True;
    cxtBubinSearchName.Text := '';
    cxBubinView.DataController.SetRecordCount(0);
    cxtBubinSearchName.SetFocus;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.btnCustAppinfoClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.btnCustAppinfoClick');
  if Not pnlCustAppinfo.Visible then
  begin
    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
    begin
    	pnlCustAppinfo.Top := 198;
	    pnlCustAppinfo.Left := 4;
    end else
    begin
			if GS_FormType = 'Normal' then
			begin
				pnlCustAppinfo.Top := 211;
			end;
			pnlCustAppinfo.Left := 4;
		end;
  	pnlCustAppinfo.Visible := True;
  end else
  begin
  	pnlCustAppinfo.Visible := False;
  end;
end;

procedure TFrm_JON01.BtnEdLockClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.BtnEdLockClick');
  if Not BtnEdLock.Down then
  begin
    BtnEdLock.Hint := 'F4)수정';
    BtnEdLock.Tag  := 0;
    BtnEdLock.Down := False;
    BtnEdLock.ImageIndex := 0;

    Frm_JON30.N2.Enabled := True;
    Frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
    Frm_JON30.btnEPoiMove.Enabled := True;
    Frm_JON30.N7.Enabled := True;
    Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
    Frm_JON30.btnEPoiAMove.Enabled := True;
  end else
  begin
    BtnEdLock.Hint := 'F4)잠금';
    BtnEdLock.Tag  := 0;
    BtnEdLock.Down := True;
    BtnEdLock.ImageIndex := 1;

    Frm_JON30.N2.Enabled := False;
    Frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
    Frm_JON30.btnEPoiMove.Enabled := False;
    Frm_JON30.N7.Enabled := False;
    Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
    Frm_JON30.btnEPoiAMove.Enabled := False;
  end;
end;

procedure TFrm_JON01.BtnResvViewClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.BtnResvViewClick');
	cxGbReserv.Left := 3;
	if GBTop5.Height < meoBigo.Top + cxGbReserv.Height then
		cxGbReserv.Top  := GBTop5.Height - cxGbReserv.Height//4;
	else 
		cxGbReserv.Top  := meoBigo.Top;//4;

  if cxGbReserv.Visible then
  begin
    cxGbReserv.Visible := False;
  end else
  begin
    if BtnResv.Tag = 0 then
    begin
      CbSecond.ItemIndex := 0;

      dtpResvDateJ.Text := FormatDateTime('YYYY-MM-DD', Date); // 예약일자
      dtpResvTimeJ.Text := FormatDateTime('AM/PM hh:mm:ss', Now + ((1 / 24 / 60) * 10)); // 예약시간

      dtpResvDate.Text := dtpResvDateJ.Text;
      dtpResvTime.Text := dtpResvTimeJ.Text;
    end;
    fGetDiffDay( FormatDateTime('YYYYMMDD', dtpResvDate.Date) + FormatDateTime('HHNN00', dtpResvTime.Time) );
    cxGbReserv.BringToFront;
    cxGbReserv.Visible := True;
  end;

  pSet705CShareClickEvent('BtnResvView', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.btnViewMapClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxButton43Click');
	if (cxtEndXval.Text <> '') and (cxtEndXval.Text <> '00000000') and (cxtEndYval.Text <> '000000') then
  begin
    try
      if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);

      Frm_JON31.Tag := Self.Tag;
      Frm_JON31.OnSelectedMap := SetEndAreaMap;
      Frm_JON31.Show;

    	Frm_JON31.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);

			if Frm_JON31.WebBrowser1.Document <> nil then
				(Frm_JON31.Webbrowser1.Document as IHTMLDocument2).ParentWindow.Focus;
      Frm_JON31.Show;
		except
			Frm_JON31.Close;
    end;
  end;
  pSet705CShareClickEvent('btnViewMap', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.BtnResvCloseClick(Sender: TObject);
begin
  cxGbReserv.Visible := False;
  pSet705CShareClickEvent('BtnResvClose', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.cxButton46Click(Sender: TObject);
begin
  cxGBSearch.Visible := False;
end;

procedure TFrm_JON01.cxButton5Click(Sender: TObject);
begin
	pnl_AIOB.visible := False;
end;

procedure TFrm_JON01.btnECloseClick(Sender: TObject);
begin
  GBEndXYView.Visible := False;
  pSet705CShareClickEvent('btnEClose', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.cxButton7Click(Sender: TObject);
begin
  GrpHelp.Visible := False;
  if cxtCuTel.CanFocus then cxtCuTel.SetFocus;
end;

procedure TFrm_JON01.cxButton8Click(Sender: TObject);
begin
	pnl_ViaMent.Visible := False;
end;

procedure TFrm_JON01.cxButton9Click(Sender: TObject);
begin
	btnMileList.Click;
	btn_MileOut_Close.Click;
end;

procedure TFrm_JON01.cxCurPathRateEnter(Sender: TObject);
begin
  lblCurPathRate.Visible := False;
end;

procedure TFrm_JON01.cxCurPathRateExit(Sender: TObject);
begin
  lblCurPathRate.Visible := (cxCurPathRate.Text = ''); // 경유요금 입력 잔상.
end;

procedure TFrm_JON01.cxCurPathRateFocusChanged(Sender: TObject);
begin
  lblCurPathRate.Visible := ( Not cxCurPathRate.Focused ) And (cxCurPathRate.Value = 0);
end;

procedure TFrm_JON01.cxCurPathRateKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.cxCurPathRateKeyDown');
  try
    if Ord(Key) = VK_RETURN then begin
      if cxCurPathRate.Value < 1000 then
      begin
        cxCurPathRate.Value := cxCurPathRate.Value * 1000;
      end;
      if cxTmWaitTime.CanFocus then cxTmWaitTime.SetFocus;
    end;

    if Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        //      VK_F6     : if rb_search.Enabled then rb_Search.OnClick(rb_Search);
        Vk_F7: //if rb_Modify.Enabled then rb_Modify.OnClick(rb_Modify);              // 수정
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave);
				Vk_F8: //whbtn_Cancel.OnClick(whbtn_Cancel);            
				begin                       // 종료
					SetDebugeWrite('JON01.cxCurPathRateKeyDown->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit);
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
					if (btnCmdWait.Enabled) and (btnCmdWait.Visible) then
						btnCmdWait.OnClick(btnCmdWait); // 대기
				Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
					if (btnCmdQuestion.Enabled) and (btnCmdQuestion.Visible) then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
				VK_ESCAPE: // ESC 키
					begin
						if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
						begin
							if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
								and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
								and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
								begin
									SetDebugeWrite('JON01.cxCurPathRateKeyDown->VK_ESCAPE');
									btnCmdExit.OnClick(btnCmdExit); // 종료
								end;
						end;
					end;
			end;
		end;
  Except
    on e: exception do
    begin
      Log('cxCurPathRateKeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cxCurPathRateKeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.cxCurPathRatePropertiesChange(Sender: TObject);
begin
		lblCurPathRate.Visible := (cxCurPathRate.Text = ''); // 기사송금 입력 잔상.
end;

procedure TFrm_JON01.cxCurWaitTmRateKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.cxCurWaitTmRateKeyDown');
  try
    if Ord(Key) = VK_RETURN then begin
      if cxCurWaitTmRate.Value < 1000 then
      begin
        cxCurWaitTmRate.Value := cxCurWaitTmRate.Value * 1000;
      end;
      if cxCurRevisionRate.CanFocus then cxCurRevisionRate.SetFocus;
    end;

    if Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        Vk_F7: //if rb_Modify.Enabled then rb_Modify.OnClick(rb_Modify);              // 수정
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave);
				Vk_F8: //whbtn_Cancel.OnClick(whbtn_Cancel);  
				begin                                 // 종료
					SetDebugeWrite('JON01.cxCurWaitTmRateKeyDown->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit);
				end;
        Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then
            btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F12:
          if btnCmdQuestion.Enabled then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
        VK_ESCAPE: // ESC 키
          begin
            if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
            begin
              if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '') and (Trim(lblStartAreaName.Text) = '') and
                (Trim(lblEndAreaName.Caption) = '') and (Trim(cxtStartAreaDetail.Text) = '') and
								(Trim(cxtEndAreaDetail.Caption) = '') then
							begin
								SetDebugeWrite('JON01.cxCurWaitTmRateKeyDown->VK_ESCAPE');
								btnCmdExit.OnClick(btnCmdExit); // 종료
							end;
            end;
          end;
      end;
    end;
  Except
    on e: exception do
    begin
      Log('cxCurWaitTmRateKeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cxCurWaitTmRateKeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.cxCustViewCellDblClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
var
  iRcIdx: Integer;
begin
  SetDebugeWrite('JON01.cxCustViewCellDblClick');
  iRcIdx := cxCustView.DataController.FocusedRecordIndex;
  // 현재 선택된 레코드 index 읽기.

  // 고객조회 그리드에서 그리드 선택시에 고객관련 정보를 입력 컨트롤에 Display~
  if iRcIdx > -1 then
    Proc_GridCustChoice(iRcIdx);
end;

procedure TFrm_JON01.cxCustViewEditKeyPress(Sender: TcxCustomGridTableView;
  AItem: TcxCustomGridTableItem; AEdit: TcxCustomEdit; var Key: Char);
var
  iRcIdx: integer;
begin
  SetDebugeWrite('JON01.cxCustViewEditKeyPress');
  if Ord(Key) = VK_RETURN then
  begin
    // 현재 선택된 레코드 index 읽기.
    iRcIdx := cxCustView.DataController.FocusedRecordIndex;
    // 고객조회 그리드에서 그리드 선택시에 고객관련 정보를 입력 컨트롤에 Display~
    if iRcIdx > -1 then
      Proc_GridCustChoice(iRcIdx);
  end;
end;

procedure TFrm_JON01.cxDriverChargeEnter(Sender: TObject);
begin
  LbDriverCharge.Visible := False;
end;

procedure TFrm_JON01.cxDriverChargeExit(Sender: TObject);
begin
  LbDriverCharge.Visible := (cxDriverCharge.Text = '') // 수수료 입력 잔상.
end;

procedure TFrm_JON01.cxDriverChargeFocusChanged(Sender: TObject);
begin
  LbDriverCharge.Visible := ( Not cxDriverCharge.Focused ) And (cxDriverCharge.Text = '');
end;

procedure TFrm_JON01.cxDriverChargePropertiesChange(Sender: TObject);
begin
  if ( Not cxDriverCharge.Focused ) then
    LbDriverCharge.Visible := (cxDriverCharge.Text = '') // 수수료 입력 잔상.
end;

procedure TFrm_JON01.CbCuGbPropertiesChange(Sender: TObject);
Var iHeight : Integer;
begin
  SetDebugeWrite('JON01.CbCuGbPropertiesChange');
  try
    btnBubinSch.Enabled := False;
    if (CbCuGb.Hint <> 'Clear') then
    begin
      if (lcsCu_seq <> '') then
      begin
        if CBCuGb.ItemIndex = 0 then
        begin
          if CbCuGb.Hint = '3' then
          begin
            if Application.MessageBox('고객구분을 [법인 --> 개인] 으로 정보를 변경 하시겠습니까?' +
              #10#13 + '변경 후에는 [수정] 버튼을 눌러 저장 하세요~',
              '법인정보 제거 확인', MB_OKCANCEL) = IDOK then
            begin
              lblCuBubinName.Caption := '';
              cxtCuBubin.Text := '';
              cxtCuBubin.Hint := '';
              CbCuGb.Hint := '1';
              if pnlBubin.Visible = True then
              begin
                pnlBubin.Visible := False;
              end;
              CbCuGb.Hint := '1';
            end else
            begin
              CbCuGb.ItemIndex := 2;
            end;
          end else
          begin
            CbCuGb.Hint := '1';
          end;
        end else
        if CBCuGb.ItemIndex = 1 then
        begin
          if CbCuGb.Hint = '3' then
          begin
            if Application.MessageBox('고객구분을 [법인 --> 업소] 로 정보를 변경 하시겠습니까?',
              '법인정보 제거 확인', MB_OKCANCEL) = IDOK then
            begin
              lblCuBubinName.Caption := '';
              cxtCuBubin.Text := '';
              cxtCuBubin.Hint := '';
              CbCuGb.Hint := '2';
              if pnlBubin.Visible = True then
              begin
                pnlBubin.Visible := False;
              end;
              CbCuGb.Hint := '2';
            end else
            begin
              CbCuGb.ItemIndex := 2;
            end;
          end else
          begin
            CbCuGb.Hint := '2';
          end;
        end else
        if CBCuGb.ItemIndex = 2 then
        begin
          CbCuGb.Hint := '3';
        end;
      end;
    end;

    if (CbCuGb.Hint = '') and (GB_SHOPTYPE_CALLCENTER = 1) then
      BtnCenterMng.Down := (CustBrTelYN = 'y');

    if ( CbCuGb.ItemIndex = 2 ) then
    begin
      if Not IsBubuinUse then
      begin
        if CbCuGb.Tag = 0 then
        begin
          CbCuGb.Tag := 1;
					Pnl_BubinV.Visible := True;

          GBTop5.Height := GBTop5.Height + 25;

          pSetFormScroll(0, 25);

          meoBigo.Top := 82;
					LbmeoBigo.Top := meoBigo.Top + 5;
					meoBigo2.Top := 121;
          LbmeoBigo2.Top := meoBigo2.Top + 5;
          meoBigo3.Top := 159;
          LbmeoBigo3.Top := meoBigo3.Top + 5;
					btnAddBigo.Top := 82 + 22;
					BtnResvView.Top := btnAddBigo.Top;
        end;
			end;
			btnBubinSch.Enabled := True;
    end else
    begin
      if Not IsBubuinUse then
      begin
        if CbCuGb.Tag = 1 then
        begin
          CbCuGb.Tag := 0;
          Pnl_BubinV.Visible := False;

          GBTop5.Height := GBTop5.Height - 25;

          pSetFormScroll(0, -25);

					meoBigo.Top := 82 - 25;
          LbmeoBigo.Top := ( meoBigo.Top + 5 );
					meoBigo2.Top := 121 - 25;
					LbmeoBigo2.Top := ( meoBigo2.Top + 5 );
					meoBigo3.Top := 159 - 25 ;
					LbmeoBigo3.Top := ( meoBigo3.Top + 5 );
					btnAddBigo.Top := 82 + 22 - 25;
					BtnResvView.Top := btnAddBigo.Top;
        end;
      end;
      btnBubinSch.Enabled := False;
    end;
  Except
    on e: exception do
    begin
      Log('CbCuGbPropertiesChange Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'CbCuGbPropertiesChange Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.cxGroupBox10MouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01.cxGroupBox6MouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01.cxGroupBox7MouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01.cxGroupBox8MouseMove(Sender: TObject; Shift: TShiftState;
  X, Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01.cxImage1Click(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxImage1Click');
  GrpHelp.Top := 65;
  GrpHelp.Left := 4;
  if GrpHelp.Visible then GrpHelp.Visible := False
                     else GrpHelp.Visible := True;
end;

procedure TFrm_JON01.cxLblOrderUpInfoClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxLblOrderUpInfoClick');
	if pnlOrderInfoView.Visible then
  begin
		pnlOrderInfoView.Visible := False;
  end else
	if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
	begin
    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
		begin
      // 오더수정시에 오더배차 및 상태에 관련 정보를 보여준다.
			pnlOrderInfoView.Top := PnlModifyTitle.Top + PnlModifyTitle.Height;//103;
			pnlOrderInfoView.Left := 118;
		end else
		begin
      // 오더수정시에 오더배차 및 상태에 관련 정보를 보여준다.
			if PnlModifyTitle.Height = 17 then pnlOrderInfoView.Top := PnlModifyTitle.Top + PnlModifyTitle.Height//90
																		else pnlOrderInfoView.Top := PnlModifyTitle.Top + PnlModifyTitle.Height;//103;

      pnlOrderInfoView.Left := 315;
    end;

		pnlOrderInfoView.Visible := True;
		pnlOrderInfoView.BringToFront;
	end;
end;

procedure TFrm_JON01.cxLblOrderUpInfoMouseLeave(Sender: TObject);
begin
{  if pnlOrderInfoView.Visible then
  begin
    pnlOrderInfoView.Visible := False;
  end;}
end;

procedure TFrm_JON01.cxLblOrderUpInfoMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
begin
	if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
   cxLblOrderUpInfo.Cursor := crHandPoint
 else
   cxLblOrderUpInfo.Cursor := crDefault;
end;

procedure TFrm_JON01.cxLBubinMemoFlagClick(Sender: TObject);
begin
  cxTBubinMemo.SetFocus;
end;

procedure TFrm_JON01.cxLBuNmFlgClick(Sender: TObject);
begin
  cxtCuBubin.SetFocus;
end;

procedure TFrm_JON01.cxLCuCCMemoFlg1Click(Sender: TObject);
begin
  if edt_CardMemo.CanFocus then edt_CardMemo.SetFocus;
end;

procedure TFrm_JON01.cxLCuCCMemoFlgClick(Sender: TObject);
begin
  meoCuCCMemo.SetFocus;
end;

procedure TFrm_JON01.cxLCuNmFlgClick(Sender: TObject);
begin
  edtCuName.SetFocus;
end;

procedure TFrm_JON01.cxLCuWorMemoFlgClick(Sender: TObject);
begin
  meoCuWorMemo.SetFocus;
end;

procedure TFrm_JON01.cxLEndAreaFlagClick(Sender: TObject);
begin
  meoEndArea.SetFocus;
//  meoEndArea.SelStart := Length(meoEndArea.Text);
end;

procedure TFrm_JON01.cxLCuTel2FlgClick(Sender: TObject);
begin
  cxtCuTel2.SetFocus;
end;

procedure TFrm_JON01.cxLCuTelFlgClick(Sender: TObject);
begin
  cxtCuTel.SetFocus;
end;

procedure TFrm_JON01.cxLSearchMainTelFlgClick(Sender: TObject);
begin
  cxTSearchMainTel.SetFocus;
end;

procedure TFrm_JON01.cxLStartAreaFlagClick(Sender: TObject);
begin
  meoStartArea.SetFocus;
end;

procedure TFrm_JON01.cxReEndAreaClick(Sender: TObject);
begin
	if cxtEndAreaDetail.Caption = '' then exit;
	cxReEndArea.Enabled := false;
	PnlSuggest.Visible := False;
	pnl_EndDetail_Update.Visible := True;
	pnl_EndDetail_Update.Left := 5;
	if ChkMini.Checked then	pnl_EndDetail_Update.Top := 50 else	pnl_EndDetail_Update.Top := 28;

	edt_EndDetail_Update.Text := '';
	edt_EndDetail_Update.Text := cxtEndAreaDetail.Caption;
	edt_EndDetail_Update.Hint := cxtEndAreaDetail.Caption;
	edt_EndDetail_Update.SetFocus;
end;

procedure TFrm_JON01.cxTBubinMemoEnter(Sender: TObject);
begin
	cxLBubinMemoFlag.Visible := False;
	if PnlWkJi.Visible then PnlWkJi.Visible := False;
end;

procedure TFrm_JON01.cxTBubinMemoExit(Sender: TObject);
begin
	cxLBubinMemoFlag.Visible := (cxTBubinMemo.Text = ''); // 법인메모 입력 잔상.

  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
end;

procedure TFrm_JON01.cxTBubinMemoFocusChanged(Sender: TObject);
begin
  cxLBubinMemoFlag.Visible := ( Not cxTBubinMemo.Focused ) And (cxTBubinMemo.Text = '');
end;

procedure TFrm_JON01.cxTBubinMemoPropertiesChange(Sender: TObject);
begin
  if ( Not cxTBubinMemo.Focused ) then
  cxLBubinMemoFlag.Visible := (cxTBubinMemo.Text = ''); // 법인메모 입력 잔상.
end;

procedure TFrm_JON01.meoStartAreaEnter(Sender: TObject);
begin
    SetDebugeWrite('JON01.meoStartAreaExit');
  try
    cxLStartAreaFlag.Visible := False;

    locNowControlName := 'meoStartArea'; // 현재 활성화된 컨트롤 명.
		lcsActiveEdit := locNowControlName;
		sActieEdit := lcsActiveEdit;

    if Assigned(Frm_JON30) then
    begin
      if ( Frm_JON30.Tag <> Self.Tag ) And ( Trim(TcxTextEdit(Sender).Text) <> '' )  then
      begin
        if ( Frm_JON30.AdvStringGrid1.Cells[0,1] <> '' ) Or
           ( Frm_JON30.AdvStringGrid2.Cells[0,0] <> '' ) Or
           ( Frm_JON30.AdvStringGrid3.Cells[0,0] <> '') then
        Hide_Panel(lcsActiveEdit, 0);
      end;
			//POI창 Tag 값 입력 확인용 천안로그 201191126 KHS
//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoStartAreaEnter-B-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS

			Frm_JON30.Tag := Self.Tag;

//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoStartAreaEnter-A-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS
		end;

    if J30ShowS = True then
    begin
      Exit;
    end;
  //  if Assigned(frmJON30) and (cxLabel20.Caption = 'F4)수정') then       //  20130703  LYB  잠김 상태에서도 검색창 표시 (팀장님지시)
    if Assigned(Frm_JON30) then
    begin
			if GS_MAP_AREA_AUTOSHOW then
      begin
				Frm_JON30.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text);
				Frm_JON30.OnSelectedMap := SetStartAreaMap;
        if (not Frm_JON30.Visible) and (cxtStartXval.Text <> '') and (cxtStartYval.Text <> '') then
        begin
          lcsActiveEdit := locNowControlName;
					sActieEdit := lcsActiveEdit;
					{if ( Frm_JON30.AdvStringGrid1.Cells[0,1] = '' ) and ( Frm_JON30.AdvStringGrid2.Cells[0,0] = '' ) and 
						 ( Frm_JON30.AdvStringGrid3.Cells[0,0] = '') then
					Hide_Panel(lcsActiveEdit,1) else} Hide_Panel(lcsActiveEdit,0);
				end;
      end else
      begin
        if (not Frm_JON30.Visible) and (cxtStartXval.Text <> '') and (cxtStartYval.Text <> '') then
        begin
          Hide_Panel(lcsActiveEdit,0);
          Frm_JON30.chk_Map(False);
        end;
      end;

      if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
      try
        if Frm_JON31.Showing then
        begin
          Frm_JON31.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text);
          Frm_JON31.OnSelectedMap := SetStartAreaMap;
        end;
      except
        Frm_JON31.Close;
      end;

      gKWComp := '';
    end;
  Except
    on e: exception do
    begin
      Log('meoStartAreaEnter Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoStartAreaEnter Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.meoStartAreaExit(Sender: TObject);
begin
	SetDebugeWrite('JON01.meoStartAreaExit');

	if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
	begin
		if giArea_Charge_YN = 'y' then
		begin
			Proc_Driver_Charge;
		end else
			cxDriverCharge.Text := '';
	end;

	cxLStartAreaFlag.Visible := (meoStartArea.Text = ''); // 출발지 입력 잔상.

	locNowControlName := ''; // 현재 활성화된 컨트롤 명.

	if Assigned(Frm_JON30) and (not (meoStartArea.Focused)) then
  begin
    gbCtrlVCancel := True;
    gbSCtrlV := False;
    PnlCtrlV.Visible := False;
		Hide_Panel(lcsActiveEdit,1);
  end;
end;

procedure TFrm_JON01.meoStartAreaFocusChanged(Sender: TObject);
begin
   SetDebugeWrite('JON01.meoStartAreaFocusChanged');
  cxLStartAreaFlag.Visible := ( Not meoStartArea.Focused ) And (meoStartArea.Text = '');
end;

procedure TFrm_JON01.meoStartAreaKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
Var iRate : Integer;
begin
	SetDebugeWrite('JON01.meoStartAreaKeyDown');
	SetDebugeWrite('JON01-No[' + locKNum + '/' + IntToStr(self.Tag) + '/' + IntToStr(GS_JON01_TYPE) + '/' + IntToStr(GS_JON01_TAB) + '] ' 
	             + meoStartArea.Text );
	try
		if Assigned(Frm_JON30) then
		begin
			//POI창 Tag 값 입력 확인용 천안로그 201191126 KHS
//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoStartAreaKeyDown-B-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS

			Frm_JON30.Tag := Self.Tag;

//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoStartAreaKeyDown-A-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS
		end;
		
    lcsActiveEdit := 'meoStartArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
    sActieEdit := 'meoStartArea';

		// 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then Exit;
		if Key = VK_RETURN then
    begin
      Key := 0;
      if not IsNotModifyPrice and (GT_CHARGE_CAL = 1) then
      begin
        // 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
        if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
        begin
          tmrThRealDis.Tag := 0;
          proc_dis_alculation(Self.Tag, True);
          if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                                 else begin
                                        iRate := func_search_charge;
                                        if Not gsMyMainRateNoChange then
                                        begin
																					if BtnRaLock.Hint <> 'F4)잠금' then
																					begin
																						curRate.Value := iRate;
																						OrgRate := curRate.Value;
																					end else
																					begin
																						if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
																						begin
																							if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
																							begin
																								tmLockMent.Enabled := False;
																								if ChkMini.Checked then
																								begin
																									lb_LockMent.Caption := '요금항목이 잠겨있습니다.';
																									pnl_LockMent.Width := 391;
																									imgLockMent.Visible := False;
																								end else
																								begin
																									lb_LockMent.Caption := '요금항목이 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
																									pnl_LockMent.Width := 585;
																									imgLockMent.Visible := True;
																								end;
																								lb_LockMent.Font.Color := clYellow;
																								imgLockMent.left := 334;
																								pnl_LockMent.Top := GBTop5.Top + curRate.Top + curRate.Height;//417//193;//276;
																								pnl_LockMent.Left := 8;
																								pnl_LockMent.Color := clBlack;
																								if not pnl_LockMent.Visible then pnl_LockMent.Visible := True;
																								tmLockMent.Interval := 2000;
																								tmLockMent.Enabled := True;
																								BtnRaLock.Tag := 99; //한번 알림 뜨면 다시는 안뜨게 함.
																							end;
																						end;
																					end;
                                        end;
                                      end;
        end;
      end;
      Exit;
    end;

    gbECtrlV := False;
    { TODO : Ctrl+V(붙여넣기)시 전검색단어 초기화-같은단어가들어오면검색이 안되는부분 붙여넣기시 허용 }
    if ( ssCtrl in Shift) and ( Key = Ord('V') ) then
    begin
      Frm_JON30.sPreSearchWord := '';
      gmap_forword := '';
      gbSCtrlV := True;
    end else
      gbSCtrlV := False;

    if Key in [VK_DOWN, VK_UP] then
    begin
      Exit; // 그리드에 포커스 넘기는건 KeyUp Event에서 처리한다.
    end;

    sAnsiSchTxt := meoStartArea.Text;

    if Key = VK_BACK then
    begin
      PnlPOISch.Visible := False;
      if ( BtnStLock.Tag = 1 ) And ( BtnStLock.Hint = 'F4)잠금' ) then
      begin
        if ( Pos('인근', meoStartArea.Text) = 0 ) And
           ( Pos('부근', meoStartArea.Text) = 0 ) And
           ( Pos('근처', meoStartArea.Text) = 0 ) then
        begin
          BtnStLock.Hint := 'F4)수정';
          BtnStLock.Tag  := 0;
          BtnStLock.Down := False;
          BtnStLock.ImageIndex := 0;
          Frm_JON30.N1.Enabled := True;
          Frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
          Frm_JON30.btnSPoiMove.Enabled := True;
          Frm_JON30.N6.Enabled := True;
          Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
          Frm_JON30.btnSPoiAMove.Enabled := True;
        end;
      end;

      if (Length(widestring(meoStartArea.Text)) = 1) and ( BtnStLock.Hint <> 'F4)잠금' ) then
      begin
        Frm_JON30.Grid_Init(lcsActiveEdit,1);
        Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
        GS_FULLWORD_CMP := '';
        Init_AdvGridSj;
      end else
      if (Length(sAnsiSchTxt) <= 1) then
      begin
        // 20120805 좌표 오류 체크 LYB
        gJONStaChkXY.Area1 := '';
        gJONStaChkXY.Area2 := '';
        gJONStaChkXY.Area3 := '';
        gJONStaChkXY.Area4 := '';
        gJONStaChkXY.Area5 := '';
        gJONStaChkXY.X := '';
        gJONStaChkXY.Y := '';
        gJONStaChkXY.GUIDE_X := '';
        gJONStaChkXY.GUIDE_Y := '';
        gJONStaChkXY.Gubun := '';

        // 키워드가 모두 지워진 상태에서 한번더 BACK 키를 누를경우 컨트롤 초기화 처리.
        lblStartAreaName.Text := '';
        cxtStartAreaDetail.Text := '';
        lcsConfAREA4 := '';
        lcsSta1 := '';
        lcsSta2 := '';
        lcsSta3 := ''; // 출1, 출2, 출3
        cxtStartXval.Text := '';
        cxtStartYval.Text := '';
        cxtStartGUIDEXval.Text := '';
        cxtStartGUIDEYval.Text := '';

        lcsStaDocId := '';
        lcsStaCellSel := '';
        lcsStaSchWord := '';
        GS_Grid_DEP := '';

        sBHSAddr := '';
        sBHEAddr := '';

        gKWComp := '';

        gmap_forword := '';
        GS_FULLWORD_CMP := '';
        gbSCtrlV := False;
        gbECtrlV := False;

        Frm_JON30.Grid_Init(lcsActiveEdit,1);
        Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
        Hide_Panel(lcsActiveEdit,1);

        if BtnStLock.Hint = 'F4)잠금' then
        begin
          BtnStLock.Hint := 'F4)수정';
          BtnStLock.Tag  := 0;
          BtnStLock.Down := False;
          BtnStLock.ImageIndex := 0;
          Frm_JON30.N1.Enabled := True;
          Frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
          Frm_JON30.btnSPoiMove.Enabled := True;
          Frm_JON30.N6.Enabled := True;
          Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
          Frm_JON30.btnSPoiAMove.Enabled := True;
        end;

        PnlSuggest.Visible := False;
        AdvGridSj.ShowSelection := False;
        Exit;
      end else
      if (Length(sAnsiSchTxt) <= 2) and (BtnStLock.Hint <> 'F4)잠금') then
      begin
        gmap_forword := '';
      end else
      if (Length(sAnsiSchTxt) < Length(map_ls_Text)) then
      begin
        map_ls_Text := '';
        gmap_forword := '';
      end;
		end;

    if Ord(key) = VK_F4 then
    begin
      if BtnStLock.Hint = 'F4)잠금' then
      begin
        BtnStLock.Hint := 'F4)수정';
        BtnStLock.Tag  := 0;
        BtnStLock.Down := False;
        BtnStLock.ImageIndex := 0;
        Frm_JON30.N1.Enabled := True;
        Frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
        Frm_JON30.btnSPoiMove.Enabled := True;
        Frm_JON30.N6.Enabled := True;
        Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
        Frm_JON30.btnSPoiAMove.Enabled := True;
      end else
      begin
        BtnStLock.Hint := 'F4)잠금';
        BtnStLock.Tag  := 0;
        BtnStLock.Down := True;
        BtnStLock.ImageIndex := 1;
        Frm_JON30.N1.Enabled := False;
        Frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
        Frm_JON30.btnSPoiMove.Enabled := False;
        Frm_JON30.N6.Enabled := False;
        Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
        Frm_JON30.btnSPoiAMove.Enabled := False;
      end;
      Exit;
    end else
    if Ord(key) = VK_F3 then
    begin
      Exit;
    end;

    if Ord(key) = VK_ESCAPE then  // ESC 키
    begin
      if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
      begin
//        if (Trim(meoStartArea.Text) = '') then
//        begin
//          lblStartAreaName.Clear;
//          cxtStartAreaDetail.Clear;
//        end;

        if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
          and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
					and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
				begin
					SetDebugeWrite('JON01.meoStartAreaKeyDown->VK_ESCAPE');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
			end;
    end;
  Except
    on e: exception do
    begin
      Log('meoStartAreaKeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoStartAreaKeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.meoStartAreaKeyUp(Sender: TObject; var Key: Word;
	Shift: TShiftState);
  procedure pJON03POISetFocus;
  begin
    if Frm_JON30.AdvStringGrid1.Cells[0,1] = '' then
    begin
      if Frm_JON30.AdvStringGrid2.Cells[0,0] = '' then
      begin
        if Frm_JON30.AdvStringGrid3.Cells[0,0] <> '' then
        begin
          Frm_JON30.AdvStringGrid1.ShowSelection := False;
          frm_JON30.AdvStringGrid2.ShowSelection := False;
          frm_JON30.AdvStringGrid3.ShowSelection := True;
          if frm_JON30.AdvStringGrid3.CanFocus then
            frm_JON30.AdvStringGrid3.SetFocus;
        end;
      end else
			begin
        frm_JON30.AdvStringGrid1.ShowSelection := False;
        frm_JON30.AdvStringGrid2.ShowSelection := True;
        frm_JON30.AdvStringGrid3.ShowSelection := False;
        if frm_JON30.AdvStringGrid2.CanFocus then
          frm_JON30.AdvStringGrid2.SetFocus;
        frm_JON30.AdvStringGrid2.FocusCell(0,0);
      end;
    end else
    begin
      frm_JON30.AdvStringGrid1.ShowSelection := True;
      frm_JON30.AdvStringGrid2.ShowSelection := False;
      frm_JON30.AdvStringGrid3.ShowSelection := False;
      if frm_JON30.AdvStringGrid1.CanFocus then
        frm_JON30.AdvStringGrid1.SetFocus;
    end;
  end;
begin
	SetDebugeWrite('JON01.meoStartAreaKeyUp');
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);	
	try
    lcsActiveEdit := 'meoStartArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
		sActieEdit := 'meoStartArea';

    if PnlSuggest.Visible then
      if PnlSuggest.Caption <> lcsActiveEdit then
      begin
        PnlSuggest.Visible := False;
        AdvGridSj.ShowSelection := False;
        PnlSuggest.Caption := lcsActiveEdit;
      end;

    // 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    //-  if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then  Exit;
    if (Key = 39) or (Key = 35) or (Key = 36) then  Exit;

    if ( ssCtrl in Shift) and ( Key = VK_LEFT ) then
    begin
      if  ( meoStartArea.SelStart = 0 ) And ( PnlSuggest.Visible ) then
      begin
        pJON03POISetFocus;
      end;
      Exit;
    end;

    if Key = VK_LEFT then Exit;

    if Frm_Main.JON01MNG[Self.Tag].FrmGubun <> 1 then
    begin
       if Length(AnsiString(meoStartArea.Text)) > 60 then meoStartArea.Height := 39
                                                     else meoStartArea.Height := 26;
    end;

    if fCheckMaxLength(meoStartArea, 98) then Key := 0;

    sAnsiSchTxt := meoStartArea.Text;

    if Length(Trim(sAnsiSchTxt)) > 2 then
    begin
      meoViaArea1.Enabled := True;
      cxViaAreaName1.Enabled := True;
      BtnViaMinus1.Enabled := True;
      sBHSAddr := '';
      sBHEAddr := '';
    end else
    begin
      J30ShowS := False;
      sBHSAddr := '';
      sBHEAddr := '';
    end;

    if ( Key = VK_DOWN ) And ( PnlSuggest.Visible ) then
    begin
      Key := 0;
      meoStartArea.SelStart := Length(meoStartArea.Text);
      if PnlSuggest.Visible then
      begin
        AdvGridSj.ShowSelection := True;
        if AdvGridSj.CanFocus then AdvGridSj.SetFocus;
        Exit;
      end;
    end else
    // 검색 그리드로 포커스 이동..
    if ( ( Key in [VK_DOWN] ) And ( Not PnlSuggest.Visible ) ) then
    begin
      pJON03POISetFocus;
    end else
		if Key = VK_RETURN then
    begin
      if lcsActiveEdit = 'meoStartArea' then
      begin
        if frm_JON30.Visible = True then
        begin
          if BtnStLock.Hint <> 'F4)잠금' then     // 20130703  LYB
          begin
						if frm_JON30.AdvStringGrid1.Cells[0,1] <> '' then
            begin
							frm_JON30.bEnter := False;
							frm_JON30.Proc_SendParent(frm_JON30.AdvStringGrid1.GetRealRow + 1);
							Hide_Panel(lcsActiveEdit,1);
						end;

						if GS_SEARCH_POTAL_FIRST then
						begin
							if (frm_JON30.AdvStringGrid1.Cells[0,1] = '') and (frm_JON30.AdvStringGrid3.Cells[0,1] <> '') then
							begin
								frm_JON30.bEnter := False;
								frm_JON30.Proc_SendParent_ADV3(frm_JON30.AdvStringGrid3.GetRealRow + 1, True);
              end;
            end else
            begin
              if (frm_JON30.AdvStringGrid1.Cells[0,1] = '') and (frm_JON30.AdvStringGrid2.Cells[0,0] <> '') then
              begin
                frm_JON30.bEnter := False;
                frm_JON30.Proc_SendParent_ADV2(frm_JON30.AdvStringGrid2.GetRealRow + 1, frm_JON30.AdvStringGrid2.GetRealCol, True);
                Hide_Panel(lcsActiveEdit,1);
              end;
            end;

						if GS_START_AUTOLOCK then
            begin
              BtnStLock.Hint := 'F4)잠금';
              BtnStLock.Tag  := 0;
              BtnStLock.Down := True;
              BtnStLock.ImageIndex := 1;
              frm_JON30.N1.Enabled := False;
              frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
              Frm_JON30.btnSPoiMove.Enabled := False;
              frm_JON30.N6.Enabled := False;
              frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
              Frm_JON30.btnSPoiAMove.Enabled := False;
            end;
            if meoStartArea.CanFocus then meoStartArea.SetFocus;
          end;

          if PnlSuggest.Visible then
          begin
            PnlSuggest.Visible := False;
            AdvGridSj.ShowSelection := False;
          end;
        end;
        key := 0;
        if meoStartArea.Hint <> 'STOPFOCUS' then
        begin // 포커스 더이상 넘어가지 않도록 한다.
          if ViaADDTag > 0 then meoViaArea1.SetFocus
                           else meoEndArea.SetFocus;
  //-        meoEndArea.SetFocus;
          gmap_forword := '';
        end else
        begin
          meoStartArea.Hint := ''; // 포커스 더이상 넘어가지 않도록 한다.
        end;
      end else
      begin
        key := 0;
        if curRate.CanFocus then curRate.SetFocus;
      end;
    end else
    if Ord(key) in [VK_F7..VK_F12, VK_F2, Vk_F1] then
    begin
      sActieEdit := 'meoStartArea';
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        Vk_F7:
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave); // 수정
				Vk_F8: 
				begin
					SetDebugeWrite('JON01.meoStartAreaKeyUp->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
				Vk_F9:
					begin
            if not btnCmdJoin.Enabled then Exit; // 접수
						if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
						begin
							if giArea_Charge_YN = 'y' then
							begin
								Proc_Driver_Charge;
							end else
								cxDriverCharge.Text := '';
						end;
						btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
					if btnCmdWait.Enabled then
					begin
						if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
						begin
							if giArea_Charge_YN = 'y' then
							begin
								Proc_Driver_Charge;
							end else
								cxDriverCharge.Text := '';
						end;
						btnCmdWait.OnClick(btnCmdWait); // 대기
					end;
        Vk_F11:
					if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then 
					begin
						if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
						begin
							if giArea_Charge_YN = 'y' then
							begin
								Proc_Driver_Charge;
							end else
								cxDriverCharge.Text := '';
						end;
						btnCmdMultiCall.Click;   // 복수콜
					end;
        Vk_F12:
					if btnCmdQuestion.Enabled then
					begin
						if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
						begin
							if giArea_Charge_YN = 'y' then
							begin
								Proc_Driver_Charge;
							end else
								cxDriverCharge.Text := '';
						end;
						btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
					end;
      end;
		end else
		if Key = VK_BACK then
		begin
			Frm_JON30.sPreSearchWord := '';
			J30ShowS := False;
			gmap_forword := '';

			// 2011.05.18 CDS.
			if not GB_JON_BACKKEYUSE then Exit;
		end else
		if (Key = vk_delete) then
		begin
			 J30ShowS := False;
		end else
		if (Key = VK_F4) then Exit
		else
//		if (key <> 229) then  //  20191224 한컴입력기 에서는 모든 한글이 229로 넘어옴 그래서 삭제 KHS
		begin
			if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
			begin
				if (BtnStLock.Hint = 'F4)잠금') and (BtnStLock.Tag = 0) then
				begin
					tmLockMent.Enabled := False;
					if ChkMini.Checked then
					begin
						lb_LockMent.Caption := '출발지가 잠겨있습니다.';
						pnl_LockMent.Width := 391;
						imgLockMent.Visible := False;
					end
					else
					begin
						lb_LockMent.Caption := '출발지가 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
						pnl_LockMent.Width := 585;
						imgLockMent.Visible := True;
					end;
					lb_LockMent.Font.Color := clWhite;
					imgLockMent.left := 324;
					pnl_LockMent.Top := GBTop3.Top - pnl_LockMent.Height;//193;//276;
					pnl_LockMent.Left := 8;
					pnl_LockMent.Color := clRed;
					if not pnl_LockMent.Visible then pnl_LockMent.Visible := True;
					tmLockMent.Interval := 2000;
					tmLockMent.Enabled := True;
					BtnStLock.Tag := 99; //한번 알림 뜨면 다시는 안뜨게 함.
				end;
			end;

			gKWComp := '';
			if GS_SEARCH_UPDATE_OPEN then J30ShowS := False;
			if J30ShowS = False then Proc_AreaSearchKDown_Added(Key, meoStartArea.Text);
		end;
  Except
    on e: exception do
    begin
      Log('meoStartAreaKeyUp Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoStartAreaKeyUp Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.meoStartAreaMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('JON01.meoStartAreaMouseDown');
  if PnlSuggest.Visible then
    if PnlSuggest.Caption <> lcsActiveEdit then
    begin
      PnlSuggest.Visible := False;
      AdvGridSj.ShowSelection := False;
      Init_AdvGridSj;
      PnlSuggest.Caption := lcsActiveEdit;
    end;
end;

procedure TFrm_JON01.meoStartAreaPropertiesChange(Sender: TObject);
Var i, iRow : Integer;
    sLine : String;
begin
	SetDebugeWrite('JON01.meoStartAreaPropertiesChange');
	SetDebugeWrite('JON01-No[' + locKNum + '/' + IntToStr(self.Tag) + '/' + IntToStr(GS_JON01_TYPE) + '/' + IntToStr(GS_JON01_TAB) + '] ' 
								+ meoStartArea.Text );
	try
		if ( Not meoStartArea.Focused ) then
			cxLStartAreaFlag.Visible := (meoStartArea.Text = ''); // 출발지 입력 잔상.

    meoStartArea.Hint := ''; // 포커스 더이상 넘어가지 않도록 한다.

    if (lblStartAreaName.Text <> '') and (meoStartArea.Text <> '') then
      btnStartLocalSave.Enabled := True
    else
      btnStartLocalSave.Enabled := False;
	except on E: Exception do
    Assert(False, E.Message);
  end;

  try
    // 출발지 입력 글자 저장
    sLine := '1';
    if meoStartArea.Tag = 0 then
    begin
      iRow := Self.Tag;
			sLine := '2';
			gsStArea[iRow] := meoStartArea.Text;
      sLine := '3';
			for i := 1 to ViaADDTag do
      begin
				sLine := '4';
        if ( i < 1 ) Or ( i > 5 ) then Break;
				if GT_PASS_INFO[iRow][i-1].AREA5 <> '' then
					gsStArea[iRow] := StringReplace(gsStArea[iRow],'/'+ GT_PASS_INFO[iRow][i-1].AREA5, '', [rfReplaceAll]);

        sLine := '5';
      end;
    end;
	except on E: Exception do
    Assert(False, sLine + ' - ' + IntToStr(iRow) + ' - ' + IntToStr(i) + ' - ' + meoStartArea.Text + ' - ' + E.Message);
  end;
end;

procedure TFrm_JON01.meoViaArea1Enter(Sender: TObject);
var iTag, iNowTag : integer;
begin
	SetDebugeWrite('JON01.meoViaArea1Enter');
	try
		iNowTag := TcxMemo(Sender).Tag;

    locNowControlName := 'meoViaArea'; // 현재 활성화된 컨트롤 명.
    lcsActiveEdit := locNowControlName;
		sActieEdit := lcsActiveEdit;
		
		if Assigned(Frm_JON30) then
    begin
      if ( Frm_JON30.Tag <> Self.Tag ) And ( Trim(TcxMemo(Sender).Text) <> '' )  then
      begin
        if ( Frm_JON30.AdvStringGrid8.Cells[0,1] <> '' ) Or
           ( Frm_JON30.AdvStringGrid7.Cells[0,0] <> '' ) Or
           ( Frm_JON30.AdvStringGrid9.Cells[0,0] <> '') then
        Hide_Panel(lcsActiveEdit, 0);
      end;
			//POI창 Tag 값 입력 확인용 천안로그 201191126 KHS
//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoViaArea1Enter-B-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS

			Frm_JON30.Tag := Self.Tag;

//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoViaArea1Enter-A-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS
		end;

    if  J30ShowS = True then
    begin
      Exit;
    end;
    if Assigned(frm_JON30) then
    begin
      if GS_MAP_AREA_AUTOSHOW then
      begin
        if iNowTag = 1 then
        begin
          if XposVia[1]<> '' then
            Frm_JON30.ViaPos(meoViaArea1.Text, XposVia[1], YposVia[1]);
        end	else
        begin
          if XposVia[iNowTag] <> '' then
            Frm_JON30.ViaPos(meoViaArea[iNowTag].Text, XposVia[iNowTag], YposVia[iNowTag]);
        end;
        if (not Frm_JON30.Visible) and (XposVia[iNowTag] <> '') and (YposVia[iNowTag] <> '') then
        begin
          lcsActiveEdit := locNowControlName;
					sActieEdit := lcsActiveEdit;
					{if ( Frm_JON30.AdvStringGrid8.Cells[0,1] = '' ) and ( Frm_JON30.AdvStringGrid7.Cells[0,0] = '' ) and 
						 ( Frm_JON30.AdvStringGrid9.Cells[0,0] = '') then
					Hide_Panel(lcsActiveEdit,1) else} Hide_Panel(lcsActiveEdit,0);
				end;
			end else
      begin
				if (not Frm_JON30.Visible) and (XposVia[iNowTag] <> '') and (YposVia[iNowTag] <> '') then
        begin
          Hide_Panel(lcsActiveEdit,0);
          Frm_JON30.chk_Map(False);
        end;
      end;
      gKWComp := '';
  	end;
  Except
    on e: exception do
    begin
      Log('meoViaArea1Enter Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoViaArea1Enter Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.meoViaArea1Exit(Sender: TObject);
begin
  SetDebugeWrite('JON01.meoViaArea1Exit');
//-	proc_dis_alculation_Via; // Km 재계산을 한다.
	locNowControlName := ''; // 현재 활성화된 컨트롤 명.
//-  viaOk;

	if Assigned(Frm_JON30) and (not (meoViaArea1.Focused)) then
		Hide_Panel(lcsActiveEdit,1);
end;

procedure TFrm_JON01.meoViaArea1KeyDown(Sender: TObject; var Key: Word;
	Shift: TShiftState);
var iTag, i : integer;
	tmpMeoVia : TcxMemo;
	tmpViaLock : TAdvGlowButton;
	tmpViaAreaName : TcxLabel;
begin
	SetDebugeWrite('JON01.meoViaArea1KeyDown');
  try
    ViaNowTag := TcxMemo(Sender).Tag;
		if ViaNowTag = 1 then
		begin
			tmpMeoVia := meoViaArea1;
			tmpViaLock := BtnViaLock1;
			tmpViaAreaName := cxViaAreaName1;
		end
		else
		begin
			tmpMeoVia := meoViaArea[ViaNowTag];
			tmpViaLock := BtnViaLock[ViaNowTag];
			tmpViaAreaName := cxViaAreaName[ViaNowTag];
		end;
		sAnsiSchTxt := tmpMeoVia.Text;

		// 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then Exit;

    if Key in [VK_DOWN, VK_UP] then
    begin
      Exit; // 그리드에 포커스 넘기는건 KeyUp Event에서 처리한다.
    end;

    if Key = VK_BACK then
    begin
      PnlPOISch.Visible := False;
			if (Length(widestring(tmpMeoVia.Text)) = 1) and ( tmpViaLock.Hint <> 'F4)잠금' ) then
			begin
				Frm_JON30.Grid_Init(lcsActiveEdit,1);
				Frm_JON30.Grid_Init(lcsActiveEdit,2);
				Frm_JON30.Grid_Init(lcsActiveEdit,3);
				Frm_JON30.Grid_Init(lcsActiveEdit,4);
				GS_FULLWORD_CMP := '';
        Init_AdvGridSj;
      end else
			if (Length(sAnsiSchTxt) <= 1) then
			begin


				gKWComp := '';
				gmap_forword := '';

				Frm_JON30.Grid_Init(lcsActiveEdit,1);
				Frm_JON30.Grid_Init(lcsActiveEdit,2);
				Frm_JON30.Grid_Init(lcsActiveEdit,3);
				Frm_JON30.Grid_Init(lcsActiveEdit,4);

				if ViaNowTag = 1 then
				begin
					BtnViaLock1.Hint := 'F4)수정';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := False;
					BtnViaLock1.ImageIndex := 0;
				end else
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)수정';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := False;
					BtnViaLock[ViaNowTag].ImageIndex := 0;
				end;

				PnlSuggest.Visible := False;
				AdvGridSj.ShowSelection := False;

				Hide_Panel(lcsActiveEdit,1);
				Exit;
      end else
			if (Length(sAnsiSchTxt) <= 2) and (BtnViaLock[ViaNowTag].Hint <> 'F4)잠금') then
			begin
				gmap_forword := '';
			end else
			if (Length(sAnsiSchTxt) < Length(map_ls_Text)) then
			begin
				map_ls_Text := '';
				gmap_forword := '';
			end;
		end;

		if Ord(key) = VK_F4 then
    begin
			if ViaNowTag = 1 then
			begin				
				if BtnViaLock1.Hint = 'F4)잠금' then
				begin
					BtnViaLock1.Hint := 'F4)수정';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := False;
					BtnViaLock1.ImageIndex := 0;
				end else
				begin
					BtnViaLock1.Hint := 'F4)잠금';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := True;
					BtnViaLock1.ImageIndex := 1;
				end;
			end else
			begin
				if BtnViaLock[ViaNowTag].Hint = 'F4)잠금' then
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)수정';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := False;
					BtnViaLock[ViaNowTag].ImageIndex := 0;
				end else
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)잠금';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := True;
					BtnViaLock[ViaNowTag].ImageIndex := 1;
				end;
			end;

			Exit;
    end else
		if Ord(key) = VK_F5 then
    begin
      BtnViaAddClick(Sender);
    end;

    if Ord(key) = VK_F6 then
    begin
      iTag := ViaNowTag; //삭제원하는 경유지 위치
      if iTag = 1 then BtnViaMinus1.Click
                  else BtnViaMinus[ViaNowTag].Click;
    end;

    lcsActiveEdit := 'meoViaArea';

    if Key = VK_TAB then
    begin
			Key := 0;
//			sleep(800); //너무 빠른 이동을 막기위하여 1초 추가 20181116 KHS
			while i <= 800 do 
			begin
				Application.ProcessMessages;
				Inc(i);
			end;
			// 엔터키 입력 일때,,   그리드에 경유지 정보 추가 한다.
			if tmpViaAreaName.Caption <> '' then
			begin
				ViaOK; // 경유지 저장 및 화면 닫기.
				Hide_Panel('meoViaArea',0);

				if meoViaArea[TcxMemo(sender).Tag + 1].Text <> '' then
					meoViaArea[TcxMemo(sender).Tag + 1].SetFocus
				else
				begin
					if meoEndArea.CanFocus then meoEndArea.SetFocus;
				end;
			end else
			begin
				if (tmpViaLock.Hint <> 'F4)잠금') and (Frm_Jon30.gB_ViaIng) then
				begin
					//시작 310부터 22씩 증가
					if ChkMini.checked then pnl_ViaMent.Top := 350 
					else pnl_ViaMent.Top := 310;
					if ViaNowTag = 1 then
						pnl_ViaMent.Top :=  310
					else
						pnl_ViaMent.Top :=  310 + ((ViaNowTag-1) * 22);
					pnl_ViaMent.Visible := True; //POI검색중....
					pnl_ViaMent.Hint := 'Enter';
				end else //잠금상태에서 포커스 이동
				begin
					if meoViaArea[TcxMemo(sender).Tag + 1].Text <> '' then
						meoViaArea[TcxMemo(sender).Tag + 1].SetFocus
					else
					begin
						if meoEndArea.CanFocus then meoEndArea.SetFocus;
					end;
				end;
			end;

			if PnlSuggest.Visible then
      begin
        PnlSuggest.Visible := False;
        AdvGridSj.ShowSelection := False;
			end;

			if ViaNowTag = 1 then
			begin
				if cxViaAreaName1.Caption <> '' then
				begin
					BtnViaLock1.Hint := 'F4)잠금';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := True;
					BtnViaLock1.ImageIndex := 1;			
				end;
			end
			else
			begin
				if cxViaAreaName[ViaNowTag].Caption <> '' then
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)잠금';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := True;
					BtnViaLock[ViaNowTag].ImageIndex := 1;			
				end;
			end;
		end;
	Except
    on e: exception do
    begin
      Log('meoViaArea1KeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoViaArea1KeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.meoViaArea1KeyUp(Sender: TObject; var Key: Word;
	Shift: TShiftState);
	procedure pJON03POISetFocus;
	begin
		if Frm_JON30.AdvStringGrid8.Cells[0,1] = '' then
    begin
      if Frm_JON30.AdvStringGrid7.Cells[0,0] = '' then
      begin
				if Frm_JON30.AdvStringGrid9.Cells[0,0] <> '' then
        begin
					Frm_JON30.AdvStringGrid8.ShowSelection := False;
					Frm_JON30.AdvStringGrid7.ShowSelection := False;
					Frm_JON30.AdvStringGrid9.ShowSelection := True;
          Frm_JON30.AdvStringGrid9.SetFocus;
        end;
      end else
      begin
        Frm_JON30.AdvStringGrid8.ShowSelection := False;
        Frm_JON30.AdvStringGrid7.ShowSelection := True;
				Frm_JON30.AdvStringGrid9.ShowSelection := False;
				Frm_JON30.AdvStringGrid7.SetFocus;
        Frm_JON30.AdvStringGrid7.FocusCell(0,0);
			end;
    end else
    begin
			Frm_JON30.AdvStringGrid8.ShowSelection := True;
			Frm_JON30.AdvStringGrid7.ShowSelection := False;
			Frm_JON30.AdvStringGrid9.ShowSelection := False;
      Frm_JON30.AdvStringGrid8.SetFocus;
    end;
  end;
var iTag, i : integer;
	tmpMeoVia : TcxMemo;
	tmpViaLock : TAdvGlowButton;
	tmpViaAreaName : TcxLabel;
begin
	SetDebugeWrite('JON01.meoViaArea1KeyUp');
	try
    ViaNowTag := TcxMemo(Sender).Tag;
		if ViaNowTag = 1 then
		begin
			tmpMeoVia := meoViaArea1;
			tmpViaLock := BtnViaLock1;
			tmpViaAreaName := cxViaAreaName1;
		end
		else
		begin
			tmpMeoVia := meoViaArea[ViaNowTag];
			tmpViaLock := BtnViaLock[ViaNowTag];
			tmpViaAreaName := cxViaAreaName[ViaNowTag];
		end;

		tmpMeoVia.text := ReplaceAll(Trim(tmpMeoVia.Text), #$D#$A, '');
		sAnsiSchTxt := tmpMeoVia.Text;
		
		if Assigned(Frm_JON30) then
		begin
			//POI창 Tag 값 입력 확인용 천안로그 201191126 KHS
//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoViaArea1KeyUp-B-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS

			Frm_JON30.Tag := Self.Tag;

//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoViaArea1KeyUp-A-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS
		end;			
    lcsActiveEdit := 'meoViaArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.

    if PnlSuggest.Visible then
      if PnlSuggest.Caption <> lcsActiveEdit then
      begin
        PnlSuggest.Visible := False;
				AdvGridSj.ShowSelection := False;
        PnlSuggest.Caption := lcsActiveEdit;
      end;

    // 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    // if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then  Exit;
    if (Key = 39) or (Key = 35) or (Key = 36) then  Exit;

    if ( ssCtrl in Shift) and ( Key = VK_LEFT ) then
    begin
			if  ( tmpMeoVia.SelStart = 0 ) And ( PnlSuggest.Visible ) then
			begin
				pJON03POISetFocus;
			end;
			Exit;
    end;

    if Key = VK_LEFT then Exit;

    if ( Key = VK_DOWN ) And ( PnlSuggest.Visible ) then
    begin
      Key := 0;
			tmpMeoVia.SelStart := Length(tmpMeoVia.Text);
			if PnlSuggest.Visible then
      begin
        AdvGridSj.ShowSelection := True;
        AdvGridSj.SetFocus;
        Exit;
      end;
    end else
    // 검색 그리드로 포커스 이동..
    if ( ( Key in [VK_DOWN, VK_UP] ) And ( Not PnlSuggest.Visible ) ) then
    begin
      pJON03POISetFocus;
    end else
    if Key = VK_BACK then
    begin
      Frm_JON30.sPreSearchWord := '';
      J30ShowS := False;
      gmap_forword := '';

			if Length(sAnsiSchTxt) <= 1 then
			begin
				if ViaNowTag = 1 then
				begin
					cxViaAreaName1.Caption := '';
				end else
				if ViaNowTag > 1 then
				begin
//					cxViaAreaName1.Caption := '';
					cxViaAreaName[ViaNowTag].Caption := '';
				end;
				XposVia[ViaNowTag] := '';
				YposVia[ViaNowTag] := '';
				ViaAreaDetail[ViaNowTag] := '';
				ViaAreaName[ViaNowTag] := '';
				DocId[ViaNowTag] := '';
				CellSel[ViaNowTag] := '';
				SchWord[ViaNowTag] := '';
				ViaSA1[ViaNowTag] := '';
				ViaSA2[ViaNowTag] := '';
				ViaSA3[ViaNowTag] := ''; // 출1, 출2, 출3
			end;
			if ( Length(sAnsiSchTxt) = 0 ) then 
				ViaOK;
		end else
		if Key = VK_RETURN then
		begin
			// 엔터키 입력 일때,,   그리드에 경유지 정보 추가 한다.
//			sleep(800); //너무 빠른 이동을 막기위하여 1초 추가 20181116 KHS
			while i <= 800 do 
			begin
				Application.ProcessMessages;
				Inc(i);
			end;
			if tmpViaAreaName.Caption <> '' then
			begin
				ViaOK; // 경유지 저장 및 화면 닫기.
				Hide_Panel('meoViaArea',0);

				if meoViaArea[TcxMemo(sender).Tag + 1].Text <> '' then
					meoViaArea[TcxMemo(sender).Tag + 1].SetFocus
				else
				begin
					if meoEndArea.CanFocus then meoEndArea.SetFocus;
				end;
			end else
			begin
				if (tmpViaLock.Hint <> 'F4)잠금') and (Frm_Jon30.gB_ViaIng) then
				begin
					//시작 310부터 22씩 증가
					if ChkMini.checked then pnl_ViaMent.Top := 350 
					else pnl_ViaMent.Top := 310;
					if ViaNowTag = 1 then
						pnl_ViaMent.Top :=  pnl_ViaMent.Top
					else
						pnl_ViaMent.Top :=  pnl_ViaMent.Top + ((ViaNowTag-1) * 22);
					pnl_ViaMent.Visible := True; //POI검색중....
					pnl_ViaMent.Hint := 'Enter';
				end else //잠금상태에서 포커스 이동
				begin
					if meoViaArea[TcxMemo(sender).Tag + 1].Text <> '' then
						meoViaArea[TcxMemo(sender).Tag + 1].SetFocus
					else
					begin
						if meoEndArea.CanFocus then meoEndArea.SetFocus;
					end;
				end;
				
			end;

			if PnlSuggest.Visible then
      begin
        PnlSuggest.Visible := False;
        AdvGridSj.ShowSelection := False;
			end;

			if ViaNowTag = 1 then
			begin
				if cxViaAreaName1.Caption <> '' then
				begin
					BtnViaLock1.Hint := 'F4)잠금';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := True;
					BtnViaLock1.ImageIndex := 1;			
				end;
			end
			else
			begin
				if cxViaAreaName[ViaNowTag].Caption <> '' then
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)잠금';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := True;
					BtnViaLock[ViaNowTag].ImageIndex := 1;			
				end;
			end;
		end else
		if (Key = VK_F4) then Exit
		else
//		if (key <> 229) then  //  20191224 한컴입력기 에서는 모든 한글이 229로 넘어옴 그래서 삭제 KHS
		begin
			gKWComp := '';
			GS_VIA_Tag := ViaNowTag;
			Proc_AreaSearchKDown_Added(Key, sAnsiSchTxt);
		end;
	Except
    on e: exception do
    begin
      Log('meoViaArea1KeyUp Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoViaArea1KeyUp Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.meoViaArea1PropertiesChange(Sender: TObject);
begin
  TcxMemo(Sender).Text := StringReplace(TcxMemo(Sender).Text, #9, '', [rfReplaceAll]);  // Tab키 삭제
end;

procedure TFrm_JON01.miQRateClick(Sender: TObject);
begin
  pSet601QRate(Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
	RQAListView.DataController.SetRecordCount(0);
  btnRQALExit.Click;
  pCompareQRateInfo;

  pSet705CShareClickEvent('BtnQRate', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
end;

procedure TFrm_JON01.miQRListClick(Sender: TObject);
begin
  if RQAListView.DataController.RecordCount > 0 then
  begin
    gbRQAList.Visible := True;
    pCompareQRateInfo;
  end;
end;

procedure TFrm_JON01.mmoCbMemoKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if fCheckMaxLength(mmoCbMemo, 296) then Key := 0;
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);	
end;

procedure TFrm_JON01.cxtBubinSearchNameKeyPress(Sender: TObject; var Key: Char);
begin
  SetDebugeWrite('JON01.cxtBubinSearchNameKeyPress');
  if ord(key) = VK_RETURN then
  begin
    // 법인정보를 조회한다.
    Proc_BubinListSearch;
  end;
end;

procedure TFrm_JON01.cxtBubinSearchNameKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.cxtBubinSearchNameKeyUp');
  // 검색 그리드로 포커스 이동..
  if Key in [VK_DOWN, VK_UP] then
  begin
    cxGrdBubin.SetFocus;
  end
end;

procedure TFrm_JON01.cxtBubinSearchNamePropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxtBubinSearchNamePropertiesChange');
  // 법인정보를 조회한다.
  Proc_BubinListSearch;
end;

procedure TFrm_JON01.cxtCuTel2PropertiesChange(Sender: TObject);
begin
  if chkCenterMng.Checked then
  begin
    cbTelView.ItemIndex := 2;
  end else
  begin
		if ( Trim(cxtCuTel2.Text) <> '' ) then cbTelView.ItemIndex := 1
                                      else cbTelView.ItemIndex := 0
  end;
end;

procedure TFrm_JON01.cxtCuTelKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	SetDebugeWrite('JON01.cxtCuTelKeyPress');
  try
    if Ord(Key) = VK_RETURN then
    begin
      if ( StrToIntDef(Copy(cxtCuTel.Text, 1, 1), -1) In [0..9] ) then
			begin
        // 전화번호 검색
				SearchCuTel(((Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 )));
      end else
      begin
				if Length(Trim(cxtCuTel.Text)) >= 2 then
        begin
          // 고객명 으로 조회 한다... sGB : NAME(고객명으로 조회), : TELL(전화번호로 조회)
          CustomerSearch('NAME');
        end else
        begin
          GMessagebox('고객명 검색은 2자 이상 입력하셔야 합니다.', CDMSI);
        end;
      end;
		end;

    if Ord(key) in [VK_F7..VK_F12, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
  					btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
				//      VK_F6     : if rb_search.Enabled then rb_Search.OnClick(rb_Search);
        Vk_F7:
          if btnCmdUpdSave.Enabled then btnCmdUpdSave.OnClick(btnCmdUpdSave); // 수정
        Vk_F8:
				begin
					SetDebugeWrite('JON01.cxtCuTelKeyPress->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
          if btnCmdQuestion.Enabled then btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.cxtCuTelKeyPress(Sender: TObject; var Key: Char);
var i : integer;
begin

end;

procedure TFrm_JON01.cxtCuTelMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
	SetDebugeWrite('JON01.cxtCuTelMouseDown');
  curRate.SelectAll;
  if PnlSuggest.Visible then
  begin
    PnlSuggest.Visible := False;
    AdvGridSj.ShowSelection := False;
    PnlSuggest.Caption := '';
  end;
end;

procedure TFrm_JON01.cxtEndXvalChange(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxtEndYvalPropertiesChange');
  tmrXYChange.Tag := 1;   // 도착지
  tmrXYChange.Enabled := True;
end;

procedure TFrm_JON01.cxtEndYvalPropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxtEndYvalPropertiesChange');
  tmrXYChange.Tag := 1;   // 도착지
  tmrXYChange.Enabled := True;
end;

procedure TFrm_JON01.cxTmWaitTimeKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.cxTmWaitTimeKeyDown');
  try
    if Ord(Key) = VK_RETURN then
      if cxCurWaitTmRate.CanFocus then cxCurWaitTmRate.SetFocus;

    if Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        Vk_F7: //if rb_Modify.Enabled then rb_Modify.OnClick(rb_Modify);              // 수정
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave);
        Vk_F8: //whbtn_Cancel.OnClick(whbtn_Cancel);                                   // 종료
				begin
					SetDebugeWrite('JON01.cxTmWaitTimeKeyDown->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then
            btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F12:
          if btnCmdQuestion.Enabled then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
        VK_ESCAPE: // ESC 키
          begin
            if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
            begin
              if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
                and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
                and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
							begin
								SetDebugeWrite('JON01.cxTmWaitTimeKeyDown->VK_ESCAPE');
								btnCmdExit.OnClick(btnCmdExit); // 종료
							end;
						end;
          end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.cxTSearchMainTelExit(Sender: TObject);
begin
  pSetSearchMainTel(False);
end;

procedure TFrm_JON01.cxTSearchMainTelKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
Var i : Integer;
begin
  SetDebugeWrite('JON01.cxTSearchMainTelKeyDown');
  if Key = VK_BACK then
  begin
    if (Length(cxTSearchMainTel.Text) <= 1) then
    begin
      lst_BRList.Items := cboBranch.Properties.Items;
      searchBRlist.Clear;
      for i := 0 to lst_BRList.Items.Count - 1 do
        searchBRlist.Add(inttostr(i));

      if lst_BRList.Items.Count > 30 then
        lst_BRList.Height := 500
      else
        lst_BRList.Height := lst_BRList.Items.Count * 18;
//      lst_BRList.Visible := False;
//      Exit;
		end;
  end else
  if Key = VK_DOWN then
	begin
    if lst_BRLIst.ItemIndex < 0 then lst_BRLIst.ItemIndex := 0;
    if lst_BRList.Visible then lst_BRList.SetFocus;
  end else
	if Key = VK_RETURN then
  begin
		if cboBranch.ItemIndex = StrToIntDef(searchBRlist[0], 0) then
		begin
			//이미 선택돤 인덱스이기 때문에 갱신이 안되는 오류개선하기 위해서 사용 2018.09.11 KHS
			cboBranch.Tag := 20;
			cboBranch.ItemIndex := -1;  
			cboBranch.Tag := 0;
			
			cboBranch.ItemIndex := StrToIntDef(searchBRlist[0], 0);
			LoadCustLevel;
			LoadPayMethod;
		end else
			cboBranch.ItemIndex := StrToIntDef(searchBRlist[0], 0);

		lst_BRList.Visible := False;
		cxtCuTel.SetFocus;
	end;
end;

procedure TFrm_JON01.cxTSearchMainTelKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	SetDebugeWrite('JON01.cxTSearchMainTelKeyUp');
//	if (key <> 229) then      //  20191224 한컴입력기 에서는 모든 한글이 229로 넘어옴 그래서 삭제 KHS
	begin
  	if Trim(cxTSearchMainTel.Text) = '' then
    begin
      cxTSearchMainTel.SetFocus;
      Exit;
    end;

    if ( StrToIntDef(Copy(cxTSearchMainTel.Text, 1, 1), -1) In [0..9] ) then
    begin
      // 대표번호로 조회..
			if not Func_KeyNumberList_Search then Exit
		end else
    begin
      if Length(Trim(cxTSearchMainTel.Text)) >= 1 then
      begin
        // 지사명으로 조회..  CDS. 080818.
  			if not proc_BrNameList_Search then Exit;
      end;
    end;
  end;
end;

procedure TFrm_JON01.cxTSearchMainTelMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
Var i : Integer;
begin
	SetDebugeWrite('JON01.cxTSearchMainTelMouseDown');
  if Trim(cxTSearchMainTel.Text) = '' then
  begin
    lst_BRList.Items := cboBranch.Properties.Items;
    searchBRlist.Clear;
    for i := 0 to lst_BRList.Items.Count - 1 do
			searchBRlist.Add(inttostr(i));
  end;
  if lst_BRList.Items.Count > 30 then
    lst_BRList.Height := 500
  else
    lst_BRList.Height := lst_BRList.Items.Count * 18;
  lst_BRList.Visible := True;

  if PnlSuggest.Visible then
  begin
    PnlSuggest.Visible := False;
    AdvGridSj.ShowSelection := False;
    PnlSuggest.Caption := '';
	end;
end;

procedure TFrm_JON01.cxTSearchMainTelMouseLeave(Sender: TObject);
begin
  if Not cxTSearchMainTel.Focused then
    pSetSearchMainTel(False);
end;

procedure TFrm_JON01.cxTSearchMainTelMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
begin
  pSetSearchMainTel(True);
end;

procedure TFrm_JON01.cxtStartXvalChange(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxtStartYvalPropertiesChange');
	tmrXYChange.Tag := 0;  // 출발지
  tmrXYChange.Enabled := True;
end;

procedure TFrm_JON01.cxtStartXvalClick(Sender: TObject);
begin
	if (GT_USERIF.ID = 'sntest') or (GT_USERIF.ID = '11 9') or (GT_USERIF.ID = 'mjj1982') or
		 (GT_USERIF.ID = 'jhg114') or (GT_USERIF.ID = 'ysijun') then
	begin
		Clipboard.AsText := lblStartAreaName.Text + '-' +  cxtStartAreaDetail.Text + '-' + cxtStartXval.Text + '-' + cxtStartYval.Text;
	end;
end;

procedure TFrm_JON01.cxtStartYvalPropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxtStartYvalPropertiesChange');
  tmrXYChange.Tag := 0;  // 출발지
  tmrXYChange.Enabled := True;
end;

procedure TFrm_JON01.cxTxtBrNameCaptionMouseEnter(Sender: TObject);
begin
  cxTxtBrNameCaption.Visible := False;
  // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.
end;

procedure TFrm_JON01.edtCuNameKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	TcxTextEdit(Sender).Text := Enc_Control(TcxTextEdit(Sender).Text);
end;

procedure TFrm_JON01.edtMileMemoKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if key = vk_Return then btnMileOut.SetFocus;
end;

procedure TFrm_JON01.edtPostPayEnter(Sender: TObject);
begin
  LblPostPay.Visible := False;
end;

procedure TFrm_JON01.edtPostPayExit(Sender: TObject);
begin
  SetDebugeWrite('JON01.edtPostPayExit');
  LblPostPay.Visible := (edtPostPay.Value = 0); // 기사송금 입력 잔상.
//-  edtPostPay.Refresh;

  if edtPostPay.Value > curRate.Value then
  begin
    if (cbbPayMethod.Text <> PAY_METHOD_BUSAN) and (cbbPayMethod.Text <> PAY_METHOD_BUSAN2K) And
       (cbbPayMethod.Text <> PAY_METHOD_BUSAN3K) then
      edtPostPay.Value := curRate.Value;
  end;

  if edtPostPay.Value = 0 then
      PostTime := POST_TIME_NOPAY;
end;

procedure TFrm_JON01.edtPostPayFocusChanged(Sender: TObject);
begin
  LblPostPay.Visible := ( Not edtPostPay.Focused ) And (edtPostPay.Value = 0);
end;

procedure TFrm_JON01.edtPostPayKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.edtPostPayKeyDown');
  if Ord(Key) = VK_RETURN then
  begin
    if edtPostPay.Value < 1000 then
    begin
      edtPostPay.Value := edtPostPay.Value * 1000;
    end;

		if meoBigo.Visible = True then
      meoBigo.SetFocus
    else
			meoBigo2.SetFocus;
  end;
end;

procedure TFrm_JON01.edtPostPayKeyPress(Sender: TObject; var Key: Char);
begin
{	if (key in ['0'..'9', #13, #8]) then
	else
		Key := #0;   }
	if (Key = '-') or (Key = 'e') or (Key = 'E') then
		Key := #0;
end;

procedure TFrm_JON01.edtPostPayPropertiesChange(Sender: TObject);
begin
  if pnlShare.Visible then Exit;

  SetDebugeWrite('JON01.edtPostPayPropertiesChange');
  if ( Not edtPostPay.Focused ) then
  begin
    LblPostPay.Visible := (edtPostPay.Value = 0); // 기사송금 입력 잔상.
//-    edtPostPay.Refresh;
  end;

  AppendPostDesc;
end;

procedure TFrm_JON01.edtWkFAgeKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if key = VK_RETURN then edtWkTAge.SetFocus;
end;

procedure TFrm_JON01.edtWkTAgeKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if key = VK_RETURN then btnWkAgeClose.Click;
end;

procedure TFrm_JON01.edt_CardMemoEnter(Sender: TObject);
begin
  cxLCuCCMemoFlg1.Visible := False;
end;

procedure TFrm_JON01.edt_CardMemoExit(Sender: TObject);
begin
  cxLCuCCMemoFlg1.Visible := (edt_CardMemo.Text = '') // 기사메모 입력 잔상.
end;

procedure TFrm_JON01.edt_CardMemoFocusChanged(Sender: TObject);
begin
  cxLCuCCMemoFlg1.Visible := ( Not edt_CardMemo.Focused ) And (edt_CardMemo.Text = '');
end;

procedure TFrm_JON01.edt_CardMemoKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if fCheckMaxLength(edt_CardMemo, 300) then Key := 0;
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);	
end;

procedure TFrm_JON01.edt_CardMemoPropertiesChange(Sender: TObject);
begin
  if ( Not edt_CardMemo.Focused ) then
		cxLCuCCMemoFlg1.Visible := (edt_CardMemo.Text = ''); // 기사메모 입력 잔상.

	if edt_CardMemo.Lines.Count <= 1 then
  begin
    edt_CardMemo.Top := meoCuWorMemo.Top + meoCuWorMemo.Height + 2;
		edt_CardMemo.Height := 29;
    BtnSimMemo.Visible := False;
  end else
  begin
    edt_CardMemo.Top := meoCuWorMemo.Top;
		edt_CardMemo.Height := meoCuWorMemo.Height + 29 + 2;
    BtnSimMemo.Visible := True;
  end;
end;

procedure TFrm_JON01.edt_EndDetail_UpdateKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if Key = vk_Return then btn_EndDetail_Update.Click;
end;

procedure TFrm_JON01.FormActivate(Sender: TObject);
Var iSel : Integer;
begin
	SetDebugeWrite('JON01.FormActivate');
  cxLblActive.Color := GS_ActiveColor;
  cxLblActive.Visible := True;

//	if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//		Log('JON01-FormActivate-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS

	GS_JON01_LASTACTIVE := Self.Tag;      //POI창이 뜬 본체를 확인하기 위한 선언
	if GS_JON01_LASTACTIVE <> Frm_JON30.Tag then   //POI창이 뜬 본체가 아니면 검색결과 클리어 20191126 KHS
	begin
//		if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//			Log('JON01-Grid_Init Grid Clear', LOGDATAPATHFILE);  //천안로그 20191125 KHS

		Frm_JON30.Grid_Init('meoStartArea',1);
		Frm_JON30.Grid_Init('meoStartArea',2);
		Frm_JON30.Grid_Init('meoStartArea',3);
		Frm_JON30.Grid_Init('meoStartArea',4);
		Frm_JON30.Grid_Init('meoEndArea',1);
		Frm_JON30.Grid_Init('meoEndArea',2);
		Frm_JON30.Grid_Init('meoEndArea',3);
		Frm_JON30.Grid_Init('meoEndArea',4);
		Frm_JON30.Grid_Init('meoViaArea',1);
		Frm_JON30.Grid_Init('meoViaArea',2);
		Frm_JON30.Grid_Init('meoViaArea',3);
		Frm_JON30.Grid_Init('meoViaArea',4);
	end;

  if Not pJON01Dock.bUNDock then
  begin
    for iSel := 0 to Frm_Main.cxPageControl1.PageCount - 1 do
		begin
      if Frm_Main.cxPageControl1.Pages[iSel].Tag = Jon03Tag then
      begin
        Frm_Main.cxPageControl1.ActivePageIndex := iSel;
      end;
		end;
  end;

  if Assigned(Frm_JON011) then
  begin
		if ( Frm_JON011.Showing ) And ( gsCuTelHint <> '' ) then
    begin
      if Frm_Main.JON01MNG[Self.Tag].Dock then
      begin
				Frm_JON011.Left := Frm_JON00.Left - (Frm_JON011.Width + 1);
				Frm_JON011.Top  := Frm_JON00.Top - 40;
      end else
      begin
        Frm_JON011.Left := Self.Left - (Frm_JON011.Width + 1);
				Frm_JON011.Top  := Self.Top - 40;
      end;

      Frm_JON011.Tag := Self.Tag;
			Frm_JON011.lb_CuctName.Caption := edtCuName.Text;
      Frm_JON011.meoCuCCMemoS .Text := meoCuCCMemo.Text;
      Frm_JON011.meoCuWorMemoS.Text := meoCuWorMemo.Text;
      Frm_JON011.mmoCbMemoS.   Text := mmoCbMemo.Text;

      Frm_JON011.FormResize(Nil);

      Frm_JON011.bChkTime := True;
      if GS_JON01_GROUPMOVE then
        Frm_JON011.TmrChkTag.Enabled := True;
    end;
  end;

  if Assigned(Frm_Main.Frm_JON020[Self.Tag]) And ( Frm_Main.JON020MNG[Self.Tag].CreateYN ) then
  begin
    Frm_Main.Frm_JON020[Self.Tag].bChkTime := True;
    if GS_JON01_GROUPMOVE then
      Frm_Main.Frm_JON020[Self.Tag].Enabled := True;
  end;
end;

procedure TFrm_JON01.FormCreate(Sender: TObject);
const
  TabInc: LongInt = 0;

Var sTitle: string;
    i : Integer;
    Ime: String;
    ii: Integer;
begin
	SetDebugeWrite('JON01.FormCreate');

  try
    // 한글인 경우에 ImeName가 공백이 아니면 사용자PC에서 한글 키가 안먹힐때가 있음. ImeName을 공백으로 넣어주면 무조건 적용
		for ii := 0 to ComponentCount - 1 do
    begin
      if Components[ii] is TEdit then
				(Components[ii] as TEdit).ImeName := ''
			else
			if Components[ii] is TcxDateEdit then
			begin
				(Components[ii] as TcxDateEdit).Properties.DisplayFormat := 'yyyy/mm/dd';
				(Components[ii] as TcxDateEdit).Properties.EditFormat    := 'yyyy/mm/dd';
			end
			else
			if Components[ii] is TcxMemo then
			begin
				(Components[ii] as TcxMemo).Properties.ImeMode := imSHanguel;
			end;
    end;
  except

  end;

  try
  	// 대기시간별 대기요금 만들기..
    sTitle := '00:30' + ' (시간/분)까지 [' + '5,000' + '원]';
    Proc_WTRMenuCreate(sTitle, 'WaitTmR1', 5000);
    sTitle := '01:00' + ' (시간/분)까지 [' + '10,000' + '원]';
    Proc_WTRMenuCreate(sTitle, 'WaitTmR2', 10000);
    sTitle := '01:30' + ' (시간/분)까지 [' + '15,000' + '원]';
    Proc_WTRMenuCreate(sTitle, 'WaitTmR3', 15000);
    sTitle := '02:00' + ' (시간/분)까지 [' + '20,000' + '원]';
    Proc_WTRMenuCreate(sTitle, 'WaitTmR4', 20000);
    sTitle := '05:00' + ' (시간/분)까지 [' + '25,000' + '원]';
    Proc_WTRMenuCreate(sTitle, 'WaitTmR5', 25000);
    sTitle := '10:00' + ' (시간/분)까지 [' + '100,000' + '원]';
    Proc_WTRMenuCreate(sTitle, 'WaitTmR6', 100000);

    Lbl_Charge.Caption := '';
    Lbl_Distance.Caption := '';

    gbRQAList.Left := 3;
    gbRQAList.Top := 56;

    for i := 0 to RQAListView.ColumnCount - 1 do
      RQAListView.Columns[i].DataBinding.ValueType := 'String';
    RQAListView.Columns[1].DataBinding.ValueType := 'Integer';
  	RQAListView.DataController.SetRecordCount(0);

    pnl_charge.Left := btn_ChargeSave.Left; // 요금조회 조건 표기. 하단쪽..
    pnl_charge.Top := 58;

    pnlRShare.Left := 5;
    pnlRShare.Top  := 6;

    pnlShare.Left := 10;
    pnlShare.Top  := 584;

    PnlWkJi.Left := 450;
    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height + 25
                                                else PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height;

  //-  BtnSR.Left := pnl_charge.Left + pnl_charge.Width - ( BtnSR.Width + 2);
  //-  BtnSR.Top  := pnl_charge.Top + 1;

  	SCboLevelSeq := TStringList.Create;

    //라우팅업체 설정(호전환)   // 테스트 차 임시 막아놓음.
    if GT_USERIF.RouteMS <> '' then
			if (UpperCase(GT_USERIF.RouteMS)[1] in ['M', 'S']) then
      begin
        cxBtnHoTrans.Enabled := True;
      end;

    pSetCuTelLabel(0);
    pSetSearchMainTel(False);

    // 수정화면에서, 사용하는 오더정보를 보여준다.
    cxMeoOrderUpInfo.Text := '';

    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
    begin
//      Self.Width := 410;

      cxGBSearch.Left := 6;
      cxGBSearch.Top := 82;
      cxGBSearch.Width := 393;

      lst_BRList.Left := 82;
      lst_BRList.Top := 55;

      shaPrcMsg.left := 59;
      shaPrcMsg.Top := 114;

      pnlNewCustYN.Left := 4;    // 신규 고객 멘트
      pnlNewCustYN.Top := 30;
      pnlNewCustYN.Width := 391;

      pnlBrNoMent.Left := 4;    // 지사별 멘트를 보여준다.
      pnlBrNoMent.Top := 56;
      pnlBrNoMent.Width := 391;

    	// DNIS 정보 추가. 2011.05.17 CDS.
    	shrDNIS_DSP.Left := 0;
    	shrDNIS_DSP.Top  := 65;
      shrDNIS_DSP.Width := 352;
    end else
    begin
//      Self.Width := 607;

      cxGBSearch.Left := 7;
      cxGBSearch.Top := 67;
      cxGBSearch.Width := 587;

      lst_BRList.Left := 277;
      lst_BRList.Top := 59;

      shaPrcMsg.left := 179;
      shaPrcMsg.Top := 114;

      pnlNewCustYN.Left := 4;
      pnlNewCustYN.Top := 56;
      pnlNewCustYN.Width := 589;

      pnlBrNoMent.Left := 4; // 지사별 멘트를 보여준다.
      pnlBrNoMent.Top := 31;
      pnlBrNoMent.Width := 589;

    	// DNIS 정보 추가. 2011.05.17 CDS.
    	shrDNIS_DSP.Left := 0;
    	shrDNIS_DSP.Top  := 65;
      shrDNIS_DSP.Width := 352;
    end;

    cxGBSearch.Visible := False;
    lst_BRList.Visible := False;
   	shrDNIS_DSP.Visible := False;

    InitializeCriticalSection(CS);

    // CID 조회인지 설정을 한다.  Value:CID
    cxLblCIDUseFlg.Hint := '';

    // 접수번호 조회 인지 설정을 한다. Value:CONFSLIP
    cxLblConfSlipUseFlg.Hint := '';

    // 수정버튼 위치 설정.
    btnCmdUpdSave.Left  := btnCmdQuestion.Left;
    btnCmdUpdSave.Top   := btnCmdQuestion.Top;

    cxTxtBrNameCaption.Top := cboBrOnly.Top; // 수정시에 지사명, 대표번호 크게 보여줌.
    cxTxtBrNameCaption.Left := cboBrOnly.Left;

    // 고객 검색 그리드
  	cxCustView.DataController.SetRecordCount(0);
    for i := 0 to cxCustView.ColumnCount - 1 do
      cxCustView.Columns[i].DataBinding.ValueType := 'String';

    lcsActiveEdit := ''; // 활성화 된 출발지, 도착지 Edit 구분을 저장.

    glsMapRltVal := TStringList.Create;  // 출/도착지 조회 결과값을 매칭 점수 저장.

    if GS_PRJ_AREA = 'O' then
      btnPickupInsert.Visible := (GT_USERIF.SA = '02') or (GT_USERIF.SA = '09') or (GT_USERIF.PickUp = '1');

		// 접수화면의 기본 컨트롤을 초기화 한다.
		// False : 컨트롤초기화 안함. True : 지사코드 재로드 한다.
  	for i := 2 to 5 do
  	begin
			BtnViaLock[i] := TAdvGlowButton.create(GbViaArea);
			BtnViaLock[i].Name := 'BtnViaLock' + inttostr(i);
			BtnViaLock[i].Parent := GbViaArea;
			BtnViaLock[i].Left := BtnViaLock1.Left;
			BtnViaLock[i].Height := BtnViaLock1.Height;
			BtnViaLock[i].Width := BtnViaLock1.Width;
			BtnViaLock[i].Tag := i;
			BtnViaLock[i].Images := cxImgLock;
			BtnViaLock[i].Style := bsCheck;
			BtnViaLock[i].Appearance := BtnViaLock1.Appearance;
			if i = 2 then
				BtnViaLock[i].Top := BtnViaLock1.Top + ( BtnViaLock1.Height + 2 )
			else
				BtnViaLock[i].Top := BtnViaLock[i-1].Top + ( BtnViaLock1.Height + 2 );
			BtnViaLock[i].Visible := True;
			BtnViaLock[i].Caption := '';
			BtnViaLock[i].Hint := 'F4)잠금';
			BtnViaLock[i].ShowHint := True;
			BtnViaLock[i].OnClick := BtnViaLock1Click;

			meoViaArea[i] := TcxMemo.create(GbViaArea);
			meoViaArea[i].Name := 'meoViaArea' + inttostr(i);
  		meoViaArea[i].Parent := GbViaArea;
  		meoViaArea[i].Left := meoViaArea1.left;
  		meoViaArea[i].Height := meoViaArea1.Height;
  		meoViaArea[i].Width := meoViaArea1.Width;
//      meoViaArea[i].Color := meoViaArea1.Color;
      meoViaArea[i].TabStop := meoViaArea1.TabStop;
  		meoViaArea[i].Tag := i;
  		meoViaArea[i].Text := '';
   		meoViaArea[i].Properties.WantTabs := meoViaArea1.Properties.WantTabs;
  		meoViaArea[i].OnEnter   := meoViaArea1Enter;
  		meoViaArea[i].OnKeyDown := meoViaArea1KeyDown;
  		meoViaArea[i].OnKeyUp   := meoViaArea1KeyUp;
  		meoViaArea[i].OnExit    := meoViaArea1Exit;
  		meoViaArea[i].Properties.OnChange := meoViaArea1PropertiesChange;
//  		meoViaArea[i].Properties.Alignment.Horz := meoViaArea1.Properties.Alignment.Horz;
//  		meoViaArea[i].Properties.Alignment.Vert := meoViaArea1.Properties.Alignment.Vert;

  		if i = 2 then
  			meoViaArea[i].Top := meoViaArea1.Top + ( meoViaArea1.Height + 2 )
  		else
  			meoViaArea[i].Top := meoViaArea[i-1].Top + ( meoViaArea1.Height + 2 );

  		meoViaArea[i].Visible := True;

  		cxViaAreaName[i] := TcxLabel.create(GbViaArea);
  		cxViaAreaName[i].Name := 'cxViaAreaName' + inttostr(i);
  		cxViaAreaName[i].AutoSize := cxViaAreaName1.AutoSize;
  		cxViaAreaName[i].Parent := GbViaArea;
  		cxViaAreaName[i].Left := cxViaAreaName1.Left;
  		cxViaAreaName[i].Height := cxViaAreaName1.Height;
  		cxViaAreaName[i].Width := cxViaAreaName1.Width;
      cxViaAreaName[i].ParentColor := cxViaAreaName1.ParentColor;
   		cxViaAreaName[i].Style := cxViaAreaName1.Style;
      cxViaAreaName[i].TabStop := cxViaAreaName1.TabStop;
      cxViaAreaName[i].Transparent := cxViaAreaName1.Transparent;
  		cxViaAreaName[i].tag := i;
  		cxViaAreaName[i].Caption := '';
  		cxViaAreaName[i].Properties := cxViaAreaName1.Properties;

  		if i = 2 then
  			cxViaAreaName[i].Top := cxViaAreaName1.Top + ( cxViaAreaName1.Height)
  		else
  			cxViaAreaName[i].Top := cxViaAreaName[i-1].Top + ( cxViaAreaName1.Height);

  		cxViaAreaName[i].Visible := True;

  		BtnViaMinus[i] := TAdvGlowButton.create(GbViaArea);
  		BtnViaMinus[i].Name := 'BtnViaAdd' + inttostr(i);
  		BtnViaMinus[i].Parent := GbViaArea;
  		BtnViaMinus[i].Left := BtnViaMinus1.Left;
  		BtnViaMinus[i].Height := BtnViaMinus1.Height;
  		BtnViaMinus[i].Width := BtnViaMinus1.Width;
  		BtnViaMinus[i].Tag := i;
      BtnViaMinus[i].Picture := BtnViaMinus1.Picture;
      BtnViaMinus[i].Appearance := BtnViaMinus1.Appearance;
  		if i = 2 then
  			BtnViaMinus[i].Top := BtnViaMinus1.Top + ( BtnViaMinus1.Height + 2 )
  		else
  			BtnViaMinus[i].Top := BtnViaMinus[i-1].Top + ( BtnViaMinus1.Height + 2 );
  		BtnViaMinus[i].Visible := True;
  		BtnViaMinus[i].Caption := '';
  		BtnViaMinus[i].Hint := '삭제(F6)';
  		BtnViaMinus[i].ShowHint := True;
  		BtnViaMinus[i].OnClick := BtnViaMinus1Click;
  	end;

    Self.Tag := -1;
		FControlInitial(False, True);

		
{		if GS_FormType = 'Type1'  then
		begin
			if not FileExists(EXECDIRECTORY + 'Type1.xml') then
			begin
				ShowMessage('편집된 접수창을 찾을 수 없어 기본 디자인폼을 사용합니다');
//				GS_FormType := 'Normal';
				procFrmSizeChange('N', Self);
				exit;
			end;
			LoadJon01FormXML(EXECDIRECTORY + 'Type1.xml',0);
		end else
		if GS_FormType = 'Type2'  then 
		begin
			if not FileExists(EXECDIRECTORY + 'Type2.xml') then
			begin
				ShowMessage('편집된 접수창을 찾을 수 없어 기본 디자인폼을 사용합니다');
//				GS_FormType := 'Normal';
				procFrmSizeChange('N', Self);
				exit;
			end;
			LoadJon01FormXML(EXECDIRECTORY + 'Type2.xml',0) ;
		end else
		if GS_FormType = 'Normal' then procFrmSizeChange('N', Self) ;   }

		ControlClear(False);

		ViaNowTag := 1;   //현재 입력중인 경유지위치
  	ViaADDTag := 0;   //현재 추가한 경유지위치

  	FBigoList := TStringList.Create;
    FSpopList := TStringList.Create;
  	FEpopList := TStringList.Create;

    LoadBigoList;
  	LoadSpopList;
    LoadEpopList;

  	searchBRlist := TStringList.Create;

    LoadPayMethod;

    cxBubinView.DataController.SetRecordCount(0);
    for i := 0 to cxBubinView.ColumnCount - 1 do
      cxBubinView.Columns[i].DataBinding.ValueType := 'String';

    lsFirstShow := 0;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.FormDeactivate(Sender: TObject);
begin
  SetDebugeWrite('JON01.FormDeactivate');
  cxLblActive.Visible := False;
end;

procedure TFrm_JON01.FormDestroy(Sender: TObject);
begin
  DeleteCriticalSection(CS);
	FBigoList.Free;
  FSpopList.Free;
  FEpopList.Free;

	searchBRlist.Free;
 	FreeAndNil(SCboLevelSeq);
  Frm_JON01 := Nil;
end;

procedure TFrm_JON01.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if ((ssAlt in Shift) and (Key = VK_F4)) then
	begin
		Key := 0;
		SetDebugeWrite('JON01.FormKeyDown->VK_F4 + VK_F4');
		btnCmdExit.Click;
	end else
	if (Key = VK_ESCAPE) then
	begin
		SetDebugeWrite('JON01.FormKeyDown->VK_ESCAPE');
		btnCmdExit.OnClick(btnCmdExit); // 종료
	end;
end;

procedure TFrm_JON01.FormShow(Sender: TObject);
begin
	SetDebugeWrite('JON01.FormShow');
	try
		cxReEndArea.Enabled := False;

		//경남연합만 도착지 상세지명 수정 이벤트 적용
		if (((GS_PRJ_AREA = 'O') and (GT_USERIF.ShareNo = 'G33')) or (GT_USERIF.BR = 'B100')) then cxReEndArea.Enabled := True;

		if Frm_Main.JON01MNG[Self.Tag].Dock then
		begin
      Self.Left := 0;
      Self.Top := 0;
    end;
    SetWindowPos(Self.handle, HWND_TOPMOST, Self.Left, Self.Top, Self.Width, Self.Height, 0);

		if ( GS_JON01_GROUPMOVE ) And ( Not Frm_Main.JON01MNG[Self.Tag].Dock ) And ( GS_JON01_TAB = 0 ) then
    begin
      if ( Assigned(MagneticWnd) ) then
      begin
        // Snapweite aktualisieren
        MagneticWnd.SnapWidth := 15;
        //frmMain als Parent Form zum andocken zuweisen
        MagneticWnd.AddWindow(Self.Handle, 0, MagneticWndProc);
      end else
      begin
        MagneticWnd := TMagnetic.Create;
        // Snapweite aktualisieren
        MagneticWnd.SnapWidth := 15;
        //frmMain als Parent Form zum andocken zuweisen
        MagneticWnd.AddWindow(Self.Handle, 0, MagneticWndProc);
      end;
    end;

    if ( GS_FormSSYN = 'y' ) And ( GS_FormSSET = 'y') then chkMini.Enabled := False
                                                      else chkMini.Enabled := True;

    gbEnter := False;

    ChkMini.Checked := Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 ;

		btnCashSave.visible := False;
		btnMileSave.visible := False;

    if GT_OCX <> '' then
		begin
      BtnCall.Visible := True;
      BtnCall2.Visible := True;

      if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
      begin
        cxtCuTel.Width := 157;
        cxImage1.Left  := 181;

        cxtCuTel2.Width := 157;
      end else
      begin
        cxtCuTel.Width := 110;
        cxImage1.Left  := 133;

        cxtCuTel2.Width := 84;
      end;
    end else
    begin
      BtnCall.Visible := False;
      BtnCall2.Visible := False;

      if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
      begin
        cxtCuTel.Width := 180;
        cxImage1.Left  := 204;

        cxtCuTel2.Width := 180;
      end else
      begin
        cxtCuTel.Width := 134;
        cxImage1.Left  := 158;

        cxtCuTel2.Width := 132;
      end;
    end;

    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
    begin
      PnlKTPOIYN.Left := 038;
      PnlKTPOIYN.Top  := 215;
    end else
    begin
      PnlKTPOIYN.Left := 298;
      PnlKTPOIYN.Top  := 215;
    end;

    giArea_Charge_YN := Area_Charge_YN; // 공유제어 권한으로 인해 별도 변수 지정

    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
    begin
//      meoBigo3.Left := 4;
//      meoBigo3.Width := 358;
//      meoBigo3.Top := 80;
//      meoBigo3.Height := 37;
//
//      LbmeoBigo3.Left := 11;
//      LbmeoBigo3.Top  := 84;

      if GT_USERIF.HD = 'A1531' then
        LbmeoBigo3.Caption := '적요③ ( 기사에게 안보임 )' + #13#10 + '  ▶ 결재정보 기재'
      else
        LbmeoBigo3.Caption := '적요③ ( 기사에게 안보임 )' + #13#10 + '  - 다음날 일마감후 자동 삭제됨';
    end else
    begin
//      meoBigo3.Left := 4;
//      meoBigo3.Width := 521;
//      meoBigo3.Top := 82;
//      meoBigo3.Height := 35;
//
//      LbmeoBigo3.Top := 91;
//      LbmeoBigo3.Left := 11;

      if GT_USERIF.HD = 'A1531' then
        LbmeoBigo3.Caption := '적요③ ( 기사에게 안보임 ) ▶ 결재정보 기재'
      else
        LbmeoBigo3.Caption := '적요③ ( 기사에게 안보임 ) - 다음날 일마감후 자동 삭제됨';
    end;

    if TCK_USER_PER.JON_CUSTMEMO2 = '1' then
      edt_CardMemo.Properties.ReadOnly := False
    else
      edt_CardMemo.Properties.ReadOnly := True;

    if TCK_USER_PER.JON_CUSTPLUS = '1' then
      BtnCustAdd.Enabled := True
    else
      BtnCustAdd.Enabled := False;

  	if TCK_USER_PER.JON_CustLevel = '1' then
  		cboCuLevel.Enabled := True
  	else
  		cboCuLevel.Enabled := False;

    if GS_CALLMU_Use = 'y' then BtnOptionCallMu.Visible := True
                           else BtnOptionCallMu.Visible := False;

    if giArea_Charge_YN = 'y' then
    begin
      LbDriverCharge.Visible := True;
  		if Area_Edit_Charge_YN = 'y' then
      begin
  			cxDriverCharge.Enabled := True;
        cxDriverCharge.Visible := True;
  		end else
      begin
        cxDriverCharge.Enabled := False;
  			cxDriverCharge.Visible := True;
  		end;
    end else
    begin
  		LbDriverCharge.Visible := False;
      cxDriverCharge.Enabled := False;
  		cxDriverCharge.Visible := False;
    end;
	
    if Frm_Main.JON01MNG[Self.Tag].Dock then
    begin
      ChkGroup.Visible := False;
      ChkMini.Visible := False;
      BtnFix.Visible := False;
			btnNew.Visible := False;
      btnClose.Visible := False;
      PnlTitle.Cursor := crDefault;
      lblCuBubinName.Cursor := crDefault;
    end else
    begin
      ChkGroup.Visible := True;
      ChkMini.Visible := True;
      BtnFix.Visible := True;
      btnNew.Visible := True;
      btnClose.Visible := True;
      PnlTitle.Cursor := crSizeAll;
      lblCuBubinName.Cursor := crSizeAll;
    end;	

    BtnQRate.Visible := True;
    BtnQRate.Tag := 0;
		Init_AdvGridSj;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.LoadBigoList;
var
  I: Integer;
  Menu: TMenuItem;
begin
  SetDebugeWrite('JON01.LoadBigoList');
  try
    FBigoList.Clear;

    FBigoList.Add('전화요망=전화요망');
    FBigoList.Add('독촉전화=독촉전화');
    FBigoList.Add('우수고객=우수고객');
    FBigoList.Add('리콜=리콜');

    FBigoList.AddStrings(GS_UserBigoList1);

    while pmBigo.Items.Count > 2 do
    begin
      if pmBigo.Items[0].Caption = '-' then
        Break;

      Menu := pmBigo.Items[0];
      pmBigo.Items.Delete(0);
      Menu.Free;
    end;

    for I := 0 to FBigoList.Count - 1 do
    begin
      try
        Menu := TMenuItem.Create(pmBigo);
  //      Menu.Name := 'mniUser' + IntToStr(I);
        Menu.Caption := FBigoList.Names[I];
        Menu.Enabled := True;
        Menu.Visible := True;
        Menu.OnClick := mniUserClick;
        Menu.Tag     := i;
        pmBigo.Items.Insert(I, Menu);
      except on E: Exception do
        ShowMessage(E.Message);
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.meoBigo2Exit(Sender: TObject);
begin
  LbmeoBigo2.Visible := (meoBigo2.Text = '') // 적요2 입력 잔상.
end;

procedure TFrm_JON01.meoBigo2FocusChanged(Sender: TObject);
begin
	LbmeoBigo2.Visible := ( Not meoBigo2.Focused ) And (meoBigo2.Text = '');
end;

procedure TFrm_JON01.meoBigo2KeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if fCheckMaxLength(meoBigo2, 1996) then Key := 0;
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);	
end;

procedure TFrm_JON01.meoBigo2PropertiesChange(Sender: TObject);
begin
	if ( Not meoBigo2.Focused ) then
		lbmeoBigo2.Visible := (meoBigo2.Text = ''); // 적요2 입력 잔상.
	meoBigo2.Text := Enc_Control(meoBigo2.Text);	
end;

procedure TFrm_JON01.meoBigo3Exit(Sender: TObject);
begin
  LbmeoBigo3.Visible := (meoBigo3.Text = '') // 적요3 입력 잔상.
end;

procedure TFrm_JON01.meoBigo3FocusChanged(Sender: TObject);
begin
  LbmeoBigo3.Visible := ( Not meoBigo3.Focused ) And (meoBigo3.Text = '');
end;

procedure TFrm_JON01.meoBigo3KeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if fCheckMaxLength(meoBigo3, 1996) then Key := 0;
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);	
end;

procedure TFrm_JON01.meoBigo3PropertiesChange(Sender: TObject);
begin
  if ( Not meoBigo3.Focused ) then
    lbmeoBigo3.Visible := (meoBigo3.Text = ''); // 적요2 입력 잔상.
end;

procedure TFrm_JON01.meoBigoEnter(Sender: TObject);
begin
  if TcxMemo(Sender).Name = 'meoBigo'  then
  begin
		 LbmeoBigo.Visible := False;
     if PnlWkJi.Visible then PnlWkJi.Visible := False;
  end else
	if TcxMemo(Sender).Name = 'meoBigo2' then LbmeoBigo2.Visible := False
  else
  if TcxMemo(Sender).Name = 'meoBigo3' then LbmeoBigo3.Visible := False;

  pnl_charge.Visible := False;
  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then
  begin
    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height + 25
                                                else PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height;
  end;

  FCurrBigo := TcxMemo(Sender);
end;

procedure TFrm_JON01.meoBigoExit(Sender: TObject);
begin
	lbmeoBigo.Visible := (meoBigo.Text = ''); // 적요1 입력 잔상.
  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
end;

procedure TFrm_JON01.meoBigoFocusChanged(Sender: TObject);
begin
  LbmeoBigo.Visible := ( Not meoBigo.Focused ) And (meoBigo.Text = '');
end;

procedure TFrm_JON01.meoBigoKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.meoBigoKeyDown');
  try
    if Ord(Key) = VK_RETURN then
    begin
			if (Pos('수정', Self.Caption) = 0 ) then
				btnCmdJoin.SetFocus
      else
				btnCmdUpdSave.SetFocus;
    end;

    if Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        //      VK_F6     : if rb_search.Enabled then rb_Search.OnClick(rb_Search);
        Vk_F7: //if rb_Modify.Enabled then rb_Modify.OnClick(rb_Modify);              // 수정
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave);
				Vk_F8: //whbtn_Cancel.OnClick(whbtn_Cancel);                                   // 종료
				begin
					SetDebugeWrite('JON01.meoBigoKeyDown->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
				Vk_F9:
					begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then
          begin
						if meoBigo.CanFocus then
            begin
              meoBigo.SetFocus;
              Application.ProcessMessages;
            end;
            btnCmdWait.OnClick(btnCmdWait); // 대기
          end;
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
          if btnCmdQuestion.Enabled then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
        VK_ESCAPE: // ESC 키
          begin
            if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
            begin
              if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
                and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
                and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
							begin
								SetDebugeWrite('JON01.meoBigoKeyDown->VK_ESCAPE');
								btnCmdExit.OnClick(btnCmdExit); // 종료
							end;
						end;
          end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.meoBigoKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if fCheckMaxLength(meoBigo, 296) then Key := 0;
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);	
end;

procedure TFrm_JON01.meoBigoPropertiesChange(Sender: TObject);
begin
	if ( Not meoBigo.Focused ) then
    lbmeoBigo.Visible := (meoBigo.Text = ''); // 적요1 입력 잔상.
end;

procedure TFrm_JON01.meoCuCCMemoEnter(Sender: TObject);
begin
  cxLCuCCMemoFlg.Visible := False;
end;

procedure TFrm_JON01.meoCuCCMemoExit(Sender: TObject);
begin
  cxLCuCCMemoFlg.Visible := (meoCuCCMemo.Text = '') // 상담메모 입력 잔상.
end;

procedure TFrm_JON01.meoCuCCMemoFocusChanged(Sender: TObject);
begin
  cxLCuCCMemoFlg.Visible := ( Not meoCuCCMemo.Focused ) And (meoCuCCMemo.Text = '');
end;

procedure TFrm_JON01.meoCuCCMemoKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if fCheckMaxLength(meoCuCCMemo, 596) then Key := 0;
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);	
end;

procedure TFrm_JON01.meoCuCCMemoPropertiesChange(Sender: TObject);
begin
  if ( Not meoCuCCMemo.Focused ) then
    cxLCuCCMemoFlg.Visible := (meoCuCCMemo.Text = ''); // 상담메모 입력 잔상.
end;

procedure TFrm_JON01.meoCuWorMemoEnter(Sender: TObject);
begin
  cxLCuWorMemoFlg.Visible := False;
end;

procedure TFrm_JON01.meoCuWorMemoExit(Sender: TObject);
begin
  cxLCuWorMemoFlg.Visible := (meoCuWorMemo.Text = '') // 기사메모 입력 잔상.
end;

procedure TFrm_JON01.meoCuWorMemoFocusChanged(Sender: TObject);
begin
  cxLCuWorMemoFlg.Visible := ( Not meoCuWorMemo.Focused ) And (meoCuWorMemo.Text = '');
end;

procedure TFrm_JON01.meoCuWorMemoKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if fCheckMaxLength(meoCuWorMemo, 596) then Key := 0;
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);	
end;

procedure TFrm_JON01.meoCuWorMemoPropertiesChange(Sender: TObject);
begin
  if ( Not meoCuWorMemo.Focused ) then
    cxLCuWorMemoFlg.Visible := (meoCuWorMemo.Text = ''); // 기사메모 입력 잔상.
end;

procedure TFrm_JON01.meoEndAreaEnter(Sender: TObject);
begin
	SetDebugeWrite('JON01.meoEndAreaEnter');
  try
    cxLEndAreaFlag.Visible := False;

    locNowControlName := 'meoEndArea'; // 현재 활성화된 컨트롤 명.
    lcsActiveEdit := locNowControlName;
    gmap_forword := '';

    if Assigned(Frm_JON30) then
    begin
      if ( Frm_JON30.Tag <> Self.Tag ) And ( Trim(TcxTextEdit(Sender).Text) <> '' )  then
      begin
        if ( Frm_JON30.AdvStringGrid5.Cells[0,1] <> '' ) Or
           ( Frm_JON30.AdvStringGrid4.Cells[0,0] <> '' ) Or
           ( Frm_JON30.AdvStringGrid6.Cells[0,0] <> '') then
        Hide_Panel(lcsActiveEdit, 0);
      end;
			//POI창 Tag 값 입력 확인용 천안로그 201191126 KHS
//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoEndAreaEnter-B-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS

			Frm_JON30.Tag := Self.Tag;

//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoEndAreaEnter-A-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS
		end;

    if  J30ShowE = True then
    begin
      Exit;
    end;

  //  if Assigned(Frm_JON30) and (cxLabel19.Caption = 'F4)수정') then     //  20130703  LYB  잠김 상태에서도 검색창 표시 (팀장님지시)
    if Assigned(Frm_JON30) then
    begin
      if GS_MAP_AREA_AUTOSHOW then
      begin
        Frm_JON30.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
        Frm_JON30.OnSelectedMap := SetEndAreaMap;
        if (not Frm_JON30.Visible) and (cxtEndXval.Text <> '') and (cxtEndYval.Text <> '') then
        begin
          lcsActiveEdit := locNowControlName;
					{if ( Frm_JON30.AdvStringGrid5.Cells[0,1] = '' ) and ( Frm_JON30.AdvStringGrid6.Cells[0,0] = '' ) and 
						 ( Frm_JON30.AdvStringGrid4.Cells[0,0] = '') then
					Hide_Panel(lcsActiveEdit,1) else }Hide_Panel(lcsActiveEdit,0);
				end;
      end else
			begin
        if (not Frm_JON30.Visible) and (cxtEndXval.Text <> '') and (cxtEndYval.Text <> '') then
        begin
          lcsActiveEdit := locNowControlName;
          Hide_Panel(lcsActiveEdit,0);
          Frm_JON30.chk_Map(False);
        end;
      end;

      if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
      try
        if Frm_JON31.Showing then
        begin
          Frm_JON31.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
          Frm_JON31.OnSelectedMap := SetEndAreaMap;
        end;
      except
        Frm_JON31.Close;
      end;
      gKWComp := '';
    end;
  Except
    on e: exception do
    begin
      Log('meoEndAreaEnter Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoEndAreaEnter Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.meoEndAreaExit(Sender: TObject);
begin
  SetDebugeWrite('JON01.meoEndAreaExit');
  cxLEndAreaFlag.Visible := (meoEndArea.Text = ''); // 도착지 입력 잔상.

  locNowControlName := ''; // 현재 활성화된 컨트롤 명.
  if Assigned(Frm_JON30) and (not (meoEndArea.Focused)) then
  begin
    gbCtrlVCancel := True;
    gbECtrlV := False;
    PnlCtrlV.Visible := False;
    Hide_Panel(lcsActiveEdit,1);
  end;
end;

procedure TFrm_JON01.meoEndAreaFocusChanged(Sender: TObject);
begin
  SetDebugeWrite('JON01.meoEndAreaFocusChanged');
  cxLEndAreaFlag.Visible := ( Not meoEndArea.Focused ) And (meoEndArea.Text = '');
end;

procedure TFrm_JON01.meoEndAreaKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
Var iRate : Integer;
begin
	SetDebugeWrite('JON01.meoEndAreaKeyDown');
	SetDebugeWrite('JON01-No[' + locKNum + '/' + IntToStr(self.Tag) + '/' + IntToStr(GS_JON01_TYPE) + '/' + IntToStr(GS_JON01_TAB) + '] ' 
	             + meoEndArea.Text );
	try
		if Assigned(Frm_JON30) then
		begin
			//POI창 Tag 값 입력 확인용 천안로그 201191126 KHS
//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoEndAreaKeyDown-B-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS

			Frm_JON30.Tag := Self.Tag;

//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-meoEndAreaKeyDown-A-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS
		end;
    lcsActiveEdit := 'meoEndArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
    sActieEdit := 'meoEndArea';

    // 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then  Exit;

		if Key = VK_RETURN then
    begin
      if not IsNotModifyPrice and (GT_CHARGE_CAL = 1) then
      begin
        // 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
        if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
        begin
          tmrThRealDis.Tag := 0;
          proc_dis_alculation(Self.Tag, True);
          if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                                 else begin
                                        iRate := func_search_charge;
                                        if Not gsMyMainRateNoChange then
                                        begin
                                          if BtnRaLock.Hint <> 'F4)잠금' then
																					begin
																						curRate.Value := iRate;
																						OrgRate := curRate.Value;
																					end
																					else
																					begin
																						if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
																						begin
																							if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
																							begin
																								tmLockMent.Enabled := False;
																								if ChkMini.Checked then
																								begin
																									lb_LockMent.Caption := '요금항목이 잠겨있습니다.';
																									pnl_LockMent.Width := 391;
																									imgLockMent.Visible := False;
																								end
																								else
																								begin
																									lb_LockMent.Caption := '요금항목이 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
																									pnl_LockMent.Width := 585;
																									imgLockMent.Visible := True;
																								end;
																								lb_LockMent.Font.Color := clYellow;
																								imgLockMent.left := 334;
																								pnl_LockMent.Top := GBTop5.Top + curRate.Top + curRate.Height;//417//193;//276;
																								pnl_LockMent.Left := 8;
																								pnl_LockMent.Color := clBlack;
																								if not pnl_LockMent.Visible then pnl_LockMent.Visible := True;
																								tmLockMent.Interval := 2000;
																								tmLockMent.Enabled := True;
																								BtnRaLock.Tag := 99; //한번 알림 뜨면 다시는 안뜨게 함.
																							end;
																						end;
																					end;
                                        end;
                                      end;
        end;
      end;
      Exit;
    end;

    if Key in [VK_DOWN, VK_UP] then
    begin
      Exit; // 그리드에 포커스 넘기는건 KeyUp Event에서 처리한다.
    end;

    gbSCtrlV := False;
    { TODO : Ctrl+V(붙여넣기)시 전검색단어 초기화-같은단어가들어오면검색이 안되는부분 붙여넣기시 허용 }
    if ( ssCtrl in Shift) and ( Key = Ord('V') ) then
    begin
      Frm_JON30.sPreSearchWord := '';
      gmap_forword := '';
      gbECtrlV := True;
    end else
      gbECtrlV := False;

    sAnsiSchTxt := meoEndArea.Text;

    if Key = VK_BACK then
    begin
      PnlPOISch.Visible := False;
      if ( BtnEdLock.Tag = 1 ) And ( BtnEdLock.Hint = 'F4)잠금' ) then
      begin
        if ( Pos('인근', meoEndArea.Text) = 0 ) And
           ( Pos('부근', meoEndArea.Text) = 0 ) And
           ( Pos('근처', meoEndArea.Text) = 0 ) then
        begin
          BtnEdLock.Hint := 'F4)수정';
          BtnEdLock.Tag  := 0;
          BtnEdLock.ImageIndex := 0;
          BtnEdLock.Down := False;
          Frm_JON30.N2.Enabled := True;
          Frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
          Frm_JON30.btnEPoiMove.Enabled := True;
          Frm_JON30.N7.Enabled := True;
          Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
          Frm_JON30.btnEPoiAMove.Enabled := True;
        end;
      end;

      if (Length(widestring(meoEndArea.Text)) = 1) and (BtnEdLock.Hint <> 'F4)잠금') then
      begin
        Frm_JON30.Grid_Init(lcsActiveEdit,1);
        Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
        GS_FULLWORD_CMP := '';
        Init_AdvGridSj;
      end else
  //    if (Length(meoEndArea.Text) <= 1) and (cxLabel19.Caption <> 'F4)잠금') then
      if (Length(sAnsiSchTxt) <= 1) then
      begin
        lblEndAreaName.Caption := '';
        cxtEndAreaDetail.Caption := '';
        cxReEndArea.Clear;

        lcsEnd1 := '';
        lcsEnd2 := '';
        lcsEnd3 := ''; // 도1, 도2, 도3

        lcsEndDocId := '';
        lcsEndCellSel := '';
        lcsEndSchWord := '';

        GS_Grid_DES := '';

        gJONEndChkXY.X := '';
        gJONEndChkXY.Y := '';
        gJONEndChkXY.GUIDE_X := '';
        gJONEndChkXY.GUIDE_Y := '';

        cxtEndXval.Text := '';
        cxtEndYval.Text := '';
        cxtEndGUIDEXval.Text := '';
        cxtEndGUIDEYval.Text := '';

        gKWComp := '';

        gmap_forword := '';
        GS_FULLWORD_CMP := '';

        Frm_JON30.Grid_Init(lcsActiveEdit,1);
        Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
        Hide_Panel(lcsActiveEdit,1);

        if BtnEdLock.Hint = 'F4)잠금' then
        begin
          BtnEdLock.Hint := 'F4)수정';
          BtnEdLock.Tag  := 0;
          BtnEdLock.ImageIndex := 0;
          BtnEdLock.Down := False;
          Frm_JON30.N2.Enabled := True;
          Frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
          Frm_JON30.btnEPoiMove.Enabled := True;
          Frm_JON30.N7.Enabled := True;
          Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
          Frm_JON30.btnEPoiAMove.Enabled := True;
        end;

        PnlSuggest.Visible := False;
        AdvGridSj.ShowSelection := False;
      end else
      if (Length(sAnsiSchTxt) <= 2) and (BtnEdLock.Hint <> 'F4)잠금') then
      begin
      end;
		end;

    if Ord(key) = VK_F4 then
    begin
      if BtnEdLock.Hint = 'F4)잠금' then
      begin
        BtnEdLock.Hint := 'F4)수정';
        BtnEdLock.Tag  := 0;
        BtnEdLock.ImageIndex := 0;
        BtnEdLock.Down := False;
        Frm_JON30.N2.Enabled := True;
        Frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
        Frm_JON30.btnEPoiMove.Enabled := True;
        Frm_JON30.N7.Enabled := True;
        Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
        Frm_JON30.btnEPoiAMove.Enabled := True;
      end else
      begin
        BtnEdLock.Hint := 'F4)잠금';
        BtnEdLock.Tag  := 0;
        BtnEdLock.ImageIndex := 1;
        BtnEdLock.Down := True;
        Frm_JON30.N2.Enabled := False;
        Frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
        Frm_JON30.btnEPoiMove.Enabled := False;
        Frm_JON30.N7.Enabled := False;
        Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
        Frm_JON30.btnEPoiAMove.Enabled := False;
      end;
      Exit;
    end else
    if Ord(key) = VK_F3 then
    begin
      Exit;
    end;

    if Ord(key) = VK_ESCAPE then  // ESC 키
    begin
      if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
      begin
        if (Trim(meoEndArea.Text) = '') then
        begin
          lblEndAreaName.Clear;
          cxtEndAreaDetail.Clear;
        end;

        if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
          and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
          and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
				begin
					SetDebugeWrite('JON01.meoEndAreaKeyDown->VK_ESCAPE');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
			end;
    end;
  Except
    on e: exception do
    begin
      Log('meoEndAreaKeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoEndAreaKeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.meoEndAreaKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
Var sAnsiEndTxt : AnsiString;
  procedure pJON03POISetFocus;
  begin
    if Frm_JON30.AdvStringGrid5.Cells[0,1] = '' then
    begin
      if Frm_JON30.AdvStringGrid4.Cells[0,0] = '' then
      begin
        if Frm_JON30.AdvStringGrid6.Cells[0,0] <> '' then
        begin
          Frm_JON30.AdvStringGrid5.ShowSelection := False;
          Frm_JON30.AdvStringGrid4.ShowSelection := False;
          Frm_JON30.AdvStringGrid6.ShowSelection := True;
          if Frm_JON30.AdvStringGrid6.CanFocus then
            Frm_JON30.AdvStringGrid6.SetFocus;
        end;
      end else
      begin
        Frm_JON30.AdvStringGrid5.ShowSelection := False;
        Frm_JON30.AdvStringGrid4.ShowSelection := True;
        Frm_JON30.AdvStringGrid6.ShowSelection := False;
        if Frm_JON30.AdvStringGrid4.CanFocus then
          Frm_JON30.AdvStringGrid4.SetFocus;
        Frm_JON30.AdvStringGrid4.FocusCell(0,0);
      end;
    end else
    begin
      Frm_JON30.AdvStringGrid5.ShowSelection := True;
      Frm_JON30.AdvStringGrid4.ShowSelection := False;
      Frm_JON30.AdvStringGrid6.ShowSelection := False;
      if Frm_JON30.AdvStringGrid5.CanFocus then
        Frm_JON30.AdvStringGrid5.SetFocus;
    end;
  end;
begin
	SetDebugeWrite('JON01.meoEndAreaKeyUp');
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);	
  try
    lcsActiveEdit := 'meoEndArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
		sActieEdit := 'meoEndArea';
    //cxLblEnd.Tag  := 0;  // 위치찾기 판넬이 떠잇을 경우엔 자동닫기 제한.

    if PnlSuggest.Visible then
      if PnlSuggest.Caption <> lcsActiveEdit then
      begin
        PnlSuggest.Visible := False;
        AdvGridSj.ShowSelection := False;
        PnlSuggest.Caption := lcsActiveEdit;
      end;

    // 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    //  if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then  Exit;
    if (Key = 39) or (Key = 35) or (Key = 36) then  Exit;

    if ( ssCtrl in Shift) and ( Key = VK_LEFT ) then
    begin
      if  ( meoEndArea.SelStart = 0 ) And ( PnlSuggest.Visible ) then
      begin
        pJON03POISetFocus;
      end;
      Exit;
    end;

    if Key = VK_LEFT then Exit;

    if Frm_Main.JON01MNG[Self.Tag].FrmGubun <> 1 then
    begin
      if Length(AnsiString(meoEndArea.Text)) > 60 then meoEndArea.Height := 39
                                                  else meoEndArea.Height := 26;
    end;

    if fCheckMaxLength(meoEndArea, 98) then Key := 0;

    if Length(AnsiString(meoEndArea.Text)) > 2 then
    begin
      sBHSAddr := '';
      sBHEAddr := '';
    end else
    begin
      J30ShowE := False;
      sBHSAddr := '';
      sBHEAddr := '';
    end;

    if ( Key = VK_DOWN ) And ( PnlSuggest.Visible ) then
    begin
      Key := 0;
      meoEndArea.SelStart := Length(meoEndArea.Text);
      if PnlSuggest.Visible then
      begin
        AdvGridSj.ShowSelection := True;
        if AdvGridSj.CanFocus then AdvGridSj.SetFocus;
      end;
      Exit;
    end else
    // 검색 그리드로 포커스 이동..
    if ( ( Key in [VK_DOWN, VK_UP] ) And ( Not PnlSuggest.Visible ) ) then
    begin
      pJON03POISetFocus;
    end else
		if Key = VK_RETURN then
    begin
//      // Enter를 쳤을때 검색이 안끝났으면 다시 재검색 해준다.
//      if PnlPOISch.Visible then
//      begin
//        gKWComp := '';
//        gbEnter := True;
//        if GS_SEARCH_UPDATE_OPEN then J30ShowS := False;
//        if J30ShowS = False then Proc_AreaSearchKDown_Added(Key);
//
//        PnlSuggest.Visible := False;
//        AdvGridSj.ShowSelection := False;
//        PnlSuggest.Caption := '';
//
//        Exit;
//      end;

      if Frm_JON30.Visible = True then
      begin
        if BtnEdLock.Hint <> 'F4)잠금' then       // 20130703  LYB
        begin
          if (GS_SEARCH_DEST_DONGSINAME) or (GS_SEARCH_DEST_DONGNAME_G33) then// and (frmJON30.AdvStringGrid4.Cells[0,0] <> '') then
          begin

          end else
          begin
            if (Frm_JON30.AdvStringGrid5.Cells[0,1] <> '') then
            begin
              frm_JON30.bEnter := False;
              Frm_JON30.Proc_SendParent(Frm_JON30.AdvStringGrid5.GetRealRow + 1);
              if not GS_END_AUTOLOCK then
							begin
								BtnEdLock.Hint := 'F4)잠금';
								BtnEdLock.Tag  := 0;
								BtnEdLock.ImageIndex := 1;
								BtnEdLock.Down := True;
								Frm_JON30.N2.Enabled := False;
								Frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
								Frm_JON30.btnEPoiMove.Enabled := False;
								Frm_JON30.N7.Enabled := False;
								Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
								Frm_JON30.btnEPoiAMove.Enabled := False;
							end;

              if meoEndArea.CanFocus then meoEndArea.SetFocus;
              Hide_Panel(lcsActiveEdit,1);
            end;
            if GS_SEARCH_POTAL_FIRST then
            begin
              if (Frm_JON30.AdvStringGrid5.Cells[0,1] = '') and (Frm_JON30.AdvStringGrid6.Cells[0,1] <> '') then
              begin
                frm_JON30.bEnter := False;
                Frm_JON30.Proc_SendParent_ADV3(Frm_JON30.AdvStringGrid6.GetRealRow + 1, True);
              end;
            end else
            begin
              if (Frm_JON30.AdvStringGrid5.Cells[0,1] = '') and (Frm_JON30.AdvStringGrid4.Cells[0,0] <> '') then
              begin
                frm_JON30.bEnter := False;
								Frm_JON30.Proc_SendParent_ADV2(Frm_JON30.AdvStringGrid4.GetRealRow + 1, Frm_JON30.AdvStringGrid4.GetRealCol, True);
                Hide_Panel(lcsActiveEdit,1);
              end;
            end;
          end;
					if not GS_END_AUTOLOCK then
					begin
						BtnEdLock.Hint := 'F4)잠금';
						BtnEdLock.Tag  := 0;
						BtnEdLock.ImageIndex := 1;
						BtnEdLock.Down := True;
						Frm_JON30.N2.Enabled := False;
						Frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
						Frm_JON30.btnEPoiMove.Enabled := False;
						Frm_JON30.N7.Enabled := False;
						Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
						Frm_JON30.btnEPoiAMove.Enabled := False;
					end;

          if meoEndArea.CanFocus then meoEndArea.SetFocus;
        end;
        Hide_Panel(lcsActiveEdit,1);
        if PnlSuggest.Visible then
        begin
          PnlSuggest.Visible := False;
          AdvGridSj.ShowSelection := False;
        end;
      end;

      key := 0;

			if (Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['2', '4', '8']) then
      begin
				if meoBigo.Visible = True then
          meoBigo.SetFocus
        else
					meoBigo2.SetFocus;
      end else
      begin
        if curRate.CanFocus then curRate.SetFocus;
      end;
    end else
    if Ord(key) in [VK_F7..VK_F12, Vk_F1] then
    begin
      sActieEdit := 'meoEndArea';
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        Vk_F7:
          if btnCmdUpdSave.Enabled then btnCmdUpdSave.OnClick(btnCmdUpdSave);
				Vk_F8: // 종료
				begin
					SetDebugeWrite('JON01.meoEndAreaKeyUp->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then
            btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
          if btnCmdQuestion.Enabled then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
      end;
		end else
		if Key = VK_BACK then
		begin
			Frm_JON30.sPreSearchWord := '';
			J30ShowE := False;
			gmap_forword := '';

			if not GB_JON_BACKKEYUSE then Exit;
		end else
		if (Key = vk_delete) then
		begin
			J30ShowE := False;                    
		end else
		if (Key = VK_F4) then Exit
		else
//		if (key <> 229) then  //  20191224 한컴입력기 에서는 모든 한글이 229로 넘어옴 그래서 삭제 KHS
		begin
			gKWComp := '';
			if GS_SEARCH_UPDATE_OPEN then J30ShowE := False;

			if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱점수', Self.Caption) > 0 ) then        //도착지 잠금알림 메세지처리
			begin
				if (BtnEdLock.Hint = 'F4)잠금') and (BtnEdLock.Tag = 0) then
				begin
					tmLockMent.Enabled := False;
					if ChkMini.Checked then
					begin
						lb_LockMent.Caption := '도착지가 잠겨있습니다.';
						pnl_LockMent.Width := 391;
						imgLockMent.Visible := False;
					end
					else
					begin
						lb_LockMent.Caption := '도착지가 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
						pnl_LockMent.Width := 585;
						imgLockMent.Visible := True;
					end;
					lb_LockMent.Font.Color := clWhite;
					imgLockMent.left := 324;
					pnl_LockMent.Top := GBTop5.Top - pnl_LockMent.Height;//193;//276;
					pnl_LockMent.Left := 8;
					pnl_LockMent.Color := clRed;
					if not pnl_LockMent.Visible then pnl_LockMent.Visible := True;
					tmLockMent.Interval := 2000;
					tmLockMent.Enabled := True;
					BtnEdLock.Tag := 99; //한번 알림 뜨면 다시는 안뜨게 함.
				end;
			end;

      if J30ShowE = False then Proc_AreaSearchKDown_Added(Key, meoEndArea.Text);
		end;
  Except
    on e: exception do
    begin
      Log('meoEndAreaKeyUp Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoEndAreaKeyUp Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.meoEndAreaPropertiesChange(Sender: TObject);
Var iRow, i : Integer;
begin
	SetDebugeWrite('JON01.meoEndAreaPropertiesChange');
	SetDebugeWrite('JON01-No[' + locKNum + '/' + IntToStr(self.Tag) + '/' + IntToStr(GS_JON01_TYPE) + '/' + IntToStr(GS_JON01_TAB) + '] ' 
							 + meoEndArea.Text );
	try
    if ( Not meoEndArea.Focused ) then
			cxLEndAreaFlag.Visible := (meoEndArea.Text = ''); // 도착지 입력 잔상.

    // 도착지 입력 글자 저장
    if meoEndArea.Tag = 0 then
    begin
      iRow := Self.Tag;
      gsEdArea[iRow] := meoEndArea.Text;
      for i := 1 to ViaADDTag do
      begin
        if GT_PASS_INFO[iRow][i-1].AREA5 <> '' then
          gsEdArea[iRow] := StringReplace(gsEdArea[iRow], GT_PASS_INFO[iRow][i-1].AREA5 + '/', '', [rfReplaceAll]);
      end;
    end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.mniUserClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.mniUserClick');
  AddBigo(TMenuItem(Sender).Caption, TMenuItem(Sender).Tag);
end;

procedure TFrm_JON01.pnl_chargeClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.pnl_chargeClick');
  pnl_charge.Visible := False;
  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then
  begin
    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height + 25
                                                else PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height;
  end;
end;

procedure TFrm_JON01.popQRMenuPopup(Sender: TObject);
begin
  if BtnQRate.Tag = 1 then miQRate.Visible := False
                      else miQRate.Visible := True;
end;

procedure TFrm_JON01.AddBigo(ABigo: string; Atag : Integer);
var
  AddStr, OrgStr, sDesc, sSelBtn : string;
  iPos : Integer;
begin
  SetDebugeWrite('JON01.AddBigo');
  try
    if not Assigned(FCurrBigo) then
      FCurrBigo := meoBigo;

    OrgStr := FCurrBigo.Lines.Text;  //원래 있던내용
    if OrgStr <> '' then
      AddStr := '/';

    iPos := Pos('│', FBigoList.Values[ABigo]);
    if iPos > 0 then
    begin
      sDesc   := Copy(FBigoList.Values[ABigo], 1, iPos - 1);
      sSelBtn := Copy(FBigoList.Values[ABigo], iPos + 1, Length(FBigoList.Values[ABigo]) - iPos);
    end else
    begin
      sDesc   := FBigoList.Values[ABigo];
    end;

    if Pos('<$시간$>', sDesc) > 0 then AddStr := sDesc + AddStr   //추가된내용      2011.12.02 KHS
    else
    begin
      if Atag < 4 then
      begin
        AddStr := sDesc + '-' + '<$시간$>' + AddStr ;  //추가된내용
      end
      else  AddStr := sDesc + AddStr;
    end;
    AddStr := StringReplace(AddStr, '<$시간$>', FormatDateTime('HH:MM:SS', Now), [rfReplaceall]);
    FCurrBigo.Lines.Text := AddStr + OrgStr;
    if FCurrBigo.CanFocus then
    begin
      FCurrBigo.SetFocus;
      FCurrBigo.SelStart := Length(FCurrBigo.Text);
    end;
  Except
    on e: exception do
		begin
      Log('AddBigo Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'AddBigo Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.FControlInitial(bTF: Boolean = False; bBrNoSetType: boolean = False);
var
	i, j: Integer;
  iHeight : Integer;
  ErrLine : String;
begin
	SetDebugeWrite('JON01.FControlInitial');

	//정기점검시 경탐 서버 지정용 20191021 KHS sntest로 로그인시만 보임
	if (GT_USERIF.ID = 'sntest') then 
	begin
		cb_WiseNutSntest.Visible := True;
		edt_PoiIP.Visible := True;
		edt_RPIP.Visible := True;
	end else 
	begin	
		cb_WiseNutSntest.Visible := False;
		edt_PoiIP.Visible := False;
		edt_RPIP.Visible := False;
	end;

	bAppOrder := False; //앱오더 여부 20191217 KHS
	bAppOrderOpen := False;  //앱접수창 팝업 여부 20191223 KHS
	pnl_ViaAlert_Title.Hint := '';
	///////////////////////폼디자인 미리보기 관련
	PnlBottom.enabled := True;
	GBTop5.enabled := True;
	GB3.enabled := True;
	GBTop3.enabled := True;
	GBTop2.enabled := True;
	GBTop1.enabled := True;
	ChkGroup.enabled := True;
	ChkMini.enabled := True;
	BtnFix.enabled := True;
	btnNew.enabled := True;
///////////////////////////////////////	
  if bTF = False then
  begin
    try

			bCurRateEditMode := False; //요금수정 시 전체삭제
			// 입력 컨트롤 초기화...
      if cxLblConfSlipUseFlg.Hint <> 'CONFSLIP' then
      begin // 접수번호 조회인지 설정.
        cxtJoinNum.Text := ''; // 접수번호
			end;

			cxtWorkerNm.Text := ''; // 기사명
      // 접수시간
      // 접수본사코드/지사코드/지사명
			if (locCustHP_MainNum_Search = '') and (cxLblCIDUseFlg.Hint <> 'CID') then
      begin // CID 조회인지 설정을 한다.
        cxtCallTelNum.Text := ''; // 발신전화번호
      end;
			cxTSearchMainTel.Text := ''; // 지사의 대표번호 조회 가능토록처리..
      cxtCuTel.Text := ''; // 고객전화번호 조회
      cxtCuTel2.Text := ''; // 전화번호2
      cxtCuBubin.Text := ''; // 법인명(법인정보)
      cxtCuBubin.Hint := '';
      lsBr_KeyNumber := '';
      sBHSAddr := '';
      sBHEAddr := '';

      GBTop3.Color := $008FEBFE;
      PnlKTPOIYN.Visible := False;
      TmplcsSta1 := '';
      TmplcsSta2 := '';
      TmplcsSta3 := '';
      TmplcsSta4 := '';
      TmplcsX := '';
      tmplcsY := '';
			TmpDef := '';

//-  		changeLog('',True);

      cxLblSmartRate.Caption := '';
      cxLblRate1.Caption := '';
      cxLblRate2.Caption := '';

      meoCuCCMemo.Clear;
      mmoCbMemo.Clear;
      meoCuWorMemo.Clear;
      edt_CardMemo.Text := '';
      BtnSimMemo.Visible := False;

      // 20120805 좌표 오류 체크 LYB
      gJONStaChkXY.Area1 := '';
      gJONStaChkXY.Area2 := '';
      gJONStaChkXY.Area3 := '';
      gJONStaChkXY.Area4 := '';
      gJONStaChkXY.Area5 := '';
      gJONStaChkXY.X := '';
      gJONStaChkXY.Y := '';
      gJONStaChkXY.GUIDE_X := '';
      gJONStaChkXY.GUIDE_Y := '';
      gJONStaChkXY.Gubun := '';

      Lbl_charge.Caption := '';
      Lbl_Distance.Caption := '';
      lbl_PlusAreaNotice.Caption := '';

      LblTop   .Color := $00E0EDEA;   // 기본색
      LblLeft  .Color := LblTop.Color;
      LblRigth .Color := LblTop.Color;
      LblBottom.Color := LblTop.Color;
      PnlTitle .Color := LblTop.Color;
//      PnlWorkMemo.Color := $00F0F0F0;
      PnlBtm.Color := $00F0F0F0;
//      PnlBox4.Color := $00F0F0F0;
      Pnl_BubinV.Color := $00F0F0F0;

      meoStartArea.Clear; // 출발지 추가정보
      cxtStartXval.Text := ''; // 출발지 X좌표
      cxtStartYval.Text := ''; // 출발지 Y좌표
      cxtStartGUIDEXval.Text := '';
      cxtStartGUIDEYval.Text := '';

      lblStartAreaName.Text := ''; // 출발지 주소
      cxtStartAreaDetail.Text := ''; // 출발지 상세지명(로컬저장용)
      lcsConfAREA4 := '';
      meoEndArea.Clear; // 도착지 추가정보

      lcsStaDocId   := '';
      lcsStaCellSel := '';
      lcsStaSchWord := '';
      lcsStaUrl := '';
      lcsStaDebug := '';
      GS_Grid_DES := '';

      lcsEndDocId   := '';
      lcsEndCellSel := '';
      lcsEndSchWord := '';
      lcsEndUrl := '';
      lcsEndDebug := '';
      GS_Grid_DEP := '';

      gJONEndChkXY.X := '';
      gJONEndChkXY.Y := '';
      gJONEndChkXY.GUIDE_X := '';
      gJONEndChkXY.GUIDE_Y := '';

      cxtEndXval.Text := ''; // 도착지 X좌표
      cxtEndYval.Text := ''; // 도착지 Y좌표
      cxtEndGUIDEXval.Text := '';
      cxtEndGUIDEYval.Text := '';

      lblEndAreaName.Caption := ''; // 도착지 주소
      cxtEndAreaDetail.Caption := ''; // 도착지 상세지명(로컬저장용)
      cxReEndArea.Clear;
			curRate.Value := 0; // 요금
			curRate.Tag := 0;
			curKm.Text := ''; // 출발지, 도착지, 경유지 Km
      fCruKm := 0;
      fChgKm := 0;
      fDirKm := 0;
      fTotalTime := 0;
      fViaKm := 0;
      fStEdKm := 0;
      bViaKm := False;
      chkNoSet.Down := False; // 요금 미지정
      chkRangeRate.Down := False; // 거리요금
      BtnWKJAmt.Down := False;

//-      cbbPayMethod.Enabled := True;

      btnCustAppinfo.Enabled := False;

      pnl_charge.Visible := False;
      PnlWkJi.Visible := False;
      cxLblWkJAmt.Caption := '0';
      if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height + 25
                                                  else PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height;

      cxLCuCCMemoFlg.Visible := True;
      cxLCuWorMemoFlg.Visible := True;
      cxLStartAreaFlag.Visible := True;
			cxLEndAreaFlag.Visible := True;
      cxLBubinMemoFlag.Visible := True;

      lst_BRlist.Clear;
			BtnResv.Tag := 0;  // 예약 초기화

			bOther := False; //타업체콜 여부 초기화
			sOrgHDNO := ''; sOrgBRNO := ''; sOrgKNum := ''; 
    Except
      on e: exception do
      begin
        Log('FControlInitial Error 0 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
        Assert(False, 'FControlInitial Error 0 :' + ErrLine + ', ' + E.Message);
      end;
    end;

    try
			edtPostPay.Hint := '';
			PayMethod := PAY_METHOD_MONEY;

			if meoBigo.Hint <> 'NOCLEAR' then
      begin
        meoBigo.Clear; // 적요
      end;

			pnlBubinState.Visible := False; //법인 상태 알림창
      pnlBubinState.Left := 1;
      pnlBubinState.Top := 0;
			ABubinStateIndex := 0; //법인 상태 초기화

      BtnCenterMng.Down := False; // 상황실 전화번호 보이도록,, 설정값

			cxCustView.DataController.SetRecordCount(0);
      // 고객명으로 조회한 결과 디스플레이 그리드.

			if BtnStLock.Hint = 'F4)잠금' then
      begin
        BtnStLock.Hint := 'F4)수정';
        BtnStLock.Tag  := 0;
				BtnStLock.ImageIndex := 0;
        BtnStLock.Down := False;
      end;
      if BtnEdLock.Hint = 'F4)잠금' then
      begin
        BtnEdLock.Hint := 'F4)수정';
        BtnEdLock.Tag  := 0;
        BtnEdLock.ImageIndex := 0;
        BtnEdLock.Down := False;
      end;
      if BtnRaLock.Hint = 'F4)잠금' then
      begin
				BtnRaLock.Hint := 'F4)해제';
        BtnRaLock.Tag  := 0;
        BtnRaLock.ImageIndex := 0;
				BtnRaLock.Down := False;

        curRate.Properties.Increment := 1000;
				curRate.Properties.ReadOnly := False;
			end;

			//경유지 잠금추가 20181112 KHS
			if BtnViaLock1.Hint = 'F4)잠금' then
			begin
				BtnViaLock1.Hint := 'F4)수정';
				BtnViaLock1.Tag  := 0;
				BtnViaLock1.ImageIndex := 0;
				BtnViaLock1.Down := False;
			end;
			for i := 2 to 5 do
			begin
				if BtnViaLock[i].Hint = 'F4)잠금' then
				begin
					BtnViaLock[i].Hint := 'F4)수정';
					BtnViaLock[i].Tag  := 0;
					BtnViaLock[i].ImageIndex := 0;
					BtnViaLock[i].Down := False;
				end;
			end;

			sNowRate := ''; // 현재 지사의 기본요금 설정액.
      lvs_ReceiveText := ''; // 임시변수 : Socket에서 사용
      locbWkToCust := False;

      // 고객 구분에 따른 라벨 칼라를 변경해 준다.
      Proc_SetFormColor_3(10);

      loc_sHoTransArea := ''; // 호전환 지역명;

      if TCK_USER_PER.JON_ChargeSave = '1' then
        btn_ChargeSave.Enabled := False
      else
        btn_ChargeSave.Enabled := True;

      cxCurPathRate.Value := 0; // 경유요금
      cxTmWaitTime.Text := '00:00'; // 대기시간 초기화.
      cxCurWaitTmRate.Value := 0; // 대기요금
      cxCurRevisionRate.Value := 0; // 보정금액

			meoBigo2.Clear; // 적요2
      meoBigo3.Clear; // 적요3
      cxDriverCharge.Text := ''; // 기사수수료 초기화.

      try
        meoViaArea1.Text := '';
        cxViaAreaName1.Caption := '';

        for i := 2 to 5 do
        begin
          if Assigned(meoViaArea[i]) then meoViaArea[i].Text := '';
          if Assigned(cxViaAreaName[i]) then cxViaAreaName[i].Caption := '';
        end;
      Except
        on e: exception do
        begin
          Log('FControlInitial Error 19 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
          Assert(False, 'FControlInitial Error 19 :' + ErrLIne + ', ' + E.Message);
        end;
      end;

      // 저장된 경유지 정보를 초기화 한다.
      for i := 1 to 5 do
      begin
        XposVia[i] := '';
        YposVia[i] := '';
				ViaAreaDetail[i] := '';
				ViaAreaName[i] := '';
				DocId[i] := '';
        CellSel[i] := '';
        SchWord[i] := '';
        ViaSA1[i] := '';
        ViaSA2[i] := '';
        ViaSA3[i] := '';
        DocId[i]  := '';
        CellSel[i] := '';
        SchWord[i] := '';
      end;
      ViaNowTag := 1;   //현재 입력중인 경유지위치
      ViaADDTag := 0;   //현재 추가한 경유지위치
    Except
      on e: exception do
      begin
        Log('FControlInitial Error 1 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
        Assert(False, 'FControlInitial Error 1 :' + ErrLIne + ', ' + E.Message);
      end;
    end;
  end;

  try
    if Self.Tag > -1 then
    begin
			For j := 0 to 4 do
      begin
        GT_PASS_INFO[Self.Tag][j].AREA1 := '';
        GT_PASS_INFO[Self.Tag][j].AREA2 := '';
        GT_PASS_INFO[Self.Tag][j].AREA3 := '';
        GT_PASS_INFO[Self.Tag][j].AREA4 := '';
        GT_PASS_INFO[Self.Tag][j].AREA5 := '';
        GT_PASS_INFO[Self.Tag][j].DOCID := '';
        GT_PASS_INFO[Self.Tag][j].CELLS := '';
        GT_PASS_INFO[Self.Tag][j].SWORD := '';
        GT_PASS_INFO[Self.Tag][j].MAP_X := '';
        GT_PASS_INFO[Self.Tag][j].MAP_Y := '';
      end;
    end;

		if meoBigo.Hint <> 'NOCLEAR' then
    begin
     if gJONAcceptMemo.Use then
       meoBigo.Text := gJONAcceptMemo.Memo;
    end;

    cboBranch.Enabled := True;
    cboBranch.Properties.ReadOnly := False;

    GBStartXYView.Visible := False;     //좌표
    GBEndXYView.Visible := False;     //좌표

    pbPayMethod := -1;   // 법인콜 선택시 결제구분 현재값 저장 초기화.

    cboBrOnly.Tag := 10;
    cboBrOnly.Properties.Items.Clear;
    if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
    begin
      cboBrOnly.Properties.Items.Assign(scb_FamilyBrName);
    end else
    begin
      cboBrOnly.Properties.Items.Assign(scb_BranchName);
    end;
    cboBrOnly.Properties.Items.Insert(0, '지사전체');
    cboBrOnly.ItemIndex := 0;
    cboBrOnly.Tag := 0;

    SetCboBranch(bBrNoSetType);

    lcsSta1 := '';
    lcsSta2 := '';
    lcsSta3 := ''; // 출1, 출2, 출3

    lcsStaDocId := '';
    lcsStaCellSel := '';
    lcsStaSchWord := '';
    GS_Grid_DEP := '';

    lcsEnd1 := '';
    lcsEnd2 := '';
    lcsEnd3 := ''; // 도1, 도2, 도3

    lcsEndDocId := '';
    lcsEndCellSel := '';
    lcsEndSchWord := '';
    GS_Grid_DES := '';

    lg_Save := '';

    loc_RateNOT := False; // 요금 계산을 막음.
    FIsCalcPrice := False;

    // 플러스콜 여부(수도권만 사용함)
		if GS_PRJ_AREA = 'S' then
		begin
			BtnPlusYN.Down := False;
			BtnPlusYN.Enabled := False;
			if GS_FormType = 'Normal' then
				BtnPlusYN.Visible := True;
			proc_PlusCall_CtrlYN;                // 플러스콜 사용여부 체크
		end else
    begin
			if GS_FormType = 'Normal' then
				BtnPlusYN.Visible := False;
		end;
		// 탁송연합콜 사용
		proc_TakCall_CtrlYN;
		//AI 아웃바운드 옵션 배차지연콜 사용여부
		proc_AIOB_CtrlYN;
	Except
		on e: exception do
    begin
      Log('FControlInitial Error 2 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'FControlInitial Error 2 :' + ErrLine + ', ' + E.Message);
    end;
  end;

  try
		pnlCallBell.Hint := ''; //콜벨업소 초기화
		pnlCallBell.visible := False;
		pnlCallBellAll.visible := False;
		lbUpsoName.Caption := '';
		
		// 접수시에 또는 수정시에 버튼위치 설정.
		SetCmdOrderUpdate;

    LoadPayMethod;
    pInitFormSize;

    // 03.KCP, 06.KICC 카드 결제 지사 사용여부 체크. 2011-10-19.
    if ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '03' ) Or
       ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '06' ) then
    begin
      cbCardSanction.Enabled := True;
			cbCardSanction.Caption := '카드결제';
		end else
		begin
			cbCardSanction.Enabled := False;
			cbCardSanction.Caption := '카드결제';
		end;

    Lbl_Charge.Caption := '';
    Lbl_Distance.Caption := '';

    //--------------- 카드결재 관련 초기화.
		locCardPaySeq := '';   // 결제일련번호
		locCardTranNo := '';   // 거래번호
		locCardPayInfo:= '';   // 카드결재 정보

		gUpdate_CardTranNo := ''; //수정창에서만 사용 2016.08.24 KHS
		gCardStatus := '';       //수정창에서만 사용 2016.08.24 KHS

    if cbbPayMethod.Text = PAY_METHOD_MONEY then
    begin
			// 03.KCP, 06.KICC 카드 결제 지사 사용여부 체크. 2011-10-19.
      if ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '03' ) Or
         ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '06' ) then
      begin
				cbCardSanction.Caption := '현금영수';
				cbCardSanction.Enabled := True;
			end;
		end	else
		begin
			cbCardSanction.Enabled := False;
			cbCardSanction.Caption := '카드결제';
		end;

		if cbbPayMethod.Text = PAY_METHOD_POST_MILE then                  // 20130603  LYB
		begin
			// 03.KCP, 06.KICC 카드 결제 지사 사용여부 체크. 2011-10-19.
			if ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '03' ) Or
				 ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '06' ) then
			begin
				cbCardSanction.Caption := '쿠폰결제';
        cbCardSanction.Enabled := True;
      end;
    end	else
    begin
      cbCardSanction.Enabled := False;
      cbCardSanction.Caption := '카드결제';
    end;
    //---------------

		FCurrBigo := nil;
    FCurrSpop := nil;
    FCurrEpop := nil;

		sTaksong := 'n';
		sTakHwak := 'n';
		sStickCall := 'n';
		sLicType := '00';

		PnlModifyTitle.Visible := False;
//		BtnLClose1.Visible := False;
		pnlClose.Visible := False;
		shpModifyTitle.Visible := False;

    cb_00.Down := False;
    cb_01.Down := False;
    cb_02.Down := False;
    cb_03.Down := False;
    cb_04.Down := False;
		cb_05.Down := False;
		cb_06.Down := False; //탁확

		if GS_PRJ_AREA = 'S' then
		begin
			for j := 0 to pmSpop.Items.Count - 1 do
			begin
				if pmSpop.Items.Items[j].Tag In [11..17] then
				begin
					pmSpop.Items.Items[j].Checked := False;
				end;
			end;
		end
		else
		begin
			for j := 0 to pmSpop.Items.Count - 1 do
			begin
				if pmSpop.Items.Items[j].Tag In [11..16] then
				begin
					pmSpop.Items.Items[j].Checked := False;
				end;
			end;
		end;
		BtnOptionSexM.Down := False;
    BtnOptionSexF.Down := False;
    if GB_JON_SEXM then BtnOptionSexM.Down := True;

		BtnOptionCallMu.Down := False;

    BtnCenterMng.Down := False;

    ChkCuSmsNo.Tag := 1;
    ChkCuSmsNo.Checked := False;
    ChkCuSmsNo.Tag := 0;

		if Assigned(Frm_JON30) then frm_JON30.N1.Enabled := True;
    if Assigned(Frm_JON30) then frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
    if Assigned(Frm_JON30) then Frm_JON30.btnSPoiMove.Enabled := True;
    if Assigned(Frm_JON30) then frm_JON30.N2.Enabled := True;
    if Assigned(Frm_JON30) then frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
    if Assigned(Frm_JON30) then Frm_JON30.btnEPoiMove.Enabled := True;

    if Assigned(Frm_JON30) then Frm_JON30.N6.Enabled := True;
    if Assigned(Frm_JON30) then Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
    if Assigned(Frm_JON30) then Frm_JON30.btnSPoiAMove.Enabled := True;
    if Assigned(Frm_JON30) then Frm_JON30.N7.Enabled := True;
    if Assigned(Frm_JON30) then Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
    if Assigned(Frm_JON30) then Frm_JON30.btnEPoiAMove.Enabled := True;

    sAppCode := '';
    sAppLastRegDate := '';
    sAppLastDelDate := '';
    sAppLastFinishDate := '';
    sAppCuArea := '';
    sAppTermModel := '';
    sAppTermOS := '';
    sAppDelYn := '';
    sFirstInSource := '';

		gsCuCallBellID := '';
		gsOrderCallBellID := '';
		gsUpdateCallBellID := '';
		gsUpdateCallBellStatus := '';

		cbbLicType.Properties.Items.Clear;
		for I := 0 to Length(LicTypeList) - 1 do
		begin
			if (LicTypeList[I].Value = '1종대형') or (LicTypeList[I].Value = '1종보통') or 
				 (LicTypeList[I].Value = '1종특수') or (LicTypeList[I].Value = '2종보통') then
				cbbLicType.Properties.Items.Add(LicTypeList[I].Value);
		end;
		cbbLicType.ItemIndex := 0;

		BtnStLock.Tag := 0;
		BtnEdLock.Tag := 0;
		BtnRaLock.Tag := 0;

		//차종타입 기본값 20181016 KHS
		cb_CarType.ItemIndex := 1;
		gsKDWkHp := '';

		bKakaoOrder := False;
	Except
		on e: exception do
		begin
			Log('FControlInitial Error 3 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'FControlInitial Error 3 :' + ErrLine + ', ' + E.Message);
		end;
	end;
end;

procedure TFrm_JON01.AddSpop(ASpop: string; Atag: Integer);
var
  AddStr, OrgStr, wStr, sFword, sDesc, sSelBtn : string;
  i, iPos : Integer;
	slTmp : TStringList;
  IE : Variant;
  Value : Cardinal;
//  bIE :Boolean;
  sURL, sTmp : String;
//  WinH : HWND;
//  fRect : TRect;
  iMainX, iMainY, iSubX, iSubY: Integer;
 	bTmp : Boolean;
begin
	SetDebugeWrite('JON01.AddSpop');
  try
    FCurrSpop := nil;

    if not Assigned(FCurrSpop) then
      FCurrSpop := meoStartArea;

    OrgStr := FCurrSpop.Lines.Text;  //원래 있던내용

    wStr := meoStartArea.Text;
		begin
      if (Atag > 10) and (Atag < 96)then
      begin
				if FSpopList.Values[ASpop] = '탁송기사만' then
				begin
					if Pos('탁송)', wStr) < 1 then
					begin
//						if Not btnTakAlly.Down then
							cb_00.Down := True;
						AddStr := '탁송)' + AddStr;
						sTaksong := 'y';
					end;
				end else
				if FSpopList.Values[ASpop] = '탁송확대기사만' then
				begin
					if Pos('탁확)', wStr) < 1 then
					begin
						cb_06.Down := True;
						AddStr := '탁확)' + AddStr;
						sTaksong := 'y';
					end;
				end else
				if FSpopList.Values[ASpop] = '정장기사만' then
				begin
          if Pos('정장)', wStr) < 1 then
          begin
            cb_01.Down := True;
            AddStr := '정장)' + AddStr;
          end;
        end else
        if FSpopList.Values[ASpop] = '경유있음' then
        begin
          if Pos('경유)', wStr) < 1 then
          begin
            cb_02.Down := True;
            AddStr := '경유)' + AddStr;
          end;
        end else
        if FSpopList.Values[ASpop] = '적요있음' then
        begin
          if Pos('적요)', wStr) < 1 then
          begin
            cb_03.Down := True;
            AddStr := '적요)' + AddStr;
          end;
        end else
        if FSpopList.Values[ASpop] = '스틱기사만' then
        begin
          if Pos('스틱)', wStr) < 1 then
          begin
            cb_04.Down := True;
            AddStr := '스틱)' + AddStr;
						sStickCall := 'y';
          end;
        end else
        if FSpopList.Values[ASpop] = GS_USERSELECT1 then
        begin
          if Pos(GS_USERSELECT + ')', wStr) < 1 then
          begin
            cb_05.Down := True;
            AddStr := GS_USERSELECT + ')' + AddStr;
          end;
        end else
        begin
          iPos := Pos('│', FSpopList.Values[ASpop]);
          if iPos > 0 then
          begin
            sDesc   := Copy(FSpopList.Values[ASpop], 1, iPos - 1);
            sSelBtn := Copy(FSpopList.Values[ASpop], iPos + 1, Length(FSpopList.Values[ASpop]) - iPos);
          end else
          begin
            sDesc   := FSpopList.Values[ASpop];
          end;

          // 버튼을 자동으로 눌러주면 '{' '}' 삭제
          if sSelBtn <> '' then
          begin
            AddStr := sDesc + AddStr;
            slTmp := TStringList.Create;
            try
              slTmp.Delimiter := '/';
              slTmp.DelimitedText := sSelBtn;

              for i := 0 to slTmp.Count -1 do
              begin
								if slTmp[i] = '탁' then
								begin
									cb_00.Down := True;
									SetMunuChecked('탁', True);
									sTaksong := 'y';
								end else
								if slTmp[i] = '탁확' then
								begin
									cb_06.Down := True;
									SetMunuChecked('탁확', True);
									sTakHwak := 'y';
								end else
								if slTmp[i] = '정' then
                begin
                  cb_01.Down := True;
                  SetMunuChecked('정', True);
                end else
                if slTmp[i] = '경' then
                begin
                  cb_02.Down := True;
                  SetMunuChecked('경', True);
                end else
                if slTmp[i] = '적' then
                begin
                  cb_03.Down := True;
                  SetMunuChecked('적', True);
                end else
                if slTmp[i] = '스' then
                begin
                  cb_04.Down := True;
                  SetMunuChecked('스', True);
									sStickCall := 'y';
                end else
                if slTmp[i] = Copy(GS_USERSELECT, 1, 1) then
                begin
                  cb_05.Down := True;
                  SetMunuChecked(Copy(GS_USERSELECT, 1, 1), True);
                end;
              end;

            finally
              FreeAndNil(slTmp);
            end;
          end else
          begin
    				if GS_SEPER_USE then sFword := '{' + sDesc + '}'
    				                else sFword := sDesc;
    				i := Pos(sFword, wStr);
    				if i < 1 then
    				begin
    					AddStr := sFword + AddStr;
    				end else
    				begin
    					if GS_SEPER_USE then
    					begin
    						if i = 1 then
    						begin
    							meoStartArea.Text := Copy(widestring(wStr), 1 + Length(widestring(sFword)), Length(widestring(wStr)) - Length(widestring(sFword)));
    						end	else
                if i > 1 then
    						begin
    							meoStartArea.Text := Copy(widestring(wStr), 1, i-1) +
    																	 Copy(widestring(wStr), i + Length(widestring(sFword)) , Length(widestring(wStr)) - i);
    						end;
    						Exit;
    					end;
    				end;
//-            AddStr := '{' + sDesc + '}' + AddStr;
          end;
        end;
      end else
			if Atag = 96 then  //콜무
  		begin
  			i := Pos('콜무)', wStr);
  			if Pos('콜무)', wStr) < 1 then
  			begin
					AddStr := '콜무)' + AddStr;
				end	else
  			if i = 1 then
  			begin
  				OrgStr := Copy(wStr, 1 + Length('콜무)'), Length(wStr) - Length('콜무)'));
  			end else
	  		if i > 1 then
		  	begin
					OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('콜무)') , Length(wStr) - i);
  			end;
  		end else
      if Atag = 97 then  //후불
      begin
        i := Pos('후불)', wStr);
        if i = 1 then
        begin
          OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
        end else
        if i > 1 then
        begin
          OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('후불)') , Length(wStr) - i);
        end;

        i := Pos('즉후)', wStr);
        if i = 1 then
        begin
          OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
        end else
        if i > 1 then
        begin
          OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
        end;

				i := Pos('법후)', wStr);
        if i = 1 then
        begin
          OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
        end else
        if i > 1 then
        begin
          OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('법후)') , Length(wStr) - i);
        end;

  			if Pos('♥♥♥]', wStr) > 0 then
  			begin
  				i := Pos('♥♥♥]', wStr);
  				if i = 1 then
  				begin
  					OrgStr := Copy(wStr, 1 + Length('♥♥♥]'), Length(wStr) - Length('♥♥♥]'));
  				end else
  				if i > 1 then
  				begin
  					OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥♥]') , Length(wStr) - i);
  				end;
  			end	else
  			if Pos('♥♥]', wStr) > 0 then
  			begin
  				i := Pos('♥♥]', wStr);
  				if i = 1 then
  				begin
  					OrgStr := Copy(wStr, 1 + Length('♥♥]'), Length(wStr) - Length('♥♥]'));
  				end else
  				if i > 1 then
  				begin
  					OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥]') , Length(wStr) - i);
  				end;
  			end	else
  			if Pos('♥]', wStr) > 0 then
  			begin
  				i := Pos('♥]', wStr);
    			if i = 1 then
    			begin
    				OrgStr := Copy(wStr, 1 + Length('♥]'), Length(wStr) - Length('♥]'));
    			end else
    			if i > 1 then
    			begin
    				OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥]') , Length(wStr) - i);
    			end;
  			end;

        AddStr := '';
      end else
      if Atag = 98 then  //후불
      begin
//        if ( Pos('후불)', wStr) < 1 ) And ( Pos('즉후)', wStr) < 1 ) And ( Pos('법후)', wStr) < 1 ) then
        if ( Pos('후불)', wStr) < 1 ) then
        begin
          i := Pos('후불)', wStr);
          if i = 1 then
          begin
            OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
          end else
          if i > 1 then
          begin
            OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('후불)') , Length(wStr) - i);
          end;

          i := Pos('즉후)', wStr);
          if i = 1 then
          begin
            OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
          end else
          if i > 1 then
          begin
            OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
          end;

          i := Pos('법후)', wStr);
          if i = 1 then
          begin
            OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
          end else
          if i > 1 then
          begin
            OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('법후)') , Length(wStr) - i);
          end;

  				if Pos('♥♥♥]', wStr) > 0 then
  				begin
    				i := Pos('♥♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥♥]'), Length(wStr) - Length('♥♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥♥]') , Length(wStr) - i);
  					end;
  				end	else
  				if Pos('♥♥]', wStr) > 0 then
  				begin
    				i := Pos('♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥]'), Length(wStr) - Length('♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥]') , Length(wStr) - i);
  					end;
  				end	else
  				if Pos('♥]', wStr) > 0 then
  				begin
    				i := Pos('♥]', wStr);
    				if i = 1 then
    				begin
    					OrgStr := Copy(wStr, 1 + Length('♥]'), Length(wStr) - Length('♥]'));
    				end else
    				if i > 1 then
    				begin
    					OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥]') , Length(wStr) - i);
    				end;
  				end;

					if not gsJON01AfterMoneyWordUse then // 출발지 '후불)' 문구 사용 false, 사용안함 True
					begin
						sTmp := Proc_BRNOSearch;
						for i := 0 to GS_BubHu_LIST.Count -1 do //법후사용 지사인지 확인 20171211 KHS
						begin
							if GS_BubHu_LIST[i] = sTmp then
							begin
								bTmp := True;
								Break;
							end;
						end;
						if ((GB_JON_BUBHUUSE) or (bTmp)) and (cxtCuBubin.Hint <> '')then
	//					if (GB_JON_BUBHUUSE) and (cxtCuBubin.Hint <> '') then
							AddStr := '법후)'
						else
						if (gsJON01AfterMoneyYN = 'TRUE') then
							AddStr := '후불)';
					end;
        end;
      end else
      if Atag = 99 then  //즉후
      begin
  			if ASpop = '♥♥♥]' then
	  		begin
  				if Pos('♥♥♥]', wStr) < 1 then
  				begin
  					i := Pos('후불)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
  					end else
  					if i > 1 then
  					begin
							OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('후불)') , Length(wStr) - i);
  					end;

  					i := Pos('즉후)', wStr);
  					if i = 1 then
  					begin
							OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
  					end;

  					i := Pos('법후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('법후)') , Length(wStr) - i);
  					end;

            i := Pos(']', wStr);
            if i = 1 then
            begin
              OrgStr := StringReplace(wStr, ']', '', [rfReplaceAll]);
            end else
            if i > 1 then
            begin
              OrgStr := StringReplace(wStr, Copy(wStr, 1, i), '', [rfReplaceAll]);
            end;

  					i := Pos('♥♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥♥]'), Length(wStr) - Length('♥♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥♥]') , Length(wStr) - i);
						end;
  					AddStr := ASpop ;
  				end;
  			end	else
  			if ASpop = '♥♥]' then
	  		begin
  				if Pos('♥♥]', wStr) < 1 then
  				begin
  					i := Pos('후불)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('후불)') , Length(wStr) - i);
  					end;

  					i := Pos('즉후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
  					end;

  					i := Pos('법후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('법후)') , Length(wStr) - i);
  					end;

            i := Pos(']', wStr);
            if i = 1 then
            begin
              OrgStr := StringReplace(wStr, ']', '', [rfReplaceAll]);
            end else
            if i > 1 then
            begin
              OrgStr := StringReplace(wStr, Copy(wStr, 1, i), '', [rfReplaceAll]);
            end;

  					i := Pos('♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥]'), Length(wStr) - Length('♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥]') , Length(wStr) - i);
  					end;
  					AddStr := ASpop ;
  				end;
  			end	else
				if ASpop = '♥]' then
  			begin
  				if Pos('♥]', wStr) < 1 then
  				begin
						i := Pos('후불)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('후불)') , Length(wStr) - i);
  					end;

  					i := Pos('즉후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
  					end;

  					i := Pos('법후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('법후)') , Length(wStr) - i);
  					end;

            i := Pos(']', wStr);
            if i = 1 then
            begin
              OrgStr := StringReplace(wStr, ']', '', [rfReplaceAll]);
            end else
            if i > 1 then
            begin
              OrgStr := StringReplace(wStr, Copy(wStr, 1, i), '', [rfReplaceAll]);
            end;

  					i := Pos('♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥]'), Length(wStr) - Length('♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('♥]') , Length(wStr) - i);
  					end;
  					AddStr := ASpop ;
  				end;
  			end	else
  			begin
  				if Pos('즉후)', wStr) < 1 then
  				begin
  					i := Pos('후불)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('후불)') , Length(wStr) - i);
  					end;

  					i := Pos('즉후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
  					end;

  					i := Pos('법후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('법후)') , Length(wStr) - i);
  					end;

  					i := Pos('♥♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥♥]'), Length(wStr) - Length('♥♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥♥]') , Length(wStr) - i);
  					end;

  					i := Pos('♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥]'), Length(wStr) - Length('♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥]') , Length(wStr) - i);
  					end;

  					i := Pos('♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥]'), Length(wStr) - Length('♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('♥]') , Length(wStr) - i);
  					end;

						if not gsJON01AfterMoneyWordUse1 then // 출발지 '즉후)' 문구 사용 false, 사용안함 True
						begin
							sTmp := Proc_BRNOSearch;
							for i := 0 to GS_BubHu_LIST.Count -1 do //법후사용 지사인지 확인 20171211 KHS
							begin
								if GS_BubHu_LIST[i] = sTmp then
								begin
									bTmp := True;
									Break;
								end;
							end;
							if ((GB_JON_BUBHUUSE) or (bTmp)) and (cxtCuBubin.Hint <> '')then
								AddStr := '법후)'
							else
							if (gsJON01AfterMoneyYN = 'TRUE') then
								AddStr := '즉후)';
						end;
{
						if (GB_JON_BUBHUUSE) and (cxtCuBubin.Hint <> '') then
							AddStr := '법후)'
						else
						if (gsJON01AfterMoneyYN = 'TRUE') and (gsJON01AfterMoneyWordUse1 = False) then
							AddStr := '즉후)';  }
  				end;
  			end;
      end else
      if Atag = 0 then
      begin
        if cxtStartXval.Text <> '' then
        begin
          if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
          try
            Frm_JON31.Tag := Self.Tag;
            Frm_JON31.Show;
            Frm_JON31.OnSelectedMap := SetStartAreaMap;
            Frm_JON31.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text);
            if Frm_JON31.WebBrowser1.Document <> nil then
              (Frm_JON31.Webbrowser1.Document as IHTMLDocument2).ParentWindow.Focus;
          except
            Frm_JON31.Close;
          end;
          pSet705CShareClickEvent('btnSViewMap', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
        end;
      end else
      if Atag = 1 then
      begin
//        if cxtStartXval.Text <> '' then
//        begin
//          try
//           if Not Assigned(Frm_JON58) Or (Frm_JON58 = Nil) then Frm_JON58 := TFrm_JON58.Create(Nil);
//           Frm_JON58.iJon01Tag := Self.Tag;
//           Frm_JON58.Show;
//          except on E:Exception do
//            begin
//              ShowMessage('test' + E.Message);
//            end;
//          end;
//        end;

        if cxtStartXval.Text <> '' then
        begin
          if RVHandle > 0 then
          begin
            PostMessage (RVHandle, WM_CLOSE, 0, 0);
            RVHandle := 0;
          end;

          try
//            DAUMROADVIEW_URL := 'http://map.daum.net/link/roadview/%s,%s';
            DAUMROADVIEW_URL := 'http://203.251.202.13:88/map/RoadView.html?x=%s&y=%s';
            sURL := Format(DAUMROADVIEW_URL, [Frm_JON30.SetWGS84(cxtStartXval.Text), Frm_JON30.SetWGS84(cxtStartYval.Text)]);

            IE := CreateOleObject('InternetExplorer.Application');

            IE.Width := 780;
            IE.Height := 580;
            IE.AddressBar := True;
            IE.Navigate( sURL );

            while IE.ReadyState <> READYSTATE_COMPLETE do
              Application.ProcessMessages;

            IE.MenuBar := False;
            IE.ToolBar := False;
            IE.StatusBar := False;

            if Frm_Main.JON01MNG[Self.Tag].Dock then
            begin
              IE.Top := ((Frm_JON00.Top * 2 + Frm_JON00.Height) - IE.Height)/2;
              IE.Left := Frm_JON00.Left - IE.Width;
            end else
            begin
              IE.Top := ((Self.Top * 2 + Self.Height) - IE.Height)/2;
              IE.Left := Self.Left - IE.Width;
            end;

            Value := IE.Hwnd;
            RegSetValue(HKEY_CURRENT_USER, 'HKSFA\IE_HWND', REG_DWORD, @Value, SizeOf(Cardinal));
            IE.Visible := true;
            SetForegroundWindow(Value);
            IE := Unassigned;
          except on E:Exception do
            begin
              ShowMessage('test' + E.Message);
            end;
          end;
        end;
      end else
      if Atag = 2 then
      begin

      end else
      if Atag = 3 then
			begin
				GBStartXYView.LEft := 328;
				GBStartXYView.TOP := 6;
				GBStartXYView.Visible := True;     //좌표
        pSet705CShareClickEvent('GBStartXYView', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
			end else
			if Atag = 5 then
      begin
				// 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
        Proc_Cust_AreaSave('START');
      end else
			if Atag = 6 then
      begin
        // 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
        Proc_Cust_AreaSave('DEST');
      end else
      if Atag = 8 then //출발지 POI추가요청
      begin
//				Proc_POIRequest(0, '', '', '', '', '', '', '');
				Proc_POIRequest(0, lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, lcsStaDocId, cxtStartYval.Text, cxtStartXval.Text);

//        Frm_jon30.mCtrlMan := Frm_jon30.mMap.GetCtrlMan();
//				Frm_jon30.mCtrlState := Frm_jon30.mCtrlMan.GetControlState();
//				Frm_jon30.mCenterLL := Frm_jon30.mCtrlState.GetLLCenter();
//				Frm_jon56.mCtrlState.SetLevel(Frm_jon30.mCtrlState.GetLevel());
//				Frm_jon56.OnMoveMap(Frm_jon30.mCenterLL.GetX,Frm_jon30.mCenterLL.GetY);

      end else
      if Atag = 9 then //출발지 POI오류 수정
      begin
				Proc_POIRequest(1, lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, lcsStaDocId, cxtStartYval.Text, cxtStartXval.Text);
      end
      else AddStr := FSpopList.Values[ASpop] + AddStr;
    end;
		FCurrSpop.Lines.Text := AddStr + OrgStr;
    FCurrSpop.SelStart := Length(AddStr + OrgStr);
  Except
    on e: exception do
    begin
			Log('AddSpop Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'AddSpop Error :' + E.Message);
    end;
	end;
end;

procedure TFrm_JON01.btn_EndDetail_UpdateClick(Sender: TObject);
begin
	pnl_EndDetail_Update.Visible := False;
	cxtEndAreaDetail.Caption := edt_EndDetail_Update.Text;
	cxReEndArea.Text := StringReplace(cxReEndArea.Text, edt_EndDetail_Update.Hint, edt_EndDetail_Update.Text, [rfReplaceAll]);
	MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);
	cxReEndArea.Enabled := True;
	edt_EndDetail_Update.Text := '';
	curRate.SetFocus;
end;

procedure TFrm_JON01.btnEndLocalSaveClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.btnEndLocalSaveClick');
	// 로컬에 사용자 맵정보를 저장한다.
	if TCK_USER_PER.JON_LocalMap <> '1' then
	begin
		GMessagebox('권한이 없습니다',CDMSI);
		Exit;
	end;
	proc_Save_Area(1) // 도착지 저장.
end;

procedure TFrm_JON01.AdvGridSjClickCell(Sender: TObject; ARow, ACol: Integer);
begin
  SetDebugeWrite('JON01.AdvGridSjClickCell');
  try
    if lcsActiveEdit = 'meoStartArea' then
    begin
      meoStartArea.Text := ReplaceAll(AdvGridSj.Cells[1, AdvGridSj.Row], ' ', '');
    end else
    if lcsActiveEdit = 'meoEndArea' then
    begin
      meoEndArea.Text := ReplaceAll(AdvGridSj.Cells[1, AdvGridSj.Row], ' ', '');
    end else
    if lcsActiveEdit = 'meoViaArea' then
    begin
      if ViaNowTag = 1 then
      begin
        meoViaArea1.Text := ReplaceAll(AdvGridSj.Cells[1, AdvGridSj.Row], ' ' , '');
      end else
      if ViaNowTag > 1 then
      begin
        meoViaArea[ViaADDTag].Text := ReplaceAll(AdvGridSj.Cells[1, AdvGridSj.Row], ' ', '');
      end;
    end;

    Proc_AreaSearchKDown_Added(VK_RETURN, 'AdvGridSjClickCell');
    PnlSuggest.Tag := 1;
    PnlSuggest.Visible := False;
    AdvGridSj.ShowSelection := False;

    if lcsActiveEdit = 'meoStartArea' then
    begin
      if meoStartArea.CanFocus then meoStartArea.SetFocus;
  //    meoStartArea.SelStart := Length(meoStartArea.Text);
    end else
    if lcsActiveEdit = 'meoEndArea' then
    begin
      if meoEndArea.CanFocus then meoEndArea.SetFocus;
  //    meoEndArea.SelStart := Length(meoEndArea.Text);
    end else
    if lcsActiveEdit = 'meoViaArea' then
    begin
      if ViaNowTag = 1 then
      begin
        if meoViaArea1.CanFocus then meoViaArea1.SetFocus;
      end else
      if ViaNowTag > 1 then
      begin
        if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.AdvGridSjEnter(Sender: TObject);
begin
  SetDebugeWrite('JON01.AdvGridSjEnter');
  try
    if J30ShowS = True then
    begin
      Exit;
    end;

		if Assigned(Frm_JON30) then
    begin
      if GS_MAP_AREA_AUTOSHOW then
      begin
        if (not Frm_JON30.Visible) and (cxtStartXval.Text <> '') and (cxtStartYval.Text <> '') then
        begin
          Hide_Panel(lcsActiveEdit,0);
        end;
      end else
      begin
        if (not Frm_JON30.Visible) and (cxtStartXval.Text <> '') and (cxtStartYval.Text <> '') then
        begin
          Hide_Panel(lcsActiveEdit,0);
        end;
      end;
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.AdvGridSjKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.AdvGridSjKeyDown');
  try
    if Key in [VK_UP] then
    begin
      if AdvGridSj.Row = 0 then
      begin
        if lcsActiveEdit = 'meoStartArea' then
        begin
          meoStartArea.SetFocus;
  //        meoStartArea.SelStart := Length(meoStartArea.Text);
        end else
        if lcsActiveEdit = 'meoEndArea' then
        begin
          meoEndArea.SetFocus;
  //        meoEndArea.SelStart := Length(meoEndArea.Text);
        end else
        if lcsActiveEdit = 'meoViaArea' then
        begin
          if ViaNowTag = 1 then
          begin
            if meoViaArea1.CanFocus then meoViaArea1.SetFocus;
          end else
          if ViaNowTag > 1 then
          begin
            if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
          end;
        end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.AdvGridSjKeyPress(Sender: TObject; var Key: Char);
begin
  SetDebugeWrite('JON01.AdvGridSjKeyPress');
  try
    if Key = #9 then
    begin
      if lcsActiveEdit = 'meoStartArea' then
      begin
        meoStartArea.SetFocus;
  //      meoStartArea.SelStart := Length(meoStartArea.Text);
      end else
      if lcsActiveEdit = 'meoEndArea' then
      begin
        meoEndArea.SetFocus;
  //      meoEndArea.SelStart := Length(meoEndArea.Text);
      end else
      if lcsActiveEdit = 'meoViaArea' then
      begin
        if ViaNowTag = 1 then
        begin
          if meoViaArea1.CanFocus then meoViaArea1.SetFocus;
        end else
        if ViaNowTag > 1 then
        begin
          if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
        end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.AdvGridSjKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.AdvGridSjKeyUp');
  try
    if Key = VK_RETURN then
    begin
      Key := 0;
      if lcsActiveEdit = 'meoStartArea' then
      begin
        meoStartArea.Text := ReplaceAll(AdvGridSj.Cells[1, AdvGridSj.Row], ' ' , '');
      end else
      if lcsActiveEdit = 'meoEndArea' then
      begin
        meoEndArea.Text := ReplaceAll(AdvGridSj.Cells[1, AdvGridSj.Row], ' ' , '');
      end else
      if lcsActiveEdit = 'meoViaArea' then
      begin
        if ViaNowTag = 1 then
        begin
          meoViaArea1.Text := ReplaceAll(AdvGridSj.Cells[1, AdvGridSj.Row], ' ' , '');
        end else
        if ViaNowTag > 1 then
        begin
          meoViaArea[ViaADDTag].Text := ReplaceAll(AdvGridSj.Cells[1, AdvGridSj.Row], ' ' , '');
        end;
      end;

      Proc_AreaSearchKDown_Added(Key, 'AdvGridSjKeyUp');
      PnlSuggest.Tag := 1;
      PnlSuggest.Visible := False;
      AdvGridSj.ShowSelection := False;

      if lcsActiveEdit = 'meoStartArea' then
      begin
        if meoStartArea.CanFocus then meoStartArea.SetFocus;
  //      meoStartArea.SelStart := Length(meoStartArea.Text);
      end else
      if lcsActiveEdit = 'meoEndArea' then
      begin
        if meoEndArea.CanFocus then meoEndArea.SetFocus;
  //      meoEndArea.SelStart := Length(meoEndArea.Text);
      end else
      if lcsActiveEdit = 'meoViaArea' then
      begin
        if ViaNowTag = 1 then
        begin
          if meoViaArea1.CanFocus then meoViaArea1.SetFocus;
        end else
        if ViaNowTag > 1 then
        begin
          if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
        end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.LoadSpopList;
var
  I: Integer;
  Menu: TMenuItem;
begin
  SetDebugeWrite('JON01.LoadSpopList');
  try
    FSpopList.Clear;

		FSpopList.Add('출발지 지도보기=출발지 지도보기');
		FSpopList.Add('출발지 로드맵=출발지 로드맵');
		FSpopList.Add('출발지 전화번호검색=출발지 전화번호검색');
		FSpopList.Add('출발지 좌표=출발지 좌표');
		FSpopList.Add('-=-');
		FSpopList.Add('고객출발지로 저장=고객출발지로 저장');
		FSpopList.Add('고객도착지로 저장=고객도착지로 저장');
		FSpopList.Add('-=-');
		FSpopList.Add('출발지POI추가요청=출발지POI추가요청');
		FSpopList.Add('출발지POI오류신고=출발지POI오류신고');
		FSpopList.Add('-=-');
		FSpopList.Add('탁송기사만=탁송기사만');
		FSpopList.Add('정장기사만=정장기사만');
		FSpopList.Add('경유있음=경유있음');
		FSpopList.Add('적요있음=적요있음');
		FSpopList.Add('스틱기사만=스틱기사만');
		if GS_PRJ_AREA = 'S' then
		begin
			FSpopList.Add('탁송확대기사만=탁송확대기사만');
		end;
		FSpopList.Add(Trim(GS_USERSELECT1) + '=' + Trim(GS_USERSELECT1));

    FSpopList.AddStrings(GS_UserBigoList);

    while pmSpop.Items.Count > 2 do
    begin
      if pmSpop.Items[0].Caption = '설정' then
        Break;

      Menu := pmSpop.Items[0];
      pmSpop.Items.Delete(0);
      Menu.Free;
    end;

    for I := 0 to FSpopList.Count - 1 do
    begin
      try
        Menu := TMenuItem.Create(pmSpop);
        Menu.Caption := FSpopList.Names[I];
        Menu.Enabled := True;
        Menu.Visible := True;
        Menu.OnClick := mniSpopClick;
        Menu.Tag     := i;

        if ( cb_00.Down ) And ( Menu.Caption = '탁송기사만') then Menu.Checked := True;
        if ( cb_01.Down ) And ( Menu.Caption = '정장기사만') then Menu.Checked := True;
        if ( cb_02.Down ) And ( Menu.Caption = '경유있음'  ) then Menu.Checked := True;
        if ( cb_03.Down ) And ( Menu.Caption = '적요있음'  ) then Menu.Checked := True;
				if ( cb_04.Down ) And ( Menu.Caption = '스틱기사만') then Menu.Checked := True;
				if GS_PRJ_AREA = 'S' then
				begin
					if ( cb_06.Down ) And ( Menu.Caption = '탁송확대기사만') then Menu.Checked := True;
				end;
				if ( cb_05.Down ) And ( Menu.Caption = GS_USERSELECT1) then Menu.Checked := True;

        if Trim(Menu.Caption) = '' then Menu.Visible := False;

        pmSpop.Items.Insert(I, Menu);
      except on E: Exception do
        ShowMessage(E.Message);
      end;
    end;

    if Trim(GS_USERSELECT) <> '' then
    begin
      cb_05.Visible := True;
      cb_05.Hint    := Trim(GS_USERSELECT);
      cb_05.Caption := Copy(Trim(GS_USERSELECT), 1, 1);
    end else
    begin
      cb_05.Visible := False;
      cb_05.Hint    := '';
      cb_05.Caption := '';
    end;

  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.MenuItem3Click(Sender: TObject);
begin
  SetDebugeWrite('JON01.MenuItem3Click');
  cxTmWaitTime.Text := '00:00';
  cxCurWaitTmRate.Value := 0;
end;

procedure TFrm_JON01.mniSpopClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.mniSpopClick');
  try
    if TMenuItem(Sender).Tag = 11 then
    begin
      if cb_00.Down then cb_00.Down := False
										else cb_00.Down := True;
      cb_00Click(cb_00);
      TMenuItem(Sender).Checked := cb_00.Down
    end else
    if TMenuItem(Sender).Tag = 12 then
    begin
      if cb_01.Down then cb_01.Down := False
                    else cb_01.Down := True;
      cb_00Click(cb_01);
      TMenuItem(Sender).Checked := cb_01.Down
    end else
    if TMenuItem(Sender).Tag = 13 then
    begin
      if cb_02.Down then cb_02.Down := False
                    else cb_02.Down := True;
      cb_00Click(cb_02);
      TMenuItem(Sender).Checked := cb_02.Down
    end else
    if TMenuItem(Sender).Tag = 14 then
    begin
      if cb_03.Down then cb_03.Down := False
                    else cb_03.Down := True;
      cb_00Click(cb_03);
      TMenuItem(Sender).Checked := cb_03.Down
    end else
    if TMenuItem(Sender).Tag = 15 then
    begin
      if cb_04.Down then cb_04.Down := False
                    else cb_04.Down := True;
      cb_00Click(cb_04);
      TMenuItem(Sender).Checked := cb_04.Down
		end else
		begin
			if GS_PRJ_AREA = 'S' then
			begin
				if TMenuItem(Sender).Tag = 16 then
				begin
					if cb_06.Down then cb_06.Down := False
												else cb_06.Down := True;
					cb_00Click(cb_06);
					TMenuItem(Sender).Checked := cb_06.Down
				end else
				if TMenuItem(Sender).Tag = 17 then
				begin
					if cb_05.Down then cb_05.Down := False
												else cb_05.Down := True;
					cb_00Click(cb_05);
					TMenuItem(Sender).Checked := cb_05.Down
				end else
					AddSpop(TMenuItem(Sender).Caption, TMenuItem(Sender).Tag);
			end
			else
			begin
				if TMenuItem(Sender).Tag = 16 then
				begin
					if cb_05.Down then cb_05.Down := False
												else cb_05.Down := True;
					cb_00Click(cb_05);
					TMenuItem(Sender).Checked := cb_05.Down
				end 
				else AddSpop(TMenuItem(Sender).Caption, TMenuItem(Sender).Tag);	
			end;
		end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.LoadEpopList;
var
  I: Integer;
  Menu: TMenuItem;
begin
  SetDebugeWrite('JON01.LoadEpopList');
  try
    FEpopList.Clear;

    FEpopList.Add('도착지 좌표=도착지 좌표');
    FEpopList.Add('도착지 로드맵=도착지 로드맵');
    FEpopList.Add('-=-');
    FEpopList.Add('고객출발지로 저장=고객출발지로 저장');
    FEpopList.Add('고객도착지로 저장=고객도착지로 저장');
    FEpopList.Add('-=-');
    FEpopList.Add('도착지POI오류신고=도착지POI오류신고');
    FEpopList.Add('-=-');

    FEpopList.AddStrings(GS_UserBigoList);

    while pmEpop.Items.Count > 2 do
    begin
      if pmEpop.Items[0].Caption = '설정' then
        Break;

      Menu := pmEpop.Items[0];
      pmEpop.Items.Delete(0);
      Menu.Free;
    end;

    for I := 0 to FEpopList.Count - 1 do
    begin
      try
        Menu := TMenuItem.Create(pmEpop);
        Menu.Caption := FEpopList.Names[I];
        Menu.Enabled := True;
        Menu.Visible := True;
        Menu.OnClick := mniEpopClick;
        Menu.Tag     := i;
        pmEpop.Items.Insert(I, Menu);
      except on E: Exception do
        ShowMessage(E.Message);
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.mniEpopClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.mniEpopClick');
  AddEpop(TMenuItem(Sender).Caption, TMenuItem(Sender).Tag);
end;

procedure TFrm_JON01.AddEpop(AEpop: string; Atag: Integer);
var
  AddStr, OrgStr, sDesc, sSelBtn : string;
  iPos : Integer;
  IE : Variant;
  Value : Cardinal;
//  bIE :Boolean;
  sURL : String;
//  WinH : HWND;
//  fRect : TRect;
  iMainX, iMainY, iSubX, iSubY: Integer;
begin
  SetDebugeWrite('JON01.AddEpop');
  try
    if not Assigned(FCurrEpop) then
      FCurrEpop := meoEndArea;

    OrgStr := FCurrEpop.Lines.Text;  //원래 있던내용

    if Atag > 7 then
    begin
      iPos := Pos('│', FEpopList.Values[AEpop]);
      if iPos > 0 then
      begin
        sDesc   := Copy(FEpopList.Values[AEpop], 1, iPos - 1);
        sSelBtn := Copy(FEpopList.Values[AEpop], iPos + 1, Length(FEpopList.Values[AEpop]) - iPos);
      end else
      begin
        sDesc   := FEpopList.Values[AEpop];
      end;
      AddStr := '{' + sDesc + '}' + AddStr;
    end else
    if Atag = 0 then
    begin
      GBEndXYView.Visible := True;     //좌표
      pSet705CShareClickEvent('GBEndXYView', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
    end else
      if Atag = 1 then
      begin
        if cxtEndXval.Text <> '' then
        begin
          if RVHandle > 0 then
          begin
            PostMessage (RVHandle, WM_CLOSE, 0, 0);
            RVHandle := 0;
          end;

          try
//            DAUMROADVIEW_URL := 'http://dna.daum.net/include/tools/routemap/map_view.php?width=760&height=500&latitude=%s&longitude=%s&contents=%s&zoom=4';
//            DAUMROADVIEW_URL := 'http://map.daum.net/link/roadview/%s,%s';
            DAUMROADVIEW_URL := 'http://203.251.202.13:88/map/RoadView.html?x=%s&y=%s';
            sURL := Format(DAUMROADVIEW_URL, [Frm_JON30.SetWGS84(cxtEndXval.Text), Frm_JON30.SetWGS84(cxtEndYval.Text)]);

//            bIE := True;
            IE := CreateOleObject('InternetExplorer.Application');

            IE.Width := 780;
            IE.Height := 580;
            IE.AddressBar := True;
            IE.Navigate( sURL );

            while IE.ReadyState <> READYSTATE_COMPLETE do
              Application.ProcessMessages;

            IE.MenuBar := False;
            IE.ToolBar := False;
            IE.StatusBar := False;

            if Frm_Main.JON01MNG[Self.Tag].Dock then
            begin
              IE.Top := ((Frm_JON00.Top * 2 + Frm_JON00.Height) - IE.Height)/2;
              IE.Left := Frm_JON00.Left - IE.Width;
            end else
            begin
              IE.Top := ((Self.Top * 2 + Self.Height) - IE.Height)/2;
              IE.Left := Self.Left - IE.Width;
            end;

//            bIE := True;
            Value := IE.Hwnd;
            RegSetValue(HKEY_CURRENT_USER, 'HKSFA\IE_HWND', REG_DWORD, @Value, SizeOf(Cardinal));
            IE.Visible := true;
            SetForegroundWindow(Value);
            IE := Unassigned;
//
//            //로드뷰 자동클릭//
//            Try
//              WinH := FindAllInternetExplorer('IEFrame','http://dna.daum.net', True);
//              if WinH > 0 then
//              begin
//                RVHandle := WinH;
//                getWindowRect(WinH, fRect);
//                iMainX := fRect.Left + 719;
//                iMainY := fRect.Top  + 42;
//                iSubX  := iMainX;// + 42;
//                iSubY  := iMainY;// + 75;
//
//                SetCursorPos(iSubX, iSubY);
//                mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
//                mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
//              end;
//            except
//
//            End;
//            //로드뷰 자동클릭//
          except on E:Exception do
            begin
//              bIE := False;
              ShowMessage('test' + E.Message);
            end;
          end;
        end;
      end else
    if Atag = 3 then
    begin
      // 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
      Proc_Cust_AreaSave('START');
    end else
    if Atag = 4 then
    begin
      // 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
      Proc_Cust_AreaSave('DEST');
    end else
    if Atag = 6 then //도착지POI오류 신고
    begin
      Proc_POIRequest(1, lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption, lcsEndDocId, cxtEndYval.Text, cxtEndXval.Text);
    end
    else  AddStr := FEpopList.Values[AEpop] + AddStr;

    FCurrEpop.Lines.Text := AddStr + OrgStr;
  Except
    on e: exception do
    begin
      Log('AddEpop Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'AddEpop Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.LoadPayMethod;
var sBrNo : string;
begin
  SetDebugeWrite('Frm_JON01.LoadPayMethod');
  try
    cbbPayMethod.Properties.Items.Clear;

  	if (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (GT_SEL_BRNO.HDNO = 'A100'))  then //부산연합하트2K 20140221 KHS
  	begin
  		cbbPayMethod.Properties.Items.Add(PAY_METHOD_MONEY);
  		cbbPayMethod.Properties.Items.Add(PAY_METHOD_BUSAN);

  		if gsJON01AfterMoneyYN <> 'FALSE' then
  		begin
  			cbbPayMethod.Properties.Items.Add(PAY_METHOD_POST_NML);
  			cbbPayMethod.Properties.Items.Add(PAY_METHOD_POST_MILE);
  		end;
  		if gsJON01CreditMoneyYN <> 'FALSE' then
  			cbbPayMethod.Properties.Items.Add(PAY_METHOD_TRUST);
  		if IsCardUseBranch(Proc_BRNOSearch) then
  			cbbPayMethod.Properties.Items.Add(PAY_METHOD_CARD);
  		// KCP 카드 결제 지사 사용여부 체크. 2011-10-19.
			if (IsCardUseBranch_KCP(Proc_BRNOSearch) = '03') or
				 (IsCardUseBranch_KCP(Proc_BRNOSearch) = '06') then
				cbbPayMethod.Properties.Items.Add(PAY_METHOD_CARD_KCP);

			cbbPayMethod.Properties.Items.Add(PAY_METHOD_BUSAN2K);
  		cbbPayMethod.Properties.Items.Add(PAY_METHOD_BUSAN3K);
  	end	else
  	begin
      cbbPayMethod.Properties.Items.Add(PAY_METHOD_MONEY);
      if gsJON01AfterMoneyYN <> 'FALSE' then
      begin
        cbbPayMethod.Properties.Items.Add(PAY_METHOD_POST_NML);
        cbbPayMethod.Properties.Items.Add(PAY_METHOD_POST_MILE);
      end;

			if (GT_SEL_BRNO.HDNO = 'A1531') then
      begin
        //코리아드라이브 외상, 카드 결제수단 제외 2015.07.27 KHS(김계명과장 요청)
      end else
      begin
        if gsJON01CreditMoneyYN <> 'FALSE' then
          cbbPayMethod.Properties.Items.Add(PAY_METHOD_TRUST);

				if IsCardUseBranch(Proc_BRNOSearch) then
				begin
					{if (GS_PRJ_AREA = 'O') and ((Proc_BRNOSearch = 'U982') or (Proc_BRNOSearch = 'R548')) then
					else }	cbbPayMethod.Properties.Items.Add(PAY_METHOD_CARD);
				end;
//					cbbPayMethod.Properties.Items.Add(PAY_METHOD_CARD);
      end;

      // KCP 카드 결제 지사 사용여부 체크. 2011-10-19.
			if (IsCardUseBranch_KCP(Proc_BRNOSearch) = '03') or
				 (IsCardUseBranch_KCP(Proc_BRNOSearch) = '06') then
			begin
				{if (GS_PRJ_AREA = 'O') and ((Proc_BRNOSearch = 'U982') or (Proc_BRNOSearch = 'R548')) then
				else }	cbbPayMethod.Properties.Items.Add(PAY_METHOD_CARD_KCP);
			end;
		end;

    if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

    cbbPaymethod.ItemIndex := 0;

		if (IsCardUseBranch_KCP(Proc_BRNOSearch) = '03') or
			 (IsCardUseBranch_KCP(Proc_BRNOSearch) = '06') then
		begin
			cbCardSanction.Caption := '현금영수';
			cbCardSanction.Enabled := True;
		end else
		begin
			cbCardSanction.Enabled := False;
			cbCardSanction.Caption := '카드결제';
		end;

		//부산오천콜 요청사항. 특정지사 오더금액 90만원까지 늘림
		sBrNo := Proc_BRNOSearch;
		if (GS_PRJ_AREA = 'O') and ((sBrNo = 'P981') or (sBrNo = 'B100')) then 
				 curRate.Properties.MaxValue := 900000
		else
		if (GS_PRJ_AREA = 'S') and ((sBrNo = 'M628') or (sBrNo = 'B100')) then    //정승훈팀장님 요청 20181025 KHS
				 curRate.Properties.MaxValue := 999000
		else curRate.Properties.MaxValue := 700000;
		
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.LoadPostTime;
begin
  try
    cbbPostTime.Properties.Items.Clear;

    //  후불일경우에만 입금방식 추가해줬었는데 부산오천콜 작업하면서 현금이면서 입금방식이 변경될수도 있으므로 해제 처리  2015.01.20 LYB
//--    if IsPayMethodPost then
    begin
      cbbPostTime.Properties.Items.Add(POST_TIME_NOPAY);
      cbbPostTime.Properties.Items.Add(POST_TIME_TOMORROW);
      cbbPostTime.Properties.Items.Add(POST_TIME_FIN20);
      cbbPostTime.Properties.Items.Add(POST_TIME_FIN60);

{    end else
    begin
      cbbPostTime.Properties.Items.Add(POST_TIME_NOPAY);}
    end;

    cbbPostTime.ItemIndex := 0;
    // 2011.03.02 후불기본값 cbbPayMethodPropertiesChange 에서 이후에 로드(GT_USERIF.AfterPayMidx)
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01.IsPayMethodPost: Boolean;
begin
	Result := Pos('후불', cbbPayMethod.Text) > 0;
end;

function TFrm_JON01.IsUseCoupon(ABrNo: string): Boolean;
var
	Idx: Integer;
begin
	Result := False;

	Idx := scb_BranchCode.IndexOf(ABrNo);
	if Idx < 0 then
		Exit;

	Result := (scb_BranchCoupon[Idx] = 'y');
end;

procedure TFrm_JON01.LbDriverChargeClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.LbDriverChargeClick');
  if cxDriverCharge.Enabled then cxDriverCharge.SetFocus;
end;

procedure TFrm_JON01.lblCuBubinNameMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01.lblCurPathRateClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.lblCurPathRateClick');
  if cxCurPathRate.Enabled then cxCurPathRate.SetFocus;
end;

procedure TFrm_JON01.lblCurRevisionRateClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.lblCurRevisionRateClick');
  if cxCurRevisionRate.Enabled then cxCurRevisionRate.SetFocus;
end;

procedure TFrm_JON01.lblNewCustYNClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.lblNewCustYNClick');
  pnlNewCustYN.Visible := False; // 신규고객여부의 정보창 닫음.
end;

procedure TFrm_JON01.LblPostPayClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.LblPostPayClick');
   if EdtPostPay.Enabled then EdtPostPay.SetFocus;
end;

procedure TFrm_JON01.lblStartAreaNamePropertiesChange(Sender: TObject);
begin
  if (lblStartAreaName.Text <> '') and (meoStartArea.Text <> '') then
    btnStartLocalSave.Enabled := True
  else
    btnStartLocalSave.Enabled := False;
end;

procedure TFrm_JON01.LbmeoBigo2Click(Sender: TObject);
begin
  SetDebugeWrite('JON01.LbmeoBigo2Click');
  meoBigo2.SetFocus;
end;

procedure TFrm_JON01.LbmeoBigo3Click(Sender: TObject);
begin
  SetDebugeWrite('JON01.LbmeoBigo2Click');
  meoBigo3.SetFocus;
end;

procedure TFrm_JON01.LbmeoBigoClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.LbmeoBigoClick');
	meoBigo.SetFocus;
end;

procedure TFrm_JON01.Proc_WTRateMenu_Click(Sender: TObject);
var
  iRate: integer;
  sTitle: string;
begin
  SetDebugeWrite('JON01.Proc_WTRateMenu_Click');
  // 메뉴 식별자 읽기..
  iRate := TMenuItem(Sender).Tag;
  sTitle := LeftStr(TMenuItem(Sender).Caption, 5);
  cxTmWaitTime.Text := sTitle;
  cxCurWaitTmRate.Value := iRate;
end;

// 대기시간별 요금 메뉴 생성.
procedure TFrm_JON01.Proc_WTRMenuCreate(sTitle, sComponentName: string; iTagMoney: Integer);
var
  mm: TMenuItem;
begin
  SetDebugeWrite('JON01.Proc_WTRMenuCreate');
  mm := TMenuItem.Create(advPMnuWTR);
  mm.AutoHotkeys := maManual;
  mm.Caption := sTitle;
  mm.Name := 'mm_' + sComponentName;
  mm.Tag := iTagMoney; // 메뉴식별ID 값.
  mm.OnClick := Proc_WTRateMenu_Click; // 메뉴클릭 이벤트 생성.
  advPMnuWTR.Items.Add(mm); // 메인 타이틀의 서브 메뉴 생성.
end;

procedure TFrm_JON01.tmFormCloseTimer(Sender: TObject);
begin
  tmFormClose.Enabled := False; // timer end.
  SetDebugeWrite('JON01.tmFormCloseTimer');
  if tmFormClose.Tag = 99 then
  begin // 화면 닫기 or LOCK 해제 한다.
    if loc_TmClose = 'CLOSE' then
    begin
      btnCmdExitClick(Self);
    end else
    if loc_TmClose = 'UNLOCK' then
    begin
      Proc_AcceptLock('2'); // 해당오더의 Lock을 해제 한다.
    end;
  end;
end;

procedure TFrm_JON01.tmHoTranRltTimer(Sender: TObject);
begin
  tmHoTranRlt.Enabled := False;
	SetDebugeWrite('JON01.tmHoTranRltTimer');

  if tmHoTranRlt.Interval = 50 then
  begin
    btnCmdExitClick(Self)
      // 호전환이 성공적으로 수행 되었으므로, 접수화면 자동종료 한다.
  end else
  begin
		frm_Main.proc_bubinlist_insert; // 법인정보 자동 갱신한다.
		SearchCuTel(Caption = '수정');
	end;
end;

procedure TFrm_JON01.tmLockMentTimer(Sender: TObject);
begin
	SetDebugeWrite('Frm_JON01.tmLockMent');
	// 지사별 상담 멘트를 닫는다.
	tmLockMent.Enabled := False;

	pnl_LockMent.Visible := False;
	pnl_AIStart.visible := False;
	pnl_AIOB.visible := False;
end;

procedure TFrm_JON01.tmMentTimer(Sender: TObject);
begin
  SetDebugeWrite('JON01.tmMentTimer');
  // 지사별 상담 멘트를 닫는다.
  tmMent.Enabled := False;
  if tmMent.Interval = 5000 then
  begin
    pnlBrNoMent.Visible := False; // 지사 안내멘트 닫음.
    pnlNewCustYN.Visible := False; // 신규고객여부의 정보창 닫음.
  end else
  begin
    pnl_charge.Visible := False;
    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then
    begin
      if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height + 25
                                                  else PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height;
    end;
  end;
end;

procedure TFrm_JON01.tmrAutoCallTimer(Sender: TObject);
begin
  tmrAutoCall.Enabled := False;
  if Trim(locKNum) <> '' then
   	Proc_AutoCallSearch(locKNum, True)
  else
   	Proc_AutoCallSearch(Proc_MainKeyNumberSearch, True);
end;

procedure TFrm_JON01.tmrChargeTimer(Sender: TObject);
Var oOderWorker, oWeather, iType, oType : String;
    iSmartRate, iRate : Integer;
    bOpen : Boolean;
begin
  SetDebugeWrite('JON01.tmrChargeTimer');
  try
    tmrCharge.Enabled := False;

    // 쓰레드에서 라벨에 표시해주면 핸들오류가 나서 쓰레드 끝나고 라벨에 표시처리
    if GT_DISTANCE_ST = 1 then
    begin
      curKm.Text := FloatToStr(fCruKm) + 'Km';

      if Not bViaKm then
        Lbl_Distance.Caption := Format('경탐)%s 직선)%s', [curKm.Text, FloatToStr(fChgKm) + 'Km'])
      else
        Lbl_Distance.Caption := Format('경탐)%s-%s 직선)%s', [curKm.Text, FloatToStr(fViaKm) + 'Km', FloatToStr(fChgKm) + 'Km']);

      SetPosLblDistance;
    end;

    // 거리 계산이 끝난후 요금 계산을 한다.
    if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
    begin
      iRate := func_search_charge;
      if Not gsMyMainRateNoChange then
      begin
        if BtnRaLock.Hint <> 'F4)잠금' then
				begin
					curRate.Value := iRate;
					OrgRate := curRate.Value;
				end else
				begin
					if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱점수', Self.Caption) > 0 ) then             //요금항목 잠금알림 메세지처리
					begin
						if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
						begin
							tmLockMent.Enabled := False;
							if ChkMini.Checked then
							begin
								lb_LockMent.Caption := '요금항목이 잠겨있습니다.';
								pnl_LockMent.Width := 391;
								imgLockMent.Visible := False;
							end else
							begin
								lb_LockMent.Caption := '요금항목이 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
								pnl_LockMent.Width := 585;
								imgLockMent.Visible := True;
							end;
							lb_LockMent.Font.Color := clYellow;
							imgLockMent.left := 334;
							pnl_LockMent.Top := GBTop5.Top + curRate.Top + curRate.Height;//417//193;//276;
							pnl_LockMent.Left := 8;
							pnl_LockMent.Color := clBlack;
							if not pnl_LockMent.Visible then pnl_LockMent.Visible := True;
							tmLockMent.Interval := 2000;
							tmLockMent.Enabled := True;
							BtnRaLock.Tag := 99; //한번 알림 뜨면 다시는 안뜨게 함.
						end;
					end;
				end;
      end;
      SetDebugeWrite('JON01.tmrChargeTimer 1');
    end else
    begin
      ///////////////////////////////////////////////////////////////
      // (#2) 스마트요금제 계산
      ///////////////////////////////////////////////////////////////
      if GT_RealTimeWorker then oOderWorker := ''
                           else oOderWorker := '0';

      if GT_RealTimeWeather then oWeather := ''
                            else oWeather := '0';

      iType := '';//검색타입 '동-동' 접수창에서는 무조건 동-동으로 조회

//      if GB_DEBUG_USE then Log(oOderWorker + oWeather +
//                                       lcsSta1 + lcsSta2 + lcsSta3 + meoStartArea.Text + cxtStartXval.Text + cxtStartYval.Text +
//                                       lcsEnd1 + lcsEnd2 + lcsEnd3 + meoEndArea.Text + cxtEndXval.Text + cxtEndYval.Text + iType, LOGDATAPATHFILE);

      iSmartRate := fJON01_SmartCharge(oOderWorker, oWeather,
                                       lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text,
                                       lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, iType, oType);

      if oType = 'DD' then oType := '동->동' else
      if oType = 'DG' then oType := '동->구' else
      if oType = 'GD' then oType := '구->동' else
      if oType = 'GG' then oType := '구->구' else
      if oType = 'GS' then oType := '구->시';

      bOpen := False;
      if ( curRate.Value = 0 ) Or ( curRate.Value <> iSmartRate ) then
      begin
        if GT_AutoSmartCharge then // 0원이거나 요금이 다를경우 스마트요금 접수창요금 자동적용
        begin
          Lbl_Charge.Caption := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
					if BtnRaLock.Hint <> 'F4)잠금' then
						curRate.Value := iSmartRate;
        end;

        if GT_PopUpSmartCharge then // 0원이거나 요금이 다를경우 스마트요금창 자동팝업
        begin
          if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
               (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
               (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
          begin
          end else
          begin
            bOpen := True;
            BtnSmartRate.Click;
            if curRate.CanFocus then curRate.SetFocus;
          end;
        end;
      end;

      if GB_JON_SMARTRATEUSE then
      begin
        Lbl_Charge.Caption := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
        if BtnRaLock.Hint <> 'F4)잠금' then
					curRate.Value := iSmartRate;
      end;

      if ( GT_AllPopUpSmartCharge ) And ( Not bOpen )  then // 스마트요금창 자동팝업
      begin
        if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
             (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
             (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
        begin
        end else
        begin
          BtnSmartRate.Click;
          if curRate.CanFocus then curRate.SetFocus;
        end;
      end;
    end;

    if curRate.Focused then curRate.SelectAll;    
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.tmrCShareTimer(Sender: TObject);
begin
  tmrCShare.Enabled := False;
  try
    if ( ( pnlRShare.Visible ) Or ( pnlRShare.Tag = 1 ) ) then
    begin
      tmrCShare.Interval := 1500;
      if lblCShareJId.Hint = GT_USERIF.ID then
      begin
        pSet705CShareData(False, 'n', 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
      end else
      if lblCShareRId.Hint = GT_USERIF.ID then
      begin
        pSet705CShareData(False, 'n', 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
      end;
    end else
    begin
//      tmrCShare.Interval := 3000;
//      pSet701CShareValue(Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
    end;
  finally
    tmrCShare.Enabled := True;
  end;
end;

procedure TFrm_JON01.tmrDisAcTimer(Sender: TObject);
Var iRate : Integer;
begin
  SetDebugeWrite('JON01.tmrDisAcTimer');
  try
    tmrDisAc.Enabled := False;

    if (cxtStartXval.Text = '') or (cxtStartYval.Text = '') or
  		 (cxtEndXval  .Text = '') or (cxtEndYval  .Text = '') then Exit;

    if GT_DISTANCE_ST = 0 then proc_dis_alculation(Self.Tag, True);

    if not IsNotModifyPrice and (GT_CHARGE_CAL = 0) then
  	begin
  		if ((lcsSta1 <> '') and (lcsSta2 <> '') and (lcsEnd1 <> '') and (lcsEnd2 <> '')) then
      begin
        // 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
  			if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
  			begin
          tmrThRealDis.Tag := 0;
          proc_dis_alculation(Self.Tag, True);
          if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                                 else begin
                                        iRate := func_search_charge;
                                        if Not gsMyMainRateNoChange then
                                        begin
                                          if BtnRaLock.Hint <> 'F4)잠금' then
																					begin
																						curRate.Value := iRate;
																						OrgRate := curRate.Value;
																					end;
                                        end;
                                      end;
        end;
      end;
    end;

    // 복수콜일경우 자동 계산 처리 2014.06.18 LYB
    if (Assigned(Frm_JON015) and Frm_JON015.HandleAllocated) and
       (Frm_JON015.Count > 0) and (Frm_JON015.OrderHandle = Self.Handle) then
    begin
      if gsMyRateRemarkMaintain <> 'FALSE' then
      begin
        tmrThRealDis.Tag := 0;
        proc_dis_alculation(Self.Tag, True);
        if GT_DISTANCE_ST = 1  then
           proc_Realdis_Mng
  //        proc_Realdis_alculation;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.tmrDistanceTimer(Sender: TObject);
Var iRate : Integer;
begin
	SetDebugeWrite('JON01.tmrDistanceTimer');
  try
    tmrDistance.Enabled := False;

    if not IsNotModifyPrice and (GT_CHARGE_CAL = 1) then
    begin
      // 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
  		if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
      begin
        tmrThRealDis.Tag := 0;
        proc_dis_alculation(Self.Tag, True);
        if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                               else begin
                                      iRate := func_search_charge;
																			if Not gsMyMainRateNoChange then
                                      begin
																				if BtnRaLock.Hint <> 'F4)잠금' then
																				begin
																					curRate.Value := iRate;
																					OrgRate := curRate.Value;
																				end else
																				begin
																					if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
																					begin
																						if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
																						begin
																							tmLockMent.Enabled := False;
																							if ChkMini.Checked then
																							begin
																								lb_LockMent.Caption := '요금항목이 잠겨있습니다.';
																								pnl_LockMent.Width := 391;
																								imgLockMent.Visible := False;
																							end else
																							begin
																								lb_LockMent.Caption := '요금항목이 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
																								pnl_LockMent.Width := 585;
																								imgLockMent.Visible := True;
																							end;
																							lb_LockMent.Font.Color := clYellow;
																							imgLockMent.left := 334;
																							pnl_LockMent.Top := GBTop5.Top + curRate.Top + curRate.Height;//417//193;//276;
																							pnl_LockMent.Left := 8;
																							pnl_LockMent.Color := clBlack;
																							if not pnl_LockMent.Visible then pnl_LockMent.Visible := True;
																							tmLockMent.Interval := 2000;
																							tmLockMent.Enabled := True;
																							BtnRaLock.Tag := 99; //한번 알림 뜨면 다시는 안뜨게 함.
																						end;
																					end;
																				end;
                                      end;
                                    end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.tmrKeyDownTimer(Sender: TObject);
Var ls_Text : AnsiString;
    iSpace : Integer;
begin
  SetDebugeWrite('JON01.tmrKeyDownTimer');
  try
    tmrKeyDown.Enabled := False;

    if lcsActiveEdit = 'meoStartArea' then
      ls_Text := meoStartArea.Text ;
    if lcsActiveEdit = 'meoEndArea' then
      ls_Text := meoEndArea.Text   ;
  	if lcsActiveEdit = 'meoViaArea' then
  	begin
  		if GS_VIA_Tag = 1 then
  			ls_Text := meoViaArea1.Text
  		else
  			ls_Text := meoViaArea[GS_VIA_Tag].Text;
  	end;
  	if lcsActiveEdit = 'meoStartAreaCUT' then
      ls_Text := Frm_CUT011.meoStartAreaCUT.Text;
    if lcsActiveEdit = 'meoEndAreaCUT' then
      ls_Text := Frm_CUT011.meoEndAreaCUT.Text;

    if ( pos('인근', ls_Text) > 1 ) And ( Length(ls_Text) >= 4 ) then
    begin
      ls_Text := Copy(ls_Text, 1, pos('인근', ls_Text) - 1);
    end;

    if ( pos('부근', ls_Text) > 1 ) And ( Length(ls_Text) >= 4 ) then
    begin
      ls_Text := Copy(ls_Text, 1, pos('부근', ls_Text) - 1);
    end;

    if ( pos('근처', ls_Text) > 1 ) And ( Length(ls_Text) >= 4 ) then
    begin
      ls_Text := Copy(ls_Text, 1, pos('근처', ls_Text) - 1);
    end;

    if ( Copy(ls_Text,Length(ls_Text),1) = '근' ) And ( Length(ls_Text) >= 4 ) then
    begin
      ls_Text := Copy(ls_Text, 1, Length(ls_Text)-1);
    end;

    ls_Text := Frm_JON30.Proc_AreaSearch_KWBaseComp(ls_Text);

    // '@' 를 '아파트' 로 치환.
    ls_Text := FastReplace(ls_Text, '@', '아파트', False);

    if Pos('번지', ls_Text) > 0  then
    begin
      ls_Text := FastReplace(ls_Text, '번지', '', False);
    end else
    // '4' 를 '사거리' 로 치환.
    if Copy(ls_Text,Length(ls_Text),1) = '4' then
    begin
      if ( Not StrToIntDef(RightStr(Trim(Copy(ls_Text,Length(ls_Text)-1, 1)), 1), -1) In [0,1,2,3,4,5,6,7,8,9] ) And
         ( RightStr(Trim(Copy(ls_Text,Length(ls_Text)-1, 1)), 1) <> '-' ) then
        ls_Text := CopyStr(ls_Text, 1, Length(ls_Text)-1) + '사거리';
    end;

    iSpace := System.AnsiStrings.AnsiPos(' ', ls_Text);

    ls_Text := Frm_JON30.fnc_TruncChar(ls_Text);

    if iSpace > 0 then
    begin
      Insert(' ', ls_Text, iSpace);
      SetDebugeWrite('JON01 iSpace ls_Text : ' + ls_Text + IntToStr(iSpace));
    end;

    ls_Text := lcsActiveEdit + ls_Text;  // 영타를 한글로 교정시 소문자만 인식

    SetDebugeWrite(lcsActiveEdit + '--' + LowerCase(gslsText) + ' --- ' + LowerCase(ls_Text));

    if ( LowerCase(gslsText) = LowerCase(ls_Text) ) then
    begin
      PnlPOISch.Visible := False;
    end;
    Inc(gilsCnt);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.tmrRateTimer(Sender: TObject);
begin
  if tmrRate.Tag mod 2 = 0 then pnl_charge.Color := $008000FF
                           else pnl_charge.Color := $00FF8000;
  tmrRate.Tag := tmrRate.Tag + 1;

  if tmrRate.Tag > 6 then
  begin
    tmrRate.Enabled := False;
    pnl_charge.Color := $008000FF;
  end;
end;

procedure TFrm_JON01.tmrResponseTimer(Sender: TObject);
Var sError : String;
begin
  SetDebugeWrite('JON01.tmrResponseTimer');
  tmrResponse.Enabled := False;

  SetDebugeWrite( 'tmrResponseTimer : ' + sRespSParam1 + '/' + sRespSParam2 + '/' + sRespSParam3 + '/' + sRespEParam1 + '/' + sRespEParam2 + '/' + sRespEParam3);

  try
    if Trim(sRespSParam1) <> '' then
    begin
      proc_WiseNut_Response(sRespSParam1, sRespSParam2, sRespSParam3);

      sRespSParam1 := '';
      sRespSParam2 := '';
      sRespSParam3 := '';
    end;

    Sleep(50);

    if Trim(sRespEParam1) <> '' then
    begin
      proc_WiseNut_Response(sRespEParam1, sRespEParam2, sRespEParam3);

      sRespEParam1 := '';
      sRespEParam2 := '';
      sRespEParam3 := '';
    end;

  Except
    on e: Exception do
    begin
      sError := 'JON01[proc_WiseNut_Response]오더저장:' + e.message;
      Log(sError, LOGDATADIRECTORY + 'Accept_Err.log');
    end;
  end;
end;

procedure TFrm_JON01.tmrStartPosTimer(Sender: TObject);
begin
  SetDebugeWrite('JON01.tmrStartPosTimer');
  tmrStartPos.Enabled := False;
  if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
  try
    if Frm_JON31.Showing then
      Frm_JON31.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text);
  except
    Frm_JON31.Close;
  end;
end;

procedure TFrm_JON01.tmrThRealDisTimer(Sender: TObject);
begin
  SetDebugeWrite('JON01.tmrThRealDisTimer');
  tmrThRealDis.Enabled := False;
  tmrThRealDis.Interval := 1000;

  Application.ProcessMessages;
  SetDebugeWrite('tmrThRealDisTimer Start ');
  try
    case Self.Tag of
    0 : begin
          if ( Not RealKmPtr00_th1.CaActive ) And ( Not RealKmPtr00_th2.CaActive ) And
             ( Not RealKmPtr00_th3.CaActive ) And ( Not RealKmPtr00_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    1 : begin
          if ( Not RealKmPtr01_th1.CaActive ) And ( Not RealKmPtr01_th2.CaActive ) And
             ( Not RealKmPtr01_th3.CaActive ) And ( Not RealKmPtr01_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    2 : begin
          if ( Not RealKmPtr02_th1.CaActive ) And ( Not RealKmPtr02_th2.CaActive ) And
             ( Not RealKmPtr02_th3.CaActive ) And ( Not RealKmPtr02_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    3 : begin
          if ( Not RealKmPtr03_th1.CaActive ) And ( Not RealKmPtr03_th2.CaActive ) And
             ( Not RealKmPtr03_th3.CaActive ) And ( Not RealKmPtr03_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';			

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    4 : begin
          if ( Not RealKmPtr04_th1.CaActive ) And ( Not RealKmPtr04_th2.CaActive ) And
             ( Not RealKmPtr04_th3.CaActive ) And ( Not RealKmPtr04_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    5 : begin
          if ( Not RealKmPtr05_th1.CaActive ) And ( Not RealKmPtr05_th2.CaActive ) And
             ( Not RealKmPtr05_th3.CaActive ) And ( Not RealKmPtr05_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    6 : begin
          if ( Not RealKmPtr06_th1.CaActive ) And ( Not RealKmPtr06_th2.CaActive ) And
             ( Not RealKmPtr06_th3.CaActive ) And ( Not RealKmPtr06_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    7 : begin
          if ( Not RealKmPtr07_th1.CaActive ) And ( Not RealKmPtr07_th2.CaActive ) And
             ( Not RealKmPtr07_th3.CaActive ) And ( Not RealKmPtr07_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    8 : begin
          if ( Not RealKmPtr08_th1.CaActive ) And ( Not RealKmPtr08_th2.CaActive ) And
             ( Not RealKmPtr08_th3.CaActive ) And ( Not RealKmPtr08_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    9 : begin
          if ( Not RealKmPtr09_th1.CaActive ) And ( Not RealKmPtr09_th2.CaActive ) And
             ( Not RealKmPtr09_th3.CaActive ) And ( Not RealKmPtr09_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    10 : begin
          if ( Not RealKmPtr10_th1.CaActive ) And ( Not RealKmPtr10_th2.CaActive ) And
             ( Not RealKmPtr10_th3.CaActive ) And ( Not RealKmPtr10_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    11 : begin
          if ( Not RealKmPtr11_th1.CaActive ) And ( Not RealKmPtr11_th2.CaActive ) And
             ( Not RealKmPtr11_th3.CaActive ) And ( Not RealKmPtr11_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    12 : begin
          if ( Not RealKmPtr12_th1.CaActive ) And ( Not RealKmPtr12_th2.CaActive ) And
             ( Not RealKmPtr12_th3.CaActive ) And ( Not RealKmPtr12_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    13 : begin
          if ( Not RealKmPtr13_th1.CaActive ) And ( Not RealKmPtr13_th2.CaActive ) And
             ( Not RealKmPtr13_th3.CaActive ) And ( Not RealKmPtr13_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    14 : begin
          if ( Not RealKmPtr14_th1.CaActive ) And ( Not RealKmPtr14_th2.CaActive ) And
             ( Not RealKmPtr14_th3.CaActive ) And ( Not RealKmPtr14_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    15 : begin
          if ( Not RealKmPtr15_th1.CaActive ) And ( Not RealKmPtr15_th2.CaActive ) And
             ( Not RealKmPtr15_th3.CaActive ) And ( Not RealKmPtr15_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    16 : begin
          if ( Not RealKmPtr16_th1.CaActive ) And ( Not RealKmPtr16_th2.CaActive ) And
             ( Not RealKmPtr16_th3.CaActive ) And ( Not RealKmPtr16_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    17 : begin
          if ( Not RealKmPtr17_th1.CaActive ) And ( Not RealKmPtr17_th2.CaActive ) And
             ( Not RealKmPtr17_th3.CaActive ) And ( Not RealKmPtr17_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    18 : begin
          if ( Not RealKmPtr18_th1.CaActive ) And ( Not RealKmPtr18_th2.CaActive ) And
             ( Not RealKmPtr18_th3.CaActive ) And ( Not RealKmPtr18_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    19 : begin
          if ( Not RealKmPtr19_th1.CaActive ) And ( Not RealKmPtr19_th2.CaActive ) And
             ( Not RealKmPtr19_th3.CaActive ) And ( Not RealKmPtr19_th4.CaActive ) then
          begin
            SetDebugeWrite('tmrThRealDisTimer End ');

            giRealKmCnt := 0;
            giRealKmIdx := 1;
            giKmComplet := True;
            giKmComPletG := 'OK';

            if tmrThRealDis.Tag = 1 then BtnSR.Click;
            Exit;
          end;
        end;
    end;

    if ( giRealKmIdx > 4 ) And  ( giRealKmCnt > 20 ) then
    begin
      // 4회 검색후에도 자료가 없으면 직선거리 처리
      curKm.Text := FloatToStr(fChgKm) + 'Km';
      fCruKm := fChgKm;
      fTotalTime := 0;   // 직선거리이면 소요시간 0
      Lbl_Distance.Caption := Format(' 직선)%s', [FloatToStr(fCruKm) + 'Km']);
      Application.ProcessMessages;

      giKmComplet := True;
      giViaKmComplet := False;
      giKmComPletG := 'NO';
      tmrCharge.Enabled := True;

      if tmrThRealDis.Tag = 1 then BtnSR.Click;
      proc_RealKmPtr_Init;
      Exit;
    end;

    if ( giRealKmCnt mod 3 ) = 0 then
    begin

      //=============================
      case Self.Tag of
      0 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr00_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr00_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr00_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr00_th4);
          end;
      1 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr01_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr01_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr01_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr01_th4);
          end;
      2 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr02_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr02_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr02_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr02_th4);
          end;
      3 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr03_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr03_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr03_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr03_th4);
          end;
      4 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr04_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr04_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr04_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr04_th4);
          end;
      5 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr05_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr05_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr05_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr05_th4);
          end;
      6 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr06_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr06_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr06_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr06_th4);
          end;
      7 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr07_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr07_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr07_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr07_th4);
          end;
      8 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr08_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr08_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr08_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr08_th4);
          end;
      9 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr09_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr09_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr09_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr09_th4);
          end;
      10 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr10_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr10_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr10_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr10_th4);
          end;
      11 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr11_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr11_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr11_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr11_th4);
          end;
      12 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr12_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr12_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr12_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr12_th4);
          end;
      13 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr13_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr13_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr13_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr13_th4);
          end;
      14 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr14_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr14_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr14_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr14_th4);
          end;
      15 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr15_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr15_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr15_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr15_th4);
          end;
      16 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr16_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr16_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr16_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr16_th4);
          end;
      17 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr17_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr17_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr17_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr17_th4);
          end;
      18 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr18_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr18_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr18_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr18_th4);
          end;
      19 : begin
            if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr19_th1);
            if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr19_th2);
            if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr19_th3);
            if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr19_th4);
          end;
      end;

      Inc(giRealKmIdx);
    end;
    tmrThRealDis.Enabled := True;
    Inc(giRealKmCnt);
  Except
    begin
      tmrThRealDis.Enabled := False;

      if tmrThRealDis.Tag = 0 then curKm.Text := '';
      giRealKmCnt := 0;
      giRealKmIdx := 1;
      giKmComplet := True;
      giKmComPletG := 'NO';

      Exit;
    end;
  end;
end;

procedure TFrm_JON01.ptmrThRealDisTimer( Var RealKmPtr : TRealKmRecord);
Var sStartX, sStartY, sEndX, sEndY : String;
    JON01SPTh : TJON01SPThread;
    i : Integer;
begin
  try
    EnterCriticalSection(CS);
    try
      RealKmPtr.UseYn := False;
      RealKmPtr.CaActive := True;

      RealKmPtr.Tag := Self.Tag;
      RealKmPtr.thId := 1;

      RealKmPtr.StartAreaName := meoStartArea.Text;
      RealKmPtr.EndAreaName := meoEndArea.Text;

      if giRealKmIdx = 1 then
      begin
        if (cxtStartGUIDEYval.Text = '') or (copy(cxtStartGUIDEYval.Text,1,3) = '000') then
        begin
          sStartX := cxtStartXval.Text;
          sStartY := cxtStartYval.Text;
        end  else
        begin
          sStartX := cxtStartGUIDEXval.Text;
          sStartY := cxtStartGUIDEYval.Text;
        end;

        for i := 0 to 4 do
        begin
          if ( XposVia[i+1] <> '' ) And ( YposVia[i+1] <> '' ) then
          begin
            RealKmPtr.ViaYVal[i] := YposVia[i+1];
            RealKmPtr.ViaXVal[i] := XposVia[i+1];
          end;
        end;

        if (cxtEndGUIDEYval.Text = '') or (copy(cxtEndGUIDEYval.Text,1,3) = '000') then
        begin
          sEndX := cxtEndXval.Text;
          sEndY := cxtEndYval.Text;
        end else
        begin
          sEndX := cxtEndGUIDEXval.Text;
          sEndY := cxtEndGUIDEYval.Text;
        end;
      end else
      begin
        if (cxtStartGUIDEYval.Text = '') or (copy(cxtStartGUIDEYval.Text,1,3) = '000') then
        begin
          sStartX := '0' + IntToStr(StrToIntDef(cxtStartXval.Text, 0) + ( (giRealKmIdx-1) * 400));
          sStartY := IntToStr(StrToIntDef(cxtStartYval.Text, 0) + ( (giRealKmIdx-1) * 400));
        end else
        begin
          sStartX := '0' + IntToStr(StrToIntDef(cxtStartGUIDEXval.Text, 0) + ( (giRealKmIdx-1) * 400));
          sStartY := IntToStr(StrToIntDef(cxtStartGUIDEYval.Text, 0) + ( (giRealKmIdx-1) * 400));
        end;

        for i := 0 to 4 do
        begin
          if ( XposVia[i+1] <> '' ) And ( YposVia[i+1] <> '' ) then
          begin
            RealKmPtr.ViaXVal[i] := '0' + IntToStr(StrToIntDef(XposVia[i+1], 0) + ( (giRealKmIdx-1) * 400));
            RealKmPtr.ViaYVal[i] := IntToStr(StrToIntDef(YposVia[i+1], 0) + ( (giRealKmIdx-1) * 400));
          end;
        end;

        if (cxtEndGUIDEYval.Text = '') or (copy(cxtEndGUIDEYval.Text,1,3) = '000') then
        begin
          sEndX := '0' + IntToStr(StrToIntDef(cxtEndXval.Text, 0) + ( (giRealKmIdx-1) * 400));
          sEndY := IntToStr(StrToIntDef(cxtEndYval.Text, 0) + ( (giRealKmIdx-1) * 400));
        end else
        begin
          sEndX := '0' + IntToStr(StrToIntDef(cxtEndGUIDEXval.Text, 0) + ( (giRealKmIdx-1) * 400));
          sEndY := IntToStr(StrToIntDef(cxtEndGUIDEYval.Text, 0) + ( (giRealKmIdx-1) * 400));
        end;
      end;

      RealKmPtr.StartXVal := sStartX;
      RealKmPtr.StartYVal := sStartY;

      RealKmPtr.EndXVal := sEndX;
      RealKmPtr.EndYVal := sEndY;

      if tmrThRealDis.Tag = 0 then
      begin
        if giRealKmIdx = 1 then curKm.Text := '검색중..'
                           else curKm.Text := '검색' + IntToStr(giRealKmIdx) + '..';
      end;

      try
        JON01SPTh := TJON01SPThread.Create(Self.Tag, giRealKmIdx);
        JON01SPTh.FreeOnTerminate := False;
      except

      end;
      //=========================
    finally
      LeaveCriticalSection(CS);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.tmrWKSearchTimer(Sender: TObject);
begin
  SetDebugeWrite('JON01.tmrWKSearchTimer');
  tmrWKSearch.Enabled := False;

  if tmrXYChange.Tag = 0 then
    Frm_JON30.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text) else
  if tmrXYChange.Tag = 1 then
    Frm_JON30.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
end;

procedure TFrm_JON01.tmrXYChangeTimer(Sender: TObject);
var
  i: Integer;
  sErrMsg : String;
begin
  SetDebugeWrite('JON01.tmrXYChangeTimer');
  try
    tmrXYChange.Enabled := False;

  	// 수정모드 일때 요금 계산을 막음.
    if loc_RateNOT = True then Exit;

    if not Self.Visible then Exit;

  	if tmrXYChange.Tag = 0 then
  	begin
    	if ( gJONStaChkXY.X <> cxtStartXval.Text ) And (  cxtStartXval.Text <> '' ) then
  		begin
  			if ( gJONStaChkXY.X <> '' ) And ( gJONStaChkXY.Y <> '' ) And ( gJONStaChkXY.Area1 <> '') And ( cxtStartXval.Text <> '' ) then
        begin
  				sErrMsg := '[비-출좌 X] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + '-' + gJONStaChkXY.Gubun;
  				Assert(False, sErrMsg);
//          Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
        end else
        begin
  				sErrMsg := '[비-출좌 X] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + '-' + gJONStaChkXY.Gubun;
  				Assert(False, sErrMsg);
//          Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
        end;
      end;

      if ( gJONStaChkXY.Y <> cxtStartYval.Text )  And (  cxtStartYval.Text <> '' ) then
      begin
        if ( gJONStaChkXY.X <> '' ) And ( gJONStaChkXY.Y <> '' ) And ( gJONStaChkXY.Area1 <> '') And ( cxtStartYval.Text <> '' ) then
        begin
          sErrMsg := '[비-출좌 Y] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + '-' + gJONStaChkXY.Gubun;
          Assert(False, sErrMsg);
//          Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
        end else
        begin
          sErrMsg := '[비-출좌 Y] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + '-' + gJONStaChkXY.Gubun;
  				Assert(False, sErrMsg);
//  				Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
        end;
      end;
    end;

    try
			if Assigned(Frm_JON30) then
      begin
      	if tmrXYChange.Tag = 0 then
        begin
          if (cxtStartXval.Text = '') and (cxtStartYval.Text = '') and (Trim(meoStartArea.Text) = '') then
          begin
            Hide_Panel(lcsActiveEdit,1);
            if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
            if Frm_JON31.Showing then
               Frm_JON31.StartPos('', '', '');
          end else
          begin
            if True or (BtnStLock.Hint = 'F4)수정') then
            begin
              if GS_MAP_AREA_AUTOSHOW and (not Frm_JON30.Visible) then //- and ( Not Assigned(Frm_COM30) ) then
              begin
                if J30ShowS = False then
                begin
                  Frm_JON30.OnSelectedMap := SetStartAreaMap;
                  Hide_Panel(lcsActiveEdit,0);
                end;
              end else
              if GS_MAP_AREA_AUTOSHOW = False then
              begin
                if  J30ShowS = False then
                begin
  								Frm_JON30.OnSelectedMap := SetStartAreaMap;
                  Hide_Panel(lcsActiveEdit,0);
                end;
              end;

              if J30ShowS = False then
              begin
                if Not pnlShare.Visible then
                  tmrWKSearch.Enabled := True;
  //              Frm_JON30.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text);
              end;

              if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
              try
                if Frm_JON31.Showing then
                begin
                  if J30ShowS = False then
                  begin
                    try
                      Frm_JON31.OnSelectedMap := SetStartAreaMap;
                    finally
                      tmrStartPos.Enabled := True;
                    end;
                  end;
                end;
              except
                Frm_JON31.Close;
              end;
            end;
          end;
        end else
      	if tmrXYChange.Tag = 1 then
        begin
          if J30ShowE = True then
          begin
            Exit;
          end;
          if (cxtEndXval.Text = '') and (cxtEndYval.Text = '') and (Trim(meoEndArea.Text) = '') then
          begin
            Hide_Panel(lcsActiveEdit,1);
            if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
            if Frm_JON31.Showing then
               Frm_JON31.EndPos('', '', '');
          end else
          begin
            if True or (BtnEdLock.Hint = 'F4)수정') then
  					begin
              if GS_MAP_AREA_AUTOSHOW and (not Frm_JON30.Visible) then //- and ( Not Assigned(Frm_COM30) ) then
              begin
                if J30ShowE = False then
                begin
                  Frm_JON30.OnSelectedMap := SetEndAreaMap;
                  Hide_Panel(lcsActiveEdit,0);
                end;
              end else
              if GS_MAP_AREA_AUTOSHOW = False then
              begin
                if J30ShowE = False then
  							begin
                  Frm_JON30.OnSelectedMap := SetEndAreaMap;
                  Hide_Panel(lcsActiveEdit,0);
                end;
              end;

              if  J30ShowS = False then
              begin
                if Not pnlShare.Visible then
                  tmrWKSearch.Enabled := True;
  //              Frm_JON30.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
              end;

              if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
              try
                if Frm_JON31.Showing then
                begin
                  if J30ShowE = False then
                  begin
    								Frm_JON31.OnSelectedMap := SetEndAreaMap;
    								Frm_JON31.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
                  end;
                end;
              except
                Frm_JON31.Close;
              end;
            end;
          end;
        end;
      end;
      pCompareQRateInfo;
      if Assigned(Frm_Jon019) then Frm_JON019.Close;
  	finally
  		tmrDisAc.Enabled := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.tmUpsoPnlTimer(Sender: TObject);
begin
	SetDebugeWrite('JON01.tmUpsoPnl');
	// 지사별 상담 멘트를 닫는다.
	tmUpsoPnl.Enabled := False;
	if tmUpsoPnl.Interval = 3000 then
	begin
		pnlCallBellAll.Visible := False; // 업소안내 판넬
	end else
	begin
	end;
end;

procedure TFrm_JON01.trmBubinStateTimer(Sender: TObject);
begin
  if lbBubinStateName.Style.Font.Color = clBlue then
  begin
    lbBubinStateName.Style.Font.Color := clRed;
    pnlBubinState.Color := clRed;
  end else
  if lbBubinStateName.Style.Font.Color = clRed then
  begin
    lbBubinStateName.Style.Font.Color := clBlue;
    pnlBubinState.Color := clBlue;
  end;

  if trmBubinState.Tag > 5 then
  begin
    trmBubinState.Enabled := False;
    trmBubinState.Tag := 0;
  end;
  trmBubinState.Tag := trmBubinState.Tag + 1;
end;

procedure TFrm_JON01.trmPnlSuggestTimer(Sender: TObject);
begin
	trmPnlSuggest.enabled := False;
	PnlSuggest.Visible := False;
end;

procedure TFrm_JON01.TT3_1Timer(Sender: TObject);
Var slTmp : TStringList;
    sErrLine : String;
    sTmp, sName : String;
begin
	SetDebugeWrite('Frm_JON56.TT3_1Timer');
  try
    TT3_1.Enabled := False;

    if ( GS_Grid_DEP = 'C' ) And ( Trim(meoStartArea.Text) <> '' ) then Exit;  // 고객정보에 출도착지 우선 적용

		proc_Wisenut_GetTelPOILast(GS_WiseNutPOIResult, GS_WiseNutPOIWord);
  except
    on e: exception do
    begin
      Log('TT3_1Timer Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'TT3_1Timer Error :' + E.Message);
    end;
  end;
end;

function TFrm_JON01.proc_Wisenut_GetTelPOILast(wURL, word: String): Boolean;
var
  sOver : String;
  sYesNo, sViewCnt, sCenterLat, sCenterLon, sFixParam, sOrFixParam : String;
  slTmp : TStringList;
begin
	SetDebugeWrite('JON01.proc_Wisenut_GetTelPOILast');
  Result := True;
  try
    try
      // 결과값이 없을 수도 있음
      if Trim(wURL) <> '' then
      begin
        if (Pos('"SearchQueryResult": "0"', wURL) = 0 ) And
           (Pos('"Collection"'            , wURL) > 0 ) And
           (Pos('"Error":{'               , wURL) = 0 ) then
        begin
					proc_Wisenut_GetTelPOI_Proc(wURL, word);
        end;
      end;
    except
      on E: Exception do
      begin
        Result := False;
      end;
    end;
  finally
  end;
end;

function TFrm_JON01.proc_Wisenut_GetTelPOI_Proc(wURL, word: string): Boolean;
var
  js : TlkJSONobject;
  ja, jCnt  : TlkJSONlist;

  j, i : Integer;
  str, sx, sy, sGX, sGY, sPOI, sKm, sRCity : string;
  AGugun, ADong, sCnt, AName, ARi, ADocId, AStreet, AStreetNm, AStreetType : string;
  slTmp : TStringList;
begin
  SetDebugeWrite('JON01.proc_Wisenut_GetTelPOI_Proc');
  Result := False;
  try
    slTmp := TStringList.Create;
    try
      js := TlkJSON.ParseText(wURL) as TlkJSONobject;

      if js.Field['Session'].Value = sTelRanDom then
      begin
        Result := True;
        sTelRanDom := '';
        jCnt := js.Field['SearchQueryResult'].Field['Collection'] as TlkJSONlist;

        for j := 0 to jCnt.Count - 1 do
        begin
          sCnt := jCnt.Child[j].Field['DocumentSet'].Field['Count'].Value;

          if strToIntDef(sCnt, 0) > 0 then
          begin
            ja := jCnt.Child[j].Field['DocumentSet'].Field['Document'] as TlkJSONlist;

            if ja.Count <= 0 then Exit;

            for i := 0 to ja.Count - 1 do
            begin
              slTmp.Delimiter     := ' ';
              slTmp.DelimitedText := Frm_JON30.D_HightlightTXT(ja.Child[i].Field['Field'].Field['ADDRESS'].Value);
              sy      := '';
              sx      := '';
              sGY     := '';
              sGX     := '';
              sPOI    := '';
              sRCity  := '';
              AGugun  := '';
              ADong   := '';
              AStreet := '';
              AStreetNm := '';
              AStreetType  := '';
              AName   := '';
              ADocId  := '';
              if slTmp.Count >= 1 then
              begin
                try
                  sy  := getWGS84(FormatFloat('0.000000', ja.Child[i].Field['Field'].Field['LON'].Value));  // x 좌표
                  sx  := '0'+ getWGS84(FormatFloat('0.000000', ja.Child[i].Field['Field'].Field['LAT'].Value));  // y 좌표
                  try
                    sGY := getWGS84(FormatFloat('0.000000', ja.Child[i].Field['Field'].Field['GUIDE_LON'].Value));  // x 좌표
                  except
                    sGY := '';
                  end;

                  Try
                    sGX := '0'+ getWGS84(FormatFloat('0.000000', ja.Child[i].Field['Field'].Field['GUIDE_LAT'].Value));  // y 좌표
                  except
                    sGX := '';
                  End;

                  lcsStaDocId := ja.Child[i].Field['Field'].Field['DOCID'].Value;

                  if jCnt.Child[j].Field['Id'].Value = 'phones' then
                  begin
                    AName := ja.Child[i].Field['Field'].Field['POI'].Value;
                  end else
                  begin
                    Exit;
                  end;

                  Frm_JON30.proc_WGSToBessel(False, slTmp[0], sx, sy, sRCity, sKm);
                Except
                  sy := '';
                  sx := '';
                  sGY := '';
                  sGX := '';
                  AName := '';
                  sPoi := '';
                end;
              end;

              gJONStaChkXY.Area1 := sRCity;
              lcsSta1 := sRCity;

              if slTmp[0] = '세종특별자치시' then  // 20121206 LYB 추가
              begin
                if ((copy(Frm_JON30.D_HightlightTXT(slTmp[1]),length(Frm_JON30.D_HightlightTXT(slTmp[1])), 1) = '면')
                 or (copy(Frm_JON30.D_HightlightTXT(slTmp[1]),length(Frm_JON30.D_HightlightTXT(slTmp[1])), 1) = '읍')) then
                begin
                  gJONStaChkXY.Area2 := '세종시';
                  gJONStaChkXY.Area3 := slTmp[1] + slTmp[2];// 리

                  lcsSta2 := '세종시';
                  lcsSta3 := slTmp[1] + slTmp[2];// 리
                end else
                begin
                  gJONStaChkXY.Area2 := '세종시';
                  gJONStaChkXY.Area3 := slTmp[1]; //동

                  lcsSta2 := '세종시';
                  lcsSta3 := slTmp[1]; //동
                end;
              end else
              begin
                gJONStaChkXY.Area2 := slTmp[1];//시군고
                gJONStaChkXY.Area3 := slTmp[2];//읍면동

                lcsSta2 := slTmp[1];//시군고
                lcsSta3 := slTmp[2];//읍면동
              end;

              if slTmp.Count > 3 then
              begin
                if ((copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '구')
                 or (copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '시')
                 or (copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '군')) then
                begin
                  gJONStaChkXY.Area2 := slTmp[1]+slTmp[2];//시군고
                  gJONStaChkXY.Area3 := slTmp[3];//읍면동

                  lcsSta2 := slTmp[1]+slTmp[2];//시군고
                  lcsSta3 := slTmp[3];//읍면동
                end else
                if ((copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '읍')
                 or (copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '면')) then
                begin
                  gJONStaChkXY.Area2:= slTmp[1];
                  gJONStaChkXY.Area3 := slTmp[2] + slTmp[3];

                  lcsSta2:= slTmp[1];
                  lcsSta3 := slTmp[2] + slTmp[3];
                end;

                if slTmp.Count = 5 then
                begin
                  gJONStaChkXY.Area3 := gJONStaChkXY.Area3 + slTmp[4];
                  lcsSta3 := lcsSta3 + slTmp[4];
                end;
              end;

							if ( GS_Grid_DEP = 'A' ) Or ( GS_Grid_DEP = 'H' ) then
              begin
                PnlKTPOIYN.Visible := True;

                TmplcsSta1 := lcsSta1;
                TmplcsSta2 := lcsSta2;
                TmplcsSta3 := lcsSta3;
                TmplcsSta4 := AName;
                TmplcsSta5 := AName;
                TmplcsX := sx;
                tmplcsY := sy;
                TmpDef := 'K';
              end else
              begin
                gJONStaChkXY.Area4 := AName;
                gJONStaChkXY.Area5 := AName;
                gJONStaChkXY.X := sx;
                gJONStaChkXY.Y := sy;
                gJONStaChkXY.GUIDE_X := sGx;
                gJONStaChkXY.GUIDE_Y := sGy;

                lcsSta4 := AName;

                lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                SetDebugeWrite('JON01.lblStartAreaName.Text 11044 : ' + lblStartAreaName.Text);
                meoStartArea.Text := AName;
                cxtStartAreaDetail.Text := AName;
                lcsConfAREA4 := AName;
                cxtStartXval.Text := sx;
                cxtStartYval.Text := sy;
                cxtStartGUIDEXval.Text := sGx;
                cxtStartGUIDEYval.Text := sGy;

                gJONStaChkXY.Gubun := 'K';
                GS_Grid_DEP := 'K';   //KT전화번호 선택
                GBTop3.Color := $00FFCA8E;
              end;
             end;
          end;
        end;
      end;
    except
      on e: exception do
      begin
        Log('proc_Wisenut_GetTelPOI_Proc Error :' + wURL, LOGDATAPATHFILE);
        Assert(False, 'proc_Wisenut_GetTelPOI_Proc Error :' + wURL);
      end;
    end;
  finally
    js.Free;
    FreeAndNil(slTmp);
  end;
end;

procedure TFrm_JON01.TT4Timer(Sender: TObject);
Var ls_Text : String;
begin
  SetDebugeWrite('JON01.TT4Timer');
  try
    TT4.Enabled := False;

    if lcsActiveEdit = 'meoStartArea' then
      ls_Text := meoStartArea.Text ;
    if lcsActiveEdit = 'meoEndArea' then
      ls_Text := meoEndArea.Text   ;
  	if lcsActiveEdit = 'meoViaArea' then
  	begin
  		if GS_VIA_Tag = 1 then
  			ls_Text := meoViaArea1.Text
  		else
  			ls_Text := meoViaArea[GS_VIA_Tag].Text;
  	end;
  	if lcsActiveEdit = 'meoStartAreaCUT' then
      ls_Text := Frm_CUT011.meoStartAreaCUT.Text;
    if lcsActiveEdit = 'meoEndAreaCUT' then
      ls_Text := Frm_CUT011.meoEndAreaCUT.Text;

    ls_Text := LowerCase(ls_Text);  // 영타를 한글로 교정시 소문자만 인식

    // 같은 단어가 검색으로 들어올 경우 검색 않함.
   if ls_Text = sPreSuggestWord then Exit;
    sPreSuggestWord := ls_Text;

    if Self.Showing then proc_Wisenut_GetSuggest(ls_Text);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.TT4_1Timer(Sender: TObject);
begin
  SetDebugeWrite('JON01.TT4_1Timer');
  try
    TT4_1.Enabled := False;
    proc_Wisenut_GetSuggest_Proc(GS_WiseNutSGTResult);
  except
    on e: exception do
    begin
      Log('TT4_1Timer Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'TT4_1Timer Error :' + E.Message);
    end;
  end
end;

procedure TFrm_JON01.TT5Timer(Sender: TObject);
Var ls_Text : String;
begin
	SetDebugeWrite('Frm_JON01.TT4Timer');
	try
		TT5.Enabled := False;

    if lcsActiveEdit = 'meoStartArea' then
      ls_Text := meoStartArea.Text ;
    if lcsActiveEdit = 'meoEndArea' then
			ls_Text := meoEndArea.Text   ;
		if lcsActiveEdit = 'meoViaArea' then
  	begin
			if GS_VIA_Tag = 1 then
  			ls_Text := meoViaArea1.Text
  		else
  			ls_Text := meoViaArea[GS_VIA_Tag].Text;

			frm_JON30.gB_ViaIng := True;	//경유지POI검색진행 상태
  	end;
  	if lcsActiveEdit = 'meoStartAreaCUT' then
      ls_Text := Frm_CUT011.meoStartAreaCUT.Text;
    if lcsActiveEdit = 'meoEndAreaCUT' then
      ls_Text := Frm_CUT011.meoEndAreaCUT.Text;

    ls_Text := LowerCase(ls_Text);  // 영타를 한글로 교정시 소문자만 인식

    // 같은 단어가 검색으로 들어올 경우 검색 않함.
	 if ls_Text = sPreSuggestWord then Exit;
    sPreSuggestWord := ls_Text;

		if Self.Showing then proc_Naver_GetSuggest(ls_Text);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.TT5_1Timer(Sender: TObject);
begin
	SetDebugeWrite('Frm_JON01.TT5_1Timer');
  try
		TT5_1.Enabled := False;
		proc_Naver_GetSuggest_Proc(GS_NaverSGTResult);
  except
		on e: exception do
		begin
			Log('TT5_1Timer Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'TT5_1Timer Error :' + E.Message);
    end;
  end
end;

// 와이즈넛에서 Suggest 데이터 가져오기..
procedure TFrm_JON01.proc_Wisenut_GetSuggest(word: string);
var
  sHttp, wURL, lMessage, sOver : String;
  sTargetParam : String;
  JON01WNTh : TJON01WNThread;
begin
  SetDebugeWrite('JON01.proc_Wisenut_GetSuggest');
  try
    PnlSuggest.Visible := False;
    AdvGridSj.ShowSelection := False;

    sTargetParam := GS_SEARCH_POI_SCH;
    if sTargetParam <> '' then
    begin
      sTargetParam := ReplaceAll(sTargetParam, '서울', '01');
      sTargetParam := ReplaceAll(sTargetParam, '경기', '02');
      sTargetParam := ReplaceAll(sTargetParam, '인천', '03');
      sTargetParam := ReplaceAll(sTargetParam, '대전', '04');
      sTargetParam := ReplaceAll(sTargetParam, '충남', '05');
      sTargetParam := ReplaceAll(sTargetParam, '충북', '06');
      sTargetParam := ReplaceAll(sTargetParam, '강원', '07');
      sTargetParam := ReplaceAll(sTargetParam, '대구', '08');
      sTargetParam := ReplaceAll(sTargetParam, '경북', '09');
      sTargetParam := ReplaceAll(sTargetParam, '부산', '10');
      sTargetParam := ReplaceAll(sTargetParam, '울산', '11');
      sTargetParam := ReplaceAll(sTargetParam, '경남', '12');
      sTargetParam := ReplaceAll(sTargetParam, '전북', '13');
      sTargetParam := ReplaceAll(sTargetParam, '광주', '14');
      sTargetParam := ReplaceAll(sTargetParam, '전남', '15');
      sTargetParam := ReplaceAll(sTargetParam, '제주', '16');
      sTargetParam := ReplaceAll(sTargetParam, '세종', '17');
    end else
    begin
      sTargetParam := '01,02,03';
    end;

    try
      gsRanDom := 'abcd' + IntToStr(RandomRange(10000, 20000));
      sHttp := 'http://' + GS_PoiServerIP + ':8080/jway/WNRun.do?target=' + sTargetParam + '&convert=fw&query='+ UrlEncode(UTF8Encode(trim(word))) +'&datatype=json&session=' + gsRanDom;

			try
        JON01WNTh := TJON01WNThread.Create(Self.Tag, 1, sHttp, word, gsRanDom);
        JON01WNTh.FreeOnTerminate := False;
      except

      end;
    except on E: Exception do
      begin
        Log('proc_Wisenut_GetSuggest Error : ' + e.Message, LOGDATAPATHFILE);
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 와이즈넛에서 Suggest 데이터 가져오기..
procedure TFrm_JON01.proc_Wisenut_GetSuggest_Proc(wURL: String );
var
  js :TlkJSONobject;
  ja, jCnt  : TlkJSONlist;

  j, i, iRow, iCnt : Integer;
  str, shkeyword, skeyword : string;
begin
  SetDebugeWrite('JON01.proc_Wisenut_GetSuggest_Proc');
  try
    js := TlkJSON.ParseText(wURL) as TlkJSONobject;
    try
      if js.Field['responsestatus'].Value = -1 then Exit;
      jCnt := js.Field['result'] as TlkJSONlist;
      if jCnt.Child[0].Field['totalcount'].Value = 0 then Exit;

      if jCnt.Child[0].Field['Session'].Value = gsRanDom then
      begin
        gsRanDom := '';
        Init_AdvGridSj;

        iRow := 0;
        for j := 0 to jCnt.Count - 1 do
        begin
          ja := jCnt.Child[j].Field['items'] as TlkJSONlist;
          iCnt := jCnt.Child[j].Field['totalcount'].Value;

          for i := 0 to iCnt - 1 do
          begin
            shkeyword := M_SGParseTXT(ja.Child[i].Field['hkeyword'].Value);
            skeyword  := ja.Child[i].Field['keyword'].Value;

            AdvGridSj.AddRow;
            AdvGridSj.Cells[0, iRow] := shkeyword;
            AdvGridSj.Cells[1, iRow] := skeyword;
            Inc(iRow);
          end;
        end;
        AdvGridSj.RowCount := AdvGridSj.RowCount - 1;
        if lcsActiveEdit = 'meoStartArea' then
        begin
          if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
          begin
            PnlSuggest.Left := 7;
            PnlSuggest.Top  := GBTop3.Top + 52 + 23;
          end else
          begin
            PnlSuggest.Left := 34;
            PnlSuggest.Top  := GBTop3.Top + 32 + 23;
          end;
          if meoStartArea.CanFocus then meoStartArea.SetFocus;
        end else
        if lcsActiveEdit = 'meoEndArea' then
        begin
          if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
          begin
            PnlSuggest.Left := 7;
            PnlSuggest.Top  := GB3.Top + 57 + 23;
          end else
          begin
            PnlSuggest.Left := 34;
            PnlSuggest.Top  := GB3.Top + 32 + 23;
          end;
        end else
			  if lcsActiveEdit = 'meoViaArea' then
        begin
          if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
          begin
            PnlSuggest.Left := 7;
            PnlSuggest.Top  := ( GbViaArea.Top + 26 ) + ((ViaNowTag - 1) * 22);
          end else
          begin
            PnlSuggest.Left := 34;
            PnlSuggest.Top  := ( GbViaArea.Top + 26 ) + ((ViaNowTag - 1) * 22);
          end;
        end;
        PnlSuggest.Caption := lcsActiveEdit;
        if PnlSuggest.Tag = 0 then
        begin
          PnlSuggest.BringToFront;
          if ( lcsActiveEdit = 'meoStartArea' ) And ( meoStartArea.Focused ) then
           PnlSuggest.Visible := True
          else
          if ( lcsActiveEdit = 'meoEndArea' ) And ( meoEndArea.Focused ) then
           PnlSuggest.Visible := True
          else
          if ( lcsActiveEdit = 'meoViaArea' ) And ( ( meoViaArea1.Focused ) Or ( meoViaArea[2].Focused ) Or ( meoViaArea[3].Focused ) Or ( meoViaArea[4].Focused ) Or ( meoViaArea[5].Focused ) ) then
           PnlSuggest.Visible := True
        end else
        begin
          PnlSuggest.Tag := 0;
          if lcsActiveEdit = 'meoStartArea' then
          begin
            if meoStartArea.CanFocus then meoStartArea.SetFocus;
//            meoStartArea.SelStart := Length(meoStartArea.Text);
          end else
          if lcsActiveEdit = 'meoEndArea' then
          begin
            if meoEndArea.CanFocus then meoEndArea.SetFocus;
//            meoEndArea.SelStart := Length(meoEndArea.Text);
          end else
  			  if lcsActiveEdit = 'meoViaArea' then
          begin
            if ViaNowTag = 1 then meoViaArea1.SetFocus
                             else meoViaArea[ViaNowTag].SetFocus;
          end;
        end;
      end;
    except on E: Exception do
      begin
        Log('proc_Wisenut_GetSuggest_Proc error:'+E.Message, LOGDATAPATHFILE);
      end;
    end;
  finally
    js.Free;
  end;
end;

procedure TFrm_JON01.proc_Naver_GetSuggest(word: string);
var
	sHttp, wURL, lMessage, sOver : String;
	sTargetParam : String;
	JON01WNTh : TJON01WNThread;
begin
	SetDebugeWrite('Frm_JON01.proc_Naver_GetSuggest');
	try
//		PnlSuggest.Visible := False;
//		AdvGridSj.ShowSelection := False;

		try
			sNaverSuggest := word;

			gsNaverRanDom := 'sug' + IntToStr(RandomRange(10000, 20000));
			sHttp := 'http://ac.map.naver.com/ac?_callback=' + gsNaverRanDom + '&q='
							+ UrlEncode(UTF8Encode(trim(word)))
							+ '&st=10&r_lt=10&r_format=json&t_koreng=1&q_enc=UTF-8&r_enc=UTF-8&r_unicode=0&r_escape=1&frm=pcweb&r_cr=11';

			try
				JON01WNTh := TJON01WNThread.Create(Self.Tag, 11, sHttp, sNaverSuggest, gsNaverRanDom);
				JON01WNTh.FreeOnTerminate := False;
			except

			end;
		except on E: Exception do
      begin
        Log('proc_Wisenut_GetSuggest Error : ' + e.Message, LOGDATAPATHFILE);
			end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.proc_Naver_GetSuggest_Proc(wURL: String);
var
	js :TlkJSONobject;
	ja, jCnt, jj  : TlkJSONlist;

	j, i, iRow, iCnt : Integer;
	str, shkeyword, skeyword, sTmp, sTmp1, sTmp2, sTmp3  : string;
begin
	SetDebugeWrite('Frm_JON01.proc_Wisenut_GetSuggest_Proc');
	try
		wURL := stringreplace(wURL, '(', '', [rfReplaceAll]);
		wURL := stringreplace(wURL, ')', '', [rfReplaceAll]);
		sTmp := Copy(wURL,1,8);
		wURL := stringreplace(wURL, sTmp, '', [rfReplaceAll]);
		js := TlkJSON.ParseText(wURL) as TlkJSONobject;
		try
			if sTmp = gsNaverRanDom then
			begin
				gsNaverRanDom := '';
				ja := js.Field['query'] as TlkJSONlist;
        sTmp1 := ''; sTmp2 := ''; sTmp3 := '';
				if ja.Count = 3 then
				begin
					sTmp1 := ja.child[0].Value;
					sTmp2 := ja.child[1].Value;
					sTmp3 := ja.child[2].Value;
				end;
				ja := js.Field['items'] as TlkJSONlist;
				if ja.Count > 0 then
				begin
					jCnt := ja.Child[0] as TlkJSONlist;
					Init_AdvGridSj;
					iRow := 0;
					if (sTmp1 = sTmp2) and (sTmp2 = sTmp3) then
					else
					begin
						AdvGridSj.AddRow;
						AdvGridSj.Cells[0, iRow] := Frm_JON30.M_HightlightTXT(sTmp3, sTmp3, 4) + '(추천)';
						AdvGridSj.Cells[1, iRow] := sTmp3;
						Inc(iRow);
					end;
					if GS_SEARCH_POISVR_SGSTUSE then  //자동완성 사용일 경우에만 보여줌
					begin
						for i := 0 to jCnt.count - 1 do
						begin
							jj := jCnt.Child[i] as TlkJSONlist;
							skeyword  := jj.child[0].Value;

	//						AdvGridSj.InsertRows(iRow,1);
							AdvGridSj.AddRow;
							AdvGridSj.Cells[0, iRow] := Frm_JON30.M_HightlightTXT(skeyword, sNaverSuggest, 3);
							AdvGridSj.Cells[1, iRow] := skeyword;
							Inc(iRow);
	//						if i = 3 then Break;
						end;
					end;
				end;
			end;
			AdvGridSj.RowCount := AdvGridSj.RowCount - 1;

			if AdvGridSj.Cells[0, 0] = '' then
			begin
				PnlSuggest.Visible := False;
				AdvGridSj.ShowSelection := False;
				exit;
			end;

			if lcsActiveEdit = 'meoStartArea' then
			begin
				if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
				begin
					PnlSuggest.Left := 7;
					PnlSuggest.Top  := GBTop3.Top + 52 + 23;
				end else
				begin
					PnlSuggest.Left := 34;
					PnlSuggest.Top  := GBTop3.Top + 32 + 23;
				end;
				if meoStartArea.CanFocus then meoStartArea.SetFocus;
			end else
			if lcsActiveEdit = 'meoEndArea' then
			begin
				if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
				begin
					PnlSuggest.Left := 7;
					PnlSuggest.Top  := GB3.Top + 57 + 23;
				end else
				begin
					PnlSuggest.Left := 34;
					PnlSuggest.Top  := GB3.Top + 32 + 23;
				end;
			end else
			if lcsActiveEdit = 'meoViaArea' then
			begin
				if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
				begin
					PnlSuggest.Left := 7;
					PnlSuggest.Top  := ( GbViaArea.Top + 26 ) + ((ViaNowTag - 1) * 22);
				end else
				begin
					PnlSuggest.Left := 34;
					PnlSuggest.Top  := ( GbViaArea.Top + 26 ) + ((ViaNowTag - 1) * 22);
				end;
			end;
			PnlSuggest.Caption := lcsActiveEdit;
			if PnlSuggest.Tag = 0 then
			begin
        PnlSuggest.BringToFront;
				if ( lcsActiveEdit = 'meoStartArea' )  And ( meoStartArea.Focused )  then
				 PnlSuggest.Visible := True
				else
				if ( lcsActiveEdit = 'meoEndArea' ) And ( meoEndArea.Focused ) then
				 PnlSuggest.Visible := True
				else
				if ( lcsActiveEdit = 'meoViaArea' ) And ( ( meoViaArea1.Focused ) Or ( meoViaArea[2].Focused ) Or ( meoViaArea[3].Focused ) Or ( meoViaArea[4].Focused ) Or ( meoViaArea[5].Focused ) ) then
				 PnlSuggest.Visible := True
			end else
			begin
				PnlSuggest.Tag := 0;
				if lcsActiveEdit = 'meoStartArea' then
				begin
					if meoStartArea.CanFocus then meoStartArea.SetFocus;
//            meoStartArea.SelStart := Length(meoStartArea.Text);
				end else
				if lcsActiveEdit = 'meoEndArea' then
				begin
					if meoEndArea.CanFocus then meoEndArea.SetFocus;
//            meoEndArea.SelStart := Length(meoEndArea.Text);
				end else
				if lcsActiveEdit = 'meoViaArea' then
				begin
					if ViaNowTag = 1 then meoViaArea1.SetFocus
													 else meoViaArea[ViaNowTag].SetFocus;
				end;
			end;
			trmPnlSuggest.enabled := True;
		except on E: Exception do
			begin
				Log('proc_Wisenut_GetSuggest_Proc error:'+E.Message, LOGDATAPATHFILE);
			end;
		end;
	finally
		js.Free;
	end;
end;

procedure TFrm_JON01.proc_WiseNut_Response( sPoiName, sGubun, sNo : String );
var
  sHttp : String;
  sYesNo, sViewCnt, sCenterLat, sCenterLon, sSAPoiName, sFixParam, sRanDom, sSF : String;
  JON01WNTh : TJON01WNThread;
begin
  SetDebugeWrite('JON01.proc_WiseNut_Response');
  try
    sRanDom := 'bcde' + IntToStr(RandomRange(10000, 20000));

    if GS_SEARCH_POISVR_SPOIUSE then sYesNo := '0' else sYesNo := '1';
    if GS_PRJ_AREA = 'S' then sViewCnt := '40' else sViewCnt := '100';

    sFixParam := '&region=' + UrlEncode(UTF8Encode(GS_SEARCH_POI_ADDR)) + '&recRegion=' + UrlEncode(UTF8Encode(GS_SEARCH_POI_SCH));

    sSAPoiName := UrlEncode(UTF8Encode(trim(sPoiName)));

    sFixParam := sFixParam + '&fixAddress=SKIP&fixSPOI=SKIP&fixLAT=&fixLON=';

    sCenterLat := Area_CenterLat;
    sCenterLon := Area_CenterLon;

    if sGubun = 'W' then sSF := 'S'
                    else sSF := 'F';

    if sNo = 'A' then sNo := '1';

    sHttp := 'http://' + GS_PoiServerIP + ':8080/jway/search.jsp?query='+ UrlEncode(UTF8Encode(trim(sPoiName))) +'&lat=' + Frm_JON30.SetWGS84(sCenterLat) + '&lon=' + Frm_JON30.SetWGS84(sCenterLon) + '&startCount=0&viewCount=' + sViewCnt + '&session=' + sRanDom + '&ignoreSPOI=' + sYesNo + sFixParam;

    sHttp := sHttp + '&noresp=' + sSF + '&usedId=' + UrlEncode(UTF8Encode(trim(sPoiName))) + '&usedRank=' + sNo;

    if GS_SEARCH_NO_RI then sHttp := sHttp + '&ignoreAddressDetail=1'
                       else sHttp := sHttp + '&ignoreAddressDetail=0';

    try
      JON01WNTh := TJON01WNThread.Create(Self.Tag, 2, sHttp, '', sRanDom);
      JON01WNTh.FreeOnTerminate := False;
    except

    end
  except on E: Exception do
    begin
      Assert(False, 'proc_WiseNut_Response Error : ' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.Image1Click(Sender: TObject);
begin
  if Frm_Main.JON01MNG[Self.Tag].FrmGubun <> 1 then
	begin
		if pnlClose.Left + pnlClose.width <> 605 then
		begin
			PnlModifyTitle.Left := 605;
//			BtnLClose1.Left := 596 - BtnLClose1.width;
			pnlClose.Left := 605 - pnlClose.width;
			Image1.Visible := True;
			cxImgLock.GetIcon(2, Image1.Picture.Icon); 
			cxImgLock.Tag := 0;
		end else
		begin //596
			PnlModifyTitle.Left := 605 - PnlModifyTitle.width;
//			BtnLClose1.Left := PnlModifyTitle.Left - BtnLClose1.width;
			pnlClose.Left := PnlModifyTitle.Left - pnlClose.width;
			Image1.Visible := True;
			cxImgLock.GetIcon(3, Image1.Picture.Icon); 
			cxImgLock.Tag := 1;
		end;
	end
	else
	begin //310
		if pnlClose.Left + pnlClose.width <> 319 then  
		begin
			PnlModifyTitle.Left := 319;
//			BtnLClose1.Left := 310 - BtnLClose1.width;
			pnlClose.Left := 319 - pnlClose.width;
			Image1.Visible := True;
			cxImgLock.GetIcon(3, Image1.Picture.Icon); 
			cxImgLock.Tag := 1;
		end else //304
		begin
			PnlModifyTitle.Left := 313 + PnlModifyTitle.width;
//			BtnLClose1.Left := PnlModifyTitle.Left - BtnLClose1.width;
			pnlClose.Left := PnlModifyTitle.Left - pnlClose.width;
			Image1.Visible := True;
			cxImgLock.GetIcon(2, Image1.Picture.Icon); 
			cxImgLock.Tag := 0;
		end;
	end;
end;

procedure TFrm_JON01.Init_AdvGridSj;
begin
  SetDebugeWrite('JON01.Init_AdvGridSj');
  AdvGridSj.Clear;
  AdvGridSj.RowCount := 1;
  AdvGridSj.ColCount := 2;

  AdvGridSj.ColWidths[0] := 285;
  AdvGridSj.ColWidths[1] := 0;
end;

function TFrm_JON01.Proc_BRNOSearch: string;
begin
	Result := Trim(RightStr(cboBranch.Text, 5)); // 본사코드,지사코드
end;

// 선택된 지사정보에서 대표번호를 추출 한다.
function TFrm_JON01.Proc_MainKeyNumberSearch: string;
var
  iPos2: Integer;
	sKeyNumber, sTmp: string;     
begin
  SetDebugeWrite('JON01.Proc_MainKeyNumberSearch');
  try
    Result := '';
    sTmp := cboBranch.Text;

    if sTmp = '' then Exit;

    while (True) do
    begin
      iPos2 := Pos('[', Copy(sTmp, 1, Length(sTmp)));
      if iPos2 = 0 then
      begin
        sKeyNumber := Copy(sTmp, 1, Pos(']', sTmp) - 1);
        Break;
      end;
      sTmp := Copy(sTmp, iPos2 + 1, Length(sTmp));
    end;

    Result := sKeyNumber;
  except
    Result := '';
  end;
end;

function TFrm_JON01.GetPayMethod: string;
var
  Str: string;
begin
  SetDebugeWrite('JON01.GetPayMethod');
  try
    Str := cbbPayMethod.Text;

    if (Str = PAY_METHOD_MONEY)     then Result := '0' else
    if (Str = PAY_METHOD_POST_NML)  then Result := '2' else
    if (Str = PAY_METHOD_POST_MILE) then Result := '8' else
    if (Str = PAY_METHOD_TRUST)     then Result := '4' else
    if (Str = PAY_METHOD_CARD)      then Result := '5' else
    if (Str = PAY_METHOD_CARD_KCP)  then Result := '7'	else
    if (Str = PAY_METHOD_BUSAN)     then Result := '2' else
    if (Str = PAY_METHOD_BUSAN2K)   then Result := '2' else
    if (Str = PAY_METHOD_BUSAN3K)   then Result := '2'
                                    else Result := '0';
  except
    Result := '0';
  end;
end;

procedure TFrm_JON01._SetItem(Combo : TcxComboBox; AValue: string);
var
  I: Integer;
begin
  try
    Combo.ItemIndex := -1;

    for I := 0 to Combo.Properties.Items.Count - 1 do
    begin
      if Combo.Properties.Items[I] = AValue then
      begin
        Combo.ItemIndex := I;
        Break;
      end;
    end;
  except
    Combo.ItemIndex := -1;
  end;
end;

procedure TFrm_JON01.SetPayMethod(const Value: string);
begin
  SetDebugeWrite('JON01.SetPayMethod');
  try
    if (Value = '0') or (Value = PAY_METHOD_MONEY)     then _SetItem(cbbPayMethod, PAY_METHOD_MONEY) else
    if (Value = '2') or (Value = PAY_METHOD_POST_NML)  then _SetItem(cbbPayMethod, PAY_METHOD_POST_NML) else
		if (Value = '8') or (Value = PAY_METHOD_POST_MILE) then _SetItem(cbbPayMethod, PAY_METHOD_POST_MILE) else
		if (Value = '4') or (Value = PAY_METHOD_TRUST)     then _SetItem(cbbPayMethod, PAY_METHOD_TRUST) else
    if (Value = '5') or (Value = PAY_METHOD_CARD)      then _SetItem(cbbPayMethod, PAY_METHOD_CARD) else
    if (Value = '7') or (Value = PAY_METHOD_CARD_KCP)  then _SetItem(cbbPayMethod, PAY_METHOD_CARD_KCP) else
    if (Value = '2') or (Value = PAY_METHOD_BUSAN)     then _SetItem(cbbPayMethod, PAY_METHOD_BUSAN) else
    if (Value = '2') or (Value = PAY_METHOD_BUSAN2K)   then _SetItem(cbbPayMethod, PAY_METHOD_BUSAN2K) else
    if (Value = '2') or (Value = PAY_METHOD_BUSAN3K)   then _SetItem(cbbPayMethod, PAY_METHOD_BUSAN3K);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01.GetPostTime: string;
var
  Str: string;
begin
  SetDebugeWrite('JON01.GetPostTime');
  try
    Str := cbbPostTime.Text;

    if Str = POST_TIME_TOMORROW then  Result := '1440' else
    if Str = POST_TIME_FIN20 then Result := '20' else
    if Str = POST_TIME_FIN60 then Result := '60'
                             else Result := '';
  except
    Result := '';
  end;
end;

function TFrm_JON01.GetPriceFromProduct(AStr: string): Integer;
var
	Str: string;
begin
	Str := Copy(AStr, 1, Pos('원', AStr) - 1);
	Str := RemoveComma(Str);

	Result := StrToIntDef(Str, 0);
end;

procedure TFrm_JON01.SetPostTime(const Value: string);
begin
  SetDebugeWrite('JON01.SetPostTime');
  try
    if (Value = '') or (Value = '0') or (Value = POST_TIME_NOPAY) then _SetItem(cbbPostTime, POST_TIME_NOPAY)  else
    if (Value = '1440') or (Value = POST_TIME_TOMORROW) then _SetItem(cbbPostTime, POST_TIME_TOMORROW) else
    if (Value = '20') or (Value = POST_TIME_FIN20) then _SetItem(cbbPostTime, POST_TIME_FIN20) else
    if (Value = '60') or (Value = POST_TIME_FIN60) then _SetItem(cbbPostTime, POST_TIME_FIN60);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 고객 등급별 폼 칼라를 변경해 준다.
procedure TFrm_JON01.Proc_SetFormColor;
var sTemp : string;
begin
  SetDebugeWrite('JON01.Proc_SetFormColor');
	if cboCuLevel.itemindex >= 0 then
	begin
		Try
//      PnlCustom.Color := GetCustLevelColor(Proc_MainKeyNumberSearch, SCboLevelSeq[cboCuLevel.itemindex] );
			GBTop2.Color := GetCustLevelColor(Proc_MainKeyNumberSearch, SCboLevelSeq[cboCuLevel.itemindex] );
		except
			sTemp := 'Proc_SetFormColor';
			Log('고객등급 : '+ sTemp, LOGDATAPATHFILE);
		end;
		SetMileColorChange;
	end;
end;

procedure TFrm_JON01.Proc_SetFormColor_1(iType: integer);
begin
  SetDebugeWrite('JON01.Proc_SetFormColor_1');
  try
    if iType = 0 then
    begin
      // 0.불량(빨강)
      Self.pnlJonMain.Color := clRed;
    end else
    if iType = 1 then
    begin
      // 1.주의(주황)
      Self.pnlJonMain.Color := $004080FF;
    end else
    if iType = 2 then
    begin
      // 2.일반(하늘색)
      Self.pnlJonMain.Color := $00FAEDE2;
    end else
    if iType = 3 then
    begin
      // 3.우수(동색)
      Self.pnlJonMain.Color := $0014AACF;
    end else
    if iType = 4 then
    begin
      // 4.최우수(은색)
      Self.pnlJonMain.Color := clSilver;
    end else
    if iType = 5 then
    begin
      // 5.VIP(황금색)
      Self.pnlJonMain.Color := RGB(255, 200, 0);
    end else
    if iType = 10 then
    begin
      // 10.기본칼라
      Self.pnlJonMain.Color := $00FAEDE2;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// frm_Jon03.frmJON011 폼의 CU_LEVEL_TYPE : 0 : 고객 자동등급별 라벨 칼라를 변경해 준다.
procedure TFrm_JON01.Proc_SetFormColor_2(iType: integer);
begin
  SetDebugeWrite('JON01.Proc_SetFormColor_2');
  try
    if iType = 0 then
    begin
      // 최우수고객
      cxLblCuLevel.Style.Color := $0000F2F2;
      cxLblCuLevel.Caption := '최우수고객';
    end else
    if iType = 1 then
    begin
      // 우수고객
      cxLblCuLevel.Style.Color := $00E2FBC8;
      cxLblCuLevel.Caption := '우수고객';
    end else
    if iType = 2 then
    begin
      // 일반고객  $00EEEEEC;
      cxLblCuLevel.Style.Color := $00FFFFE6;
      cxLblCuLevel.Caption := '일반고객';
    end else
    if iType = 9 then
    begin
      // 기사일때,,
      cxLblCuLevel.Style.Color := $00EEEEEC;
      cxLblCuLevel.Caption := '대리기사';
    end else
   if iType = 10 then
    begin
      // 기본칼라,,
      cxLblCuLevel.Style.Color := $00FAEDE2;
      cxLblCuLevel.Caption := '일반고객';
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.Proc_SetFormColor_3(iType: integer);
begin
  SetDebugeWrite('JON01.Proc_SetFormColor_3');
  try
    if iType = 0 then
    begin
      // 0.개인, 2.불량[신버전에선 미사용]
      cxLblBar1.Color := GC_CULEVEL_COLOR.cGeneral;
      cxLblBar2.Color := GC_CULEVEL_COLOR.cGeneral;
      cxLblBar3.Color := GC_CULEVEL_COLOR.cGeneral;
    end else
    if iType = 1 then
    begin
      // 1.업소
      cxLblBar1.Color := GC_CULEVEL_COLOR.cSTORE;
      cxLblBar2.Color := GC_CULEVEL_COLOR.cSTORE;
      cxLblBar3.Color := GC_CULEVEL_COLOR.cSTORE;
    end else
    if iType = 3 then
    begin
      // 4.법인
      cxLblBar1.Color := GC_CULEVEL_COLOR.cCompanyColor;
      cxLblBar2.Color := GC_CULEVEL_COLOR.cCompanyColor;
      cxLblBar3.Color := GC_CULEVEL_COLOR.cCompanyColor;
    end else
    if iType = 9 then
    begin
      // 9.기사일때,,
      cxLblBar1.Color := GC_CULEVEL_COLOR.cWorkerColor;
      cxLblBar2.Color := GC_CULEVEL_COLOR.cWorkerColor;
      cxLblBar3.Color := GC_CULEVEL_COLOR.cWorkerColor;
    end else
    if iType = 10 then
    begin
      // 10.기본칼라,,
      cxLblBar1.Color :=  $00F9A28C;
      cxLblBar2.Color :=  $00F9A28C;
      cxLblBar3.Color :=  $00F9A28C;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01.proc_SmartCharge(var outPriceInfo, outAreaType: string;
  var outType: Integer): Integer;
var oOderWorker, oWeather, iType, oType : String;
  iSmartRate : Integer;
  PriceInfo, PricePassInfo, PriceDesc: string;
begin
  if GT_RealTimeWorker then oOderWorker := ''
                       else oOderWorker := '0';

  if GT_RealTimeWeather then oWeather := ''
                        else oWeather := '0';

  iType := '';//검색타입 '동-동' zz 무조건 동-동으로 조회

//  if GB_DEBUG_USE then Log(oOderWorker + oWeather +
//                                   lcsSta1 + lcsSta2 + lcsSta3 + meoStartArea.Text + cxtStartXval.Text + cxtStartYval.Text +
//                                   lcsEnd1 + lcsEnd2 + lcsEnd3 + meoEndArea.Text + cxtEndXval.Text + cxtEndYval.Text + iType, LOGDATAPATHFILE);

  iSmartRate := fJON01_SmartCharge(oOderWorker, oWeather,
                                   lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text,
                                   lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, iType, oType);
//  outType := StrToInt(oType);
  outType := StrToIntDef(oType, 0);

  if oType = 'DD' then oType := '동->동' else
  if oType = 'DG' then oType := '동->구' else
  if oType = 'GD' then oType := '구->동' else
  if oType = 'GG' then oType := '구->구' else
  if oType = 'GS' then oType := '구->시';
  outAreaType := oType;

  if GT_AutoSmartCharge then // 0원이거나 요금이 다를경우 스마트요금 접수창요금 자동적용
  begin
    if ( Result = 0 ) Or ( Result <> iSmartRate ) then
    begin
      if GT_PopUpSmartCharge then // 0원이거나 요금이 다를경우 스마트요금창 자동팝업
      begin
        if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
             (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
             (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
        begin
        end else
        begin
          BtnSmartRate.Click;
          if curRate.CanFocus then curRate.SetFocus;
        end;
      end;
      outPriceInfo := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
      Result := iSmartRate;
    end;
  end;

  outPriceInfo := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
  Result := iSmartRate;
end;

function TFrm_JON01.proc_TakCall_CtrlYN: string;
var sTmp : string;
begin
	SetDebugeWrite('JON01.proc_TakCall_CtrlYN');
	try
		sTmp := '';
		// 탁송연합콜 여부
//		if GS_PRJ_AREA = 'S' then
		begin
			sTmp := Proc_BRNOSearch;
			//접수창 플러스콜 체크 옵션 (y:선택, n:미선택, f:강제선택) (초기설정: y)
			// 탁송연합콜 사용 [접수창체크옵션,지사,본사,연합] 조회  yyny 5번째는 탁송연합 기사 가입가능여부
			sTmp := GetTakAllyYN(sTmp);
			BtnTakAlly.Visible := False;
			BtnTakAlly.Enabled := True;
			if copy(sTmp,1,4) = 'yyyy' then
			begin
				BtnTakAlly.Visible := True;
				BtnTakAlly.Down := True;
				cb_00.Visible := False;
				btnTakAllyClick(btnTakAlly);
			end else
			if copy(sTmp,1,4) = 'fyyy' then
			begin
				BtnTakAlly.Visible := True;
				BtnTakAlly.Down := True;
				BtnTakAlly.Enabled := False;
				cb_00.Visible := False;
				btnTakAllyClick(btnTakAlly);
			end else
			if copy(sTmp,1,4) = 'nyyy' then    // 미설정. 모드
			begin
				BtnTakAlly.Visible := True;
				BtnTakAlly.Down := False;
				cb_00.Visible := False;
			end else
			if copy(sTmp,1,4) = 'xyyy' then
			begin
				BtnTakAlly.Visible := False;
				BtnTakAlly.Down := False;
				BtnTakAlly.Enabled := False;
				cb_00.Visible := True;
			end else
			begin
				BtnTakAlly.Visible := False;
				BtnTakAlly.Down := False;
				BtnTakAlly.Enabled := False;
				cb_00.Visible := True;
			end;
		end;
		Result := sTmp;
	except
		Result := '';
	end;
end;

function TFrm_JON01.func_StartAreaFunc(AStartArea: string):string;
var
	sTmp, sTmp2: string;
begin
	SetDebugeWrite('JON01.func_StartAreaFunc');
	Try
		result := '';
		///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
		///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
		sTmp := AStartArea;
		sTmp2 := '탁송)';
		if pos(sTmp2, sTmp) > 0 then 
		begin
			if not cb_00.Down then begin cb_00.Down := True; cb_00Click(cb_00); end;
		end else
		begin
			if cb_00.Down then begin cb_00.Down := False; cb_00Click(cb_00); end;
		end;
		sTmp2 := '정장)';
		if pos(sTmp2, sTmp) > 0 then 
		begin
			if not cb_01.Down then begin cb_01.Down := True; cb_00Click(cb_01); end;
		end else
		begin
			if cb_01.Down then begin cb_01.Down := False; cb_00Click(cb_01); end;
		end;
		sTmp2 := '경유)';
		if pos(sTmp2, sTmp) > 0 then 
		begin
			if not cb_02.Down then begin cb_02.Down := True; cb_00Click(cb_02); end;
		end else
		begin
			if cb_02.Down then begin cb_02.Down := False; cb_00Click(cb_02); end;
		end;
		sTmp2 := '적요)';
		if pos(sTmp2, sTmp) > 0 then 
		begin
			if not cb_03.Down then begin cb_03.Down := True; cb_00Click(cb_03); end;
		end else
		begin
			if cb_03.Down then begin cb_03.Down := False; cb_00Click(cb_03); end;
		end;
		sTmp2 := '스틱)';
		if pos(sTmp2, sTmp) > 0 then 
		begin
			if not cb_04.Down then begin cb_04.Down := True; cb_00Click(cb_04); end;
		end else
		begin
			if cb_04.Down then begin cb_04.Down := False; cb_00Click(cb_04); end;
		end;
		sTmp2 := '탁확)';
		if pos(sTmp2, sTmp) > 0 then 
		begin
			if not cb_06.Down then begin cb_06.Down := True; cb_00Click(cb_06); end;
		end else
		begin
			if cb_06.Down then begin cb_06.Down := False; cb_00Click(cb_06); end;
		end;
{		sTmp2 := '콜무)';        //콜무는 삭제 정회귀팀장요청 20181128 KHS
		if pos(sTmp2, sTmp) > 0 then 
		begin
			if not BtnOptionCallMu.Down then begin BtnOptionCallMu.Down := True; BtnOptionCallMuClick(BtnOptionCallMu); end;
		end else
		begin
			if BtnOptionCallMu.Down then begin BtnOptionCallMu.Down := False end;
		end;   }

//		결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
		sTmp := StringReplace(sTmp,'♥♥♥]','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'♥♥]','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'♥]','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'후불)','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'즉후)','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'법후)','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'콜무)','',[rfReplaceAll]);
		result := sTmp;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

// 지사리스트에서 지사코드, 본사코드로 첫번째 대표번호 index를 찾는다.
function TFrm_JON01.Proc_HeNoBrNoListIdxFind(sHdNo, sBrNo: string): Boolean;
var
	i: integer;
	str: string;
begin
	SetDebugeWrite('JON01.Proc_HeNoBrNoListIdxFind');
	try
    Result := False;
    cboBranch.Tag := 10;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    for i := 0 to cboBranch.Properties.Items.Count - 1 do
    begin
      str := cboBranch.Properties.Items[i];
      if (Pos(sHdNo, str) > 0) and (Pos(sBrNo, str) > 0) then
      begin //지사코드
        cboBranch.ItemIndex := i;
        Result := True;
        Break;
      end;
    end;
    cboBranch.Tag := 0;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

// 지사리스트에서 대표번호, 지사코드로 index를 찾는다.
function TFrm_JON01.Proc_BrNoListIdxFind(sBrNo, sKeyNumber: string): Boolean;

  function LastCharPos(const S: string; const Chr: char): integer;
  var
    i: Integer;
  begin
    result := 0;
    for i := length(S) downto 1 do
      if S[i] = Chr then
      begin
        result := i;
        break;
      end;
  end;

var
  i, sLen, eLen : integer;
  Str, lsKeyNum : string;
begin
	SetDebugeWrite('JON01.Proc_BrNoListIdxFind');
  try
    Result := False;
    sKeyNumber := Trim(sKeyNumber);
    cboBranch.Tag := 10;

    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    for i := 0 to cboBranch.Properties.Items.Count - 1 do
    begin
      Str := cboBranch.Properties.Items[I];

      { TODO : 지사명에 '[', ']' 사용하는 지사들이 있어서 뒤에서부터 '[', ']' 찾아야 한다. }
			sLen := LastCharPos(Str, '[');
      eLen := LastCharPos(Str, ']');
			lsKeyNum := Copy(Str, sLen + 1, (eLen - sLen-1));

      if (Pos(sBrNo, Str) > 0) and (Trim(sKeyNumber) = lsKeyNum) then
//      if (Pos(sBrNo, Str) > 0) and (Pos(Trim(sKeyNumber), Str) > 0) then
      begin //지사코드
        Result := True;
        Break;
      end;
    end;

  	if Result then
  		cboBranch.ItemIndex := I;

		// LBS 사용여부 체크 수정창 제외
		if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) and (func_LBS_YN) then 
			btn_LBS.Enabled := True else btn_Lbs.Enabled := False;
			

		cboBranch.Tag := 0;
		// 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 플러스콜 사용여부 체크
function TFrm_JON01.proc_PlusCall_CtrlYN : string;
var sTmp : string;
begin
	SetDebugeWrite('JON01.proc_PlusCall_CtrlYN');
	try
		sTmp := '';
		// 플러스콜 여부(수도권만 사용함)
		if GS_PRJ_AREA = 'S' then
		begin
			sTmp := Proc_BRNOSearch;
			// 플러스콜 사용 [접수창체크옵션,지사,본사,연합] 조회
			sTmp := GetPlusCallYN(sTmp);
			BtnPlusYN.Enabled := True;
			if copy(sTmp,1,4) = 'yyyy' then
			begin
				BtnPlusYN.Down := True;
			end else
			if copy(sTmp,1,4) = 'fyyy' then
			begin
				BtnPlusYN.Down := True;
				BtnPlusYN.Enabled := False;
			end else
			if copy(sTmp,1,4) = 'nyyy' then    // 미설정. 모드
			begin
	//      cxcPlusYN.Checked := False;
			end else
			if copy(sTmp,1,4) = 'xyyy' then
			begin
				BtnPlusYN.Down := False;
				BtnPlusYN.Enabled := False;
			end else
			begin
				BtnPlusYN.Down := False;
				BtnPlusYN.Enabled := False;
			end;
		end;
		Result := sTmp;
	except
		Result := '';
	end;
end;

// 접수시에 또는 수정시에 버튼위치 설정.
procedure TFrm_JON01.SetCboBranch(bBrNoSetType: boolean = False);
Var i : Integer;
    lsBrNo : String;
begin
	SetDebugeWrite('JON01.SetCboBranch');
  try
    // 콜센터 지사리스트 재설정 여부..
    if bBrNoSetType = True then
    begin
      if cboBrOnly.ItemIndex <= 0 then
        lsBrNo := ''
      else
        lsBrNo := scb_BranchCode[scb_BranchName.IndexOf(cboBrOnly.Text)];

      if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

      // 콜센터 지사리스트 와 접수화면의 지사리스트가 다를경우에만 재설정 해준다.
      if ( cboBranch.Properties.Items.Count <> scb_DsBranchCode.Count ) Or ( lsBrNo <> '' ) then
      begin
        cboBranch.Tag := 10;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
        cboBranch.Properties.Items.Clear; // 지사명

        // 지사리스트를 담는다.
        for i := 0 to scb_DsBranchCode.Count - 1 do
        begin
          if lsBrNo = '' then
          begin
            cboBranch.Properties.Items.Add(scb_DsBranchName[i] + '[' + scb_KeyNumber[i] + '] ' +
              Copy(scb_HeadCode[i] + '     ', 1, 5) + '.' + Copy(scb_DsBranchCode[i] + '     ', 1, 5));
          end else
          begin
            if ( lsBrNo = scb_DsBranchCode[i] ) then
              cboBranch.Properties.Items.Add(scb_DsBranchName[i] + '[' + scb_KeyNumber[i] + '] ' +
                Copy(scb_HeadCode[i] + '     ', 1, 5) + '.' + Copy(scb_DsBranchCode[i] + '     ', 1, 5));
          end;
        end;
      end;
      cboBranch.Tag := 0;
      // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.

      if Not pJON01Dock.bUNDock then pJON01Dock.GUBUN := GT_SEL_BRNO.Gubun;
      if Not pJON01Dock.bUNDock then pJON01Dock.BrNo  := GT_SEL_BRNO.BrNo;

      // 지사통합 선택이 아니면.. 죄측메뉴에 선택된 지사정보로 설정 해준다.
      if pJON01Dock.GUBUN <> '0' then
      begin // 지사리스트에서 지사코드, 본사코드로 첫번째 대표번호 index를 찾는다.  CDS. 080818.
        if not Proc_HeNoBrNoListIdxFind(Trim(pJON01Dock.HDNO), Trim(pJON01Dock.BrNo)) then
        begin
          cboBranch.Tag := 10;
          // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
          cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
          cboBranch.Tag := 0;
          // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.

				end;
      end else
      begin // 환경설정에 설정된 대표지사로 세팅한다.
        if (GS_MainBranch.sBrNo <> '') and (GS_MainBranch.sKeyNumber <> '') then
        begin
          // 지사리스트에서 대표번호, 지사코드로 index를 찾는다.
					if not Proc_BrNoListIdxFind(GS_MainBranch.sBrNo, GS_MainBranch.sKeyNumber) then
          begin
            cboBranch.Tag := 10;
            // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
            cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
            cboBranch.Tag := 0;
						// 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.

					end;
				end else
				begin
					if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then
					begin
						if not Proc_HeNoBrNoListIdxFind(Trim(scb_FamilyHeadCode[0]), Trim(scb_FamilyDsBranchCode[0])) then
						begin
							cboBranch.Tag := 10;
							// 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
							cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
							cboBranch.Tag := 0;
							// 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
						end;
					end else
          begin
            cboBranch.Tag := 10;
            // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
            cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
            cboBranch.Tag := 0;
						// 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
					end;
        end;
      end;
    end else
    begin
      // 콜센터 지사리스트 와 접수화면의 지사리스트가 다를경우에만 재설정 해준다.
			if cboBranch.Properties.Items.Count <> scb_DsBranchCode.Count then
      begin
        cboBranch.Tag := 10;
			end;
    end;
		SetDebugeWrite('JON01.SetCboBranch End');
  Except
    on e: exception do
    begin
      Log('SetCboBranch Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'SetCboBranch Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.SetCmdOrderUpdate;
begin
  SetDebugeWrite('JON01.SetCmdOrderUpdate');
  try
    StartListN := '0';  //출발지 리스트선택값 초기화
    EndListN := '0';    //도착지 리스트선택값 초기화
    if Pos('조회', Self.Caption) > 0 then
    begin
      btnCmdMultiCall.Enabled := False;
      btnCmdQuestion.Enabled := False;
      btnCmdUpdSave.Visible := True; // 수정버튼
      btnCmdUpdSave.Enabled := True;
    end else
		if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) then
		begin
      btnCmdQuestion.Enabled := True;
      btnCmdUpdSave.Enabled := False;
			btnCmdMultiCall.Enabled := True;
			J30ShowS := False;
      J30ShowE := False;
      if btnCmdUpdSave.Hint = '추가접수' then
      begin
				J30ShowS := True;
				J30ShowE := True;
				//추가접수인데 왜 수정버튼이 활성화인지 모르겠음 .주석처리 함 20191122 KHS
//				btnCmdUpdSave.Visible := True; // 수정버튼
				btnCmdMultiCall.Enabled := False;
				btnCmdQuestion.Enabled := False;
			end else
			begin
				btnCmdUpdSave.Visible := False; // 수정버튼
				btnCmdMultiCall.Enabled := True;
				btnCmdQuestion.Enabled := True;
			end;
    end else
    begin
			btnCmdMultiCall.Enabled := False;
      btnCmdQuestion.Enabled := False;
			btnCmdUpdSave.Visible := True; // 수정버튼
			btnCmdUpdSave.Enabled := not (btnCmdUpdSave.Tag = 99);
      J30ShowS := True;
			J30ShowE := True;
    end;
  except
    on e: exception do
    begin
      Log('SetCmdOrderUpdate Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'SetCmdOrderUpdate Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.SearchCuTel(AIsUpdate: Boolean);
begin
	SetDebugeWrite('JON01.SearchCuTel');
	try
		if AIsUpdate then
		begin
			if gsCuTelHint <> cxtCuTel.Text then  
			begin
				if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
				begin
					GMessagebox('결제구분이 후불(마일)일 경우에는 결제구분을 변경 하신 뒤 고객연락처를 변경하여 주십시오.' +#13#10 + #13#10 +
											'** 적용된 마일리지는 수정 후 이전고객의 마일리지로 원상복구됩니다.', CDMSI);
					cxtCuTel.Text := gsCuTelHint;
					cbbPayMethod.SetFocus;
					Exit;
				end;
				gsCuTelHint := cxtCuTel.Text;
				cxtCallTelNum.Text := cxtCuTel.Text;
				Proc_CuSeq_Select;
				Proc_Cust_History(lcsCu_seq); //수정창에서 고객전번 변경 시 과거이용내역 추가로 조회 2016.08.05 KHS
			end	else
      if locsCuTelTxtBoxVal <> cxtCuTel.Text then //최초 수정창 오픈 고객번호와 현재 입력된 고객번호비교 2016.08.05 KHS
			begin
				Proc_CuSeq_Select;
				Proc_Cust_History(lcsCu_seq); //수정창에서 고객전번 변경 시 과거이용내역 추가로 조회 2016.08.05 KHS
			end	else
			begin
				//수정창 오픈 시 본사, 지사, 대표번호가 동일하면 열어줌. 수정시 지사변경 가능수정의 일부 2016.07.19 KHS
				if (locHdNo = sOrgHDNO) and (locBrNo = sOrgBRNO) and (locKNum = sOrgKNum) then
					// 오더 일련번호를 받아 오더 수정창을 열어 준다.  sTodayGb:1(당일오더), 2:(과거오더)
					Proc_OrderUpdate_Select(cxtJoinNum.Text, IntToStr(cxtJoinNum.Tag), btnCmdUpdSave.Hint);
			end;
			//Perform(WM_NEXTDLGCTL, 0, 0);
    end else
    begin
			if cxtCuTel.Hint <> cxtCuTel.Text then //콜링이후 전화번호가 변경됐는지 확인 후 초기화 2016.07.22 KHS
				cxLblCIDUseFlg.Hint := ''; // CID 조회인지 설정을 한다.  value:CID

      SetPrivateVariable; // 접수 전에 조회 조건 관련 전역변수 초기화..
      if Length(Trim(cxtCuTel.Text)) < 4 then
      begin
				GMessagebox('고객전화번호가 없거나 혹은 잘못 입력된 번호 입니다.', CDMSI);
				cxtCuTel.SetFocus;
				Exit;
			end;

      if Length(Trim(cxtCuTel.Text)) = 4 then
  		begin
  			CustomerSearch('TEL4');
        Exit;
      end;

      cxtCuTel.Text := AddPhoneDDD(cxtCuTel.Text);

      meoStartArea.Hint := 'STOPFOCUS'; // 포커스 더이상 넘어가지 않도록 한다.
      locCustHP_MainNum_Search := '';
      // JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
      // 선택된 지사정보에서 대표번호를 추출 한다.

			if ( Pos('a',cxtCuTel.Text) > 0 ) Or ( Pos('A',cxtCuTel.Text) > 0 ) then
      begin
  			cxtCuTel.Text := StringReplace(cxtCuTel.Text, 'a', '', [rfReplaceAll]);
  			cxtCuTel.Text := StringReplace(cxtCuTel.Text, 'A', '', [rfReplaceAll]);

        locAutoCallYn := 'N';
        tmrAutoCall.Enabled := True;
      end;

      GBTop3.Color := $008FEBFE;
      PnlKTPOIYN.Visible := False;

  		Proc_KeyNumberSearch(Proc_MainKeyNumberSearch);

      // 일반전화번호 인입시 KT전화번호로 POI 추출
      if ( Copy(cxtCuTel.Text, 1, 2) <> '01' ) And ( Copy(cxtCuTel.Text, 1, 2) <> '08' ) And ( GB_JON_POITELSEARCH ) then
        Proc_GetTelPOISearch(cxtCuTel.Text);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 오더 일련번호를 받아 오더 수정창을 열어 준다.  sTodayGb:1(당일오더), 2:(과거오더); sInsGubun:"수정", "추가접수"
procedure TFrm_JON01.Proc_OrderUpdate_Select(sConfSlip, sTodayGb, sInsGubun: string);
begin
  SetDebugeWrite('JON01.Proc_OrderUpdate_Select');
  Proc_OrderUpdate_Select_New(sConfSlip, sTodayGb, sInsGubun);
end;

// 접수 전에 조회 조건 관련 전역변수 초기화..
procedure TFrm_JON01.SetPrivateVariable;
begin
  SetDebugeWrite('JON01.SetPrivateVariable');
	locsCuTel := '';
  locsCuTel2 := '';
  lcsCu_seq := ''; // 현재 선택된 고객seq
  locHDNO := '';
  locBRNO := '';
	locKNum := ''; // 조회 고객 본사, 지사코드, 대표번호 임시저장.
	if Pos('콜링', Self.Caption) = 0 then
		locDNIS := '';
	locWkSabun := '';
  locSndTime := '';
  locAutoCallYn := '';
	locWkBrNo := ''; // 조회기사 사번, 기사지사코드 저장.
end;

// 전화번호, 고객명 으로 조회 한다... sGB : NAME(고객명으로 조회), : TEL4(전화번호4자리 조회)
procedure TFrm_JON01.CustomerSearch(sGB: string);
var
  sType, sHDNO, sBRNO, sKeyNumber: string;
  sSearch: String;

  XmlData, Param, ErrMsg: string;
  nodeList_Result : IXMLNodeList;
  ls_Rcrd: TStringList;
  I, ErrCode, iRow : Integer;
  idx: Integer;
begin
  SetDebugeWrite('JON01.CustomerSearch');
  // 선택된 지사정보에서 대표번호를 추출 한다.
  sKeyNumber := Proc_MainKeyNumberSearch;
  sHDNO := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
  sBRNO := Proc_BRNOSearch; // 지사코드 정보를 읽는다.

	if (sGB = 'TEL4') and (length(Trim(cxtCuTel.Text)) = 4) then
  begin
    sSearch := Trim(cxtCuTel.Text);
    sType := '1';
  end else
  if (sGB = 'NAME') and (length(Trim(cxtCuTel.Text)) >= 2) then
	begin
		sSearch := Trim(cxtCuTel.Text);
    sType := '2';
  end else
	begin
		GMessagebox('전화번호 일경우는 4자리, 고객명 일경우는 2자이상 입력하셔야 합니다.', CDMSI);
		cxtCuTel.Text := '';
		cxtCuTel.SetFocus;
		Exit;
  end;

  try
    Param := En_Coding(sType + '│' + sHDNO + '│' + sBRNO + '│' + sKeyNumber + '│' + sSearch);
    if not RequestBase(GetSel05('CUST_SEARCH_TYPE_LIST', 'MNG_CUST.CUST_SEARCH_TYPE_LIST', '1000', Param), XmlData, ErrCode, ErrMsg) then
    begin
      GMessagebox(Format('고객 조회  중 오류발생#13#10[%d]%s', [ErrCode, ErrMsg]), CDMSI);
      Exit;
    end;

    cxCustView.DataController.SetRecordCount(0); // Record 초기화.

    nodeList_Result := GetXmlSelectNodeList(XmlData, '/cdms/Service/Data/Result');
    if ( nodeList_Result = Nil ) Or ( nodeList_Result.Count = 0 ) then Exit;

    ls_Rcrd := TStringList.Create;
    cxCustView.BeginUpdate; // 데이터 삽입 필수.
    try
      for I := 0 to nodeList_Result.Count - 1 do
      begin
        if Trim(nodeList_Result.Get(i).Attributes['Value']) = '' then Continue;

        GetTextSeperationEx2('│', nodeList_Result.Get(i).Attributes['Value'], ls_Rcrd);
        Application.ProcessMessages;

        iRow := cxCustView.DataController.AppendRecord; // 1 Record 추가
        cxCustView.DataController.Values[iRow, 0] := ls_Rcrd[0];
        // 고객일련번호
        cxCustView.DataController.Values[iRow, 1] := ls_Rcrd[1]; // 고객명
        cxCustView.DataController.Values[iRow, 2] := ls_Rcrd[2];
        // 전화번호
        if Trim(ls_Rcrd[3]) <> '' then
        begin
          idx := GT_BUBIN_INFO.cbcode.IndexOf(Trim(ls_Rcrd[3]) + ',' + sBRNO);
          if idx = -1 then
          begin
            // 법인코드 불러오기 실패
          end else
          begin
            cxCustView.DataController.Values[iRow, 3] := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc[idx]), 1, 60)); // 법인명
            cxCustView.DataController.Values[iRow, 4] := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc[idx]), 61, 60)); // 법인부서명
          end;
        end else
        begin
          cxCustView.DataController.Values[iRow, 3] := ''; // 법인명
          cxCustView.DataController.Values[iRow, 4] := ''; // 법인부서명
        end;
        cxCustView.DataController.Values[iRow, 5] := ls_Rcrd[3]; // 법인코드
        cxCustView.DataController.Values[iRow, 6] := ls_Rcrd[4]; // 상담메모
        cxCustView.DataController.Values[iRow, 7] := ls_Rcrd[5]; // 기사용메모
        cxCustView.DataController.Values[iRow, 8] := ls_Rcrd[6]; // 고객구분
        cxCustView.DataController.Values[iRow, 9] := ls_Rcrd[7]; // 고객등급
        cxCustView.DataController.Values[iRow, 10] := ls_Rcrd[8]; // 완료건수
        cxCustView.DataController.Values[iRow, 11] := ls_Rcrd[9]; // 취소건수
        cxCustView.DataController.Values[iRow, 12] := ls_Rcrd[10]; // 현재마일리지
        cxCustView.DataController.Values[iRow, 13] := ls_Rcrd[11]; // 마일리지지급횟수
        if Trim(ls_Rcrd[12]) <> '' then
        begin
          cxCustView.DataController.Values[iRow, 14] := Copy(ls_Rcrd[12], 1, Pos('/', ls_Rcrd[12]) - 1); // 마일리지지급단위
          cxCustView.DataController.Values[iRow, 15] := Copy(ls_Rcrd[12], Pos('/', ls_Rcrd[12]) + 1, Length(ls_Rcrd[12])); // 지금상품명
        end else
        begin
          cxCustView.DataController.Values[iRow, 14] := ''; // 마일리지지급단위
          cxCustView.DataController.Values[iRow, 15] := ''; // 지금상품명
        end;
        cxCustView.DataController.Values[iRow, 16] := ls_Rcrd[13]; // 출발지명
        cxCustView.DataController.Values[iRow, 17] := ls_Rcrd[14]; // 출1
        cxCustView.DataController.Values[iRow, 18] := ls_Rcrd[15]; // 출2
        cxCustView.DataController.Values[iRow, 19] := ls_Rcrd[16]; // 출3
        cxCustView.DataController.Values[iRow, 20] := ls_Rcrd[17]; // 출X
        cxCustView.DataController.Values[iRow, 21] := ls_Rcrd[18]; // 출Y
        cxCustView.DataController.Values[iRow, 22] := ls_Rcrd[19]; // 도착지명
        cxCustView.DataController.Values[iRow, 23] := ls_Rcrd[20]; // 도1
        cxCustView.DataController.Values[iRow, 24] := ls_Rcrd[21]; // 도2
        cxCustView.DataController.Values[iRow, 25] := ls_Rcrd[22]; // 도3
        cxCustView.DataController.Values[iRow, 26] := ls_Rcrd[23]; // 도X
        cxCustView.DataController.Values[iRow, 27] := ls_Rcrd[24]; // 도Y
        cxCustView.DataController.Values[iRow, 28] := ls_Rcrd[25]; // SMS수신거부
      end;
      cxCustView.EndUpdate; // 데이터 삽입 필수.
    finally
      FreeAndNil(ls_Rcrd);
    end;
    cxGBSearch.Visible := True;
  except
    on E: Exception do
    begin
      ErrMsg := 'JON01[Proc_CustSearchRlt] Error:' + E.Message;
      GMessagebox(ErrMsg, CDMSE);
      // 에러 정보를 서버에 저장한다.
      Assert(False, E.Message);
    end;
  end;
end;

// 고객 전화번호로 고객 기본정보 조회
procedure TFrm_JON01.Proc_KeyNumberSearch(ss_KeyNumber: string; bCid: Boolean = False);
label
  Retry;
var
  ls_TxLoad: string;
  slRcvList: TStringList;
  CustTel, rv_str, ls_rxxml: string;
  ErrCode: integer;
  i, j : Integer;
  startTick, delta : DWord;
begin
  SetDebugeWrite('JON01.Proc_KeyNumberSearch');
  startTick := GetTickCount;

	if Trim(ss_KeyNumber) = '' then
	begin
    GMessagebox('지사 + 대표번호를 선택 하세요~', CDMSI);
    cboBranch.SetFocus;
    Exit;
  end;

	if Trim(cxtCuTel.Text) = '' then
  begin
    if Trim(cxtCallTelNum.Text) = '' then
    begin
      GMessagebox('고객전화번호를 입력 하세요~', CDMSI);
      cxtCuTel.SetFocus;
      Exit;
    end;
  end;

  // 출발지/도착지에 자료가 있는지 여부 체크 후 없으면 표시  20130724  LYB
  if ( cxtStartXval.Text <> '' ) Or ( cxtStartYval.Text <> '' ) Or
     ( cxtEndXval  .Text <> '' ) Or ( cxtEndYval  .Text <> '' ) then
    pbISStartEndXY := True
  else
    pbISStartEndXY := False;  // 초기화 부분에 문제가 있어서 사용 중지

  try
    cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);

    // ------------------ 발신번호 정보를 보여준다.------------------------
    if cxLblCIDUseFlg.Hint <> 'CID' then
    begin
      if locCustHP_MainNum_Search = '' then
			begin // JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
        locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
        locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.
        cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
        cxtCallTelNum.Text := cxtCuTel.Text;
      end;
    end else
    begin
      cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
      cxtCallTelNum.Text := cxtCuTel.Text;
    end;

    CustTel := cxtCallTelNum.Text;
    if locbWkToCust then
      CustTel := CustTel + '+';

		ls_TxLoad := GTx_UnitXmlLoad('JON03010.XML');
		ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString',        GT_USERIF.ID,   [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString',     VERSIONINFO,    [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString',     'KYNM0001',     [rfReplaceAll]);

		if cxLblCIDUseFlg.Hint <> 'CID' then
		begin
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsYnString',        'n'                    , [rfReplaceAll]); // CID서버로 부터 생성된 창인지 여부 (y,n)
      if gsCidVersion = 'CXE' then
        ls_TxLoad := StringReplace(ls_TxLoad, 'CidsVersionString',   '1', [rfReplaceAll]) // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      else
        ls_TxLoad := StringReplace(ls_TxLoad, 'CidsVersionString',   '0', [rfReplaceAll]); // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsInlineString',    ''                     , [rfReplaceAll]); // 내선번호  (CID서버에서 수신한값)
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsDnisString',      ''                     , [rfReplaceAll]); // DNIS번호  (CID서버에서 수신한값)
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsKeyNumberString', ''                     , [rfReplaceAll]); // 대표번호  (CID서버에서 수신한값
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsCidNumString',    ''                     , [rfReplaceAll]); // 고객번호  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsCidKeyString',    ''                     , [rfReplaceAll]); // 고객번호별고유키값  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsBrNoString',      ''                     , [rfReplaceAll]); // 지사코드 (CID서버에서 수신한값)
		end else
    begin
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsYnString',        'y'                    , [rfReplaceAll]); // CID서버로 부터 생성된 창인지 여부 (y,n)
      if gsCidVersion = 'CXE' then
				ls_TxLoad := StringReplace(ls_TxLoad, 'CidsVersionString',   '1', [rfReplaceAll]) // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      else
        ls_TxLoad := StringReplace(ls_TxLoad, 'CidsVersionString',   '0', [rfReplaceAll]); // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsInlineString',    gsInternalNumber       , [rfReplaceAll]); // 내선번호  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsDnisString',      En_Coding(locDNIS)     , [rfReplaceAll]); // DNIS번호  (CID서버에서 수신한값)
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsKeyNumberString', En_Coding(ss_KeyNumber), [rfReplaceAll]); // 대표번호  (CID서버에서 수신한값
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsCidNumString',    CustTel                , [rfReplaceAll]); // 고객번호  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsCidKeyString',    locSndTime             , [rfReplaceAll]); // 고객번호별고유키값  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsBrNoString',      En_Coding(locBRNO)     , [rfReplaceAll]); // 지사코드 (CID서버에서 수신한값)
    end;

		ls_TxLoad := StringReplace(ls_TxLoad, 'ManTelString',        cxtCuTel.Text     , [rfReplaceAll]); // 고객번호   (상담원의 임의로 고객번호입력)
		ls_TxLoad := StringReplace(ls_TxLoad, 'ManKeyNumberString',  En_Coding(locKNum), [rfReplaceAll]); // 대표번호   (상담원이 임의로 지사/대표번호 선택)
		ls_TxLoad := StringReplace(ls_TxLoad, 'ManBrNoString',       En_Coding(locBRNO), [rfReplaceAll]); // 지사코드   (상담원이 임의로 지사/대표번호 선택)

    // 사용자별 오더통계를 계산하기 위한 속성값(CID : 0(일반), 1(CID))
    if bCid then
    begin
      if locCustHP_MainNum_Search = '' then
				// JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
				ls_TxLoad := StringReplace(ls_TxLoad, 'CidsAutoString', '1', [rfReplaceAll])   // CID서버로부터 생성되어 최초 전문요청시 (1)
			else
				ls_TxLoad := StringReplace(ls_TxLoad, 'CidsAutoString', '0', [rfReplaceAll]);
		end else
    begin
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsAutoString', '0', [rfReplaceAll]);
		end;

		// 접수화면의 기본 컨트롤을 초기화 한다.
		gsCuTelHint := cxtCuTel.Text;
		meoBigo.Hint := 'NOCLEAR';
    ControlClear(False);
    if ( Not pbISStartEndXY ) Or ( locAutoCallYn = 'Y') then
    begin
      FControlInitial(False, False); // 폼컨트롤 초기화.
    end;
    meoBigo.Hint := '';

    cxtCuTel.Text := gsCuTelHint;
    locsCuTel := cxtCuTel.Text;

    Frm_JON012.cxBtnOldSelect.Tag := 0;
    Frm_JON012.cxGVeOrderList.DataController.SetRecordCount(0);
    Frm_JON012.cxGVeOrderList.DataController.Filter.Clear;
    Frm_JON012.cxGVeOrderList.DataController.Filter.Active := False;

Retry:
    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      GS_HINT_NO := True;
      Proc_JobAfterProc(True, False);
      rv_str := '';
      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end else
         gsCuTelHint := '';  // 20130701  LYB  네트워크 오류시 재 조회 하게끔 변수 처리
    finally
      Proc_JobAfterProc(False, False);
			GS_HINT_NO := False;
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
    end;

    // 플러스콜 사용여부 체크
		proc_PlusCall_CtrlYN;
		// 탁송연합콜 사용
		proc_TakCall_CtrlYN;
		//AI 아웃바운드 옵션 배차지연콜 사용여부
		proc_AIOB_CtrlYN;
//    if (cxLblCIDUseFlg.Hint = 'CID') then
    begin
			if ( Frm_Main.JON01MNG[Self.Tag].rKey = '' ) then
      begin
				Frm_Main.JON01MNG[Self.Tag].rKey := GT_USERIF.ID + FormatDateTime('yyyymmddhhmmss', Now);
        Frm_Main.JON01MNG[Self.Tag].rTime := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);  // 콜링시간(yyyy-mm-dd hh:mm:ss)
				Frm_Main.JON01MNG[Self.Tag].rOriginal := True;
      end;

			BtnQRate.Enabled := True;
      BtnQRate.Tag := 0;
			tmrCShare.Interval := 100;
      tmrCShare.Enabled := True;
    end;

//		if bAppOrder = True then pnlJonMain.Enabled := False; //앱오더면 앱판넬 보여주고 접수창 컨트롤 잠금 20191217 KHS

		pSet701CShareValue(Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
		delta := GetTickCount - startTick;
		SetDebugeWrite(Format('JON01.Proc_KeyNumberSearch End = %d', [delta]));
	except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

// 고객 전화번호로 고객 기본정보 조회
procedure TFrm_JON01.Proc_AutoCallSearch(ss_KeyNumber: string; bCid: Boolean = False);
label
  Retry;
var
  ls_TxLoad: string;
  slRcvList: TStringList;
  CustTel, rv_str, ls_rxxml: string;
  ErrCode: integer;
  i, j : Integer;
begin
  SetDebugeWrite('JON01.Proc_AutoCallSearch');
	if Trim(ss_KeyNumber) = '' then
  begin
    GMessagebox('지사 + 대표번호를 선택 하세요~', CDMSI);
    cboBranch.SetFocus;
    Exit;
  end;

  if Trim(cxtCuTel.Text) = '' then
  begin
    if Trim(cxtCallTelNum.Text) = '' then
    begin
      GMessagebox('고객전화번호를 입력 하세요~', CDMSI);
      cxtCuTel.SetFocus;
      Exit;
    end;
  end;

  if Trim(locHdNo) = '' then locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
  if Trim(locBrNo) = '' then locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
  if Trim(locKNum) = '' then locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

  try
    ls_TxLoad := GTx_UnitXmlLoad('JON03030_02.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString',        GT_USERIF.ID,   [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString',     VERSIONINFO,    [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString',     'JON03030',     [rfReplaceAll]);

    ls_TxLoad := StringReplace(ls_TxLoad, 'CuTelString',         cxtCuTel.Text     , [rfReplaceAll]); // 고객번호   (상담원의 임의로 고객번호입력)
    ls_TxLoad := StringReplace(ls_TxLoad, 'KeyNumberString',     En_Coding(locKNum), [rfReplaceAll]); // 대표번호   (상담원이 임의로 지사/대표번호 선택)
    ls_TxLoad := StringReplace(ls_TxLoad, 'HdNoString',          En_Coding(locHDNO), [rfReplaceAll]); // 본사코드   (상담원이 임의로 지사/대표번호 선택)
    ls_TxLoad := StringReplace(ls_TxLoad, 'BrNoString',          En_Coding(locBRNO), [rfReplaceAll]); // 지사코드   (상담원이 임의로 지사/대표번호 선택)

    if Frm_Main.JON020MNG[Self.Tag].Use = False then
    begin
      if Frm_Main.JON020MNG[Self.Tag].CreateYN = False then
      begin
        Frm_Main.Frm_Jon020[Self.Tag] := TFrm_JON020.Create(nil); // 폼 객체를 생성한다.
        Frm_Main.JON020MNG[Self.Tag].CreateYN := True;
        Frm_Main.JON020MNG[Self.Tag].Use := True;
        Frm_Main.Frm_Jon020[Self.Tag].Caption := '';
      end;
    end;

    Frm_Main.Frm_JON020[Self.Tag].Tag := Self.Tag;
    Frm_Main.Frm_JON020[Self.Tag].Hint := Self.Caption;
    Frm_Main.Frm_JON020[Self.Tag].bChkTime := True;
    if Frm_Main.JON01MNG[Self.Tag].Dock then
    begin
      Frm_Main.Frm_JON020[Self.Tag].Left := Frm_JON00.Left - (Frm_Main.Frm_JON020[Self.Tag].Width + 1);
      Frm_Main.Frm_JON020[Self.Tag].Top  := Frm_JON00.Top;
    end else
    begin
      Frm_Main.Frm_JON020[Self.Tag].Left := Self.Left - (Frm_Main.Frm_JON020[Self.Tag].Width + 1);
      Frm_Main.Frm_JON020[Self.Tag].Top  := Self.Top;
    end;
    Frm_Main.Frm_JON020[Self.Tag].Show;

		Frm_Main.Frm_JON020[Self.Tag].cxLblTitle.Caption := StrToCall(gsCuTelHint);

Retry:
    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
    end;

  except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

// 오더 일련번호를 받아 오더 수정창을 열어 준다.  sTodayGb:1(당일오더), 2:(과거오더); sInsGubun:"수정", "추가접수"
procedure TFrm_JON01.Proc_OrderUpdate_Select_New(sConfSlip, sTodayGb, sInsGubun: string);
begin
  SetDebugeWrite('JON01.Proc_OrderUpdate_Select_New');
  loc_Up_Recv_YN := False; // 수정전문 요청후 화면 초기화 완료여부

  try
		SetPrivateVariable; // 접수 전에 조회 조건 관련 전역변수 초기화..
		cxLblCIDUseFlg.Hint := ''; // CID 조회인지 설정을 한다.
		cxtCuTel.Hint := '';

//    locHDNO := '';
//    locBRNO := ''; // 조회 고객 본사, 지사코드, 대표번호 임시저장.
//    locKNum := ''; // CID에서 들어온 대표번호 설정.
		locDNIS := '';
//    locSndTime := '';
    locAutoCallYn := '';
		cxtCallTelNum.Text := ''; // CID 설정.
    cxLblConfSlipUseFlg.Hint := 'CONFSLIP'; // 접수번호 조회인지 설정.
		if (Pos('추가접수', sInsGubun) > 0 ) then
			cxtJoinNum.Text := '' //20170530 KHS 추가접수일 경우 접수번호 초기화.백두산대리 요청
		else
			cxtJoinNum.Text := sConfSlip; // 접수번호 저장.

		cxtJoinNum.Tag := StrToIntDef(sTodayGb, 2);
    // sTodayGb:1(당일오더), 2:(과거오더)
    btnCmdUpdSave.Hint := sInsGubun; // "추가접수" 또는 "수정" 구분값 저장.
		if (Pos('수정', sInsGubun) > 0 ) then
		begin
			cxTxtBrNameCaption.Hint := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
			btnCmdExit.Hint := 'UPDATE_MODE' // 오더정보 수정모드 설정을 한다.
		end else
		if (Pos('앱접수', sInsGubun) > 0 ) then
		begin
			cxTxtBrNameCaption.Hint := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
			btnCmdExit.Hint := 'UPDATE_MODE' // 오더정보 앱접수 설정을 한다.
		end else
		if (Pos('조회', sInsGubun) > 0 ) then
		begin
			cxTxtBrNameCaption.Hint := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
			btnCmdExit.Hint := 'UPDATE_MODE' // 오더정보 수정모드 설정을 한다.
		end else
    begin
      cxTxtBrNameCaption.Hint := '';
      btnCmdExit.Hint := '';
    end;

    if btnCmdUpdSave.Tag = 99 then
    begin // 24시간 지난오더는 수정 할 수 없음.
      btnCmdUpdSave.Enabled := False;
    end;

    Frm_JON012.cxBtnOldSelect.Tag := 0;
    Frm_JON012.cxGVeOrderList.DataController.SetRecordCount(0);
    Frm_JON012.cxGVeOrderList.DataController.Filter.Clear;
    Frm_JON012.cxGVeOrderList.DataController.Filter.Active := False;

    Application.ProcessMessages;
    Proc_Jon012Show; // 고객 이용내역을 미리 띄워준다.

    // 접수화면의 기본 컨트롤을 초기화 한다.
		FControlInitial(False, True); // 폼컨트롤 초기화.
		ControlClear;

    if btnCmdUpdSave.Hint = '추가접수' then
    begin
      btnCmdUpdSave.Enabled := False;
			btnCmdUpdSave.Visible := False;
			btnCmdMultiCall.Enabled := True;
			btnCmdQuestion.Enabled := True;
		end;

    cxTxtBrNameCaption.Text := '오더정보 읽는중...';
    // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.
    cxTxtBrNameCaption.BringToFront;
    cxTxtBrNameCaption.Visible := True;
    // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.

    loc_Up_Recv_YN := True; // 수정전문 요청후 화면 초기화 완료여부

    // 오더 일련번호를 받아 오더 수정정보를 조회 한다.
		Proc_ConfSlip_Select_New(sConfSlip, sTodayGb);
    // sTodayGb:1(당일오더), 2:(과거오더)

    if btnCmdUpdSave.Hint = '추가접수' then
    begin
      dtpResvDateJ.Enabled := True;
      dtpResvTimeJ.Enabled := True;
    end;

		if (Pos('수정', sInsGubun) > 0 ) or (Pos('앱접수', sInsGubun) > 0 ) then
		begin
			BtnPlusYN.Enabled := False;            //플러스콜 : 수정창에서는 enabled = false
//			BtnTakAlly.Enabled := False;            //탁송연합콜 : 수정창에서는 enabled = false
		end;
	except
    on e: exception do
		begin
      loc_Up_Recv_YN := True; // 수정전문 요청후 화면 초기화 완료여부
      Assert(False, E.Message);
    end;
  end;
end;

// 선택된 지사정보에서 본사코드를 추출 한다.
function TFrm_JON01.Proc_HDNOSearch: string;
var
  sTmp: string;
begin
  // A100.B100:*NS법인[15889999]
  // *NS법인[15889999] A100.B100
  sTmp := RightStr(cboBranch.Text, 11); // 본사코드,지사코드
  Result := Trim(Copy(sTmp, 1, Pos('.', sTmp) - 1)); // 본사코드
end;

// 전문 요청후 결과에 따라 화면 Enabled: True/False 처리를 해준다.

procedure TFrm_JON01.Proc_JobAfterProc(bFormLock: boolean; bOrderInsGB: boolean =
  False);
begin
  try
    if bFormLock then
		begin
      SetDebugeWrite('JON01.Proc_JobAfterProc True');

      //------> 화면에 Lock을 건다. <--------
      pnlJonMain.Enabled := False;
      // 요청한 업무처리가 왼료 될때까지 접수화면의 모든 기능을 일시 정지 시킨다.
      Frm_JON012.Enabled := False;
      //-------------------------------------
    end else
    begin
      SetDebugeWrite('JON01.Proc_JobAfterProc False');
      //------> 화면의 Lock을 풀어준다. <--------
			pnlJonMain.Enabled := True;
			// 요청한 업무처리가 왼료 될때까지 접수화면의 모든 기능을 일시 정지 시킨다.
			Frm_JON012.Enabled := True;
			//-------------------------------------

			Screen.Cursor := crDefault;

			Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
			GB_JON03SELECT_GB := True;

			if bOrderInsGB then
			begin
				// 접수현황에서 수정전문 요청시 결과받았는지의 여부.
				if cxLblCIDUseFlg.Hint = 'CID' then
				begin // CID 조회인지 설정을 한다.
					cxtCuTel.Text := cxtCallTelNum.Text;
				end;
			end;

			// 서버요청후 지연 디버그 정보를 저장한다.
			if GS_DEBUG_MSG_J01 <> '' then
			begin
				GS_DEBUG_MSG_J01 := StringReplace(GS_DEBUG_MSG_J01, '!!$초과시간$!!', shaPrcMsg.Hint, [rfReplaceAll]);
				Assert(False, GS_DEBUG_MSG_J01);
			end;
		end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 서버에서 받은 전문을 ClientKey에 따라 결과 처리를 한다.
procedure TFrm_JON01.Proc_recieve(ls_rxxml: String);
var
  ls_ClientKey, ls_Msg_Err, sMsg: string;
begin
	SetDebugeWrite('JON01.Proc_recieve');
  try
    if not isLoadFromXML(ls_rxxml) then
    begin
      Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
			GMessagebox('[Proc_Recieve]XML전문 형식이 맞지 않습니다.' + #13#10 +
        '다시한번 조회 하세요', CDMSE);
      GB_JON03SELECT_GB := True;
      // 접수현황에서 수정전문 요청시 결과받았는지의 여부.
      Exit;
    end;

    //-------------------------- Client Key Read -----------------------------
    ls_ClientKey := GetXmlClientKey(ls_rxxml);
    //------------------------------------------------------------------------
		if ls_ClientKey = 'KEYN0001' then
			Proc_NumberInsert(ls_rxxml) // 대표번호 검색하기..
		else
		if ls_ClientKey = 'KYNM0001' then
    begin
			Proc_KeyNumberInsert(ls_rxxml); // [고객전화번호] 로 검색 후 결과를 처리한다.
    end else
    if ls_ClientKey = 'JON03030' then
    begin
			Proc_AutoCallInsert(ls_rxxml); // [고객전화번호] 로 오토콜 검색 결과를 처리한다.
    end else
    if ls_ClientKey = 'VIA00001' then
    begin
      proc_ViaInfo_insert(ls_rxxml); // 받아온 경유지 정보를 저장 한다.
    end else
    if Copy(ls_ClientKey, 1, 7) = 'SAVE000' then
    begin
			if ls_ClientKey = 'SAVE000S' then   // SMS거부 수정 결과 처리
			begin
				ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
				if ('0000' = ls_Msg_Err) then
				begin
					GMessagebox('SMS거부 설정 완료 하였습니다.', CDMSI)
				end else
				begin
					GMessagebox('SMS거부 설정중 에러가 발생 하였습니다.' + #10#13 + ls_Msg_Err, CDMSI);
				end;
			end;     
			Proc_SaveReturn(ls_rxxml); // 접수 등록 결과 처리 한다.
    end else
    if ls_ClientKey = 'CUSV0032' then
    begin
      Proc_CustBasicSave_Result(ls_rxxml); // 고객기본정보 수정 작업후 결과 처리..
    end else
    if ls_ClientKey = 'JON03020' then   // SMS거부 수정 결과 처리
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      if ('0000' = ls_Msg_Err) then
      begin
				if ChkCuSmsNo.Tag <> 99 then
				begin
					if ChkCuSmsNo.Checked then
						GMessagebox('SMS거부 설정 수정 완료 하였습니다.', CDMSI)
					else
						GMessagebox('SMS거부 해제 수정 완료 하였습니다.', CDMSI)
				end;
      end else
      begin
        GMessagebox('SMS거부 수정도중 에러가 발생 하였습니다.' + #10#13 + ls_Msg_Err, CDMSI);
      end;
    end else
    if (ls_ClientKey = 'CUSE0001') or
       (ls_ClientKey = 'CUSE0011') or
       (ls_ClientKey = 'CUSE0012') then
    begin
      Proc_RequestResult(ls_rxxml, ls_ClientKey);  // 고객 SEQUENCE조회, 출/도착지, 저장 후 결과 처리.
    end else
		if ls_ClientKey = 'ORDE0011' then
    begin
      // [수정화면 띄우기..](오더일련번호)접수번호로 조회 후 그 결과 처리를 한다.  // 타임 로그를 찍는다.
			loc_RateNOT := True; // 요금 계산을 막음.
			Proc_ConfSlipSelectResult(ls_rxxml);
      // [오더 일련번호:접수번호] 로 검색 후 결과를 처리한다.[수정화면 띄우기..]
      loc_RateNOT := False; // 요금 계산을 막음.
		end else
		if ls_ClientKey = 'MODI0001' then
    begin
			ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
			if ('0000' = ls_Msg_Err) then
      begin // 오더 수정모드에서 요청후 결과 처리..

				if GB_JON_FINISHMSG then
					GMessagebox(MDXCI_0006, CDMSI);

				Application.ProcessMessages;

				if (cxtJoinNum.Hint = '5') and ( GB_ResToJoin_USE ) and (bJoinBtn) then  //대기오더 수정시 접수로 변경 사용시 20190618 KHS
				begin
					if not func_ResToJoin('6',cxtJoinNum.Text, '5') then //6 대기해제, 5 대기
					begin
						GMessagebox('오류로 인하여 접수상태로 변경에 실패하였습니다. ' + #13#10
											+ '직접 대기해제 하여 주십시오.', CDMSI);
					end;    
				end;

				Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(1, cxtJoinNum.Text);
				tmFormClose.Tag := 77; // 화면 닫기 설정값.
				loc_TmClose := 'CLOSE'; // 화면 종료 타이머 변수. CDS. 080830.
				tmFormClose.Enabled := True; // 화면을 닫는다.
			end
			else if ('3002' = Copy(ls_Msg_Err, 1, 4)) then
			begin
				GMessagebox('상태가 변경 되었습니다.' + CRLF + ls_Msg_Err, CDMSI);
			end else
			begin
				GMessagebox('처리 실패 하였습니다' + CRLF + ls_Msg_Err, CDMSI);
			end;
		end else
		if ls_ClientKey = 'ResToJoin' then
		begin
			bResToJoin := False;
			ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
			if ('0000' = ls_Msg_Err) then bResToJoin := True;
		end else
		if ls_ClientKey = 'CUOD0010' then
		begin
			Frm_JON012.Proc_CustOldSelectResult(ls_rxxml);
			// 고객과거 이용내역 불러오기..
		end else
    if ls_ClientKey = 'CardDown' then
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      if ls_Msg_Err = '0000' then
        GMessagebox('카드모듈 다운로드 요청 하였습니다.', CDMSI)
      else
        GMessagebox('카드모듈 다운로드 요청에 실패했습니다.'#13#10 + GetXmlErrorMsg(ls_rxxml), CDMSI);
    end else
    if ls_ClientKey = 'URLR0001' then
    begin
//      btnBubinReq.Enabled := True;
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      if ('0000' = ls_Msg_Err) then
      begin
        GMessagebox('법인 인증을 요청하였습니다.', CDMSI);
      end else
      begin
        GMessagebox(ls_Msg_Err, CDMSI);
      end;
		end else
    if ls_ClientKey = 'LOCK0001' then
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      // 오더 수정화면 띄울때,, Lock을 [설정] 한다.
      if ('0000' = ls_Msg_Err) then
      begin
        loc_bUpdateLock := True;
        // 수정화면 Lock 설정 여부.[True:설정, False:미설정]
		 //proc_Cust_info(ed_MaddBrch.Text,ed_Cust_Tel_Hidden.Text);
      end else
      begin
        GMessagebox(ls_Msg_Err, CDMSI);
      end;
    end else
      if ls_ClientKey = 'LOCK0002' then
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      // 오더 수정화면 닫을때,, Lock을 [해제] 한다.
      loc_bUpdateLock := False;
      // 수정화면 Lock 설정 여부.[True:설정, False:미설정]
      if btnCmdExit.Tag = 999 then btnCmdExit.Tag := 0;
			// 수정모드에서 프로그램 닫을때, Lock 해제설정 초기화 한다.
      if ('0000' <> ls_Msg_Err) then
      begin
        GMessagebox(ls_Msg_Err, CDMSI);
      end;
    end else
      if ls_ClientKey = 'DELETECUST' then
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      sMsg := GetXmlErrorMsg(ls_rxxml);
      if ('0000' = ls_Msg_Err) and ('1' = sMsg) then
      begin
        GMessagebox('성공하였습니다.', CDMSI);
				tmFormClose.Tag := 77; // 화면 닫기 설정값.
        loc_TmClose := 'CLOSE'; // 화면 종료 타이머 변수. CDS. 080830.
        tmFormClose.Enabled := True; // 화면을 닫는다.
        //btnCmdExitClick(btnCmdExit);
      end else
      begin
        GMessagebox('실패하였습니다.' + #13#10 + '다시 한번 시도해 보세요', CDMSI);
      end;
    end else
    begin
      sMsg := GetXmlErrorMsg(ls_rxxml);

      GMessagebox('통신 중 오류가 발생했습니다.[' + sMsg + ']', CDMSI);

      Assert(False, '통신 중 오류가 발생했습니다.[' + ls_rxxml + ']');
      Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
      pnlJonMain.Enabled := True;
      GB_JON03SELECT_GB := True;
      // 접수현황에서 수정전문 요청시 결과받았는지의 여부.
    end;
  except
    on e: exception do
    begin
      ShowMessage('[Proc_recieve]예외처리:' + e.Message);
    end;
  end;
end;

// 선택 오더에 대해 Lock 을 설정한다.
procedure TFrm_JON01.Proc_AcceptLock(ss_Gubun: string);
var
  ls_TxLoad: string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  ErrCode: integer;
begin
  SetDebugeWrite('JON01.Proc_AcceptLock');
  if (ss_Gubun = '') then
    Exit;

  try
    ls_TxLoad := GTx_UnitXmlLoad('C009.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString',   VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString',   'LOCK000' + ss_Gubun);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfSlipString',    En_Coding(cxtJoinNum.Text));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfStatusString',  En_Coding(cxtJoinNum.Hint));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'InSabunString',     En_Coding(GT_USERIF.ID));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'GubunCodeString',   ss_Gubun);

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;

    btnCmdExit.Tag := 0;
    // 수정모드에서 프로그램 닫을때, Lock 해제설정 초기화 한다.

  except
    on e: exception do
    begin
      ls_TxLoad := 'JON01[Proc_AcceptLock]:' + e.Message;

//      btnBubinReq.Enabled := True;
      Screen.Cursor := crDefault;
    end;
  end;
end;

function TFrm_JON01.proc_AIOB_CtrlYN: string;
var sTmp : string;
begin
	SetDebugeWrite('JON01.proc_AIOB_CtrlYN');
	try
		sTmp := '';

		sTmp := Proc_MainKeyNumberSearch;
		if not GetAIOBKeyNumberYN(sTmp) then   //고객이 선택되어 있어도 지사의 대표번호에서 사용안하면 체크해제
		begin
			chk_AIReCall.Properties.ReadOnly := True;
			chk_AIReCall.checked := False;
		end else chk_AIReCall.Properties.ReadOnly := False; 

		Result := sTmp;
	except
		Result := '';
	end;
end;

// 오더 일련번호를 받아 오더 수정정보를 조회 한다.  sTodayGubun:1(당일오더), 2:(과거오더)
procedure TFrm_JON01.Proc_ConfSlip_Select_New(sConfSlip, sTodayGubun: string);
var
  ls_TxLoad: string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  ErrCode: integer;
  sErrorTxt : String;
begin
	SetDebugeWrite('JON01.Proc_ConfSlip_Select_New');
  try
    ls_TxLoad := GTx_UnitXmlLoad('C033N4.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'ORDE0011');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfSlipString', En_Coding(sConfSlip)); // 오더일련번호
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'TodayGubunString', En_Coding(sTodayGubun)); // 1:A01_Today, 2:A01 여부

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False, 15000, sConfSlip) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end else
      begin
        sErrorTxt := 'Proc_ConfSlip_Select_New Error : 접수번호 : ' + sConfSlip +
                      ' - Heart Bit Count : ' + IntToStr(gsSEndSockAcceptHb) +
                      ' - PreMsgCode : ' + gsPreMsgCode +
                      ' - ConnectYN : ' + gsSendSockAcceptCon +
                      ' - XML전문 : ' + En_Coding(gsSendSockAcceptData);
        Assert(False,  sErrorTxt);
        GMessagebox(Format('오더 정보 조회 중 오류가 발생하였습니다.'#13#10'수정 창을 닫고 다시시도 바랍니다.(%s)', [FormatDateTime('YYYY-MM-DD HH:NN:SS', Now)]), CDMSE);
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;

  except
    on e: exception do
    begin
      GMessagebox(Format('오더 정보 조회 중 오류가 발생하였습니다.'#13#10'수정 창을 닫고 다시시도 바랍니다.(E: %s)', [E.Message]), CDMSE);

      pnlJonMain.Enabled := True;
      Screen.Cursor := crDefault;

      Assert(False, E.Message);
    end;
  end;
end;

// 버튼 활성/비활성 처리.
procedure TFrm_JON01.Proc_BtnEnabled(bTF: boolean = True);
begin
  SetDebugeWrite('JON01.Proc_BtnEnabled');
  try
    if (Pos('조회', Self.Caption) > 0) then
    begin
      btnCmdJoin.Enabled := False; // 접수버튼
      btnCmdWait.Enabled := False; // 대기버튼
      btnCmdQuestion.Enabled := False; // 문의버튼
      btnCmdJoinCopy.Enabled := False; // 접수후복사
      btnCmdWaitCopy.Enabled := False; // 대기후복사
      btnCmdUpdSave.Enabled := bTF; // 수정
//      if ABubinStateIndex in [1,2] then
//      begin
//        btnCmdJoin.Enabled := False; // 접수버튼
//        btnCmdWait.Enabled := True; // 대기버튼
//        btnCmdQuestion.Enabled := True; // 문의버튼
//        btnCmdJoinCopy.Enabled := False; // 접수후복사
//        btnCmdWaitCopy.Enabled := False; // 대기후복사
//        btnCmdUpdSave.Enabled := bTF; // 수정
//        btnCmdMultiCall.Enabled := False; //복수콜
//      end;
    end else
    begin
//      if ABubinStateIndex in [1,2] then
//      begin
//        btnCmdJoin.Enabled := False; // 접수버튼
//        btnCmdWait.Enabled := bTF; // 대기버튼
//        btnCmdQuestion.Enabled := bTF; // 문의버튼
//        btnCmdJoinCopy.Enabled := False; // 접수후복사
//        btnCmdWaitCopy.Enabled := False; // 대기후복사
//        btnCmdUpdSave.Enabled := bTF; // 수정
//        btnCmdMultiCall.Enabled := False; //복수콜
//      end else
      begin
        btnCmdJoin.Enabled := bTF; // 접수버튼
        btnCmdWait.Enabled := bTF; // 대기버튼
        btnCmdQuestion.Enabled := bTF; // 문의버튼
        btnCmdJoinCopy.Enabled := bTF; // 접수후복사
        btnCmdWaitCopy.Enabled := bTF; // 대기후복사
        btnCmdUpdSave.Enabled := bTF; // 수정
      end;
    end;
  //-	btnCmdNoSms.Enabled := bTF; // 수신거부
    if cbbPayMethod.Text = '후불(카드)' then
    begin
      if btnCmdUpdSave.Visible then
      begin
        btnCmdJoin.Enabled := False;
        btnCmdWait.Enabled := False;
        btnCmdJoinCopy.Enabled := False;
        btnCmdWaitCopy.Enabled := False;
      end else
      begin
        btnCmdJoin.Enabled := bTF;
        btnCmdWait.Enabled := bTF;
        btnCmdJoinCopy.Enabled := bTF;
        btnCmdWaitCopy.Enabled := bTF;
      end;
    end;

    // -- 오토콜은 문의접수만 가능
    if locAutoCallYn = 'Y' then
    begin
      btnCmdJoin.Enabled := False; // 접수버튼
      btnCmdWait.Enabled := False; // 대기버튼
      btnCmdQuestion.Enabled := True; // 문의버튼
      btnCmdJoinCopy.Enabled := False; // 접수후복사
      btnCmdWaitCopy.Enabled := False; // 대기후복사
      btnCmdMultiCall.Enabled := False; // 복수콜
    end;
  Except
    on e: exception do
    begin
      Log('Proc_BtnEnabled Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_BtnEnabled Error :' + E.Message);
    end;
  end;
end;

// 대표번호로 조회 후 결과 처리를 한다.
procedure TFrm_JON01.Proc_NumberInsert(rxxml: String);
var
  lst_Result: IXMLNode;
  ls_Rcrd: TStringList;
begin
  SetDebugeWrite('JON01.Proc_NumberInsert');
  try
    if (0 < GetXmlRecordCount(rxxml)) then
    begin
      lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Result');
      if lst_Result = Nil then Exit;

      ls_Rcrd := TStringList.Create;
      try
        GetTextSeperationEx('│', lst_Result.Attributes['Value'], ls_Rcrd);

        cboBranch.Tag := 10;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
        cboBranch.Properties.Items.Clear;

        // 본사코드   // 지사코드   // 지사명   // 대표번호
        cboBranch.Properties.Items.Add(ls_Rcrd[1] + '[' + Trim(cxTSearchMainTel.Text) + '] ' + Copy(ls_Rcrd[3]
          + '     ', 1, 5) + Copy(ls_Rcrd[0] + '     ', 1, 5));
        cboBranch.ItemIndex := 0;

        cboBranch.Tag := 0;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
        sNowRate := ls_Rcrd[2]; // 현재 지사의 기본요금 설정액.
        if BtnRaLock.Hint <> 'F4)잠금' then
        begin
          curRate.Value := StrToFloatDef(ls_Rcrd[2], 0);
          OrgRate := curRate.Value;
        end;
        // 대표번호를 정상 조회 했으므로 초기화 한다.
        cxTSearchMainTel.Text := '';
      finally
        FreeAndNil(ls_Rcrd);
      end;
    end else
    begin
      // 메시지 내용 : 등록되지 않은 대표번호 입니다.
      GMessagebox(MSG421, CDMSI);
    end;
  except
    on e: exception do
    begin
      ShowMessage('[대표번호조회RESULT]예외처리:' + e.Message);
    end;
  end;
end;

// 오토콜 고객번호로 조회 후 결과 처리를 한다.
procedure TFrm_JON01.Proc_AutoCallInsert(rxxml: String);
var
  nodeList_Result : IXMLNodeList;
  lst_Result: IXMLNode;
  ls_Rcrd: TStringList;
  i, iRow : Integer;
  sTemp, ls_Msg_Err : String;
begin
  SetDebugeWrite('JON01.Proc_AutoCallInsert');
  try
    if Not Assigned(Frm_Main.Frm_JON020[Self.Tag]) then Exit;

    ls_Msg_Err := GetXmlErrorCode(rxxml);
    if ('0000' = ls_Msg_Err) then
    begin
      lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/SmsInfo');
      if lst_Result = Nil then Exit;

      if lst_Result.Attributes['Type'] = 'Callmaner' then gOShotSend := False else
      if lst_Result.Attributes['Type'] = 'Oshot'     then gOShotSend := True;

      gOShotUserID   := lst_Result.Attributes['OshotId'];
      gOShotUserPass := lst_Result.Attributes['OshotPwd'];

      nodeList_Result := GetXmlSelectNodeList(rxxml, '/cdms/Service/Data/SmsInfo/Sms');
      if ( nodeList_Result = Nil ) then Exit;

      if nodeList_Result.Count > 0 then
      begin
        try
          for i := 0 to nodeList_Result.Count - 1  do
          begin
            Application.ProcessMessages;
            if nodeList_Result.Get(i).Attributes['SmsType'] = '140' then
            begin
              Frm_Main.Frm_JON020[Self.Tag].mmoSMS140.Text := nodeList_Result.Get(i).Text;
              Frm_Main.Frm_JON020[Self.Tag].lblSMS140.Caption := IntToStr(GetSmsMemoLength(AnsiString(Frm_Main.Frm_JON020[Self.Tag].mmoSMS140.Text))) + ' Byte';
              Frm_Main.Frm_JON020[Self.Tag].ImgAgree.Hint := nodeList_Result.Get(i).Attributes['FromNum'];
              ls_Rcrd := TStringList.Create;
              try
                GetTextSeperationEx('|', nodeList_Result.Get(i).Attributes['Filenames'], ls_Rcrd);
                Frm_Main.Frm_JON020[Self.Tag].ImgDMMS.Hint := ls_Rcrd[0];

                if Trim(Frm_Main.Frm_JON020[Self.Tag].ImgDMMS.Hint) <> '' then
                begin
                  if FileExists(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgDMMS.Hint) then
                  begin
                    Frm_Main.Frm_JON020[Self.Tag].pGetLoadBuffer(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgDMMS.Hint, '140');
                    Frm_Main.Frm_JON020[Self.Tag].imgDMMS.Picture.LoadFromFile(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgDMMS.Hint);
                    Frm_Main.Frm_JON020[Self.Tag].cxRBDM.Checked := True;
                    Frm_Main.Frm_JON020[Self.Tag].LblDSMS.Caption := 'MMS';
                    Frm_Main.Frm_JON020[Self.Tag].btn11.Enabled := False;
                    Frm_Main.Frm_JON020[Self.Tag].cxRBDMClick(Frm_Main.Frm_JON020[Self.Tag].cxRBDM);
                  end else
                  begin
                    Frm_Main.Frm_JON020[Self.Tag].fGetMMSImage('140');
                    if FileExists(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgDMMS.Hint) then
                    begin
                      Frm_Main.Frm_JON020[Self.Tag].pGetLoadBuffer(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgDMMS.Hint, '140');
                      Frm_Main.Frm_JON020[Self.Tag].imgDMMS.Picture.LoadFromFile(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgDMMS.Hint);
                      Frm_Main.Frm_JON020[Self.Tag].cxRBDM.Checked := True;
                      Frm_Main.Frm_JON020[Self.Tag].LblDSMS.Caption := 'MMS';
                      Frm_Main.Frm_JON020[Self.Tag].btn11.Enabled := False;
                      Frm_Main.Frm_JON020[Self.Tag].cxRBDMClick(Frm_Main.Frm_JON020[Self.Tag].cxRBDM);
                    end
                  end;
                end;
              finally
                ls_Rcrd.Free;
              end;
            end else
            if nodeList_Result.Get(i).Attributes['SmsType'] = '141' then
            begin
              Frm_Main.Frm_JON020[Self.Tag].mmoSMS141.Text := nodeList_Result.Get(i).Text;
              Frm_Main.Frm_JON020[Self.Tag].lblSMS141.Caption := IntToStr(GetSmsMemoLength(AnsiString(Frm_Main.Frm_JON020[Self.Tag].mmoSMS141.Text))) + ' Byte';
              Frm_Main.Frm_JON020[Self.Tag].ImgText.Hint := nodeList_Result.Get(i).Attributes['FromNum'];
              ls_Rcrd := TStringList.Create;
              try
                GetTextSeperationEx('|', nodeList_Result.Get(i).Attributes['Filenames'], ls_Rcrd);
                Frm_Main.Frm_JON020[Self.Tag].ImgSMMS.Hint := ls_Rcrd[0];

                if Trim(Frm_Main.Frm_JON020[Self.Tag].ImgSMMS.Hint) <> '' then
                begin
                  if FileExists(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgSMMS.Hint) then
                  begin
                    Frm_Main.Frm_JON020[Self.Tag].pGetLoadBuffer(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgSMMS.Hint, '141');
                    Frm_Main.Frm_JON020[Self.Tag].imgSMMS.Picture.LoadFromFile(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgSMMS.Hint);
                    Frm_Main.Frm_JON020[Self.Tag].cxRBSM.Checked := True;
                    Frm_Main.Frm_JON020[Self.Tag].LblSSMS.Caption := 'MMS';
                    Frm_Main.Frm_JON020[Self.Tag].btn11.Enabled := False;
                    Frm_Main.Frm_JON020[Self.Tag].cxRBSMClick(Frm_Main.Frm_JON020[Self.Tag].cxRBSM);
                  end else
                  begin
                    Frm_Main.Frm_JON020[Self.Tag].fGetMMSImage('141');
                    if FileExists(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgSMMS.Hint) then
                    begin
                      Frm_Main.Frm_JON020[Self.Tag].pGetLoadBuffer(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgSMMS.Hint, '141');
                      Frm_Main.Frm_JON020[Self.Tag].imgSMMS.Picture.LoadFromFile(OSHOTDRIVE+Frm_Main.Frm_JON020[Self.Tag].imgSMMS.Hint);
                      Frm_Main.Frm_JON020[Self.Tag].cxRBSM.Checked := True;
                      Frm_Main.Frm_JON020[Self.Tag].LblSSMS.Caption := 'MMS';
                      Frm_Main.Frm_JON020[Self.Tag].btn11.Enabled := False;
                      Frm_Main.Frm_JON020[Self.Tag].cxRBSMClick(Frm_Main.Frm_JON020[Self.Tag].cxRBSM);
                    end
                  end;
                end;
              finally
                ls_Rcrd.Free;
              end;
            end;
          end;
        except on e: exception do
          begin
            sTemp := 'JON01[Proc_AutoCallInsert] Error :' + e.Message;
            Log(sTemp, LOGDATAPATHFILE);
            Assert(False, sTemp);
          end;
        end;
      end;

      nodeList_Result := GetXmlSelectNodeList(rxxml, '/cdms/Service/Data/HistoryInfo/History');
      if ( nodeList_Result = Nil ) then Exit;

      if nodeList_Result.Count > 0 then
      begin
        try
          Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.DataController.SetRecordCount(0);
          Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.BeginUpdate;
          for i := 0 to nodeList_Result.Count - 1  do
          begin
            Application.ProcessMessages;
            iRow := Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.DataController.AppendRecord;
            Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.DataController.Values[iRow, 0] := i+1;
            Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.DataController.Values[iRow, 1] := nodeList_Result.Get(i).Attributes['InDate'];

            if nodeList_Result.Get(i).Attributes['OutBound'] = '0' then
              Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.DataController.Values[iRow, 2] := '' else
            if nodeList_Result.Get(i).Attributes['OutBound'] = '1' then
              Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.DataController.Values[iRow, 2] := '동의' else
            if nodeList_Result.Get(i).Attributes['OutBound'] = '2' then
              Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.DataController.Values[iRow, 2] := '거부' else
            if nodeList_Result.Get(i).Attributes['OutBound'] = '3' then
              Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.DataController.Values[iRow, 2] := '문자';

            Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.DataController.Values[iRow, 3] := nodeList_Result.Get(i).Attributes['Msg'];
          end;
          Frm_Main.Frm_JON020[Self.Tag].cxViewAutoCall.EndUpdate;
        except on e: exception do
          begin
            sTemp := 'JON01[Proc_AutoCallInsert] Error :' + e.Message;
            Log(sTemp, LOGDATAPATHFILE);
            Assert(False, sTemp);
          end;
        end;
      end;

      try
        Frm_Main.Frm_JON020[Self.Tag].cxGrpOShot.Visible := False;
        if Trim(gOShotUserID) <> '' then
        begin
          gOShotStat := fn_Re_Login;
          Frm_Main.Frm_JON020[Self.Tag].Cash_ReFlash;
        end;
      Except
        On E : Exception Do
          Log('DebugLog : ' + E.Message, LOGDATAPATHFILE);
      End;
    end else
    begin
      // 메시지 내용 : 등록되지 않은 대표번호 입니다.
      GMessagebox(MSG421, CDMSI);
      end;
  except
    on e: exception do
    begin
      ShowMessage('[오토콜 고객번호로 조회] 예외 처리:' + e.Message);
    end;
  end;
end;

// 고객전화번호 조회 후 결과 처리를 한다.
procedure TFrm_JON01.Proc_KeyNumberInsert(rxxml: String); //콜링전문
var
  nodeList_Result : IXMLNodeList;
  lst_Result: IXMLNode;
	wk_br_Name, wk_Name, ls_Msg_Err, o_status, o_keyNumber, sCharge, o_InDate, ls_msg, sBr_Name, sStatus, sTemp, ls_TxLoad: string;
	iBarIndex, iRCnt, i, j, jj, iBidx, iFIdx, jCnt, jjCnt, iCarType : Integer;
	itotal, iEnd, iCancel: Integer;
  iGrade1, iGrade2, ACount: Integer;
  fcancelRate: double;
	sCustTel, sBrNo, sAccCenter, sSel_KeyNumber, sSel_BrNo : string;
  sBGroup : string;
	ls_Rcrd, lsTmp : TStringList;
	ia, UserMile : integer;
	// 전화번호2유무
	sTelse, sContent, sCurMileage, sMileage: string;

  sDate, sTodayDate, sInDate : string;
	iCnt : Integer;
  DataValue: String;
	sWkFAge, sWkTAge : string;
	sTmp, sHdNo, sTaSaHdno : string;
	sTime, dTime: TDateTime;

	sStaTmp1, sStaTmp2, sStaTmp3, sStaTmp4, sStaTmp5, sStaX, sStaY : string; // 타업체 등록 출발지 정보
	sEndTmp1, sEndTmp2, sEndTmp3, sEndTmp4, sEndTmp5, sEndX, sEndY : string; // 타업체 등록 도착지 정보

	sKDInsCor, sKDInsNum, sKDInsShareYn, sKDName, sKDWkHp, sAIOB : string;
begin
	SetDebugeWrite('JON01.Proc_KeyNumberInsert');
	if (lcsActiveEdit = 'meoStartAreaCUT') or (lcsActiveEdit = 'meoEndAreaCUT') then
	begin
		lcsActiveEdit := 'meoStartArea';
		sActieEdit := 'meoStartArea';
	end;
	FHasTodayData := False;
  iFidx := Self.Tag; // 폼의 index를 읽는다.

	sHdNo := Proc_HdNOSearch;

  if not isLoadFromXML(rxxml) then
  begin
    GMessagebox('[고객전화번호조회결과]XML전문 형식이 맞지 않습니다.' + #13#10
      + '다시한번 조회 하세요', CDMSI);
    Exit;
  end;

  ls_Msg_Err := GetXmlErrorCode(rxxml);

  FWk_sabun := '';
  bOther := False; //타업체 접수건 여부 f:없음. T:있음
  sStaTmp1 := ''; sStaTmp2 := ''; sStaTmp3 := ''; sStaTmp4 := ''; sStaTmp5 := ''; sStaX := ''; sStaY := ''; // 타업체 등록 출발지 정보
  sEndTmp1 := ''; sEndTmp2 := ''; sEndTmp3 := ''; sEndTmp4 := ''; sEndTmp5 := ''; sEndX := ''; sEndY := ''; // 타업체 등록 도착지 정보

  Try
    if ('0000' = ls_Msg_Err) then
    begin
      try
        ls_msg := '';
        if (Pos('수정', Self.Caption) = 0 ) then
        begin
          nodeList_Result := GetXmlSelectNodeList(rxxml, '/cdms/Service/Data/OtherInfo');
          if ( nodeList_Result = Nil )  then Exit;

          if nodeList_Result.Count > 0 then
          begin
            if (GS_PRJ_AREA = 'O') and (GT_USERIF.ShareNo = 'G41') then //지방권 G41연합은 팝업제외   정회귀팀장 요청 20190719 KHS
            else
            begin
              for i := 0 to nodeList_Result.Count - 1 do
              begin
                if nodeList_Result.Get(i).NodeName <> 'OtherInfo' then Continue;
                o_status := nodeList_Result.Get(i).Attributes['Status'];
                if Trim(o_status) = '' then
                begin
                  ls_msg := '';
                  Continue;
                end;
                bOther := True;
                o_keyNumber := nodeList_Result.Get(i).Attributes['KeyNumber'];
                o_InDate    := nodeList_Result.Get(i).Attributes['InDate'];
                sBr_Name    := nodeList_Result.Get(i).Attributes['BrName'];
                sCharge     := nodeList_Result.Get(i).Attributes['Charge'];
                sCustTel    := StrToCall(cxtCuTel.Text);
                if i = 0 then
                begin
                  sStaTmp1 := nodeList_Result.Get(i).Attributes['Area'];
                  sStaTmp2 := nodeList_Result.Get(i).Attributes['Area2'];
                  sStaTmp3 := nodeList_Result.Get(i).Attributes['Area3'];
                  sStaTmp4 := nodeList_Result.Get(i).Attributes['Area4'];
                  sStaTmp5 := nodeList_Result.Get(i).Attributes['Area5'];
                  sStaX    := nodeList_Result.Get(i).Attributes['MapX'];
                  sStaY    := nodeList_Result.Get(i).Attributes['MapY'];

                  sEndTmp1 := nodeList_Result.Get(i).Attributes['EdArea'];
                  sEndTmp2 := nodeList_Result.Get(i).Attributes['EdArea2'];
                  sEndTmp3 := nodeList_Result.Get(i).Attributes['EdArea3'];
                  sEndTmp4 := nodeList_Result.Get(i).Attributes['EdArea4'];
                  sEndTmp5 := nodeList_Result.Get(i).Attributes['EdArea5'];
                  sEndX    := nodeList_Result.Get(i).Attributes['DestX'];
                  sEndY    := nodeList_Result.Get(i).Attributes['DestY'];
                end;
                if not IsUseKeyNumber(o_keyNumber) then
                  sCharge := '****';

                sDate := GetStrToLongDateTimeStr(Frm_Main.func_sysdate);        //'2016-07-04 18:01:59'
                sTime := StrToDateTime(sDate);

                dTime := 0;
                if o_InDate <> '' then
                begin
                  sTmp := copy(o_InDate,1,4) + '-' + copy(o_InDate,5,2) + '-' + copy(o_InDate,7,2) + ' '
                        + copy(o_InDate, 9, 2) + ':' + copy(o_InDate, 11, 2) + ':' + copy(o_InDate, 13, 2);
                  dTime := StrToDateTime(sTmp);

                  o_InDate := copy(o_InDate, 9, 2) + ':' + copy(o_InDate, 11, 2) + ':' + copy(o_InDate, 13, 2);
                end;

                sTmp := FormatDateTime('hhmmss', sTime - dTime);
                if (StrToIntDef(copy(sTmp, 1, 2), 0) = 0) then
                  sTmp := IntToStr(StrToIntDef(copy(sTmp, 3, 2), 0)) + '분'
                else
                  sTmp := IntToStr(StrToIntDef(copy(sTmp, 1, 2), 0)) + '시간' +
                           IntToStr(StrToIntDef(copy(sTmp, 3, 2), 0)) + '분';

                if o_status = 'B' then
                  o_status := '1';
                case StrToIntDef(o_status, 99) of
                  0: sStatus := '접수';
                  1: sStatus := '배차';
                  2: sStatus := '완료';
                  3: sStatus := '강제';
                  4: sStatus := '문의';
                  5: sStatus := '대기';
                  8: sStatus := '취소';
                end;
                sTemp := '요금:[' + sCharge + ']';
//	  		   			ls_msg := ls_msg + #13#10 + '[' + sBr_Name + '(' + o_keyNumber + ')] ' + o_InDate + '초 [' + sStatus + '] ' + sTemp;
                ls_msg := ls_msg + #13#10 + '전화하신 고객님은 ' + sTmp + ' 전에 다른회원사에 콜접수함-현재상태[' + sStatus + ']';
//				   			ls_msg := ls_msg + #13#10 + '[' + StrToCall(sCustTel) + ']고객은 ' + sTmp + ' 전 다른회원사에 콜접수함-현재상태[' + sStatus + ']';
              end;
            end;

            if Trim(ls_msg) <> '' then
            begin
//							ls_msg := '아래와 같이 이미 등록된 오더가 있습니다.' + #13#10 + ls_msg;
              ls_msg := '**** 타 업체 중복 콜 등록 정보 표기 건 *****' + #13#10 + ls_msg;
              Application.MessageBox(PChar(ls_msg), '콜마너 XE 3', MB_OK);
            end;
          end;
        end;
//					end;

        // 100510 - CID로그(메인/부 업체구분) 위해 LogSeq 저장 후 접수시 전달
        lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/CidInfo');
        if lst_Result = Nil then Exit;
        if lst_Result.HasAttribute('LogSeq') then
          locLogSeq := lst_Result.Attributes['LogSeq'];

        lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Branch');
        if lst_Result = Nil then Exit;
        locHDNO   := lst_Result.Attributes['HdNo'];
        locBRNO   := lst_Result.Attributes['BrNo'];
        sBr_Name  := lst_Result.Attributes['BrName'];
        // 2011.05.11 추가. CDS. 서버에서 받음.
        lsBr_KeyNumber := lst_Result.Attributes['KeyNumber'];

        // [hjf-하드코딩] 2009.03.06 코리아(카드고객) 색상구분
        if (GS_PRJ_AREA = 'S') and (locBRNO = 'H849') then
        begin
          LblTop   .Color := clRed;       // 붉은색
          LblLeft  .Color := LblTop.Color;
          LblRigth .Color := LblTop.Color;
          LblBottom.Color := LblTop.Color;
          PnlTitle .Color := LblTop.Color;
//            PnlWorkMemo.Color := LblTop.Color;
          PnlBtm.Color := LblTop.Color;
//            PnlBox4.Color := LblTop.Color;
          Pnl_BubinV.Color := LblTop.Color;
        end else
        // [cds-하드코딩] 2011.10.11 코리아(카드고객) 색상구분 추가. 1577-5000.  신용카드 (1577-9482)
        if (GS_PRJ_AREA = 'S') and ( (locBRNO = 'G908') Or (locBRNO = 'G902') )  then
        begin
          LblTop   .Color := $00FE8769;   // 파란색
          LblLeft  .Color := LblTop.Color;
          LblRigth .Color := LblTop.Color;
          LblBottom.Color := LblTop.Color;
          PnlTitle .Color := LblTop.Color;
//            PnlWorkMemo.Color := LblTop.Color;
          PnlBtm.Color := LblTop.Color;
//            PnlBox4.Color := LblTop.Color;
          Pnl_BubinV.Color := LblTop.Color;
        end else
        // [cds-하드코딩] 2012.10.09 코리아(02-2000-0000) 색상구분 추가. KHS
        if (GS_PRJ_AREA = 'S') and (locBRNO = 'Q908') then
        begin
          LblTop   .Color := clGreen;   // 녹색
          LblLeft  .Color := LblTop.Color;
          LblRigth .Color := LblTop.Color;
          LblBottom.Color := LblTop.Color;
          PnlTitle .Color := LblTop.Color;
//            PnlWorkMemo.Color := LblTop.Color;
          PnlBtm.Color := LblTop.Color;
//            PnlBox4.Color := LblTop.Color;
          Pnl_BubinV.Color := LblTop.Color;
        end else
        // [cds-하드코딩] 2012.10.09 법인콜 색상구분 추가.
        if (GS_PRJ_AREA = 'S') and (locBRNO = 'G898') then
        begin
          LblTop   .Color := $0014AACF;   // 골드
          LblLeft  .Color := LblTop.Color;
          LblRigth .Color := LblTop.Color;
          LblBottom.Color := LblTop.Color;
          PnlTitle .Color := LblTop.Color;
//            PnlWorkMemo.Color := LblTop.Color;
          PnlBtm.Color := LblTop.Color;
//            PnlBox4.Color := LblTop.Color;
          Pnl_BubinV.Color := LblTop.Color;
        end else
        begin
          LblTop   .Color := $00E0EDEA;   // 기본색
          LblLeft  .Color := LblTop.Color;
          LblRigth .Color := LblTop.Color;
          LblBottom.Color := LblTop.Color;
          PnlTitle .Color := LblTop.Color;
//            PnlWorkMemo.Color := LblTop.Color;
          PnlBtm.Color := LblTop.Color;
//            PnlBox4.Color := LblTop.Color;
          Pnl_BubinV.Color := LblTop.Color;
        end;

        if (locCustHP_MainNum_Search = '') and (cxLblCIDUseFlg.Hint <> 'CID') then
        begin // CID 조회인지 설정을 한다.
          if Proc_BrNoListIdxFind(locBRNO, lsBr_KeyNumber) = False then
          begin
            ShowMessage('조회 한 지사코드가 콜센터에 이관되지 않았거나 없는지사 또는 대표번호 입니다.' + #13#10 +
                        '[ 지사코드:' + locBRNO + ', 대표번호:' + lsBr_KeyNumber + ' ] 확인 하세요!' );
            Exit;
          end;
        end else
        begin
          // CID 조회 임.
          // 지사리스트에서 대표번호, 지사코드 index 찾기 및 설정.
          if Proc_BrNoListIdxFind(locBRNO, lsBr_KeyNumber) = False then
          begin
            cboBranch.Tag := 10;
            // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
            cboBranch.Properties.Items.Clear; // 지사리스트 초기화.
            cboBranch.Properties.Items.Add(sBr_Name + '[' + lsBr_KeyNumber + '] ' + Copy(locHDNO + '     ', 1, 5) + '.' + Copy(locBRNO + '     ', 1, 5));
                // 본사코드   // 지사코드   // 지사명   // 대표번호
            cboBranch.ItemIndex := 0;
            cboBranch.Tag := 0;
            // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
          end;
        end;
        // 대표번호 별 기본 설정요금을 적용 한다.
        if Not pbISStartEndXY then
        begin
          if BtnRaLock.Hint <> 'F4)잠금' then
          begin
            sNowRate := lst_Result.Attributes['BaseCharge'];
            curRate.Value := StrToIntDef(sNowRate, 0);
            OrgRate := curRate.Value;
            Lbl_Charge.Caption := Format('대표번호 기본요금(%s) 강제 적용', [StrToMoney(sNowRate)]);
          end;
        end;

        Try
          // 고객 조회 전화번호 저장.
          // DNIS 또는 고객으로만 조회 일때,,  전화번호만 남도록 수정함. 2011.05.13 CDS. 추가.
          if Pos('*',cxtCuTel.Text) > 0 then
          begin
            sCustTel := Copy(cxtCuTel.Text, Pos('*',cxtCuTel.Text) +1 , length(cxtCuTel.Text));
            sCustTel := StringReplace(sCustTel, '+', '', [rfReplaceAll]);
            gsCuTelHint   := Copy(cxtCuTel.Text, 1, Pos('*',cxtCuTel.Text) -1);
            cxtCuTel.Text := gsCuTelHint;
            if Pos('+',cxtCuTel.Text) > 0 then
            begin
              gsCuTelHint   := StringReplace(cxtCuTel.Text, '+', '', [rfReplaceAll]);
              cxtCuTel.Text := gsCuTelHint;
            end;
            // DNIS 대표번호 찾기 정보창.
            shrDNIS_DSP.Visible := True;
            lblDNISInfo.Caption := '***** DNIS 대표번호 / 지사 찾기 *****' + #13#10 +
                                   'DNIS      : ' + sCustTel + #13#10 +
                                   '대표번호 : ' + lsBr_KeyNumber + ' (' + locBRNO + '.' + sBr_Name + ')' + #13#10 +
                                   '고객전화 : ' + gsCuTelHint;
          end else
          if Pos('+',cxtCuTel.Text) > 0 then
          begin
            gsCuTelHint   := StringReplace(cxtCuTel.Text, '+', '', [rfReplaceAll]);
            cxtCuTel.Text := gsCuTelHint;
            if Pos('*',cxtCuTel.Text) > 0 then
            begin
              gsCuTelHint   := Copy(cxtCuTel.Text, 1, Pos('*',cxtCuTel.Text) -1);
              cxtCuTel.Text := gsCuTelHint;
              // DNIS 대표번호 찾기 정보창.
              shrDNIS_DSP.Visible := True;
              lblDNISInfo.Caption := '***** DNIS 대표번호 / 지사 찾기 *****' + #13#10 +
                                     'DNIS      : ' + sCustTel + #13#10 +
                                     '대표번호 : ' + lsBr_KeyNumber + ' (' + locBRNO + '.' + sBr_Name + ')' + #13#10 +
                                     '고객전화 : ' + gsCuTelHint;
            end;
          end else
          begin
            gsCuTelHint := cxtCuTel.Text;
          end;
        except
          on e: exception do
          begin
            ls_TxLoad := 'Jon01[고객 조회 전화번호 저장오류]:' + e.Message;
            Assert(False, E.Message);
            GMessagebox(PChar(ls_TxLoad), CDMSE);
            Screen.Cursor := crDefault;
          end;
        end;

        sSel_KeyNumber := Proc_MainKeyNumberSearch;
        if ( sSel_KeyNumber <> lsBr_KeyNumber ) And ( GT_USERIF.HD = 'A1531' ) then
        begin
          ls_msg := '접수창 대표번호[' + sSel_KeyNumber + ']와 조회 대표번호['+ lsBr_KeyNumber +']가 다릅니다' + #13#10 +
                    '고객번호에서 다시 엔터를 치세요';
          Application.MessageBox(PChar(ls_msg), '콜마너 XE 3', MB_OK);
          Assert(False, 'Frm_JON01.Proc_KeyNumberInsert - 대표번호상이.' + cxtCuTel.Text + ' : ' + ls_msg);
          Exit;
        end;

        // 지사별 멘트 구하기..
        if cxLblCIDUseFlg.Hint = 'CID' then
        begin // CID 조회인지 설정을 한다.
          lblBrNoMent.Caption := Func_brtel_memo(locBRNO, lsBr_KeyNumber);
          if lblBrNoMent.Caption <> '' then
          begin
            pnlBrNoMent.Visible := True;
            tmMent.Interval := 5000;
            tmMent.Enabled := True;
          end	else
          begin
            tmMent.Enabled := False;
            pnlBrNoMent.Visible := False;
          end;
        end;

        //-------------------------------------------------------------------------------------------
        //      KD Drive 기사정보   20181016 KHS
        //      <KdDriver InsCor="DB" InsNum="123324235434" InsShareYn="n" Name="정경석" WkHp="01089701784"
        //-------------------------------------------------------------------------------------------
        gsKDWkHp := '';
        sKDInsCor := ''; sKDInsNum := ''; sKDInsShareYn := ''; sKDName := ''; sKDWkHp := '';

        if (GS_PRJ_AREA = 'S') or (GT_KAKAOUse) then //수도권만 사용 또는 GT_KAKAOUse True 20190328KHS
        begin
          lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/KdDriver');
          if lst_Result <> Nil then
          begin
            sKDWkHp := Trim(lst_Result.Attributes['WkHp']);
            if sKDWkHp <> '' then  //전화번호가 빈값이면 KD기사아님
            begin
              frm_Main.Proc_CidLog(98, 'KDdrive'); // 로그 기록.
              Frm_Main.Frm_JON03[Jon03Tag].pnlBubin.Visible := False;

              sKDInsCor := Trim(lst_Result.Attributes['InsCor']);
              sKDInsNum := Trim(lst_Result.Attributes['InsNum']);
              sKDInsShareYn := Trim(lst_Result.Attributes['InsShareYn']);
              sKDName := Trim(lst_Result.Attributes['Name']);
              gsKDWkHp := sKDInsShareYn + '|' + sKDName + '|' + sKDWkHp + '|' + sKDInsCor + '|' + sKDInsNum
            end;
          end;
        end;

        //-------------------------------------------------------------------------------------------
        //      전화번호로 고객, 기사 체크( 1 : 기사, 2 : 고객 )
        //-------------------------------------------------------------------------------------------
        lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Branch');
        if lst_Result = Nil then Exit;
        sCust_Gubun := inttostr(StrToIntDef(lst_Result.Attributes['Gubun'], 2));
        if StrToIntDef(lst_Result.Attributes['Gubun'], 2) = 2 then
        begin
          Try
            frm_Main.Proc_CidLog(98, '고객'); // 로그 기록.
            Frm_Main.Frm_JON03[Jon03Tag].pnlBubin.Visible := False;

            lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Customer');
            if lst_Result = Nil then Exit;

            //AI 아웃바운드 옵션 배차지연콜 사용여부 20190716 KHS
            sAIOB := lst_Result.Attributes['AiOutOption'];

            if (sAIOB = 'y') or (sAIOB = '') then
            begin

              sTmp := Proc_MainKeyNumberSearch;
              if not GetAIOBKeyNumberYN(sTmp) then   //고객이 선택되어 있어도 지사의 대표번호에서 사용안하면 체크해제
              begin
                chk_AIReCall.Properties.ReadOnly := True;
                chk_AIReCall.checked := False;
              end else chk_AIReCall.checked := True;
            end else chk_AIReCall.checked := False;
            //AI 아웃바운드 옵션 배차지연콜 사용여부 20190716 KHS

            iCarType := StrtoIntDef(lst_Result.Attributes['CarType'], 2);
            if iCarType = 1 then cb_CarType.ItemIndex := 0 else cb_CarType.ItemIndex := 1;

            iBarIndex := StrtoIntDef(lst_Result.Attributes['CuType'], 0);
            /////////////////콜벨 20161231 KHS////////////////////////////////
            if lst_Result.Attributes['CallBellStatus'] = '1' then  //콜벨상태(1:정상, 2:해지, null: 콜벨 업소 설정 없음)
            begin
              pnlCallBell.visible := True;
              pnlCallBell.Top  := CbCuGb.Top -8;
              pnlCallBell.Left := cxtCuBubin.Left;
              pnlCallBell.Color := $00804000;

              pnlCallBellAll.Color := pnlCallBell.Color;
              pnlCallBellAll.Top := 0;
              pnlCallBellAll.Left := 0;
              pnlCallBellAll.Width := 308;
              pnlCallBellAll.Height := 143;
              pnlCallBellAll.visible := True;
              if cxLblCIDUseFlg.Hint = 'CID' then
              begin
                lbUpsoPee.Caption := '콜벨 업소 - 콜링';
                pnlCallBell.Caption := '+++++콜벨 업소 - 콜링+++++';
              end else
              begin
                lbUpsoPee.Caption := '콜벨 업소';
                pnlCallBell.Caption := '+++++++콜벨 업소+++++++';
              end;
              tmUpsoPnl.Interval := 3000;
              tmUpsoPnl.Enabled := True;

              lbUpsoName.Caption := lst_Result.Attributes['Name'];
            end	else
            begin
              if (iBarIndex = 1) and (lst_Result.Attributes['CuMileValue'] <> '0')  and (lst_Result.Attributes['CuMileValue'] <> '') then  //업소일경우
              begin
                pnlCallBell.visible := True;
                pnlCallBell.Top  := CbCuGb.Top -8;
                pnlCallBell.Left := cxtCuBubin.Left;
                pnlCallBell.Color := $000B5AFF;

                pnlCallBellAll.Color := pnlCallBell.Color;
                pnlCallBellAll.Top := 0;
                pnlCallBellAll.Left := 0;
                pnlCallBellAll.Width := 308;
                pnlCallBellAll.Height := 143;
                pnlCallBellAll.visible := True;

                tmUpsoPnl.Interval := 3000;
                tmUpsoPnl.Enabled := True;

                lbUpsoName.Caption := lst_Result.Attributes['Name'];

                if lst_Result.Attributes['CuMileType'] = '1' then
                  lbUpsoPee.Caption := '+++일정금액 / ' + StrToMoney(lst_Result.Attributes['CuMileValue']) + '원+++'
                else if lst_Result.Attributes['CuMileType'] = '2' then
                  lbUpsoPee.Caption := '+++매출비율 / ' + lst_Result.Attributes['CuMileValue'] + '%+++'
                else
                  lbUpsoPee.Caption := '';
                pnlCallBell.Caption := lbUpsoPee.Caption;
              end	else
              begin
                pnlCallBell.visible := False;
                pnlCallBellAll.visible := False;
                tmUpsoPnl.Enabled := False;
              end;
            end;
            lbUpsoName.Caption := lst_Result.Attributes['Name'];
            pnlCallBell.Hint := lst_Result.Attributes['CallBellStatus'];
            /////////////////콜벨 20161231 KHS////////////////////////////////

            if GB_JON_VIEWWKIFNO then
            begin
              chkViewLevel.Checked := False;
            end else
            begin
              if lst_Result.Attributes['ViewLevel'] = '1' then chkViewLevel.Checked := True
                                                          else chkViewLevel.Checked := False;
            end;

            if lst_Result.Attributes['CuOrderOption'] = 'y' then
            begin
              lcsActiveEdit := 'meoStartArea';
              sActieEdit := 'meoStartArea';
              cb_04.Down := True;
              cb_04.Click;
            end;

            sWkFAge := lst_Result.Attributes['WkFromAge'];
            sWkTAge := lst_Result.Attributes['WkToAge'];
            if StrToIntDef(sWkFAge,0) > 0 then
            begin
              BtnWkAge.Down := True;
              edtWkFAge.Text := sWkFAge;
              if StrToIntDef(sWkTAge,0) > 0 then
                edtWkTAge.Text := sWkTAge
              else
                edtWkTAge.Text := '99';
            end else
            if StrToIntDef(sWkTAge,0) > 0 then
            begin
              BtnWkAge.Down := True;
              edtWkFAge.Text := '19';
              edtWkTAge.Text := sWkTAge;
            end
            else BtnWkAge.Down := False;

            if BtnWkAge.Down then BtnWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하'
                             else BtnWkAge.Hint := '';

            edtCuName.Text := lst_Result.Attributes['Name'];
            sContent := StringReplace(lst_Result.Attributes['Info'], '|', '¶',  [rfReplaceAll]);
            if Trim(sContent) <> '' then
            begin
              ls_Rcrd := TStringList.Create;
              try
                GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                for ia := 0 to ls_Rcrd.Count - 1 do
                begin
                  if ia = 0 then
                    meoCuCCMemo.Text := ls_Rcrd[ia]
                  else
                    meoCuCCMemo.Text := meoCuCCMemo.Text + #13#10 + ls_Rcrd[ia];
                end;
              finally
                FreeAndNil(ls_Rcrd);
              end;
            end;

            sTemp := lst_Result.Attributes['CbCuMemo'];
            if sTemp <> '' then
            begin
              if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
              begin
                meoCuCCMemo.Width := 38;
              end else
              begin
                meoCuCCMemo.Width := 142;
              end;
              BtnViewMemo.Left := meoCuCCMemo.Left + meoCuCCMemo.Width - BtnViewMemo.Width -2;
              mmoCbMemo.Visible := True;
              mmoCbMemo.Text := sTemp;
            end;

            sContent := StringReplace(lst_Result.Attributes['PdaInfo'], '|', '¶',  [rfReplaceAll]);
            if Trim(sContent) <> '' then
            begin
              ls_Rcrd := TStringList.Create;
              try
                GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                for ia := 0 to ls_Rcrd.Count - 1 do
                begin
                  if ia = 0 then
                    meoCuWorMemo.Text := ls_Rcrd[ia]
                  else
                    meoCuWorMemo.Text := meoCuWorMemo.Text + #13#10 + ls_Rcrd[ia];
                end;
              finally
                FreeAndNil(ls_Rcrd);
              end;
            end;

            sContent := StringReplace(lst_Result.Attributes['Memo'], '|', '¶',  [rfReplaceAll]);
            if Trim(sContent) <> '' then
            begin
              ls_Rcrd := TStringList.Create;
              try
                GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                for ia := 0 to ls_Rcrd.Count - 1 do
                begin
                  if ia = 0 then
                    edt_CardMemo.Text := ls_Rcrd[ia]
                  else
                    edt_CardMemo.Text := edt_CardMemo.Text + #13#10 + ls_Rcrd[ia];
                end;
              finally
                FreeAndNil(ls_Rcrd);
              end;
            end;
            edt_CardMemo.Top := meoCuWorMemo.Top + meoCuWorMemo.Height + 2;
            edt_CardMemo.Height := 29;
            if ( TCK_USER_PER.JON_CUSTMEMO2 <> '1') then
            begin
              if edt_CardMemo.Lines.Count = 1 then BtnSimMemo.Enabled := False
                                              else BtnSimMemo.Enabled := True;
            end;

            iBarIndex := StrtoIntDef(lst_Result.Attributes['CuType'], 0);

            ChkCuSmsNo.Tag := 1;
            if lst_Result.Attributes['SMS'] = 'n' then ChkCuSmsNo.Checked := True else
            if lst_Result.Attributes['SMS'] = 'y' then ChkCuSmsNo.Checked := False;
            ChkCuSmsNo.Tag := 0;

            lblCuMile.Caption := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['CurMlg'], 0));
            lblCuMileUnit.Caption := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['PrizeMlg'], 0));
            //지사설정 지금 단위
            lblCuMileCnt.Caption   := lst_Result.Attributes['PrizeCnt'];
            lblCuMileLost.Caption := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['CuExpireMileage'], 0));

            sProdName := lst_Result.Attributes['Prize'];
            SetMileColorChange;

            // hjf-고객상황실설정(접수정보 조회)
            if lst_Result.HasAttribute('BrTelYN') then
              CustBrTelYN := lst_Result.Attributes['BrTelYN'];

            if (CustBrTelYN = 'y') then	BtnCenterMng.Down := True else
            if (CustBrTelYN = '') and (iBarIndex = 1) and (GB_SHOPTYPE_CALLCENTER = 1) then	BtnCenterMng.Down := True else
            if (CustBrTelYN = 'n') then	BtnCenterMng.Down := False;

            SetPayMethod(PAY_METHOD_MONEY); // 현금

            // 법인코드
            cxtCuBubin.Hint := TRim(lst_Result.Attributes['BGroup']);
            sBGroup := TRim(lst_Result.Attributes['BGroup']);
            if (GS_PRJ_AREA = 'S') and (sBGroup <> '') and (locBRNO <> 'G898') and (locBRNO <> 'Q908') and (locBRNO <> 'H849') then
            begin
              LblTop   .Color := $00FE8769;   // 파란색
              LblLeft  .Color := LblTop.Color;
              LblRigth .Color := LblTop.Color;
              LblBottom.Color := LblTop.Color;
              PnlTitle .Color := LblTop.Color;
//									PnlWorkMemo.Color := LblTop.Color;
              PnlBtm.Color := LblTop.Color;
//                  PnlBox4.Color := LblTop.Color;
              Pnl_BubinV.Color := LblTop.Color;
            end;

            // + ',' + ed_MaddBrch.Text;
            if cxtCuBubin.Hint <> '' then
            begin
              sSel_BrNo := Proc_BRNOSearch;
              if ( sSel_BrNo <> locBRNO ) And ( GT_USERIF.HD = 'A1531' ) then
              begin
                ls_msg := '접수창 지사[' + sSel_BrNo + ']와 조회 지사['+ locBRNO +']가 다릅니다' + #13#10 +
                          '고객번호에서 다시 엔터를 치세요';
//                    Application.MessageBox(PChar(ls_msg), '콜마너 XE 3', MB_OK);
                Assert(False, 'Frm_JON01.Proc_KeyNumberInsert - 법인명상이.' + cxtCuTel.Text + ' : '  + ls_msg);
//                    Exit;
              end;

              iBidx := GT_BUBIN_INFO.cbcode.IndexOf(Trim(cxtCuBubin.Hint) + ',' + locBRNO);
              if iBidx > -1 then
              begin
                // 법인정보[법인명 + 부서명]
                cxtCuBubin.Text := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc[iBidx]), 1, 60)) + ' | ' + Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc[iBidx]), 61, 60));
                lblCuBubinName.Caption := '법인고객 [ ' + Trim(cxtCuBubin.Text) + ' ]';
                sTemp := Copy(AnsiString(GT_BUBIN_INFO.cbEtc[iBidx]), 153, 1);
                iend := StrToIntDef(sTemp, 1);

                if (GT_SEL_BRNO.HDNO = 'A1531') then
                begin
                  //코리아드라이브 외상, 카드 결제수단 제외 2015.07.27 KHS(김계명과장 요청)
                end else
                begin
                  if (iend = 0) and (gsJON01CreditMoneyYN <> 'FALSE') then
                    SetPayMethod(PAY_METHOD_TRUST)  // 외상
                  else if (iend = 2) and (gsJON01CreditMoneyYN <> 'FALSE') then
                    SetPayMethod(PAY_METHOD_POST_NML)  // 후불
                  else
                    SetPayMethod(PAY_METHOD_MONEY); // 현금
                end;
              end else
              begin
                if Length(Trim(cxtCuTel.Text)) < 3 then
                begin
                  cxtCallTelNum.Text := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
                  cxtCuTel.Text      := cxtCallTelNum.Text;
                end;
                if tmHoTranRlt.Tag = 0 then
                begin
                  ShowMessage('조회된 고객의 법인정보[' + cxtCuBubin.Hint + ']가 없습니다.#13#10(법인정보를 다시 조회합니다.)');
                  tmHoTranRlt.Tag := 1;

                  tmHoTranRlt.Interval := 100;
                  tmHoTranRlt.Enabled := True; // 자동조회 호출.
                  Exit;
                end	else
                begin
                  ShowMessage('법인정보[' + cxtCuBubin.Hint + ']를 찾을 수 없습니다.'#13#10 +
                    '(대표번호와 법인정보를 확인 바랍니다.'#13#10 +
                    '법인정보 없이 오더를 등록합니다.');
                end;
              end;
              tmHoTranRlt.Tag := 0;
            end;

            if AUseMileage then
            begin
              SetPayMethod(PAY_METHOD_POST_MILE); // 부산5천콜 후불마일 강제셋팅
              if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
              begin
                UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0)
                          + StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);
                edtPostPay.Value := IfThen(UserMile >= curRate.Value, curRate.Value, 10000);
              end	else
              begin
                if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

                if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
                begin
                  edtPostPay.Value := 0;
                  cxLblWkJAmt.Caption := '1,000';
                  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
                end else
                if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
                begin
                  edtPostPay.Value := 0;
                  cxLblWkJAmt.Caption := '2,000';
                  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
                end else
                if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
                begin
                  edtPostPay.Value := 0;
                  cxLblWkJAmt.Caption := '3,000';
                  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
                end	else
                  edtPostPay.Value := curRate.Value;
              end;

              cbbPostTime.ItemIndex := 1;
              AppendPostDesc;
            end;

            CBCuGB.Hint := 'Clear';
            if (iBarIndex = 0) or (iBarIndex = 4) then
            begin
              CbCuGb.ItemIndex := 0;
              CbCuGb.Hint := '1';
              // 0:개인, 4:불량 둘다 일반으로 처리(불량코드는 사용안함)
            end	else
            if iBarIndex = 1 then
            begin
              CbCuGb.ItemIndex := 1;
              CbCuGb.Hint := '2';
            end else
            if iBarIndex = 3 then
            begin
              CbCuGb.ItemIndex := 2;
              CbCuGb.Hint := '3';
            end	else
            begin
              CbCuGb.ItemIndex := 0;
              CbCuGb.Hint := '1';
            end;
            CBCuGB.Hint := '';

            // 고객수정 버튼 활성화.
            lcsCu_seq := lst_Result.Attributes['CuSeq'];
            if lcsCu_seq <> '' then
            begin
              cxBtnCuUpdate.Enabled := True;
              cxBtnCuDel.Enabled := True;
            end else
            begin
              cxBtnCuUpdate.Enabled := False;
              cxBtnCuDel.Enabled := False;

              edtCuName.Text 			 := FCustChangeInfo.name;
              CbCuGb.ItemIndex     := 0;
              CbCuGb.Hint          := '';
              meoCuCCMemo.Text 		 := FCustChangeInfo.meoCuCCMemo;
              meoCuWorMemo.Text    := FCustChangeInfo.meoCuWorMemo;
              edt_CardMemo.Text    := FCustChangeInfo.edt_CardMemo;
            end;
            sRet := 0; //고객정보에 출발지 내용이 있는지에대한 구분값
            eRet := 0; //고객정보에 도착지 내용이 있는지에대한 구분값

            if ( Not pbISStartEndXY ) And ( locAutoCallYn <> 'Y') then
            begin
              Try
                if bOther then    //타업체에 등록된 오더가 있을경우
                begin
                  if (sStaTmp1 <> '') and (sStaTmp2 <> '') and (sStaTmp3 <> '') and (sStaTmp4 <> '') and (sStaTmp5 <> '') and
                     (sStaX <> '') and (sStaY <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
                  begin
                    // 출발지 정보
                    lcsSta1 := sStaTmp1;
                    lcsSta2 := sStaTmp2;
                    lcsSta3 := sStaTmp3;
                    if sStaTmp4 <> '☆' then
                      cxtStartAreaDetail.Text := sStaTmp4
                    else
                      cxtStartAreaDetail.Text := '';

                    lcsConfAREA4 := sStaTmp4;

                    ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                    ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                    sTmp := func_StartAreaFunc(sStaTmp5);
                    cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
//										cxtStartAreaDetail.Hint := sStaTmp5;

                    gJONStaChkXY.X := sStaX;
                    gJONStaChkXY.Y := sStaY;

                    gJONStaChkXY.GUIDE_X := sStaX;
                    gJONStaChkXY.GUIDE_Y := sStaY;

                    if (copy(sStaX,1,1) <> '0') and
                       (sStaX <> '')            then
                      cxtStartXval.Text := '0' + sStaX
                    else
                      cxtStartXval.Text := sStaX;
                    cxtStartYval.Text := sStaY;

                    cxtStartGUIDEXval.Text := cxtStartXval.Text;
                    cxtStartGUIDEYval.Text := cxtStartYval.Text;

                    lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                    SetDebugeWrite('Frm_JON01.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                    // 출발지 세부지명
                    if Trim(cxtStartAreaDetail.Hint) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Hint
                    else if Trim(cxtStartAreaDetail.Text) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Text
                    else if Trim(lcsSta3) <> '' then
                      meoStartArea.Text := lcsSta3;

                    MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                    MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                    //고객정보에 출발지 내용이 있는지에대한 구분값
                    if Trim(meoStartArea.Text) = '' then
                    begin
                      sRet := 0;
                    end	else
                    begin
                      sRet := 1;
                      GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
  //-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('MapY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;

                  if (sEndTmp1 <> '') and (sEndTmp2 <> '') and (sEndTmp3 <> '') and {(sEndTmp4 <> '') and} (sEndTmp5 <> '') and
                     (sEndX <> '') and (sEndY <> '') then
                  begin

                    // 도착지 정보
                    lcsEnd1 := sEndTmp1;
                    lcsEnd2 := sEndTmp2;
                    lcsEnd3 := sEndTmp3;
                    cxtEndAreaDetail.Caption := sEndTmp4;
                    cxtEndAreaDetail.Hint := sEndTmp5;

                    gJONEndChkXY.X := sEndX;
                    gJONEndChkXY.Y := sEndY;

                    gJONEndChkXY.GUIDE_X := sEndX;
                    gJONEndChkXY.GUIDE_Y := sEndY;

                    if (copy(sEndX,1,1) <> '0') and
                       (sEndX <> '')            then
                      cxtEndXval.Text := '0' + sEndX
                    else
                      cxtEndXval.Text := sEndX;
                    cxtEndYval.Text := sEndY;

                    cxtEndGUIDEXval.Text :=	cxtEndXval.Text;
                    cxtEndGUIDEYval.Text := cxtEndYval.Text;

                    lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                    cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                    SetDebugeWrite('Frm_JON01.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                    // 도착지 세부지명
                    if Trim(cxtEndAreaDetail.Hint) <> '' then
                      meoEndArea.Text := cxtEndAreaDetail.Hint
                    else
                    if Trim(lcsEnd3) <> '' then
                      meoEndArea.Text := lcsEnd3;

                    MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                    //고객정보에 도착지 내용이 있는지에대한 구분값
                    if Trim(meoEndArea.Text) = '' then
                    begin
                      eRet := 0;
                    end else
                    begin
                      eRet := 1;
                      GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
  //-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('DestY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;
                end	else
                begin
                  // 20120805 좌표 오류 체크 LYB
                  if (Trim(lst_Result.Attributes['Area']) <> '') and
                     (Trim(lst_Result.Attributes['Area2']) <> '') and
                     (Trim(lst_Result.Attributes['Area3']) <> '') and
//											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area4']) <> '') and    //신성현차장님 요청 2019.01.30
                     (Trim(lst_Result.Attributes['Area5']) <> '') and
                     (Trim(lst_Result.Attributes['MapX']) <> '') and
                     (Trim(lst_Result.Attributes['MapY']) <> '') then
                  begin
                    gJONStaChkXY.Area1 := lst_Result.Attributes['Area'];
                    gJONStaChkXY.Area2 := lst_Result.Attributes['Area2'];
                    gJONStaChkXY.Area3 := lst_Result.Attributes['Area3'];
                    gJONStaChkXY.Area4 := lst_Result.Attributes['Area4'];
                    gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                    gJONStaChkXY.X := lst_Result.Attributes['MapX'];
                    gJONStaChkXY.Y := lst_Result.Attributes['MapY'];
                    gJONStaChkXY.GUIDE_X := lst_Result.Attributes['MapX'];
                    gJONStaChkXY.GUIDE_Y := lst_Result.Attributes['MapY'];
                    gJONStaChkXY.Gubun := 'C';

                    // 출발지 정보
                    lcsSta1 := lst_Result.Attributes['Area'];
                    lcsSta2 := lst_Result.Attributes['Area2'];
                    lcsSta3 := lst_Result.Attributes['Area3'];
                    cxtStartAreaDetail.Text := lst_Result.Attributes['Area4'];
                    lcsConfAREA4 := lst_Result.Attributes['Area4'];

                    ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                    ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                    sTmp := func_StartAreaFunc(lst_Result.Attributes['Area5']);
                    cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
//											cxtStartAreaDetail.Hint := lst_Result.item[0].attributes.getNamedItem('Area5'];

                    gJONStaChkXY.X := lst_Result.Attributes['MapX'];
                    gJONStaChkXY.Y := lst_Result.Attributes['MapY'];

                    gJONStaChkXY.GUIDE_X := lst_Result.Attributes['MapX'];
                    gJONStaChkXY.GUIDE_Y := lst_Result.Attributes['MapY'];

                    if (copy(lst_Result.Attributes['MapX'],1,1) <> '0') and
                       (lst_Result.Attributes['MapX'] <> '')            then
                      cxtStartXval.Text := '0' + lst_Result.Attributes['MapX']
                    else
                      cxtStartXval.Text := lst_Result.Attributes['MapX'];
                    cxtStartYval.Text := lst_Result.Attributes['MapY'];

                    cxtStartGUIDEXval.Text := cxtStartXval.Text;
                    cxtStartGUIDEYval.Text := cxtStartYval.Text;

                    lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                    SetDebugeWrite('Frm_JON01.lblStartAreaName.Text 13779 : ' + lblStartAreaName.Text);

                    // 출발지 세부지명
                    if Trim(cxtStartAreaDetail.Hint) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Hint
                    else if Trim(cxtStartAreaDetail.Text) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Text
                    else if Trim(lcsSta3) <> '' then
                      meoStartArea.Text := lcsSta3;

                    MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                    MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                    //고객정보에 출발지 내용이 있는지에대한 구분값
                    if Trim(meoStartArea.Text) = '' then
                    begin
                      sRet := 0;
                    end	else
                    begin
                      sRet := 1;
                      GS_Grid_DEP := 'C'; //고객정보에 출발지 내용
//-    						  		changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('MapY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;
                  // 도착지 정보
                  if (Trim(lst_Result.Attributes['EdArea']) <> '') and
                     (Trim(lst_Result.Attributes['EdArea2']) <> '') and
                     (Trim(lst_Result.Attributes['EdArea3']) <> '') and
                     (Trim(lst_Result.Attributes['EdArea5']) <> '') and
                     (Trim(lst_Result.Attributes['DestX']) <> '') and
                     (Trim(lst_Result.Attributes['DestY']) <> '') then
                  begin
                    lcsEnd1 := lst_Result.Attributes['EdArea'];
                    lcsEnd2 := lst_Result.Attributes['EdArea2'];
                    lcsEnd3 := lst_Result.Attributes['EdArea3'];
                    cxtEndAreaDetail.Caption := lst_Result.Attributes['EdArea4'];
                    cxtEndAreaDetail.Hint := lst_Result.Attributes['EdArea5'];

                    gJONEndChkXY.X := lst_Result.Attributes['DestX'];
                    gJONEndChkXY.Y := lst_Result.Attributes['DestY'];

                    gJONEndChkXY.GUIDE_X := lst_Result.Attributes['DestX'];
                    gJONEndChkXY.GUIDE_Y := lst_Result.Attributes['DestY'];

                    if (copy(lst_Result.Attributes['DestX'],1,1) <> '0') and
                       (lst_Result.Attributes['DestX'] <> '')            then
                      cxtEndXval.Text := '0' + lst_Result.Attributes['DestX']
                    else
                      cxtEndXval.Text := lst_Result.Attributes['DestX'];
                    cxtEndYval.Text := lst_Result.Attributes['DestY'];

                    cxtEndGUIDEXval.Text :=	cxtEndXval.Text;
                    cxtEndGUIDEYval.Text := cxtEndYval.Text;

                    lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                    cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                    SetDebugeWrite('Frm_JON01.cxReEndArea.Text 13828 : ' + cxReEndArea.Text);

                    // 도착지 세부지명
                    if Trim(cxtEndAreaDetail.Hint) <> '' then
                      meoEndArea.Text := cxtEndAreaDetail.Hint
                    else
                      if Trim(lcsEnd3) <> '' then
                      meoEndArea.Text := lcsEnd3;

                    MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                    //고객정보에 도착지 내용이 있는지에대한 구분값
                    if Trim(meoEndArea.Text) = '' then
                    begin
                      eRet := 0;
                    end	else
                    begin
                      eRet := 1;
                      GS_Grid_DES := 'C'; //고객정보에 도착지 내용
  //-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('DestY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;
                end;
              except
                on e: exception do
                begin
                  ls_TxLoad := 'Jon01[출발지 정보 조회오류]:' + e.Message;
                  Assert(False, E.Message);
                  GMessagebox(PChar(ls_TxLoad), CDMSE);
                  Screen.Cursor := crDefault;
                end;
              end;
            end	else
            begin
              if bOther then    //타업체에 등록된 오더가 있을경우
              begin
                if (sStaTmp1 <> '') and (sStaTmp2 <> '') and (sStaTmp3 <> '') and (sStaTmp4 <> '') and (sStaTmp5 <> '') and
                   (sStaX <> '') and (sStaY <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
                begin
                  // 출발지 정보
                  lcsSta1 := sStaTmp1;
                  lcsSta2 := sStaTmp2;
                  lcsSta3 := sStaTmp3;
                  if sStaTmp4 <> '☆' then
                    cxtStartAreaDetail.Text := sStaTmp4
                  else
                    cxtStartAreaDetail.Text := '';

                  lcsConfAREA4 := sStaTmp4;
                  ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                  ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                  sTmp := func_StartAreaFunc(sStaTmp5);
                  cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
//										cxtStartAreaDetail.Hint := sStaTmp5;

                  gJONStaChkXY.X := sStaX;
                  gJONStaChkXY.Y := sStaY;

                  gJONStaChkXY.GUIDE_X := sStaX;
                  gJONStaChkXY.GUIDE_Y := sStaY;

                  if (copy(sStaX,1,1) <> '0') and
                     (sStaX <> '')            then
                    cxtStartXval.Text := '0' + sStaX
                  else
                    cxtStartXval.Text := sStaX;
                  cxtStartYval.Text := sStaY;

                  cxtStartGUIDEXval.Text := cxtStartXval.Text;
                  cxtStartGUIDEYval.Text := cxtStartYval.Text;

                  lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  SetDebugeWrite('JON01.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                  // 출발지 세부지명
                  if Trim(cxtStartAreaDetail.Hint) <> '' then
                    meoStartArea.Text := cxtStartAreaDetail.Hint
                  else if Trim(cxtStartAreaDetail.Text) <> '' then
                    meoStartArea.Text := cxtStartAreaDetail.Text
                  else if Trim(lcsSta3) <> '' then
                    meoStartArea.Text := lcsSta3;

                  MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                  MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                  //고객정보에 출발지 내용이 있는지에대한 구분값
                  if Trim(meoStartArea.Text) = '' then
                  begin
                    sRet := 0;
                  end	else
                  begin
                    sRet := 1;
                    GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
//-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('MapY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                  end;
                end;

                if (sEndTmp1 <> '') and (sEndTmp2 <> '') and (sEndTmp3 <> '') and {(sEndTmp4 <> '') and} (sEndTmp5 <> '') and
                   (sEndX <> '') and (sEndY <> '') then
                begin
                  // 도착지 정보
                  lcsEnd1 := sEndTmp1;
                  lcsEnd2 := sEndTmp2;
                  lcsEnd3 := sEndTmp3;
                  cxtEndAreaDetail.Caption := sEndTmp4;
                  cxtEndAreaDetail.Hint := sEndTmp5;

                  gJONEndChkXY.X := sEndX;
                  gJONEndChkXY.Y := sEndY;

                  gJONEndChkXY.GUIDE_X := sEndX;
                  gJONEndChkXY.GUIDE_Y := sEndY;

                  if (copy(sEndX,1,1) <> '0') and
                     (sEndX <> '')            then
                    cxtEndXval.Text := '0' + sEndX
                  else
                    cxtEndXval.Text := sEndX;
                  cxtEndYval.Text := sEndY;

                  cxtEndGUIDEXval.Text :=	cxtEndXval.Text;
                  cxtEndGUIDEYval.Text := cxtEndYval.Text;

                  lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                  cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                  SetDebugeWrite('JON01.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                  // 도착지 세부지명
                  if Trim(cxtEndAreaDetail.Hint) <> '' then
                    meoEndArea.Text := cxtEndAreaDetail.Hint
                  else
                  if Trim(lcsEnd3) <> '' then
                    meoEndArea.Text := lcsEnd3;

                  MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                  //고객정보에 도착지 내용이 있는지에대한 구분값
                  if Trim(meoEndArea.Text) = '' then eRet := 0
                  else eRet := 1;
                  if Trim(meoEndArea.Text) = '' then
                  begin
                    eRet := 0;
                  end else
                  begin
                    eRet := 1;
                    GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
//-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('DestY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                  end;
                end;
              end
            end;
            //-------------------------------------------------------------------------------------------
            //      과거내역을 가지고 취소율, 지사별 설정값에 의한 고객등급 결정
            //-------------------------------------------------------------------------------------------
            Try
              iend := StrToIntDef(lst_Result.Attributes['EndCnt'], 0);
              iCancel := StrToIntDef(lst_Result.Attributes['CancelCnt'], 0);
              iTotal := iEnd + iCancel;
              lblCuCntTotal.Caption := IntToStr(iTotal);
              lblCoCntTotal.Caption := IntToStr(iend);
              if (iTotal) > 0 then
              begin
                fcancelRate := ((iCancel / (iend + iCancel)) * 100);
                lblCuCancelR.Caption := IntToStr(Round(fCancelRate)) + '%';
              end	else
              begin
                lblCuCancelR.Caption := '0%';
              end;
            except
              on e: exception do
              begin
                ls_TxLoad := 'Jon01[과거내역]:' + e.Message;
                Assert(False, E.Message);
                GMessagebox(PChar(ls_TxLoad), CDMSE);
                Screen.Cursor := crDefault;
              end;
            end;

            // 고객등급사용구분[0:자동등급, 1:직접설정]
            iGrade1 := StrToIntDef(lst_Result.Attributes['Grade1'], 5);
            iGrade2 := StrToIntDef(lst_Result.Attributes['Grade2'], 15);

            if iEnd >= iGrade1 then
            begin
              // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
              Proc_SetFormColor_2(0);
            end else
            if iEnd >= iGrade2 then
            begin
              // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
              Proc_SetFormColor_2(1);
            end else
            begin
              // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
              Proc_SetFormColor_2(2);
            end;

             SetCustLevelSeq(lst_Result.Attributes['LevelCD']);

            // 고객 구분에 따른 색상 표시
            if (iBarIndex = 0) or (iBarIndex = 2) then
              Proc_SetFormColor_3(0)
            else if iBarIndex = 1 then
              Proc_SetFormColor_3(1)
            else if iBarIndex = 3 then
              Proc_SetFormColor_3(3);

            //2013.03.30 khs
            sAppCode        := lst_Result.Attributes['AppCode'];
            sAppLastRegDate := lst_Result.Attributes['AppLastRegDate'];
            sAppLastDelDate := lst_Result.Attributes['AppLastDelDate'];
            sAppLastFinishDate := lst_Result.Attributes['AppLastFinishDate'];
            sAppCuArea      := lst_Result.Attributes['AppCuArea'];
            sAppTermModel   := lst_Result.Attributes['AppGroup'] + '/'
                             + lst_Result.Attributes['AppTermOS'] + '/'
                             + lst_Result.Attributes['AppTermModel'];
            sAppTermOS      := lst_Result.Attributes['AppVersion'];
            if lst_Result.Attributes['AppDelYn'] = 'y' then sAppDelYn := '어플삭제'
                                                       else sAppDelYn := '어플사용';

            if sAppCode = '' then btnCustAppinfo.Enabled := False
                             else btnCustAppinfo.Enabled := True;
            SetCustAppInfo(
                sAppCode
              , sAppLastRegDate
              , sAppLastDelDate
              , sAppLastFinishDate
              , sAppCuArea
              , sAppTermModel
              , sAppTermOS
              , sAppDelYn
            );

            if iBarIndex = 3 then
            begin
              if lst_Result.Attributes['TaxType'] = '1' then
              begin
                lbBubinStateName.Caption := '이용정지';
                lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
                pnlBubinState.Visible := True;
                trmBubinState.Enabled := True;
                ABubinStateIndex := 1;
              end else
              if lst_Result.Attributes['TaxType'] = '2' then
              begin
                lbBubinStateName.Caption := '계약해지';
                lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
                pnlBubinState.Visible := True;
                ABubinStateIndex := 2;
              end else
//                if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '0' then
              begin
                lbBubinStateName.Caption := '정상이용';
                lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
                pnlBubinState.Visible := False;
                trmBubinState.Enabled := False;
                ABubinStateIndex := 0;
              end;
            end else
            begin
              lbBubinStateName.Caption := '정상이용';
              lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
              pnlBubinState.Visible := False;
              trmBubinState.Enabled := False;
              ABubinStateIndex := 0;
            end;

            //================================= 고객정보 Display End. =====================================
          except
            on e: exception do
            begin
              ls_TxLoad := 'Jon01[고객 조회오류]:' + e.Message;
              Assert(False, E.Message);
              GMessagebox(PChar(ls_TxLoad), CDMSE);
              Screen.Cursor := crDefault;
            end;
          end;
        end	else
        if StrToIntDef(lst_Result.Attributes['Gubun'], 2) = 1 then     //기사로 검색
        begin
          chk_AIReCall.Properties.ReadOnly := True;  //기사는 제외
          chk_AIReCall.checked := False;

          frm_Main.Proc_CidLog(98, '기사'); // 로그 기록.

          lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Driver');
          if lst_Result <> Nil then
          begin
            wk_br_Name := lst_Result.Attributes['BrName']
              + '(' + lst_Result.Attributes['BrNo'] + ')';
            FWk_sabun := lst_Result.Attributes['Sabun'];
            wk_Name := lst_Result.Attributes['TermInfo'];
            wk_Name := lst_Result.Attributes['Name'];

            Frm_JON012.sFinishCnt := lst_Result.Attributes['FinishCnt'];
            Frm_JON012.sCancelCnt := lst_Result.Attributes['CancelCnt'];
            Frm_JON012.sPhone_info := lst_Result.Attributes['TermInfo'];

            // 조회기사 사번, 기사지사코드 저장.
            locWkSabun := FWk_sabun; // 기사사번
            locWkBrNo := lst_Result.Attributes['BrNo'];
            // 지사코드
  //  -					cxLblSeaWkSabun.Hint := FWk_sabun; // 기사사번
            cxtWorkerNm.Text := wk_Name;
          end;

          Proc_SetFormColor_3(9); // 기사 지정칼라로 바 세팅한다.
          if bOther then    //타업체에 등록된 오더가 있을경우
          begin
            if (sStaTmp1 <> '') and (sStaTmp2 <> '') and (sStaTmp3 <> '') and (sStaTmp4 <> '') and (sStaTmp5 <> '') and
               (sStaX <> '') and (sStaY <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
            begin
              // 출발지 정보
              lcsSta1 := sStaTmp1;
              lcsSta2 := sStaTmp2;
              lcsSta3 := sStaTmp3;
              if sStaTmp4 <> '☆' then
                cxtStartAreaDetail.Text := sStaTmp4
              else
                cxtStartAreaDetail.Text := '';
              lcsConfAREA4            := sStaTmp4;

              ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
              ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
              sTmp := func_StartAreaFunc(sStaTmp5);
              cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
  //							cxtStartAreaDetail.Hint := sStaTmp5;

              gJONStaChkXY.X := sStaX;
              gJONStaChkXY.Y := sStaY;

              gJONStaChkXY.GUIDE_X := sStaX;
              gJONStaChkXY.GUIDE_Y := sStaY;

              if (copy(sStaX,1,1) <> '0') and
                 (sStaX <> '')            then
                cxtStartXval.Text := '0' + sStaX
              else
                cxtStartXval.Text := sStaX;
              cxtStartYval.Text := sStaY;

              cxtStartGUIDEXval.Text := cxtStartXval.Text;
              cxtStartGUIDEYval.Text := cxtStartYval.Text;

              lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
              SetDebugeWrite('JON01.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

              // 출발지 세부지명
              if Trim(cxtStartAreaDetail.Hint) <> '' then
                meoStartArea.Text := cxtStartAreaDetail.Hint
              else if Trim(cxtStartAreaDetail.Text) <> '' then
                meoStartArea.Text := cxtStartAreaDetail.Text
              else if Trim(lcsSta3) <> '' then
                meoStartArea.Text := lcsSta3;

              MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
              MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

              //고객정보에 출발지 내용이 있는지에대한 구분값
              if Trim(meoStartArea.Text) = '' then
              begin
                sRet := 0;
              end	else
              begin
                sRet := 1;
                GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
  //-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('MapY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
              end;
            end;

            if (sEndTmp1 <> '') and (sEndTmp2 <> '') and (sEndTmp3 <> '') and {(sEndTmp4 <> '') and} (sEndTmp5 <> '') and
               (sEndX <> '') and (sEndY <> '') then
            begin
              // 도착지 정보
              lcsEnd1 := sEndTmp1;
              lcsEnd2 := sEndTmp2;
              lcsEnd3 := sEndTmp3;
              cxtEndAreaDetail.Caption := sEndTmp4;
              cxtEndAreaDetail.Hint := sEndTmp5;

              gJONEndChkXY.X := sEndX;
              gJONEndChkXY.Y := sEndY;

              gJONEndChkXY.GUIDE_X := sEndX;
              gJONEndChkXY.GUIDE_Y := sEndY;

              if (copy(sEndX,1,1) <> '0') and
                 (sEndX <> '')            then
                cxtEndXval.Text := '0' + sEndX
              else
                cxtEndXval.Text := sEndX;
              cxtEndYval.Text := sEndY;

              cxtEndGUIDEXval.Text :=	cxtEndXval.Text;
              cxtEndGUIDEYval.Text := cxtEndYval.Text;

              lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

              cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
              SetDebugeWrite('JON01.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

              // 도착지 세부지명
              if Trim(cxtEndAreaDetail.Hint) <> '' then
                meoEndArea.Text := cxtEndAreaDetail.Hint
              else
                if Trim(lcsEnd3) <> '' then
                meoEndArea.Text := lcsEnd3;

              MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

              //고객정보에 도착지 내용이 있는지에대한 구분값
              if Trim(meoEndArea.Text) = '' then eRet := 0
              else eRet := 1;
              if Trim(meoEndArea.Text) = '' then
              begin
                eRet := 0;
              end else
              begin
                eRet := 1;
                GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
//-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('DestY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
              end;
            end;
          end;
        end else
        if StrToIntDef(lst_Result.Attributes['Gubun'], 2) = 0 then     //전체 20130519 KHS
        begin
          Try
            frm_Main.Proc_CidLog(98, '기사'); // 로그 기록.      0일때는 무조건 기사로 등록
            Frm_Main.Frm_JON03[Jon03Tag].pnlBubin.Visible := False;

            lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Customer');
            if lst_Result = Nil then Exit;

            //AI 아웃바운드 옵션 배차지연콜 사용여부 20190716 KHS
            sAIOB := lst_Result.Attributes['AiOutOption'];
            if (sAIOB = 'y') or (sAIOB = '') then
            begin

              sTmp := Proc_MainKeyNumberSearch;
              if not GetAIOBKeyNumberYN(sTmp) then   //고객이 선택되어 있어도 지사의 대표번호에서 사용안하면 체크해제
              begin
                chk_AIReCall.Properties.ReadOnly := True;
                chk_AIReCall.checked := False;
              end else chk_AIReCall.checked := True;
            end else chk_AIReCall.checked := False;
            //AI 아웃바운드 옵션 배차지연콜 사용여부 20190716 KHS

            iCarType := StrtoIntDef(lst_Result.Attributes['CarType'], 2);
            if iCarType = 1 then cb_CarType.ItemIndex := 0 else cb_CarType.ItemIndex := 1;

            /////////////////콜벨 20161231 KHS////////////////////////////////
            iBarIndex := StrtoIntDef(lst_Result.Attributes['CuType'], 0);
            if lst_Result.Attributes['CallBellStatus'] = '1' then  //콜벨상태(1:정상, 2:해지, null: 콜벨 업소 설정 없음)
            begin
              pnlCallBell.visible := True;
              pnlCallBell.Top  := CbCuGb.Top -8;
              pnlCallBell.Left := cxtCuBubin.Left;
              pnlCallBell.Color := $00804000;

              pnlCallBellAll.Top := 0;
              pnlCallBellAll.Left := 0;
              pnlCallBellAll.Width := 308;
              pnlCallBellAll.Height := 143;
              pnlCallBellAll.visible := True;
              if cxLblCIDUseFlg.Hint = 'CID' then
              begin
                lbUpsoPee.Caption := '콜벨 업소 - 콜링';
                pnlCallBell.Caption := '+++++콜벨 업소 - 콜링+++++';
              end	else
              begin
                lbUpsoPee.Caption := '콜벨 업소';
                pnlCallBell.Caption := '+++++++콜벨 업소+++++++';
              end;

              tmUpsoPnl.Interval := 3000;
              tmUpsoPnl.Enabled := True;
            end	else
            begin
              if (iBarIndex = 1)  and (lst_Result.Attributes['CuMileValue'] <> '0')  and (lst_Result.Attributes['CuMileValue'] <> '') then  //업소일경우
              begin
                pnlCallBell.visible := True;
                pnlCallBell.Top  := CbCuGb.Top -8;
                pnlCallBell.Left := cxtCuBubin.Left;
                pnlCallBell.Color := $000B5AFF;

                pnlCallBellAll.Top := 0;
                pnlCallBellAll.Left := 0;
                pnlCallBellAll.Width := 308;
                pnlCallBellAll.Height := 143;
                pnlCallBellAll.visible := True;

                tmUpsoPnl.Interval := 3000;
                tmUpsoPnl.Enabled := True;

                lbUpsoName.Caption := lst_Result.Attributes['Name'];

                if lst_Result.Attributes['CuMileType'] = '1' then
                  lbUpsoPee.Caption := '+++일정금액 / ' + StrToMoney(lst_Result.Attributes['CuMileValue']) + '원+++'
                else if lst_Result.Attributes['CuMileType'] = '2' then
                  lbUpsoPee.Caption := '+++매출비율 / ' + lst_Result.Attributes['CuMileValue'] + '%+++'
                else
                  lbUpsoPee.Caption := '';

                pnlCallBell.Caption := lbUpsoPee.Caption;
              end else
              begin
                pnlCallBell.visible := False;
                pnlCallBellAll.visible := False;
                tmUpsoPnl.Enabled := False;
              end;
            end;
            pnlCallBell.Hint := lst_Result.Attributes['CallBellStatus'];
            lbUpsoName.Caption := lst_Result.Attributes['Name'];
            /////////////////콜벨 20161231 KHS////////////////////////////////
            if GB_JON_VIEWWKIFNO then
            begin
              chkViewLevel.Checked := False;
            end else
            begin
              if lst_Result.Attributes['ViewLevel'] = '1' then chkViewLevel.Checked := True
                                                          else chkViewLevel.Checked := False;
            end;

            if lst_Result.Attributes['CuOrderOption'] = 'y' then
            begin
              lcsActiveEdit := 'meoStartArea';
              sActieEdit := 'meoStartArea';
              cb_04.Down := True;
              cb_04.Click;
            end;

            sWkFAge := lst_Result.Attributes['WkFromAge'];
            sWkTAge := lst_Result.Attributes['WkToAge'];
            if StrToIntDef(sWkFAge,0) > 0 then
            begin
              BtnWkAge.Down := True;
              edtWkFAge.Text := sWkFAge;
              if StrToIntDef(sWkTAge,0) > 0 then
                edtWkTAge.Text := sWkTAge
              else
                edtWkTAge.Text := '99';
            end else
            if StrToIntDef(sWkTAge,0) > 0 then
            begin
              BtnWkAge.Down := True;
              edtWkFAge.Text := '19';
              edtWkTAge.Text := sWkTAge;
            end
            else BtnWkAge.Down := False;

            if BtnWkAge.Down then BtnWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하'
            else BtnWkAge.Hint := '';

            edtCuName.Text := lst_Result.Attributes['Name'];

            sContent := StringReplace(lst_Result.Attributes['Info'], '|', '¶', [rfReplaceAll]);
            if Trim(sContent) <> '' then
            begin
              ls_Rcrd := TStringList.Create;
              try
                GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                for ia := 0 to ls_Rcrd.Count - 1 do
                begin
                  if ia = 0 then
                    meoCuCCMemo.Text := ls_Rcrd[ia]
                  else
                    meoCuCCMemo.Text := meoCuCCMemo.Text + #13#10 + ls_Rcrd[ia];
                end;
              finally
                FreeAndNil(ls_Rcrd);
              end;
            end;

            sTemp := lst_Result.Attributes['CbCuMemo'];
            if sTemp <> '' then
            begin
              if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
              begin
                meoCuCCMemo.Width := 38;
              end else
              begin
                meoCuCCMemo.Width := 142;
              end;
              BtnViewMemo.Left := meoCuCCMemo.Left + meoCuCCMemo.Width - BtnViewMemo.Width -2;
              mmoCbMemo.Visible := True;
              mmoCbMemo.Text := sTemp;
            end;

            sContent := StringReplace(lst_Result.Attributes['PdaInfo'], '|', '¶', [rfReplaceAll]);
            if Trim(sContent) <> '' then
            begin
              ls_Rcrd := TStringList.Create;
              try
                GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                for ia := 0 to ls_Rcrd.Count - 1 do
                begin
                  if ia = 0 then
                    meoCuWorMemo.Text := ls_Rcrd[ia]
                  else
                    meoCuWorMemo.Text := meoCuWorMemo.Text + #13#10 + ls_Rcrd[ia];
                end;
              finally
                FreeAndNil(ls_Rcrd);
              end;
            end;

            sContent := StringReplace(lst_Result.Attributes['Memo'], '|', '¶', [rfReplaceAll]);
            if Trim(sContent) <> '' then
            begin
              ls_Rcrd := TStringList.Create;
              try
                GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                for ia := 0 to ls_Rcrd.Count - 1 do
                begin
                  if ia = 0 then
                    edt_CardMemo.Text := ls_Rcrd[ia]
                  else
                    edt_CardMemo.Text := edt_CardMemo.Text + #13#10 + ls_Rcrd[ia];
                end;
              finally
                FreeAndNil(ls_Rcrd);
              end;
            end;
            edt_CardMemo.Top := meoCuWorMemo.Top + meoCuWorMemo.Height + 2;
            edt_CardMemo.Height := 29;
            if ( TCK_USER_PER.JON_CUSTMEMO2 <> '1') then
            begin
              if edt_CardMemo.Lines.Count = 1 then BtnSimMemo.Enabled := False
                                              else BtnSimMemo.Enabled := True;
            end;

            iBarIndex := StrtoIntDef(lst_Result.Attributes['CuType'], 0);

            ChkCuSmsNo.Tag := 1;
            if lst_Result.Attributes['SMS'] = 'n' then ChkCuSmsNo.Checked := True else
            if lst_Result.Attributes['SMS'] = 'y' then ChkCuSmsNo.Checked := False;
            ChkCuSmsNo.Tag := 0;

            lblCuMile.Caption := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['CurMlg'], 0));
            lblCuMileUnit.Caption := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['PrizeMlg'], 0));
            //지사설정 지금 단위
            lblCuMileCnt.Caption   := lst_Result.Attributes['PrizeCnt'];
            sProdName := lst_Result.Attributes['Prize'];
            SetMileColorChange;

            lblCuMileLost.Caption := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['CuExpireMileage'], 0));

            // hjf-고객상황실설정(접수정보 조회)
            if lst_Result.HasAttribute('BrTelYN') then
              CustBrTelYN := lst_Result.Attributes['BrTelYN'];

            if (CustBrTelYN = 'y') then	BtnCenterMng.Down := True	else
            if (CustBrTelYN = '') and (iBarIndex = 1) and (GB_SHOPTYPE_CALLCENTER = 1) then BtnCenterMng.Down := True	else
            if (CustBrTelYN = 'n') then	BtnCenterMng.Down := False;

            SetPayMethod(PAY_METHOD_MONEY); // 현금

            // 법인코드
            cxtCuBubin.Hint := TRim(lst_Result.Attributes['BGroup']);
            sBGroup := TRim(lst_Result.Attributes['BGroup']);
            if (GS_PRJ_AREA = 'S') and (sBGroup <> '') and (locBRNO <> 'G898') and (locBRNO <> 'Q908') and (locBRNO <> 'H849') then
            begin
              LblTop   .Color := $00FE8769;   // 파란색
              LblLeft  .Color := LblTop.Color;
              LblRigth .Color := LblTop.Color;
              LblBottom.Color := LblTop.Color;
              PnlTitle .Color := LblTop.Color;
//                  PnlWorkMemo.Color := LblTop.Color;
              PnlBtm.Color := LblTop.Color;
//									PnlBox4.Color := LblTop.Color;
              Pnl_BubinV.Color := LblTop.Color;
            end;

            // + ',' + ed_MaddBrch.Text;
            if cxtCuBubin.Hint <> '' then
            begin
              sSel_BrNo := Proc_BRNOSearch;
              if ( sSel_BrNo <> locBRNO ) And ( GT_USERIF.HD = 'A1531' ) then
              begin
                ls_msg := '접수창 지사[' + sSel_BrNo + ']와 조회 지사['+ locBRNO +']가 다릅니다' + #13#10 +
                          '고객번호에서 다시 엔터를 치세요';
//                    Application.MessageBox(PChar(ls_msg), '콜마너 XE 3', MB_OK);
                Assert(False, 'Frm_JON01.Proc_KeyNumberInsert - 법인명상이.' + cxtCuTel.Text + ' : '  + ls_msg);
//                    Exit;
              end;
              iBidx := GT_BUBIN_INFO.cbcode.IndexOf(Trim(cxtCuBubin.Hint) + ',' + locBRNO);
              if iBidx > -1 then
              begin
                // 법인정보[법인명 + 부서명]
                cxtCuBubin.Text := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc[iBidx]), 1, 60)) + ' | ' + Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc[iBidx]), 61, 60));
                lblCuBubinName.Caption := '법인고객 [ ' + Trim(cxtCuBubin.Text) + ' ]';
                iend := StrToIntDef(Copy(AnsiString(GT_BUBIN_INFO.cbEtc[iBidx]), 153, 1), 1);

                if (GT_SEL_BRNO.HDNO = 'A1531') then
                begin
                  //코리아드라이브 외상, 카드 결제수단 제외 2015.07.27 KHS(김계명과장 요청)
                end else
                begin
                  if (iend = 0) and (gsJON01CreditMoneyYN <> 'FALSE') then
                    SetPayMethod(PAY_METHOD_TRUST)  // 외상
                  else if (iend = 2) and (gsJON01CreditMoneyYN <> 'FALSE') then
                    SetPayMethod(PAY_METHOD_POST_NML)  // 후불
                  else
                    SetPayMethod(PAY_METHOD_MONEY); // 현금
                end;
              end	else
              begin
                if Length(Trim(cxtCuTel.Text)) < 3 then
                begin
                  cxtCallTelNum.Text := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
                  cxtCuTel.Text      := cxtCallTelNum.Text;
                end;
                if tmHoTranRlt.Tag = 0 then
                begin
                  ShowMessage('조회된 고객의 법인정보[' + cxtCuBubin.Hint + ']가 없습니다.#13#10(법인정보를 다시 조회합니다.)');
                  tmHoTranRlt.Tag := 1;

                  tmHoTranRlt.Interval := 100;
                  tmHoTranRlt.Enabled := True; // 자동조회 호출.
                  Exit;
                end	else
                begin
                  ShowMessage('법인정보[' + cxtCuBubin.Hint + ']를 찾을 수 없습니다.'#13#10 +
                    '(대표번호와 법인정보를 확인 바랍니다.'#13#10 +
                    '법인정보 없이 오더를 등록합니다.');
                end;
              end;
              tmHoTranRlt.Tag := 0;
            end;

            if AUseMileage then
            begin
              SetPayMethod(PAY_METHOD_POST_MILE); // 부산5천콜 후불마일 강제셋팅
              if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
              begin
                UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0)
                          + StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);
                edtPostPay.Value := IfThen(UserMile >= curRate.Value, curRate.Value, 10000);
              end	else
              begin
                if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;
                if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
                begin
                  edtPostPay.Value := 0;
                  cxLblWkJAmt.Caption := '1,000';
                  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
                end else
                if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
                begin
                  edtPostPay.Value := 0;
                  cxLblWkJAmt.Caption := '2,000';
                  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
                end else
                if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
                begin
                  edtPostPay.Value := 0;
                  cxLblWkJAmt.Caption := '3,000';
                  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
                end else
                  edtPostPay.Value := curRate.Value;
              end;
              cbbPostTime.ItemIndex := 1;
              AppendPostDesc;
            end;

            CBCuGB.Hint := 'Clear';
            if (iBarIndex = 0) or (iBarIndex = 4) then
            begin
              CbCuGb.ItemIndex := 0;
              CbCuGb.Hint := '1';
              // 0:개인, 4:불량 둘다 일반으로 처리(불량코드는 사용안함)
            end	else
            if iBarIndex = 1 then
            begin
              CbCuGb.ItemIndex := 1;
              CbCuGb.Hint := '2';
            end else
            if iBarIndex = 3 then
            begin
              CbCuGb.ItemIndex := 2;
              CbCuGb.Hint := '3';
            end	else
            begin
              CbCuGb.ItemIndex := 0;
              CbCuGb.Hint := '1';
            end;
            CBCuGB.Hint := '';

            // 고객수정 버튼 활성화.
            lcsCu_seq := lst_Result.Attributes['CuSeq'];
            if lcsCu_seq <> '' then
            begin
              cxBtnCuUpdate.Enabled := True;
              cxBtnCuDel.Enabled := True;
            end	else
            begin
              cxBtnCuUpdate.Enabled := False;
              cxBtnCuDel.Enabled := False;

              edtCuName.Text 			 := FCustChangeInfo.name;
              CbCuGb.ItemIndex     := 0;
              CbCuGb.Hint          := '';
              meoCuCCMemo.Text 		 := FCustChangeInfo.meoCuCCMemo;
              meoCuWorMemo.Text    := FCustChangeInfo.meoCuWorMemo;
              edt_CardMemo.Text    := FCustChangeInfo.edt_CardMemo;
            end;
            sRet := 0; //고객정보에 출발지 내용이 있는지에대한 구분값
            eRet := 0; //고객정보에 도착지 내용이 있는지에대한 구분값

            if ( Not pbISStartEndXY ) And ( locAutoCallYn <> 'Y') then  // 출발지/도착지에 자료가 있는지 여부 체크 후 없으면 표시  20130724  LYB
            begin
              Try
                if bOther then    //타업체에 등록된 오더가 있을경우
                begin
                  if (sStaTmp1 <> '') and (sStaTmp2 <> '') and (sStaTmp3 <> '') and (sStaTmp4 <> '') and (sStaTmp5 <> '') and
                     (sStaX <> '') and (sStaY <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
                  begin
                    // 출발지 정보
                    lcsSta1 := sStaTmp1;
                    lcsSta2 := sStaTmp2;
                    lcsSta3 := sStaTmp3;
                    if sStaTmp4 <> '☆' then
                      cxtStartAreaDetail.Text := sStaTmp4
                    else
                      cxtStartAreaDetail.Text := '';
                    lcsConfAREA4            := sStaTmp4;

                    ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                    ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                    sTmp := func_StartAreaFunc(sStaTmp5);
                    cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
  //										cxtStartAreaDetail.Hint := sStaTmp5;

                    gJONStaChkXY.X := sStaX;
                    gJONStaChkXY.Y := sStaY;

                    gJONStaChkXY.GUIDE_X := sStaX;
                    gJONStaChkXY.GUIDE_Y := sStaY;

                    if (copy(sStaX,1,1) <> '0') and
                       (sStaX <> '')            then
                      cxtStartXval.Text := '0' + sStaX
                    else
                      cxtStartXval.Text := sStaX;
                    cxtStartYval.Text := sStaY;

                    cxtStartGUIDEXval.Text := cxtStartXval.Text;
                    cxtStartGUIDEYval.Text := cxtStartYval.Text;

                    lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                    SetDebugeWrite('JON01.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                    // 출발지 세부지명
                    if Trim(cxtStartAreaDetail.Hint) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Hint
                    else if Trim(cxtStartAreaDetail.Text) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Text
                    else if Trim(lcsSta3) <> '' then
                      meoStartArea.Text := lcsSta3;

                    MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                    MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                    //고객정보에 출발지 내용이 있는지에대한 구분값
                    if Trim(meoStartArea.Text) = '' then
                    begin
                      sRet := 0;
                    end	else
                    begin
                      sRet := 1;
                      GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
//-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('MapY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;

                  if (sEndTmp1 <> '') and (sEndTmp2 <> '') and (sEndTmp3 <> '') and {(sEndTmp4 <> '') and} (sEndTmp5 <> '') and
                     (sEndX <> '') and (sEndY <> '') then
                  begin
                  // 도착지 정보
                    lcsEnd1 := sEndTmp1;
                    lcsEnd2 := sEndTmp2;
                    lcsEnd3 := sEndTmp3;
                    cxtEndAreaDetail.Caption := sEndTmp4;
                    cxtEndAreaDetail.Hint := sEndTmp5;

                    gJONEndChkXY.X := sEndX;
                    gJONEndChkXY.Y := sEndY;

                    gJONEndChkXY.GUIDE_X := sEndX;
                    gJONEndChkXY.GUIDE_Y := sEndY;

                    if (copy(sEndX,1,1) <> '0') and
                       (sEndX <> '')            then
                      cxtEndXval.Text := '0' + sEndX
                    else
                      cxtEndXval.Text := sEndX;
                    cxtEndYval.Text := sEndY;

                    cxtEndGUIDEXval.Text :=	cxtEndXval.Text;
                    cxtEndGUIDEYval.Text := cxtEndYval.Text;

                    lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                    cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                    SetDebugeWrite('JON01.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                    // 도착지 세부지명
                    if Trim(cxtEndAreaDetail.Hint) <> '' then
                      meoEndArea.Text := cxtEndAreaDetail.Hint
                    else
                      if Trim(lcsEnd3) <> '' then
                      meoEndArea.Text := lcsEnd3;

                    MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                    //고객정보에 도착지 내용이 있는지에대한 구분값
                    if Trim(meoEndArea.Text) = '' then eRet := 0
                    else eRet := 1;
                    if Trim(meoEndArea.Text) = '' then
                    begin
                      eRet := 0;
                    end else
                    begin
                      eRet := 1;
                      GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
//-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('DestY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;
                end	else
                begin
                  if (Trim(lst_Result.Attributes['Area']) <> '') and
                     (Trim(lst_Result.Attributes['Area2']) <> '') and
                     (Trim(lst_Result.Attributes['Area3']) <> '') and    //POI명 있어야 근배가능
//											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area4']) <> '') and //신성현차장님 요청 2019.01.30
                     (Trim(lst_Result.Attributes['Area5']) <> '') and
                     (Trim(lst_Result.Attributes['MapX']) <> '') and
                     (Trim(lst_Result.Attributes['MapY']) <> '') then
                  begin
                    // 20120805 좌표 오류 체크 LYB
                    gJONStaChkXY.Area1 := lst_Result.Attributes['Area'];
                    gJONStaChkXY.Area2 := lst_Result.Attributes['Area2'];
                    gJONStaChkXY.Area3 := lst_Result.Attributes['Area3'];
                    gJONStaChkXY.Area4 := lst_Result.Attributes['Area4'];
                    gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                    gJONStaChkXY.X := lst_Result.Attributes['MapX'];
                    gJONStaChkXY.Y := lst_Result.Attributes['MapY'];
                    gJONStaChkXY.GUIDE_X := lst_Result.Attributes['MapX'];
                    gJONStaChkXY.GUIDE_Y := lst_Result.Attributes['MapY'];
                    gJONStaChkXY.Gubun := 'C';

                    lcsSta1 := lst_Result.Attributes['Area'];
                    lcsSta2 := lst_Result.Attributes['Area2'];
                    lcsSta3 := lst_Result.Attributes['Area3'];
                    cxtStartAreaDetail.Text := lst_Result.Attributes['Area4'];
                    lcsConfAREA4            := lst_Result.Attributes['Area4'];

                    ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                    ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                    sTmp := func_StartAreaFunc(lst_Result.Attributes['Area5']);
                    cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
  //										cxtStartAreaDetail.Hint := lst_Result.item[0].attributes.getNamedItem('Area5'];

                    if (copy(lst_Result.Attributes['MapX'],1,1) <> '0') and
                       (lst_Result.Attributes['MapX'] <> '')            then
                      cxtStartXval.Text := '0' + lst_Result.Attributes['MapX']
                    else
                      cxtStartXval.Text := lst_Result.Attributes['MapX'];
                    cxtStartYval.Text := lst_Result.Attributes['MapY'];

                    cxtStartGUIDEXval.Text := cxtStartXval.Text;
                    cxtStartGUIDEYval.Text := cxtStartYval.Text;

                    lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                    SetDebugeWrite('JON01.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                    // 출발지 세부지명
                    if Trim(cxtStartAreaDetail.Hint) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Hint
                    else if Trim(cxtStartAreaDetail.Text) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Text
                    else if Trim(lcsSta3) <> '' then
                      meoStartArea.Text := lcsSta3;

                    MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                    MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                    //고객정보에 출발지 내용이 있는지에대한 구분값
                    if Trim(meoStartArea.Text) = '' then
                    begin
                      sRet := 0;
                    end	else
                    begin
                      sRet := 1;
                      GS_Grid_DEP := 'C'; //고객정보에 출발지 내용
  //-    						  		changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('MapY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;
                  if (Trim(lst_Result.Attributes['EdArea']) <> '') and
                     (Trim(lst_Result.Attributes['EdArea2']) <> '') and
                     (Trim(lst_Result.Attributes['EdArea3']) <> '') and
                     (Trim(lst_Result.Attributes['EdArea5']) <> '') and
                     (Trim(lst_Result.Attributes['DestX']) <> '') and
                     (Trim(lst_Result.Attributes['DestY']) <> '') then
                  begin
                    // 도착지 정보
                    lcsEnd1 := lst_Result.Attributes['EdArea'];
                    lcsEnd2 := lst_Result.Attributes['EdArea2'];
                    lcsEnd3 := lst_Result.Attributes['EdArea3'];
                    cxtEndAreaDetail.Caption := lst_Result.Attributes['EdArea4'];
                    cxtEndAreaDetail.Hint := lst_Result.Attributes['EdArea5'];

                    gJONEndChkXY.X := lst_Result.Attributes['DestX'];
                    gJONEndChkXY.Y := lst_Result.Attributes['DestY'];

                    gJONEndChkXY.GUIDE_X := lst_Result.Attributes['DestX'];
                    gJONEndChkXY.GUIDE_Y := lst_Result.Attributes['DestY'];

                    if (copy(lst_Result.Attributes['DestX'],1,1) <> '0') and
                       (lst_Result.Attributes['DestX'] <> '')            then
                      cxtEndXval.Text := '0' + lst_Result.Attributes['DestX']
                    else
                      cxtEndXval.Text := lst_Result.Attributes['DestX'];
                    cxtEndYval.Text := lst_Result.Attributes['DestY'];

                    cxtEndGUIDEXval.Text :=	cxtEndXval.Text;
                    cxtEndGUIDEYval.Text := cxtEndYval.Text;

                    lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                    cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                    SetDebugeWrite('JON01.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                    // 도착지 세부지명
                    if Trim(cxtEndAreaDetail.Hint) <> '' then
                      meoEndArea.Text := cxtEndAreaDetail.Hint
                    else
                      if Trim(lcsEnd3) <> '' then
                    meoEndArea.Text := lcsEnd3;

                    MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                    //고객정보에 도착지 내용이 있는지에대한 구분값
                    if Trim(meoEndArea.Text) = '' then eRet := 0
                    else eRet := 1;
                    if Trim(meoEndArea.Text) = '' then
                    begin
                      eRet := 0;
                    end else
                    begin
                      eRet := 1;
                      GS_Grid_DES := 'C'; //고객정보에 도착지 내용
//-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('DestY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;
                end;
              except
                on e: exception do
                begin
                  ls_TxLoad := 'Jon01[출발지 정보 조회오류]:' + e.Message;
                  Assert(False, E.Message);
                  GMessagebox(PChar(ls_TxLoad), CDMSE);
                  Screen.Cursor := crDefault;
                end;
              end;
            end else
            begin
              if bOther then    //타업체에 등록된 오더가 있을경우
              begin
                if (sStaTmp1 <> '') and (sStaTmp2 <> '') and (sStaTmp3 <> '') and (sStaTmp4 <> '') and (sStaTmp5 <> '') and
                   (sStaX <> '') and (sStaY <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
                begin
                  // 출발지 정보
                  lcsSta1 := sStaTmp1;
                  lcsSta2 := sStaTmp2;
                  lcsSta3 := sStaTmp3;
                  if sStaTmp4 <> '☆' then
                    cxtStartAreaDetail.Text := sStaTmp4
                  else
                    cxtStartAreaDetail.Text := '';
                  lcsConfAREA4            := sStaTmp4;

                  ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                  ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                  sTmp := func_StartAreaFunc(sStaTmp5);
                  cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
  //									cxtStartAreaDetail.Hint := sStaTmp5;

                  gJONStaChkXY.X := sStaX;
                  gJONStaChkXY.Y := sStaY;

                  gJONStaChkXY.GUIDE_X := sStaX;
                  gJONStaChkXY.GUIDE_Y := sStaY;

                  if (copy(sStaX,1,1) <> '0') and
                     (sStaX <> '')            then
                    cxtStartXval.Text := '0' + sStaX
                  else
                    cxtStartXval.Text := sStaX;
                  cxtStartYval.Text := sStaY;

                  cxtStartGUIDEXval.Text := cxtStartXval.Text;
                  cxtStartGUIDEYval.Text := cxtStartYval.Text;

                  lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  SetDebugeWrite('JON01.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                  // 출발지 세부지명
                  if Trim(cxtStartAreaDetail.Hint) <> '' then
                    meoStartArea.Text := cxtStartAreaDetail.Hint
                  else if Trim(cxtStartAreaDetail.Text) <> '' then
                    meoStartArea.Text := cxtStartAreaDetail.Text
                  else if Trim(lcsSta3) <> '' then
                    meoStartArea.Text := lcsSta3;

                  MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                  MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                  //고객정보에 출발지 내용이 있는지에대한 구분값
                  if Trim(meoStartArea.Text) = '' then
                  begin
                    sRet := 0;
                  end	else
                  begin
                    sRet := 1;
                    GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
  //-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('MapY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                  end;
                end;

                if (sEndTmp1 <> '') and (sEndTmp2 <> '') and (sEndTmp3 <> '') and {(sEndTmp4 <> '') and} (sEndTmp5 <> '') and
                   (sEndX <> '') and (sEndY <> '') then
                begin
                  // 도착지 정보
                  lcsEnd1 := sEndTmp1;
                  lcsEnd2 := sEndTmp2;
                  lcsEnd3 := sEndTmp3;
                  cxtEndAreaDetail.Caption := sEndTmp4;
                  cxtEndAreaDetail.Hint := sEndTmp5;

                  gJONEndChkXY.X := sEndX;
                  gJONEndChkXY.Y := sEndY;

                  gJONEndChkXY.GUIDE_X := sEndX;
                  gJONEndChkXY.GUIDE_Y := sEndY;

                  if (copy(sEndX,1,1) <> '0') and
                     (sEndX <> '')            then
                    cxtEndXval.Text := '0' + sEndX
                  else
                    cxtEndXval.Text := sEndX;
                  cxtEndYval.Text := sEndY;

                  cxtEndGUIDEXval.Text :=	cxtEndXval.Text;
                  cxtEndGUIDEYval.Text := cxtEndYval.Text;

                  lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                  cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                  SetDebugeWrite('JON01.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                  // 도착지 세부지명
                  if Trim(cxtEndAreaDetail.Hint) <> '' then
                    meoEndArea.Text := cxtEndAreaDetail.Hint
                  else
                    if Trim(lcsEnd3) <> '' then
                    meoEndArea.Text := lcsEnd3;

                  MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                  //고객정보에 도착지 내용이 있는지에대한 구분값
                  if Trim(meoEndArea.Text) = '' then eRet := 0
                  else eRet := 1;
                  if Trim(meoEndArea.Text) = '' then
                  begin
                    eRet := 0;
                  end else
                  begin
                    eRet := 1;
                    GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
//-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX').Text + ':' + lst_Result.item[0].attributes.getNamedItem('DestY').Text, false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                  end;
                end;
              end
            end;
            //-------------------------------------------------------------------------------------------
            //      과거내역을 가지고 취소율, 지사별 설정값에 의한 고객등급 결정
            //-------------------------------------------------------------------------------------------
            Try
              iend := StrToIntDef(lst_Result.Attributes['EndCnt'], 0);
              iCancel := StrToIntDef(lst_Result.Attributes['CancelCnt'], 0);
              iTotal := iEnd + iCancel;
              lblCuCntTotal.Caption := IntToStr(iTotal);
              lblCoCntTotal.Caption := IntToStr(iend);
              if (iTotal) > 0 then
              begin
                fcancelRate := ((iCancel / (iend + iCancel)) * 100);
                lblCuCancelR.Caption := IntToStr(Round(fCancelRate)) + '%';
              end	else
              begin
                lblCuCancelR.Caption := '0%';
              end;
            except
              on e: exception do
              begin
                ls_TxLoad := 'Jon01[과거내역]:' + e.Message;
                Assert(False, E.Message);
                GMessagebox(PChar(ls_TxLoad), CDMSE);
                Screen.Cursor := crDefault;
              end;
            end;

            // 고객등급사용구분[0:자동등급, 1:직접설정]
            iGrade1 := StrToIntDef(lst_Result.Attributes['Grade1'], 5);
            iGrade2 := StrToIntDef(lst_Result.Attributes['Grade2'], 15);

            if iEnd >= iGrade1 then
            begin
              // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
              Proc_SetFormColor_2(0);
            end	else
            if iEnd >= iGrade2 then
            begin
              // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
              Proc_SetFormColor_2(1);
            end else
            begin
              // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
              Proc_SetFormColor_2(2);
            end;

            SetCustLevelSeq(lst_Result.Attributes['LevelCD']);

            // 고객 구분에 따른 색상 표시
            if (iBarIndex = 0) or (iBarIndex = 2) then
              Proc_SetFormColor_3(0)
            else if iBarIndex = 1 then
              Proc_SetFormColor_3(1)
            else if iBarIndex = 3 then
              Proc_SetFormColor_3(3);

            //2013.03.30 khs
            sAppCode        := lst_Result.Attributes['AppCode'];
            sAppLastRegDate := lst_Result.Attributes['AppLastRegDate'];
            sAppLastDelDate := lst_Result.Attributes['AppLastDelDate'];
            sAppLastFinishDate := lst_Result.Attributes['AppLastFinishDate'];
            sAppCuArea      := lst_Result.Attributes['AppCuArea'];
            sAppTermModel   := lst_Result.Attributes['AppGroup'] + '/'
                             + lst_Result.Attributes['AppTermOS'] + '/'
                             + lst_Result.Attributes['AppTermModel'];
            sAppTermOS      := lst_Result.Attributes['AppVersion'];

            if lst_Result.Attributes['AppDelYn'] = 'y' then sAppDelYn := '어플삭제'
                                                       else sAppDelYn := '어플사용';

            if sAppCode = '' then btnCustAppinfo.Enabled := False
                             else btnCustAppinfo.Enabled := True;
            SetCustAppInfo(
                sAppCode
              , sAppLastRegDate
              , sAppLastDelDate
              , sAppLastFinishDate
              , sAppCuArea
              , sAppTermModel
              , sAppTermOS
              , sAppDelYn
            );

            if iBarIndex = 3 then
            begin
              if lst_Result.Attributes['TaxType'] = '1' then
              begin
                lbBubinStateName.Caption := '이용정지';
                lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
                pnlBubinState.Visible := True;
                trmBubinState.Enabled := True;
                ABubinStateIndex := 1;
              end else
              if lst_Result.Attributes['TaxType'] = '2' then
              begin
                lbBubinStateName.Caption := '계약해지';
                lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
                pnlBubinState.Visible := True;
                trmBubinState.Enabled := True;
                ABubinStateIndex := 2;
              end else
              //if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '0' then
              begin
                lbBubinStateName.Caption := '정상이용';
                lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
                pnlBubinState.Visible := False;
                trmBubinState.Enabled := False;
                ABubinStateIndex := 0;
              end;
            end else
            begin
              lbBubinStateName.Caption := '정상이용';
              lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
              pnlBubinState.Visible := False;
              trmBubinState.Enabled := False;
              ABubinStateIndex := 0;
            end;
            //================================= 고객정보 Display End. =====================================
            lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Driver');
            if lst_Result <> Nil then
            begin
              wk_br_Name := lst_Result.Attributes['BrName']
                + '(' + lst_Result.Attributes['BrNo'] + ')';
              FWk_sabun := lst_Result.Attributes['Sabun'];
              wk_Name := lst_Result.Attributes['TermInfo'];
              wk_Name := lst_Result.Attributes['Name'];

              Frm_JON012.sFinishCnt := lst_Result.Attributes['FinishCnt'];
              Frm_JON012.sCancelCnt := lst_Result.Attributes['CancelCnt'];
              Frm_JON012.sPhone_info := lst_Result.Attributes['TermInfo'];

              // 조회기사 사번, 기사지사코드 저장.
              locWkSabun := FWk_sabun; // 기사사번
              locWkBrNo := lst_Result.Attributes['BrNo'];
              // 지사코드
  //  -						cxLblSeaWkSabun.Hint := wk_sabun; // 기사사번
              cxtWorkerNm.Text := wk_Name;
            end;

            Proc_SetFormColor_3(9); // 기사 지정칼라로 바 세팅한다.
            Proc_SetFormColor_2(9);
          except
            on e: exception do
            begin
              ls_TxLoad := 'Jon01[고객 조회오류]:' + e.Message;
              Assert(False, E.Message);
              GMessagebox(PChar(ls_TxLoad), CDMSE);
              Screen.Cursor := crDefault;
            end;
          end;
        end;

        // 상담메모/기사메모 표시
        if ( GS_AUTOMEMO_SHOW ) then BtnViewMemo.Click;

        Frm_JON012.Tag := Self.Tag;
        Frm_JON012.Jon03Tag := Self.Jon03Tag;
        Frm_JON012.cxBtnOldSelect.Tag := 0;
        // 고객 이용내역을 띄워준다.
        Frm_JON012.cxGVeOrderList.DataController.SetRecordCount(0);
        Frm_JON012.cxGVeOrderList.DataController.Filter.Clear;
        Frm_JON012.cxGVeOrderList.DataController.Filter.Active := False;

        lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/AcceptInfo');
        if lst_Result = Nil then Exit;

        iRCnt := StrToIntDef(lst_Result.Attributes['Count'], 0);

        // 2011.03.07 전화2조회 추가
        sTelse      := lst_Result.Attributes['Tel2Count'];
        if sTelse <> '0' then
          GMessagebox('고객전화2에 등록된 오더가 있습니다.',CDMSI);

        nodeList_Result := GetXmlSelectNodeList(rxxml, '/cdms/Service/Data/AcceptInfo/Accept');
        if ( nodeList_Result = Nil ) then Exit;

        if iRcnt > 0 then
        begin // 과거 이용내역을 보여준다.
          sTodayDate := StartDateTime('yyyy-mm-dd hh:nn:ss');
          try
            SetDebugeWrite('Frm_JON012.cxGVeOrderList.BeginUpdate');
            Frm_JON012.cxGVeOrderList.BeginUpdate;
            for iCnt := 1 to iRcnt do
            begin
              Application.ProcessMessages;
              if nodeList_Result.Get(iCnt - 1).Attributes['InTime'] = '' then Continue;

              sCurMileage := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['CurMileage'], 0.0));
              sMileage    := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0));
              iBidx := Frm_JON012.cxGVeOrderList.DataController.AppendRecord;

              for J := 0 to 42 do
              begin
                case J of
                  2:
                    begin
                      if nodeList_Result.Get(iCnt - 1).Attributes['Status'] = 'gi' then
                      begin
                        DataValue := '경품지급';
                      end else
                      if nodeList_Result.Get(iCnt - 1).Attributes['Status'] = 'cs' then
                      begin
                        DataValue := '가격수정';
                      end else
                      if nodeList_Result.Get(iCnt - 1).Attributes['Status'] = 'bi' then
                      begin
                        DataValue := '보정입력';
                      end else
                      begin
                        DataValue := nodeList_Result.Get(iCnt - 1).Attributes['Area5'];
                      end;
                    end;
                  3:
                    begin
                      if nodeList_Result.Get(iCnt - 1).Attributes['Status'] = 'gi' then
                      begin
                        DataValue := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0)) + '원 경품지급';
                      end else
                      if nodeList_Result.Get(iCnt - 1).Attributes['Status'] = 'cs' then
                      begin
                        DataValue := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0)) + '원 가격수정';
                      end else
                      if nodeList_Result.Get(iCnt - 1).Attributes['Status'] = 'bi' then
                      begin
                        DataValue := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0)) + '원 보정입력';
                      end else
                      begin
                        DataValue := nodeList_Result.Get(iCnt - 1).Attributes['EdArea5'];
                      end;
                    end;
                  5:
                    begin
                      DataValue := FormatFloat('#,##0', StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Charge'], 0.0));
                    end;
                  6:
                    begin
                      if StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0) < 0 then
                      begin
                        DataValue := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0))
                                               + '(마일리지사용) (잔액 : ' + sCurMileage + ')';
                      end else
                      if StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0) > 0 then
                      begin
                        DataValue := '+'+formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0))
                                               + ' (잔액 : ' + sCurMileage + ')';
                      end	else
                      if StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0) = 0 then
                      begin
                        DataValue := FormatFloat('#,##0', StrToFloatDef(nodeList_Result.Get(iCnt - 1).Attributes['Mileage'], 0.0));
                      end;
                    end;
                  31:
                    DataValue := IntToStr(iBidx+1);
                else
                  begin
                    try
                      DataValue := nodeList_Result.Get(iCnt - 1).Attributes[OrderTitle[J].TagName]
                    except
                      DataValue := '';
                    end;
                  end;
                end;

                if OrderTitle[J].FieldName = '접수일시' then
                begin
                  if (not FHasTodayData) and (Copy(nodeList_Result.Get(iCnt - 1).Attributes[OrderTitle[J].TagName], 1, 19) >= StartDateTime('yyyy-mm-dd hh:nn:ss')) then
                    FHasTodayData := True;
                end;

                _AddData(Frm_JON012.cxGVeOrderList, iBidx, OrderTitle[J].FieldName, DataValue);
              end;

              // 당일오더 건에 대해선 칼라를 변경하여 구분이 될수 있게 해준다.
              if iCnt = 1 then
              begin
                sInDate := nodeList_Result.Get(iCnt - 1).Attributes['InDate']; // 접수일시
                sInDate := StringReplace(sInDate, '/', '-', [rfReplaceAll]);
                sInDate := copy(sInDate, 1, 19);
                if sInDate >= sTodayDate then
                begin
                  SetCustControlColor(True);
                  // 고객정보 화면의 라벨칼라를 변경해준다.
                end else
                begin
                  SetCustControlColor(False);
                end;
              end;

              if iCnt > 199 then Break;
            end;
            // 조회 했는지의 여부를 체크한다.
            Frm_JON012.cxGVeOrderList.EndUpdate;
            SetDebugeWrite('JON012.cxGVeOrderList.EndUpdate');
//              Application.ProcessMessages;
          except on e: exception do
            begin
              Frm_JON012.cxGVeOrderList.CancelUpdate;
              SetDebugeWrite('JON012.cxGVeOrderList.CancelUpdate');
              sTemp := 'JON01[Proc_KeyNumberInsert] CancelUpdate :' + e.Message;
              Log(sTemp, LOGDATAPATHFILE);
              Assert(False, sTemp);
            end;
          end;
        end;

        try
          Proc_CustOrderListView;
          if bAppOrder then
          begin
            btnCmdExitClick(btnCmdExit); //앱접수일경우 접수창 자동종료
            Frm_Main.AcceptFromCreate(gAppSlip, gAppInDate, '앱접수', Jon03Tag);
            gAppSlip := ''; gAppInDate := '';
            exit;
          end;
          Frm_JON012.SetStatesViewCheck;
        except
          on e: exception do
          begin
            Assert(False, E.Message);
          end;
        end;

        try
          Proc_WorkListView(rxxml);
        except
          on e: exception do
          begin
            Assert(False, E.Message);
          end;
        end;

        Frm_JON012.Show;

        cxCallTitle.Caption := cxCallTitle.Hint + strtocall(gsCuTelHint);

        for i := 0 to 19 do
        begin
          if Frm_Main.JON01MNG[i].Tag = Self.Tag then
          begin
            Frm_Main.JON01MNG[i].Caption := cxCallTitle.Caption;
            Break;
          end;
        end;

        // [hjf] xml을 접수 목록으로 전달하고 접수목록에서 해당 xml로 접속 목록을 표시
      except
        on e: exception do
        begin
          sTemp := 'JON01[Proc_KeyNumberInsert]1:' + e.Message;
          Log(sTemp, LOGDATAPATHFILE);
          Assert(False, sTemp);
        end;
      end;
    end else
    begin
      GMessagebox(MSG012 + CRLF + ls_Msg_Err, CDMSE);
    end;

    try
      // CID 조회 일때는 발신전화없음 멘트 감춤..
      if (locCustHP_MainNum_Search = '') and (cxLblCIDUseFlg.Hint <> 'CID') then
      begin
        cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
        cxtCallTelNum.Text := cxtCuTel.Text; // 발신전화번호
        locsCuTel := cxtCuTel.Text;
      end	else
      begin
        locsCuTel := cxtCallTelNum.Text;
      end;

      cxBtnCuUpdate.Enabled := True;
      btnMileOut.Enabled := True;

      // 지사변경 제한.[이유:고객조회 후 지사변경시 조회한 고객정보 일부유실 경고메시지 띄우기 위함임]
//	  		cboBranch.Properties.ReadOnly := True;   //콜링 후 지사대표번호 변경 가능하게 수정 .팀장님 지시사항 20160715 KHS

      if lcsCu_seq <> '' then
      begin

      end	else
      begin
        // 존재 : $0070FEF3, 미존재 : $00FAEDE2
        if (cxLblCIDUseFlg.Hint = 'CID') and (locWkSabun = '') then
        begin // CID 조회인지 설정을 한다.
          tmMent.Enabled := True;
          locKNum := Proc_MainKeyNumberSearch; // 대표번호 추출.
          lblNewCustYN.Caption := sBr_Name + ' / ' + locKNum + ' 의' + '-->>신규 고객<<-- 입니다.';
          pnlNewCustYN.Visible := True; // 신규고객여부의 정보를 보여준다.
        end;
      end;

      Frm_JON012.cxlbSlip.Caption := cxtJoinNum.Text; // 오더접수번호
      Frm_JON012.cxlbCustTel.Caption := locsCuTel; // 고객전화번호 읽기.
      Frm_JON012.cxlbKeyNum.Caption := Proc_MainKeyNumberSearch; // 대표번호 읽기.

      if cxLblCIDUseFlg.Hint = 'CID' then
        // 프로그램 최소화시에 접수창 뜨면 POI검색창이 앞으로 표시 안됨
        SetWindowPos(Frm_JON30.handle, HWND_TOPMOST, Self.Left, Self.Top, Self.Width, Self.Height, 0);

      pnlJonMain.Enabled := True;   // 접수창 잠긴걸 해제함. 2011-11-08.

      if ( GT_OCX ='SSIT' ) then //CID내역 조회실행
      begin
        if frm_JON54.cxPageControl1.Pages[2].TabVisible then
          frm_JON54.btnCallingList.Click;
      end;

      if Self.Visible = True then
      begin
        if meoStartArea.CanFocus then	meoStartArea.SetFocus;
      end;

      try
        if locAutoCallYn <> '' then
         if Assigned(Frm_Main.Frm_JON020[Self.Tag]) And
           ( Frm_Main.JON020MNG[Self.Tag].CreateYN ) then
             Frm_Main.Frm_JON020[Self.Tag].Show;
      except

      end;
    except
      on e: exception do
      begin
        Assert(False, E.Message);
      end;
    end;
	except
		on e: exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

// 지사별 멘트 구하기..
function TFrm_JON01.Func_brtel_memo(sBrNo, sKeyNum: string): string;
var
  i: Integer;
  wMemo, wResult: String;
begin
  SetDebugeWrite('JON01.Func_brtel_memo');
  wResult := '';
  i := 0;
  // 0지사코드, 1지사명, 2대표번호, 3기본요금, 4콜센터코드, 5본사코드, 6멘트, 7상황실번호
  try
    //for i := 0 to 5000 do begin
    while True do
    begin
      if GSL_HD_LIST[i, 0] = '' then
        break;
      if (GSL_HD_LIST[i, 0] = sBrNo) and (GSL_HD_LIST[i, 2] = sKeyNum) then
      begin
        if GSL_HD_LIST[i, 6] <> '' then
        begin
          wMemo := GSL_HD_LIST[i, 6];
{          if Length(wMemo) > 15 then
            wResult := Copy(wMemo, 1, 15) + #13#10 + Copy(wMemo, 16, Length(wMemo))
          else}
            wResult := wMemo;
        end
        else
          wResult := '';
        Break;
      end;
      Inc(i);
    end;
  except
  end;
  Result := wResult;
end;

function TFrm_JON01.func_CashPayMileSave_YN: Boolean;
var sTmp : string;
	iTmp : integer;
begin
	SetDebugeWrite('JON01.func_CashPayMileSave_YN');
	try
		Result := False;
		sTmp := Proc_BRNOSearch;
		if sTmp <> '' then 
		begin
			iTmp := scb_BranchCode.IndexOf(sTmp);
			if scb_CashPayMileSave[iTmp] = 'y' then Result := True else Result := False;
		end;
	except
		Result := False;
	end;
end;

// 고객전화번호 마킹처리.. (지호 2008-08-19)
function TFrm_JON01.Func_Cust_Tel(sCall, sBrch, sBrch2: string; ATodayOrder: Boolean): string;
var
  iRow, iLevel: Integer;
begin
  SetDebugeWrite('JON01.Func_Cust_Tel');
  try
    iLevel := StrToIntDef(GT_USERIF.LV, 10);
    iRow := scb_BranchCode.IndexOf(sBrch);

    Result := '***-****-****';

    if iRow < 0 then
      Exit;

    if TCK_USER_PER.JON_CustTelOpen = '1' then
    begin // 고객번호 자사콜 오픈
      case iLevel of
        10:
          begin
            if GT_USERIF.BR = sBrch2 then
              Result := strtocall(sCall);
          end;
        40:
          begin
            if GT_USERIF.BR = sBrch then
              Result := strtocall(sCall);
          end;
        60:
          begin
            Result := strtocall(sCall)
          end;
      end;
    end else
    if TCK_USER_PER.JON_CustTelDayOpen = '1' then  // 고객번호 자사콜 당일만 오픈
    begin
      case iLevel of
        10:
          begin
            if GT_USERIF.BR = sBrch2 then
              Result := IfThen(ATodayOrder, strtocall(sCall), '***-****-****');
          end;
        40:
          begin
            if GT_USERIF.BR = sBrch then
              Result := IfThen(ATodayOrder, strtocall(sCall), '***-****-****');
          end;
        60:
          begin
            Result := IfThen(ATodayOrder, strtocall(sCall), '***-****-****');
          end;
      end;
    end;

    if (not ATodayOrder) and (TCK_USER_PER.JON_CustMaking2 = '1') then
      Result := Copy(Result, 1, Length(Result) - 2) + '**';
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01.Func_Cust_Tel(sCall, sBrch, sBrch2, sDatetime: string): string;
var
  StartDate: string;
begin
  sDatetime := StringReplace(sDatetime, ' ', '', [rfReplaceAll]);
  StartDate := StartDateTime('yyyy-mm-dd hh:nn:ss');
  StartDate := StringReplace(StartDate, ' ', '', [rfReplaceAll]);

  Result:= Func_Cust_Tel(sCall, sBrch, sBrch2, sDatetime >= StartDate);
end;

function TFrm_JON01.func_ecukrCheck: Boolean;
var i : Integer;
begin
	result := False;
	try
		for i := 0 to ComponentCount - 1 do
		begin
			if Components[i] is TcxTextEdit then
			begin
				if not func_EucKr_Check((Components[i] as TcxTextEdit), 0) then
        begin
          Result := True;
          Break;
        end;
			end else
			if Components[i] is TcxMemo then
			begin
				if not func_EucKr_Check((Components[i] as TcxMemo), 0) then
        begin
          Result := True;
          Break;
        end;
			end;
		end;
	except
	end;
end;

procedure TFrm_JON01.Proc_WorkListView(rxxml: String);
var slTmp : TStringList;
	sTmp : string;
begin
	SetDebugeWrite('Frm_JON01.Proc_WorkListView');
  try
    Frm_JON012.Tag := Self.Tag;
    Frm_JON012.Jon03Tag := Self.Jon03Tag;

		Frm_JON012.Proc_Initialization;
		Frm_JON012.lb_KDWorker.Caption := '';
		Frm_JON012.cxGridKDDrive.DataController.SetRecordCount(0);

		if sCust_Gubun = '1' then                         //기사
		begin
			Frm_JON012.cxPageControl1.Pages[0].TabVisible := False;
			Frm_JON012.cxPageControl1.Pages[1].TabVisible := False;

			Frm_JON012.BtnSheet1.Visible := False;
			Frm_JON012.BtnSheet2.Visible := True;

			Frm_JON012.cxPageControl1.ActivePageIndex := 1;
			Frm_JON012.BtnSheet2.Down := True;
			Frm_JON012.sActivePage := 1;
			//////////////////////////기사정보탭 조회//////////////////////////////
			Frm_JON012.sWk_sabun32 := FWk_sabun;
			//기사 상세 정보 초기화
			Frm_JON012.Proc_Initialization;
			//기사 상세 정보 표시
			Frm_JON012.Proc_WorkerInfo;
			//기사 당일 오더내역 조회프로시저
			Frm_JON012.Proc_WorkerOrderToday(FWk_sabun, '', locsCuTel);
			// 기사 업무 현황 조회
			Frm_JON012.btn5.Click;
			Frm_JON012.lbl8.Visible := False;
			Frm_JON012.cxBtnOldSelect.Visible := False;
			Frm_JON012.cxBtnColorSet.Visible := False;
			Frm_JON012.cbStatesView.Visible := False;
			Frm_JON012.cxBtnFixPos.Visible := False;
			Frm_JON012.Pnl_Title.Color := $00D1E7E9;
			Frm_JON012.cxBtnAccept.Visible := ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' );
			Frm_JON012.lb_wkname_title.Visible := True;

			Frm_JON012.pnlCallDrive.Visible := True;
			Frm_JON012.pnl_CallTOT.Visible := True;
		end else
		if sCust_Gubun = '2' then                        //고객
			begin
			Frm_JON012.cxPageControl1.Pages[0].TabVisible := False;
			Frm_JON012.cxPageControl1.Pages[1].TabVisible := False;

			Frm_JON012.BtnSheet1.Visible := True;
			Frm_JON012.BtnSheet2.Visible := False;

			Frm_JON012.cxPageControl1.ActivePageIndex := 0;
			Frm_JON012.BtnSheet1.Down := True;
			Frm_JON012.sActivePage := 0;
			Frm_JON012.lbl8.Visible := True;
			Frm_JON012.cxBtnOldSelect.Visible := True;
			Frm_JON012.cxBtnColorSet.Visible := True;
			Frm_JON012.cbStatesView.Visible := True;
			Frm_JON012.cxBtnFixPos.Visible := True;
			Frm_JON012.Pnl_Title.Color := $00D9E6D2;
			Frm_JON012.cxBtnAccept.Visible := False;
			Frm_JON012.lb_wkname_title.Visible := False;

			Frm_JON012.pnlCallDrive.Visible := False;
			Frm_JON012.pnl_CallTOT.Visible := False;
		end else
    if ( sCust_Gubun = '0' ) And ( Not FHasTodayData ) then                        //기사+고객
    begin
      Frm_JON012.cxPageControl1.Pages[0].TabVisible := False;
      Frm_JON012.cxPageControl1.Pages[1].TabVisible := False;

      Frm_JON012.BtnSheet1.Visible := True;
			Frm_JON012.BtnSheet2.Visible := True;

      Frm_JON012.cxPageControl1.ActivePageIndex := 1;
      Frm_JON012.BtnSheet2.Down := True;
      Frm_JON012.sActivePage := 1;
      //////////////////////////기사정보탭 조회//////////////////////////////
			Frm_JON012.sWk_sabun32 := FWk_sabun;
			//기사 상세 정보 초기화
      Frm_JON012.Proc_Initialization;
			//기사 상세 정보 표시
			Frm_JON012.Proc_WorkerInfo;
      //기사 당일 오더내역 조회프로시저
			Frm_JON012.Proc_WorkerOrderToday(FWk_sabun, '', locsCuTel);
			// 기사 업무 현황 조회
      Frm_JON012.btn5.Click;
      Frm_JON012.lbl8.Visible := False;
      Frm_JON012.cxBtnOldSelect.Visible := False;
      Frm_JON012.cxBtnColorSet.Visible := False;
      Frm_JON012.cbStatesView.Visible := False;
			Frm_JON012.cxBtnFixPos.Visible := False;
      Frm_JON012.Pnl_Title.Color := $00D1E7E9;
			Frm_JON012.cxBtnAccept.Visible := ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' );
			Frm_JON012.lb_wkname_title.Visible := True;

			Frm_JON012.pnlCallDrive.Visible := True;
			Frm_JON012.pnl_CallTOT.Visible := True;
		end;

		Frm_JON012.SetcxPageControl;
		if FHasTodayData then
    begin
      if Frm_Main.Frm_JON03[Jon03Tag].cb_All.Down then Frm_Main.Frm_JON03[Jon03Tag].cb_All.Hint := 'Y'
                                                     else Frm_Main.Frm_JON03[Jon03Tag].cb_All.Hint := 'N';

			Frm_Main.Frm_JON03[Jon03Tag].DisplayTodayOrders(rxxml);          //당일오더   TodayData

			if sCust_Gubun = '0' then                        //기사+고객   당일접수내용있을경우 2013.05.28 KHS
			begin
				Frm_JON012.cxPageControl1.Pages[0].TabVisible := False;
				Frm_JON012.cxPageControl1.Pages[1].TabVisible := False;

				Frm_JON012.BtnSheet1.Visible := True;
				Frm_JON012.BtnSheet2.Visible := True;

				Frm_JON012.pnlCallDrive.Visible := True;
				Frm_JON012.pnl_CallTOT.Visible := True;

				Frm_JON012.cxPageControl1.ActivePageIndex := 0;
				Frm_JON012.BtnSheet1.Down := True;
				Frm_JON012.sActivePage := 0;
				Frm_JON012.lbl8.Visible := True;
        Frm_JON012.cxBtnOldSelect.Visible := True;
        Frm_JON012.cxBtnColorSet.Visible := True;
        Frm_JON012.cbStatesView.Visible := True;
        Frm_JON012.cxBtnFixPos.Visible := True;
        Frm_JON012.Pnl_Title.Color := $00D9E6D2;
        Frm_JON012.cxBtnAccept.Visible := False;
        Frm_JON012.lb_wkname_title.Visible := False;
				//////////////////////////기사정보탭 조회//////////////////////////////
				Frm_JON012.sWk_sabun32 := FWk_sabun;
				//기사 상세 정보 초기화
				Frm_JON012.Proc_Initialization;
				//기사 상세 정보 표시
				Frm_JON012.Proc_WorkerInfo;
				//기사 당일 오더내역 조회프로시저
				Frm_JON012.Proc_WorkerOrderToday(FWk_sabun, '', locsCuTel);
				// 기사 업무 현황 조회
				Frm_JON012.btn5.Click;
			end;
		end else
		begin
			if sCust_Gubun = '1' then                         //기사
			begin
				Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(8, FWk_sabun); // 기사사번으로 조회     [기사전화일때,,]
			end else
{			if sCust_Gubun = '2' then                         //기사
			begin
				Frm_Main.Frm_JON03[Jon03Tag].DisplayTodayOrders(rxxml);          //당일오더   TodayData
			end else }
			if sCust_Gubun = '0' then                         //기사
			begin
				Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(9, FWk_sabun); // 기사사번으로 조회     [기사전화일때,,]
			end;
		end;

		if (gsKDWkHp <> '')  and ((GS_PRJ_AREA = 'S') or (GT_KAKAOUse)) then //수도권만 사용 또는 GT_KAKAOUse True 20190328KHS
		begin
			//기사 당일 오더내역 조회프로시저
			Frm_JON012.cxPageControl1.Pages[0].TabVisible := False;
			Frm_JON012.cxPageControl1.Pages[1].TabVisible := False;

			Frm_JON012.BtnSheet1.Visible := False;
			Frm_JON012.BtnSheet2.Visible := True;

			Frm_JON012.cxPageControl1.ActivePageIndex := 1;
			Frm_JON012.BtnSheet2.Down := True;
			Frm_JON012.sActivePage := 1;

			Frm_JON012.lbl8.Visible := False;
			Frm_JON012.cxBtnOldSelect.Visible := False;
			Frm_JON012.cxBtnColorSet.Visible := False;
			Frm_JON012.cbStatesView.Visible := False;
			Frm_JON012.cxBtnFixPos.Visible := False;
			Frm_JON012.Pnl_Title.Color := $00D1E7E9;
			Frm_JON012.cxBtnAccept.Visible := ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' );
			Frm_JON012.lb_wkname_title.Visible := True;

			slTmp := TStringList.Create;
			Try

				slTmp.Delimiter := '|';
				slTmp.DelimitedText := gsKDWkHp;	

				Frm_JON012.Proc_WorkerOrderToday('M00001', '', slTmp[2]);

				if slTmp[0] = 'y' then sTmp := '단순보험공유기사' else sTmp := '공유기사아님';
				Frm_JON012.lb_KDWorker.Caption := '기사정보조회 [' + sTmp + '] ' + slTmp[1] + ', ' + StrToCall(slTmp[2]) + ', ' + slTmp[3] + ', ' + slTmp[4]; 

			Finally
				slTmp.Free;
			End;
		end;
		Proc_Jon012Show;
  Except
    on e: exception do
    begin
			Log('Proc_WorkListView Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'Proc_WorkListView Error :' + E.Message);
    end;
  end;
end;

// 고객 이용내역을 띄워준다.
procedure TFrm_JON01.Proc_Jon012Show;
Var OrgWndProc : Integer;
   ln_Env : TIniFile;
	slTmp : TStringList;
	sTmp : string;
begin
	SetDebugeWrite('Frm_JON01.Proc_Jon012Show');
  try
    try
      if GI_JON_WKCALLPOPUP >= 0 then
      begin
        Frm_Main.Frm_JON01[GI_JON_WKCALLPOPUP].btnCmdExit.Click;
      end;
		except

    end;

    ln_Env := TIniFile.Create(ENVPATHFILE);
    try
    	Frm_JON012.iOpen_Gubun := 0;
      Frm_JON012.Hint := Self.Caption;
      Frm_JON012.Tag := Self.Tag;
      Frm_JON012.bChkTime := True;
      Frm_JON012.Jon03Tag := Self.Jon03Tag;
			Frm_JON012.cxPageControl1.Pages[0].TabVisible := False;
      Frm_JON012.cxPageControl1.Pages[1].TabVisible := False;
			if (sCust_Gubun = '2') or (sCust_Gubun = '') then
      begin
				Frm_JON012.FResize := True;
				Frm_JON012.Width  := StrToIntDef(ln_Env.ReadString('UserHisForm', 'Width', '562'), 562);
				Frm_JON012.FResize := True;
        Frm_JON012.Height := StrToIntDef(ln_Env.ReadString('UserHisForm', 'Height', '277'), 277);
        Frm_JON012.BtnSheet1.Visible := True;
				Frm_JON012.BtnSheet2.Visible := False;

				Frm_JON012.cxPageControl1.ActivePageIndex := 0;
        Frm_JON012.BtnSheet1.Down := True;
        Frm_JON012.sActivePage := 0;
        Frm_JON012.lbl8.Visible := True;
        Frm_JON012.cxBtnOldSelect.Visible := True;
        Frm_JON012.cxBtnColorSet.Visible := True;
        Frm_JON012.cbStatesView.Visible := True;
        Frm_JON012.cxBtnFixPos.Visible := True;
        Frm_JON012.Pnl_Title.Color := $00D9E6D2;
        Frm_JON012.cxBtnAccept.Visible := False;
				Frm_JON012.lb_wkname_title.Visible := False;
        GI_JON_WKCALLPOPUP := -1;
			end else
			begin
				Frm_JON012.FResize := True;
        Frm_JON012.Width  := StrToIntDef(ln_Env.ReadString('UserHisForm_WK', 'Width_WK', '700'), 700);
        Frm_JON012.FResize := True;
				Frm_JON012.Height := StrToIntDef(ln_Env.ReadString('UserHisForm_WK', 'Height_WK', '476'), 476);

        if sCust_Gubun = '0' then
        begin
					Frm_JON012.BtnSheet1.Visible := True;
					Frm_JON012.BtnSheet2.Visible := True;
        end else
        if sCust_Gubun = '1' then
        begin
          Frm_JON012.BtnSheet1.Visible := False;
					Frm_JON012.BtnSheet2.Visible := True;
        end;
				Frm_JON012.cxPageControl1.ActivePageIndex := 1;
				Frm_JON012.BtnSheet2.Down := True;
				Frm_JON012.sActivePage := 1;
        Frm_JON012.lbl8.Visible := False;
        Frm_JON012.cxBtnOldSelect.Visible := False;
        Frm_JON012.cxBtnColorSet.Visible := False;
        Frm_JON012.cbStatesView.Visible := False;
        Frm_JON012.cxBtnFixPos.Visible := False;
        Frm_JON012.Pnl_Title.Color := $00D1E7E9;
        Frm_JON012.cxBtnAccept.Visible := ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' );
				Frm_JON012.lb_wkname_title.Visible := True;

				if ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' ) then
        begin
					// 기사가 연속으로 전화가 왔을경우 기존접수창 Clear를 위해 변수 저장
					GI_JON_WKCALLPOPUP := Self.Tag;
          Hide_Panel(lcsActiveEdit,1);
          Self.Hide;
        end else
					GI_JON_WKCALLPOPUP := -1;
			end;
			Frm_JON012.pnlKDGrid.visible := False;
			if (gsKDWkHp <> '')  and ((GS_PRJ_AREA = 'S') or (GT_KAKAOUse)) then //수도권만 사용 또는 GT_KAKAOUse True 20190328KHS
			begin

				if Frm_JON012.pnlCallDrive.Visible then 
				begin

					Frm_JON012.pnlKDGrid.Align := alBottom;
					Frm_JON012.splAccept.visible := True;
				end else 
				begin

					slTmp := TStringList.Create;
					Try

						slTmp.Delimiter := '|';
						slTmp.DelimitedText := gsKDWkHp;	

						if slTmp[0] = 'y' then sTmp := '단순보험공유기사' else sTmp := '공유기사아님';
						Frm_JON012.Memo_WorkerInfo.Lines.Clear;
						Frm_JON012.Memo_WorkerInfo.Lines.Add(sTmp);
						Frm_JON012.Memo_WorkerInfo.Lines.Add('기사명 : ' + slTmp[1]);
						Frm_JON012.Memo_WorkerInfo.Lines.Add('단말기 : ' + StrToCall(slTmp[2]));
						Frm_JON012.Memo_WorkerInfo.Lines.Add('보험사 : ' + slTmp[3]);
						Frm_JON012.Memo_WorkerInfo.Lines.Add('증권번호 : ' + slTmp[4]);

						Frm_JON012.Memo_WorkerInfo.SelStart := 0;
						Frm_JON012.Memo_WorkerInfo.SelLength := Pos('증권번호', Frm_JON012.Memo_WorkerInfo.Text) + 20;
						Frm_JON012.Memo_WorkerInfo.SelAttributes.Color := clBlue;
						Frm_JON012.Memo_WorkerInfo.SelAttributes.Style := [fsBold];

						Frm_JON012.pnlKDGrid.Align := alClient;
						Frm_JON012.splAccept.visible := False;

						Frm_JON012.btn_KDCall.Description := slTmp[2];

					Finally
						slTmp.Free;
					End;
				end;
				
				if (Frm_JON012.cxGridKDDrive.DataController.RecordCount > 0) and ((GS_PRJ_AREA = 'S') or (GT_KAKAOUse)) then//수도권만 적용
				begin
					Frm_JON012.pnlKDGrid.visible := True;
					Frm_JON012.pnlKDGrid.height := (Frm_JON012.cxGridKDDrive.DataController.RecordCount * 20) + 100;	
				end else Frm_JON012.pnlKDGrid.visible := False;

				Frm_JON012.FResize := True;
				Frm_JON012.Width  := StrToIntDef(ln_Env.ReadString('UserHisForm_WK', 'Width_WK', '700'), 700);
				Frm_JON012.FResize := True;
				Frm_JON012.Height := StrToIntDef(ln_Env.ReadString('UserHisForm_WK', 'Height_WK', '476'), 476);

				Frm_JON012.BtnSheet2.Visible := True;

				Frm_JON012.cxPageControl1.ActivePageIndex := 1;
				Frm_JON012.BtnSheet2.Down := True;
				Frm_JON012.sActivePage := 1;
				Frm_JON012.lbl8.Visible := False;
        Frm_JON012.cxBtnOldSelect.Visible := False;
        Frm_JON012.cxBtnColorSet.Visible := False;
        Frm_JON012.cbStatesView.Visible := False;
        Frm_JON012.cxBtnFixPos.Visible := False;
        Frm_JON012.Pnl_Title.Color := $00D1E7E9;
        Frm_JON012.cxBtnAccept.Visible := ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' );
				Frm_JON012.lb_wkname_title.Visible := True;

				if ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' ) then
        begin
          // 기사가 연속으로 전화가 왔을경우 기존접수창 Clear를 위해 변수 저장
          GI_JON_WKCALLPOPUP := Self.Tag;
          Hide_Panel(lcsActiveEdit,1);
          Self.Hide;
        end else
					GI_JON_WKCALLPOPUP := -1;
			end;
			// 현재 할당된 폼 배열값을 저장.(현재 조회한 고객 데이터가 있는지 여부를 체킹)
      Frm_JON012.SetcxPageControl;
      Frm_JON012.pJON012Dock.bUnDock := pJON01Dock.bUNDock;
      Frm_JON012.pJON012Dock.HDNO    := pJON01Dock.HDNO;
      Frm_JON012.pJON012Dock.BrNo    := pJON01Dock.BrNo;
      Frm_JON012.pJON012Dock.BrName  := pJON01Dock.BrName;
      Frm_JON012.pJON012Dock.Gubun   := pJON01Dock.Gubun;
      Frm_JON012.pJON012Dock.Idx     := pJON01Dock.Idx;

      Frm_JON012.cxLblActive.Visible := False;

      Frm_JON012.Show;
    finally
			FreeAndNil(ln_Env);
    end;
  Except
    on e: exception do
    begin
      Log('Proc_Jon012Show Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_Jon012Show Error :' + E.Message);
    end;
  end;
end;

// 받아온 경유지 정보를 배열에 저장한다.
procedure TFrm_JON01.proc_ViaInfo_insert(rxxml: String);
var
  nodeList_Result : IXMLNodeList;
  ls_Rcrd: TStringList;
  ls_Msg_Err: string;
  i, iFidx: Integer;
begin
  SetDebugeWrite('JON01.proc_ViaInfo_insert');
  try
    iFidx := Self.Tag; // 폼의 인덱스를 가져온다.

    ls_Msg_Err := GetXmlErrorCode(rxxml);
    if ('0000' = ls_Msg_Err) then
    begin
      GT_PASS_INFO[iFidx][0].AREA1 := '';
      GT_PASS_INFO[iFidx][0].AREA2 := '';
      GT_PASS_INFO[iFidx][0].AREA3 := '';
      GT_PASS_INFO[iFidx][0].AREA4 := '';
      GT_PASS_INFO[iFidx][0].AREA5 := '';
      GT_PASS_INFO[iFidx][0].DOCID := '';
      GT_PASS_INFO[iFidx][0].CELLS := '';
      GT_PASS_INFO[iFidx][0].SWORD := '';
      GT_PASS_INFO[iFidx][0].MAP_X := '';
      GT_PASS_INFO[iFidx][0].MAP_Y := '';

      nodeList_Result := GetXmlSelectNodeList(rxxml, '/cdms/Service/Data/Result');
      if ( nodeList_Result = Nil ) Or ( nodeList_Result.Count = 0 ) then Exit;

      ls_Rcrd := TStringList.Create;
      try
        for i := 0 to nodeList_Result.Count - 1 do
        begin
          if Trim(nodeList_Result.Get(i).Attributes['Value']) = '' then Continue;

          GetTextSeperationEx('│', nodeList_Result.Get(i).Attributes['Value'], ls_Rcrd);
          GT_PASS_INFO[iFidx][i].AREA1 := ls_Rcrd[1];
          GT_PASS_INFO[iFidx][i].AREA2 := ls_Rcrd[2];
          GT_PASS_INFO[iFidx][i].AREA3 := ls_Rcrd[3];
          GT_PASS_INFO[iFidx][i].AREA4 := ls_Rcrd[4];
          GT_PASS_INFO[iFidx][i].AREA5 := ls_Rcrd[5];
          GT_PASS_INFO[iFidx][i].MAP_X := ls_Rcrd[6];
          GT_PASS_INFO[iFidx][i].MAP_Y := ls_Rcrd[7];
        end;
      finally
        FreeAndNil(ls_Rcrd);
      end;
    end else
    begin
      GMessagebox(MSG012 + CRLF + ls_Msg_Err, CDMSE);
    end;
  except
  end;
end;

// 접수등록 후 결과를 처리 한다.
procedure TFrm_JON01.Proc_SaveReturn(ss_RxXml: String);
var
	ls_Msg_Err: string;
  iFidx, j: integer;
begin
  SetDebugeWrite('JON01.Proc_SaveReturn');

    ls_Msg_Err := GetXmlErrorCode(ss_RxXml);
    if ('0000' = ls_Msg_Err) then
    begin
      try
        if (btnCmdJoinCopy.Hint <> 'JOINCOPY') and (btnCmdWaitCopy.Hint <> 'JOINCOPY') then
        begin // 접수후 복사 기능 설정.
          iFidx := Self.Tag;
          j := 0;
	  			for j := 0 to 4 do
          begin
	  				GT_PASS_INFO[iFidx][j].AREA1 := '';
            GT_PASS_INFO[iFidx][j].AREA2 := '';
            GT_PASS_INFO[iFidx][j].AREA3 := '';
            GT_PASS_INFO[iFidx][j].AREA4 := '';
            GT_PASS_INFO[iFidx][j].AREA5 := '';
            GT_PASS_INFO[iFidx][j].DOCID := '';
            GT_PASS_INFO[iFidx][j].CELLS := '';
            GT_PASS_INFO[iFidx][j].SWORD := '';
            GT_PASS_INFO[iFidx][j].MAP_X := '';
            GT_PASS_INFO[iFidx][j].MAP_Y := '';
          end;
        end;

				if lg_Save = '1' then
				begin
          // 오더정보 수정모드 설정을 한다.
					if (btnCmdExit.Hint = 'UPDATE_MODE') and ((Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 )) then
						Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(1, cxtJoinNum.Text)
					else
					begin
						//고객번호로 접수현황 조회 (2008.08.01 KJH)
						cxtCallTelNum.Text := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
						Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(5, cxtCallTelNum.Text);
					end;
				end;

      except
				on e: exception do
        begin
					Log('Proc_SaveReturn Error 0 :' + E.Message, LOGDATAPATHFILE);
					Assert(False, 'Proc_SaveReturn Error 0 :' + E.Message);
        end;
      end;

      try
				if (btnCmdJoinCopy.Hint <> 'JOINCOPY') and (btnCmdWaitCopy.Hint <> 'JOINCOPY') then
        begin // 접수후 복사 기능 설정.
          // 화면을 닫는다.
					tmFormClose.Tag := 77; // 화면 닫기 설정값.
					loc_TmClose := 'CLOSE'; // 화면 종료 타이머 변수. CDS. 080830.
					tmFormClose.Enabled := True; // 화면을 닫는다.
				end else
        begin
          lcsCu_seq := GetXmlErrorMsg(ss_RxXml);   // 20130727  LYB  대기후복사/접수후복사 로 인한 신규고객 고객번호 적용
					if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
					begin
						if btnCmdExit.Hint = 'UPDATE_MODE' then
            begin // 오더정보 수정모드 설정을 한다.
							if loc_bUpdateLock = True then
              begin // 수정화면 Lock 설정 여부.[True:설정, False:미설정]
								//Proc_AcceptLock('2');          // 해당오더의 Lock을 해제 한다.
								tmFormClose.Tag := 88; // 화면 닫기 설정값.
								loc_TmClose := 'UNLOCK';
								// 화면 종료 타이머 변수. CDS. 080830.
								tmFormClose.Enabled := True; // LOCK을 해제한다.
							end;
            end;
					end else
					if (btnCmdJoinCopy.Hint = 'JOINCOPY') then
					begin
						Frm_JON012.Proc_JoinCopyCustHis; //접수후복사시 과거이용내역 갱신 20191105KHS 신성현차장요청
          end;
        end;
      except
        on e: exception do
        begin
          Log('Proc_SaveReturn Error 1 :' + E.Message, LOGDATAPATHFILE);
          Assert(False, 'Proc_SaveReturn Error 1 :' + E.Message);
        end;
      end;
    end else
    begin
     	Only_Exit := True;   //종료버튼 힌트 초기화 변경됨   20130808  LYB
      GMessagebox(MSG431 + CRLF + ls_Msg_Err, CDMSE);
    end;
end;

// 고객기본정보를 저장 요청 후 결과 처리를 한다.
procedure TFrm_JON01.Proc_CustBasicSave_Result(rxxml: String);
var
  ls_Msg_Err: string;
begin
  SetDebugeWrite('JON01.Proc_CustBasicSave_Result');


    ls_Msg_Err := GetXmlErrorCode(rxxml);
    if ('0000' = ls_Msg_Err) then
    begin
      GMessagebox('고객정보를 수정 완료 하였습니다.', CDMSI);
    end else
    begin
      GMessagebox('고객정보 수정도중 에러가 발생 하였습니다.' + #10#13 + ls_Msg_Err, CDMSI);
    end;

end;

procedure TFrm_JON01.Proc_CustMileDeduct(ATag: integer; AMsg: string);
var
	Param : string;
	locHdNo, locBrNo, sMileMny: string;
	XmlData, ErrMsg: string;
	ErrCode: integer;
	CurMlg, PrizeCnt, PrizeMlg: Integer;
	sResult : string; iTmp : Integer;
begin
	try
		if lcsCu_seq = '' then
    begin
			ShowMessage('고객 일련번호가 없습니다. 고객정보를 조회 한 다음 ['+AMsg+'] 하세요!');
			Exit;
    end;
		if cxtCallTelNum.Text = '' then
		begin
			ShowMessage('고객 전화번호가 없습니다. 고객정보를 조회 한 다음 ['+AMsg+'] 하세요!');
			Exit;
		end;
		if cxtCallTelNum.Text <> cxtCuTel.Text then
    begin
			ShowMessage('마일리지 ['+AMsg+']할 고객 전화번호가 조회한 전화번호와 다릅니다. 고객정보를 재조회 한 다음 ['+AMsg+'] 처리 하세요!');
      Exit;
    end;
    if curOutMileMny.Value < 1 then
    begin
			ShowMessage(''+AMsg+'할 마일리지 금액을 입력 하세요!');
      curOutMileMny.SetFocus;
      Exit;
    end;

		if not func_EucKr_Check(edtMileMemo, 0) then
		begin
			GMessagebox(Format('         [%s] <<< 문자오류' + #13#10 + #13#10 + '이 문자는 올바른 표기가 아닙니다. '  + #13#10 
				+ '정확히 입력하여 주십시오.', [sResult]), CDMSI);

			edtMileMemo.SetFocus;
			Exit;
		end;

		sMileMny := FloatToStr(curOutMileMny.Value);

		locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
		locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.

		Param := En_Coding(lcsCu_seq);
		Param := Param + '│' + En_Coding(cxtCuTel.Text);
		Param := Param + '│' + locHdNo;
    Param := Param + '│' + locBrNo;
    Param := Param + '│' + En_Coding(edtMileMemo.Text);
		Param := Param + '│' + En_Coding(sMileMny);
		Param := Param + '│' + IntToStr(ATag) +'│0';   // 0.차감,1.충전 || 0.마일리지,1.이벤트횟수
    Param := Param + '│' + En_Coding(cbbCuProduct.Text);

    if not RequestBase(GetCallable05('SET_CUST_MILEAGE', 'MNG_CUST.SET_CUST_MILEAGE', Param), XmlData, ErrCode, ErrMsg) then
		begin
			GMessageBox(Format('[%d] %s', [ErrCode, ErrMsg]), CDMSI);
			Exit;
    end;
		prizeMlg := StrToIntDef(ReplaceAll(lblCuMile.Caption, ',', ''), 0);
		if ATag = 0 then 
			CurMlg := prizeMlg - StrToIntDef(ReplaceAll(curOutMileMny.Text, ',', ''), 0)
		else
			CurMlg := prizeMlg + StrToIntDef(ReplaceAll(curOutMileMny.Text, ',', ''), 0);
		PrizeCnt := StrToIntDef(lblCuMileCnt.Caption, 0) + 1;

		lblCuMile.Caption := FormatFloat('#,##0', CurMlg);
		lblCuMileCnt.Caption := IntToStr(PrizeCnt);
		SetMileColorChange;

		curOutMileMny.Value := 0;
		edtMileMemo.Clear;

		btn_MileOut_Close.Click;
		
		ShowMessage('마일리지가 ['+AMsg+'] 되었습니다.');
	except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;


// 고객 SEQUENCE 를 조회 해 온다.
procedure TFrm_JON01.Proc_CuSeq_Select;
var
  ls_TxLoad, ls_TxQry, sQueryTemp : string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  ErrCode: integer;
begin
	SetDebugeWrite('JON01.Proc_CuSeq_Select');
	if cxLblCIDUseFlg.Hint <> 'CID' then
  begin // CID 조회인지 설정을 한다.
    if (Length(Trim(cxtCuTel.Text)) < 4) or (Length(Trim(cxtCallTelNum.Text)) < 4) then
		begin
			GMessagebox('고객 전화번호가 없거나 부정확 합니다. 지사 선택 후 고객정보를 조회 하세요!', CDMSI);
      cxtCuTel.Text := '';
      cxtCallTelNum.Text := '';
      Exit;
		end;
		if cxtCuTel.Text <> gsCuTelHint then
		begin
			if Pos('*', cxtCuTel.Text) <= 0 then
				cxtCallTelNum.Text := cxtCuTel.Text;
		end;
	end else
  begin
    if (Length(Trim(cxtCallTelNum.Text)) < 4) then
    begin
      Exit;
    end;
  end;
	locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
  locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
  locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

  try
    ls_TxLoad := GTx_UnitXmlLoad('SEL01.XML');
		fGet_BlowFish_Query(GSQ_CUSTOMER_SEQUENCE, sQueryTemp);
		ls_TxQry := Format(sQueryTemp, [locHdNo, locBrNo, locKNum, cxtCallTelNum.Text]);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'CUSE0001');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'QueryString', ls_TxQry);

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;
  except
    on e: exception do
    begin
      pnlJonMain.Enabled := True;
      Screen.Cursor := crDefault;
      Assert(False, E.Message);
    end;
  end;
end;

// 고객 SEQUENCE 조회에 대한 결과를 처리 한다.
procedure TFrm_JON01.Proc_RequestResult(ls_rxxml: String; ls_ClientKey:
  string);
var
  lst_Result: IXMLNode;
  ls_Msg_Err, sTmp, sTmp2: string;
  ls_Rcrd : TStringList;
  iBarIndex : Integer;
begin
  SetDebugeWrite('JON01.Proc_RequestResult');
  pnlJonMain.Enabled := True;

  try
	if ls_ClientKey = 'CUSE0001' then
      begin
        // 고객 SEQUENCE 정보를 읽는다.
        ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
        if ('0000' = ls_Msg_Err) then
        begin
          sTmp := Proc_MainKeyNumberSearch; // 지사 대표번호를 가져온다.
          sTmp2 := Proc_BrNameReadSearch;
          // 선택된 지사정보에서 지사명을 추출 한다.
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
          lst_Result := GetXmlSelectNode(ls_rxxml, '/cdms/Service/Data/Result');
          if lst_Result = Nil then Exit;

          ls_Rcrd := TStringList.Create;
          try
            GetTextSeperationEx2('│', lst_Result.Attributes['Value'], ls_Rcrd);
            lcsCu_seq := Trim(ls_Rcrd[0]);
							//
  						edtCuName.Text 			 := Trim(ls_Rcrd[1]);

							iBarIndex := StrToIntDef(Trim(ls_Rcrd[2]), 0);

							CBCuGB.Hint := 'Clear';
							cxtCuBubin.text := '';
							cxtCuBubin.Hint := '';
							if ( iBarIndex = 0) or (iBarIndex = 4) then
							begin
	  						CbCuGb.ItemIndex := 0;
								CbCuGb.Hint := '1';
								// 0:개인, 4:불량 둘다 일반으로 처리(불량코드는 사용안함)
							end	else
							if iBarIndex = 1 then
							begin
								CbCuGb.ItemIndex := 1;
								CbCuGb.Hint := '2';
							end else
							if iBarIndex = 3 then
							begin
								CbCuGb.ItemIndex := 2;
								CbCuGb.Hint := '3';
								cxtCuBubin.text := Trim(ls_Rcrd[9]) + '|' + Trim(ls_Rcrd[10]);
								cxtCuBubin.Hint := Trim(ls_Rcrd[8]);

							end	else
							begin
								CbCuGb.ItemIndex := 0;
								CbCuGb.Hint := '1';
							end;
//							CBCuGB.Hint := '';

							//법인고객의 경우 색상표기
							if (GS_PRJ_AREA = 'S') and (Trim(ls_Rcrd[8]) <> '') and (locBRNO <> 'G898') and (locBRNO <> 'Q908') and (locBRNO <> 'H849') then
							begin
								LblTop   .Color := $00FE8769;   // 파란색
								LblLeft  .Color := LblTop.Color;
								LblRigth .Color := LblTop.Color;
								LblBottom.Color := LblTop.Color;
								PnlTitle .Color := LblTop.Color;
//								PnlWorkMemo.Color := LblTop.Color;
								PnlBtm.Color := LblTop.Color;
//								PnlBox4.Color := LblTop.Color;
								Pnl_BubinV.Color := LblTop.Color;
							end
							else
							begin
								LblTop   .Color := $00E0EDEA;   // 기본색
								LblLeft  .Color := LblTop.Color;
								LblRigth .Color := LblTop.Color;
								LblBottom.Color := LblTop.Color;
								PnlTitle .Color := LblTop.Color;
//								PnlWorkMemo.Color := $00F0F0F0;
								PnlBtm.Color := $00F0F0F0;
//								PnlBox4.Color := $00F0F0F0;
								Pnl_BubinV.Color := $00F0F0F0;
							end;

  						meoCuCCMemo.Text 		 := Trim(ls_Rcrd[3]);
  						meoCuWorMemo.Text    := Trim(ls_Rcrd[4]);
  						edt_CardMemo.Text    := Trim(ls_Rcrd[5]);

	  					SetCustLevelSeq(ls_Rcrd[6]);

	  					// 고객 구분에 따른 색상 표시
	  					if (iBarIndex = 0) or (iBarIndex = 2) then
	  						Proc_SetFormColor_3(0)
	  					else if iBarIndex = 1 then
	  						Proc_SetFormColor_3(1)
	  					else if iBarIndex = 3 then
	  						Proc_SetFormColor_3(3);

              lblCuMile.Caption := FormatFloat('#,##0', StrToFloatDef(ls_Rcrd[7], 0));
							lblMoCuMile.Caption := '0';
            finally
							FreeAndNil(ls_Rcrd);
            end;
						// 존재 : $0070FEF3, 미존재 : $00FAEDE2
          end else
          begin
//            GMessagebox(sTmp2 + ' 지사에 ' + cxtCuTel.Text + ' 번호로 등록된 고객정보가 없습니다.', CDMSI);

						lcsCu_seq := '';
						edtCuName.Text 			 := FCustChangeInfo.name;
						CbCuGb.ItemIndex     := 0;
						CbCuGb.Hint          := '';
						meoCuCCMemo.Text 		 := FCustChangeInfo.meoCuCCMemo;
						meoCuWorMemo.Text    := FCustChangeInfo.meoCuWorMemo;
						edt_CardMemo.Text    := FCustChangeInfo.edt_CardMemo;
          end;

					if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
					begin
						if (locHdNo = sOrgHDNO) And (locBrNo = sOrgBRNO) And (locKNum = sOrgKNum) then
						begin
              cxTxtBrNameCaption.Text := sTmp2 + ' / ' + sTmp
            end else
            begin
              cxTxtBrNameCaption.Text := '지사변경됨:' + sTmp2 + ' / ' + sTmp;
							cxTxtBrNameCaption.BringToFront;
              cxTxtBrNameCaption.Visible := True;
            end;
          end else
          begin
            cxTxtBrNameCaption.Text := '지사변경됨:' + sTmp2 + ' / ' + sTmp;
            cxTxtBrNameCaption.BringToFront;
            cxTxtBrNameCaption.Visible := True;
          end;

          // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.
        end else
        begin
          GMessagebox(ls_Msg_Err, CDMSE);
        end;
      end else
      if ls_ClientKey = 'CUSE0011' then
      begin
        ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
        if ('0000' = ls_Msg_Err) then
        begin
          GMessagebox('출발지 정보를 저장 하였습니다.', CDMSI);
        end else
          GMessagebox(ls_Msg_Err, CDMSE);
      end else
      if ls_ClientKey = 'CUSE0012' then
      begin
         // 도착지 정보 저장 삭제
        ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
        if ('0000' = ls_Msg_Err) then
        begin
          GMessagebox('도착지 정보를 저장 하였습니다.', CDMSI);
        end else
          GMessagebox(ls_Msg_Err, CDMSE);
      end;
    except
      on e: exception do
      begin
        Assert(False, E.Message);
      end;
    end;
end;

// 선택된 지사정보에서 지사명을 추출 한다.
function TFrm_JON01.Proc_BrNameReadSearch: string;
var
  iPos2: Integer;
  sBrName, sTmp : string;
begin
  SetDebugeWrite('JON01.Proc_BrNameReadSearch');
  Result := '';
  sBrName := '';
  sTmp := cboBranch.Text;
  if sTmp = '' then
    Exit;

  // 예시: "NS법인[15889999] A100 .B100 "   2011.05.17  CDS.
  iPos2 := Pos('[', sTmp);
  if iPos2 > 0 then
  begin
    sTmp := Copy(sTmp, 1, iPos2-1);
    sBrName := sTmp;
  end;

  Result := sBrName;
end;

// [수정화면 띄우기..]오더일련번호:접수번호로 조회 후 그 결과 처리를 한다.
procedure TFrm_JON01.Proc_ConfSlipSelectResult(rxxml: String);
var
	wk_br_Name, wk_Name, wk_Tel, ls_Msg_Err: string;
	sBr_Name, sTemp, sTemp2, sOrderUpInfo, CReason, StCd, sCPStatus: string;
	iBarIndex, iRCnt, i, j, iBidx, iFIdx: Integer;
	itotal, iEnd, iCancel, ij: Integer;
	iGrade1, iGrade2, ACount, iViaCNT, ia: Integer;
	fcancelRate: double;
	sCustTel, sBrNo, sAccCenter, sTodayDate, sDate, sInDate, OrderState, sMultiCallGB, sMemo, sContent: string;
	ls_Rcrd : TStringList;
  BitMap1 : TBitMap;
	sCurMileage, sMileage: string;

  bAutoWorkChk : Boolean;    // 시간별 기사 지원금 설정 오더 여부 체크
  sWorkChkTmp : String;

	DataValue: String;
	sWkFAge, sWkTAge, msg, sOrderCallBellStatus, sCarType, sCashSave, sMlgSave, sKakaoYN : string;
	iTmp : integer;
  sDT, eDt : TDateTime;
  nodeList_Result : IXMLNodeList;
  lst_Result: IXMLNode;
begin
	SetDebugeWrite('JON01.Proc_ConfSlipSelectResult');
	iFidx := Self.Tag; // 폼의 index를 읽는다.

	pnlWkLicType.visible := False;
	bAutoWorkChk := False;
//-------------------------- Error Code Read -----------------------------
//  loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Error');
//	ls_Msg_Err := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Code'];
//  if ls_Msg_Err <> '0000' then
//    ls_Msg_Err := ls_Msg_Err + ' : ' + loc_Ud_lst_Node.item[0].attributes.getNamedItem('Message'];
  //------------------------------------------------------------------------
  ls_Msg_Err := GetXmlErrorCode(rxxml);
  //------------------------------------------------------------------------
  try
		if ('0000' = ls_Msg_Err) then
    begin
		 //================================= 고객정보 Display End. =====================================

			// 상담메모/기사메모 표시
      if ( GS_AUTOMEMO_SHOW ) then BtnViewMemo.Click;

      nodeList_Result := GetXmlSelectNodeList(rxxml, '/cdms/Service/Data/AcceptInfo/Accept');
      if ( nodeList_Result = Nil ) then Exit;

			iRCnt := nodeList_Result.Count;

			sMlgSave := nodeList_Result.Get(0).Attributes['MlgSaveYn'];    //마일리지 사용시 마일리지 적립
			sCashSave:= nodeList_Result.Get(0).Attributes['CashSaveYn'];    //현금 사용시 마일리지 적립
			sKakaoYN := nodeList_Result.Get(0).Attributes['KdShareCallYn'];    //카카오 오더 여부
			if sKakaoYN = 'y' then bKakaoOrder := True else bKakaoOrder := False;

			sOrderCallBellStatus := '';
			sOrderCallBellStatus := nodeList_Result.Get(0).Attributes['CallBellStatus'];
			gsOrderCallBellID := nodeList_Result.Get(0).Attributes['CallBellMemId'];
			if iRcnt > 0 then
			begin // 과거 이용내역을 보여준다.
				sTodayDate := StartDateTime('yyyy-mm-dd hh:nn:ss');
				// 오늘 영업일자 얻기..
        sMultiCallGB := nodeList_Result.Get(0).Attributes['MultiCallGB']; // 멀티콜
				if sMultiCallGB <> '' then
					GrpCReason.Caption := Trim(GrpCReason.Caption) + Format('   %s', [sMultiCallGB]);
				ACount := 0;
        SetDebugeWrite('JON012.cxGVeOrderList.BeginUpdate');
				frm_JON012.cxGVeOrderList.BeginUpdate;
        try
					for i := 1 to iRcnt do
          begin
            Application.ProcessMessages;
            if nodeList_Result.Get(i-1).Attributes['InTime'] = '' then Continue;

						Inc(ACount);
//	  				iRow := Frm_JON012.cxGVeOrderList.DataController.FindRecordIndexByText(0, iConfSlip, loc_Ud_lst_Node.item[i - 1].attributes.getNamedItem('ConfSlip').Text, False, True, True);
//	  				if iRow >= 0 then
//              Continue;

   					sCurMileage := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(i-1).Attributes['CurMileage'], 0.0));
    				sMileage    := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(i-1).Attributes['Mileage'], 0.0));
            iBidx := Frm_JON012.cxGVeOrderList.DataController.AppendRecord;
            for J := 0 to 42 do
            begin
              case J of
                2:
                  begin
                    if nodeList_Result.Get(i-1).Attributes['Status'] = 'gi' then
                    begin
                      DataValue := '경품지급';
                    end else
                    if nodeList_Result.Get(i-1).Attributes['Status'] = 'cs' then
                    begin
                      DataValue := '가격수정';
                    end else
                    if nodeList_Result.Get(i-1).Attributes['Status'] = 'bi' then
                    begin
                      DataValue := '보정입력';
                    end else
                    begin
                      DataValue := nodeList_Result.Get(i-1).Attributes['Area5'];
                    end;
                  end;
                3:
                  begin
                    if nodeList_Result.Get(i-1).Attributes['Status'] = 'gi' then
                    begin
                      DataValue := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(i-1).Attributes['Mileage'], 0.0)) + '원 경품지급';
                    end else
                    if nodeList_Result.Get(i-1).Attributes['Status'] = 'cs' then
                    begin
                      DataValue := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(i-1).Attributes['Mileage'], 0.0)) + '원 가격수정';
                    end else
                    if nodeList_Result.Get(i-1).Attributes['Status'] = 'bi' then
                    begin
                      DataValue := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(i-1).Attributes['Mileage'], 0.0)) + '원 보정입력';
                    end else
                    begin
                      DataValue := nodeList_Result.Get(i-1).Attributes['EdArea5'];
                    end;
                  end;
                5:
                  begin
                    DataValue := FormatFloat('#,##0', StrToFloatDef(nodeList_Result.Get(i-1).Attributes[OrderTitle[J].TagName], 0.0));
                  end;
                6:
                  begin
                    if StrToFloatDef(nodeList_Result.Get(i-1).Attributes['Mileage'], 0.0) < 0 then
                    begin
                      DataValue := formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(i-1).Attributes[OrderTitle[J].TagName], 0.0))
                                             + '(마일리지사용) (잔액 : ' + sCurMileage + ')';
                    end else
                    if StrToFloatDef(nodeList_Result.Get(i-1).Attributes[OrderTitle[J].TagName], 0.0) > 0 then
                    begin
                      DataValue := '+'+formatfloat('#,##0', StrToFloatDef(nodeList_Result.Get(i-1).Attributes[OrderTitle[J].TagName], 0.0))
                                             + ' (잔액 : ' + sCurMileage + ')';
                    end	else
                    if StrToFloatDef(nodeList_Result.Get(i-1).Attributes[OrderTitle[J].TagName], 0.0) = 0 then
                    begin
                      DataValue := FormatFloat('#,##0', StrToFloatDef(nodeList_Result.Get(i-1).Attributes[OrderTitle[J].TagName], 0.0));
                    end;
                  end;
//                  15:
//	  								begin
//                      sCustTel    := getNamedItem('CustTel').Text;
//                      sBrNo       := getNamedItem('ConfBrch').Text;
//                      sAccCenter  := getNamedItem('AcceptCenter').Text;
//                      sDate       := getNamedItem('InTime').text;
//                      DataValue   := Frm_Main.Frm_JON01[Self.Tag].func_Cust_Tel(sCustTel, sBrNo, sAccCenter, sDate);
//                    end;
                31:
                  DataValue := IntToStr(iBidx+1);
              else
                begin
                  try
                    DataValue := nodeList_Result.Get(i-1).Attributes[OrderTitle[J].TagName]
                  except
                    DataValue := '';
                  end;
                end;
              end;
              _AddData(Frm_JON012.cxGVeOrderList, iBidx, OrderTitle[J].FieldName, DataValue);
            end;


						// 당일오더 건에 대해선 칼라를 변경하여 구분이 될수 있게 해준다.
            if i = 1 then
            begin
							sInDate := nodeList_Result.Get(i-1).Attributes['InDate']; // 접수일시
              sInDate := StringReplace(sInDate, '/', '-', [rfReplaceAll]);
							sInDate := copy(sInDate, 1, 19);
              if sInDate >= sTodayDate then
              begin
                SetCustControlColor(True);
								// 고객정보 화면의 라벨칼라를 변경해준다.
              end else
              begin
                SetCustControlColor(False);
              end;
            end;
          end;
          Frm_JON012.cxGVeOrderList.EndUpdate;
          Frm_JON012.SetStatesViewCheck;
          SetDebugeWrite('JON012.cxGVeOrderList.EndUpdate');
        except on e: exception do
          begin
            Frm_JON012.cxGVeOrderList.CancelUpdate;
            SetDebugeWrite('JON012.cxGVeOrderList.CancelUpdate');
						sTemp := 'JON01[cxGVeOrderList] CancelUpdate :' + e.Message;
						Log(sTemp, LOGDATAPATHFILE);
  		  		Assert(False, sTemp);
          end;
        end;
      end;
      //----------------------------
      Application.ProcessMessages;

      lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Branch');
      if lst_Result = Nil then Exit;

			locHDNO := Trim(lst_Result.Attributes['HdNo']);
			locBRNO := TRim(lst_Result.Attributes['BrNo']);
			sOrgHDNO := locHDNO; //수정창 오픈시에만 사용 20160719 KHS
			sOrgBRNO := locBRNO; //수정창 오픈시에만 사용 20160719 KHS
			if scb_BranchCode.IndexOf(locBRNO) < 0 then
      begin
        GMessageBox('타사콜은 수정할 수 없습니다.', CDMSI);
        tmFormClose.Tag := 77; // 화면 닫기 설정값.
        loc_TmClose := 'CLOSE'; // 화면 종료 타이머 변수. CDS. 080830.
        tmFormClose.Enabled := True; // 화면을 닫는다.
        Exit;
      end;

      // [hjf-하드코딩] 2009.03.06 코리아(카드고객) 색상구분
			if (GS_PRJ_AREA = 'S') and (locBRNO = 'H849') then
      begin
        LblTop   .Color := clRed;       // 붉은색
        LblLeft  .Color := LblTop.Color;
        LblRigth .Color := LblTop.Color;
        LblBottom.Color := LblTop.Color;
        PnlTitle .Color := LblTop.Color;
//        PnlWorkMemo.Color := LblTop.Color;
				PnlBtm.Color := LblTop.Color;
//        PnlBox4.Color := LblTop.Color;
				Pnl_BubinV.Color := LblTop.Color;
			end else
			// [cds-하드코딩] 2011.10.11 코리아(카드고객) 색상구분 추가. 1577-5000.  신용카드 (1577-9482)
			if (GS_PRJ_AREA = 'S') and ( (locBRNO = 'G908') Or (locBRNO = 'G902') )  then
			begin
				LblTop   .Color := $00FE8769;   // 파란색
				LblLeft  .Color := LblTop.Color;
				LblRigth .Color := LblTop.Color;
				LblBottom.Color := LblTop.Color;
				PnlTitle .Color := LblTop.Color;
//        PnlWorkMemo.Color := LblTop.Color;
				PnlBtm.Color := LblTop.Color;
//        PnlBox4.Color := LblTop.Color;
        Pnl_BubinV.Color := LblTop.Color;
			end else
			// [cds-하드코딩] 2012.10.09 코리아(02-2000-0000) 색상구분 추가. KHS
      if (GS_PRJ_AREA = 'S') and (locBRNO = 'Q908') then
      begin
        LblTop   .Color := clGreen;   // 녹색
        LblLeft  .Color := LblTop.Color;
        LblRigth .Color := LblTop.Color;
        LblBottom.Color := LblTop.Color;
        PnlTitle .Color := LblTop.Color;
//        PnlWorkMemo.Color := LblTop.Color;
        PnlBtm.Color := LblTop.Color;
//        PnlBox4.Color := LblTop.Color;
				Pnl_BubinV.Color := LblTop.Color;
			end else
			// [cds-하드코딩] 2012.10.09 법인콜 색상구분 추가.
      if (GS_PRJ_AREA = 'S') and (locBRNO = 'G898') then
      begin
        LblTop   .Color := $0000C8FF;   // 골드
        LblLeft  .Color := LblTop.Color;
        LblRigth .Color := LblTop.Color;
        LblBottom.Color := LblTop.Color;
        PnlTitle .Color := LblTop.Color;
//        PnlWorkMemo.Color := LblTop.Color;
        PnlBtm.Color := LblTop.Color;
//        PnlBox4.Color := LblTop.Color;
        Pnl_BubinV.Color := LblTop.Color;
			end else
      begin
        LblTop   .Color := $00E0EDEA;   // 기본색
        LblLeft  .Color := LblTop.Color;
        LblRigth .Color := LblTop.Color;
        LblBottom.Color := LblTop.Color;
        PnlTitle .Color := LblTop.Color;
//        PnlWorkMemo.Color := LblTop.Color;
        PnlBtm.Color := LblTop.Color;
//        PnlBox4.Color := LblTop.Color;
        Pnl_BubinV.Color := LblTop.Color;
      end;

			sBr_Name := Trim(lst_Result.Attributes['BrName']); // 지사명 읽기.
			locKNum := Trim(lst_Result.Attributes['KeyNumber']); // 대표번호 읽기.
			sOrgKNum := locKNum; //수정창 오픈시에만 사용 20160719 KHS
			
      sAccCenter := Trim(lst_Result.Attributes['CallCenter']); // 콜센터
      // 지사리스트에서 대표번호, 지사코드 index 찾기 및 설정.

      if Proc_BrNoListIdxFind(locBRNO, locKNum) = False then
      begin
				cboBranch.Tag := 10;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
				cboBranch.Properties.Items.Clear; // 지사리스트 초기화.
        cboBranch.Properties.Items.Add(sBr_Name + '[' + locKNum + '] ' +  Copy(locHDNO + '     ', 1, 5) + '.' + Copy(locBRNO + '     ', 1, 5));
        // 본사코드   // 지사코드   // 지사명   // 대표번호
        cboBranch.ItemIndex := 0;
        cboBranch.Tag := 0;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
      end;
      cxTxtBrNameCaption.Text := sBr_Name + ' / ' + locKNum;
      // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.

      lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Driver');
      if lst_Result <> Nil then
      begin
        wk_br_Name := lst_Result.Attributes['WkBrName'] + '(' + lst_Result.Attributes['WkBrNo'] + ')';
        FWk_sabun := lst_Result.Attributes['WkSabun'];
        wk_Name := lst_Result.Attributes['WkName'];
        wk_Tel := Copy(wk_Name, Pos('|', wk_Name) + 1, 15); // 기사전화번호 추출
        wk_Name := Copy(wk_Name, 1, Pos('|', wk_Name) - 1);
        // 기사 사번, 기사지사코드 저장.
        locWkSabun := FWk_sabun; // 기사사번
        locWkBrNo := lst_Result.Attributes['WkBrNo'];
        // 지사코드
  //-      cxLblSeaWkSabun.Hint := wk_sabun; // 기사사번
        cxtWorkerNm.Text := wk_Name;
      end;

      lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Customer');
      if lst_Result = Nil then Exit;

			sCarType := lst_Result.Attributes['CarType'];    //차종추가
			if sCarType = '1' then cb_CarType.ItemIndex := 0 else cb_CarType.ItemIndex := 1;
			
			if lst_Result.Attributes['ViewLevel'] = '1' then chkViewLevel.Checked := True
                                                  else chkViewLevel.Checked := False;

      sWkFAge := lst_Result.Attributes['WkFromAge'];
      sWkTAge := lst_Result.Attributes['WkToAge'];
      if StrToIntDef(sWkFAge,0) > 0 then
      begin
        BtnWkAge.Down := True;
				edtWkFAge.Text := sWkFAge;
        if StrToIntDef(sWkTAge,0) > 0 then
          edtWkTAge.Text := sWkTAge
        else
          edtWkTAge.Text := '99';
      end else
      if StrToIntDef(sWkTAge,0) > 0 then
      begin
        BtnWkAge.Down := True;
        edtWkFAge.Text := '19';
        edtWkTAge.Text := sWkTAge;
      end
      else BtnWkAge.Down := False;

      if BtnWkAge.Down then BtnWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하'
      else BtnWkAge.Hint := '';

      // 고객수정 버튼 활성화.
			lcsCu_seq := lst_Result.Attributes['CuSeq'];
      if lcsCu_seq <> '' then
      begin
        cxBtnCuUpdate.Enabled := True;
				cxBtnCuDel.Enabled := True;
      end else
      begin
        cxBtnCuUpdate.Enabled := False;
				cxBtnCuDel.Enabled := False;
      end;

      OrderState := lst_Result.Attributes['ConfSt']; // 오더 상태 읽기.

      // KCP 카드 결제 일련번호. 2011-10-19
      // "추가접수" 모드 일때는 카드 거래일련번호 를 읽지 않는다.
			try
				Pay_Gubun := lst_Result.Attributes['PayMeth'];
				locCardPaySeq := '';

        if btnCmdUpdSave.Hint = '추가접수' then
				begin
					locCardPaySeq := '';

          //  결제구분 : 0.현금, 입금방식 : 20.완료후20분입금, 출발지에 ']' 입력 여부
          if ( Pay_Gubun = '0' ) And ( lst_Result.Attributes['PostTime'] = '20') And
             ( Pos(']', lst_Result.Attributes['Area5']) > 1 ) then bAutoWorkChk := True;
        end else
        begin
   				locCardPaySeq := lst_Result.Attributes['CardPaySeq'];
        end;
      finally
      end;

      //---------------------------- 2011-11-11.
			BtnPlusYN.Hint := 'NOCHANGE';

			PayMethod := lst_Result.Attributes['PayMeth'];        //위치 이동 2011.11.25 KHS 법인콜체크박스 초기화문제

			if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) then 
			begin
				btnCashSave.visible := True;
				btnMileSave.visible := True;
			end else 
			begin
				btnCashSave.visible := False;
				btnMileSave.visible := False;
			end;
			if sMlgSave = 'y' then 
			begin	
				btnMileSave.down := True;
			end else 
			begin
				btnMileSave.down := false;
			end;
			if sCashSave = 'y' then 
			begin	
				btnCashSave.down := True;
			end else 
			begin
				btnCashSave.down := false;
			end;
			
			if (sTemp = '7') and (locCardPaySeq <> '') then  //후불(카드)일경우 결제정보를 미리 조회한다 . 20160823 KHS
			begin
				if Not Assigned(Frm_JON34) Or (Frm_JON34 = Nil) then Frm_JON34 := TFrm_JON34.Create(Nil);
				Frm_JON34.Card_Gubun := 1;
				Frm_JON34.ProCardInfoSelect(cxtJoinNum.Text);
				gUpdate_CardTranNo := Frm_JON34.lblTranNo.Caption;
				gCardStatus := Frm_JON34.lblCardStatus.Caption;
			end;
				
			BtnPlusYN.Hint := '';

      //----------------------------
      Application.ProcessMessages;

			// 플러스콜 상태 설정. 2010.10.03
			// 플러스콜 여부(수도권만 사용함) --> 2011-11-10 법인콜로 용도변경 사용.
			if GS_PRJ_AREA = 'S' then
      begin
				sTemp := lst_Result.Attributes['PlusYn'];
        BtnPlusYN.Tag := 20;
        if sTemp = 'y' then BtnPlusYN.Down := True
                       else	BtnPlusYN.Down := False;
				BtnPlusYN.Tag := 0;
			end;

			// 탁송연합콜 설정값 추가. 2019.05.15 
			sTemp := lst_Result.Attributes['ConsShareYn'];
			if sTemp = 'y' then BtnTakAlly.Down := True
										 else	BtnTakAlly.Down := False;

			// AI 아웃바운드 배차지연콜 사용여부 추가. 2019.07.16 KHS
			sTemp := lst_Result.Attributes['AiOutOption'];
			if sTemp = 'y' then chk_AIReCall.Checked := True
										 else	chk_AIReCall.Checked := False;
										 
			sTemp := Proc_MainKeyNumberSearch;
			if not GetAIOBKeyNumberYN(sTemp) then   //고객이 선택되어 있어도 지사의 대표번호에서 사용안하면 체크해제
			begin
				chk_AIReCall.Properties.ReadOnly := True;
				chk_AIReCall.checked := False;
			end else chk_AIReCall.Properties.ReadOnly := False; 

			try
  			sTemp := lst_Result.Attributes['PostChargeSmsYN'];
      except
        sTemp := 'n';
      end;
      if sTemp = 'y' then BtnWKJAmt.Down := True
                     else BtnWKJAmt.Down := False;

      try
  			sTemp := lst_Result.Attributes['Call2YN'];
      except
        sTemp := 'n';
      end;
{      if sTemp = 'y' then chkCall2.Checked := True
										 else chkCall2.Checked := False;}

      // 소요시간
      try
  			sTemp := Trim(lst_Result.Attributes['EstTime']);
        fTotalTime := StrToFloatDef(sTemp, 0);
      except
        fTotalTime := 0;
      end;

			//================================= 고객정보 Display Start. =====================================
      edtCuName.Text := lst_Result.Attributes['CuName'];

 			ls_Rcrd := TStringList.Create;
			sContent := StringReplace(lst_Result.Attributes['Info'], '|', '¶',  [rfReplaceAll]);
      if Trim(sContent) <> '' then
      begin
  			GetTextSeperationEx2('¶', sContent, ls_Rcrd);
  			for ia := 0 to ls_Rcrd.Count - 1 do
  			begin
          if ia = 0 then
            meoCuCCMemo.Text := ls_Rcrd[ia]
          else
            meoCuCCMemo.Text := meoCuCCMemo.Text + #13#10 + ls_Rcrd[ia];
  			end;
      end;
			ls_Rcrd.Clear;

			// 문제의 고객상담 호출실패 2011.03.07
			sContent := StringReplace(lst_Result.Attributes['PdaInfo'], '|', '¶', [rfReplaceAll]);
      if Trim(sContent) <> '' then
      begin
  			GetTextSeperationEx2('¶', sContent, ls_Rcrd);
	  		for ia := 0 to ls_Rcrd.Count - 1 do
		  	begin
          if ia = 0 then
            meoCuWorMemo.Text := ls_Rcrd[ia]
          else
            meoCuWorMemo.Text := meoCuWorMemo.Text + #13#10 + ls_Rcrd[ia];
  			end;
      end;

			iBarIndex := StrtoIntDef(lst_Result.Attributes['CuType'], 0);

      CBCuGB.Hint := 'Clear';
			if (iBarIndex = 0) or (iBarIndex = 4) then
			begin
				CbCuGb.ItemIndex := 0;
        CbCuGb.Hint := '1';
				// 0:개인, 4:불량 둘다 일반으로 처리(불량코드는 사용안함)
			end	else
      if iBarIndex = 1 then
			begin
				CbCuGb.ItemIndex := 1;
        CbCuGb.Hint := '2';
			end else
      if iBarIndex = 3 then
			begin
				CbCuGb.ItemIndex := 2;
        CbCuGb.Hint := '3';
			end	else
			begin
				CbCuGb.ItemIndex := 0;
        CbCuGb.Hint := '1';
			end;
      CBCuGB.Hint := '';

      // 고객 구분에 따른 색상 표시
      if (iBarIndex = 0) or (iBarIndex = 2) then
      begin
        Proc_SetFormColor_3(0);
      end else
      if iBarIndex = 1 then
      begin
        Proc_SetFormColor_3(1);
      end else
      if iBarIndex = 3 then
      begin
        Proc_SetFormColor_3(3);
      end;

      if btnCmdUpdSave.Hint <> '추가접수' then
      begin
				shpModifyTitle.Visible := True;
				PnlModifyTitle.Visible := True;
//				BtnLClose1.Visible := True;
				pnlClose.Visible := True;
				Image1.Visible := True;
				cxImgLock.GetIcon(3, Image1.Picture.Icon); 
				cxImgLock.Tag := 1;
        if Frm_Main.JON01MNG[Self.Tag].FrmGubun <> 1 then
				begin
					PnlModifyTitle.Left := 605 - PnlModifyTitle.width;
          pnlClose.Left := pnlModifyTitle.Left - PnlClose.Width;
				end;
			end;

      sTemp2 := lst_Result.Attributes['MemName']; // 상담원명
			StCd := lst_Result.Attributes['ConfSt']; // 오더 상태 읽기.

			try
        sCPStatus := lst_Result.Attributes['ConfPreStatus']; // 예약오더 0.접수, 5대기

        if sCPStatus = '0' then
        begin
          BtnResJ.Down := True;
          cxlblResvG.Caption := '접수일시';
        end else
        if sCPStatus = '5' then
        begin
          BtnResD.Down := True;
          cxlblResvG.Caption := '대기일시';
        end;
      except

      end;

      CReason := lst_Result.Attributes['CReason']; // 취소사유
			cxtJoinNum.Hint := Trim(StCd); // 오더 상태값을 저장한다.
			// 오더 상태 코드를 문자열로 변경해준다.
      sTemp := Func_OrderStateConvert(StCd);
			GrpCReason.Caption := Format(' 오더상태 : %s', [sTemp]);
			lblCReason.Caption := CReason;

//-      if ( cxtJoinNum.Hint[1] in ['4'] ) then // 수정[문의] 건 경우
//-        cbbPayMethod.Enabled := False;

      grpOrderInfoView.Caption := '상세 정보';
      if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
      begin
				PnlModifyTitle.Height := 17;
  			PnlModifyTitle.Top := GBTop2.Top - ( PnlModifyTitle.Height - 3 );

				pnlClose.Height := PnlModifyTitle.Height;
				pnlClose.Top := PnlModifyTitle.Top;
				cxLblOrderUpInfo.Caption := cxtJoinNum.Text;

				if Trim(CReason) = '' then
				begin
					// 오더관련 정보 보이기..
          cxLblOrderUpInfo.Hint := '접수:' + cxtJoinNum.Text + ' 상태:' + sTemp + ' 상담원:' + sTemp2;
        end else
        begin
          // 오더관련 정보 보이기..
          cxLblOrderUpInfo.Hint := '접수:' + cxtJoinNum.Text + ' 상태:' + sTemp + ' 상담원:' + sTemp2 + #10 +
                                      '[ '+CReason+' ]';
        end;

        meoCuCCMemo.Hint := cxLblOrderUpInfo.Caption;   // 임시로 저장해서 사용
        mmoCbMemo.Hint   := cxLblOrderUpInfo.Hint;   // 임시로 저장해서 사용
      end else
      begin
        if Trim(CReason) = '' then
				begin
					PnlModifyTitle.Height := 17;
    			PnlModifyTitle.Top := GBTop2.Top - ( PnlModifyTitle.Height - 3 );

					pnlClose.Height := PnlModifyTitle.Height;
					pnlClose.Top := PnlModifyTitle.Top;
					// 오더관련 정보 보이기..
					cxLblOrderUpInfo.Caption := '접수:' + cxtJoinNum.Text + ' 상태:' + sTemp + ' 상담원:' + sTemp2;
				end else
				begin
					PnlModifyTitle.Height := 30;
    			PnlModifyTitle.Top := GBTop2.Top - ( PnlModifyTitle.Height - 3 );

					pnlClose.Height := PnlModifyTitle.Height;
					pnlClose.Top := PnlModifyTitle.Top;
					// 오더관련 정보 보이기..
          cxLblOrderUpInfo.Caption := '접수:' + cxtJoinNum.Text + ' 상태:' + sTemp + ' 상담원:' + sTemp2 + #10 +
                                      '[ '+CReason+' ]';
        end;
        cxLblOrderUpInfo.Hint := '수정시 마우스 클릭하면 좀더 많은 정보를 볼수 있음.';

        meoCuCCMemo.Hint := cxtJoinNum.Text;   // 임시로 저장해서 사용
        mmoCbMemo.Hint := cxLblOrderUpInfo.Caption;   // 임시로 저장해서 사용
      end;

      sOrderUpInfo :=                '접 수 번 호 : ' + cxtJoinNum.Text + #10;
      sOrderUpInfo := sOrderUpInfo + '접수 상담원 : ' + sTemp2 + #10;
      sOrderUpInfo := sOrderUpInfo + '오 더 상 태 : ' + sTemp + #10;
      sTemp2 := lst_Result.Attributes['FinDate']; // 최초접수시간
      sTemp := lst_Result.Attributes['InDate']; // 접수시간
      sOrderUpInfo := sOrderUpInfo + '최초접수시간 : ' + Copy(sTemp2, 1, 19) + #10;
      sOrderUpInfo := sOrderUpInfo + '접 수 시 간 : ' + Copy(sTemp, 1, 19) + #10;
			sOrderUpInfo := sOrderUpInfo + '배차기사이름 : [' + FWk_sabun + ']' +  wk_Name + #10;
      sOrderUpInfo := sOrderUpInfo + '배차기사핸폰 : ' + wk_Tel + #10;
      sOrderUpInfo := sOrderUpInfo + '배차기사소속 : ' + wk_br_Name;
      cxMeoOrderUpInfo.Text := sOrderUpInfo;

			ChkCuSmsNo.Tag := 1;
      if lst_Result.Attributes['SMS'] = 'n' then
        ChkCuSmsNo.Checked := True
      else
      if lst_Result.Attributes['SMS'] = 'y' then
        ChkCuSmsNo.Checked := False;
      ChkCuSmsNo.Tag := 0;

			// 저장 요금을 적용 한다.
			sNowRate := lst_Result.Attributes['Charge'];
			gRate_Update := StrToIntDef(sNowRate, 0); //수정창 오픈시 요금 
			if BtnRaLock.Hint <> 'F4)잠금' then
			begin
				curRate.Value := StrToIntDef(sNowRate, 0);
				curRate.Tag := StrToIntDef(sNowRate, 0);
				if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
					OrgRate := curRate.Value;
			end;

			lblCuMile.Caption := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['CurMlg'], 0));

			lblCuMileUnit.Caption := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['PrizeMlg'], 0)); //지사설정 지금 단위
			lblCuMileCnt.Caption := lst_Result.Attributes['PrizeCnt'];
      sProdName := lst_Result.Attributes['Prize'];
			SetMileColorChange;

			lblCuMileLost.Caption := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['CuExpireMileage'], 0)); //소멸예정금액
      if bAutoWorkChk then   // 추가접수인데 기사송금수수료자동설정오더이면 초기화
      begin
        PostTime := '0';
				edtPostPay.Value := 0;
        cxLblWkJAmt.Caption := '0';
			end else
			begin
				PostTime := lst_Result.Attributes['PostTime'];
				edtPostPay.Value := StrToIntDef(lst_Result.Attributes['PostCharge'], 0);
				edtPostPay.Hint := lst_Result.Attributes['PostCharge'];
        if ( edtPostPay.Value > 0 ) And ( cbbPayMethod.Text = PAY_METHOD_POST_MILE ) then
				begin
					lblMoCuMile.Caption := formatfloat('#,##0',
															 StrToFloatDef(lst_Result.Attributes['PostCharge'], 0));
					lblMoCuMile.Visible := True;
          Label9.Visible := True
        end;
        cxLblWkJAmt.Caption := FormatFloat('#,', StrToFloatDef(lst_Result.Attributes['WkCharge'], 0));
      end;
      if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;

      // 법인코드
      cxtCuBubin.Hint := TRim(lst_Result.Attributes['BGroup']);
      // + ',' + ed_MaddBrch.Text;
      if cxtCuBubin.Hint <> '' then
      begin
        sTemp := TRim(lst_Result.Attributes['BGName']); // 법인명
        sTemp2 := Trim(lst_Result.Attributes['BGDName']); // 법인부서명
        cxtCuBubin.Text := sTemp + ' | ' + sTemp2;
				lblCuBubinName.Caption := '법인고객 [ ' + Trim(cxtCuBubin.Text) + ' ]';

				if (GS_PRJ_AREA = 'S') and (cxtCuBubin.Hint <> '') and (locBRNO <> 'G898') and (locBRNO <> 'Q908') and (locBRNO <> 'H849') then
				begin
					LblTop   .Color := $00FE8769;   // 파란색
					LblLeft  .Color := LblTop.Color;
					LblRigth .Color := LblTop.Color;
					LblBottom.Color := LblTop.Color;
					PnlTitle .Color := LblTop.Color;
//					PnlWorkMemo.Color := LblTop.Color;
					PnlBtm.Color := LblTop.Color;
//					PnlBox4.Color := LblTop.Color;
					Pnl_BubinV.Color := LblTop.Color;
				end;
			end;

      // 출발지 정보
      // 20120805 좌표 오류 체크 LYB
      gJONStaChkXY.Area1 := lst_Result.Attributes['Area'];
      gJONStaChkXY.Area2 := lst_Result.Attributes['Area2'];
      gJONStaChkXY.Area3 := lst_Result.Attributes['Area3'];
      gJONStaChkXY.Area4 := lst_Result.Attributes['Area4'];
      gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
      gJONStaChkXY.X := lst_Result.Attributes['MapX'];
      gJONStaChkXY.Y := lst_Result.Attributes['MapY'];
      gJONStaChkXY.GUIDE_X := lst_Result.Attributes['MapX'];
      gJONStaChkXY.GUIDE_Y := lst_Result.Attributes['MapY'];

			if btnCmdUpdSave.Hint = '추가접수' then
			begin
				gJONStaChkXY.Gubun := 'B';
				GS_Grid_DEP := 'B';
        GS_Grid_DES := 'B';
			end else
			begin
				gJONStaChkXY.Gubun := 'U';
				GS_Grid_DEP := 'U';
        GS_Grid_DES := 'U';
			end;

      lcsSta1 := lst_Result.Attributes['Area'];
      lcsSta2 := lst_Result.Attributes['Area2'];
      lcsSta3 := lst_Result.Attributes['Area3'];
      if lst_Result.Attributes['Area4'] <> '☆' then
        cxtStartAreaDetail.Text := lst_Result.Attributes['Area4']
      else
		    cxtStartAreaDetail.Text := '';
			lcsConfAREA4            := lst_Result.Attributes['Area4'];
			cxtStartAreaDetail.Hint := lst_Result.Attributes['Area5'];

			cxtStartXval.Text := lst_Result.Attributes['MapX'];
      cxtStartXval.Hint := lst_Result.Attributes['MapX'];
			cxtStartYval.Text := lst_Result.Attributes['MapY'];
      cxtStartYval.Hint := lst_Result.Attributes['MapY'];

      cxtStartGUIDEXval.Text := cxtStartXval.Text;
      cxtStartGUIDEYval.Text := cxtStartYval.Text;

      lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
      SetDebugeWrite('JON01.lblStartAreaName.Text 16056 : ' + lblStartAreaName.Text);

      // 출발지 세부지명
      if Trim(cxtStartAreaDetail.Hint) <> '' then
      begin
        if bAutoWorkChk then   // 추가접수인데 기사송금수수료자동설정오더이면 초기화
          meoStartArea.Text := Copy(cxtStartAreaDetail.Hint, pos(']', cxtStartAreaDetail.Hint) + 1, Length(cxtStartAreaDetail.Hint) - pos(']', cxtStartAreaDetail.Hint))
        else
          meoStartArea.Text := cxtStartAreaDetail.Hint;
      end else
      if Trim(cxtStartAreaDetail.Text) <> '' then
        meoStartArea.Text := cxtStartAreaDetail.Text
      else
      if Trim(lcsSta3) <> '' then
        meoStartArea.Text := lcsSta3;

      MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
      MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

      // 도착지 정보
      lcsEnd1 := lst_Result.Attributes['EdArea'];
      lcsEnd2 := lst_Result.Attributes['EdArea2'];
      lcsEnd3 := lst_Result.Attributes['EdArea3'];
      cxtEndAreaDetail.Caption := lst_Result.Attributes['EdArea4'];
      cxtEndAreaDetail.Hint := lst_Result.Attributes['EdArea5'];

      gJONEndChkXY.X := lst_Result.Attributes['DestX'];
      gJONEndChkXY.Y := lst_Result.Attributes['DestY'];

      gJONEndChkXY.GUIDE_X := lst_Result.Attributes['DestX'];
      gJONEndChkXY.GUIDE_Y := lst_Result.Attributes['DestY'];

      cxtEndXval.Text := lst_Result.Attributes['DestX'];
      cxtEndYval.Text := lst_Result.Attributes['DestY'];
      cxtEndXval.Hint := lst_Result.Attributes['DestX'];
      cxtEndYval.Hint := lst_Result.Attributes['DestY'];

			cxtEndGUIDEXval.Text :=	cxtEndXval.Text;
      cxtEndGUIDEYval.Text := cxtEndYval.Text;

      lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;
      cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
      SetDebugeWrite('JON01.cxReEndArea.Text 16100 : ' + cxReEndArea.Text);

      //Application.ProcessMessages;
      // 도착지 세부지명
      if Trim(cxtEndAreaDetail.Hint) <> '' then
        meoEndArea.Text := cxtEndAreaDetail.Hint
      else if Trim(cxtEndAreaDetail.Caption) <> '' then
        meoEndArea.Text := cxtEndAreaDetail.Caption
      else if Trim(lcsEnd3) <> '' then
        meoEndArea.Text := lcsEnd3;

      MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);
   //-------------------------------------------------------------------------------------------
   //      과거내역을 가지고 취소율, 지사별 설정값에 의한 고객등급 결정
   //-------------------------------------------------------------------------------------------
      iend := StrToIntDef(lst_Result.Attributes['EndCnt'], 0);
      iCancel := StrToIntDef(lst_Result.Attributes['CancelCnt'], 0);
      iTotal := iEnd + iCancel;
      lblCuCntTotal.Caption := IntToStr(iTotal);
      lblCoCntTotal.Caption := IntToStr(iend);
      if (iTotal) > 0 then
      begin
        fcancelRate := ((iCancel / (iend + iCancel)) * 100);
        lblCuCancelR.Caption := IntToStr(Round(fCancelRate)) + '%';
      end else
      begin
        lblCuCancelR.Caption := '0%';
      end;

   // 고객등급사용구분[0:자동등급, 1:직접설정]
   //sTemp := lst_Result.Attributes['LevelType'];
   //if sTemp = '0' then begin
      //CU_LEVEL_TYPE : 0 : 고객 등급 자동계산
      iGrade1 := StrToIntDef(lst_Result.Attributes['Grade1'], 5);
      iGrade2 := StrToIntDef(lst_Result.Attributes['Grade2'], 15);
      Application.ProcessMessages;
      if iEnd >= iGrade1 then
      begin
        // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
        Proc_SetFormColor_2(0);
      end else
      if iEnd >= iGrade2 then
      begin
        // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
        Proc_SetFormColor_2(1);
      end else
      begin
        // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
        Proc_SetFormColor_2(2);
      end;

      //CU_LEVEL_TYPE : 1 : 고객 등급 직접입력 설정.
      SetCustLevelSeq(lst_Result.Attributes['LevelCD']);

      nodeList_Result := GetXmlSelectNodeList(rxxml, '/cdms/Service/Data/Customer/ViaInfo/Via');
      if ( nodeList_Result <> Nil ) then
      begin
        iViaCNT := nodeList_Result.Count;
        ViaADDTag := iViaCNT;
        if iViaCNT > 0 then
        begin

          for i := 0 to iViaCNT - 1 do
          begin
            if i = 0 then
            begin
              meoViaArea1.Text := nodeList_Result.Get(i).Attributes['Area5'];
              cxViaAreaName1.Caption := nodeList_Result.Get(i).Attributes['Area1'] + ' '
                                      + nodeList_Result.Get(i).Attributes['Area2'] + ' '
                                      + nodeList_Result.Get(i).Attributes['Area3'];
              ViaSA1[1] := nodeList_Result.Get(i).Attributes['Area1'];
              ViaSA2[1] := nodeList_Result.Get(i).Attributes['Area2'];
              ViaSA3[1] := nodeList_Result.Get(i).Attributes['Area3'];
              ViaAreaDetail[1] := nodeList_Result.Get(i).Attributes['Area4'];
              ViaAreaName[1] := nodeList_Result.Get(i).Attributes['Area5'];
              XposVia[1] := nodeList_Result.Get(i).Attributes['MapX'];
              YposVia[1] := nodeList_Result.Get(i).Attributes['MapY'];
              DocId[1] := '';
              CellSel[1] := '';
              SchWord[1] := '';
            end else
            begin
              meoViaArea[i+1].Text := nodeList_Result.Get(i).Attributes['Area5'];
              cxViaAreaName[i+1].Caption := nodeList_Result.Get(i).Attributes['Area1'] + ' '
                                          + nodeList_Result.Get(i).Attributes['Area2'] + ' '
                                          + nodeList_Result.Get(i).Attributes['Area3'];
              ViaSA1[i+1] := nodeList_Result.Get(i).Attributes['Area1'];
              ViaSA2[i+1] := nodeList_Result.Get(i).Attributes['Area2'];
              ViaSA3[i+1] := nodeList_Result.Get(i).Attributes['Area3'];
              ViaAreaDetail[i+1] := nodeList_Result.Get(i).Attributes['Area4'];
              ViaAreaName[i+1] := nodeList_Result.Get(i).Attributes['Area5'];
              XposVia[i+1] := nodeList_Result.Get(i).Attributes['MapX'];
              YposVia[i+1] := nodeList_Result.Get(i).Attributes['MapY'];
              DocId[i+1] := '';
              CellSel[i+1] := '';
              SchWord[i+1] := '';
            end;
          end;
          pSetFormScroll(0, iViaCNT * 22 );

          // 수정후 지도보기 클릭 시 좌표 사용하기 위해 처리
          for i := 0 to iViaCNT - 1 do
          begin
            if XposVia[i+1] <> '' then
            begin
              GT_PASS_INFO[Self.Tag][i].AREA1 := ViaSA1[i+1];
              GT_PASS_INFO[Self.Tag][i].AREA2 := ViaSA2[i+1];
              GT_PASS_INFO[Self.Tag][i].AREA3 := ViaSA3[i+1];
              GT_PASS_INFO[Self.Tag][i].AREA4 := ViaAreaDetail[i+1];
              if i = 0 then
                GT_PASS_INFO[Self.Tag][i].AREA5 := meoViaArea1.Text
              else
                GT_PASS_INFO[Self.Tag][i].AREA5 := meoViaArea[i+1].Text;
              GT_PASS_INFO[Self.Tag][i].DOCID := DocId[i+1];
              GT_PASS_INFO[Self.Tag][i].CELLS := CellSel[i+1];
              GT_PASS_INFO[Self.Tag][i].SWORD := ViaAreaDetail[i+1];
              GT_PASS_INFO[Self.Tag][i].MAP_X := XposVia[i+1];
              GT_PASS_INFO[Self.Tag][i].MAP_Y := YposVia[i+1];
            end;
          end;
          meoStartArea.Text := meoStartArea.Text + ' '; //수정창에서 경유지명 따로 분리하기위함  gsStArea[iRow]   20190123 KHS
          meoStartArea.Text := Trim(meoStartArea.Text);

          meoViaArea1.Enabled := True;
          cxViaAreaName1.Enabled := True;
          BtnViaAdd.Enabled := True;
          cb_02.Down := True;
        end;
      end;

      lst_Result := GetXmlSelectNode(rxxml, '/cdms/Service/Data/Customer');
      if lst_Result = Nil then Exit;

			/////////////////콜벨 20161231 KHS////////////////////////////////
			if lst_Result.Attributes['CallBellStatus'] = '1' then  //콜벨상태(1:정상, 2:해지, null: 콜벨 업소 설정 없음)
			begin
				pnlCallBell.visible := True;
				pnlCallBell.Top  := CbCuGb.Top -8;
				pnlCallBell.Left := cxtCuBubin.Left;
			end	else
			begin
				pnlCallBell.visible := False;
			end;
			pnlCallBell.Caption := '+++++++콜벨 업소+++++++';
			pnlCallBellAll.visible := False;
			pnlCallBell.Hint := lst_Result.Attributes['CallBellStatus'];
			gsCuCallBellID := lst_Result.Attributes['CallBellMemId'];
			/////////////////콜벨 20161231 KHS////////////////////////////////

			if FHidePhoneNum then
			begin
        cxtCuTel.Text := '***********';
      end else
      begin
				sCustTel    := lst_Result.Attributes['CustTel'];
        if cxtJoinNum.Tag = 1 then  // 오더 구분값 cxtJoinNum.Tag --> 1:오늘(CDMS_A01_Today), 2:과거(CDMS_A01)
        begin
          cxtCuTel.Text := func_Cust_Tel(sCustTel, locBrNo, sAccCenter, True);   // sBrNo
        end else
        begin
          cxtCuTel.Text := func_Cust_Tel(sCustTel, locBrNo, sAccCenter, False);
        end;
      end;
			cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
			
      // 조회당시 마킹된 또는 정상적인 전화번호 정보를 저장하고, 수정할때, 전화번호가 변경되었는지 비교자료로 사용함. cds. 090421.
			locsCuTelTxtBoxVal:= cxtCuTel.Text;

			//cxtCuTel.Text := lst_Result.Attributes['CustTel']; // 전화1
			cxtCuTel2.Text := lst_Result.Attributes['CustTel2']; // 전화2
      //locsCuTel := cxtCuTel.Text;
      locsCuTel := sCustTel;
			// 전화번호 감출경우(권한없을때) 수정저장시 이값을 참조.
      locsCuTel2 := cxtCuTel2.Text;
      // 전화번호 감출경우(권한없을때) 수정저장시 이값을 참조.
			gsCuTelHint := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]); // 고객 조회 전화번호 저장.
      sTemp := lst_Result.Attributes['PreTime'];
      // 예약시간
      if Length(Trim(sTemp)) > 17 then
      begin
        dtpResvDate.Text := Copy(sTemp, 1, 10); // 예약시간
        dtpResvTime.Text := Copy(sTemp, 12, 5);
//        dtpResvDate.Enabled := (OrderState = 'R');
//        dtpResvTime.Enabled := (OrderState = 'R');
        try
          sTemp := lst_Result.Attributes['ConfPreRealTime'];
          dtpResvDateJ.Tag := 1;
          dtpResvTimeJ.Tag := 1;
          CbSecond.Tag := 1;
          try
            dtpResvDateJ.Text := Copy(sTemp, 1, 10); // 예약시간
            dtpResvTimeJ.Text := Copy(sTemp, 12, 5);
            dtpResvDateJ.Enabled := (OrderState = 'R');
            dtpResvTimeJ.Enabled := (OrderState = 'R');
            CbSecond.Enabled := (OrderState = 'R');

            sDT := StrToDateTime(FormatDateTime('YYYY-MM-DD', dtpResvDateJ.date) + ' ' +
                                 FormatDateTime('HH:NN:SS'  , dtpResvTimeJ.Time));

            eDT := StrToDateTime(FormatDateTime('YYYY-MM-DD', dtpResvDate.date) + ' ' +
                                 FormatDateTime('HH:NN:SS'  , dtpResvTime.Time));

            iTmp := MinutesBetween(sDt, eDt);

            CbSecond.ItemIndex := CbSecond.Properties.Items.IndexOf(IntToStr(iTmp));
          finally
            dtpResvDateJ.Tag := 0;
            dtpResvTimeJ.Tag := 0;
            CbSecond.Tag := 0;
          end;
        Except
        end;

				BitMap1 := TBitMap.Create;
        try
          BitMap1.LoadFromFile(ExtractFilePath(Application.ExeName) + '\Image\Alarm.bmp');
          BtnResvView.Glyph := TdxSmartGlyph(BitMap1);
        finally
					BitMap1.Free;
        end;

				sTemp := FormatDateTime('YYYY-MM-DD', dtpResvDate.Date) + ' ' + FormatDateTime('HH:NN:SS', dtpResvTime.Time);
        if BtnResJ.Down then sTemp := sTemp + ' [접수] 상태로 예약' else
        if BtnResD.Down then sTemp := sTemp + ' [대기] 상태로 예약';

        BtnResvView.Hint := sTemp;
        BtnResvView.ShowHint := True;

        BtnResv.Tag := 1;
      end;
      sTemp := Trim(lst_Result.Attributes['PriceYN']);
      // 요금 미지정
      if sTemp = 'y' then
        chkNoSet.Down := True // 요금 미지정
      else
        chkNoSet.Down := False;

      // hjf-고객상황실설정(수정정보 조회)
      if lst_Result.HasAttribute('CuBrTelYN') then
        CustBrTelYN := lst_Result.Attributes['CuBrTelYN'];

      sTemp := Trim(lst_Result.Attributes['CuCallingOption']);
      if sTemp = '1' then cbTelView.ItemIndex := 0 else
      if sTemp = '2' then cbTelView.ItemIndex := 1 else
      if sTemp = 'c' then cbTelView.ItemIndex := 2;

      sTemp := Trim(lst_Result.Attributes['BrTelYN']);
      // 상황실 번호 보기..
      if sTemp = 'y' then
      begin
        BtnCenterMng.Down := True;
        BtnCenterMng.Visible := True;
      end else
      if sTemp = 'n' then
      begin
        BtnCenterMng.Down := False;
				BtnCenterMng.Visible := True;
      end else
      begin
        BtnCenterMng.Down := False;
        BtnCenterMng.Visible := False;
      end;

      sTemp := lst_Result.Attributes['AuthUrl'];

      if bAutoWorkChk then   // 추가접수인데 기사송금수수료자동설정오더이면 초기화
				meoBigo.Text := ''
      else
        meoBigo.Text := lst_Result.Attributes['ConfInfo'];

      // 적요

//      sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Option').text;  'option' 사용중지 '20141202  LYB
//      if sTemp = 'M' then
//        BtnOptionSexM.Down := True
//      else if sTemp = 'F' then
//        BtnOptionSexF.Down := True
//      else
//      begin
//        BtnOptionSexM.Down := False;
//        BtnOptionSexF.Down := False;
//      end;

      sTemp := lst_Result.Attributes['DriverOption'];

      if Copy(sTemp,1,1) = 'M' then
        BtnOptionSexM.Down := True
      else
      if Copy(sTemp,1,1) = 'F' then
        BtnOptionSexF.Down := True
      else
      begin
        BtnOptionSexM.Down := False;
        BtnOptionSexF.Down := False;
      end;

			sStickCall := Copy(sTemp,2,1);
			sTaksong   := Copy(sTemp,3,1);
			sTakHwak   := Copy(sTemp,4,1);
			sLicType   := Copy(sTemp,5,2);	
					
			if sStickCall = 'y' then cb_04.Down := True;
			if sTaksong = 'y' then 
			begin
				sTemp := lst_Result.Attributes['ConsShareYn'];
				if sTemp <> 'y' then //탁송연합콜이 아닐경우에만
					cb_00.Down := True;
			end;

			if GS_PRJ_AREA = 'S' then
			begin
				if sTakHwak = 'y' then 
				begin
					cb_00.Down := False;
					cb_06.Down := True;
					pnlWkLicType.visible := True;
					try
						cbbLicType.ItemIndex := cbbLicType.Properties.Items.IndexOf(GetLicTypeValue(sLicType));
					except
						cbbLicType.ItemIndex := 0;
          end;
				end;
			end;

      // 경유요금 :::::::: 신버전 추가 기능 개발..(법인기능요청으로,,개발,,)
			cxCurPathRate.Text := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['ViaCharge'], 0));
			// 대기요금
			cxCurWaitTmRate.Text := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['WaitCharge'], 0));
      // 대기요금
			sTemp := Trim(lst_Result.Attributes['WaitTime']);
			// 대기시간
      if Length(sTemp) > 3 then
      begin
        cxTmWaitTime.Text := Copy(sTemp, 1, 5); // 대기시간
				curKm.Text := Copy(sTemp, 6, 7) + 'Km'; // 요금 Km 값
        fCruKm := StrToFloatDef(Copy(sTemp, 6, 7), 0);
      end else
        cxTmWaitTime.Text := '00:00';

			cxCurRevisionRate.Text := formatfloat('#,##0', StrToFloatDef(lst_Result.Attributes['AddCharge'], 0));
      sTemp := lst_Result.Attributes['ConfInfo2']; // 적요투(2)
      meoBigo2.Text := ReplaceAll(sTemp, '|', CRLF);

      sTemp := lst_Result.Attributes['ConfInfo3']; // 적요투(3)
      meoBigo3.Text := ReplaceAll(sTemp, '|', CRLF);
			cxDriverCharge.Text := lst_Result.Attributes['DriverCharge']; // 기사수수료

			//2013.03.30 khs
      sAppCode        := lst_Result.Attributes['AppCode'];
      sAppLastRegDate := lst_Result.Attributes['AppLastRegDate'];
      sAppLastDelDate := lst_Result.Attributes['AppLastDelDate'];
      sAppLastFinishDate := lst_Result.Attributes['AppLastFinishDate'];
      sAppCuArea      := lst_Result.Attributes['AppCuArea'];
      sAppTermModel   := lst_Result.Attributes['AppGroup'] + '/'
                       + lst_Result.Attributes['AppTermOS'] + '/'
                       + lst_Result.Attributes['AppTermModel'];
      sAppTermOS      := lst_Result.Attributes['AppVersion'];

			sAppDelYn       := lst_Result.Attributes['AppDelYn'];
			if sAppDelYn = 'y' then sAppDelYn := '어플삭제'
			else sAppDelYn := '어플사용';

			if sAppCode = '' then btnCustAppinfo.Enabled := False
                  	   else btnCustAppinfo.Enabled := True;
			SetCustAppInfo(
					sAppCode
				, sAppLastRegDate
				, sAppLastDelDate
				, sAppLastFinishDate
				, sAppCuArea
				, sAppTermModel
				, sAppTermOS
				, sAppDelYn
			);
      if iBarIndex = 3 then
      begin
        if lst_Result.Attributes['TaxType'] = '1' then
        begin
          lbBubinStateName.Caption := '이용정지';
          lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
          pnlBubinState.Visible := True;
          trmBubinState.Enabled := True;
          ABubinStateIndex := 1;
        end else
        if lst_Result.Attributes['TaxType'] = '2' then
        begin
          lbBubinStateName.Caption := '계약해지';
          lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
          pnlBubinState.Visible := True;
          trmBubinState.Enabled := True;
          ABubinStateIndex := 2;
        end else
//        if lst_Result.Attributes['TaxType'] = '0' then
        begin
          lbBubinStateName.Caption := '정상이용';
          lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
          pnlBubinState.Visible := False;
          trmBubinState.Enabled := False;
          ABubinStateIndex := 0;
        end;
      end else
      begin
        lbBubinStateName.Caption := '정상이용';
        lbBubinStateMemo.Caption := lst_Result.Attributes['TaxTypeMemo'];
        pnlBubinState.Visible := False;
        trmBubinState.Enabled := False;
        ABubinStateIndex := 0;
      end;

      sTemp := Trim(lst_Result.Attributes['ConfOptions']);
      // 콜무 사용 여부
      if Copy(sTemp, 1, 1) = 'y' then
        BtnOptionCallMu.Down := True // 수수료 없음
      else
        BtnOptionCallMu.Down := False;

			sContent := StringReplace(lst_Result.Attributes['CuMemo'], '|', '¶', [rfReplaceAll]);
      if Trim(sContent) <> '' then
      begin
  			GetTextSeperationEx2('¶', sContent, ls_Rcrd);
	  		for ia := 0 to ls_Rcrd.Count - 1 do
		  	begin
          if ia = 0 then
            edt_CardMemo.Text := ls_Rcrd[ia]
          else
            edt_CardMemo.Text := edt_CardMemo.Text + #13#10 + ls_Rcrd[ia];
  			end;
			end;

			if GS_FormType = 'Normal' then
      begin
        edt_CardMemo.Top := meoCuWorMemo.Top + meoCuWorMemo.Height + 2;
				edt_CardMemo.Height := 29;
      end;
				
			if ( TCK_USER_PER.JON_CUSTMEMO2 <> '1') then
      begin
        if edt_CardMemo.Lines.Count = 1 then BtnSimMemo.Enabled := False
                                        else BtnSimMemo.Enabled := True;
      end;

			FreeAndNil(ls_Rcrd);

    end else
    begin
      GMessagebox(MSG012 + CRLF + ls_Msg_Err, CDMSE);
    end;

    // CID 조회 일때는 발신전화없음 멘트 감춤..
    if Pos('*', cxtCuTel.Text) > 0 then
			cxtCallTelNum.Text := locsCuTel // 고객전화번호 읽기.
    else
			cxtCallTelNum.Text := cxtCuTel.Text; // 발신전화번호
		cxtCallTelNum.StyleDisabled.TextColor := $00FAE1CD;
    // 진한 칼라 : $00555151,   // 옅은 칼라 : $00FAE1CD;

 // 당일오더에 대해서만 Lock을 걸어준다.
    if (btnCmdUpdSave.Enabled = True) and (cxtJoinNum.Tag = 1) then
      Proc_AcceptLock('1'); // 오더 수정 Lock을 설정.

{    frm_Jon03.frmJON011[Self.Tag].btnUpdate.Enabled := True;
    frm_JON03.frmJON011[Self.Tag].btnOKCashback.Enabled := True;
    frm_Jon03.frmJON011[Self.Tag].btnMileOut.Enabled := True;
    frm_Jon03.frmJON011[Self.Tag].btnMileCharge.Enabled := True;
    frm_Jon03.frmJON011[Self.Tag].cxBtnMileList.Enabled := True;
}

    // 지사변경 제한.[이유:고객조회 후 지사변경시 조회한 고객정보 일부유실 경고메시지 띄우기 위함임]
//    cboBranch.Properties.ReadOnly := True;

    pnlJonMain.Enabled := True;
    //JobProcessLight(False);
    if Self.Visible = True then
    begin
			meoStartArea.SetFocus;
			meoEndArea.SetFocus;
			meoStartArea.SetFocus;
    end;

		if GS_AUTO_LOCK_START then //수정창 오픈시 자동잠금 사용이면 자동잠금 자동설정 20171002 KHS
		begin
			BtnStLock.Down := True;
			BtnStLock.Click;
		end;
		if GS_AUTO_LOCK_END then //수정창 오픈시 자동잠금 사용이면 자동잠금 자동설정 20171002 KHS
		begin
			BtnEdLock.Down := True;
			BtnEdLock.Click;
		end;
		if GS_AUTO_LOCK_CHARGE then //수정창 오픈시 자동잠금 사용이면 자동잠금 자동설정 20171002 KHS
		begin
			BtnRaLock.Down := True;
			BtnRaLock.Click;
		end;

    GB_JON03SELECT_GB := True;
    // 접수현황에서 수정전문 요청시 결과받았는지의 여부.

    Frm_JON012.cxlbSlip.Caption := cxtJoinNum.Text;
    // 오더접수번호
    cxtCallTelNum.Text := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
    Frm_JON012.cxlbCustTel.Caption := locsCuTel; // 고객전화번호 읽기.
		Frm_JON012.cxlbKeyNum.Caption := Proc_MainKeyNumberSearch; // 대표번호 읽기.

    cxCallTitle.Caption := cxCallTitle.Hint + strtocall(cxtCuTel.Text);

    for i := 0 to 19 do
    begin
      if Frm_Main.JON01MNG[i].Tag = Self.Tag then
      begin
        Frm_Main.JON01MNG[i].Caption := cxCallTitle.Caption;
        Break;
      end;
    end;
		gsUpdateCallBellID := '';
		gsUpdateCallBellStatus := '';
		if gs_CallBellUse then
		begin
			if (gsCuCallBellID = '') and (gsOrderCallBellID = '') then             //둘다 일반업소이면
			else
			if (sOrderCallBellStatus <> '1') and (pnlCallBell.Hint <> '1') then    //둘다 일반업소이면(상태가 1이 아니면 일반업소)
			else
			if (gsCuCallBellID <> gsOrderCallBellID) or (sOrderCallBellStatus <> pnlCallBell.Hint) then                          //둘중 하나가 콜벨업소
			begin
				if gsCuCallBellID = ''    then iTmp := 0 else
				if gsOrderCallBellID = '' then iTmp := 1 else 
				if (gsCuCallBellID    <> '') and (pnlCallBell.Hint     <> '1') then iTmp := 0 else
				if (gsOrderCallBellID <> '') and (sOrderCallBellStatus <> '1') then iTmp := 1 else
				iTmp := 2;

				case iTmp of
					0 : msg := '콜벨업소가 일반업소로'; //콜벨업소 -> 일반업소로 변경
					1 : msg := '일반업소가 콜벨업소로'; //일반업소 -> 콜벨업소로 변경
					2 : msg := '콜벨업소의 정보가';     //콜벨업소ID 변경
				end;
				msg := msg + ' 변경되어있습니다.' + #13#10 + '변경된 업소정보로 오더를 수정하시려면 [예]를 선택하십시오'
									 + #13#10#13#10 + '***업소정보는 오더수정버튼을 눌러야 적용됩니다***';
			
				if Application.MessageBox(PChar(msg), CDMSI, MB_YESNO +
					MB_ICONQUESTION + MB_DEFBUTTON1) = IDYES then
				begin
					gsUpdateCallBellID := gsCuCallBellID;       //고객정보의 CallBellID로 오더정보변경
					gsUpdateCallBellStatus := pnlCallBell.Hint;
				end	else
				begin
					gsUpdateCallBellID := gsOrderCallBellID; //오더정보의 CallBellID 유지
					gsUpdateCallBellStatus := sOrderCallBellStatus;
				end;
			end else
			begin
				gsUpdateCallBellID := gsOrderCallBellID; //오더정보의 CallBellID 유지
				gsUpdateCallBellStatus := sOrderCallBellStatus;
			end;
		end else
		begin  
			gsUpdateCallBellID := gsOrderCallBellID; //오더정보의 CallBellID 유지
			gsUpdateCallBellStatus := sOrderCallBellStatus;
		end;
//- 		proc_ViaInfo;
	except
		on e: exception do
    begin
			sTemp := 'JON01[Proc_ConfSlipSelectResult][수정조회결과]예외처리 발생:'
        + e.Message;
      ShowMessage(sTemp);
      GB_JON03SELECT_GB := True;
      // 접수현황에서 수정전문 요청시 결과받았는지의 여부.

      Assert(False, E.Message);
    end;
  end;
end;

// 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
procedure TFrm_JON01.Proc_Cust_AreaSave(sStartDest: string);
var
  ls_TxLoad, ls_TxQry, sCl_Key, sQueryTemp : string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  ErrCode: integer;
begin
  SetDebugeWrite('JON01.Proc_Cust_AreaSave');
  if lcsCu_seq = '' then
  begin
    GMessagebox('고객 일련번호가 없습니다. 고객정보를 조회 한 다음 [저장] 하세요!', CDMSI);
    Exit;
  end;
  if cxtCallTelNum.Text = '' then
  begin
    GMessagebox('고객 전화번호가 없습니다. 고객정보를 조회 한 다음 [저장] 하세요!', CDMSI);
    Exit;
  end;

  if sStartDest = 'START' then
  begin
    // 출발지 정보를 저장.
    fGet_BlowFish_Query(GSQ_CUSTOMER_START_SAVE, sQueryTemp);
    ls_TxQry := Format(sQueryTemp, [lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text, lcsCu_seq]);
    sCl_Key := 'CUSE0011';
  end else
  begin
    // 도착지 정보를 저장.
    fGet_BlowFish_Query(GSQ_CUSTOMER_DEST_SAVE, sQueryTemp);
    ls_TxQry := Format(sQueryTemp, [lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, lcsCu_seq]);
    sCl_Key := 'CUSE0012';
  end;

  try
    ls_TxLoad := GTx_UnitXmlLoad('QUERY.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', sCl_Key);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'QueryString', ls_TxQry);

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;

  except
    on e: exception do
    begin
      pnlJonMain.Enabled := True;
      Screen.Cursor := crDefault;

      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01.Proc_Cust_History(sCuSeq: string);
var
	ls_TxLoad, sCustTell, sKeyNumber, sConfSlip: string;
  i, j: Integer;
begin
	SetDebugeWrite('JON012.Proc_CustOldSelect');
  try

		Frm_JON012.cxGVeOrderList.DataController.SetRecordCount(0);
		Frm_JON012.cxGVeOrderList.DataController.Filter.Clear;
		Frm_JON012.cxGVeOrderList.DataController.Filter.Active := False;
		Frm_JON012.cxlbSlip.Caption := cxtJoinNum.Text;
		Frm_JON012.cxlbCustTel.Caption := cxtCuTel.Text;
		Frm_JON012.cxlbKeyNum.Caption := Proc_MainKeyNumberSearch;
		Frm_JON012.cxBtnOldSelect.Tag := 0; //고객변경 후 과거이용내역 버튼 눌렀는지 값 초기화   2016.08.11 KHS

    if pnlShare.Visible then
    begin
			Frm_JON012.Tag := Self.Tag;
      Frm_JON012.Jon03Tag := Self.Jon03Tag;
      Frm_JON012.cxBtnOldSelect.Tag := 0;

      sCuSeq := lcsCu_seq;
    end;

		if lcsCu_seq = '' then Exit;
		
		// 전문 정보를 작성한다.
		ls_TxLoad := GTx_UnitXmlLoad('C037N4.XML');
		ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'CUOD0010', [rfReplaceAll]); // 고객이용내역을 조회 한다.
		ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', En_Coding('0'), [rfReplaceAll]); // 오더접수번호
		ls_TxLoad := StringReplace(ls_TxLoad, 'CustSeqString', sCuSeq, [rfReplaceAll]);   //고객이용내용 조회용 고객 seq
		ls_TxLoad := StringReplace(ls_TxLoad, 'TodayYnString', 'y', [rfReplaceAll]);   //고객이용내용 조회용 고객 seq

    Application.ProcessMessages;
		Screen.Cursor := crHourGlass;
		LocNewSocketSend(ls_TxLoad); // 전문을 요청한다.
	except on e: exception do
    begin
      Log('Proc_CustOldSelect Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_CustOldSelect Error :' + E.Message);
    end;
  end;
end;

function TFrm_JON01.IsBubuinUse: Boolean;
begin
	Result := GB_JON_USEBUBIN;
end;

function TFrm_JON01.func_ViaCheck(AStart: String): Boolean;
var
	sTmp, sTmp2: string;
begin
//(/경유|경유/|(경유|경유)| 경유|경유 )
	SetDebugeWrite('JON01.func_ViaCheck');
	Try
		result := False;
		if (GS_PRJ_AREA = 'S') then
		begin
			sTmp := AStart;
			sTmp2 := '/경유';  if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := '경유/';  if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := '(경유';  if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := '경유)';  if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := ' 경유'; if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := '경유 '; if pos(sTmp2, sTmp) > 0 then result := True;
		end;

	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

// 경유지 포함 거리 계산
procedure TFrm_JON01.proc_dis_alculation(iLow: Integer; bDisp : Boolean);
var
	i: Integer;
  fdis: double;
begin
  SetDebugeWrite('JON01.proc_dis_alculation');
  try
    if (cxtStartXval.Text = '') or (cxtStartYval.Text = '') or
  		 (cxtEndXval  .Text = '') or (cxtEndYval  .Text = '') then Exit;

  	if GT_PASS_INFO[iLow][0].AREA1 = '' then
    begin
      fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
        cxtStartXval.Text, cxtStartYval.Text, cxtEndXval.Text, cxtEndYval.Text)
        * StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

      if GT_DISTANCE_ST = 1 then
        fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
          cxtStartXval.Text, cxtStartYval.Text, cxtEndXval.Text, cxtEndYval.Text), ffNumber, 3, 1), 0.0);  // 배수 없는 직선거리 임시 저장
    end else
    if GT_PASS_INFO[iLow][1].AREA1 = '' then
    begin
  		fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text, cxtStartYval.Text, GT_PASS_INFO[iLow][0].MAP_X,
        GT_PASS_INFO[iLow][0].MAP_Y) * StrToFloatDef(CHARGE_DIS, 1.0),
        ffNumber, 3, 1), 0.0)
  			+ StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			GT_PASS_INFO[iLow][0].MAP_X, GT_PASS_INFO[iLow][0].MAP_Y,
        cxtEndXval.Text, cxtEndYval.Text) * StrToFloatDef(CHARGE_DIS, 1.0),
        ffNumber, 3, 1), 0.0);

      if GT_DISTANCE_ST = 1 then
        fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
    			cxtStartXval.Text, cxtStartYval.Text, GT_PASS_INFO[iLow][0].MAP_X,
          GT_PASS_INFO[iLow][0].MAP_Y), ffNumber, 3, 1), 0.0)
    			+ StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
    			GT_PASS_INFO[iLow][0].MAP_X, GT_PASS_INFO[iLow][0].MAP_Y,
          cxtEndXval.Text, cxtEndYval.Text), ffNumber, 3, 1), 0.0);  // 배수 없는 직선거리 임시 저장
    end else
    begin
      i := 1;
      fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
        cxtStartXval.Text, cxtStartYval.Text, GT_PASS_INFO[iLow][0].MAP_X,
        GT_PASS_INFO[iLow][0].MAP_Y) * StrToFloatDef(CHARGE_DIS, 1.0),
        ffNumber, 3, 1), 0.0);

      if GT_DISTANCE_ST = 1 then
        fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
          cxtStartXval.Text, cxtStartYval.Text, GT_PASS_INFO[iLow][0].MAP_X,
          GT_PASS_INFO[iLow][0].MAP_Y), ffNumber, 3, 1), 0.0);  // 배수 없는 직선거리 임시 저장
      while i <= 4 do
      begin
				if GT_PASS_INFO[iLow][i].AREA1 = '' then break;

  			fDis := fDis +
  				StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
          GT_PASS_INFO[iLow][i - 1].MAP_X, GT_PASS_INFO[iLow][i - 1].MAP_Y,
  				GT_PASS_INFO[iLow][i].MAP_X, GT_PASS_INFO[iLow][i].MAP_Y) *
  				StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

        if GT_DISTANCE_ST = 1 then
          fDirKm := fDirKm +
    				StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
            GT_PASS_INFO[iLow][i - 1].MAP_X, GT_PASS_INFO[iLow][i - 1].MAP_Y,
    				GT_PASS_INFO[iLow][i].MAP_X, GT_PASS_INFO[iLow][i].MAP_Y), ffNumber, 3, 1), 0.0); // 배수 없는 직선거리 임시 저장

        inc(i);
      end;
      fDis := fDis + StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
        GT_PASS_INFO[iLow][i - 1].MAP_X, GT_PASS_INFO[iLow][i - 1].MAP_Y,
        cxtEndXval.Text, cxtEndYval.Text) * StrToFloatDef(CHARGE_DIS, 1.0),
        ffNumber, 3, 1), 0.0);

      if GT_DISTANCE_ST = 1 then
        fDirKm := fDirKm + StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
          GT_PASS_INFO[iLow][i - 1].MAP_X, GT_PASS_INFO[iLow][i - 1].MAP_Y,
          cxtEndXval.Text, cxtEndYval.Text), ffNumber, 3, 1), 0.0);
    end;

    if Not bDisp then Exit;

    if ( GT_DISTANCE_ST = 0 ) then
    begin
      curKm.Text := FloatToStr(fDis) + 'Km';
      fCruKm := fDis;
      fTotalTime := 0;   // 직선거리이면 소요시간 0
      Lbl_Distance.Caption := '';
    end else
    if ( GT_DISTANCE_ST = 1 ) then
    begin
      fChgKm := fDis;
      Lbl_Distance.Caption := Format(' 직선)%s', [FloatToStr(fDis) + 'Km']);
    end;
		Application.ProcessMessages;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01.IsNotModifyPrice: Boolean;
begin
  // 수정[완료/문의/취소] 건 경우 요금항목에 포커스시에만 요금 계산
	Result := ((Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['2', '4', '8']));
end;

procedure TFrm_JON01.LoadCustLevel;
begin
  SetDebugeWrite('JON01.LoadCustLevel');
  GetCustGroup(Proc_MainKeyNumberSearch, CustGroup);
  SetCustLevelData;
end;

function TFrm_JON01.IsMultiCallFixPrice: Boolean;
begin
  Result := False;
  if gsMyRateRemarkMaintain = 'FALSE' then Exit;
  if Assigned(Frm_JON015) and Frm_JON015.HandleAllocated and (Frm_JON015.OrderHandle = Self.Handle) then Result := True;
end;

//--------------------------------------------------------------------------------------------------
//      요금설정에 의한 요금 계산
//  2011.02.16 심야할증요금 추가
//--------------------------------------------------------------------------------------------------
function TFrm_JON01.func_LBS_YN: Boolean;
var sTmp : string;
	iTmp : integer;
begin
	SetDebugeWrite('JON01.func_LBS_YN');
	try
		Result := False;
		if ((GT_OCX = 'SSIT') or (GT_OCX = 'SI415')) and          //IPCC or si415
			 (Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber) <> '') and (GS_JONCidInput.CidCall) then // CID 직접콜링 and 팝업전송이 아닐때
		begin
			sTmp := Proc_BRNOSearch;
			if sTmp <> '' then 
			begin
				iTmp := scb_BranchCode.IndexOf(sTmp);
				if scb_LBS[iTmp] = 'y' then Result := True else Result := False;
			end;
		end;
	except
		Result := False;
	end;
end;

function TFrm_JON01.func_MilePayMileSave_YN: Boolean;
var sTmp : string;
	iTmp : integer;
begin
	SetDebugeWrite('JON01.func_MilePayMileSave_YN');
	try
		Result := False;
		sTmp := Proc_BRNOSearch;
		if sTmp <> '' then 
		begin
			iTmp := scb_BranchCode.IndexOf(sTmp);
			if scb_MilePayMileSave[iTmp] = 'y' then Result := True else Result := False;
		end;
	except
		Result := False;
	end;
end;

function TFrm_JON01.func_ResToJoin(AGubun, ASlip, AStatus: string): Boolean;
var
	ls_TxLoad : string;
	sOrderInfo : TORDERINFO;
	rv_str: string;
	ls_rxxml: String;
	slReceive: TStringList;
	ErrCode: integer;
	Msg : string;
begin
	try
		Result := False;
		ls_TxLoad := GTx_UnitXmlLoad('C007.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'ResToJoin', [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', ASlip, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'CurStatusString', AStatus, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID), [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'GubunCodeString', AGubun, [rfReplaceAll]); //6 = 대기해제

		slReceive := TStringList.Create;
    try
			if Dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
				begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
					proc_recieve(ls_rxxml);
					Result := bResToJoin;
				end;
      end;
    finally
      FreeAndNil(slReceive);
    end;
	except
    on E: Exception do
    begin
      Assert(False, E.Message);
      ls_TxLoad := 'Jon03[pm_CanReResClick]Error : ' + e.Message;
      GMessagebox(PChar(ls_TxLoad), CDMSE);
    end;
  end;
end;

function TFrm_JON01.func_search_charge: Integer;
type
  TPREM_TIMES = record
    ST_TIME:string;
    ED_TIME:string;
    AMT: integer;
    mYn: Boolean;
  end;
var
  AreaType, AType : Integer;
  sType, sType2, sFirstCD, sPassCode, sPassViewCode, sPassGubun, sOrgDis, sKeyNumber: string;
  TotalPrice, PassPrice, TotalDis, PassDis, ipasscnt, iPassValue, i: Integer;
  fOrgDis: Double;
  PriceInfo, PricePassInfo, PriceDesc: string;
  nn: integer;
  PREM_TIMES: array of TPREM_TIMES;
  PREM_DESC: string;  // pnl_charge.caption 에 요금정보를 추가하기 위한 문자열
  bOpen : Boolean;

  oOderWorker, oWeather, iType, oType : String;
  iSmartRate : Integer;
  SSLat, SSLon, SELat, SELon  : string;
   chnSDong, chnEDong, sQuery : string;

  function Get_Prem_Price(base_amt: Integer; sKeyNum: string): integer;
   var
      base_time: string;
   //  base_time2: string;
      tm_Amt: integer;
      sQuery: string;
      n1: integer;
      function GET_PREM_TIMES: integer;
      var
         n2: integer;
         cInt1: integer;
      begin
         try
            cInt1:=-1;
            if Length(PREM_TIMES)<=0 then
            begin
               result:=0
            end else
            begin
               for n2 :=0 to Length(PREM_TIMES) -1 do
               begin
                  if PREM_TIMES[n2].ST_TIME<=PREM_TIMES[n2].ED_TIME then
                  begin
                     if (PREM_TIMES[n2].ST_TIME<=base_time) and (PREM_TIMES[n2].ED_TIME>=base_time) then
                     begin
                        PREM_TIMES[n2].mYn:=true;
                        cInt1:=n2;
                     end;
                  end else
                  begin
                     if not((PREM_TIMES[n2].ED_TIME<base_time) and (PREM_TIMES[n2].ST_TIME>base_time)) then
                     begin
                        PREM_TIMES[n2].mYn:=true;
                        cInt1:=n2;
                     end;
                  end;
               end;
               if cInt1=-1 then
                  result:=0
               else
               begin
                  PREM_DESC := ' (+심야할증요금 : '+formatfloat('#,##0',PREM_TIMES[cInt1].AMT)+'원)';
                  result:=PREM_TIMES[cInt1].AMT;
               end;
            end;

            ZeroMemory(@PREM_TIMES, Length(PREM_TIMES));
         except
            result:=0;
         end;
      end;
   begin
      try
         base_time := frm_Main.func_sysdate;
         base_time := Copy(base_time,9,2)+':'+copy(base_time,11,2);

         tm_amt := 0;
         if CHARGE_GUBUN = 'P' then
         begin
            // 20110601 LYB 추가  법인 할증 요금제 조회 후 없으면 기본 할증 요금제 조회
            sQuery := 'select A1.PREM_STTIME,A1.PREM_EDTIME,A3.RESULT_AMT from CDMS_BGROUP_CHARGE_TYPE A1, CDMS_PREM_MAST A2, CDMS_PREM_DETAIL A3 WHERE A1.CT_KEY_NUM = ''' + sKeyNumber + '''  AND A1.CT_CB_CODE  = ''' + cxtCuBubin.Hint + ''' AND TRIM(A1.PREM_STTIME)<>'''' AND TRIM(A1.PREM_EDTIME)<>'''' AND A1.prem_nseq=A2.nseq and A2.nseq=A3.nseq and A3.ST_AMT <= ' + IntToStr(base_amt) + ' and A3.ED_AMT >= ' + IntToStr(base_amt) ;
            dmCharge.proc_SQLite_init;
            dmCharge.FDQuery_SQLite.close;
            dmCharge.FDQuery_SQLite.SQL.Text := sQuery;
            dmCharge.FDQuery_SQLite.open;

            if dmCharge.FDQuery_SQLite.RecordCount = 0 then
            begin
                tm_Amt:=0;
            end else
            begin
               SetLength(PREM_TIMES, dmCharge.FDQuery_SQLite.RecordCount);
               dmCharge.FDQuery_SQLite.FindFirst;
               for n1:=0 to dmCharge.FDQuery_SQLite.RecordCount - 1 do
               begin
                  PREM_TIMES[n1].ST_TIME := dmCharge.FDQuery1.Fields[0].AsString;
                  PREM_TIMES[n1].ED_TIME := dmCharge.FDQuery1.Fields[1].AsString;
                  PREM_TIMES[n1].AMT := dmCharge.FDQuery1.Fields[2].AsInteger;
                  PREM_TIMES[n1].mYn := false;
                  dmCharge.FDQuery_SQLite.FindNext;
               end;
            end;

            if tm_Amt = 0 then
            begin
               sQuery := 'select A1.PREM_STTIME,A1.PREM_EDTIME,A3.RESULT_AMT from CDMS_CHARGE_TYPE A1, CDMS_PREM_MAST A2, CDMS_PREM_DETAIL A3 WHERE A1.CT_KEY_NUM = ''' + sKeyNumber + ''' AND TRIM(A1.PREM_STTIME)<>'''' AND TRIM(A1.PREM_EDTIME)<>'''' AND A1.prem_nseq=A2.nseq and A2.nseq=A3.nseq and A3.ST_AMT <= ' + IntToStr(base_amt) + ' and A3.ED_AMT >= ' + IntToStr(base_amt) ;
               dmCharge.proc_SQLite_init;
               dmCharge.FDQuery_SQLite.close;
               dmCharge.FDQuery_SQLite.SQL.Text := sQuery;
               dmCharge.FDQuery_SQLite.open;

               if dmCharge.FDQuery_SQLite.RecordCount = 0 then
               begin
                  tm_Amt:=0;
               end else
               begin
                  SetLength(PREM_TIMES, dmCharge.FDQuery_SQLite.RecordCount);
                  dmCharge.FDQuery_SQLite.FindFirst;
                  for n1:=0 to dmCharge.FDQuery_SQLite.RecordCount - 1 do
                  begin
                     PREM_TIMES[n1].ST_TIME := dmCharge.FDQuery1.Fields[0].AsString;
                     PREM_TIMES[n1].ED_TIME := dmCharge.FDQuery1.Fields[1].AsString;
                     PREM_TIMES[n1].AMT := dmCharge.FDQuery1.Fields[2].AsInteger;
                     PREM_TIMES[n1].mYn := false;
                     dmCharge.FDQuery_SQLite.FindNext;
                  end;
               end;
            end;
         end else if CHARGE_GUBUN='S' then
         begin
            sQuery := 'select A1.PREM_STTIME,A1.PREM_EDTIME,A3.RESULT_AMT from CDMS_BGROUP_TYPE A1, CDMS_SVPREM_MAST A2, CDMS_SVPREM_DETAIL A3 WHERE A1.CT_KEY_NUM = ''' + sKeyNumber + '''  AND A1.CT_CB_CODE  = ''' + cxtCuBubin.Hint + ''' AND TRIM(A1.PREM_STTIME)<>'''' AND TRIM(A1.PREM_EDTIME)<>'''' AND A1.prem_nseq=A2.nseq and A2.nseq=A3.nseq and A3.ST_AMT <= ' + IntToStr(base_amt) + ' and A3.ED_AMT >= ' + IntToStr(base_amt) ;
            dmCharge.proc_mysql_init;
            dmCharge.FDQuery1.Close;
            dmCharge.FDQuery1.SQL.Text := sQuery;
            dmCharge.FDQuery1.OPEN;
            if dmCharge.FDQuery1.recordcount=0 then
            begin
               tm_Amt:=0;
            end else
            begin
               SetLength(PREM_TIMES,dmCharge.FDQuery1.recordcount);
               dmCharge.FDQuery1.FindFirst;
               for n1:=0 to dmCharge.FDQuery1.recordcount-1 do
               begin
                  PREM_TIMES[n1].ST_TIME:=dmCharge.FDQuery1.Fields[0].AsString;
                  PREM_TIMES[n1].ED_TIME:=dmCharge.FDQuery1.Fields[1].AsString;
                  PREM_TIMES[n1].AMT:=dmCharge.FDQuery1.Fields[2].AsInteger;
                  PREM_TIMES[n1].mYn:=false;
                  dmCharge.FDQuery1.FindNext;
               end;
            end;

            if tm_Amt = 0 then
            begin
               sQuery := 'select A1.PREM_STTIME,A1.PREM_EDTIME,A3.RESULT_AMT from CDMS_TYPE A1, CDMS_SVPREM_MAST A2, CDMS_SVPREM_DETAIL A3 WHERE A1.CT_KEY_NUM = ''' + sKeyNumber + ''' AND TRIM(A1.PREM_STTIME)<>'''' AND TRIM(A1.PREM_EDTIME)<>'''' AND A1.prem_nseq=A2.nseq and A2.nseq=A3.nseq and A3.ST_AMT <= ' + IntToStr(base_amt) + ' and A3.ED_AMT >= ' + IntToStr(base_amt) ;
               dmCharge.proc_mysql_init;
               dmCharge.FDQuery1.Close;
               dmCharge.FDQuery1.SQL.Text := sQuery;
               dmCharge.FDQuery1.OPEN;
               if dmCharge.FDQuery1.recordcount=0 then
               begin
                  tm_Amt:=0;
               end else
               begin
                  SetLength(PREM_TIMES,dmCharge.FDQuery1.recordcount);
                  dmCharge.FDQuery1.FindFirst;
                  for n1:=0 to dmCharge.FDQuery1.recordcount-1 do
                  begin
                     PREM_TIMES[n1].ST_TIME:=dmCharge.FDQuery1.Fields[0].AsString;
                     PREM_TIMES[n1].ED_TIME:=dmCharge.FDQuery1.Fields[1].AsString;
                     PREM_TIMES[n1].AMT:=dmCharge.FDQuery1.Fields[2].AsInteger;
                     PREM_TIMES[n1].mYn:=false;
                     dmCharge.FDQuery1.FindNext;
                  end;
               end;
            end;
         end;
         tm_Amt:=GET_PREM_TIMES;
         result:=base_amt+tm_amt;

         OutputDebugString(PChar('기본요금:'+inttostr(base_amt)));
         OutputDebugString(PChar('할증요금:'+inttostr(tm_Amt)));
      except
          result:=base_amt;
      end;
   end;
begin
   SetDebugeWrite('JON01B.func_search_charge');
   try
      Result := 0;
      PREM_DESC:='';
      if (CHARGE_GUBUN = 'P') and (GS_EXEC_GUBUN = 0) then
      begin
         Exit;
      end;

      if (gsMyMainTelUse = 'TRUE') and (not GSMyMainTelOrderChargeCheck) then
      begin
      Lbl_Charge.Caption := '대표번호 기본요금 강제 적용';

      if FPlusDongCHK = 2 then pnl_Charge.height := 36
                          else pnl_Charge.height := 21;

      if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                          else lbl_PlusAreaNotice.Visible := False;

      SetPosLblDistance;
      pnl_Charge.Visible := True;
      if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Top := pnl_charge.Top + pnl_Charge.height;
      Exit;
    end;

    PriceInfo := ''; // 요금정보
    PriceDesc := ''; // 적요표시
    PassPrice := 0; // 경유요금


    // 총거리(경유있을 경우 경유거리 포함)
    if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
    begin
      if fStEdKm > 0 then
            TotalDis := Ceil(fStEdKm)      // 경유지요금 계산시 경유지 추가 거리 제외 계산 - 문지현대리 요청 2015.01.26
         else
        TotalDis := Ceil(fCruKm);      // 총거리(경유있을 경우 경유거리 포함)
    end else
    begin
      TotalDis := Ceil(fCruKm);
    end;

     Lbl_Charge.Caption := '';
   //  Lbl_Distance.Caption := '';

    // 선택된 지사정보에서 대표번호를 추출 한다.
     sKeyNumber := Proc_MainKeyNumberSearch;

    if (lcsSta1 = '') or (lcsEnd1 = '') then
    begin
      Result := dmCharge.func_base_charge(sKeyNumber);
      Exit;
    end;

     // 경유횟수 찾기..
     if GT_PASS_INFO[Self.Tag][0].AREA1 = '' then
      ipasscnt := 0
    else
     begin
        i := 0;
        while i <= 4 do
      begin
           if GT_PASS_INFO[Self.Tag][i].AREA1 = '' then
              break;
           inc(i);
        end;
      iPassCnt := i;
     end;

    // 20120604 법인 요금 설정 관련 부분 추가  LYB
    if (CHARGE_GUBUN = 'P') then
    begin
      ///////////////////////////////////////////////////////////////
      // (#1) 법인 별 요금계산
        ///////////////////////////////////////////////////////////////
         sQuery := 'SELECT * FROM CDMS_BGROUP_CHARGE_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' AND CT_CB_CODE  = ''' + cxtCuBubin.Hint + ''' ';
      try
            dmCharge.proc_SQLite_init;
            dmCharge.FDQuery_SQLite.close;
            dmCharge.FDQuery_SQLite.SQL.Text := sQuery;
            dmCharge.FDQuery_SQLite.open;
         except on E: Exception do
        begin
          GMessagebox('로컬요금설정이 잘못되어있어 요금이 계산되지 않았습니다.'#13#10 +
          '[요금파일 확인 바랍니다.]', CDMSI);
          Exit;
        end;
      end;

         // 법인요금에 등록된 요금제가 없으면 대표번호요금 사용
         if not dmCharge.FDQuery_SQLite.EOF then
         begin
            sType         := dmCharge.FDQuery_SQLite.Fields[5].AsString;  // 경유요금 종류
            sFirstCD      := dmCharge.FDQuery_SQLite.Fields[8].AsString;  // 우선요금제 코드
            iPassValue    := StrToIntDef(dmCharge.FDQuery_SQLite.Fields[7].AsString, 0);
            sPassGubun    := dmCharge.FDQuery_SQLite.Fields[9].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
            sPassCode     := dmCharge.FDQuery_SQLite.Fields[10].AsString;  // 경유요금 코드
            sPassViewCode := dmCharge.FDQuery_SQLite.Fields[11].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
      end;
    end else
    if CHARGE_GUBUN = 'S' then
    begin
      dmCharge.proc_mysql_init;
      dmCharge.FDQuery1.Close;
         dmCharge.FDQuery1.SQL.Text := 'SELECT * FROM CDMS_BGROUP_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' AND CT_CB_CODE  = ''' + cxtCuBubin.Hint + ''' ';
      try
        dmCharge.FDQuery1.open;
      except on E: Exception do
        begin
          GMessagebox('요금DB설정이 잘못되어있어 요금이 계산되지 않았습니다.'#13#10 +
          '[환경설정] - [요금DB연결] 부분 설정을 다시 하세요', CDMSI);
          Exit;
        end;
      end;

      // 법인요금에 등록된 요금제가 없으면 대표번호요금 사용
      if not dmCharge.FDQuery1.IsEmpty then
      begin
        sType         := dmCharge.FDQuery1.Fields[5].AsString;  // 경유요금 종류
        sFirstCD      := dmCharge.FDQuery1.Fields[8].AsString;  // 우선요금제 코드
        iPassValue    := StrToIntDef(dmCharge.FDQuery1.Fields[7].AsString, 0);
        sPassGubun    := dmCharge.FDQuery1.Fields[9].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
        sPassCode     := dmCharge.FDQuery1.Fields[10].AsString;  // 경유요금 코드
        sPassViewCode := dmCharge.FDQuery1.Fields[11].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
      end;
    end;
      if sType = '' then
    begin
      // P : DB 로컬연결        GS_EXEC_GUBUN ==> 1:소켓메인 동작됨, 0:소켓메인 사용할 수 없음.[구버전, 신버전 동시사용가능하도록 위함]
      // 현재 버전, 이미 실행된 신규버전이 있을경우 파라독스 연결 처리 (2008.08.01 KJH)
      if (CHARGE_GUBUN = 'P') then
      begin
        ///////////////////////////////////////////////////////////////
        // (#1) 대표번호 별 요금계산
        ///////////////////////////////////////////////////////////////
            sQuery := 'SELECT * FROM CDMS_CHARGE_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' ';
        try
               dmCharge.proc_SQLite_init;
               dmCharge.FDQuery_SQLite.close;
               dmCharge.FDQuery_SQLite.SQL.Text := sQuery;
               dmCharge.FDQuery_SQLite.open;
            except on E: Exception do
          begin
            GMessagebox('로컬요금설정이 잘못되어있어 요금이 계산되지 않았습니다.'#13#10 +
            '[요금파일 확인 바랍니다.]', CDMSI);
                  Exit;
          end;
        end;

        // 대표요금에 등록된 요금제가 없으면 기본표준요금 사용
            if not dmCharge.FDQuery_SQLite.IsEmpty then
        begin
               sType         := dmCharge.FDQuery_SQLite.Fields[4].AsString;  // 경유요금 종류
               sType2        := dmCharge.FDQuery_SQLite.Fields[15].AsString;  // 경유요금 종류
               sFirstCD      := dmCharge.FDQuery_SQLite.Fields[7].AsString;  // 우선요금제 코드
               iPassValue    := StrToIntDef(dmCharge.FDQuery_SQLite.Fields[6].AsString, 0);
               sPassGubun    := dmCharge.FDQuery_SQLite.Fields[8].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
               sPassCode     := dmCharge.FDQuery_SQLite.Fields[9].AsString;  // 경유요금 코드
               sPassViewCode := dmCharge.FDQuery_SQLite.Fields[10].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
        end;
      end else
         if CHARGE_GUBUN = 'S' then
      begin
        dmCharge.proc_mysql_init;
        dmCharge.FDQuery1.Close;
        dmCharge.FDQuery1.SQL.Text := 'SELECT CT_NO, CT_BR_NO, CT_KEY_NUM, CT_GUBUN, CT_CD, CT_GUBUN2, CT_CD2, IN_DATE, CT_PASSVALUE, CT_FIRST_CD, CT_PASS_GUBUN, CT_PASS_CD, CT_PASS_VIEW, PREM_NSEQ, PREM_STTIME, PREM_EDTIME FROM CDMS_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' ';
        try
          dmCharge.FDQuery1.open;
        except on E: Exception do
          begin
            GMessagebox('요금DB설정이 잘못되어있어 요금이 계산되지 않았습니다.'#13#10 +
                  '[환경설정] - [요금DB연결] 부분 설정을 다시 하세요', CDMSI);
            Exit;
          end;
        end;

        // 대표요금에 등록된 요금제가 없으면 기본표준요금 사용
        if not dmCharge.FDQuery1.IsEmpty then
        begin
              sType         := dmCharge.FDQuery1.Fields[4].AsString;  // 요금 종류1
              sType2        := dmCharge.FDQuery1.Fields[6].AsString;  // 요금 종류2
              sFirstCD      := dmCharge.FDQuery1.Fields[9].AsString;  // 우선요금제 코드
              iPassValue    := StrToIntDef(dmCharge.FDQuery1.Fields[8].AsString, 0);
              sPassGubun    := dmCharge.FDQuery1.Fields[10].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
              sPassCode     := dmCharge.FDQuery1.Fields[11].AsString;  // 경유요금 코드
              sPassViewCode := dmCharge.FDQuery1.Fields[12].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
        end;
      end;
    end;

    if sType = '' then
    begin
      sType         := 'CC001';
      sFirstCD      := '';
      iPassValue    := 0;
      sPassGubun    := '0';
      sPassCode     := '';
      sPassViewCode := '';
    end;

     if sType2 = '' then
     begin
        sType2         := 'CC001';
     end;

    // 우선요금 미사용 경우(경유지가 있는 경우, [거리요금]체크&거리/요금표)
    if    ((iPassCnt  > 0) and (((sPassGubun = '0') and (iPassValue > 0)) or ((sPassGubun = '0') and (sPassCode <> '')))
      or  (ChkRangeRate.Down and ((Copy(sType, 1, 2) = 'CD') or (Copy(sType, 1, 2) = 'CA'))))
    then
    begin
      sFirstCD := '';
    end;

    FcnhDongCHK := 0; //추가요금제외체크
    FPlusDongCHK := 0; //추가요금포함체크
    FPlusDongName := ''; //적용된 추가요금제명

    pnl_charge.Color := $008000FF;

    if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
    begin
      chnSDong := lcsSta3;
      chnEDong := lcsEnd3;

      try
        SSLat := getDEGREE(cxtStartXval.Text);
        SSLon := getDEGREE(cxtStartYval.Text);

        SELat := getDEGREE(cxtEndXval.Text);
        SELon := getDEGREE(cxtEndYval.Text);

        for i := 0 to Length(FAREAROUND_XY) -1 do
        begin
          if PtInPolygon(StrToFloatDef(SSLon, 0)
                       , StrToFloatDef(SSLat, 0)
                       , FAREAROUND_XY[i].LonArr
                       , FAREAROUND_XY[i].LatArr
                       , FAREAROUND_XY[i].ArrCnt) then
          begin
            chnSDong := FAREAROUND_XY[i].DONG;
                 if FAREAROUND_XY[i].GUBUN = 'M' then FcnhDongCHK := 1
            else if FAREAROUND_XY[i].GUBUN = 'P' then
            begin
              FPlusDongCHK := 2;
            end;
          end;
          if PtInPolygon(StrToFloatDef(SELon, 0)
                       , StrToFloatDef(SELat, 0)
                       , FAREAROUND_XY[i].LonArr
                       , FAREAROUND_XY[i].LatArr
                       , FAREAROUND_XY[i].ArrCnt) then
          begin
            chnEDong := FAREAROUND_XY[i].DONG;
                 if FAREAROUND_XY[i].GUBUN = 'M' then FcnhDongCHK := 1
            else if FAREAROUND_XY[i].GUBUN = 'P' then
            begin
              FPlusDongCHK := 2;
            end;
          end;
        end;
      except
        chnSDong := lcsSta3;
        chnEDong := lcsEnd3;
      end;

      if (GS_Grid_DEP = 'D') or (GS_Grid_DES = 'D') then
      begin
        if (GS_Grid_DEP = 'D')  and (GS_Grid_DES <> 'D') then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, chnSDong, '', lcsEnd1, lcsEnd2, chnEDong, cxtEndAreaDetail.Caption,
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType)
        else
        if (GS_Grid_DEP <> 'D') and (GS_Grid_DES = 'D') then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, chnSDong, cxtStartAreaDetail.Text, lcsEnd1, lcsEnd2, chnEDong, '',
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType)
        else
        if (GS_Grid_DEP = 'D')  and (GS_Grid_DES = 'D')  then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, chnSDong, '', lcsEnd1, lcsEnd2, chnEDong, '',
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType);
      end
      else
        Result := dmCharge.func_charge(lcsSta1, lcsSta2, chnSDong, cxtStartAreaDetail.Text, lcsEnd1, lcsEnd2, chnEDong, cxtEndAreaDetail.Caption,
          TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType);
    end else
    begin
      if (GS_Grid_DEP = 'D') or (GS_Grid_DES = 'D') then
      begin
        if (GS_Grid_DEP = 'D')  and (GS_Grid_DES <> 'D') then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, lcsSta3, '', lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption,
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType)
        else
        if (GS_Grid_DEP <> 'D') and (GS_Grid_DES = 'D') then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, lcsEnd1, lcsEnd2, lcsEnd3, '',
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType)
        else
        if (GS_Grid_DEP = 'D')  and (GS_Grid_DES = 'D')  then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, lcsSta3, '', lcsEnd1, lcsEnd2, lcsEnd3, '',
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType);
      end
      else
        Result := dmCharge.func_charge(lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption,
          TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType);
    end;

    lbl_PlusAreaNotice.Caption := '추가요금 적용' + '[' + FPlusDongName + ']';

    ///////////////////////////////////////////////////////////////
    // (#2) 스마트요금제 계산
    ///////////////////////////////////////////////////////////////

    if (copy(sType, 1, 2) = 'SM') or (copy(sType2, 1, 2) = 'SM') then //대표번호별 스마트요금제 선택 시 20150331 KHS
    else
    begin
      if GT_RealTimeWorker then oOderWorker := ''
                           else oOderWorker := '0';

      if GT_RealTimeWeather then oWeather := ''
                            else oWeather := '0';

      iType := '';//검색타입 '동-동' 접수창에서는 무조건 동-동으로 조회

      if GB_DEBUG_USE then Log(oOderWorker + oWeather +
                                       lcsSta1 + lcsSta2 + lcsSta3 + meoStartArea.Text + cxtStartXval.Text + cxtStartYval.Text +
                                       lcsEnd1 + lcsEnd2 + lcsEnd3 + meoEndArea.Text + cxtEndXval.Text + cxtEndYval.Text + iType, LOGDATAPATHFILE);

      iSmartRate := fJON01_SmartCharge(oOderWorker, oWeather,
                                       lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text,
                                       lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, iType, oType);

      if oType = 'DD' then oType := '동->동' else
      if oType = 'DG' then oType := '동->구' else
      if oType = 'GD' then oType := '구->동' else
      if oType = 'GG' then oType := '구->구' else
      if oType = 'GS' then oType := '구->시';

      bOpen := False;
      if GT_AutoSmartCharge then // 0원이거나 요금이 다를경우 스마트요금 접수창요금 자동적용
      begin
        if ( Result = 0 ) Or ( Result <> iSmartRate ) then
        begin
          if GT_PopUpSmartCharge then // 0원이거나 요금이 다를경우 스마트요금창 자동팝업
          begin
            if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
                         (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
                 (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
            begin
            end else
            begin
              bOpen := True;
              BtnSmartRate.Click;
              if curRate.CanFocus then curRate.SetFocus;
            end;
          end;
          PriceInfo := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
          Result := iSmartRate;
        end;
      end;

      if GB_JON_SMARTRATEUSE then
      begin
        PriceInfo := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
        Result := iSmartRate;
      end;

      if ( GT_AllPopUpSmartCharge ) And ( Not bOpen )  then // 스마트요금창 자동팝업
      begin
        if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
             (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
             (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
        begin
        end else
        begin
          BtnSmartRate.Click;
          if curRate.CanFocus then curRate.SetFocus;
        end;
      end;
    end;
    ///////////////////////////////////////////////////////////////
    // (#3) 요금제에 요금이 없으면 표준요금 참조
    ///////////////////////////////////////////////////////////////
    if (Result = 0) and (GT_DEFAULT_ST = 0) then
    begin
        Result := dmCharge.func_charge(lcsSta1, lcsSta2, '', '', lcsEnd1, lcsEnd2, '', '',
        0, 'CC001', 'CC001', '', 0, 0, PriceInfo, AreaType, AType);
    end;
     FType := AType;
    ///////////////////////////////////////////////////////////////
    // (#4) 경유요금 계산
    ///////////////////////////////////////////////////////////////
    if (Result > 0) and (ipasscnt > 0) then
    begin
      if (sPassGubun = '0') then
      begin
        PassPrice := dmCharge.func_Pass_charge('0', '', iPassValue, iPassCnt, 0, PricePassInfo);
        Result := Result + PassPrice;
      end else
      if (sPassGubun = '1') then
      begin
        // 출도착지 거리
        if ( GT_DISTANCE_ST = 1 ) And ( giKmComPletG = 'OK' ) then
        begin
          PassDis := Ceil(fViaKm);
        end else
        begin
          sOrgDis := FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
            cxtStartXval.Text, cxtStartYval.Text, cxtEndXval.Text,
            cxtEndYval.Text) * StrToFloatDef(CHARGE_DIS, 1.0),
            ffNumber, 3, 1);
          fOrgDis := StrToFloatDef(sOrgDis, 0);
          PassDis := TotalDis - Ceil(fOrgDis);
        end;

        PassPrice := dmCharge.func_Pass_charge(sPassCode, sPassViewCode, iPassValue, iPassCnt, PassDis, PricePassInfo);

        if (sPassViewCode = '0') and (PassPrice > 0) then
        // 거리요금, 요금 미포함인경우 경유요금 미포함
          PriceDesc := '＜경유요금:' + IntToStr(PassPrice) + '＞'
        else
          Result := Result + PassPrice;
      end;
    end;

     if (gsMyMainTelUse = 'TRUE') and (GSMyMainTelOrderChargeCheck) and (Result = 0)then
     begin
        Lbl_Charge.Caption := Format('대표번호 기본요금(%s) 강제 적용', [StrToMoney(sNowRate)]);

      if FPlusDongCHK = 2 then pnl_Charge.height := 36
                          else pnl_Charge.height := 21;

      if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                          else lbl_PlusAreaNotice.Visible := False;

      SetPosLblDistance;
        pnl_Charge.Visible := True;
      if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Top := pnl_charge.Top + pnl_Charge.height;
        result := strtointDef(sNowRate,0);
        Exit;
     end;
    // 요금정보 표시
    if Trim(PriceInfo) <> '' then
      Lbl_Charge.Caption := PriceInfo + PricePassInfo
    else
      Lbl_Charge.Caption := '요금정보가 없습니다.';

    if FPlusDongCHK = 2 then pnl_Charge.height := 36
                        else pnl_Charge.height := 21;

    if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                        else lbl_PlusAreaNotice.Visible := False;

    SetPosLblDistance;
    pnl_Charge.Visible := True;
    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Top := pnl_charge.Top + pnl_Charge.height;

    // 적요 내용 표시
      if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) then
    begin
      RemovePriceDesc;
      if PriceDesc <> '' then
      begin
        meoBigo.Text := PriceDesc + meoBigo.Text; // 수정모드 일때는 적요를 수정하지 않는다.
      end;
    end;
      // 2011.02.16 심야할증요금 추가
    result:=Get_Prem_Price(Result,sKeyNumber);

    if PREM_DESC <> '' then
    begin
      Lbl_Charge.Caption := Lbl_Charge.Caption + PREM_DESC; // 할증요금 있을시 추가(레코드카운트<>0)
  //    Lbl_Distance.Caption := '';
    end;

    cxCurPathRate.Value := PassPrice;
  except
    on e: exception do
    begin
      Log('func_search_charge Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'func_search_charge Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.RemovePriceDesc;
var
  OrgStr, AddStr: string;
  PosS, PosE: Integer;
begin
  SetDebugeWrite('JON01.RemovePriceDesc');
  try
		OrgStr := meoBigo.Lines.Text;

    PosS := Pos('＜', OrgStr);
    PosE := Pos('＞', OrgStr);

    if (PosS = 0) or (PosE = 0) or (PosE < PosS) then
    begin
      Exit;
    end;

    AddStr := Copy(OrgStr, 1, PosS-1);
    AddStr := AddStr + Copy(OrgStr, PosE+1, Length(OrgStr));

    meoBigo.Lines.Text := AddStr;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.RequestData(AData: string);
begin

end;

procedure TFrm_JON01.RequestMobileCoupone(ACuSeq, AHP: string;
  ACharge: Integer);
begin

end;

procedure TFrm_JON01.ReSetPosition(ComponentName, ComponentGubun: string; iTop,
  ileft, iHeight, iWidth: integer);
var iTmp, iPnl4Height, iRight : integer;
begin
	if ComponentGubun = 'TButton' then
	begin
		TButton(self.FindComponent(ComponentName)).top 		:= iTop;
		TButton(self.FindComponent(ComponentName)).left 	:= iLeft;
		TButton(self.FindComponent(ComponentName)).Height := iHeight;
		TButton(self.FindComponent(ComponentName)).Width  := iWidth;
		TButton(self.FindComponent(ComponentName)).Visible := True;
	end else
	if ComponentGubun = 'TcxTextEdit' then
	begin
		TcxTextEdit(self.FindComponent(ComponentName)).top 		:= iTop;
		TcxTextEdit(self.FindComponent(ComponentName)).left 	:= iLeft;
		TcxTextEdit(self.FindComponent(ComponentName)).Height := iHeight;
		TcxTextEdit(self.FindComponent(ComponentName)).Width  := iWidth;
		TcxTextEdit(self.FindComponent(ComponentName)).Visible := True;
	end else
	if ComponentGubun = 'TImage' then
	begin
		if (ComponentName = 'imgBubin') then 
		begin                                                                             
			Pnl_BubinV.Top := iTop;
		end;
	end else
	if ComponentGubun = 'TcxButton' then
	begin
		TcxButton(self.FindComponent(ComponentName)).top 		:= iTop;
		TcxButton(self.FindComponent(ComponentName)).left 	:= iLeft;
		TcxButton(self.FindComponent(ComponentName)).Height := iHeight;
		TcxButton(self.FindComponent(ComponentName)).Width  := iWidth;
		TcxButton(self.FindComponent(ComponentName)).Visible := True;
		if ComponentName = 'btnCustAppinfo' then
		begin
			pnlCustAppinfo.Top := GBTop2.Top + iTop + iHeight;
		end;
		if ComponentName = 'btnAddBigo' then
		begin
			if TcxButton(self.FindComponent(ComponentName)).Width > 40 then
				btnAddBigo.caption := '상용구'
			else
				btnAddBigo.caption := '상'+#13+'용'+#13+'구';
		end;
		if ComponentName = 'BtnResvView' then
		begin
			if TcxButton(self.FindComponent(ComponentName)).Width > 40 then
				BtnResvView.caption := '예약'
			else
				BtnResvView.caption := '예'+#13+'약';
		end;
	end else
	if ComponentGubun = 'TcxComboBox' then
	begin
		TComboBox(self.FindComponent(ComponentName)).top 		:= iTop;
		TComboBox(self.FindComponent(ComponentName)).left 	:= iLeft;
													
		if (ComponentName = 'cbbPayMethod') or (ComponentName = 'cbbPostTime') then
			TComboBox(self.FindComponent(ComponentName)).Height := 24
		else if (ComponentName = 'cboCuLevel') or (ComponentName = 'CbCuGb') then
			TComboBox(self.FindComponent(ComponentName)).Height := 22
		else
			TComboBox(self.FindComponent(ComponentName)).Height := iHeight;
			
		TComboBox(self.FindComponent(ComponentName)).Width  := iWidth;
		TComboBox(self.FindComponent(ComponentName)).Visible := True;
	end else
	if ComponentGubun = 'TcxCheckBox' then
	begin
		TcxCheckBox(self.FindComponent(ComponentName)).top 		:= iTop;
		TcxCheckBox(self.FindComponent(ComponentName)).left 	:= iLeft;
		TcxCheckBox(self.FindComponent(ComponentName)).Height := iHeight;
		TcxCheckBox(self.FindComponent(ComponentName)).Width  := iWidth;
		TcxCheckBox(self.FindComponent(ComponentName)).Visible := True;

		
	end else
	if ComponentGubun = 'TPanel' then
	begin
		if ComponentName = 'GBTop2' then  // 고객정보  147
		begin
			TPanel(self.FindComponent(ComponentName)).top 	 := iTop;
			TPanel(self.FindComponent(ComponentName)).left 	 := iLeft;
			TPanel(self.FindComponent(ComponentName)).Height := iHeight;
			TPanel(self.FindComponent(ComponentName)).Width  := iWidth;
			TPanel(self.FindComponent(ComponentName)).Visible := True;

			pnlBubinState.Height := GBTop2.Height-2;
		end else
		if ComponentName = 'GBTop3' then  // 출발지    37
		begin
			TPanel(self.FindComponent(ComponentName)).top 	 := iTop +2;
			TPanel(self.FindComponent(ComponentName)).left 	 := iLeft;
			TPanel(self.FindComponent(ComponentName)).Height := iHeight;
			TPanel(self.FindComponent(ComponentName)).Width  := iWidth;
			TPanel(self.FindComponent(ComponentName)).Visible := True;

			PnlKTPOIYN.Left := 298;
			PnlKTPOIYN.Top  := GBTop3.Top;

		end else
		if ComponentName = 'GB3' then //도착지        38
		begin
			TPanel(self.FindComponent(ComponentName)).top 	 := iTop;
			TPanel(self.FindComponent(ComponentName)).left 	 := iLeft;
			TPanel(self.FindComponent(ComponentName)).Height := iHeight;
			TPanel(self.FindComponent(ComponentName)).Width  := iWidth;
			TPanel(self.FindComponent(ComponentName)).Visible := True;

		end else
		if ComponentName = 'PnlBox4' then //요금영역       83      GB4.Height = 262
		begin
			TPanel(self.FindComponent(ComponentName)).top 	 := iTop;
			TPanel(self.FindComponent(ComponentName)).left 	 := iLeft;
			TPanel(self.FindComponent(ComponentName)).Height := iHeight;
			TPanel(self.FindComponent(ComponentName)).Width  := iWidth;
			TPanel(self.FindComponent(ComponentName)).Visible := True;
		end else
		if ComponentName = 'PnlWorkMemo' then //적요영역         176    GB4.Height = 262     GBTop5.Height = 306
		begin
			TPanel(self.FindComponent(ComponentName)).top 	 := iTop;
			TPanel(self.FindComponent(ComponentName)).left 	 := iLeft;
			TPanel(self.FindComponent(ComponentName)).Height := iHeight;
			TPanel(self.FindComponent(ComponentName)).Width  := iWidth;
			TPanel(self.FindComponent(ComponentName)).Visible := True;
		end else
		if ComponentName = 'PnlBtm' then //버튼영역            67
		begin
			TPanel(self.FindComponent(ComponentName)).top 	 := iTop;
			TPanel(self.FindComponent(ComponentName)).left 	 := iLeft;
			TPanel(self.FindComponent(ComponentName)).Height := iHeight;
			TPanel(self.FindComponent(ComponentName)).Width  := iWidth;
			TPanel(self.FindComponent(ComponentName)).Visible := True;
		end else
		begin
			TPanel(self.FindComponent(ComponentName)).top 	 := iTop;
			TPanel(self.FindComponent(ComponentName)).left 	 := iLeft;
			TPanel(self.FindComponent(ComponentName)).Height := iHeight;
			TPanel(self.FindComponent(ComponentName)).Width  := iWidth;
			TPanel(self.FindComponent(ComponentName)).Visible := True;
		end;
//		GBTop5.Height :=  3+ GB3.Height + 3 + PnlWorkMemo.Height  + 3 + PnlBox4.Height;
  end else
	if ComponentGubun = 'TcxMemo' then
	begin
		TcxMemo(self.FindComponent(ComponentName)).top 		:= iTop;
		TcxMemo(self.FindComponent(ComponentName)).left 	:= iLeft;
		TcxMemo(self.FindComponent(ComponentName)).Height := iHeight;
		TcxMemo(self.FindComponent(ComponentName)).Width  := iWidth;
		TcxMemo(self.FindComponent(ComponentName)).Visible := True;

		if ComponentName = 'meoCuCCMemo' then
		begin
			cxLCuCCMemoFlg.top := iTop + 4;
			cxLCuCCMemoFlg.left:= iLeft + 2;
			cxLCuCCMemoFlg.Visible := True;

			BtnViewMemo.top := iTop +1;
			BtnViewMemo.left:= meoCuCCMemo.left + meoCuCCMemo.Width - BtnViewMemo.Width -2;
			BtnViewMemo.Visible := True;
		end;
		if ComponentName = 'meoCuWorMemo' then
		begin
			cxLCuWorMemoFlg.top := iTop + 4;
			cxLCuWorMemoFlg.left:= iLeft + 2;
			cxLCuWorMemoFlg.Visible := True;

			chkViewLevel.top := iTop +1;
			chkViewLevel.left := meoCuWorMemo.left + meoCuWorMemo.Width - chkViewLevel.Width -2;
			chkViewLevel.Visible := True;
		end;
		if ComponentName = 'edt_CardMemo' then 
		begin
			cxLCuCCMemoFlg1.top := iTop + 4;
			cxLCuCCMemoFlg1.left:= iLeft + 2;
			cxLCuCCMemoFlg1.Visible := True;

			BtnSimMemo.top := iTop + 1;
			BtnSimMemo.left := edt_CardMemo.left + edt_CardMemo.Width - BtnSimMemo.Width -2;
			BtnSimMemo.Visible := True;
		end;
		
		if ComponentName = 'meoStartArea' then 
		begin
			cxLStartAreaFlag.left := meoStartArea.left + 13;
			cxLStartAreaFlag.Top := meoStartArea.Top + 5;
			cxLStartAreaFlag.Visible := True;
		end;
		if ComponentName = 'meoEndArea' then 
		begin
			cxLEndAreaFlag.left := meoEndArea.left + 13;
			cxLEndAreaFlag.Top := meoEndArea.Top + 5;
			cxLEndAreaFlag.Visible := True;
		end;

		if ComponentName = 'meoBigo' then 
		begin
			LbmeoBigo.top := iTop + 1;
			LbmeoBigo.left:= iLeft + 2;
			LbmeoBigo.Visible := True;
		end;
		if ComponentName = 'meoBigo2' then
		begin
			LbmeoBigo2.top := iTop + 1;
			LbmeoBigo2.left:= iLeft + 2;
			LbmeoBigo2.Visible := True;
		end;
		if ComponentName = 'meoBigo3' then
		begin
			LbmeoBigo3.top := iTop + 1;
			LbmeoBigo3.left:= iLeft + 2;
			LbmeoBigo3.Visible := True;
{			if GS_CALL2_Use = 'y' then
			begin
				chkCall2.Top := meoBigo3.Top + (meoBigo3.Height div 2);
				meoBigo3.Left := 76;
				meoBigo3.Width := meoBigo3.Width - meoBigo3.Left + 4 ;//452;
				LbmeoBigo3.Left := 83;
			end;  }
		end;
	end else
	if ComponentGubun = 'TAdvGlowButton' then
	begin
		TAdvGlowButton(self.FindComponent(ComponentName)).top 	:= iTop;
		TAdvGlowButton(self.FindComponent(ComponentName)).left := iLeft;
		TAdvGlowButton(self.FindComponent(ComponentName)).Height := iHeight;
		TAdvGlowButton(self.FindComponent(ComponentName)).Width  := iWidth;
		TAdvGlowButton(self.FindComponent(ComponentName)).Visible := True;
	end else
	if ComponentGubun = 'TcxSpinEdit' then
	begin
		TcxSpinEdit(self.FindComponent(ComponentName)).top 		:= iTop;
		TcxSpinEdit(self.FindComponent(ComponentName)).left 	:= iLeft;
		TcxSpinEdit(self.FindComponent(ComponentName)).Height := iHeight;
		TcxSpinEdit(self.FindComponent(ComponentName)).Width  := iWidth;
		TcxSpinEdit(self.FindComponent(ComponentName)).Visible := True;
		if ComponentName = 'edtPostPay' then 
		begin
			LblPostPay.Visible := True;
			LblPostPay.top  := edtPostPay.Top + 4;
			LblPostPay.left := edtPostPay.left + 3;
		end;
		if ComponentName = 'curRate'    then pnl_charge.Top := curRate.Top + curRate.Height;
	end else
	if ComponentGubun = 'TcxLabel' then
	begin
		TcxLabel(self.FindComponent(ComponentName)).top 		:= iTop;
		TcxLabel(self.FindComponent(ComponentName)).left 	:= iLeft;
		TcxLabel(self.FindComponent(ComponentName)).Height := iHeight;
		TcxLabel(self.FindComponent(ComponentName)).Width  := iWidth;
		TcxLabel(self.FindComponent(ComponentName)).Visible := True;
		if ComponentName = 'cxLabel13' then
		begin
			cxLblSmartRate.Visible := True;
			cxLblRate1.Visible := True;
			cxLblRate2.Visible := True;
		end;
	end else
	if ComponentGubun = 'TcxRichEdit' then
	begin
		TcxRichEdit(self.FindComponent(ComponentName)).top 		:= iTop;
		TcxRichEdit(self.FindComponent(ComponentName)).left 	:= iLeft;
		TcxRichEdit(self.FindComponent(ComponentName)).Height := iHeight;
		TcxRichEdit(self.FindComponent(ComponentName)).Width  := iWidth;
		TcxRichEdit(self.FindComponent(ComponentName)).Visible := True;
	end else
	if ComponentGubun = 'TcxCurrencyEdit' then
	begin
		TcxCurrencyEdit(self.FindComponent(ComponentName)).top 		:= iTop;
		TcxCurrencyEdit(self.FindComponent(ComponentName)).left 	:= iLeft;
		TcxCurrencyEdit(self.FindComponent(ComponentName)).Height := iHeight;
		TcxCurrencyEdit(self.FindComponent(ComponentName)).Width  := iWidth;
		TcxCurrencyEdit(self.FindComponent(ComponentName)).Visible := True;
		if (ComponentName = 'cxDriverCharge') then 
		begin                                                                             
			LbDriverCharge.top  := cxDriverCharge.Top + 3;
			LbDriverCharge.left := cxDriverCharge.left + 4;
		end;
	end else
	if ComponentGubun = 'TcxTimeEdit' then
	begin
		if (ComponentName = 'cxTmWaitTime') then
		begin
			TcxTimeEdit(self.FindComponent(ComponentName)).top  := iTop - Pnl_BubinV.Top;
			TcxTimeEdit(self.FindComponent(ComponentName)).left := iLeft - Pnl_BubinV.left;
		end else
		begin
			TcxTimeEdit(self.FindComponent(ComponentName)).top 	:= iTop;
			TcxTimeEdit(self.FindComponent(ComponentName)).left := iLeft;
		end;
		TcxTimeEdit(self.FindComponent(ComponentName)).Height := iHeight;
		TcxTimeEdit(self.FindComponent(ComponentName)).Width  := iWidth;
		TcxTimeEdit(self.FindComponent(ComponentName)).Visible := True;
	end;
end;

procedure TFrm_JON01.ReSetVisible(ComponentName, ComponentGubun: string);
begin
	if ComponentGubun = 'TcxTextEdit' then
	begin
		TcxTextEdit(self.FindComponent(ComponentName)).Visible := False;
	end else
	if ComponentGubun = 'TcxButton' then
	begin
		TcxButton(self.FindComponent(ComponentName)).Visible := False;
	end else
	if ComponentGubun = 'TcxComboBox' then
	begin
		TcxComboBox(self.FindComponent(ComponentName)).Visible := False;
	end else
	if ComponentGubun = 'TcxCheckBox' then
	begin
		TcxCheckBox(self.FindComponent(ComponentName)).Visible := False;
	end else
	if ComponentGubun = 'TPanel' then
	begin
		TPanel(self.FindComponent(ComponentName)).Visible := False;
	end else
	if ComponentGubun = 'TcxMemo' then
	begin
		TcxMemo(self.FindComponent(ComponentName)).Visible := False;
		if ComponentName = 'meoCuCCMemo' then 
		begin
			cxLCuCCMemoFlg.Visible := False;
			BtnViewMemo.Visible := False;
		end;
		if ComponentName = 'meoCuWorMemo' then
		begin
			cxLCuWorMemoFlg.Visible := False;
			chkViewLevel.Visible := False;
		end;
		if ComponentName = 'edt_CardMemo' then 
		begin
			cxLCuCCMemoFlg1.Visible := False;
			BtnSimMemo.Visible := False;
		end;
		if ComponentName = 'meoBigo' then LbmeoBigo.Visible := False;
		if ComponentName = 'meoBigo2' then LbmeoBigo2.Visible := False;
		if ComponentName = 'meoBigo3' then LbmeoBigo3.Visible := False;
	end else
	if ComponentGubun = 'TAdvGlowButton' then
	begin
		TAdvGlowButton(self.FindComponent(ComponentName)).Visible := False;
		
	end else
	if ComponentGubun = 'TcxSpinEdit' then
	begin
		TcxSpinEdit(self.FindComponent(ComponentName)).Visible := False;
		if ComponentName = 'edtPostPay' then LblPostPay.Visible := False;
		if ComponentName = 'curRate'    then pnl_charge.Visible := False;
	end else
	if ComponentGubun = 'TcxLabel' then
	begin
		TcxLabel(self.FindComponent(ComponentName)).Visible := False;
		if ComponentName = 'cxLabel13' then 
		begin
			cxLblSmartRate.Visible := False;
			cxLblRate1.Visible := False;
			cxLblRate2.Visible := False;
		end;
	end else
	if ComponentGubun = 'TcxRichEdit' then
	begin
		TcxRichEdit(self.FindComponent(ComponentName)).Visible := False;
		
		if ComponentName = 'meoStartArea' then cxLStartAreaFlag.Visible := False;
		if ComponentName = 'meoEndArea'   then cxLEndAreaFlag.Visible := False;
	end else
	if ComponentGubun = 'TcxCurrencyEdit' then
	begin
		TcxCurrencyEdit(self.FindComponent(ComponentName)).Visible := False;
		if (ComponentName = 'cxCurPathRate') then lblCurPathRate.Visible := False;
		if (ComponentName = 'cxCurRevisionRate') then lblCurRevisionRate.Visible := False;
		if (ComponentName = 'cxTBubinMemo') then cxLBubinMemoFlag.Visible := False;
	end else
	if ComponentGubun = 'TImage' then
	begin
		if (ComponentName = 'imgBubin') then
		begin                                                                             
			Pnl_BubinV.Visible := False;
		end;
	end else
	if ComponentGubun = 'TcxTimeEdit' then
	begin
		TcxTimeEdit(self.FindComponent(ComponentName)).Visible := False;
	end;
end;

procedure TFrm_JON01.ResponseData(AXmlData: string);
begin

end;

procedure TFrm_JON01.RQAListViewCellDblClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
var
  iRcIdx: Integer;
begin
  SetDebugeWrite('JON01.RQAListViewCellDblClick');
  iRcIdx := RQAListView.DataController.FocusedRecordIndex;
  // 현재 선택된 레코드 index 읽기.

  // 답변요금 그리드에서 그리드 선택시에 요금 정보를 입력 컨트롤에 Display~
  if iRcIdx > -1 then
  begin
    curRate.Text := RQAListView.DataController.GetValue(iRcIdx, 1);
    pSet606QRateSave( Self.Tag, iRcIdx, Frm_Main.Frm_JON01[Self.Tag]);

    Lbl_Charge.Caption := Format('%s님의 답변요금 선택, 설명: %s', [RQAListView.DataController.GetValue(iRcIdx, 2),
                                                                    RQAListView.DataController.GetValue(iRcIdx, 3)]);
    Lbl_Distance.Caption := '';
    pnl_Charge.height := 21;
    pnl_Charge.Visible := True;

    btnRQALExit.Click;
  end;
end;

procedure TFrm_JON01.RQAListViewColumn10GetProperties(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  var AProperties: TcxCustomEditProperties);
begin
  if (RQAListView.DataController.GetValue(ARecord.RecordIndex, 2) <> 'System(자동답변)') then
    AProperties := Frm_Main.gLblProperties;
end;

procedure TFrm_JON01.RQAListViewColumn10PropertiesButtonClick(Sender: TObject;
  AButtonIndex: Integer);
begin
  try
    pSet607QRateDel( Self.Tag, AButtonIndex, Frm_Main.Frm_JON01[Self.Tag]);
    try
      RQAListView.BeginUpdate;
  		RQAListView.DataController.DeleteRecord(AButtonIndex);
    finally
      RQAListView.EndUpdate;
    end;
  except

  end;
end;

procedure TFrm_JON01.RQAListViewEditKeyPress(Sender: TcxCustomGridTableView;
  AItem: TcxCustomGridTableItem; AEdit: TcxCustomEdit; var Key: Char);
var
  iRcIdx: integer;
begin
  SetDebugeWrite('JON01.cxCustViewEditKeyPress');
  if Ord(Key) = VK_RETURN then
  begin
    // 현재 선택된 레코드 index 읽기.
    iRcIdx := cxCustView.DataController.FocusedRecordIndex;
    // 답변요금 그리드에서 그리드 선택시에 요금 정보를 입력 컨트롤에 Display~
    if iRcIdx > -1 then
    begin
      curRate.Text := RQAListView.DataController.Values[iRcIdx, 1];
      btnRQALExit.Click;
    end;
  end;
end;

procedure TFrm_JON01.RQAListViewStylesGetContentStyle(
  Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
  AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
begin
  if AItem.Index = 1 then
  begin
    AStyle := Frm_Main.cxStyleQRList;
    AStyle.TextColor := clRed;
    AStyle.Color := $00DBFCFD;
  end else
  if AItem.Index = 3 then
  begin
    AStyle := Frm_Main.cxStyleQRList;
    AStyle.TextColor := clBlue;
    AStyle.Color := $00FEF9DE;
  end;
end;

// 플러스콜 표준요금을 비교한다.
function TFrm_JON01.proc_PlusCall_RateYN: Boolean;
var iHighRate : Integer;
    sTmp : string;
begin
  SetDebugeWrite('JON01.proc_PlusCall_RateYN');
  Result := True;

  // 플러스콜 표준요금 참조 안하도록 수정함.(이유:플러스콜을 법인콜로 변경하고 플러스콜을 사용 안함) 2011-09-06.
  Exit;

  Result := False;

  {================= 플러스콜 접수위해 고가요금 조회 비교 함.  ================}
  // 플러스콜 여부(수도권만 사용함)
  if GS_PRJ_AREA = 'S' then begin
    // 복수콜 폼 로딩 여부.
    if not GB_FRMJON015_LOADING_YN then begin

    // 25천원 제한조건 제외 2011.01.10
      // 요금이 25,000원 이상일 경우 무조건 콜플러스 반영(2010.11.25)
    //  if curRate.value<25000 then
    //  begin
        iHighRate := func_search_charge_high;
        if (iHighRate > 100) and (BtnPlusYN.Down = True) then begin
          if curRate.Value < iHighRate then begin
            sTmp := IntToStr(iHighRate);
            sTmp := Copy(sTmp, 1, Length(sTmp) -3) + ',' + RightStr(sTmp, 3);

            BtnPlusYN.Down := False;
          end;
        end else begin
          // 접수창의 "플러스콜" 상태 체크 해제 한다.
          BtnPlusYN.Down := False;

          // 플러스콜 자동 해제에 대한 메시지 처리여부.
					sTmp := proc_PlusCall_YN_Cont;
					if ((copy(sTmp,1,4) <> 'yyyy') and (copy(sTmp,1,4) <> 'fyyy')) then
          begin
						if BtnPlusYN.Down then
            begin
							GMessagebox('요금이 0 원 이므로 플러스콜로 등록 할 수 없습니다.' + #13#10 + #13#10
                        + '플러스콜은 자동 해제되어 일반콜로 접수 됩니다.', CDMSI);
            end;
          end;
        end;
    //  end;
    end else begin
      // 접수창의 "플러스콜" 상태 체크 해제 한다.
      BtnPlusYN.Down := False;
    end;
  end;
  {============================================================================}
  Result := True;
end;

//--------------------------------------------------------------------------------------------------
//   [콜마너 고가요금 표준요금 조회 : 2010.10.09]    요금설정에 의한 요금 계산
//   -> 플러스콜 저가요금 올리지 못하도록 하기위한 조회.
//--------------------------------------------------------------------------------------------------
function TFrm_JON01.func_search_charge_high: Integer;
var
  AreaType: Integer;
  sType, sFirstCD, sPassCode, sPassViewCode, sPassGubun, sOrgDis, sKeyNumber: string;
  TotalPrice, PassPrice, TotalDis, PassDis, ipasscnt, iPassValue, i: Integer;
  fOrgDis: Double;
  PriceInfo, PricePassInfo, PriceDesc: string;
begin
  SetDebugeWrite('JON01.func_search_charge_high');
  try
    Result := 0;

    PriceInfo := ''; // 요금정보
    PriceDesc := ''; // 적요표시
    PassPrice := 0; // 경유요금

    // 총거리(경유있을 경우 경유거리 포함)
    TotalDis := ceil(fCruKm);

    // 선택된 지사정보에서 대표번호를 추출 한다.
    //sKeyNumber := Proc_MainKeyNumberSearch;

    if (lcsSta1 = '') or (lcsEnd1 = '') then
    begin
      Exit;
    end;

    // 경유횟수 찾기..
    if GT_PASS_INFO[Self.Tag][0].AREA1 = '' then
      ipasscnt := 0
    else
    begin
      i := 0;
      while i <= 4 do
      begin
        if GT_PASS_INFO[Self.Tag][i].AREA1 = '' then
          break;
        inc(i);
      end;
      iPassCnt := i;
    end;

    // P : DB 로컬연결        GS_EXEC_GUBUN ==> 1:소켓메인 동작됨, 0:소켓메인 사용할 수 없음.[구버전, 신버전 동시사용가능하도록 위함]
    // 현재 버전, 이미 실행된 신규버전이 있을경우 파라독스 연결 처리 (2008.08.01 KJH)
    //if (CHARGE_GUBUN = 'P') then
    //begin
      ///////////////////////////////////////////////////////////////
      // (#1) 대표번호 별 요금계산
      ///////////////////////////////////////////////////////////////
    {  dmCharge.Qry_Charge.Close;
      dmCharge.Qry_Charge.SQL.Text := 'SELECT * FROM CDMS_CHARGE_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' ';
      try
        dmCharge.Qry_Charge.open;
      except on E: Exception do
        begin
          GMessagebox('로컬요금설정이 잘못되어있어 요금이 계산되지 않았습니다.'#13#10 +
          '[요금파일 확인 바랍니다.]', CDMSI);
          Exit;
        end;
      end;

      // 대표요금에 등록된 요금제가 없으면 기본표준요금 사용
      if not dmCharge.Qry_Charge.IsEmpty then
      begin
        sType         := dmCharge.Qry_Charge.Fields[4].AsString;  // 경유요금 종류
        sFirstCD      := dmCharge.Qry_Charge.Fields[7].AsString;  // 우선요금제 코드
        iPassValue    := StrToIntDef(dmCharge.Qry_Charge.Fields[6].AsString, 0);
        sPassGubun    := dmCharge.Qry_Charge.Fields[8].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
        sPassCode     := dmCharge.Qry_Charge.Fields[9].AsString;  // 경유요금 코드
        sPassViewCode := dmCharge.Qry_Charge.Fields[10].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
      end; }
    //end

    if sType = '' then
    begin
      sType         := 'CC005';  // 'CC001' : 표준,   'CC002' : 고가,   'CC003' : 저가,   'CC005' : 플러스콜요금
      sFirstCD      := '';
      iPassValue    := 0;
      sPassGubun    := '0';
      sPassCode     := '';
      sPassViewCode := '';
    end;

    ///////////////////////////////////////////////////////////////
    // (#2) 요금제에 요금이 없으면 표준요금 참조
    ///////////////////////////////////////////////////////////////
    //if (Result = 0) and (GT_DEFAULT_ST = 0) then
    //begin
      { 플러스요금표 참조 }
  		Result := dmCharge.func_charge_plus(lcsSta1, lcsSta2, '', lcsEnd1, lcsEnd2, '', 0, 'CC005', '', 0, 0, PriceInfo, AreaType);
    //end;

    ///////////////////////////////////////////////////////////////
    // 경유요금 계산
    ///////////////////////////////////////////////////////////////
    if (Result > 0) and (ipasscnt > 0) then
    begin
      if (sPassGubun = '0') then
      begin
        PassPrice := dmCharge.func_Pass_charge('0', '', iPassValue, iPassCnt, 0, PricePassInfo);
        Result := Result + PassPrice;
      end
      else if (sPassGubun = '1') then
      begin
        // 출도착지 거리
        sOrgDis := FloatToStrF(GetRoadLength(STANDFUNCPATHFILE, cxtStartXval.Text, cxtStartYval.Text,
                                             cxtEndXval.Text, cxtEndYval.Text)
                               * StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1);
        fOrgDis := StrToFloatDef(sOrgDis, 0);
        PassDis := TotalDis - Ceil(fOrgDis);

        PassPrice := dmCharge.func_Pass_charge(sPassCode, sPassViewCode, iPassValue, iPassCnt, PassDis, PricePassInfo);

        if (sPassViewCode = '0') and (PassPrice > 0) then
          // 거리요금, 요금 미포함인경우 경유요금 미포함
          //PriceDesc := '＜경유요금:' + IntToStr(PassPrice) + '＞'
        else
          Result := Result + PassPrice;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 플러스콜 사용여부 체크
function TFrm_JON01.proc_PlusCall_YN_Cont: string;
var sTmp : string;
begin
  SetDebugeWrite('JON01.proc_PlusCall_YN_Cont');
  try
    // 플러스콜 여부(수도권만 사용함)
    if GS_PRJ_AREA = 'S' then
    begin
      sTmp := Proc_BRNOSearch;
      // 플러스콜 사용 [접수창체크옵션,지사,본사,연합] 조회
  		sTmp := GetPlusCallYN(sTmp);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.proc_RealKmPtr_Init;
  procedure ClearRealKmPtr( Var RealKmPtr : TRealKmRecord );
  Var j : Integer;
  begin
    RealKmPtr.Tag := 0;
    RealKmPtr.thId := 0;
    RealKmPtr.CaActive := False;
    RealKmPtr.UseYn := False;
    RealKmPtr.StartAreaName := '';
    RealKmPtr.StartXVal := '';
    RealKmPtr.StartYVal := '';
    RealKmPtr.EndAreaName := '';
    RealKmPtr.EndXVal := '';
    RealKmPtr.EndYVal := '';
    for j := 0 to 4 do
    begin
  		RealKmPtr.ViaXVal[j] := '';
     	RealKmPtr.ViaYVal[j] := '';
    end;
    RealKmPtr.info := Nil;
  end;
begin
  SetDebugeWrite('JON01.proc_RealKmPtr_Init');
  try
    Case Self.Tag of
    0 : begin
          ClearRealKmPtr(RealKmPtr00_th1);
          ClearRealKmPtr(RealKmPtr00_th2);
          ClearRealKmPtr(RealKmPtr00_th3);
          ClearRealKmPtr(RealKmPtr00_th4);
        end;
    1 : begin
          ClearRealKmPtr(RealKmPtr01_th1);
          ClearRealKmPtr(RealKmPtr01_th2);
          ClearRealKmPtr(RealKmPtr01_th3);
          ClearRealKmPtr(RealKmPtr01_th4);
        end;
    2 : begin
          ClearRealKmPtr(RealKmPtr02_th1);
          ClearRealKmPtr(RealKmPtr02_th2);
          ClearRealKmPtr(RealKmPtr02_th3);
          ClearRealKmPtr(RealKmPtr02_th4);
        end;
    3 : begin
          ClearRealKmPtr(RealKmPtr03_th1);
          ClearRealKmPtr(RealKmPtr03_th2);
          ClearRealKmPtr(RealKmPtr03_th3);
          ClearRealKmPtr(RealKmPtr03_th4);
        end;
    4 : begin
          ClearRealKmPtr(RealKmPtr04_th1);
          ClearRealKmPtr(RealKmPtr04_th2);
          ClearRealKmPtr(RealKmPtr04_th3);
          ClearRealKmPtr(RealKmPtr04_th4);
        end;
    5 : begin
          ClearRealKmPtr(RealKmPtr05_th1);
          ClearRealKmPtr(RealKmPtr05_th2);
          ClearRealKmPtr(RealKmPtr05_th3);
          ClearRealKmPtr(RealKmPtr05_th4);
        end;
    6 : begin
          ClearRealKmPtr(RealKmPtr06_th1);
          ClearRealKmPtr(RealKmPtr06_th2);
          ClearRealKmPtr(RealKmPtr06_th3);
          ClearRealKmPtr(RealKmPtr06_th4);
        end;
    7 : begin
          ClearRealKmPtr(RealKmPtr07_th1);
          ClearRealKmPtr(RealKmPtr07_th2);
          ClearRealKmPtr(RealKmPtr07_th3);
          ClearRealKmPtr(RealKmPtr07_th4);
        end;
    8 : begin
          ClearRealKmPtr(RealKmPtr08_th1);
          ClearRealKmPtr(RealKmPtr08_th2);
          ClearRealKmPtr(RealKmPtr08_th3);
          ClearRealKmPtr(RealKmPtr08_th4);
        end;
    9 : begin
          ClearRealKmPtr(RealKmPtr09_th1);
          ClearRealKmPtr(RealKmPtr09_th2);
          ClearRealKmPtr(RealKmPtr09_th3);
          ClearRealKmPtr(RealKmPtr09_th4);
        end;
    10 : begin
          ClearRealKmPtr(RealKmPtr10_th1);
          ClearRealKmPtr(RealKmPtr10_th2);
          ClearRealKmPtr(RealKmPtr10_th3);
          ClearRealKmPtr(RealKmPtr10_th4);
        end;
    11 : begin
          ClearRealKmPtr(RealKmPtr11_th1);
          ClearRealKmPtr(RealKmPtr11_th2);
          ClearRealKmPtr(RealKmPtr11_th3);
          ClearRealKmPtr(RealKmPtr11_th4);
        end;

    12 : begin
          ClearRealKmPtr(RealKmPtr12_th1);
          ClearRealKmPtr(RealKmPtr12_th2);
          ClearRealKmPtr(RealKmPtr12_th3);
          ClearRealKmPtr(RealKmPtr12_th4);
        end;
    13 : begin
          ClearRealKmPtr(RealKmPtr13_th1);
          ClearRealKmPtr(RealKmPtr13_th2);
          ClearRealKmPtr(RealKmPtr13_th3);
          ClearRealKmPtr(RealKmPtr13_th4);
         end;
    14 : begin
           ClearRealKmPtr(RealKmPtr14_th1);
           ClearRealKmPtr(RealKmPtr14_th2);
           ClearRealKmPtr(RealKmPtr14_th3);
           ClearRealKmPtr(RealKmPtr14_th4);
         end;
    15 : begin
           ClearRealKmPtr(RealKmPtr15_th1);
           ClearRealKmPtr(RealKmPtr15_th2);
           ClearRealKmPtr(RealKmPtr15_th3);
           ClearRealKmPtr(RealKmPtr15_th4);
         end;
    16 : begin
           ClearRealKmPtr(RealKmPtr16_th1);
           ClearRealKmPtr(RealKmPtr16_th2);
           ClearRealKmPtr(RealKmPtr16_th3);
           ClearRealKmPtr(RealKmPtr16_th4);
         end;
    17 : begin
           ClearRealKmPtr(RealKmPtr17_th1);
           ClearRealKmPtr(RealKmPtr17_th2);
           ClearRealKmPtr(RealKmPtr17_th3);
           ClearRealKmPtr(RealKmPtr17_th4);
         end;
    18 : begin
           ClearRealKmPtr(RealKmPtr18_th1);
           ClearRealKmPtr(RealKmPtr18_th2);
           ClearRealKmPtr(RealKmPtr18_th3);
           ClearRealKmPtr(RealKmPtr18_th4);
         end;
    19 : begin
           ClearRealKmPtr(RealKmPtr19_th1);
           ClearRealKmPtr(RealKmPtr19_th2);
           ClearRealKmPtr(RealKmPtr19_th3);
           ClearRealKmPtr(RealKmPtr19_th4);
         end;
    End;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.proc_Realdis_Mng;
Var SRIp : String;
    SRPort : Integer;
begin
  SetDebugeWrite('JON01.proc_Realdis_Mng');
  if (cxtStartXval.Text = '') or (cxtStartYval.Text = '') or
		 (cxtEndXval  .Text = '') or (cxtEndYval  .Text = '') then
  begin
     if ( Trim(lblStartAreaName.Text) <> '' ) And ( Trim(lblEndAreaName.Caption) <> '' ) then
     begin
       Lbl_Distance.Caption := '';
       tmrCharge.Enabled := True;
       Exit;
     end else
       Exit;
  end;

  if ( ( Not fnc_RealKmThread_End ) And ( GT_DISTANCE_ST = 1 ) )  Or  ( giViaKmComplet )  then
  begin
    GMessagebox('경로탐색거리 계산중입니다' + #13 +
                '잠시후에 다시 거리계산 바랍니다.', CDMSI);
    Exit;
  end;

  fViaKm := 0;
  fStEdKm := 0;
  bViaKm := False;
  giRealKmCnt := 0;
  giRealKmIdx := 1;
  giKmComplet := False;
  giKmComPletG := '';
  try
    if Not Assigned(SmartSR) then
      SmartSR := TSmartSRXCtrl.Create(nil);
  except on E: Exception do
    Assert(False, E.Message);
  end;

  try
    if RouteMan = nil then
      RouteMan := SmartSR.GetRouteMan();

    GetSearchRouteIpPort(SRIp, SRPort);

    SetDebugeWrite('0. SmartSR Open : IP - ' + SRIp + ',' + ' Port - ' + IntToStr(SRPort));

    if RouteMan.Open(SRIp, SRPort) then
      RouteMan.Clear()
    else
    begin
      if GS_SmartServerIP = SearchRoute1[0].IP then Inc(SR1ErrCnt)
                                               else Inc(SR2ErrCnt);

      GetSearchRouteIpPort(SRIp, SRPort);

      SetDebugeWrite('1. SmartSR Open : IP - ' + SRIp + ',' + ' Port - ' + IntToStr(SRPort));

      if RouteMan.Open(SRIp, SRPort) then
        RouteMan.Clear()
      else
      begin
        if GS_SmartServerIP = SearchRoute1[0].IP then Inc(SR1ErrCnt)
                                                 else Inc(SR2ErrCnt);
        Exit;
      end;
    end;

    if ( SR1ErrCnt > 4 ) And ( SR2ErrCnt > 4 ) then
    begin
      GMessagebox('현재 경로탐색 서버를 사용 할 수 없습니다.' + #13#10 +
                  '직선거리만 사용하거나 경탐서버 체크 해제후 사용하세요!', cdmsi);

      GT_DISTANCE_ST := 0;
      GS_EnvFile.WriteString('CHARGE', 'GT_DISTANCE_ST', IntToStr(GT_DISTANCE_ST));

      Assert(False, 'proc_Realdis_Mng Error : 거리계산방법 직선거리계산 으로 변경');
      Exit;
    end;

    proc_RealKmPtr_Init;

    Case Self.Tag of
    0  : RealKmPtr00_th1.CaActive := True;
    1  : RealKmPtr01_th1.CaActive := True;
    2  : RealKmPtr02_th1.CaActive := True;
    3  : RealKmPtr03_th1.CaActive := True;
    4  : RealKmPtr04_th1.CaActive := True;
    5  : RealKmPtr05_th1.CaActive := True;
    6  : RealKmPtr06_th1.CaActive := True;
    7  : RealKmPtr07_th1.CaActive := True;
    8  : RealKmPtr08_th1.CaActive := True;
    9  : RealKmPtr09_th1.CaActive := True;
    10 : RealKmPtr10_th1.CaActive := True;
    11 : RealKmPtr11_th1.CaActive := True;
    12 : RealKmPtr12_th1.CaActive := True;
    13 : RealKmPtr13_th1.CaActive := True;
    14 : RealKmPtr14_th1.CaActive := True;
    15 : RealKmPtr15_th1.CaActive := True;
    16 : RealKmPtr16_th1.CaActive := True;
    17 : RealKmPtr17_th1.CaActive := True;
    18 : RealKmPtr18_th1.CaActive := True;
    19 : RealKmPtr19_th1.CaActive := True;
    End;

		
		tmrThRealDis.Interval := 1;
    tmrThRealDis.Enabled := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 오더를 접수등록을 한다.
procedure TFrm_JON01.Proc_OrderJoinIns;
var
	sHdNo, sBrNo: string;
	iBrCharge, iBrSumCharge : Double; 
	sTmp : String;
begin
	SetDebugeWrite('JON01.Proc_OrderJoinIns');

	if func_ecukrCheck then 
	begin
		Proc_BtnEnabled(True);
		exit;
	end;

  if IsPayMethodPost then // 후불오더 캐쉬부족 체크..
  begin
		sHdNo := Proc_HDNOSearch;
    sBrNo := Proc_BRNOSearch;
		//--------------------------------------------------------------------------------------------------
		// 접수시 지사캐쉬 체크(캐쉬가 없어도 후불로 접수할수 있음)
		// 접수시 지사캐쉬 -50만원까지만 가능    20150424  LYB
//    if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.ShareNo = 'G91') or (GT_USERIF.ShareNo = 'G58') or (GT_USERIF.BR = 'B100') ) then
		// 접수시 지사캐쉬 본사별 설정 금액까지만 가능    20160616 KHS
		// 접수시 지사캐쉬와 이미 접수된오더(접수, 배차, 운행, 예약등)의 후불 입금액까지 확인하여 처리 20180131 KHS
		//--------------------------------------------------------------------------------------------------
		sTmp := '';

		if (GS_PRJ_AREA <> 'S') and (sHdNo = 'A1747') and (sBrNo = 'S954') then
		begin
			if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), 0, iBrCharge, iBrSumCharge) then
			begin
				GMessagebox('지사캐쉬(0원미만)가 부족하여 후불로 접수할 수 없습니다.', CDMSI);
				Proc_BtnEnabled(True);
				Exit;
			end;
		end
		else
		if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.ShareNo = 'G91') or (GT_USERIF.ShareNo = 'G58') or (GT_USERIF.BR = 'B100') ) then
		begin
			if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.HD = 'A1891') or (GT_USERIF.HD = 'A1897') or (GT_USERIF.HD = 'A1756') or
																	 (GT_USERIF.HD = 'A1763') or (GT_USERIF.HD = 'A1768') or (GT_USERIF.HD = 'A1757') or
																	 (GT_USERIF.HD = 'A1844') or (GT_USERIF.HD = 'A1752') or (GT_USERIF.HD = 'A1853') or
																	 (GT_USERIF.HD = 'A1771') or (GT_USERIF.HD = 'A1822') or (GT_USERIF.HD = 'A1753') or
																	 (GT_USERIF.HD = 'A1866') or (GT_USERIF.HD = 'A2014') or (GT_USERIF.HD = 'A2010') or
																	 (GT_USERIF.HD = 'A1769') or (GT_USERIF.HD = 'A1772') or (GT_USERIF.HD = 'A1905') or
																	 (GT_USERIF.HD = 'A1946') or (GT_USERIF.HD = 'A1764') or (GT_USERIF.HD = 'A1879') or
																	 (GT_USERIF.HD = 'A1948') or (GT_USERIF.BR = 'B100') ) then
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), -50000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-50,000원까지)가 부족하여 후불로 접수할 수 없습니다.', CDMSI);
					Proc_BtnEnabled(True);
					Exit;
				end;
			end else
			if (GS_PRJ_AREA <> 'S') and (GT_USERIF.HD = 'A1745') then
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), -100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-100,000원까지)가 부족하여 후불로 접수할 수 없습니다.', CDMSI);
					Proc_BtnEnabled(True);
					Exit;
				end;
			end	else
			if (GS_PRJ_AREA <> 'S') and (sHdNo = 'A2195') and (sBrNo = 'U589') then       //20170323 이명재대리요청
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), 100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬가 100,000원 이하일 경우 후불로 접수할 수 없습니다.', CDMSI);
					Proc_BtnEnabled(True);
					Exit;
				end;
			end   
			else
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), -100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-100,000원까지)가 부족하여 후불로 접수할 수 없습니다.', CDMSI);
					Proc_BtnEnabled(True);
					Exit;
				end;
			end;
		end else
		begin
			if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), 0, iBrCharge, iBrSumCharge) then
			begin
				sTmp := '해당지사의 캐쉬가 [%s]원으로 후불접수가 불가합니다';
				GMessagebox(Format(sTmp, [StrToMoney(FloatToStr(iBrCharge))]), CDMSI);                            
				Proc_BtnEnabled(True);
				Exit;
			end;
    end;
	end;

  try
    if (cxLblCIDUseFlg.Hint <> 'CID') and (gsCuTelHint <> cxtCuTel.Text) then
    begin // CID 조회인지 설정을 한다., 고객전화번호 변경여부를 체크하기 위해 저장한다.
      GMessagebox(
        Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10
        + Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
        + '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요',
        CDMSI);
			if cxtCuTel.CanFocus then cxtCuTel.SetFocus;
			Proc_BtnEnabled(True);
			Exit;
    end;

		if not NotNullCheck(True) then 
		begin
			Proc_BtnEnabled(True);
			Exit;
		end;

    // 접수
//    if btnCmdJoin.Enabled then
		begin
			btnCmdJoin.Enabled := False;
      lg_Save := '1';
      if BtnResv.Tag <> 1 then
      begin
				if not GS_JON_AutoStandBy then    // True := 접수->대기로 강제적용 2014.03.25 khs
					Proc_Save('0')  // 즉시 접수
				else
					Proc_Save('5');  //대기
			end else
				Proc_Save('R'); // 예약 접수

      if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
      begin
        btnCmdExit.Tag := -1;
			end;
//			Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
		end;
	except
		Proc_BtnEnabled(True);
		btnCmdJoin.Enabled := True;
    Log('Accept_Error1', LOGDATADIRECTORY + 'Accept_Err.log');
  end;
end;

// 접수전 기본값 체크..
procedure TFrm_JON01.N1SeoulClick(Sender: TObject);
var
  sAreaCode: string;
begin
  loc_sHoTransArea := TMenuItem(Sender).Caption;
  // 콜라우팅 호전환 지역 정보 저장.
  sAreaCode := IntToStr(TMenuItem(Sender).Tag);
  // 지역코드값 저장. 0(공)빠짐 : (2:서울, 31:경기, 32:인천, 42,41,43,,,)

  // 호전환 : 콜라우팅 요청을 한다.
  if Proc_HoTransferReq(sAreaCode,TMenuItem(Sender).caption) = False then
  begin
    loc_sHoTransArea := '';
    sAreaCode := '';
  end;
end;

// 호전환 버튼 클릭 : 콜라우팅 요청을 한다.
function TFrm_JON01.Proc_HoTransferReq(sAreaCode: string; sAreaName: string): boolean;
var
  sSend : AnsiString;
  ls_msg, rv_str, sResult, sCid, sBRNO, sCuTel: string;
begin
  Result := False;

  if (Trim(cxtCallTelNum.Text) = '') then
  begin
    GMessagebox('고객번호가 없습니다.', CDMSI);
    Exit;
  end;

  cxtCallTelNum.Text := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
  sCuTel:= cxtCallTelNum.Text;
  sCuTel:= StringReplace(sCuTel, '-', '', [rfReplaceAll]);

  if pnlJonMain.Enabled = False then Exit;

  // 상담원 호전환 기본 지역코드 설정값.
  if (Length(GS_DDD_Num) < 3) or (GS_DDD_Num = '999') then
  begin
    GMessagebox('상담원 지역이 선택 안되었습니다.' + #13#10 + '지역을 선택하세요', CDMSI);
    Exit;
  end;
  if GT_CAT_PORT.HoTransIP = '' then
  begin
    GMessagebox('호전환 서버 접속정보 확인이 안되었습니다.[1]', CDMSI);
    Exit;
  end;
  if GT_CAT_PORT.HoTransPort < 20 then
  begin
    GMessagebox('호전환 서버 접속정보 확인이 안되었습니다.[2]', CDMSI);
    Exit;
  end;

  // 2010.12.02
  // 콜전환할경우 하단을 실행, NO선택시 Exit

  if MessageDlg('"' + sAreaName + '" 지역으로콜전환 하시겠습니까?',mtConfirmation,[mbYes,mbNo],0)=idyes then
  begin
    // 하단 실행
  end else
  begin
    Exit;
  end;

  sBRNO   := Proc_BRNOSearch;           // 지사코드 정보를 읽는다.
  locKNum := Proc_MainKeyNumberSearch;  // 대표번호 정보를 읽는다.
  sSend := '';

  sSend := 'ARS' + formatDateTime('yyyymmddhhmmss', now) + Rpad(locKNum, 14, ' ')
    + GS_DDD_Num + Rpad(sCuTel, 14, ' ') + '1000' + '1' + '000' + RightStr('00' + sAreaCode, 3);

  try
		IdHoTrans.Disconnect;
    IdHoTrans.Host := '211.219.153.66';  // 서울,광주 콜센터 : 1544-1212 안전지대
    IdHoTrans.Port := GT_CAT_PORT.HoTransPort; // 6001
    IdHoTrans.ReadTimeout := 5000; // 약 5초정도 대기..
    IdHoTrans.Connect;

		IdHoTrans.IOHandler.Write(RawToBytes(PAnsiChar(sSend)^, Length(sSend)));
  except on E: Exception do
    begin
      GMessagebox('호전환 서버가 연결이 되지 않았습니다.' + #13#10 +
        '다시 시도하세요' + #13#10 + E.Message, CDMSI);
      // CDMSI : 자동종료 메시지.
      Exit;
    end;
  end;

  try
    // VOIP 서버에 요청 후 결과 읽기.
    IdHoTrans.IOHandler.CheckForDataOnSource(10);
    rv_str := IdHoTrans.IOHandler.InputBufferAsString;

    if rv_str <> '' then
    begin
      // 처리 결과 응답이 000:정상 인지 확인 한다.
      sResult := Trim(Copy(rv_str, 54, 3));
      // DB라우팅 결과가 정상이고, 최초 요청한 Client PC에게 결과를 보낸다.
      sCid := Trim(Copy(rv_str, 35, 14));

      //JobProcessLight(False, False, 0);
      if length(sResult) = 3 then
      begin
        case StrToIntDef(sResult, 999) of
          0:
            begin
              GMessagebox(loc_sHoTransArea +
                ' 지역으로 호전환을 하였습니다', CDMSI);
              Result := True;
              IdHoTrans.Disconnect;
              Exit;
            end;
          8: GMessagebox(loc_sHoTransArea + ' 지역에 회사가 없습니다.' +
              #13#10 + '다른 지역을 선택하고 확인 버튼을 누르세요', CDMSI);
          9: GMessagebox('CID가 없습니다.' + #13#10 +
              '다른 지역을 선택하고 확인 버튼을 누르세요', CDMSI);
          999: GMessagebox('네트워크가 불안정 합니다.' + #13#10 + '다시 시도해 주세요', CDMSI);
        end;
        IdHoTrans.Disconnect;
      end else
      begin
        GMessagebox('네트워크가 불안정 합니다.' + #13#10 + '다시 시도해 주세요', CDMSI);
        IdHoTrans.Disconnect;
      end;
    end else
    begin
      GMessagebox('네트워크가 불안정 합니다.' + #13#10 + '다시 시도해 주세요', CDMSI);
      IdHoTrans.Disconnect;
    end;
  except
    on E: Exception do
    begin
      ls_msg := '호전환 요청 후 처리결과에 문제가 발생하였습니다.' + #13#10 + e.Message;
      GMessagebox(ls_msg, CDMSE);
      IdHoTrans.Disconnect;
    end
  end;
end;

procedure TFrm_JON01.N3Click(Sender: TObject);
begin
  SetDebugeWrite('JON01.N3Click');
  try
    if ( not Assigned(Frm_JON016) ) Or ( Frm_JON016 = Nil ) then
      Frm_JON016 := TFrm_JON016.Create(Nil);

    if ( TPopupMenu(Sender).Name = 'N3' ) Or
       ( TPopupMenu(Sender).Name = 'N4' ) then
    begin
      Frm_JON016.Tag := 1;
      Frm_JON016.pnlTitle.Caption := '   [접수창] 출발지/도착지 상용구 설정';
      Frm_JON016.pnlTitle.Color := $008FEBFE;
    end else
    begin
      Frm_JON016.Tag := 2;
      Frm_JON016.pnlTitle.Caption := '   [접수창] 적요 상용구 설정';
      Frm_JON016.pnlTitle.Color := $00CEEADF;
    end;

    Frm_JON016.Show;
    Frm_JON016.LoadData;
    Frm_JON016.BringToFront;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.N5Click(Sender: TObject);
var
  EnvFile: TIniFile;
  iLeft : Integer;
begin
  SetDebugeWrite('JON01.N5Click');
  EnvFile := TIniFile.Create(ENVPATHFILE);
  try
    try
      if Screen.MonitorCount = 1 then iLeft := Self.Left else
      begin
        if Monitor.MonitorNum = 0 then
          iLeft := Self.Left
        else
        begin
          // 모니터2를 왼쪽으로 사용하는 사용자로 인해 마이너스값 처리
          if Self.Left <= 0 then
          begin
            iLeft := ( Screen.Monitors[1].Width + Self.Left );
          end else
            iLeft := Self.Left
        end;
      end;
    except
      iLeft := Self.Left
    end;

    EnvFile.WriteInteger('WinPos', 'Jon01Left', iLeft);
    EnvFile.WriteInteger('WinPos', 'Jon01Top' , Self.Top );

    Frm_Main.iJonLeft := iLeft;
    Frm_Main.iJonTop  := Self.Top;

    GMessagebox('설정 완료', CDMSI);
  finally
    EnvFile.Free;
  end;
end;

function TFrm_JON01.NotNullCheck(b24HourCheck: boolean = False): Boolean;
var
  UserMile: Integer;
  sErrLine : String;
begin
  SetDebugeWrite('JON01.NotNullCheck');
  try
    Result := False;
    // DNIS 대표번호 찾기 정보창을 감춘다.  2011.05.17
    shrDNIS_DSP.Visible := False;
    locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    if Length(locHdNo) < 3 then
    begin
      GMessagebox('지사정보를 선택하지 않았습니다. 지사를 선택 한 후에 오더접수를 하세요!', CDMSI);
      Exit;
    end;

    try
      if (cxtCuTel.Text = '') and ((cxtCallTelNum.Text = '발신정보없음') or (cxtCallTelNum.Text = '')) then
      begin
        GMessagebox('고객번호는 ' + MDXCI_0005, CDMSI);
        if (Self.Showing) And (cxtCuTel.CanFocus) then cxtCuTel.SetFocus;
        Exit;
      end;
    except
      on e: exception do begin
        Result := False;
        Assert(False, 'NotNullCheck Error 3 :' + sErrLine + ':' + E.Message);
      end;
    end;

    if Trim(meoStartArea.Text) = '' then
    begin
      if lg_Save <> '1' then
      begin
        GMessagebox('출발지는 필수 입력 항목 입니다.', CDMSI);
        if (Self.Showing) And (meoStartArea.CanFocus) then meoStartArea.SetFocus;
        Exit;
      end;
    end;

    if Length(cxtCuTel.Text) > 1 then
    begin
      if not NumericCheck(STANDFUNCPATHFILE, '고객번호는 숫자만 입력하세요', cxtCuTel.Text) then
      begin
        if (Self.Showing) And (cxtCuTel.CanFocus) then cxtCuTel.SetFocus;
        Exit;
      end;
    end;
    locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.
    if not NumericCheck(STANDFUNCPATHFILE, '대표번호는 숫자만 입력하세요', locKNum) then
    begin
      if (Self.Showing) And (cboBranch.CanFocus) then cboBranch.SetFocus;
      Exit;
    end;
    // 24시간이 지난오더 수정 모드로 들어와 신규접수,대기 등록할때, 오늘접수등록 알림 메시지 보여준다.
    if (b24HourCheck = True) and (btnCmdUpdSave.Tag = 99) then
    begin
      GMessagebox('[신규접수알림] 수정모드에서 당일(오늘) 신규오더로 접수 합니다.', CDMSI);
      //Exit;   // 접수는 가능하게 되어야 함.
    end;

		if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) then
    begin
      if locCardPaySeq = '' then     //20130613  LYB 후불마일리지 사용시 쿠폰사용하면 마일리지 체크 않함
			begin
				//(-)마일 금액일 경우 접수안되도록 막음 20160826 KHS
				if StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0) < 0 then
				begin
					GMessagebox('마일리지 금액이 (-)금액입니다. '+ #13#10 + '후불(마일)을 사용할 수 없습니다.', CDMSI);
					cbbPayMethod.ItemIndex := 0;
					Exit;
				end	else
				begin
					UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0) 
										+ StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);
					if edtPostPay.Value > UserMile then
					begin
						GMessageBox(Format('고객의 보유 마일리지(%s)를 초과하여 마일리지를 입력하셨습니다.', [FormatFloat('#,##0', UserMile)]), CDMSI);
						edtPostPay.Value := UserMile;
						if (Self.Showing) And (edtPostPay.CanFocus) then edtPostPay.SetFocus;
						Exit;
					end;
				end;
			end;
    end;
    Result := True;
  except
    on e: exception do
    begin
      Result := False;
      Log('NotNullCheck Error :' + sErrLine + ':' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'NotNullCheck Error :' + sErrLine + ':' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.PnlBtmMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01.pnlCallBellAllClick(Sender: TObject);
begin
	tmUpsoPnl.Enabled := False;
	pnlCallBellAll.Visible := False;
end;

procedure TFrm_JON01.Panel3MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01.PnlRightMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01.PnlTitleMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
	ReleaseCapture;
	PostMessage(Self.Handle, WM_SYSCOMMAND, $F012, 0);
end;

// 주문 접수를 처리 한다.
procedure TFrm_JON01.Proc_Save(ss_Mode: string);
const
  lc_stCid  = '<CidInfo CidsYn="CidsYnString" CidsVersion="CidsVersionString" CidsAuto="CidsAutoString" CidsInline="CidsInlineString" CidsDnis="CidsDnisString" '
                    + 'CidsKeyNumber="CidsKeyNumberString" CidsCidNum="CidsCidNumString" CidsCidKey="CidsCidKeyString" CidsBrNo="CidsBrNoString" ManTel="ManTelString"  '
										+ 'ManKeyNumber="ManKeyNumberString" ManBrNo="ManBrNoString" />';

  lc_stArea = '<Depart Area1="stArea1String" Area2="stArea2String" Area3="stArea3String" Area4="stArea4String" Area5="stArea5String" '
                    + 'Charge="ChargeString" ConfInfo="ConfInfoString" MapX="stMapXString" MapY="stMapYString" PayGubun="PayGubunString" '
                    + 'Unpriced="UnpricedString" MCharge="MChargeString" MPayer="MPayerString" URLReq="URLReqString" WaitTime="WaitTimeString" '
                    + 'ChargeType="ChargeTypeString" AreaOpt="AreaSOPTString" AreaDebug="AreaSDebugString" AreaUp="AreaUPS" AreaSetType="AreaSetTypeString" '
										+ 'AreaKeyword="AreaKeywordString" AreaId="AreaIdString" Call2YN = "Call2YNString" EstTime="EstTimeString" EstDist="EstDistString" '
										+ 'DriverCharge="DriverChString" />';

  lc_edArea = '<Dest Area1="edArea1String" Area2="edArea2String" Area3="edArea3String" Area4="edArea4String" Area5="edArea5String" '
                  + 'MapX="edMapXString" MapY="edMapYString" AreaOpt="AreaEOPTString" AreaDebug="AreaEDebugString" AreaUp="AreaUPE" AreaSetType="AreaSetTypeString" AreaKeyword="AreaKeywordString" AreaId="AreaIdString" />';

	lc_ViaInfoString = '<Via Area1="Area1String" Area2="Area2String" Area3="Area3String" Area4="Area4String" Area5="Area5String" '
                        + 'MapX="MapXString" MapY="MapYString" AreaOpt="AreaVOPTString" AreaDebug="AreaVDebugString" AreaUp="AreaUPV" AreaSetType="AreaSetTypeString" AreaKeyword="AreaKeywordString" AreaId="AreaIdString" />';
var
  ls_TxLoad: string;
  lRow, iRow, iFidx: Integer;
  ls_stCid, ls_stArea, ls_stArea_Tot, ls_edArea, ls_edArea_Tot, ls_ViaInto: string;
  sCbCode, sCbNm, sCbDp, sErrMsg, sMsg, ls_msg : string;
  sBaechSMS: string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  I, ErrCode: integer;

  iX, iY : String;

	chkFlag : Boolean;
	StrValue, sContent: string;
  MCData: TMultiCallData;
  startTick, delta : DWord;
  	sTmpLon, sTmpLat : string;
	dTmpLon, dTmpLat : Double;
	bLonLat : Boolean; //좌표유효성 검사
begin
	SetDebugeWrite('JON01.Proc_Save');
  startTick := GetTickCount;

	try
		bLonLat := True;
		sTmpLon := SetWGS84(cxtStartYval.Text); 
		sTmpLat := SetWGS84(cxtStartXval.Text);      //037XXXXX -> 37.XXXXXXX로 변환
		dTmpLon := StrToFloatDef(sTmpLon, 0);                        //더블형으로 변환
		dTmpLat := StrToFloatDef(sTmpLat, 0);

		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
		begin
			if (ss_Mode <> '4') and (ss_Mode <> '5') then
			begin
				bLonLat := PtInPolygon(dTmpLon, dTmpLat, FKOREAAREA_XY.Lon, FKOREAAREA_XY.Lat, FKOREAAREA_XY.Lon.count);
				if Not bLonLat then  //유효한 좌표가 아니면
				begin
					GMessagebox('[출발지 좌표오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
										+ '좌표(' + cxtStartYval.Text + '/' + cxtStartXval.Text + ')' + #13#10
										+ '출발지를 다시 조회하시기 바랍니다.', CDMSI);
					Assert(False, '출발지좌표 : ' + lcsStaDocId + '/'
											 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + meoStartArea.text + '/' + GS_Grid_DEP + '/' + ss_Mode);
					if meoStartArea.CanFocus then meoStartArea.SetFocus;
					Proc_BtnEnabled(True);
					Exit;
				end;
			end;
		end;
		
		if (lcsEnd1 <> '') and ((lcsEnd2 <> '') or (lcsEnd3 <> '')) and ((cxtEndYval.Text = '') or (cxtEndXval.Text = '')) then
		begin
			GMessagebox('[도착지 좌표오류]' + #13#10 + '도착지좌표가 올바르지 않습니다.' + #13#10
								+ '좌표(' + cxtEndYval.Text + '/' + cxtEndXval.Text + ')' + #13#10
								+ '도착지를 다시 조회하시기 바랍니다.', CDMSI);
			Assert(False, '도착지좌표 : ' + lcsStaDocId + '/'
									 + cxtEndYval.Text + '/' + cxtEndXval.Text + '/' + meoEndArea.text + '/' + GS_Grid_DES + '/' + '복수콜등록');
			if meoEndArea.CanFocus then meoEndArea.SetFocus;
			Proc_BtnEnabled(True);
			Exit;
		end;

		if StrToIntDef(edtWkFAge.Text, 0) > StrToIntDef(edtWkTAge.Text, 0) then
		begin
      ShowMessage('제한나이 설정이 잘못되었습니다.');
      edtWkFAge.SetFocus;
			Proc_BtnEnabled(True);
			Exit;
    end;

    iFidx := Self.Tag;          // 폼의 index를 저장.

		//접수 시작
		ls_stArea := '';
		ls_edArea := '';
		ls_stArea_Tot := '';
		ls_edArea_Tot := '';
		Proc_BtnEnabled(False);     // 버튼 활성/비활성 처리.
		locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
    locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

    if ( locKNum <> lsBr_KeyNumber ) and ( Trim(lsBr_KeyNumber) <> '' ) then
    begin
			ls_msg := '저장 대표번호[' + locKNum + ']와 조회 대표번호['+ lsBr_KeyNumber +']가 다릅니다' + #13#10 +
                '고객번호에서 다시 엔터를 치세요';
      Assert(False, 'Frm_JON01.Proc_Save - 대표번호상이.' + cxtCuTel.Text + ' : '  + ls_msg);
			Application.MessageBox(PChar(ls_msg), '콜마너 XE 3', MB_OK);
			Proc_BtnEnabled(True);
			Exit;
    end;

    if ( locLogSeq <> '' ) and ( gsCidVersion = 'CXE' )then
    begin
      if Pos(cxtCuTel.Text, locLogSeq) <= 0 then
      begin
  			ls_msg := '조회전화번호[' + cxtCuTel.Text + ']와 CID전화번호['+ Copy(locLogSeq, 5, 11) +']가 다릅니다' + #13#10 +
                  '고객번호에서 다시 엔터를 치세요';
        Assert(False, 'Frm_JON01.Proc_Save - 전화번호상이.' + ls_msg);
        Application.MessageBox(PChar(ls_msg), '콜마너 XE 3', MB_OK);
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    if ( ( Not fnc_RealKmThread_End ) And ( GT_DISTANCE_ST = 1 ) )  Or  ( giViaKmComplet )  then
    begin
      GMessagebox('경로탐색거리 계산중입니다' + #13 +
                  '완료 후 종료 바랍니다.', CDMSI);
			Proc_BtnEnabled(True);
			Exit;
    end;
		
    if cxtCallTelNum.Text = '' then
    begin
      cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
      cxtCallTelNum.Text := cxtCuTel.Text;
		end;

    if Not Frm_Main.JON01MNG[Self.Tag].rOriginal then
    begin
      if lblCShareJId.Hint = GT_USERIF.ID then
      begin
        if gsOrderClick = '0' then
          pSet705CShareDataClick(False, 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdJoin', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]) else
        if gsOrderClick = '5' then
          pSet705CShareDataClick(False, 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdWait', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]) else
        if gsOrderClick = '4' then
          pSet705CShareDataClick(False, 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdQuestion', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]) else
        if gsOrderClick = 'JC' then
          pSet705CShareDataClick(False, 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdJoinCopy', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]) else
        if gsOrderClick = 'WC' then
          pSet705CShareDataClick(False, 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdWaitCopy', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);

				Proc_BtnEnabled(True);
				Exit;
      end else
      if lblCShareRId.Hint = GT_USERIF.ID then
      begin
        if gsOrderClick = '0' then
          pSet705CShareDataClick(False, 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdJoin', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]) else
        if gsOrderClick = '5' then
          pSet705CShareDataClick(False, 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdWait', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]) else
        if gsOrderClick = '4' then
          pSet705CShareDataClick(False, 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdQuestion', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]) else
        if gsOrderClick = 'JC' then
          pSet705CShareDataClick(False, 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdJoinCopy', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]) else
        if gsOrderClick = 'WC' then
          pSet705CShareDataClick(False, 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, 'btnCmdWaitCopy', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);

				Proc_BtnEnabled(True);
				Exit;
      end;
    end else
    begin
      if ( ( pnlRShare.Visible ) Or ( pnlRShare.Tag = 1 ) ) then
      begin
        if lblCShareJId.Hint = GT_USERIF.ID then
        begin
          pSet705CShareData(False, 'n', 'j', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
        end else
        if lblCShareRId.Hint = GT_USERIF.ID then
        begin
          pSet705CShareData(False, 'n', 'r', Frm_Main.JON01MNG[Self.Tag].rKey, lblCShareJId.Hint, lblCShareRId.Hint, Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
        end;
      end;
    end;

    //////////////////////////////////////////////////////////////////////////////////
    //  접수 전문
    //////////////////////////////////////////////////////////////////////////////////
		ls_TxLoad := GTx_UnitXmlLoad('JON03080.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    sBaechSMS := '';
		StrValue := '';

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallBellStatusString', pnlCallBell.Hint); // 콜벨업소여부(1:정상, 2:해지, null: 콜벨 업소 설정 없음)
		
		// 접수창에서 기사 강제 배차는 없어졌지만..접수 조회 화면에서 강제 배차가 있기 때문에 처리
    if ( blCompulWor ) and (Trim(sWkSabun) <> '') then
    begin
      sBaechSMS := IfThen(blChkCuSMS, '0', '1');  // 고객에게 문자를 전송할지의 여부,,
      if ss_Mode <> 'R' then
        ss_Mode   := '0';
      StrValue := Trim(sWkSabun);
    end;

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkSabunString', StrValue); // 기사사번 읽기.
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'BaechaSMSString', sBaechSMS);

    StrValue := IfThen(ChkCuSmsNo.Checked, 'n', 'y');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', StrValue);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'SAVE000' + ss_Mode);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'StatusString', ss_Mode);

    StrValue := IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(StrValue));

    StrValue := IfThen(0 >= Pos('*', cxtCuTel2.Text), cxtCuTel2.Text, locsCuTel2);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTel2String', En_Coding(StrValue));

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CIDString', '');
    // 당일중에 제일 첫건에 대해서만 주장치에서 받았는지.. 직접접수했는지 체크함.[요는 콜마너를 사용하고있는지 체크하기 위함임]

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallCenterString', En_Coding(GT_USERIF.CT));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'MaddBrchString', En_Coding(locBrNo));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'KeyNumberString', En_Coding(locKNum));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CidLogSeqString', En_Coding(locLogSeq));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'DNISString', locDNIS);

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuCCMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfMemoString', En_Coding(sContent));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBrchString', '');

    // 고객구분-0(일반), 1(업소), 3(법인)
		if CbCuGb.ItemIndex = 2 then StrValue := '3' else
    if CbCuGb.ItemIndex = 1 then StrValue := '1'
                            else StrValue := '0';

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', StrValue);

    // 고객등급 추가 : 0.불량:빨강, 1.주의:주황, 2.일반:하늘, 3.우수:동색, 4.최우수:은색, 5.VIP:황금색
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'LevelCdString', GetCustLevelSeq);

    // 경유요금 :::::::: 신버전 추가 기능 개발..(법인기능요청으로,,개발,,)
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaChargeViaString', ReplaceAll(cxCurPathRate.Text, ',', ''));
    // 대기요금
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WChargeWCString', ReplaceAll(cxCurWaitTmRate.Text, ',', ''));
    // 대기시간
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WTimeWTString', cxTmWaitTime.Text + FloatToStr(fCruKm));
    // 보정금액
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'AChargeACString', ReplaceAll(cxCurRevisionRate.Text, ',', ''));
    // 적요투(2)
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfo2String', En_Coding(ReplaceAll(meoBigo2.Text, #10#13, '|')));
    // 적요투(3)
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfo3String', En_Coding(ReplaceAll(meoBigo3.Text, #10#13, '|')));

    // 기사종류
    if BtnOptionSexM.Down then StrValue := 'M' else
    if BtnOptionSexF.Down then StrValue := 'F'
                          else StrValue := 'A';

		if sTakHwak = 'y' then        //신규일때는 신버전 수도권만 탁확 사용하기때문에 선택한 보험으로 적용 2017.04.12 KHS
			sLicType := GetLicTypeCode(cbbLicType.Text)
		else sLicType := '00';
		if cb_04.Down then sStickCall := 'y' else sStickCall := 'n';
		StrValue := StrValue + sStickCall + sTaksong + sTakHwak + sLicType;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'DriverString', StrValue);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostTimeString', PostTime); // 입금시간코드
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostChargeString', IntToStr(edtPostPay.Value)); // 자동입금금액
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkChargeString', ReplaceAll(cxLblWkJAmt.Caption, ',', '')); // 기사지원금

    sCbCode := '';
    sCbNm   := '';
    sCbDp   := '';
    if cxtCuBubin.Hint <> '' then
    begin // 법인코드 체크.
      sCbCode := cxtCuBubin.Hint;
      iRow := GT_BUBIN_INFO.cbcode.IndexOf(sCbCode + ',' + locBrNo);
      if iRow >= 0 then
      begin
        sCbNm := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc.Strings[iRow]), 121, 16));  // 단축법인명
        sCbDp := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc.Strings[iRow]), 137, 16));  // 단축법인부서명

        try
          if Trim(sCBNm) = '' then
          begin
            Assert(False, En_Coding('저장)법인코드검색오류1 - 검색명 : ' + sCbCode + ',' + locBrNo + ' 검색어 : ' + AnsiString(GT_BUBIN_INFO.cbEtc.Strings[iRow])));
          end;
        except
         on e: Exception do
             Assert(False, E.Message);
        end;
      end else
      begin
        Assert(False, En_Coding('저장)법인코드검색오류2 - 검색명 : ' + sCbCode + ',' + locBrNo + ' 검색갯수 : ' + IntToStr(GT_BUBIN_INFO.cbcode.Count)));
      end;
    end;

    // 법인일 경우 세팅..
    if (CBCuGb.ItemIndex = 2) and (cxtCuBubin.Hint <> '') then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', En_Coding(sCbCode));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BNameString', En_Coding(sCbNm));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BName2String', En_Coding(sCbDp));
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BNameString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BName2String', '');
    end;
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuSeqString', lcsCu_seq);
    // 예약시간 //if chkResv.Checked = True then
    StrValue := IfThen(ss_Mode = 'R', formatdatetime('yyyymmdd', dtpResvDate.Date) + formatdatetime('hhmm', dtpResvTime.Time) + '00', '');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPretimeString', StrValue);

    StrValue := IfThen(ss_Mode = 'R', formatdatetime('yyyymmdd', dtpResvDateJ.Date) + formatdatetime('hhmm', dtpResvTimeJ.Time) + '00', '');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreRealTimeString', StrValue);

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'GroupNoString', En_Coding(locHdNo));

    if cbTelView.ItemIndex = 0 then StrValue := '1' else
    if cbTelView.ItemIndex = 1 then StrValue := '2' else
    if cbTelView.ItemIndex = 2 then StrValue := 'c';

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuCallingOptionString', StrValue);

		StrValue := IfThen(BtnCenterMng.Down, 'y', 'n'); // 상황실 체크박스
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'BrTelYnString', StrValue);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuTelYnString', CustBrTelYN);

    // 기사종류
		if BtnOptionSexM.Down then StrValue := 'M' else
    if BtnOptionSexF.Down then StrValue := 'F'
                          else StrValue := 'A';
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'OptionString', StrValue);

		// 플러스콜 설정값 추가. 2010.10.03 --> 플러스콜을 법인콜로 변경함. 110906.
		// 플러스콜 여부(수도권만 사용함)
    if GS_PRJ_AREA = 'S' then
		begin
			StrValue := IfThen(BtnPlusYN.Down, 'y', 'n'); // 플러스콜 체크박스 --> 플러스콜을 법인콜로 변경함. 110906.
		end else
		begin
			StrValue := 'n';    // 지방권은 무조건 법인콜 사용안함. 2011-11-10.
		end;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PlusYnString', StrValue);

		// 탁송연합콜 설정값 추가. 2019.05.15 
		StrValue := IfThen(BtnTakAlly.Down, 'y', 'n'); 
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConsShareYnString', StrValue);

		// AI 아웃바운드 배차지연콜 사용여부 추가. 2019.07.16 KHS
		StrValue := IfThen(chk_AIReCall.Checked, 'y', 'n'); 
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'AiOutString', StrValue);
		
		StrValue := IfThen(BtnWKJAmt.Down, 'y', 'n'); // 지원금 체크박스
		// KCP 카드결제 "결제일련번호" 추가.  2011-10-19
		StrValue  := StrValue + '" CardPaySeq="' + locCardPaySeq;

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostChargeSmsYNString', StrValue);


		if (btnCmdJoinCopy.Hint = 'JOINCOPY') or (btnCmdWaitCopy.Hint = 'JOINCOPY') then
		begin
			if Assigned(Frm_JON34) then Frm_JON34.proc_init;
			locCardPaySeq  := '';
			locCardTranNo  := '';
			locCardPayInfo := '';
		end;


		//PUSH 발송용 2013.03.30 khs
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'AppCodeString', sAppCode);

		// --------------------------------------------------------------------------------------------
		// 2018.10.16 추가(차종타입 0:1종/1:2종)
		if cb_CarType.ItemIndex = 1 then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarTypeString', En_Coding('2')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarTypeString', En_Coding('1')) ;

		// --------------------------------------------------------------------------------------------
		// 2019.04.11 마일리지사용시 마일리지 적립
		if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) and (btnCashSave.Down = True) then			
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CashSaveYnString', En_Coding('y')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CashSaveYnString', En_Coding('n')) ;
			
		if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) and (btnMileSave.Down = True) then			
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'MlgSaveYnString', En_Coding('y')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'MlgSaveYnString', En_Coding('n')) ;
		// --------------------------------------------------------------------------------------------

		// 2006.06.06 추가(고객명, 차량정보, 후불, 맵번호에서 좌표로 변경)
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustNameString', En_Coding(edtCuName.Text));

    if chkViewLevel.Checked then
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViewLevelString', En_Coding('1'))
    else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViewLevelString', En_Coding('0'));

    if BtnWkAge.Down then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkFromAgeString', En_Coding(edtWkFAge.Text));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkToAgeString', En_Coding(edtWkTAge.Text));
    end
    else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkFromAgeString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkToAgeString', '');
    end;

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuWorMemo.Text), #$D#$A, '|');
		sContent := ReplaceAll(sContent, #13#10, '|');
		sContent := ReplaceAll(sContent, #10#13, '|');
		sContent := StringReplace(sContent, '│', '|', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarInfoString', En_Coding(sContent));

    if ss_Mode = 'R' then
    begin
      if BtnResJ.Down then
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '0')
      else
      if BtnResD.Down then
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '5');
    end else
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '');

    if BtnOptionCallMu.Down then
  		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfOptionsString', 'y')
    else
  		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfOptionsString', 'n');

		sContent := '';
		sContent := ReplaceAll(Trim(edt_CardMemo.Text), #$D#$A, '|');
		sContent := ReplaceAll(sContent, #13#10, '|');
		sContent := ReplaceAll(sContent, #10#13, '|');
		sContent := StringReplace(sContent, '│', '|', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuMemoString', En_Coding(sContent));

    // CID 정보 전송
    ls_stCid := lc_stCid;

    if cxLblCIDUseFlg.Hint <> 'CID' then
    begin
      ls_stCid := StringReplace(ls_stCid, 'CidsYnString',        'n', [rfReplaceAll]); // CID서버로 부터 생성된 창인지 여부 (y,n)
      if gsCidVersion = 'CXE' then
        ls_stCid := StringReplace(ls_stCid, 'CidsVersionString',   '1', [rfReplaceAll]) // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      else
        ls_stCid := StringReplace(ls_stCid, 'CidsVersionString',   '0', [rfReplaceAll]); // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      ls_stCid := StringReplace(ls_stCid, 'CidsInlineString',    ''                     , [rfReplaceAll]); // 내선번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsDnisString',      ''                     , [rfReplaceAll]); // DNIS번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsKeyNumberString', ''                     , [rfReplaceAll]); // 대표번호  (CID서버에서 수신한값
      ls_stCid := StringReplace(ls_stCid, 'CidsCidNumString',    ''                     , [rfReplaceAll]); // 고객번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsCidKeyString',    ''                     , [rfReplaceAll]); // 고객번호별고유키값  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsBrNoString',      ''                     , [rfReplaceAll]); // 지사코드 (CID서버에서 수신한값)
    end else
    begin
      ls_stCid := StringReplace(ls_stCid, 'CidsYnString',        'y'                    , [rfReplaceAll]); // CID서버로 부터 생성된 창인지 여부 (y,n)
      if gsCidVersion = 'CXE' then
        ls_stCid := StringReplace(ls_stCid, 'CidsVersionString',   '1', [rfReplaceAll]) // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      else
        ls_stCid := StringReplace(ls_stCid, 'CidsVersionString',   '0', [rfReplaceAll]); // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      ls_stCid := StringReplace(ls_stCid, 'CidsInlineString',    gsInternalNumber       , [rfReplaceAll]); // 내선번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsDnisString',      En_Coding(locDNIS)     , [rfReplaceAll]); // DNIS번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsKeyNumberString', En_Coding(locKNum)     , [rfReplaceAll]); // 대표번호  (CID서버에서 수신한값
      ls_stCid := StringReplace(ls_stCid, 'CidsCidNumString',    cxtCallTelNum.Text     , [rfReplaceAll]); // 고객번호  (CID서버에서 수신한값)
			ls_stCid := StringReplace(ls_stCid, 'CidsCidKeyString',    locSndTime             , [rfReplaceAll]); // 고객번호별고유키값  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsBrNoString',      En_Coding(locBRNO)     , [rfReplaceAll]); // 지사코드 (CID서버에서 수신한값)
    end;

    ls_stCid := StringReplace(ls_stCid, 'ManTelString',        cxtCuTel.Text     , [rfReplaceAll]); // 고객번호   (상담원의 임의로 고객번호입력)
    ls_stCid := StringReplace(ls_stCid, 'ManKeyNumberString',  En_Coding(locKNum), [rfReplaceAll]); // 대표번호   (상담원이 임의로 지사/대표번호 선택)
    ls_stCid := StringReplace(ls_stCid, 'ManBrNoString',       En_Coding(locBRNO), [rfReplaceAll]); // 지사코드   (상담원이 임의로 지사/대표번호 선택)

    // 사용자별 오더통계를 계산하기 위한 속성값(CID : 0(일반), 1(CID))
    if cxLblCIDUseFlg.Hint = 'CID' then
    begin
      if locCustHP_MainNum_Search = '' then
        // JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
        ls_stCid := StringReplace(ls_stCid, 'CidsAutoString', '1', [rfReplaceAll])   // CID서버로부터 생성되어 최초 전문요청시 (1)
      else
        ls_stCid := StringReplace(ls_stCid, 'CidsAutoString', '0', [rfReplaceAll]);
    end else
    begin
      ls_stCid := StringReplace(ls_stCid, 'CidsAutoString', '0', [rfReplaceAll]);
    end;

    // //////////////////////////////////////////////////
    // 복수콜 처리[신버전에선 제외: 다른방식 채용]
		// //////////////////////////////////////////////////
		if (Assigned(Frm_JON015) and Frm_JON015.HandleAllocated)
			and (Frm_JON015.Count > 0) and (Frm_JON015.OrderHandle = Self.Handle) then
    begin
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'AddressCountString', IntToStr(Frm_JON015.Count));

			for I := 0 to Frm_JON015.Count - 1 do
      begin
				ls_stArea := lc_stArea;
				ls_edArea := lc_edArea;

				Frm_JON015.GetMultiCallData(I, MCData);

        // 출발지 좌표 중 X/Y가 동일하거나, X좌표가 비어있는 경우 발생하여 예외처리 지시(최도순)
        if ((MCData.StPosX <> '') or (MCData.StPosY <> '')) and ((MCData.StPosX = MCData.StPosY) or
					(MCData.StPosX = '')) then
				begin
					GMessagebox('출발지 좌표 정보가 올바르지 않습니다. 출발지를 다시 조회하시기 바랍니다.', CDMSI);
      		Proc_BtnEnabled(True);
					Exit;
				end;


        // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함   수도권 토성대리-A876 상담지사12-D615
        if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then
        begin
          ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', '');
          ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', '');
          ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', '');
        end else
        begin
          ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', En_Coding(Copy(MCData.StArea1, 1, 2)));
          ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', En_Coding(MCData.StArea2));
          ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', En_Coding(MCData.StArea3));
        end;
				ls_stArea := ReplaceAll(ls_stArea, 'stArea4String', En_Coding(MCData.StArea4));
        ls_stArea := ReplaceAll(ls_stArea, 'stArea5String', En_Coding(MCData.StArea5));

        ls_stArea := ReplaceAll(ls_stArea, 'stMapXString', MCData.StPosX);
        ls_stArea := ReplaceAll(ls_stArea, 'stMapYString', MCData.StPosY);
        ls_stArea := ReplaceAll(ls_stArea, 'AreaUPS', GS_Grid_DEP);  // 출발지선택값

        if MCData.PayType = '후불' then StrValue := '2' else
				if MCData.PayType = '외상' then StrValue := '4'
                                   else StrValue := '0'; // 현금

        ls_stArea := ReplaceAll(ls_stArea, 'PayGubunString', StrValue);
        ls_stArea := ReplaceAll(ls_stArea, 'UnpricedString', IfThen(MCData.PriceYN, 'y', 'n'));
        ls_stArea := ReplaceAll(ls_stArea, 'URLReqString', IfThen(MCData.CorpYN, '1', ''));

        ls_stArea := ReplaceAll(ls_stArea, 'ConfInfoString', En_Coding(MCData.Summary));
        ls_stArea := ReplaceAll(ls_stArea, 'ChargeString', IntToStr(MCData.Price));

     		// 대기시간
				ls_stArea := ReplaceAll(ls_stArea, 'WaitTimeString', cxTmWaitTime.Text + FloatToStr(MCData.Km));
				ls_stArea := ReplaceAll(ls_stArea, 'ChargeTypeString' , '22');


				ls_stArea := ReplaceAll(ls_stArea, 'AreaSOPTString', '');
				ls_stArea := ReplaceAll(ls_stArea, 'AreaSDebugString', '');
				ls_stArea := ReplaceAll(ls_stArea, 'AreaSetTypeString', '');
				ls_stArea := ReplaceAll(ls_stArea, 'AreaKeywordString', '');
				ls_stArea := ReplaceAll(ls_stArea, 'AreaIdString'     , '');

				ls_stArea := ReplaceAll(ls_stArea, 'Call2YNString', MCData.Call2YN);

				MCData.DriverCharge := StringReplace(MCData.DriverCharge,',','',[rfReplaceAll]);
				ls_stArea := ReplaceAll(ls_stArea, 'DriverChString', MCData.DriverCharge);

			cxDriverCharge.Text := StringReplace(cxDriverCharge.Text,',','',[rfReplaceAll]);
			if cxDriverCharge.Text = '0' then StrValue := ''
			else	StrValue  := cxDriverCharge.Text; 
				

				// 소요시간이 있을경우에만 전송
        if MCData.TotalTime > 0 then
				begin
          ls_stArea := ReplaceAll(ls_stArea, 'EstTimeString', FloatToStr(MCData.TotalTime));  // 소요시간
          ls_stArea := ReplaceAll(ls_stArea, 'EstDistString', FloatToStr(MCData.Km));      // 거리
        end else
        begin
          ls_stArea := ReplaceAll(ls_stArea, 'EstTimeString', '0');  // 소요시간
          ls_stArea := ReplaceAll(ls_stArea, 'EstDistString', '0');      // 거리
        end;

        // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함 수도권 토성대리-A876 상담지사12-D615
        if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then
        begin
          ls_edArea := ReplaceAll(ls_edArea, 'edArea1String', '');
          ls_edArea := ReplaceAll(ls_edArea, 'edArea2String', '');
          ls_edArea := ReplaceAll(ls_edArea, 'edArea3String', '');
				end else
        begin
          ls_edArea := ReplaceAll(ls_edArea, 'edArea1String', En_Coding(Copy(MCData.EdArea1, 1, 2)));
          ls_edArea := ReplaceAll(ls_edArea, 'edArea2String', En_Coding(MCData.EdArea2));
					ls_edArea := ReplaceAll(ls_edArea, 'edArea3String', En_Coding(MCData.EdArea3));
        end;
				ls_edArea := ReplaceAll(ls_edArea, 'edArea4String', En_Coding(MCData.EdArea4));
        ls_edArea := ReplaceAll(ls_edArea, 'edArea5String', En_Coding(MCData.EdArea5));

        ls_edArea := ReplaceAll(ls_edArea, 'edMapXString', MCData.EdPosX);
        ls_edArea := ReplaceAll(ls_edArea, 'edMapYString', MCData.EdPosY);
        ls_edArea := ReplaceAll(ls_edArea, 'AreaUPE', GS_Grid_DES); // 도착지선택값

				ls_edArea := ReplaceAll(ls_edArea, 'AreaEOPTString', '');
				ls_edArea := ReplaceAll(ls_edArea, 'AreaEDebugString', '');
				ls_edArea := ReplaceAll(ls_edArea, 'AreaSetTypeString', '');
				ls_edArea := ReplaceAll(ls_edArea, 'AreaKeywordString', '');
				ls_edArea := ReplaceAll(ls_edArea, 'AreaIdString'     , '');

        ls_stArea_Tot := ls_stArea_Tot + ls_stArea;
        ls_edArea_Tot := ls_edArea_Tot + ls_edArea;
      end;
    end  else// 복수콜 처리 완료
    // 단일콜 처리..[복수콜 개념으로 처리함.]
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'AddressCountString', '1');

      ls_stArea := lc_stArea;
      ls_edArea := lc_edArea;

      if Trim(lcsSta1) = '' then
				lcsSta1 := fGetCity('S', lcsSta1, lcsSta2, lcsSta3, GS_Grid_DEP);

      lcsSta1 := fGetSiDo(Self.Tag, 'S', lcsSta1, lcsSta2, lcsSta3, cxtCuTel.Text, GS_Grid_DEP,
												  Trim(cxtStartAreaDetail.Text), Trim(meoStartArea.Text),
                          cxtStartXval.Text, cxtStartYval.Text,
                          locHdNo, locBrNo, locKNum);

			if (Trim(lcsEnd1) = '') and (GS_SEARCH_ENDNOSEARCH = False) then //도착지 검색 옵션적용 2012.05.30
			begin
				lcsEnd1 := fGetCity('E',lcsEnd1, lcsEnd2, lcsEnd3, GS_Grid_DES);
				if GS_LocalMapSET then meoEndArea.Text := lcsEnd1;
      end;

      lcsEnd1 := fGetSiDo(Self.Tag, 'E', lcsEnd1, lcsEnd2, lcsEnd3, cxtCuTel.Text, GS_Grid_DES,
                          Trim(cxtEndAreaDetail.Caption), Trim(meoEndArea.Text),
                          cxtEndXval.Text, cxtEndYval.Text,
                          locHdNo, locBrNo, locKNum);

      // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함 수도권 토성대리-A876 상담지사12-D615
      if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', '');
        ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', '');
        ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', '');
      end else
      begin
				ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', En_Coding(Copy(lcsSta1, 1, 2)));
				ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', En_Coding(lcsSta2));
				ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', En_Coding(lcsSta3));

				if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
				begin
					if (cxtStartAreaDetail.Text <> '') and ((lcsSta1 = '') or (lcsSta2 = '') or (lcsSta3 = '')) then
					begin
						GMessagebox('[출발지 정보오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
											+ '시도 : ' + lcsSta1 + ', 시군구 : ' + lcsSta2 + ', 읍면동 : ' + lcsSta3 + #13#10
											+ '출발지를 다시 조회하시기 바랍니다.', CDMSI);
						Assert(False, '출발지정보 : ' + lcsStaDocId + '/' + lcsSta1 + '/' + lcsSta2 + '/' + lcsSta3 + '/'
												 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + cxtStartAreaDetail.text + '/' + GS_Grid_DEP + '/' + ss_Mode);
						if meoStartArea.CanFocus then meoStartArea.SetFocus;
        		Proc_BtnEnabled(True);
						Exit;
					end;
				end;
			end;

      lcsSta4 := En_Coding(cxtStartAreaDetail.Text);
			if (Trim(cxtStartAreaDetail.Text) <> Trim(lcsConfAREA4)) then
      begin
    		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
        begin
          if ( Trim(lcsConfAREA4) <> '' ) And (Trim(cxtStartAreaDetail.Text)= '') then lcsSta4 := '☆';
        end;

        Assert(False, '[상세지명변경] : ' + cxtCuTel.Text + '¶ 발주(본사-' + locHdNo + ' 지사-' + locBrNo + ' 대표번호-' + locKNum +
                    '¶' + lcsConfAREA4 + '¶' + cxtStartAreaDetail.Text + '¶' + lcsSta1 + ' ' + lcsSta2+ ' ' + lcsSta3 +
                    '¶'+ En_Coding(meoStartArea.Text)+'¶'+ cxtStartXval.Text + ' ' + cxtStartYval.Text+'¶'+ GS_Grid_DEP );
      end;

			ls_stArea := ReplaceAll(ls_stArea, 'stArea4String', lcsSta4);
      ls_stArea := ReplaceAll(ls_stArea, 'stArea5String', En_Coding(meoStartArea.Text));

			// 2006.06.06 맵번호 대신 좌표로 수정한다.
      if StrToFloatDef(cxtStartXval.Text, -1) = -1 then
      begin
        gJONStaChkXY.X := '';
        gJONStaChkXY.GUIDE_X := '';
        cxtStartXval.Text := '';
        cxtStartGUIDEXval.Text := '';
      end;

      if StrToFloatDef(cxtStartYval.Text, -1) = -1 then
      begin
        gJONStaChkXY.Y := '';
        gJONStaChkXY.GUIDE_Y := '';
        cxtStartYval.Text := '';
        cxtStartGUIDEYval.Text := '';
      end;

      if ((gJONStaChkXY.X) <> '') and (gJONStaChkXY.X[1] <> '0') then
        gJONStaChkXY.X := '0' + gJONStaChkXY.X;

      if ((cxtStartXval.Text) <> '') and (cxtStartXval.Text[1] <> '0') then
        cxtStartXval.Text := '0' + cxtStartXval.Text;

      // 출발지 좌표 중 X/Y가 동일하거나, X좌표가 비어있는 경우 발생하여 예외처리 지시(최도순)
      if ((cxtStartXval.Text <> '') or (cxtStartYval.Text <> '')) and ((cxtStartXval.Text = cxtStartYval.Text) or
        (cxtStartXval.Text = '')) then
      begin
				GMessagebox('출발지 좌표 정보가 올바르지 않습니다. 출발지를 다시 조회하시기 바랍니다.', CDMSI);
    		Proc_BtnEnabled(True);
        Exit;
      end;

      // 20120808 LYB 수정
      iX := cxtStartXval.Text;
      iY := cxtStartYval.Text;

      if ( gJONStaChkXY.X <> cxtStartXval.Text ) Or ( gJONStaChkXY.Y <> cxtStartYval.Text ) then
      begin
        if ( gJONStaChkXY.X <> '' ) And ( gJONStaChkXY.Y <> '' ) And ( gJONStaChkXY.Area1 <> '') then
        begin
          sMsg := ' ** 출발지 선택원본과 접수정보가 일치하지 않습니다. ** ' + #13 +
                  '   - 출발지 선택원본                                     ' + #13 +
                  '   ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + #13 +
                  '   - 출발지 접수정보                                     ' + #13 +
                  '   ' + lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3 + ' ' + cxtStartAreaDetail.Text + ' ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + #13#10#13#10 +
                  '   출발지 선택원본으로 접수 처리 하시겠습니까?           ' + #13 +
                  '   (아니오 선택시 출발지 명칭 검색을 다시 해주시기바랍니다.) ';
          begin
            sErrMsg := '[접-출좌 Y] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + ' ' + gJONStaChkXY.Gubun;
//            Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
            Assert(False, sErrMsg);
          end;

          iX := gJONStaChkXY.X;
          iY := gJONStaChkXY.Y;
        end else
        begin
          sErrMsg := '[접-출좌 O] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + ' ' + gJONStaChkXY.Gubun;
//          Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
          Assert(False, sErrMsg);
        end;
      end;

			ls_stArea := ReplaceAll(ls_stArea, 'stMapXString', iX);
      ls_stArea := ReplaceAll(ls_stArea, 'stMapYString', iY);
      ls_stArea := ReplaceAll(ls_stArea, 'AreaUPS', GS_Grid_DEP);  // 출발지선택값

      // 결제방식.[0현금, 2후불, 4외상, 3모바일(미사용)]
      StrValue := PayMethod;
      ls_stArea := ReplaceAll(ls_stArea, 'PayGubunString', StrValue);

      // 미지정[요금 미지정을 한다.]
      StrValue := IfThen(chkNoSet.Down, 'y', 'n');
      ls_stArea := ReplaceAll(ls_stArea, 'UnpricedString', StrValue);

      // 법인인증(URL인증) 여부
      StrValue := '';
      ls_stArea := ReplaceAll(ls_stArea, 'URLReqString', StrValue);

			ls_stArea := ReplaceAll(ls_stArea, 'ConfInfoString', En_Coding(meoBigo.Text));
      ls_stArea := ReplaceAll(ls_stArea, 'ChargeString', ReplaceAll(curRate.Text, ',', ''));

     	// 대기시간
			ls_stArea := ReplaceAll(ls_stArea, 'WaitTimeString', cxTmWaitTime.Text + FloatToStr(fCruKm));
			ls_stArea := ReplaceAll(ls_stArea, 'ChargeTypeString' , '22');

      if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  		  ls_stArea := ReplaceAll(ls_stArea, 'AreaSOPTString', '8')
      else
  		  ls_stArea := ReplaceAll(ls_stArea, 'AreaSOPTString', '9');
			ls_stArea := ReplaceAll(ls_stArea, 'AreaSDebugString', En_Coding(lcsStaDebug));
			ls_stArea := ReplaceAll(ls_stArea, 'AreaSetTypeString', lcsStaCellSel);
			ls_stArea := ReplaceAll(ls_stArea, 'AreaKeywordString', En_Coding(lcsStaSchWord));
		  ls_stArea := ReplaceAll(ls_stArea, 'AreaIdString'     , lcsStaDocId);

			StrValue := '';//IfThen(chkCall2.Checked, 'y', 'n'); // 콜마너2 체크박스
			ls_stArea := ReplaceAll(ls_stArea, 'Call2YNString', StrValue);

			// 기사 수수료 설정값 추가. 2010-11-03
			cxDriverCharge.Text := StringReplace(cxDriverCharge.Text,',','',[rfReplaceAll]);
			ls_stArea := StringReplace(ls_stArea,'DriverChString', cxDriverCharge.Text, [rfReplaceAll]);
			
			// 소요시간이 있을경우에만 전송
			if fTotalTime > 0 then
      begin
				ls_stArea := ReplaceAll(ls_stArea, 'EstTimeString', FloatToStr(fTotalTime));  // 소요시간
        ls_stArea := ReplaceAll(ls_stArea, 'EstDistString', FloatToStr(fCruKm));      // 거리
      end else
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'EstTimeString', '0');  // 소요시간
        ls_stArea := ReplaceAll(ls_stArea, 'EstDistString', '0');      // 거리
      end;

      // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함 수도권 토성대리-A876 상담지사12-D615
      if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then
			begin
				ls_edArea := ReplaceAll(ls_edArea, 'edArea1String', '');
				ls_edArea := ReplaceAll(ls_edArea, 'edArea2String', '');
				ls_edArea := ReplaceAll(ls_edArea, 'edArea3String', '');
      end else
			begin
        ls_edArea := ReplaceAll(ls_edArea, 'edArea1String', En_Coding(Copy(lcsEnd1, 1, 2)));
        ls_edArea := ReplaceAll(ls_edArea, 'edArea2String', En_Coding(lcsEnd2));
        ls_edArea := ReplaceAll(ls_edArea, 'edArea3String', En_Coding(lcsEnd3));
			end;
			ls_edArea := ReplaceAll(ls_edArea, 'edArea4String', En_Coding(cxtEndAreaDetail.Caption));
      ls_edArea := ReplaceAll(ls_edArea, 'edArea5String', En_Coding(meoEndArea.Text));

      // 2006.07.24 도착지좌표 추가한다.
      if StrToFloatDef(cxtEndXval.Text, -1) = -1 then
      begin
        cxtEndXval.Text := '';
        cxtEndGUIDEXval.Text := '';
      end;
			if StrToFloatDef(cxtEndYval.Text, -1) = -1 then
      begin
        cxtEndYval.Text := '';
        cxtEndGUIDEYval.Text := '';
      end;

      ls_edArea := ReplaceAll(ls_edArea, 'edMapXString', cxtEndXval.Text);
      ls_edArea := ReplaceAll(ls_edArea, 'edMapYString', cxtEndYval.Text);
      ls_edArea := ReplaceAll(ls_edArea, 'AreaUPE', GS_Grid_DES); // 도착지선택값

      if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  		  ls_edArea := ReplaceAll(ls_edArea, 'AreaEOPTString', '8')
      else
  		  ls_edArea := ReplaceAll(ls_edArea, 'AreaEOPTString', '9');
//-      Log('lcsEndDebug : ' + En_Coding(lcsEndDebug), LOGDATAPATHFILE);
			ls_edArea := ReplaceAll(ls_edArea, 'AreaEDebugString', En_Coding(lcsEndDebug));
			ls_edArea := ReplaceAll(ls_edArea, 'AreaSetTypeString', lcsEndCellSel);
			ls_edArea := ReplaceAll(ls_edArea, 'AreaKeywordString', En_Coding(lcsEndSchWord));
      ls_edArea := ReplaceAll(ls_edArea, 'AreaIdString'     , lcsEndDocId);

      ls_stArea_Tot := ls_stArea_Tot + ls_stArea;
      ls_edArea_Tot := ls_edArea_Tot + ls_edArea;
    end; // 단일 콜 완료

		lg_Save := '1';
		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
		begin
			if (ss_Mode <> '4') and (ss_Mode <> 'S') then //문의 , SMS수신거부 
			begin
				//(/경유|경유/|(경유|경유)| 경유|경유 )
				if func_ViaCheck(meoStartArea.Text) and (GT_PASS_INFO[iFidx][0].AREA1 = '') then // 경유관련 문구 있음 and 경유지좌표 없음
				begin
					if pnl_ViaAlert_Title.Hint <> 'Skip' then
					begin
						pnlJonMain.Enabled := False; //다른입력 막음
						if ChkMini.Checked then
							pnl_ViaAlert.Width := 407
						else
							pnl_ViaAlert.Width := 592;
						
						pnl_ViaAlert_Title.Hint := ''; //Check, Skip 구분값
						pnl_ViaAlert.Hint := '';       // ss_Mode
						pnl_ViaAlert.Top := 286;
						pnl_ViaAlert.Left := 1;
						pnl_ViaAlert.Hint := ss_Mode;
						pnl_ViaAlert.Visible := True;
						Proc_BtnEnabled(True);
						exit;
					end;
				end;
			end;
		end;
		
//--------------------------------------------------------------------------------------------
//  경유지 추가
//--------------------------------------------------------------------------------------------
		if GT_PASS_INFO[iFidx][0].AREA1 = '' then
		begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoCountString', '0');
			ls_ViaInto := lc_ViaInfoString;
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area1String', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area2String', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area3String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area4String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area5String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapXString', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapYString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaUPV', '');  // 경유지선택값

      if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '8')
      else
	  		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '9');

			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVDebugString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaSetTypeString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaKeywordString', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaIdString'     , '');
		end else
		begin
			lRow := 0;
			ls_ViaInto := '';
			while lRow <= 4 do
			begin
				if GT_PASS_INFO[iFidx][lRow].AREA1 = '' then
					break;
        ls_ViaInto := ls_ViaInto + lc_ViaInfoString;
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area1String', En_Coding(Copy(GT_PASS_INFO[iFidx][lRow].AREA1, 1, 2)));
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area2String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA2));
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area3String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA3));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area4String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA4));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area5String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA5));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapXString', GT_PASS_INFO[iFidx][lRow].MAP_X);
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapYString', GT_PASS_INFO[iFidx][lRow].MAP_Y);
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaUPV', GS_Grid_VIA);  // 경유지선택값

        if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
	    		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '8')
        else
	    		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '9');
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVDebugString', '');
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaSetTypeString', GT_PASS_INFO[iFidx][lRow].CELLS);
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaKeywordString', En_Coding(GT_PASS_INFO[iFidx][lRow].SWORD));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaIdString'     , GT_PASS_INFO[iFidx][lRow].DOCID);
				inc(lRow);
      end;
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoCountString', IntToStr(lRow));
    end;

    // ------------------------------------------------------------------------
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CidInfoString', ls_stCid);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoString', ls_ViaInto);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'DepartInfoString', ls_stArea_Tot);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'DestInfoString', ls_edArea_Tot);

    // - 와이즈넛 검색어 실패/성공 여부 전송
    if GS_Grid_DEP <> 'C' then
    begin
      if GS_Grid_DEP = 'W' then sRespSParam1 := meoStartArea.Text
                           else sRespSParam1 := GS_Grid_DEP + '/' + meoStartArea.Text + '/' + cxtStartXval.Text + '/' + cxtStartYval.Text;

      sRespSParam2 := GS_Grid_DEP;
      sRespSParam3 := lcsStaCellSel;
    end;

    if ( GS_Grid_DES <> 'D' ) And ( GS_Grid_DES <> 'C' ) then
    begin
      if GS_Grid_DES = 'W' then sRespEParam1 := meoEndArea.Text
                           else sRespEParam1 := GS_Grid_DES + '/' + meoEndArea.Text + '/' + cxtEndXval.Text + '/' + cxtEndYval.Text;

      sRespEParam2 := GS_Grid_DES;
			sRespEParam3 := lcsEndCellSel;
    end;

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
			Proc_JobAfterProc(True, True);

			if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False, 15000, '접수') then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);   // [hjf]

					tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
			FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
			if (btnCmdJoinCopy.Hint = 'JOINCOPY') or (btnCmdWaitCopy.Hint = 'JOINCOPY') then
				Proc_JobAfterProc(False, True)  
			else
			begin
				pnlJonMain.Enabled := True;
				// 요청한 업무처리가 왼료 될때까지 접수화면의 모든 기능을 일시 정지 시킨다.
				Frm_JON012.Enabled := True;
				//-------------------------------------

				GB_JON03SELECT_GB := True;

				// 서버요청후 지연 디버그 정보를 저장한다.
				if GS_DEBUG_MSG_J01 <> '' then
				begin
					GS_DEBUG_MSG_J01 := StringReplace(GS_DEBUG_MSG_J01, '!!$초과시간$!!', shaPrcMsg.Hint, [rfReplaceAll]);
					Assert(False, GS_DEBUG_MSG_J01);
				end;   
			end;

			if ( ss_Mode <> '4' ) then
				tmrResponse.Enabled := True;  // 문의는 제외하고 처리
    end;

    delta := GetTickCount - startTick;
    if Delta > 300 then
		begin
      SetDebugeWrite(Format('JON01[Proc_Save] Over = %d', [delta]));
    end;

  except
		on e: Exception do
    begin
			ls_ViaInto := 'JON01[Proc_Save]오더저장:' + e.message;
      Log(ls_ViaInto, LOGDATADIRECTORY + 'Accept_Err.log');

      Assert(False, ls_ViaInto);

			Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
    end;
  end;
end;

procedure TFrm_JON01.GB3MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  lst_BRList.Visible := False;
end;

function TFrm_JON01.GetCustLevelSeq: string;
var sTemp : string;
begin
  SetDebugeWrite('JON01.GetCustLevelSeq');
	Try
		Result := '';
		if cboCuLevel.ItemIndex >= 0 then
			Result := SCboLevelSeq[cboCuLevel.ItemIndex];
	except
		sTemp := 'GetCustLevelSeq';
		Log('고객등급 : '+ sTemp, LOGDATAPATHFILE);
	end;
end;

procedure TFrm_JON01.SetCustBrTelYN(const Value: string);
begin
  SetDebugeWrite('JON01.SetCustBrTelYN');
  FCustBrTelYN := LowerCase(Value);

  chkCenterMng.Checked := Value = 'y';
end;

// 오더를 대기로 접수 한다.
procedure TFrm_JON01.Proc_OrderWaitJoinIns;
Var sHdNo : String;
begin
	SetDebugeWrite('JON01.Proc_OrderWaitJoinIns');
  try
		if not NotNullCheck(True) then
		begin
			Proc_BtnEnabled(True);
			Exit;
		end;
		if func_ecukrCheck then 
		begin
			Proc_BtnEnabled(True);
			exit;
		end;

		if cxLblCIDUseFlg.Hint <> 'CID' then
    begin // CID 조회인지 설정을 한다.
      if gsCuTelHint <> cxtCuTel.Text then
        // 고객전화번호 변경여부를 체크하기 위해 저장한다.
      begin
        GMessagebox(Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10 +
          Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
          + '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요', CDMSI);
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    lg_Save := '1';
		Proc_Save('5'); // 대기로 접수..

    if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
    begin
      btnCmdExit.Tag := -1;
    end;
//  	Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
  except
    on e: exception do
    begin
			Proc_BtnEnabled(True);
			Log('Proc_OrderWaitJoinIns Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_OrderWaitJoinIns Error :' + E.Message);
    end;
  end;
end;

// 오더를 문의로 접수 한다.
procedure TFrm_JON01.Proc_OrderQuesJoinIns;
Var sHdNo : String;
begin
	SetDebugeWrite('JON01.Proc_OrderQuesJoinIns');
  try
		if not NotNullCheck then 
		begin
			Proc_BtnEnabled(True);
			Exit;
		end;
		if func_ecukrCheck then 
		begin
			Proc_BtnEnabled(True);
			Exit;
		end;

		if cxLblCIDUseFlg.Hint <> 'CID' then
    begin // CID 조회인지 설정을 한다.
      if gsCuTelHint <> cxtCuTel.Text then
        // 고객전화번호 변경여부를 체크하기 위해 저장한다.
      begin
        GMessagebox(Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10 +
          Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
          + '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요', CDMSI);
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    lg_Save := '1';
		Proc_Save('4'); // 문의로 접수..

    if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
    begin
      btnCmdExit.Tag := -1;
    end;
//		Proc_BtnEnabled(True);
	except
    on e: exception do
    begin
      Log('Proc_OrderQuesJoinIns Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_OrderQuesJoinIns Error :' + E.Message);
    end;
  end;
end;

// 법인정보를 조회한다.
procedure TFrm_JON01.Proc_BubinListSearch;
var
  i, iRow: Integer;
  sKeyNum, sShortNm, sShortDp, sFullName, sFullDp, sCbCode, sBrNo: string;
begin
  SetDebugeWrite('JON01.Proc_BubinListSearch');
  try
    // 선택된 지사정보에서 지사코드.
    sBrNo := Proc_BRNOSearch; //지사코드
    // 선택된 지사정보에서 대표번호.
    sKeyNum := Proc_MainKeyNumberSearch; //대표번호
    sKeyNum := StringReplace(sKeyNum, '-', '', [rfReplaceAll]);

    cxBubinView.BeginUpdate;

    cxBubinView.DataController.SetRecordCount(0);
    iRow := cxBubinView.DataController.AppendRecord;
    cxBubinView.DataController.Values[iRow, 0] := '선택(법인정보미입력)';
    // 법인명
    cxBubinView.DataController.Values[iRow, 1] := '선택'; // 부서명
    cxBubinView.DataController.Values[iRow, 2] := '선택'; // 단축법인명
    cxBubinView.DataController.Values[iRow, 3] := '선택'; // 단축부서명
    cxBubinView.DataController.Values[iRow, 4] := ''; // 법인코드
    for i := 0 to GT_BUBIN_INFO.cbEtc.Count - 1 do
    begin
      if GT_BUBIN_INFO.brNo_KeyNum.Strings[i] = Rpad(sBrNo, 5, ' ') + Rpad(sKeyNum, 15, ' ') then
      begin
        if (Trim(cxtBubinSearchName.Text) = '') or
          (Pos(Trim(cxtBubinSearchName.Text),
          GT_BUBIN_INFO.cbEtc.Strings[i]) > 0) then
        begin
          sFullName := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc.Strings[i]), 1, 60));
          sFullDp   := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc.Strings[i]), 61, 60));
          sShortNm  := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc.Strings[i]), 121, 16));
          sShortDp  := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc.Strings[i]), 137, 16));
          sCbCode   := GT_BUBIN_INFO.cbcode.Strings[i];
          // 법인코드 + , + 지사코드
          iRow := cxBubinView.DataController.AppendRecord;
          //Inc(iRow);
          cxBubinView.DataController.Values[iRow, 0] := sFullName;
          cxBubinView.DataController.Values[iRow, 1] := sFullDp;
          cxBubinView.DataController.Values[iRow, 2] := sShortNm;
          cxBubinView.DataController.Values[iRow, 3] := sShortDp;
          cxBubinView.DataController.Values[iRow, 4] := sCbCode;
        end;
      end;
    end;
    cxBubinView.EndUpdate;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.proc_CaActiveComplete;
begin
		case Self.Tag of
    0 : begin
          RealKmPtr00_th1.CaActive := False;
          RealKmPtr00_th2.CaActive := False;
          RealKmPtr00_th3.CaActive := False;
					RealKmPtr00_th4.CaActive := False;
        end;
    1 : begin
          RealKmPtr01_th1.CaActive := False;
          RealKmPtr01_th2.CaActive := False;
          RealKmPtr01_th3.CaActive := False;
          RealKmPtr01_th4.CaActive := False;
        end;
    2 : begin
          RealKmPtr02_th1.CaActive := False;
          RealKmPtr02_th2.CaActive := False;
          RealKmPtr02_th3.CaActive := False;
          RealKmPtr02_th4.CaActive := False;
        end;
    3 : begin
          RealKmPtr03_th1.CaActive := False;
          RealKmPtr03_th2.CaActive := False;
          RealKmPtr03_th3.CaActive := False;
          RealKmPtr03_th4.CaActive := False;
        end;
    4 : begin
          RealKmPtr04_th1.CaActive := False;
          RealKmPtr04_th2.CaActive := False;
          RealKmPtr04_th3.CaActive := False;
          RealKmPtr04_th4.CaActive := False;
        end;
    5 : begin
          RealKmPtr05_th1.CaActive := False;
          RealKmPtr05_th2.CaActive := False;
          RealKmPtr05_th3.CaActive := False;
          RealKmPtr05_th4.CaActive := False;
        end;
    6 : begin
          RealKmPtr06_th1.CaActive := False;
          RealKmPtr06_th2.CaActive := False;
          RealKmPtr06_th3.CaActive := False;
          RealKmPtr06_th4.CaActive := False;
        end;
    7 : begin
          RealKmPtr07_th1.CaActive := False;
          RealKmPtr07_th2.CaActive := False;
          RealKmPtr07_th3.CaActive := False;
          RealKmPtr07_th4.CaActive := False;
        end;
    8 : begin
          RealKmPtr08_th1.CaActive := False;
          RealKmPtr08_th2.CaActive := False;
          RealKmPtr08_th3.CaActive := False;
          RealKmPtr08_th4.CaActive := False;
        end;
    9 : begin
          RealKmPtr09_th1.CaActive := False;
          RealKmPtr09_th2.CaActive := False;
          RealKmPtr09_th3.CaActive := False;
          RealKmPtr09_th4.CaActive := False;
        end;
    10 : begin
          RealKmPtr10_th1.CaActive := False;
          RealKmPtr10_th2.CaActive := False;
          RealKmPtr10_th3.CaActive := False;
          RealKmPtr10_th4.CaActive := False;
        end;
    11 : begin
          RealKmPtr11_th1.CaActive := False;
          RealKmPtr11_th2.CaActive := False;
          RealKmPtr11_th3.CaActive := False;
          RealKmPtr11_th4.CaActive := False;
        end;
    12 : begin
          RealKmPtr12_th1.CaActive := False;
          RealKmPtr12_th2.CaActive := False;
          RealKmPtr12_th3.CaActive := False;
          RealKmPtr12_th4.CaActive := False;
        end;
    13 : begin
          RealKmPtr13_th1.CaActive := False;
          RealKmPtr13_th2.CaActive := False;
          RealKmPtr13_th3.CaActive := False;
          RealKmPtr13_th4.CaActive := False;
        end;
    14 : begin
          RealKmPtr14_th1.CaActive := False;
          RealKmPtr14_th2.CaActive := False;
          RealKmPtr14_th3.CaActive := False;
          RealKmPtr14_th4.CaActive := False;
        end;
    15 : begin
          RealKmPtr15_th1.CaActive := False;
          RealKmPtr15_th2.CaActive := False;
          RealKmPtr15_th3.CaActive := False;
          RealKmPtr15_th4.CaActive := False;
        end;
    16 : begin
          RealKmPtr16_th1.CaActive := False;
          RealKmPtr16_th2.CaActive := False;
          RealKmPtr16_th3.CaActive := False;
          RealKmPtr16_th4.CaActive := False;
        end;
    17 : begin
          RealKmPtr17_th1.CaActive := False;
          RealKmPtr17_th2.CaActive := False;
          RealKmPtr17_th3.CaActive := False;
          RealKmPtr17_th4.CaActive := False;
        end;
    18 : begin
          RealKmPtr18_th1.CaActive := False;
          RealKmPtr18_th2.CaActive := False;
          RealKmPtr18_th3.CaActive := False;
          RealKmPtr18_th4.CaActive := False;
        end;
    19 : begin
          RealKmPtr19_th1.CaActive := False;
          RealKmPtr19_th2.CaActive := False;
          RealKmPtr19_th3.CaActive := False;
          RealKmPtr19_th4.CaActive := False;
        end;
    end;
end;

// 폼의 컨트롤을 초기화 한다.
procedure TFrm_JON01.ChkCuSmsNoClick(Sender: TObject);
begin
  SetDebugeWrite('JON01.BtnCuSmsNoClick');
  if ChkCuSmsNo.Tag = 1 then Exit;
  if PnlShare.Visible then Exit;

  if Trim(cxtCuTel.Text) = '' then
  begin
    ChkCuSmsNo.Tag := 1;
    ChkCuSmsNo.Checked := False;
    ChkCuSmsNo.Tag := 0;
    Exit;
  end;

	if (lcsCu_seq <> '') then
  begin
    Proc_CustSMSSave;
  end else
  begin
    ChkCuSmsNo.Tag := 1;
    ChkCuSmsNo.Checked := False;
    ChkCuSmsNo.Tag := 0;
		GMessagebox('신규 미등록 고객은 SMS거부를 접수 전에 저장 할 수 없습니다.', CDMSI);
  end;
end;

procedure TFrm_JON01.ChkGroupClick(Sender: TObject);
Var i : Integer;
begin
  if ChkGroup.Tag <> 0 then Exit;

  SetDebugeWrite('JON01.ChkGroupClick');
  GS_JON01_GROUPMOVE := TcxCheckBox(Sender).Checked;
  GS_EnvFile.WriteBool('AcceptWin', 'GroupMove', GS_JON01_GROUPMOVE);

  for i := 0 to 19 do
  begin
    if Frm_Main.JON01MNG[i].Use then
    begin
      if Frm_Main.JON01MNG[i].FrmGubun = 2 then
      begin
        if Frm_Main.Frm_JON01B[i].Tag <> Self.Tag then
        begin
          Frm_Main.Frm_JON01B[i].btnGroup.Down := GS_JON01_GROUPMOVE;
        end;
      end else
      begin
        if Frm_Main.Frm_JON01[i].Tag <> Self.Tag then
        begin
          Frm_Main.Frm_JON01[i].ChkGroup.Checked := GS_JON01_GROUPMOVE;
        end;
      end;
    end;
  end;
end;

procedure TFrm_JON01.ChkMiniClick(Sender: TObject);
Var i : Integer;
begin
	if ChkMini.Tag <> 0 then Exit;
	SetDebugeWrite('JON01.ChkMiniClick');

  if TcxCheckBox(Sender).Checked then
	begin
    GS_JON01_TYPE := 1;
    Frm_Main.JON01MNG[Self.Tag].FrmGubun := 1;
  end else
  begin
    GS_JON01_TYPE := 0;
    Frm_Main.JON01MNG[Self.Tag].FrmGubun := 0;
  end;

  iJON01Tag := Self.Tag;
	if ChkMini.Checked then procFrmSizeChange('Y', Self)
                     else
                     begin
											 if GS_FormType = 'Normal' then procFrmSizeChange('N', Self);
                     end;

  GS_EnvFile.WriteInteger('COUNSEL', 'GS_JON01_TYPE', GS_JON01_TYPE);

  if Assigned(Frm_SETA1) then
  begin
    if GS_JON01_TYPE = 0 then Frm_SETA1.cxRBJon01TypeA.Checked := True else
    if GS_JON01_TYPE = 1 then Frm_SETA1.cxRBJon01TypeC.Checked := True else
    if GS_JON01_TYPE = 2 then Frm_SETA1.cxRBJon01TypeB.Checked := True else
    if GS_JON01_TYPE = 3 then Frm_SETA1.cxRBJon01TypeD.Checked := True;
  end;
end;

procedure TFrm_JON01.chkViewLevelClick(Sender: TObject);
begin
  if chkViewLevel.Checked then
  begin
    if Assigned(Frm_JON011) then
      Frm_JON011.chkViewLevel.Checked := True;
		chkViewLevel.Checked := True;
  end else
  begin
    if Assigned(Frm_JON011) then
      Frm_JON011.chkViewLevel.Checked := False;
    chkViewLevel.Checked := False;
  end;
end;

procedure TFrm_JON01.chk_AIReCallMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
	if chk_AIReCall.Properties.ReadOnly  then
	begin
		if ( Not Assigned(Frm_AIC10) ) Or ( Frm_AIC10 = Nil ) then 
			Frm_AIC10 := TFrm_AIC10.Create(Nil);
		Frm_AIC10.Show;	
	end;
end;

procedure TFrm_JON01.ControlClear(bTF: boolean = False);
begin
  SetDebugeWrite('JON01.ControlClear');
  try
    FCustBrTelYN := '';
    chkCenterMng.Checked := False;

    // 컨트롤 초기화..
    edtCuName.Text := ''; // 고객명
    CbCuGb.Hint := 'Clear';
    CbCuGb.ItemIndex := 0; // -- 개인(고객구분)
    lblCuBubinName.Caption := '';
    cxtCuBubin.Text := '';
    cxtCuBubin.Hint := '';
    CbCuGbPropertiesChange(CbCuGb);
    CbCuGb.Hint := '';

    lblCuCntTotal.Caption := '0'; // 접수
    lblCoCntTotal.Caption := '0'; // 완료
    lblCuCancelR.Caption := '0%'; // 취소율
    lblCuMile.Caption := '0'; // 적립마일리지
		lblMoCuMile.Caption := '0';
//    lblMoCuMile.Visible := False;
//    Label9.Visible := False;
    lblCuMileUnit.Caption := '0'; // 기준마일리지
    lblCuMileCnt.Caption := '0'; // 지급 횟수
		lblCuMileLost.Caption := '0'; // 소멸예정마일리지

    meoCuCCMemo.Clear; // 상담메모(상담원용)

    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
    begin
			meoCuCCMemo.Width := 92;
    end else
    begin
		  meoCuCCMemo.Width := 283;
    end;
  	BtnViewMemo.Left := meoCuCCMemo.Left + meoCuCCMemo.Width - BtnViewMemo.Width -2;
		edt_CardMemo.Text := '';

  	mmoCuInfo.Text := '앱코드 : '#13#10 +
    								  '앱설치 : '#13#10+
                      '앱삭제 : '#13#10 +
    								  '최종 : '#13#10 +
    								  '앱지역 : '#13#10 +
    								  'OS/모델 : '#13#10 +
    								  '앱설치버전 : '#13#10 +
    								  '사용 : ';

    ChkCuSmsNo.Tag := 1;
    ChkCuSmsNo.Checked := False;
    ChkCuSmsNo.Tag := 0;

    mmoCBMemo.Clear;
    mmoCBMemo.Visible := False;
    meoCuWorMemo.Lines.Clear; // 기사용고객메모
    lblCuBubinName.Caption := ''; // 법인명/부서명

  //-  mmoCuAppInfo.Clear;

    pnlMileage.Color := $00C1DADB;
    Proc_SetFormColor_2(2);
    DefaultCustLevel;
    SetMileColorChange;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.curKmEnter(Sender: TObject);
begin
  SetDebugeWrite('JON01.curKmEnter');
  if ( Lbl_Charge.Caption <> '' ) And ( GT_DISTANCE_ST = 1 ) then
  begin
    if Not ChkMini.Checked then
    begin
      if FPlusDongCHK = 2 then pnl_Charge.height := 36
                          else pnl_Charge.height := 21;
    end;
    if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                        else lbl_PlusAreaNotice.Visible := False;

    SetPosLblDistance;
    pnl_charge.Visible := True;
    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Top := pnl_charge.Top + pnl_Charge.height;
  end;
end;

procedure TFrm_JON01.curKmExit(Sender: TObject);
begin
  SetDebugeWrite('JON01.curKmExit');
  pnl_charge.Visible := False;
  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then
  begin
    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height + 25
                                                else PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height;
  end;
end;

procedure TFrm_JON01.curOutMileMnyKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if key = vk_Return then edtMileMemo.SetFocus;
end;

procedure TFrm_JON01.curRateEditing(Sender: TObject; var CanEdit: Boolean);
begin
	curRate.Tag := 30;//요금에 포커스 들어감
	bCurRateEditMode := True;
end;

procedure TFrm_JON01.curRateEnter(Sender: TObject);
Var iRate : Integer;
begin
  SetDebugeWrite('JON01.curRateEnter');
  try
		// 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
  	if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice)
			and ((Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['2', '4', '8']))
      and (    (cxtStartXval.Text <> cxtStartXval.Hint) or (cxtStartYval.Text <> cxtStartYval.Hint)
            or (cxtEndXval.Text <> cxtEndXval.Hint) or (cxtEndYval.Text <> cxtEndYval.Hint))  // 좌표변환이 있었을경우
      then
    begin
      tmrThRealDis.Tag := 0;
      proc_dis_alculation(Self.Tag, True);
      if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                             else begin
                                    iRate := func_search_charge;
                                    if Not gsMyMainRateNoChange then
                                    begin
																			if BtnRaLock.Hint <> 'F4)잠금' then
																			begin
																				curRate.Value := iRate;
																				OrgRate := curRate.Value;
																			end;
                                    end;
                                  end;
    end else
    if ((gsMyMainTelUse = 'TRUE') And (Not GSMyMainTelOrderChargeCheck)) then    // 대표번호별 기본요금 사용 및 접수 미반영시에는 거리만 따로 계산
    begin
      if GT_DISTANCE_ST = 0 then proc_dis_alculation(Self.Tag, True) else
      if GT_DISTANCE_ST = 1 then
      begin
        tmrThRealDis.Tag := 0;
        proc_dis_alculation(Self.Tag, True);
        proc_Realdis_Mng;  // 대표번호별 기본요금 사용 시 거리 계산 안되는 문제 처리
      end;
    end;

    FIsCalcPrice := True;

    if Lbl_Charge.Caption <> '' then
    begin
      if Not ChkMini.Checked then
      begin
        if FPlusDongCHK = 2 then pnl_Charge.height := 36
                            else pnl_Charge.height := 21;
      end;
      if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                          else lbl_PlusAreaNotice.Visible := False;

      SetPosLblDistance;
      pnl_charge.Visible := True;
      if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Top := pnl_charge.Top + pnl_Charge.height;
    end;
    if PnlSuggest.Visible then
    begin
      PnlSuggest.Visible := False;
      AdvGridSj.ShowSelection := False;
    end;
    PnlPOISch.Visible := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.curRateExit(Sender: TObject);
begin
  SetDebugeWrite('JON01.curRateExit');
  try
    pnl_charge.Visible := False;
    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then
    begin
      if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height + 25
                                                  else PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height;
    end;
    if curRate.Text = '' then
      curRate.Value := 0;

		curRate.Tag := 0; //포커스 나감
		bCurRateEditMode := False;
{    //기사 수수료 검색
		if giArea_Charge_YN = 'y' then
    begin
			Proc_Driver_Charge;
		end else
      cxDriverCharge.Text := '';  }
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.curRateKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.curRateKeyDown');
  try
		if Ord(Key) = VK_RETURN then
		begin
      if curRate.Value < 1000 then
      begin
        curRate.Value := curRate.Value * 1000;
      end;
			if meoBigo.Visible = True then
        meoBigo.SetFocus
      else
				meoBigo2.SetFocus;

  		if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
        OrgRate := curRate.Value;

			if (GS_START_AUTOLOCK) then
			begin
        BtnRaLock.Hint := 'F4)잠금';
        BtnRaLock.Tag  := 0;
        BtnRaLock.Down := True;
        BtnRaLock.ImageIndex := 1;
      end;

  //    if cxCurRevisionRate.Value > 0 then
  //      curRate.Value := curRate.Value + cxCurRevisionRate.Value;
    end else
    if Ord(key) = VK_F4 then
		begin
			if BtnRaLock.Hint = 'F4)잠금' then
      begin
				BtnRaLock.Hint := 'F4)해제';
        BtnRaLock.Tag  := 0;
				BtnRaLock.Down := False;
        BtnRaLock.ImageIndex := 0;

//        curRate.Properties.Increment := 1000;
//        curRate.Properties.ReadOnly := False;
      end else
      begin
				BtnRaLock.Hint := 'F4)잠금';
        BtnRaLock.Tag  := 0;
        BtnRaLock.Down := True;
        BtnRaLock.ImageIndex := 1;

				curRate.Value := curRate.Value;      // 이부분을 안해주면 금액이 기존대로 돌아감
//        curRate.Properties.Increment := 0;
//        curRate.Properties.ReadOnly := True;
      end;
			Exit;
		end else
    if Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        //      VK_F6     : if rb_search.Enabled then rb_Search.OnClick(rb_Search);
        Vk_F7: //if rb_Modify.Enabled then rb_Modify.OnClick(rb_Modify);              // 수정
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave);
				Vk_F8: //whbtn_Cancel.OnClick(whbtn_Cancel);   
				begin                                // 종료
					SetDebugeWrite('JON01.curRateKeyDown->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit);
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then
            btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
          if btnCmdQuestion.Enabled then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
        VK_ESCAPE: // ESC 키
					begin
            if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
            begin
              if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
								and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
								and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
							begin
								SetDebugeWrite('JON01.curRateKeyDown->Vk_F8');
								btnCmdExit.OnClick(btnCmdExit);
							end;
						end;
          end;
      end;
    end;
		if (Ord(Key) = VK_RETURN) or (Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1]) or (Ord(key) = VK_DOWN) or (Ord(key) = VK_UP) then
		else
		begin
			if bCurRateEditMode = False then
			begin
//        if BtnRaLock.Hint <> 'F4)잠금' then   // 이렇게 하면 안됨   20171024
					curRate.Text := '';
			end;
		end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.curRateKeyPress(Sender: TObject; var Key: Char);
begin
	SetDebugeWrite('JON01.curRateKeyPress');
//	if (key in ['0'..'9', #13, #8]) then
//	else
	if (Key = '-') or (Key = 'e') or (Key = 'E') then
		Key := #0;

end;

procedure TFrm_JON01.curRateKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.curRateKeyUp');
//  if PnlSuggest.Visible then
    begin
      PnlSuggest.Visible := False;
      PnlPOISch.Visible := False;
      AdvGridSj.ShowSelection := False;
      PnlSuggest.Caption := '';
    end;

  OrgRate := curRate.Value;
end;

procedure TFrm_JON01.curRateMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
	SetDebugeWrite('JON01.curRateMouseDown');
//	curRate.SelectAll;
	if PnlSuggest.Visible then
	begin
		PnlSuggest.Visible := False;
		AdvGridSj.ShowSelection := False;
		PnlSuggest.Caption := '';
	end;
end;

procedure TFrm_JON01.curRateMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
	if curRate.Tag <> 30 then
		bCurRateEditMode := False; //수정불가   , 전체삭제됨
{  //기사 수수료 검색
	if giArea_Charge_YN = 'y' then
	begin
		Proc_Driver_Charge;
  end else
    cxDriverCharge.Text := ''; }
end;

procedure TFrm_JON01.curRatePropertiesChange(Sender: TObject);
var
	UserMile, Price: Integer;
  TotMile : Real;
begin
  if pnlShare.Visible then Exit;

	SetDebugeWrite('JON01.curRatePropertiesChange');
  try
    // 기사자동입금액 보정
  	if IsPayMethodPost then
    begin
      if GS_PRJ_AREA = 'S' then
      begin
        // 수도권은 수정모드에서도 허용
				if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
        begin
					Price := curRate.Value;
					UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0) 
										+ StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);
					if Price >= UserMile then
					begin
						edtPostPay.Value := Trunc(UserMile / 1000) * 1000;
					end
					else
						edtPostPay.Value := Price;	
				end else
        if cbbPayMethod.Text = PAY_METHOD_CARD_KCP then
				begin
					if gCardStatus <> '결제완료' then  //카드결제완료일때는 요금변경 시 기사송금금액은 변경되지 않게 한다 20160823KHS
						edtPostPay.Value := curRate.Value
					else 
						AppendPostDesc;
				end
  			else
  				edtPostPay.Value := curRate.Value;
      end else
			begin
  			// 지방권은 수정모드에서 미적용.
				// 수정모드 일때는 기사자동입금액이 수정되지 않도록 요청하여 적용함(신과장요청). 2011.07.19
				if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0 ) then
        begin
          if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
          begin
						lblCuMile.Caption := StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]);
						lblMoCuMile.Caption := StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]);
						UserMile := StrToIntDef(lblCuMile.Caption, 0) + StrToIntDef(lblMoCuMile.Caption, 0);
  					if AUseMileage then
  						edtPostPay.Value := IfThen(UserMile >= curRate.Value, curRate.Value, 10000)
  					else
  						edtPostPay.Value := IfThen(UserMile >= curRate.Value, curRate.Value, UserMile);
  				end else
  				begin
						if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

  					if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
            begin
              edtPostPay.Value := 0;
              cxLblWkJAmt.Caption := '1,000';
              if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
  					end else
     				if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
            begin
              edtPostPay.Value := 0;
              cxLblWkJAmt.Caption := '2,000';
							if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
  	  			end else
     				if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
            begin
              edtPostPay.Value := 0;
              cxLblWkJAmt.Caption := '3,000';
              if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then PnlWkJi.Visible := True;
  	  			end else
  						edtPostPay.Value := curRate.Value;
  				end;
  			end;
      end;
    end;

		if (Pos('수정', Self.Caption) > 0) or (Pos('앱접수', Self.Caption) > 0 ) then
		begin
			if curRate.Tag <> curRate.Value then
			begin
				if giArea_Charge_YN = 'y' then
				begin
					Proc_Driver_Charge;
				end else
					cxDriverCharge.Text := '';

				curRate.Tag := curRate.Value;
			end;
		end else
		begin
			if giArea_Charge_YN = 'y' then
			begin
				Proc_Driver_Charge;
			end else
				cxDriverCharge.Text := '';
		end;
		
		if cbbPostTime.Text = POST_TIME_NOPAY then
		begin
  		edtPostPay.Value := 0;
    end;

		if cbbPayMethod.Text = PAY_METHOD_POST_MILE then          //  20130705  LYB   요금수정되면 쿠폰결제금액도 수정
    begin
   	  if Assigned(Frm_JON34) then
			begin
        Frm_JON34.cxCurDecRate_Coupon.Value := curRate.Value;

        if Frm_JON34.lblCouponStatus.Caption = '승인완료' then
        begin
					UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0) 
										+ StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);
					if Frm_JON34.cxCurDec_Coupon.Value >= Frm_JON34.cxCurDecRate_Coupon.Value then
  					edtPostPay.Value := Frm_JON34.cxCurDecRate_Coupon.Value
					else
          begin
  					TotMile := Frm_JON34.cxCurDec_Coupon.Value + UserMile;
            if Frm_JON34.cxCurDecRate_Coupon.Value > TotMile then
  						edtPostPay.Value := TotMile
            else
  						edtPostPay.Value := Frm_JON34.cxCurDecRate_Coupon.Value;
          end;
        end;
      end;
    end;

  	AppendPostDesc;
    pCompareQRateInfo;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.SetCustLevelData;
var
	I: Integer;
	sTemp : string;
begin
  SetDebugeWrite('JON01.SetCustLevelData');
  try
    cboCuLevel.Properties.Items.Clear;
  	SCboLevelSeq.Clear;
    for I := 0 to Length(CustGroup.LevelInfo) - 1 do
    begin
      cboCuLevel.Properties.Items.Add(CustGroup.LevelInfo[I].LevelName);
			SCboLevelSeq.Add(CustGroup.LevelInfo[I].LevelSeq);
    end;
    DefaultCustLevel;
	except
		sTemp := 'SetCustLevelData';
		Log('고객등급 : '+ sTemp, LOGDATAPATHFILE);
	end;
end;

procedure TFrm_JON01.DefaultCustLevel;
begin
  SetDebugeWrite('JON01.DefaultCustLevel');
  SetCustLevelSeq(CustGroup.Default.LevelSeq);
end;

procedure TFrm_JON01.dtpResvDatePropertiesChange(Sender: TObject);
begin
  if dtpResvDate.Tag = 1 then Exit;

  CbSecondPropertiesChange(CbSecond);
  CheckResvDateTime(True);
end;

procedure TFrm_JON01.dtpResvTimePropertiesChange(Sender: TObject);
begin
  if dtpResvTime.Tag = 1 then Exit;

  CbSecondPropertiesChange(CbSecond);
  CheckResvDateTime(True);
end;

procedure TFrm_JON01.CheckResvDateTime( bView : Boolean );
Var TimeGap : Int64;
begin
  SetDebugeWrite('JON01.CheckResvDateTime');

  if cxGbReserv.Visible then
  begin
    TimeGap := GetTimeGap(FormatDateTime('YYYYMMDDHHNN00', Now), StringReplace(dtpResvDate.Text, '-', '', [rfReplaceAll]) + StringReplace(dtpResvTime.Text, ':', '', [rfReplaceAll])+ '00');

    if TimeGap < 0 then
    begin
      if bView then
        GMessagebox('과거날짜로는 예약할 수 없습니다.', CDMSI);
      dtpResvDate.Text := FormatDateTime('YYYY-MM-DD', Date); // 예약일자
      dtpResvTime.Text := FormatDateTime('AM/PM hh:mm:ss', Now + ((1 / 24 / 60) * 10)); // 예약시간

      dtpResvDateJ.Text := dtpResvDate.Text;
      dtpResvTimeJ.Text := dtpResvTime.Text;

      CbSecond.ItemIndex := 0;
    end;
    fGetDiffDay( StringReplace(dtpResvDate.Text, '-', '', [rfReplaceAll]) + StringReplace(dtpResvTime.Text, ':', '', [rfReplaceAll])+ '00' );
  end;
end;

procedure TFrm_JON01.SetCustLevelSeq(ASeq: string);
var
	I: Integer;
	sTemp : string;
begin
  SetDebugeWrite('JON01.SetCustLevelSeq');
  if cboCuLevel.Properties.Items.Count = 0 then Exit;

	try
    for I := 0 to Length(CustGroup.LevelInfo) - 1 do
    begin
       if CustGroup.LevelInfo[I].LevelSeq = ASeq then
       begin
        cboCuLevel.ItemIndex := I;
        Break;
       end;
    end;
	except
		sTemp := 'SetCustLevelSeq';
		Log('고객등급 : '+ sTemp, LOGDATAPATHFILE);
	end;
end;

// 법인 선택 정보를 보여준다.
procedure TFrm_JON01.Proc_BubinChoice;
var
  iRow, iRateType, iChoiceRow: Integer;
  sCbcode, sCbCd, sBubin: string;
begin
  SetDebugeWrite('JON01.Proc_BubinChoice');
  try
    iChoiceRow := cxBubinView.DataController.FocusedRecordIndex;
    if iChoiceRow = -1 then
      Exit;

    if iChoiceRow > 0 then
    begin
      sCbcode := cxBubinView.DataController.Values[iChoiceRow, 4];
      sCbCd := Copy(sCbcode, 1, Pos(',', sCbcode) - 1);
      sBubin := Trim(cxBubinView.DataController.Values[iChoiceRow, 0]) + ' | ' +
        Trim(cxBubinView.DataController.Values[iChoiceRow, 1]);
      lblCuBubinName.Caption := '법인고객 [ ' + Trim(sBubin) + ' ]';
      cxtCuBubin.Text := sBubin;
      cxtCuBubin.Hint := sCbCd;
			if (Pos('수정', Self.Caption) = 0 )  then
      begin
        iRow := GT_BUBIN_INFO.cbcode.IndexOf(sCbcode);
        iRateType := StrToIntDef(Copy(AnsiString(GT_BUBIN_INFO.cbEtc.Strings[iRow]), 153, 1), 1);
        PayMethod := PAY_METHOD_MONEY;
      end;
    end else
    begin
      cxtCuBubin.Text := '';
      cxtCuBubin.Hint := '';
      payMethod := PAY_METHOD_MONEY;
      Self.lblCuBubinName.Caption := '';
    end;
    cxBubinView.DataController.SetRecordCount(0);
    pnlBubin.Visible := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.SetCuProduct(AProdName: string; AProdPrice: Integer);
var
	Item: TStrings;
begin
	cbbCuProduct.Clear;

	if IsUseCoupon(locBRNO) then
	begin
		cbbCuProduct.Properties.Items.Text := _PROD_LIST;
		Shape8.Brush.Color := clRed;
		lbMileCaption.Style.Font.Color := clWhite;
  end else
  begin
		cbbCuProduct.Properties.Items.Text := _PROD_BASE;
		Shape8.Brush.Color := $00FAE1CD;
		lbMileCaption.Style.Font.Color := $00D1566B;
  end;

  if AProdName <> '' then
	begin
    Item := cbbCuProduct.Properties.Items;
    Item.Insert(1, AProdName);
    if cbbCuProduct.Properties.Items.Count > 1 then
    begin
      cbbCuProduct.ItemIndex := 2;
      AProdPrice := GetPriceFromProduct(cbbCuProduct.Text);
    end
    else if cbbCuProduct.Properties.Items.Count = 2 then
      cbbCuProduct.ItemIndex := 1
    else
      cbbCuProduct.ItemIndex := -1;
  end else
  begin
    if cbbCuProduct.Properties.Items.Count > 1 then
    begin
      cbbCuProduct.ItemIndex := 1;
      AProdPrice := GetPriceFromProduct(cbbCuProduct.Text);
    end else
      cbbCuProduct.ItemIndex := -1;
  end;

  curOutMileMny.Value := AProdPrice;
end;

procedure TFrm_JON01.SetCustAppInfo(AAppCode, AAppLastRegDate,
	AAppLastDelDate, AAppLastFinishDate, AAppCuArea, AAppTermModel,
	AAppTermOS, AAppDelYn: string);
const
	__Cu_INF_STR = '앱코드 : %0:s'#13#10 +
								 '앱설치 : %1:-12s'#13#10+
                 '앱삭제 : %2:-12s'#13#10 +
								 '최종 : %3:-10s'#13#10 +
								 '앱지역 : %4:s'#13#10 +
								 'OS/모델 : %5:-15s'#13#10 +
								 '앱설치버전 : %6:-17s'#13#10 +
								 '사용 : %7:-10s';
begin
  SetDebugeWrite('JON01.SetCustAppInfo');
	mmoCuInfo.Text := Format(__Cu_INF_STR, [AAppCode, AAppLastRegDate, AAppLastDelDate, AAppLastFinishDate, AAppCuArea, AAppTermModel, AAppTermOS, AAppDelYn]);
end;

procedure TFrm_JON01.proc_delete_customer;
const
  ls_Param = '<param>ParamString</param>';
var
  rv_str, ls_TxLoad, sBrNo, sHdNo:
  string;
  sParam, sTemp, sKeynum, sCustTel: string;
  slRcvList: TStringList;
  ls_rxxml: string;
  ErrCode: integer;
begin
  SetDebugeWrite('JON01.proc_delete_customer');
  if lcsCu_seq = '' then
  begin
    GMessagebox('고객이 없습니다!', CDMSI);
    Exit;
  end;

  try
    sHdNo := Proc_HDNOSearch;
    sBrNo := Proc_BRNOSearch;
    sKeynum := Proc_MainKeyNumberSearch;
    sCustTel := ReplaceAll(cxtCuTel.Text, '-', '');
    if GMessagebox('삭제고객번호 : ' + strtocall(sCustTel) + #13#10 +
      '삭제시 고객정보와 이용횟수, 마일리지가 삭제됩니다.' + #13#10 +
      '[단, 고객 이용내역은 삭제되지 않습니다.]' + #13#10 +
      '[또한, 현재 등록된 오더가 있을 경우에도 삭제 안됨]' + #13#10 +
      '삭제하시겠습니까?', CDMSQ) <> idok then
      Exit;

    sKeynum := ReplaceAll(sKeynum, '-', '');
    sCustTel := ReplaceAll(sCustTel, '-', '');

    ls_TxLoad := GTx_UnitXmlLoad('CALLABLE.xml');

    sTemp := 'PROC_DELETE_CUSTOMER_NEW1(?,?,?,?,?,?)';
    sParam := ReplaceAll(ls_Param, 'ParamString', sHdNo);
    sParam := sParam + ReplaceAll(ls_Param, 'ParamString', sBrNo);
    sParam := sParam + ReplaceAll(ls_Param, 'ParamString', sKeynum);
    sParam := sParam + ReplaceAll(ls_Param, 'ParamString', sCustTel);
    sParam := sParam + ReplaceAll(ls_Param, 'ParamString', lcsCu_seq);

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', En_Coding(GT_USERIF.ID));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'DELETECUST');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallString', sTemp);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CountString', IntToStr(5));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ParamString', sParam);

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;

  except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01.SetStartAreaMap(const ASido, AGugun, ADong, ADetail, AX, AY: string);
begin
  SetDebugeWrite('JON01.SetStartAreaMap');
  try
  	if BtnStLock.Hint = 'F4)수정' then
    begin
      // 20120805 좌표 오류 체크 LYB
      gJONStaChkXY.Area1 := ASido;
      gJONStaChkXY.Area2 := AGugun;
      gJONStaChkXY.Area3 := ADong;
      gJONStaChkXY.Area4 := ADetail;
      gJONStaChkXY.Area5 := ASido + ' ' + AGugun + ' ' + ADong;
      gJONStaChkXY.X := AX;
      gJONStaChkXY.Y := AY;
      gJONStaChkXY.GUIDE_X := '';
      gJONStaChkXY.GUIDE_Y := '';

      cxtStartXval.Text := AX;
      cxtStartYval.Text := AY;
      cxtStartGUIDEXval.Text := '';
      cxtStartGUIDEYval.Text := '';

      BtnStLock.Hint := 'F4)잠금';
      BtnStLock.Tag  := 0;
      BtnStLock.Down := True;
      BtnStLock.ImageIndex := 1;

      frm_JON30.N1.Enabled := False;
      frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
      Frm_JON30.btnSPoiMove.Enabled := False;
      frm_JON30.N6.Enabled := False;
      frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
      Frm_JON30.btnSPoiAMove.Enabled := False;

			if meoStartArea.CanFocus then meoStartArea.SetFocus;
      meoStartArea.SelStart := Length(meoStartArea.Text);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.SetEndAreaMap(const ASido, AGugun, ADong, ADetail, AX,
  AY: string);
begin
  SetDebugeWrite('JON01.SetEndAreaMap');
  try
  	if BtnEdLock.Hint = 'F4)수정' then
		begin
			gJONEndChkXY.X := AX;
			gJONEndChkXY.Y := AY;
  		gJONEndChkXY.GUIDE_X := AX;
  		gJONEndChkXY.GUIDE_Y := AY;

      cxtEndXval.Text := AX;
  		cxtEndYval.Text := AY;
      cxtEndGUIDEXval.Text := AX;
  		cxtEndGUIDEYval.Text := AY;

  		BtnEdLock.Hint := 'F4)잠금';
      BtnEdLock.Tag  := 0;
      BtnEdLock.ImageIndex := 1;
      BtnEdLock.Down := True;
  		frm_JON30.N2.Enabled := False;
  		frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
  		Frm_JON30.btnEPoiMove.Enabled := False;
  		frm_JON30.N7.Enabled := False;
  		frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
      Frm_JON30.btnEPoiAMove.Enabled := False;

			if meoEndArea.CanFocus then meoEndArea.SetFocus;
      meoEndArea.SelStart := Length(meoEndArea.Text);
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.Hide_Panel(Panel: string; Showhide : integer);
begin
  SetDebugeWrite('JON01.Hide_Panel');
  try
    if ( Not Assigned(Frm_JON30) ) Or ( Frm_JON30 = Nil ) then
       Frm_JON30 := TFrm_JON30.Create(Self);

		if Assigned(Frm_JON30) then
		begin
			if Frm_JON30.Tag > 21 then 
			begin
				//POI창 Tag 값 입력 확인용 천안로그 201191126 KHS
//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-Hide_Panel-B-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS

			Frm_JON30.Tag := Self.Tag;

//			if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//				Log('JON01-Hide_Panel-A-JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS
			end;
		end;

  	if Showhide = 0 then
    begin
      if (Panel = 'meoStartAreaCUT') OR (Panel = 'meoEndAreaCUT') then
      begin
				Frm_JON30.Show;
			end else
			begin
        if Not pnlShare.Visible then
        begin
          SetDebugeWrite('JON01.Hide_Panel_1');
					try
            Frm_JON30.bChkTime := True;
						Frm_Jon30.TmrChkTag.Tag := 100;

						//POI창 Tag 값 입력 확인용 천안로그 201191126 KHS
//						if {(GT_USERIF.CT = 'S662') or} (GT_USERIF.CT = 'H227') then 
//							Log('JON01.Hide_Panel-Frm_JON30.Show JON01Tag[' + IntToStr(Self.Tag) + '] JON30Tag[' + IntToStr(Frm_JON30.Tag) + ']', LOGDATAPATHFILE);  //천안로그 20191125 KHS
						Frm_JON30.Show;

						SetDebugeWrite('JON01.Hide_Panel_2');
          except on E: Exception do
            begin
              Frm_JON30.Close;
              Assert(False, 'Frm_JON30.Close : ' + E.Message);
            end;
          end;
        end;
  		end;
    end else
  	if Showhide = 1 then
  	begin
      if (Panel = 'meoStartAreaCUT') OR (Panel = 'meoEndAreaCUT') then
      begin
  			Frm_JON30.Hide;
      end else
      begin
        SetDebugeWrite('JON01.Hide_Panel_3');
        try
          Frm_JON30.bChkTime := False;
          Frm_Jon30.TmrChkTag.Tag := 100;
          Frm_JON30.Hide;
          SetDebugeWrite('JON01.Hide_Panel_4');
        except on E: Exception do
          begin
            Frm_JON30.Close;
            Assert(False, 'Frm_JON30.Close : ' + E.Message);
          end;
        end;
  		end;
  	end;

    if (Panel = 'meoStartArea') or (Panel = 'meoStartAreaCUT') then
    begin
      SetDebugeWrite('JON01.Hide_Panel_5');
      frm_JON30.pnl_01START.Visible := True;
      frm_JON30.pnl_02END.Visible := False;
      frm_JON30.pnl_03VIA.Visible := False;
      SetDebugeWrite('JON01.Hide_Panel_6');
  	end else
    if (Panel = 'meoEndArea') or (Panel = 'meoEndAreaCUT') then
    begin
      frm_JON30.pnl_01START.Visible := False;
      frm_JON30.pnl_02END.Visible := True;
      frm_JON30.pnl_03VIA.Visible := False;
    end else
    if Panel = 'meoViaArea' then
    begin
      frm_JON30.pnl_01START.Visible := False;
      frm_JON30.pnl_02END.Visible := False;
      frm_JON30.pnl_03VIA.Visible := True;
  	end;
    SetDebugeWrite('JON01.Hide_Panel_7');
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.AllClear;
begin
  try
    SetDebugeWrite('JON01.AllClear');
    Frm_JON30.Grid_Init('meoStartArea',1);
    Frm_JON30.Grid_Init('meoStartArea',2);
    Frm_JON30.Grid_Init('meoStartArea',3);
    Frm_JON30.Grid_Init('meoStartArea',4);
    Frm_JON30.Grid_Init('meoEndArea'  ,1);
    Frm_JON30.Grid_Init('meoEndArea'  ,2);
    Frm_JON30.Grid_Init('meoEndArea'  ,3);
    Frm_JON30.Grid_Init('meoEndArea'  ,4);
    Frm_JON30.Grid_Init('meoViaArea'  ,1);
    Frm_JON30.Grid_Init('meoViaArea'  ,2);
    Frm_JON30.Grid_Init('meoViaArea'  ,3);
    Frm_JON30.Grid_Init('meoViaArea'  ,4);
    frm_JON30.ClearWkIcon;
    frm_JON30.ClearPOI;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.lb_AIOBClick(Sender: TObject);
begin
	pnl_AIOB.visible := False;
end;

procedure TFrm_JON01.lb_AIStartClick(Sender: TObject);
begin
	pnl_AIStart.Visible := False;
end;

procedure TFrm_JON01.lb_LockMentClick(Sender: TObject);
begin
	pnl_LockMent.Visible := False;
end;

procedure TFrm_JON01.lcs_Clear(Panel: string);
begin
  SetDebugeWrite('JON01.lcs_Clear');
  try
    if Panel = 'meoStartArea' then
    begin
      if BtnStLock.Hint <> 'F4)잠금' then    //  20130703  LYB  잠금상태에서는 초기화하지 않는다.
      begin
        // 20120805 좌표 오류 체크 LYB
        gJONStaChkXY.Area1 := '';
        gJONStaChkXY.Area2 := '';
        gJONStaChkXY.Area3 := '';
        gJONStaChkXY.Area4 := '';
        gJONStaChkXY.Area5 := '';
        gJONStaChkXY.X := '';
        gJONStaChkXY.Y := '';
				gJONStaChkXY.GUIDE_X := '';
        gJONStaChkXY.GUIDE_Y := '';

        lcsSta1 := '';
        lcsSta2 := '';
        lcsSta3 := '';
        lcsSta4 := '';
        lcsStaDocId := '';
        lcsStaCellSel := '';
        lcsStaSchWord := '';
//-        lcsStaUrl := '';
        lcsStaDebug := '';
        lblStartAreaName.Text := '';
        cxtStartAreaDetail.Text := '';
        lcsConfAREA4            := '';
        cxtStartXval.Text := '';
        cxtStartYval.Text := '';
        cxtStartGUIDEXval.Text := '';
        cxtStartGUIDEYval.Text := '';
      end;
    end else
    if Panel = 'meoEndArea' then
    begin
      if BtnEdLock.Hint <> 'F4)잠금' then    //  20130703  LYB  잠금상태에서는 초기화하지 않는다.
      begin
        lcsEnd1 := '';
        lcsEnd2 := '';
        lcsEnd3 := '';
        lcsEnd4 := '';
        lcsEndDocId := '';
        lcsEndCellSel := '';
        lcsEndSchWord := '';
//-        lcsEndUrl := '';
        lcsEndDebug := '';
        lblEndAreaName.Caption := '';
        cxtEndAreaDetail.Caption := '';
        cxReEndArea.Text := '';

        gJONEndChkXY.X := '';
        gJONEndChkXY.Y := '';
        gJONEndChkXY.GUIDE_X := '';
        gJONEndChkXY.GUIDE_Y := '';

        cxtEndXval.Text := '';
        cxtEndYval.Text := '';
        cxtEndGUIDEXval.Text := '';
        cxtEndGUIDEYval.Text := '';
      end;
    end else
    if Panel = 'meoViaArea' then
  	begin
  {		frmJon013.cxtSA1.Text := '';
  		frmJon013.cxtSA2.Text := '';
  		frmJon013.cxtSA3.Text := '';
  		frmJon013.lblStartAreaName.Caption := '';
      frmJon013.cxtStartAreaDetail.Text := '';
  		frmJon013.cxtStartXval.Text := '';
  		frmJon013.cxtStartYval.Text := '';}
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.SetStartAreaMapNew(const ASido, AGugun, ADong, ADetail, AX, AY: string);
begin
  SetDebugeWrite('JON01.SetStartAreaMapNew');
  try
    if BtnStLock.Hint = 'F4)수정' then
    begin
      // 20120805 좌표 오류 체크 LYB
      gJONStaChkXY.Area1 := ASido;
      gJONStaChkXY.Area2 := AGugun;
      gJONStaChkXY.Area3 := ADong;
      gJONStaChkXY.Area4 := ADetail;
			gJONStaChkXY.Area5 := ASido + ' ' + AGugun + ' ' + ADong;
      gJONStaChkXY.X := AX;
      gJONStaChkXY.Y := AY;
      gJONStaChkXY.GUIDE_X := '';
      gJONStaChkXY.GUIDE_Y := '';

      lcsSta1 := ASido;
      lcsSta2 := AGugun;
      lcsSta3 := ADong;
      if ASido <> '' then
      begin
        lblStartAreaName.Text := ASido + ' ' + AGugun + ' ' + ADong;
        SetDebugeWrite('JON01.lblStartAreaName.Text 20418 : ' + lblStartAreaName.Text);
      end;

      cxtStartXval.Text := AX;
      cxtStartYval.Text := AY;
      cxtStartGUIDEXval.Text := '';
      cxtStartGUIDEYval.Text := '';

      BtnStLock.Hint := 'F4)잠금';
      BtnStLock.Tag  := 0;
      BtnStLock.ImageIndex := 1;
      BtnStLock.Down := True;
      frm_JON30.N1.Enabled := False;
      frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
      Frm_JON30.btnSPoiMove.Enabled := False;
      frm_JON30.N6.Enabled := False;
      frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
      Frm_JON30.btnSPoiAMove.Enabled := False;

			if meoStartArea.CanFocus then meoStartArea.SetFocus;
      meoStartArea.SelStart := Length(meoStartArea.Text);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.Shape_LBSMouseEnter(Sender: TObject);
begin
	PnlHint.visible := True;
	PnlHint.Left := 272;
	PnlHint.Top := 32;

end;

procedure TFrm_JON01.Shape_LBSMouseLeave(Sender: TObject);
begin
	PnlHint.visible := False;

end;

procedure TFrm_JON01.SpeedButton1Click(Sender: TObject);
begin
  pnlBubinState.Visible := False;
end;

procedure TFrm_JON01.cxBtnHoTransClick(Sender: TObject);
var
  pt: TPoint;
begin
  //라우팅업체 설정(호전환)
  GetCursorPos(pt);
  PopupMenuHoTrans.Popup(pt.X, pt.Y);
end;

procedure TFrm_JON01.SetEndAreaMapNew(const ASido, AGugun, ADong, ADetail, AX, AY: string);
begin
  SetDebugeWrite('JON01.SetEndAreaMapNew');
  try
    if BtnEdLock.Hint = 'F4)수정' then
    begin
      lcsEnd1 := ASido;
      lcsEnd2 := AGugun;
      lcsEnd3 := ADong;
      if ASido <> '' then
      begin
        lblEndAreaName.Caption := ASido + ' ' + AGugun + ' ' + ADong;
        cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
        SetDebugeWrite('JON01.cxReEndArea.Text 20474 : ' + cxReEndArea.Text);
				MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);
      end;

  		gJONEndChkXY.X := AX;
  		gJONEndChkXY.Y := AY;
  		gJONEndChkXY.GUIDE_X := AX;
  		gJONEndChkXY.GUIDE_Y := AY;

      cxtEndXval.Text := AX;
  		cxtEndYval.Text := AY;
      cxtEndGUIDEXval.Text := AX;
  		cxtEndGUIDEYval.Text := AY;

      BtnEdLock.Hint := 'F4)잠금';
      BtnEdLock.Tag  := 0;
      BtnEdLock.ImageIndex := 1;
      BtnEdLock.Down := True;

      frm_JON30.N2.Enabled := False;
      frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
      Frm_JON30.btnEPoiMove.Enabled := False;
      frm_JON30.N7.Enabled := False;
      frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
      Frm_JON30.btnEPoiAMove.Enabled := False;

			if meoEndArea.CanFocus then meoEndArea.SetFocus;
      meoEndArea.SelStart := Length(meoEndArea.Text);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.Proc_AreaSearchKDown_Added(Key: Word; sSchTxt : String);
var sViaWord : string;
begin
  SetDebugeWrite('JON01.Proc_AreaSearchKDown_Added');
  if ( Not Assigned(Frm_JON30) ) Or ( Frm_JON30 = Nil ) then
     Frm_JON30 := TFrm_JON30.Create(Self);

  Frm_JON30.bMouseDownSelect := False;
	if (lcsActiveEdit = 'meoEndArea') and (GS_SEARCH_ENDNOSEARCH = True) then Exit;  //도착지 검색 안함 2012.05.29 KHS
  GS_JON30_KeyDown := Key;
  try
  	if not (key in [vk_F7..vk_F12]) then
  	begin
  		if ViaNowTag = 1 then sViaWord := meoViaArea1.Text
  		                 else sViaWord := meoViaArea[ViaNowTag].Text;

  		if ((lcsActiveEdit = 'meoStartArea') and (Length(WideString(meoStartArea.Text)) >= 2)) Or
  			 ((lcsActiveEdit = 'meoEndArea'  ) and (Length(WideString(meoEndArea.Text)) >= 2)) Or
  			 ((lcsActiveEdit = 'meoViaArea'  ) and (Length(WideString(sViaWord)) >= 2))then
  		begin
  			Application.ProcessMessages;

  			if not frm_JON30.noSearch then      //advgrid3 클릭 시 재 검색 안됨.
        begin
  				if GS_MAP_AREA_AUTOSHOW and (not frm_JON30.Visible) then
          begin
            if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
                 (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
                 (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  20130703  LYB  출발지/도착지 포커스가 있을때만 창 표시
            begin
    				  Hide_Panel(lcsActiveEdit,0);
            end;
          end else
          if GS_MAP_AREA_AUTOSHOW = False then
          begin
            frm_JON30.chk_Map(False);
            Hide_Panel(lcsActiveEdit,0);
  				end;

					if ( GS_SEARCH_POISVR_SGSTUSE ) then  //자동완성 사용
					begin
						if (not GS_SEARCH_POTAL) then  //포털 미사용, 와이즈넛 사용 시에 와이즈넛 서제스트
						begin
							TT4.Interval := 50;
							TT4.Enabled := True;
						end
						else TT5.Enabled := True;  //포털만 사용이면 자동완성 사용
					end else //자동완성 미사용
					begin
						if GS_SEARCH_POTAL then
						begin
							TT5.Enabled := True;  //포털 사용, 자동완성 미사용일 경우 오타보정만 사용
						end
						else
						begin
							PnlSuggest.Visible := False;
							AdvGridSj.ShowSelection := False;
						end;
          end;

          if Self.Showing then
          begin
            SetDebugeWrite('Proc_AreaSearchKDown_Added - ' + sSchTxt);
            Hide_Panel(lcsActiveEdit, 0);
						if ( gbSCtrlV Or gbECtrlV ) And ( GS_SEARCH_POISVR_CTRLV ) then
						begin
    	  			frm_JON30.tmThreadPaste.Interval := 90;
    		  		frm_JON30.tmThreadPaste.Enabled := True;
            end else
            begin
    	  			frm_JON30.tmThread.Interval := 90;
    		  		frm_JON30.tmThread.Enabled := True;
            end;
          end;
				end else
        begin
          frm_JON30.noSearch := False;
  			end;
      end else
      begin
        Frm_JON30.Grid_Init(lcsActiveEdit,1);
  			Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
  		end;
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.proc_dis_alculation_Via(bSearchFlag: boolean);
var
  i : Integer;
  fdis: double;
  XLposVia, YLposVia : String;
begin
  SetDebugeWrite('JON01.proc_dis_alculation_Via');
  try
  	XLposVia := '';
  	YLposVia := '';

  	if XposVia[1] = '' then
    begin
  		fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			cxtEndXval.Text,
  			cxtEndYval.Text) *
        StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

      fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			cxtEndXval.Text,
  			cxtEndYval.Text), ffNumber, 3, 1), 0.0);
  	end else
  	if (XposVia[1] <> '') and (XposVia[2]  = '') then
    begin
  		fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			XposVia[1],
  			YposVia[1]) *
  			StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0)
  			+ StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			XposVia[1],
  			YposVia[1],
  			cxtEndXval.Text,
  			cxtEndYval.Text) *
  			StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

  		fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			XposVia[1],
  			YposVia[1]), ffNumber, 3, 1), 0.0)
  			+ StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			XposVia[1],
  			YposVia[1],
  			cxtEndXval.Text,
  			cxtEndYval.Text), ffNumber, 3, 1), 0.0);
  	end else
    if XposVia[2] <> '' then
  	begin
      // 출발지 --> 경유지1
  		fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			XposVia[1],
  			YposVia[1]) * StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

  		fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			XposVia[1],
  			YposVia[1]), ffNumber, 3, 1), 0.0);

      // 경유지1 --> 경유지 최종 까지..
  		for i := 2 to 5 do
  		begin
        if XposVia[i] <> '' then
        begin
    			fDis := fDis +
    				StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
    				XposVia[i-1],
    				YposVia[i-1],
    				XposVia[i],
    				YposVia[i]) * StrToFloatDef(CHARGE_DIS, 1.0),
            ffNumber, 3, 1), 0.0);

    			fDirKm := fDirKm +
    				StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
    				XposVia[i-1],
    				YposVia[i-1],
    				XposVia[i],
    				YposVia[i]),
            ffNumber, 3, 1), 0.0);

          XLposVia := XposVia[i];
          YLposVia := YposVia[i];
        end;
      end;

      // 경유지 최종 --> 도착지 까지..
  		if cxtEndXval.Text <> '' then
  		begin
  			if bSearchFlag <> True then
        begin
  				// 최종 확인 버튼 누를때,, 즉 종료전에 마지막것은 Km를 재계산하지 않는다.
          fDis := fDis +
  					StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  					XLposVia,
  					YLposVia,
  					cxtEndXval.Text,
  					cxtEndYval.Text) * StrToFloatDef(CHARGE_DIS, 1.0),
  					ffNumber, 3, 1), 0.0);

          fDirKm := fDirKm +
  					StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  					XLposVia,
  					YLposVia,
  					cxtEndXval.Text,
  					cxtEndYval.Text),
  					ffNumber, 3, 1), 0.0);
  			end;
  		end;
    end;

    if ( GT_DISTANCE_ST = 0 ) then
    begin
    	curKm.Text := FloatToStr(fDis) + 'Km';
      fCruKm := fDis;
      fTotalTime := 0;   // 직선거리이면 소요시간 0
    end else
    begin
      fChgKm := fDis;
      Lbl_Distance.Caption := Format(' 직선)%s', [FloatToStr(fDis) + 'Km']);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.ViaOK;
var
	i, iRow, j, jRow, iLastViaTag, iVia, iRate : Integer;
	bSearchYN: boolean; // 요금 재조회 여부
  sViaTmp, sViaMemo : String;
begin
	SetDebugeWrite('JON01.ViaOK');
	try
		iRow := Self.Tag; // 폼 인덱스.

		bSearchYN := False; // 요금 재조회 여부

//    if gsViaStartEndCheck = 'Y' then
//    begin
//    	if pos('/', meoStartArea.Text) > 0 then
//  	  	meoStartArea.Text := Copy(meoStartArea.Text, 1, pos('/', meoStartArea.Text) - 1);
//    end else
//    if gsViaStartEndCheck = 'N' then
//    begin
//    	if LastPos('/', meoEndArea.Text) > 0 then
//  	  	meoEndArea.Text := Copy(meoEndArea.Text, LastPos('/', meoEndArea.Text) + 1, Length(meoEndArea.Text) - LastPos('/', meoEndArea.Text) );
//    end;

		if gsViaStartEndCheck = 'Y' then
		begin
			meoStartArea.Text := gsStArea[iRow];
		end else
		if gsViaStartEndCheck = 'N' then
		begin
 	  	meoEndArea.Text := gsEdArea[iRow];
    end;

		if (XposVia[1] <> '') and (ViaADDTag = 0) then ViaADDTag := 1; //첫번째 경유지일 경우

  	iLastViaTag := ViaADDTag;

    sViaTmp := '';
    sViaMemo := '';

  	iVia := 1;    //저장전문에 포함될 경유지 추가 초기값
  	if iLastViaTag > 0 then
  	begin
  		for i := 0 to 4 do
  		begin
  			GT_PASS_INFO[iRow][i].AREA1 := '';
        GT_PASS_INFO[iRow][i].AREA2 := '';
        GT_PASS_INFO[iRow][i].AREA3 := '';
  			GT_PASS_INFO[iRow][i].AREA4 := '';
  			GT_PASS_INFO[iRow][i].AREA5 := '';
  			GT_PASS_INFO[iRow][i].DOCID := '';
  			GT_PASS_INFO[iRow][i].CELLS := '';
  			GT_PASS_INFO[iRow][i].SWORD := '';
  			GT_PASS_INFO[iRow][i].MAP_X := '';
  			GT_PASS_INFO[iRow][i].MAP_Y := '';
      end;

      meoStartArea.Tag := 1;
      meoEndArea.Tag := 1;
      try
        for i := 1 to iLastViaTag do
        begin
          if i = 1 then
          begin
						if meoViaArea1.Text <> '' then
            begin
              meoViaArea1.Text := StringReplace(meoViaArea1.Text, #9, '', [rfReplaceAll]);  // Tab키 삭제
              GT_PASS_INFO[iRow][iVia - 1].AREA1 := ViaSA1[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA2 := ViaSA2[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA3 := ViaSA3[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA4 := ViaAreaDetail[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA5 := meoViaArea1.Text;
              GT_PASS_INFO[iRow][iVia - 1].DOCID := DocId[i];
              GT_PASS_INFO[iRow][iVia - 1].CELLS := CellSel[i];
              GT_PASS_INFO[iRow][iVia - 1].SWORD := ViaAreaDetail[i];
              GT_PASS_INFO[iRow][iVia - 1].MAP_X := XposVia[i];
              GT_PASS_INFO[iRow][iVia - 1].MAP_Y := YposVia[i];
							if (gsViaStartEndCheck = 'Y') and (GT_PASS_INFO[iRow][0].AREA1 <> '') then
                meoStartArea.Text := meoStartArea.Text + '/' + meoViaArea1.Text
              else
              if gsViaStartEndCheck = 'N' then
                sViaTmp := meoViaArea1.Text + '/';

              sViaMemo := meoViaArea1.Text;
              inc(iVia);

							if (pos('경유)', meoStartArea.Text) < 1) and (GT_PASS_INFO[iRow][0].AREA1 <> '') then
							begin
								cb_02.down := True;
								cb_00Click(cb_02);
							end	else
							begin
								if GT_PASS_INFO[iRow][0].AREA1 = '' then
								begin
									cb_02.down := False;
									cb_00Click(cb_02);
								end;
							end;
						end else
						begin
							cb_02.down := False;
							cb_00Click(cb_02);
						
						end;
					end else
          begin
            if meoViaArea[i].Text <> '' then
            begin
              meoViaArea[i].Text := StringReplace(meoViaArea[i].Text, #9, '', [rfReplaceAll]);  // Tab키 삭제
              GT_PASS_INFO[iRow][iVia - 1].AREA1 := ViaSA1[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA2 := ViaSA2[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA3 := ViaSA3[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA4 := ViaAreaDetail[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA5 := meoViaArea[i].Text;
              GT_PASS_INFO[iRow][iVia - 1].DOCID := DocId[i];
              GT_PASS_INFO[iRow][iVia - 1].CELLS := CellSel[i];
              GT_PASS_INFO[iRow][iVia - 1].SWORD := ViaAreaDetail[i];
              GT_PASS_INFO[iRow][iVia - 1].MAP_X := XposVia[i];
              GT_PASS_INFO[iRow][iVia - 1].MAP_Y := YposVia[i];
							if (gsViaStartEndCheck = 'Y') and (GT_PASS_INFO[iRow][iVia - 1].AREA1 <> '') then
                meoStartArea.Text := meoStartArea.Text + '/' + meoViaArea[i].Text
              else
              if gsViaStartEndCheck = 'N' then
                sViaTmp := sViaTmp + meoViaArea[i].Text + '/';

              sViaMemo := sViaMemo + '/' + meoViaArea[i].Text;
							inc(iVia);
							if (pos('경유)', meoStartArea.Text) < 1) and (GT_PASS_INFO[iRow][0].AREA1 <> '') then
							begin
								cb_02.down := True;
								cb_00Click(cb_02);
							end	else
							begin
								if GT_PASS_INFO[iRow][0].AREA1 = '' then
								begin
									cb_02.down := False;
									cb_00Click(cb_02);
								end;
							end;
							
							sViaMemo := sViaMemo + '/' + meoViaArea[i].Text;
							inc(iVia);
						end else
						begin
							if GT_PASS_INFO[iRow][0].AREA1 = '' then
							begin
								cb_02.down := False;
								cb_00Click(cb_02);
							end;
						end;
					end;
				end;
				if GT_PASS_INFO[iRow][0].AREA1 <> '' then
				begin
					meoEndArea.Text := sViaTmp + meoEndArea.Text;
					meoBigo.Text := fMemoToVia(sViaMemo, meoBigo.Text);
				end;
			finally
        meoStartArea.Tag := 0;
        meoEndArea.Tag := 0;
      end;

		end	else
  	begin
  		i := 1;
  		GT_PASS_INFO[iRow][i - 1].AREA1 := '';
  		GT_PASS_INFO[iRow][i - 1].AREA2 := '';
  		GT_PASS_INFO[iRow][i - 1].AREA3 := '';
      GT_PASS_INFO[iRow][i - 1].AREA4 := '';
  		GT_PASS_INFO[iRow][i - 1].AREA5 := '';
  		GT_PASS_INFO[iRow][i - 1].DOCID := '';
  		GT_PASS_INFO[iRow][i - 1].CELLS := '';
  		GT_PASS_INFO[iRow][i - 1].SWORD := '';
  		GT_PASS_INFO[iRow][i - 1].MAP_X := '';
      GT_PASS_INFO[iRow][i - 1].MAP_Y := '';

			cb_02.down := False;
			cb_00Click(cb_02);
{  		if pos('경유)', meoStartArea.Text) > 0 then
  		begin
  			cb_02.down := False;
				cb_00Click(cb_02);
			end;      }
  	end;
		meoBigo.Text := fMemoToVia(sViaMemo, meoBigo.Text);
		
{    if ( Not fnc_RealKmThread_End ) And ( GT_DISTANCE_ST = 1 ) then
    begin
      Exit;
    end;}

  	proc_dis_alculation_Via;
  	if bSearchYN = False then
  	begin // 요금 재조회 여부
  		if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
      begin
        tmrThRealDis.Tag := 0;
        if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                               else begin
                                      iRate := func_search_charge;
                                      if Not gsMyMainRateNoChange then
																			begin
																				if BtnRaLock.Hint <> 'F4)잠금' then
																				begin
																					curRate.Value := iRate;
																					OrgRate := curRate.Value;
																				end
																				else
																				begin
																					if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
																					begin
																						if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
																						begin
																							tmLockMent.Enabled := False;
																							if ChkMini.Checked then
																							begin
																								lb_LockMent.Caption := '요금항목이 잠겨있습니다.';
																								pnl_LockMent.Width := 391;
																								imgLockMent.Visible := False;
																							end
																							else
																							begin
																								lb_LockMent.Caption := '요금항목이 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
																								pnl_LockMent.Width := 585;
																								imgLockMent.Visible := True;
																							end;
																							lb_LockMent.Font.Color := clYellow;
																							imgLockMent.left := 334;
																							pnl_LockMent.Top := GBTop5.Top + curRate.Top + curRate.Height;//417//193;//276;
																							pnl_LockMent.Left := 8;
																							pnl_LockMent.Color := clBlack;
																							if not pnl_LockMent.Visible then pnl_LockMent.Visible := True;
																							tmLockMent.Interval := 2000;
																							tmLockMent.Enabled := True;
																							BtnRaLock.Tag := 99; //한번 알림 뜨면 다시는 안뜨게 함.
																						end;
																					end;
																				end;
                                      end;
                                    end;
     	end;
    end;
    pCompareQRateInfo;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.SetMileColorChange;
var
	CurMile,
  UseMile: Integer;
  FontColor: TColor;
begin
	SetDebugeWrite('JON01.SetMileColorChange');
  try
    CurMile := StrToIntDef(RemoveComma(lblCuMile.Caption), -1);
    UseMile := StrToIntDef(RemoveComma(lblCuMileUnit.Caption), 0);
		AUseMileage := False;

  	if ( CurMile >= UseMile) And (( CurMile <> 0 ) And ( UseMile <> 0 )) then
  	begin
  		FontColor := clWhite;
  		pnlMileage.Color := clBlue;
{  		if (GS_PRJ_AREA = 'O') and ((Proc_MainKeyNumberSearch = '0519999999')
															 or (Proc_MainKeyNumberSearch = '025231793')) then    //부산오천콜 3박4일 2013.12.11 KHS
			begin                                                                         //삭제요청 2019.03.04 KHS 신성현차장요청
  			AUseMileage := True;
			end; }
		end else
		begin
  		FontColor := clBlack;
			pnlMileage.Color := Self.Color;
  	end;

		lblCuMile.Font.Color := FontColor;
		Label5.Font.Color := FontColor;
    lblMoCuMile.Font.Color := FontColor;
    Label9.Font.Color := FontColor;
		Label1.Font.Color := FontColor;
    lblCuMileUnit.Font.Color := FontColor;
		Label4.Font.Color := FontColor;
		lblCuMileCnt.Font.Color := FontColor;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01.fJON01_SmartCharge(AOderWorker, AWeather, ASta1, ASta2,
  ASta3, ASPOI, ASX, ASY, AEnd1, AEnd2, AEnd3, AEPOI, AEX, AEY, AType: string; Var OType : String) : Integer;
var
  ls_TxLoad: string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  XmlData, Param, ErrMsg: string;
  nodeList_Result : IXMLNodeList;
  lst_Result: IXMLNode;
  I, ErrCode, iRow, iRCnt, iSearchType : Integer;
  ls_MSG_Err, sTmp: string;
  ls_Rcrd: TStringList;
  sSampleAmount, sDate : string;
  sSmart, sRank1, sRank2 : string;
begin
  SetDebugeWrite('JON01.fJON01_SmartCharge');
  Result := 0;
  //////////////////////////////////////////////////////////////////////////////////
  //  접수 전문
  //////////////////////////////////////////////////////////////////////////////////

  cxLblSmartRate.Caption := '';
  cxLblRate1.Caption := '';
  cxLblRate2.Caption := '';
  Try
    sRank1 := ''; sRank2 := ''; sSmart := '';

    if ( Trim(ASX) = '' ) Or ( Trim(ASY) = '' ) Or
       ( Trim(AEX) = '' ) Or ( Trim(AEY) = '' ) then Exit;

    ls_TxLoad := GTx_UnitXmlLoad('JON03060N2.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'JON03060N2');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strNowOrderWorker', AOderWorker);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strNowWeather', AWeather);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strType', AType);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strDeparture', En_Coding(ASta1 + '│' + ASta2 + '│' + ASta3 + '│' + ASPOI + '│' + ASX + '│' + ASY));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strArrive'   , En_Coding(AEnd1 + '│' + AEnd2 + '│' + AEnd3 + '│' + AEPOI + '│' + AEX + '│' + AEY));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strtestDateTime', GB_JON_SMARTTESTDATE);

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;

          ls_MSG_Err := GetXmlErrorCode(ls_rxxml);
          if ('0000' <> ls_MSG_Err) then Exit;

          lst_Result := GetXmlSelectNode(ls_rxxml, '/cdms/Service/Data/Now');
          if lst_Result = Nil then Exit;

          sSmart := lst_Result.Attributes['smartPrice'];
          Result := StrToIntDef(sSmart, 0);

          sSmart := FormatFloat('#,##0', StrToFloatDef(sSmart, 0.0)) + '원' ;

          lst_Result := GetXmlSelectNode(ls_rxxml, '/cdms/Service/Data/Past');
          if lst_Result = Nil then Exit;

          iRCnt := StrToIntDef(lst_Result.Attributes['rowCount'], 0) ;
          OType := lst_Result.Attributes['searchType'];

          nodeList_Result := GetXmlSelectNodeList(ls_rxxml, '/cdms/Service/Data/Past/Row');
          if ( nodeList_Result = Nil ) then Exit;

          for i := 0 to iRCnt -1 do
          begin
            if nodeList_Result.Get(i).Attributes['rank'] = '1' then
            begin
              if sRank1 = '' then
                sRank1 := FormatFloat('#,##0', StrToFloatDef(nodeList_Result.Get(i).Attributes['price'], 0.0)) + '원'
              else if sRank2 = '' then
                sRank2 := FormatFloat('#,##0', StrToFloatDef(nodeList_Result.Get(i).Attributes['price'], 0.0)) + '원';
            end
            else
            if nodeList_Result.Get(i).Attributes['rank'] = '2' then
            begin
              sRank2 := FormatFloat('#,##0', StrToFloatDef(nodeList_Result.Get(i).Attributes['price'], 0.0)) + '원';
            end;
          end;
          cxLblSmartRate.Caption := ' 스마트:' + sSmart;
          cxLblRate1.Caption := '1위:' + sRank1;
          cxLblRate2.Caption := '2위:' + sRank2;
        end;
      end;
    finally
      FreeAndNil(ls_Rcrd);
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
    end;
  except
    on e: Exception do
    begin
      Screen.Cursor := crDefault;
      Assert(False, E.Message);
    end;
  end;
end;

function TFrm_JON01.fnc_RealKmThread_End: Boolean;
begin
  SetDebugeWrite('JON01.fnc_RealKmThread_End');
  case Self.Tag of
  0 : begin
        if ( Not RealKmPtr00_th1.CaActive ) And ( Not RealKmPtr00_th2.CaActive ) And
           ( Not RealKmPtr00_th3.CaActive ) And ( Not RealKmPtr00_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  1 : begin
        if ( Not RealKmPtr01_th1.CaActive ) And ( Not RealKmPtr01_th2.CaActive ) And
           ( Not RealKmPtr01_th3.CaActive ) And ( Not RealKmPtr01_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  2 : begin
        if ( Not RealKmPtr02_th1.CaActive ) And ( Not RealKmPtr02_th2.CaActive ) And
           ( Not RealKmPtr02_th3.CaActive ) And ( Not RealKmPtr02_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  3 : begin
        if ( Not RealKmPtr03_th1.CaActive ) And ( Not RealKmPtr03_th2.CaActive ) And
           ( Not RealKmPtr03_th3.CaActive ) And ( Not RealKmPtr03_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  4 : begin
        if ( Not RealKmPtr04_th1.CaActive ) And ( Not RealKmPtr04_th2.CaActive ) And
           ( Not RealKmPtr04_th3.CaActive ) And ( Not RealKmPtr04_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  5 : begin
        if ( Not RealKmPtr05_th1.CaActive ) And ( Not RealKmPtr05_th2.CaActive ) And
           ( Not RealKmPtr05_th3.CaActive ) And ( Not RealKmPtr05_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  6 : begin
        if ( Not RealKmPtr06_th1.CaActive ) And ( Not RealKmPtr06_th2.CaActive ) And
           ( Not RealKmPtr06_th3.CaActive ) And ( Not RealKmPtr06_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  7 : begin
        if ( Not RealKmPtr07_th1.CaActive ) And ( Not RealKmPtr07_th2.CaActive ) And
           ( Not RealKmPtr07_th3.CaActive ) And ( Not RealKmPtr07_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  8 : begin
        if ( Not RealKmPtr08_th1.CaActive ) And ( Not RealKmPtr08_th2.CaActive ) And
           ( Not RealKmPtr08_th3.CaActive ) And ( Not RealKmPtr08_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  9 : begin
        if ( Not RealKmPtr09_th1.CaActive ) And ( Not RealKmPtr09_th2.CaActive ) And
           ( Not RealKmPtr09_th3.CaActive ) And ( Not RealKmPtr09_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  10 : begin
        if ( Not RealKmPtr10_th1.CaActive ) And ( Not RealKmPtr10_th2.CaActive ) And
           ( Not RealKmPtr10_th3.CaActive ) And ( Not RealKmPtr10_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  11 : begin
        if ( Not RealKmPtr11_th1.CaActive ) And ( Not RealKmPtr11_th2.CaActive ) And
           ( Not RealKmPtr11_th3.CaActive ) And ( Not RealKmPtr11_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  12 : begin
        if ( Not RealKmPtr12_th1.CaActive ) And ( Not RealKmPtr12_th2.CaActive ) And
           ( Not RealKmPtr12_th3.CaActive ) And ( Not RealKmPtr12_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  13 : begin
        if ( Not RealKmPtr13_th1.CaActive ) And ( Not RealKmPtr13_th2.CaActive ) And
           ( Not RealKmPtr13_th3.CaActive ) And ( Not RealKmPtr13_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  14 : begin
        if ( Not RealKmPtr14_th1.CaActive ) And ( Not RealKmPtr14_th2.CaActive ) And
           ( Not RealKmPtr14_th3.CaActive ) And ( Not RealKmPtr14_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  15 : begin
        if ( Not RealKmPtr15_th1.CaActive ) And ( Not RealKmPtr15_th2.CaActive ) And
           ( Not RealKmPtr15_th3.CaActive ) And ( Not RealKmPtr15_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  16 : begin
        if ( Not RealKmPtr16_th1.CaActive ) And ( Not RealKmPtr16_th2.CaActive ) And
           ( Not RealKmPtr16_th3.CaActive ) And ( Not RealKmPtr16_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  17 : begin
        if ( Not RealKmPtr17_th1.CaActive ) And ( Not RealKmPtr17_th2.CaActive ) And
           ( Not RealKmPtr17_th3.CaActive ) And ( Not RealKmPtr17_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  18 : begin
        if ( Not RealKmPtr18_th1.CaActive ) And ( Not RealKmPtr18_th2.CaActive ) And
           ( Not RealKmPtr18_th3.CaActive ) And ( Not RealKmPtr18_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  19 : begin
        if ( Not RealKmPtr19_th1.CaActive ) And ( Not RealKmPtr19_th2.CaActive ) And
           ( Not RealKmPtr19_th3.CaActive ) And ( Not RealKmPtr19_th4.CaActive ) then Result := True
                                                                                 else Result := False;
      end;
  end;

end;

procedure TFrm_JON01.Proc_JoinFromClose;
var
	sCaption: string;
	iCnt, i, iJOn03 : Integer;
begin
	SetDebugeWrite('JON01.Proc_JoinFromClose');
  try
  	try
      try
    //    if (cxLblCIDUseFlg.Hint = 'CID') then
        begin
          if Frm_Main.JON01MNG[Self.Tag].rOriginal then
          begin
            pSet703CShareClose('Z', Self.Tag, Frm_Main.Frm_JON01[Self.Tag]);
            Frm_Main.JON01MNG[Self.Tag].rKey := '';
            Frm_Main.JON01MNG[Self.Tag].rTime := '';
            Frm_Main.JON01MNG[Self.Tag].rOriginal := False;
					end;
        end;

				pnl_EndDetail_Update.Visible := False;
				edt_EndDetail_Update.Text := '';
				/////////기사면허종류 초기화////////////////
				cbbLicType.ItemIndex := 0;
				pnlWkLicType.Hint := '';
				pnlWkLicType.Visible := false;
				/////////기사면허종류 초기화////////////////
				
				chkViewLevel.Checked := False;
				/////////기사나이 초기화////////////////
				BtnWkAge.Down := False;
        edtWkFAge.Text := '';
        edtWkTAge.Text := '';
        BtnWkAge.Hint := '';
        pnlWkAge.Visible := false;
        /////////기사나이 초기화////////////////

        pnlBubinState.Visible := False; //법인 상태 알림창
        pnlBubinState.Left := 1;
        pnlBubinState.Top := 0;
        ABubinStateIndex := 0; //법인 상태 초기화
        // 이용내역 팝업메뉴 초기화
    		FillChar(A01_HIS_POPUP, SizeOf(A01_HIS_POPUP), chr($00));
    		cxtCuBubin.Hint := '';  //법인코드 초기화
    		btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    		btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.

        // CID 조회인지 설정을 한다.  Value:CID
        cxLblCIDUseFlg.Hint := '';
    		// 접수번호 조회 인지 설정을 한다. Value:CONFSLIP
    		cxLblConfSlipUseFlg.Hint := '';

        lsBr_KeyNumber := '';

        GBTop3.Color := $008FEBFE;
        PnlKTPOIYN.Visible := False;
        TmplcsSta1 := '';
        TmplcsSta2 := '';
        TmplcsSta3 := '';
        TmplcsSta4 := '';
        TmplcsX := '';
				tmplcsY := '';
				TmpDef := '';
				pnl_ViaAlert_Title.Hint := '';
				meoStartArea.Hint := ''; // 포커스 더이상 넘어가지 않도록 한다.
        if Frm_Main.JON01MNG[Self.Tag].FrmGubun <> 1 then meoStartArea.Height := 26;
        if Frm_Main.JON01MNG[Self.Tag].FrmGubun <> 1 then meoEndArea.Height := 26;

				if Assigned(Frm_JON30) then
        begin
          Hide_Panel(lcsActiveEdit,1);
          Frm_JON30.ClearMarkStartEndVia_Icon;
        end;

        giViaKmComplet := False;

        gsCuTelHint := '';
        locLogSeq := '';

        cxLblSmartRate.Caption := '';
        cxLblRate1.Caption := '';
        cxLblRate2.Caption := '';

    		pnl_charge.Visible := False;

//-        cbbPayMethod.Enabled := True;

//        lblMoCuMile.Visible := False;
//        Label9.Visible := False;

        cxLblWkJAmt.Caption := '0';
        PnlWkJi.Visible := False;

        if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height + 25
                                                    else PnlWkJi.Top := edtPostPay.Top + edtPostPay.Height;

				pnlOrderInfoView.Visible := False;

				PnlModifyTitle.Visible := False;
//				BtnLClose1.Visible := False;
				pnlClose.Visible := False;
				shpModifyTitle.Visible := False;

        btnCustAppinfo.Enabled := False;

        PnlSuggest.Visible := False;
        AdvGridSj.ShowSelection := False;
        PnlPOISch.Visible := False;

        cxTxtBrNameCaption.Visible := False;
        // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.

        cxLblOrderUpInfo.Caption := '접수 신규 화면';
    		cxMeoOrderUpInfo.Text := '';

        cxtJoinNum.Tag := 0; // sTodayGb:1(당일오더), 2:(과거오더)
        btnCmdUpdSave.Hint := ''; // "수정", "추가접수" 구분값 저장.

        blChkCuSMS  := False;
        blCompulWor := False;
        sWkSabun := '';

        cxBtnCuUpdate.Enabled   := False;
        cxBtnCuDel.Enabled      := False;

				meoBigo.Visible     := True;
				meoBigo2.Visible    := True;
        meoBigo3.Visible    := True;

        BtnCenterMng.Visible := True;

				PnlModifyTitle.Visible := False;
//				BtnLClose1.Visible := False;
				pnlClose.Visible := False;
				shpModifyTitle.Visible := False;

        btnCmdUpdSave.Tag := 0;
        tmrThRealDis.Tag := 0;

        proc_RealKmPtr_Init;

        cxGbReserv.Visible := False;
        cxGBSearch.Visible := False;
        BtnResvView.Glyph := Nil;
        BtnResvView.Hint := '';
        BtnResv.Tag := 0;  // 예약 초기화
        dtpResvDateJ.Enabled := True;
        dtpResvTimeJ.Enabled := True;

        // 해당 탭을 찾아서 삭제 처리 한다.
        Frm_Main.JON01MNG[Self.Tag].Use := False;
        Frm_Main.JON01MNG[Self.Tag].Jon03Tag := -1;
        Frm_Main.JON01MNG[Self.Tag].rKey := '';
        Frm_Main.JON01MNG[Self.Tag].rTime := '';
        Frm_Main.JON01MNG[Self.Tag].rOriginal := False;

        if Assigned(Frm_JON011) then
        begin
          Frm_JON011.meoCuCCMemoS .Clear;
          Frm_JON011.meoCuWorMemoS.Clear;
          Frm_JON011.mmoCbMemoS.   Clear;
          Frm_JON011.TmrChkTag.Tag := 100;
        end;

        if Assigned(Frm_JON015) and Frm_JON015.HandleAllocated and (Frm_JON015.OrderHandle = Self.Handle) then Frm_JON015.Close;

        // CU_LEVEL_TYPE : 0 : 고객 자동등급별 라벨 칼라를 변경해 준다.
    		Proc_SetFormColor_2(10);
        // 고객 구분에 따른 라벨 칼라를 변경해 준다.
    		Proc_SetFormColor_3(10);
        // 고객 등급별 폼 칼라를 변경해 준다.
        SetCustControlColor(False);

    		Frm_JON012.Caption := '';
        Frm_JON012.cxBtnOldSelect.Tag := 0;
    		Frm_JON012.cxGVeOrderList.DataController.SetRecordCount(0);
        Frm_JON012.cxGVeOrderList.DataController.Filter.Clear;
        Frm_JON012.cxGVeOrderList.DataController.Filter.Active := False;

        FreeAndNil(SmartSR);
        RouteMan := nil;
      except
        on e: exception do
        begin
          Log('Proc_JoinFromClose Error 0 :' + E.Message, LOGDATAPATHFILE);
          Assert(False, 'Proc_JoinFromClose Error 0 :' + E.Message);
        end;
      end;

      { TODO : 화면을 숨긴후 초기화 처리 LYB }
  		Self.Hide;

      try
      	sCaption := Self.Caption;
        if Frm_Main.JON01MNG[Self.Tag].Dock then
        begin
          Self.Parent := Nil;
          Frm_Main.JON01MNG[Self.Tag].Dock := False;
          for iCnt := 0 to Frm_JON00.cxTabControl1.Tabs.Count - 1 do
          begin
            if sCaption = Frm_JON00.cxTabControl1.Tabs[iCnt].Caption then
            begin
              Frm_JON00.cxTabControl1.Tabs.Delete(iCnt);
              if iCnt <> Frm_JON00.cxTabControl1.Tabs.Count then
                Frm_JON00.cxTabControl1Change(btnCmdExit);
              Break;
            end;
          end;
          Frm_Main.JON01MNG[Self.Tag].TabIndex := -1;

          if Frm_JON00.cxTabControl1.Tabs.Count = 0 then
          begin
            Frm_JON00.Hide;
            Frm_JON00.Height := 590;
            Frm_JON00.Width  := 615;
          end;
        end;
			except
			end;

      try
				FControlInitial(False, True); // 접수화면의 기본 컨트롤을 초기화 한다.
				ControlClear(False);
				Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
				SetPrivateVariable; // 접수 전에 조회 조건 관련 전역변수 초기화..
				locDNIS := '';  //종료시에만 초기화 해줌 20160716 KHS
				cxLblCIDUseFlg.Hint := ''; ;  //종료시에만 초기화 해줌 20160716 KHS
				cxtCuTel.Hint := '';  //종료시에만 초기화 해줌 20160716 KHS
				FCustChangeInfo.name         := '';
				FCustChangeInfo.CbCuGb       := -1;
				FCustChangeInfo.meoCuCCMemo  := '';
				FCustChangeInfo.meoCuWorMemo := '';
				FCustChangeInfo.edt_CardMemo := '';
				FCustChangeInfo.cboBrOnly    := 0;
			except
      end;
      // ------------------ 발신번호 정보를 보여준다.------------------------
      cxtCallTelNum.Text := '';
      cxtCallTelNum.StyleDisabled.TextColor := $00555151;
      // 진한 칼라 : $00555151,   // 옅은 칼라 : $00FAE1CD;

      // 지사변경 제한.[이유:고객조회 후 지사변경시 조회한 고객정보 일부유실 경고메시지 띄우기 위함임]
      cboBranch.Properties.ReadOnly := False;
      if cboBranch.Properties.Items.Count > 0 then
      begin
        cboBranch.Tag := 10;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
        cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
        cboBranch.Tag := 0;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
      end;

  		GS_CIDINFO_OUR_KEYNUMBER := True;

      if Assigned(Frm_JON018) then Frm_JON018.Close;

      if ( Not Assigned(Frm_JON30) ) Or ( Frm_JON30 = Nil ) then
       Frm_JON30 := TFrm_JON30.Create(Self);

      Frm_JON30.Grid_Clear('meoStartArea',1);
      Frm_JON30.Grid_Clear('meoStartArea',2);
      Frm_JON30.Grid_Clear('meoStartArea',3);
      Frm_JON30.Grid_Clear('meoStartArea',4);
      Frm_JON30.Grid_Clear('meoEndArea',1);
      Frm_JON30.Grid_Clear('meoEndArea',2);
      Frm_JON30.Grid_Clear('meoEndArea',3);
      Frm_JON30.Grid_Clear('meoEndArea',4);
      Frm_JON30.Grid_Clear('meoViaArea',1);
      Frm_JON30.Grid_Clear('meoViaArea',2);
      Frm_JON30.Grid_Clear('meoViaArea',3);
      Frm_JON30.Grid_Clear('meoViaArea',4);

    { TODO : 전검색단어 초기화-같은단어가들어오면검색이 안되는부분 종료시 해제 }
      Frm_JON30.sPreSearchWord := '';
      gmap_forword := '';

      GQ_PRate[Self.Tag].sta := '';
      GQ_PRate[Self.Tag].staddr := '';
      GQ_PRate[Self.Tag].via := '';
      GQ_PRate[Self.Tag].eda := '';
      GQ_PRate[Self.Tag].edaddr := '';
      GQ_PRate[Self.Tag].rate := '';

      GC_PShare[Self.Tag].brno := '';
      GC_PShare[Self.Tag].brnm := '';
      GC_PShare[Self.Tag].mnum := '';
      GC_PShare[Self.Tag].cuhp := '';
      GC_PShare[Self.Tag].cunm := '';
      GC_PShare[Self.Tag].sta  := '';
      GC_PShare[Self.Tag].staddr := '';
      GC_PShare[Self.Tag].via  := '';
      GC_PShare[Self.Tag].eda  := '';
      GC_PShare[Self.Tag].edaddr := '';
      GC_PShare[Self.Tag].rate := '';

      Fillchar(gvComShare,sizeof(gvComShare), chr($00));
      Fillchar(gvVarShare,sizeof(gvVarShare), chr($00));
      Fillchar(gvHintShare,sizeof(gvHintShare), chr($00));

      GC_PRE_CSHAREDATA := '';

  		lst_BRList.Items.Clear;
  		lst_BRList.Visible := False;
  		searchBRlist.Clear;
  	finally

      iCnt := 0;
      iJOn03 := 0;
			for i := 0 to 20 do
      begin
        if Frm_Main.JON01MNG[i].Use then
        begin
          if Not Frm_Main.Frm_JON03[JON03Tag].pJON03Dock.bUNDock then
            Inc(iCnt)
          else
          if Frm_Main.JON01MNG[i].Jon03Tag = Jon03Tag then Inc(iJOn03);
        end;
      end;

      if iCnt < 1 then
      begin
        if gbfrmJON00Show then gbfrmJON00Show := False;

        // 자동조회 재시작 해줌.
        if Frm_Main.JON03MNG[Jon03Tag].Use then
        begin
    			if Frm_Main.Frm_JON03[Jon03Tag].aiAutoRe.Tag = 1 then
          begin
            FRm_Main.Frm_JON03[Jon03Tag].AAutoSearch_Stop := False;
    				Frm_Main.Frm_JON03[Jon03Tag].tmr_dis.Enabled := True;
            Frm_Main.Frm_JON03[Jon03Tag].aiAutoRe.Active := True;
          end;
        end;

  			GS_JON01OPEN_CHECK := False;
        if Assigned(Frm_JON011) then Frm_JON011.Hide;
      end;

      if Frm_Main.Frm_JON03[JON03Tag].pJON03Dock.bUNDock then
      begin
        if iJon03 < 1 then
        begin
          if Frm_Main.Frm_JON03[JON03Tag].bJON01View then Frm_Main.Frm_JON03[JON03Tag].bJON01View := False;

          // 자동조회 재시작 해줌.
          if Frm_Main.JON03MNG[Jon03Tag].Use then
          begin
    			  if Frm_Main.Frm_JON03[Jon03Tag].aiAutoRe.Tag = 1 then
            begin
              FRm_Main.Frm_JON03[Jon03Tag].AAutoSearch_Stop := False;
    			  	Frm_Main.Frm_JON03[Jon03Tag].tmr_dis.Enabled := True;
              Frm_Main.Frm_JON03[Jon03Tag].aiAutoRe.Active := True;
            end;
          end;
        end;
      end;

      Try
        if RVHandle > 0 then
        begin
          PostMessage (RVHandle, WM_CLOSE, 0, 0);
          RVHandle := 0;
        end;
      except
      End;

      if GS_JON01_GROUPMOVE then
        MagneticWnd.RemoveWindow(Self.Handle);

  		sCust_Gubun := '';
  		// 접수창 닫기.
  		Self.Caption := '';
//  		Self.Hide;
  	end;
  except
    on e: exception do
    begin
      Log('Proc_JoinFromClose Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_JoinFromClose Error :' + E.Message);
    end;
  end;
end;

function TFrm_JON01.proc_BrNameList_Search: boolean;
var
	i, iOldIdx: integer;
	bRlt: boolean;
	sKey: string;
begin
  SetDebugeWrite('JON01.proc_BrNameList_Search');
  try
    bRlt := False;
    lst_BRList.Items.Clear;
    searchBRlist.Clear;
    sKey := cxTSearchMainTel.text; // 조회할 지사명 읽기.

    iOldIdx := cboBranch.ItemIndex;  // 현재 index 값을 저장.[못찾을 경우 현재 선택지사로 되돌려줌]
    cboBranch.Tag := 20;
    lst_BRList.Items.BeginUpdate;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    for i := 0 to cboBranch.Properties.Items.Count - 1 do
    begin
      if (Pos(sKey, cboBranch.Properties.Items.Strings[i]) > 0) then
      begin // 지사명  찾기..
        lst_BRList.Items.Add(cboBranch.Properties.Items.Strings[i]);
				searchBRlist.Add(inttostr(i));
        bRlt := True;
      end;
    end;
    lst_BRList.Items.EndUpdate;
    cboBranch.ItemIndex := iOldIdx;
    lst_BRList.Visible := True;
    if lst_BRList.Items.Count > 30 then
      lst_BRList.Height := 500
    else
      lst_BRList.Height := lst_BRList.Items.Count * 18;
    cboBranch.Tag := 0;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    Result := bRlt;
  Except
    on e: exception do
    begin
      Log('proc_BrNameList_Search Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_BrNameList_Search Error :' + E.Message);
    end;
  end;
end;

// ipwIPPort1 전문을 전송한다.    알림화면을 실행해준다.[bOrderInsGB: True:Ascending False:Descending]
procedure TFrm_JON01.LocNewSocketSend(lsSendText: string; bOrderInsGB: boolean =
  False);
var
  slRcvList: TStringList;
  // 전문 결과 처리 위해 사용 변수. 2009.01.09
  rv_str, ls_rxxml: string;
  ErrCode: integer;
begin
	SetDebugeWrite('JON01.LocNewSocketSend');
	try
    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, bOrderInsGB);

      if dm.SendSockAccept(lsSendText, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
					proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, bOrderInsGB);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.lst_BRListDblClick(Sender: TObject);
begin
	SetDebugeWrite('JON01.lst_BRListDblClick');
	//이미 선택돤 인덱스이기 때문에 갱신이 안되는 오류개선하기 위해서 사용 2018.09.11 KHS
	cboBranch.Tag := 20;
	cboBranch.ItemIndex := -1;
	cboBranch.Tag := 0;

	cboBranch.ItemIndex := StrToIntDef(searchBRlist[lst_BRList.ItemIndex], 0);
	LoadCustLevel;
	LoadPayMethod;
	lst_BRList.Visible := False;
  cxtCuTel.SetFocus;
end;

procedure TFrm_JON01.lst_BRListExit(Sender: TObject);
begin
  SetDebugeWrite('JON01.lst_BRListExit');
	lst_BRList.Visible := False;
end;

procedure TFrm_JON01.lst_BRListKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.lst_BRListKeyDown');
	if key = vk_Return then
	begin
		cboBranch.ItemIndex := StrToIntDef(searchBRlist[lst_BRList.ItemIndex], 0);
		lst_BRList.Visible := False;
    cxtCuTel.SetFocus;
	end else
  if Key = VK_UP then
  begin
    if lst_BRlist.Selected[0] then cxTSearchMainTel.SetFocus;
  end;
end;

// 수정일 경우,,  경유지 정보를 조회 한다.
procedure TFrm_JON01.proc_ViaInfo;
var
  ls_TxLoad, ls_TxQry, sQueryTemp : string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  ErrCode: integer;
begin
  SetDebugeWrite('JON01.proc_ViaInfo');
  try
    // 오더번호가 없으면 Skip.
    if cxtJoinNum.Text <> '' then
    begin
      ls_TxLoad := GTx_UnitXmlLoad('SEL01.XML');
      fGet_BlowFish_Query(GSQ_VIAINFO, sQueryTemp);
      ls_TxQry := Format(sQueryTemp, [cxtJoinNum.Text]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'VIA00001', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'QueryString', ls_TxQry, [rfReplaceAll]);

      Screen.Cursor := crHourGlass;
      slRcvList := TStringList.Create;
      try
        Proc_JobAfterProc(True, False);

        if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
        begin
          rv_str := slRcvList[0];
          if rv_str <> '' then
          begin
            ls_rxxml := rv_str;
            Application.ProcessMessages;
            proc_recieve(ls_rxxml);

            tmFormClose.Tag := 99; // 화면 닫기 설정값.
          end;
        end;
      finally
        FreeAndNil(slRcvList);
        Screen.Cursor := crDefault;
        Proc_JobAfterProc(False, False);
      end;
    end;
  Except
    on e: exception do
    begin
      Log('proc_ViaInfo Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_ViaInfo Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.AppendPostDesc;
  function _GetPayStr(APay: Integer): string;
  begin
    if APay mod 1000 = 0 then
      Result := IntToStr(APay div 1000) + 'K'
    else
      Result := FormatFloat('#,##0', APay);
  end;

  procedure _AddPostDesc(AMemo: TcxMemo; APay, APostPay: Integer; APostTime: string);
  var
    OrgStr, AddStr: string;
  begin
    OrgStr := AMemo.Lines.Text;
		// 기사지급수수료0원 후불은 후불시점을 적요에 가져올필요없음
		if APostPay = 0 then
		begin
			AddStr := '후불]자동입금없음';
			AddSpop('후불',98);
		end else
		begin
      if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

			AddStr := '';
			if APay > APostPay then
			begin
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
					AddStr := '현금' + _GetPayStr(APay) + ']'
				else
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
					AddStr := '현금' + _GetPayStr(APay) + ']'
				else
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
					AddStr := '현금' + _GetPayStr(APay) + ']'
				else
					AddStr := '현금' + _GetPayStr(APay - APostPay) + ']';
			end;

			AddStr := AddStr + '후불' + _GetPayStr(APostPay) + ']';
			AddStr := AddStr + APostTime;
			if (cbbPostTime.ItemIndex = 0) or (cbbPostTime.ItemIndex = 1) or (cbbPostTime.ItemIndex = 3)then
			begin
				AddSpop('후불',98);
			end else
      if (cbbPostTime.ItemIndex = 2) then
			begin
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
					AddSpop('♥]',99)
				else
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
					AddSpop('♥♥]',99)
				else
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
					AddSpop('♥♥♥]',99)
				else
					AddSpop('즉후',99);
			end;
		end;
    AMemo.Lines.Text := '{' + AddStr + '}' + OrgStr;
  end;
begin
  try
    RemovePostDesc;

    if IsPayMethodPost then
    begin
      if PAY_METHOD_BUSAN_YN then
        _AddPostDesc(meoBigo, curRate.Value, StrToIntDef(StringReplace(cxLblWkJAmt.Caption, ',', '', [rfReplaceAll]), 0), cbbPostTime.Text)
      else
        _AddPostDesc(meoBigo, curRate.Value, edtPostPay.Value, cbbPostTime.Text);
    end;

  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.RemovePostDesc;
var
  OrgStr, AddStr: string;
  PosS, PosE: Integer;
begin
//-  SetDebugeWrite('JON01.RemovePostDesc');
	OrgStr := meoBigo.Lines.Text;

  PosS := Pos('{', OrgStr);
  PosE := Pos('}', OrgStr);

  if (PosS = 0) or (PosE = 0) or (PosE < PosS) then
  begin
    Exit;
  end;

  AddStr := Copy(OrgStr, 1, PosS-1);
  AddStr := AddStr + Copy(OrgStr, PosE+1, Length(OrgStr));

  meoBigo.Lines.Text := AddStr;
end;

//--------------------------------------------------------------------------------------------------
//  사용자 추가 지역 저장
//--------------------------------------------------------------------------------------------------
procedure TFrm_JON01.proc_Save_Area(iGubun: Integer);
var
  st_List, slTmp: TStringList;
  sTemp, sTemp1, sQuery, sDate, sPOI: string;
  i : Integer;
begin
	SetDebugeWrite('JON01.proc_Save_Area');
	st_List := TStringList.Create;
  try
    st_List.Clear;
    if iGubun = 0 then
    begin // 출발지 저장.
      sTemp := StringReplace(cxtStartAreaDetail.Text, ' ', '', [rfReplaceAll]);  // 공백제거후 저장  20130514 LYB

      if pos('#', sTemp) > 0 then
        sTemp := copy(sTemp, pos('#', sTemp) + 1, length(sTemp) - pos('#', sTemp));
      if pos(']', sTemp) > 0 then
        sTemp := copy(sTemp, pos(']', sTemp) + 1, length(sTemp) - pos(']', sTemp));
      if pos('$', sTemp) > 0 then
        sTemp := copy(sTemp, pos('$', sTemp) + 1, length(sTemp) - pos('$', sTemp));
      if pos('-', sTemp) > 0 then
        sTemp := copy(sTemp, pos('-', sTemp) + 1, length(sTemp) - pos('-', sTemp));

      lcsSta4 := '';
      sTemp1 := lcsSta1 + '|' + lcsSta2 + '|' + lcsSta3 + '|' + sTemp + '|' + lcsSta4 + '|' + cxtStartXval.Text + '|' + cxtStartYval.Text;
    end else
    if iGubun = 1 then
		begin // 도착지 저장.
      sTemp := StringReplace(cxtEndAreaDetail.Caption, ' ', '', [rfReplaceAll]);  // 공백제거후 저장  20130514 LYB

      if pos('#', sTemp) > 0 then
        sTemp := copy(sTemp, pos('#', sTemp) + 1, length(sTemp) - pos('#', sTemp));
      if pos(']', sTemp) > 0 then
        sTemp := copy(sTemp, pos(']', sTemp) + 1, length(sTemp) - pos(']', sTemp));
      if pos('$', sTemp) > 0 then
				sTemp := copy(sTemp, pos('$', sTemp) + 1, length(sTemp) - pos('$', sTemp));
      if pos('-', sTemp) > 0 then
				sTemp := copy(sTemp, pos('-', sTemp) + 1, length(sTemp) - pos('-', sTemp));

      lcsEnd4 := '';
			sTemp1 := lcsEnd1 + '|' + lcsEnd2 + '|' + lcsEnd3 + '|' + sTemp + '|' + lcsEnd4 + '|' + cxtEndXval.Text + '|' + cxtEndYval.Text;
		end;

		if FileExists(DBDIRECTORY + 'LOCAL_MAP_NEW.DAT') then
			st_List.LoadFromFile(DBDIRECTORY + 'LOCAL_MAP_NEW.DAT');

		sPOI := sTemp1 + '|' + '999';    // 20130508  LYB 수정  로컬 저장 후 mySQL변환시 저장 안되는 문제 해결

    if st_List.IndexOf(sPOI) < 0 then
    begin
      st_List.Add(sPOI);
      // 사용자 직접입력 정보 저장. CDS.
      if iGubun = 0 then
      begin // 출발지 저장.
        GT_MAPLocal.slCity.Add(lcsSta1); // 시도
        GT_MAPLocal.slWard.Add(lcsSta2); // 시군구
        GT_MAPLocal.slStre.Add(lcsSta3); // 읍면동
        GT_MAPLocal.slSSub.Add(sTemp); // 세부지명
        GT_MAPLocal.slSPOI.Add(''); // 인근POI
        GT_MAPLocal.slMapX.Add(cxtStartXval.Text); // X 좌표
        GT_MAPLocal.slMapY.Add(cxtStartYval.Text); // Y 좌표
      end else
      if iGubun = 1 then
      begin // 도착지 저장.
        GT_MAPLocal.slCity.Add(lcsEnd1); // 시도
        GT_MAPLocal.slWard.Add(lcsEnd2); // 시군구
        GT_MAPLocal.slStre.Add(lcsEnd3); // 읍면동
        GT_MAPLocal.slSSub.Add(sTemp); // 세부지명
        GT_MAPLocal.slSPOI.Add(''); // 인근POI
        GT_MAPLocal.slMapX.Add(cxtEndXval.Text); // X 좌표
        GT_MAPLocal.slMapY.Add(cxtEndYval.Text); // Y 좌표
      end;
    end else
    begin
      st_list.Delete(st_List.IndexOf(sPOI));
      st_List.Add(sPOI);
    end;
		st_List.SaveToFile(DBDIRECTORY + 'LOCAL_MAP_NEW.DAT');
	finally
		FreeAndNil(st_List);
	end;
	if iGubun = 0 then
		GMessagebox('출발지 세부지역정보가 저장 되었습니다.', CDMSI)
  else
    GMessagebox('도착지 세부지역정보가 저장 되었습니다.', CDMSI);
end;

// 일반전화번호 인입시 전화번호로 POI검색 후 정보 표시
procedure TFrm_JON01.Proc_GetTelPOISearch( vTelNo : String );
var
  sHttp : String;
  sYesNo, sViewCnt, sCenterLat, sCenterLon, sFixParam, sOrFixParam : String;

  JON01WNTh : TJON01WNThread;
begin
  SetDebugeWrite('JON01.Proc_GetTelPOISearch');

  sTelRanDom := 'abcd' + IntToStr(RandomRange(10000, 20000));
  SetDebugeWrite('WiseNutTel A : ' + Trim(vTelNo) + ' --- ' + sTelRanDom);

  if GS_SEARCH_POISVR_SPOIUSE then sYesNo := '0' else sYesNo := '1';
  if GS_PRJ_AREA = 'S' then sViewCnt := '40' else sViewCnt := '100';

  sFixParam := '&region=' + UrlEncode(UTF8Encode(GS_SEARCH_POI_ADDR)) + '&recRegion=' + UrlEncode(UTF8Encode(GS_SEARCH_POI_SCH));
  sOrFixParam := '&region=' + GS_SEARCH_POI_ADDR + '&recRegion=' + GS_SEARCH_POI_SCH;

  sCenterLat := Area_CenterLat;
  sCenterLon := Area_CenterLon;

  try
    sHttp := 'http://' + GS_PoiServerIP + ':8080/jway/search_crypto.jsp?query='+ UrlEncode(UTF8Encode(trim(vTelNo))) +'&lat=' + Frm_JON30.SetWGS84(sCenterLat) + '&lon=' + Frm_JON30.SetWGS84(sCenterLon) + '&startCount=0&viewCount=' + sViewCnt + '&session=' + sTelRanDom + '&ignoreSPOI=' + sYesNo + sFixParam;

    if GS_SEARCH_NO_RI then
    begin
      sHttp := sHttp + '&ignoreAddressDetail=1';
    end else
    begin
      sHttp := sHttp + '&ignoreAddressDetail=0';
    end;

    sHttp := sHttp + '&base64=S';

    try
      JON01WNTh := TJON01WNThread.Create(Self.Tag, 6, sHttp, vTelNo, sTelRanDom);
      JON01WNTh.FreeOnTerminate := False;
    except

    end;
  except
    on E: Exception do
    begin
      Log('Proc_GetTelPOISearch Error:'+E.Message + E.UnitName + E.ClassName, LOGDATAPATHFILE);
    end;
  end;
end;

procedure TFrm_JON01.Proc_GridCustChoice(iRcIdx: Integer);
begin
  SetDebugeWrite('JON01.Proc_GridCustChoice');
  try
    cxtCuTel.Text := cxCustView.DataController.Values[iRcIdx, 1]; // 고객전화번호
    cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
    gsCuTelHint := cxtCuTel.Text;
    cxtCallTelNum.Text := cxtCuTel.Text;
    locsCuTel  := cxtCuTel.Text;
    locsCuTel2 := '';

    SearchCuTel(False);
    cxGBSearch.Visible := False;
  Except
    on e: exception do
    begin
      Log('Proc_GridCustChoice Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_GridCustChoice Error :' + E.Message);
    end;
  end;
end;

function TFrm_JON01.Func_KeyNumberList_Search: Boolean;
var
	i, iOldIdx: integer;
	bRlt: boolean;
	sKey: string;
begin
	SetDebugeWrite('JON01.Func_KeyNumberList_Search');
  try
		bRlt := False;
    lst_BRList.Items.Clear;
    searchBRlist.Clear;
    sKey := RemoveAll(cxTSearchMainTel.Text, '-'); // 조회할 지사명 읽기.

    iOldIdx := cboBranch.ItemIndex;
    cboBranch.Tag := 20;
    lst_BRList.Items.BeginUpdate;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    for i := 0 to cboBranch.Properties.Items.Count - 1 do
    begin
      if (Pos(sKey, cboBranch.Properties.Items.Strings[i]) > 0) then
      begin // 지사명  찾기..
        lst_BRList.Items.Add(cboBranch.Properties.Items.Strings[i]);
				searchBRlist.Add(inttostr(i));
				bRlt := True;
			end;
    end;
    lst_BRList.Items.EndUpdate;
		cboBranch.ItemIndex := iOldIdx;
		if searchBRlist.count > 0 then
			cboBranch.ItemIndex := StrToIntDef(searchBRlist[0], 0);

		lst_BRList.Visible := True;
    if lst_BRList.Items.Count > 30 then
      lst_BRList.Height := 500
    else
      lst_BRList.Height := lst_BRList.Items.Count * 18;
    cboBranch.Tag := 0;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    Result := bRlt;
  Except
    on e: exception do
    begin
      Log('Func_KeyNumberList_Search Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Func_KeyNumberList_Search Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.AutoSelectMouseEnter(Sender: TObject);
begin
  TcxCustomTextEdit(Sender).Properties.AutoSelect := False;
end;

procedure TFrm_JON01.AutoSelectMouseMouseLeave(Sender: TObject);
begin
	TcxCustomTextEdit(Sender).Properties.AutoSelect := True;
end;

procedure TFrm_JON01.Proc_Driver_Charge;
var
  slAreaList, slResult: TStringList;
  strSearch, strData: string;
  I: Integer;
  tmBsArea, tmBsNum: string;  // 2010.12.13 =검색-> 이상값 겁색
  tmLpArea, tmLpNum: string;
  tmCost: string;
begin
	SetDebugeWrite('JON01.Proc_Driver_Charge');
  try
    slAreaList := TStringList.Create;
    slResult := TStringList.Create;
    tmCost:='';
    try
      GetTextSeperationEx2(' ', lblStartAreaName.Text, slAreaList);
      if slAreaList.count > 1 then
      begin
        if Length(slAreaList[1]) > 0 then
        begin
          // 기사 수수료 검색어 구성..
          strSearch := slAreaList[0] + slAreaList[1] + IntToStr(curRate.Value);
          tmBsArea := slAreaList[0]+slAreaList[1];
          tmBsNum := IntToStr(curRate.Value);

          // 2010.12.13 ( = 조회 -> <= 조회)
          // 기사 수수료 검색
          //Area_Charge_List.Sorted := True;
          try
            for I := 0 to Area_Charge_List.Count - 1 do
            begin
              GetTextSeperationEx('│', Area_Charge_List.Strings[I], slResult);
              strData := slResult[0];
              tmLpArea:=str2string(slResult[0]);
              tmLpNum:=IntToStr(str2integer(slResult[0]));
              if (tmBsArea=tmLpArea) and (StrToIntDef(tmBsNum,0)>=StrToIntDef(tmLpNum,0)) then
                tmCost:=slResult[1];
            end;

            // 2011.01.19 (기사수수료율 추가 100이하시 currate 에서 해당율 승산후 100을 제산
            if (strtointdef(tmCost,0)<=100) and (strtointdef(tmCost,0)>0) and (Trim(tmCost)<>'') then
            begin
              tmCost:= IntToStr(Round(strtointdef(tmBsNum,0)*strtointdef(tmCost,0)/100));
              cxDriverCharge.text:= tmCost;
            end else
            if (strtointdef(tmCost,0)>100) and (Trim(tmCost)<>'') then
            begin
              cxDriverCharge.Text:= tmCost;
            end else
            begin
              cxDriverCharge.Text:= '';
            end;
          finally
            FreeAndNil(slResult);
          end;
        end else
        begin
          cxDriverCharge.Text := '';
        end;
      end else begin
        cxDriverCharge.Text := '';
      end;
    finally
      FreeAndNil(slAreaList);
    end;
  Except
    on e: exception do
    begin
			Log('Proc_Driver_Charge Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'Proc_Driver_Charge Error :' + E.Message);
    end;
  end;
end;

// 고객 기본정보를 저장 한다.
procedure TFrm_JON01.Proc_CustBasicSave;
var
  ls_TxLoad: string;
  iFidx: Integer;
  slRcvList: TStringList;
  rv_str, ls_rxxml, sContent: string;
	ErrCode: integer;
begin
  SetDebugeWrite('JON01.Proc_CustBasicSave');
	try
    if lcsCu_seq = '' then
    begin
      GMessagebox('고객 일련번호가 없습니다. 고객정보를 재조회 한 다음 [수정] 하세요!', CDMSI);
      Exit;
    end;

    if cxtCallTelNum.Text = '' then
    begin
      GMessagebox('고객 전화번호가 없습니다. 고객정보를 재조회 한 다음 [수정] 하세요!', CDMSI);
      Exit;
    end;

    if cxtCallTelNum.Text <> cxtCuTel.Text then
    begin
      GMessagebox('수정 할 고객 전화번호가 조회한 전화번호와 다릅니다. 고객정보를 재조회 한 다음 [수정] 하세요!', CDMSI);
      Exit;
    end;

    iFidx := Self.Tag; // 폼의 index를 저장.
    locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
    locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

    if cxtCallTelNum.Text = '' then
    begin
      cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
      cxtCallTelNum.Text := cxtCuTel.Text;
    end;

    //////////////////////////////////////////////////////////////////////////////////
    //  고객정보 수정 전문
    //////////////////////////////////////////////////////////////////////////////////
    ls_TxLoad := GTx_UnitXmlLoad('C032N2.XML');

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'CUSV0032');

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfSlipString', cxtJoinNum.Text);
    if ChkCuSmsNo.Checked then // SMS수신거부
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', 'n')
		else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', 'y');

    if (0 >= Pos('*', cxtCuTel.Text)) then
      //[수정시에]고객전화번호 마킹처리된것 일때,, [locsCuTel, locsCuTel2]
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(cxtCallTelNum.Text))
    else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(locsCuTel));

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuCCMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfMemoString', En_Coding(sContent));

		sContent := '';
		sContent := ReplaceAll(Trim(edt_CardMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuMemoString', En_Coding(sContent));

		// 고객구분-0(일반), 1(업소), 3(법인)
    if CBCuGb.ItemIndex = 2 then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '3')
    else
    if CBCuGb.ItemIndex = 1 then
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '1')
    else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '0');

    // 고객등급 추가 : 0.불량:빨강, 1.주의:주황, 2.일반:하늘, 3.우수:동색, 4.최우수:은색, 5.VIP:황금색
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'LevelCdString', GetCustLevelSeq);
    // 법인일 경우 세팅..
    if (CBCuGb.ItemIndex = 2) and (cxtCuBubin.Hint <> '') then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', En_Coding(cxtCuBubin.Hint));
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', '');
    end;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuSeqString', lcsCu_seq);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustNameString', En_Coding(edtCuName.Text));

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuWorMemo.Text), #$D#$A, '|');
		sContent := ReplaceAll(sContent, #13#10, '|');
		sContent := ReplaceAll(sContent, #10#13, '|');
		sContent := StringReplace(sContent, '│', '|', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarInfoString', En_Coding(sContent));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'BrTelYNString', CustBrTelYN);

    Screen.Cursor := crHourGlass;
		slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, True);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, True);
    end;
  except
    on e: Exception do
    begin
			ls_TxLoad := 'JON01[Proc_CustBasicSave]:' + e.message;
			Log(ls_TxLoad, LOGDATADIRECTORY + 'Accept_Err.log');

      // 에러 정보를 서버에 저장한다.
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01.Proc_CustSMSSave;
var
  ls_TxLoad: string;
  iFidx: Integer;
  slRcvList: TStringList;
  rv_str, ls_rxxml, sContent: string;
	ErrCode: integer;
begin
  SetDebugeWrite('JON01.Proc_CustSMSSave');
	try
    if cxtCallTelNum.Text = '' then
    begin
      GMessagebox('고객 전화번호가 없습니다. 고객정보를 재조회 한 다음 [SMS거부] 하세요!', CDMSI);
      Exit;
    end;

    if cxtCallTelNum.Text <> cxtCuTel.Text then
    begin
      GMessagebox('수정 할 고객 전화번호가 조회한 전화번호와 다릅니다. 고객정보를 재조회 한 다음 [SMS거부] 하세요!', CDMSI);
      Exit;
    end;

    iFidx := Self.Tag; // 폼의 index를 저장.
    locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
    locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

    if cxtCallTelNum.Text = '' then
    begin
      cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
      cxtCallTelNum.Text := cxtCuTel.Text;
    end;

    //////////////////////////////////////////////////////////////////////////////////
    //  SMS거부 수정 전문
    //////////////////////////////////////////////////////////////////////////////////
    ls_TxLoad := GTx_UnitXmlLoad('JON03020.XML');

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'JON03020');

    if ChkCuSmsNo.Checked then // SMS수신거부
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', 'n')
		else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', 'y');

    if (0 >= Pos('*', cxtCuTel.Text)) then
      //[수정시에]고객전화번호 마킹처리된것 일때,, [locsCuTel, locsCuTel2]
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(cxtCallTelNum.Text))
    else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(locsCuTel));

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuSeqString', lcsCu_seq);

    Screen.Cursor := crHourGlass;
		slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, True);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, True);
    end;
  except
    on e: Exception do
    begin
      ls_TxLoad := 'JON01[Proc_CustBasicSave]:' + e.message;
			Log(ls_TxLoad, LOGDATADIRECTORY + 'Accept_Err.log');

      // 에러 정보를 서버에 저장한다.
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01.cxCurRevisionRateEnter(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxCurRevisionRateEnter');
  lblCurRevisionRate.Visible := False;
end;

procedure TFrm_JON01.cxCurRevisionRateExit(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxCurRevisionRateExit');
  lblCurRevisionRate.Visible := (cxCurRevisionRate.Text = ''); // 보정금액 입력 잔상.
	if BtnRaLock.Hint <> 'F4)잠금' then
    curRate.Value := OrgRate + cxCurRevisionRate.Value;
end;

procedure TFrm_JON01.cxCurRevisionRateFocusChanged(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxCurRevisionRateFocusChanged');
  lblCurRevisionRate.Visible := ( Not cxCurRevisionRate.Focused ) And (cxCurRevisionRate.Value = 0);
end;

procedure TFrm_JON01.cxCurRevisionRateKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('JON01.cxCurRevisionRateKeyDown');
  try
    if Ord(Key) = VK_RETURN then
    begin
      if cxCurRevisionRate.Value < 1000 then
      begin
        cxCurRevisionRate.Value := cxCurRevisionRate.Value * 1000;
      end;
			if meoBigo.Visible = True then
        meoBigo.SetFocus
      else
				meoBigo2.SetFocus;
    end;

    if Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        Vk_F7: //if rb_Modify.Enabled then rb_Modify.OnClick(rb_Modify);              // 수정
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave);
        Vk_F8: //whbtn_Cancel.OnClick(whbtn_Cancel);                                   // 종료
				begin                                // 종료
					SetDebugeWrite('JON01.cxCurRevisionRateKeyDown->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit);
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
					if (btnCmdWait.Enabled) and (btnCmdWait.Visible) then
            btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
					if (btnCmdQuestion.Enabled) and (btnCmdQuestion.Visible) then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
        VK_ESCAPE: // ESC 키
					begin
            if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
            begin
              if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
                and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
                and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
							begin                                // 종료
								SetDebugeWrite('JON01.cxCurRevisionRateKeyDown->VK_ESCAPE');
								btnCmdExit.OnClick(btnCmdExit);
							end;
						end;
          end;
      end;
    end;
  Except
    on e: exception do
    begin
			Log('cxCurRevisionRateKeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cxCurRevisionRateKeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01.cxCurRevisionRatePropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('JON01.cxCurRevisionRatePropertiesChange');
    lblCurRevisionRate.Visible := (cxCurRevisionRate.Text = ''); // 기사송금 입력 잔상.
end;

function TFrm_JON01.fGetDiffDay( sEndDate : String ) : String;
Var TimeGap : Int64;
    sDate, sStat : String;
begin
  SetDebugeWrite('JON01.fGetDiffDay');
  try
    TimeGap := GetTimeGap(FormatDateTime('YYYYMMDDHHNN00', Now), sEndDate);

    if Trunc(TimeGap / 86400) <> 0 then
      sDate := Format('%d일 %d시간 %d분',[
               Trunc(TimeGap / 86400),
               Trunc(( TimeGap mod 86400 ) / 3600),
               Trunc((( TimeGap mod 86400 ) mod 3600) / 60)
       ])
    else
    begin
      if Trunc(( TimeGap mod 86400 ) / 3600) <> 0 then
        sDate := Format('%d시간 %d분',[
                 Trunc(( TimeGap mod 86400 ) / 3600),
                 Trunc((( TimeGap mod 86400 ) mod 3600) / 60)
         ])
      else
        sDate := Format('%d분',[
                 Trunc((( TimeGap mod 86400 ) mod 3600) / 60)
         ])
    end;

    if BtnResJ.Down then
    begin
      sStat := '접수';
      cxlblResvG.Caption := '접수일시';
    end else
    if BtnResD.Down then
    begin
      sStat := '대기';
      cxlblResvG.Caption := '대기일시';
    end;

    cxlblState.Caption := Format('[%s] 후에 [%s] 상태로 예약.', [sDate, sStat]);

    Result := '';
  Except
    Result := '';
  end;
end;

function TFrm_JON01.GetTimeGap(StrStartDate, StrEndDate: string): Int64;
    function StrDateTime2SystemTime(StrDateTime : string) : TSystemTime;
    var SystemTime : TSystemTime;
    begin
        ZeroMemory(@SystemTime, sizeof(SystemTime));
        SystemTime.wYear := StrToInt(Copy(StrDateTime, 1, 4));
        SystemTime.wMonth := StrToInt(Copy(StrDateTime, 5, 2));
        SystemTime.wDay := StrToInt(Copy(StrDateTime, 7, 2));
        SystemTime.wHour := StrToInt(Copy(StrDateTime, 9, 2));
        SystemTime.wMinute := StrToInt(Copy(StrDateTime, 11, 2));
        SystemTime.wSecond := StrToInt(Copy(StrDateTime, 13, 2));
        SystemTime.wMilliseconds := 0;
        Result := SystemTime;
    end;
var StartSysTime : TSystemTime;
    EndSysTime : TSystemTime;

    TimeGap : Int64;
begin
	try
		SetDebugeWrite('JON01.GetTimeGap');
		if ( Trim(StrStartDate) <> '' ) And ( Trim(StrEndDate) <> '' ) then
		begin
      StartSysTime := StrDateTime2SystemTime(StrStartDate);
      EndSysTime := StrDateTime2SystemTime(StrEndDate);

      TimeGap := DateTimeToUnix(SystemTimeToDateTime(EndSysTime)) -
                 DateTimeToUnix(SystemTimeToDateTime(StartSysTime));

			Result := TimeGap;
		end else
    begin
      Result := 0;
    end;
  except on E: Exception do
    Assert(False, Format('GetTimeGap Error - %s - %s :', [Trim(StrStartDate), Trim(StrEndDate)]) + E.Message);
  end;
end;

// 조회 한 오더 정보를 수정 한다. : DB Update~~
procedure TFrm_JON01.Proc_OrderUpdateSave(AStatus: string);
const
  lc_ViaInfoString =
		'<Via Area1="Area1String" Area2="Area2String" Area3="Area3String" Area4="Area4String" Area5="Area5String" '+
    ' MapX="MapXString" MapY="MapYString" AreaOpt="AreaVOPTString" AreaDebug="AreaVDebugString" AreaUp="AreaUPV" AreaSetType="AreaSetTypeString" AreaKeyword="AreaKeywordString" AreaId="AreaIdString" />';
var
  ls_TxLoad: string;
	ls_ViaInto, sCbCode, sCbNm, sCbDp, sBrNo, sHdNo, sKey, sTemp, sErrMsg, sMsg : string;
  lRow, iRow, iFidx, i : Integer;
	slRcvList: TStringList;
  rv_str, ls_rxxml, StrValue: string;
  ErrCode, UserMile: integer;
	iX, iY, sContent : string;
  chkFlag : Boolean;
	sTmpLon, sTmpLat : string;
	dTmpLon, dTmpLat : Double;
	bLonLat : Boolean;
	iBrCharge, iBrSumCharge : Double;
	sTmp : String;
begin
	SetDebugeWrite('JON01.Proc_OrderUpdateSave');

	if func_ecukrCheck then exit;
  if StrToIntDef(edtWkFAge.Text, 0) > StrToIntDef(edtWkTAge.Text, 0) then
  begin
    ShowMessage('제한나이 설정이 잘못되었습니다.');
    edtWkFAge.SetFocus;
    Exit;
  end;

	if (IsPayMethodPost) and ((cxtJoinNum.Hint = '0') or (cxtJoinNum.Hint = '1') or
														(cxtJoinNum.Hint = '3') or (cxtJoinNum.Hint = 'R')) then // 후불-접수, 강제, 배차, 예약 오더만 후불체크
	begin
		sHdNo := Proc_HDNOSearch;
		sBrNo := Proc_BRNOSearch;
		//--------------------------------------------------------------------------------------------------
		// 접수시 지사캐쉬 체크(캐쉬가 없어도 후불로 접수할수 있음)
		// 접수시 지사캐쉬 -50만원까지만 가능    20150424  LYB
//    if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.ShareNo = 'G91') or (GT_USERIF.ShareNo = 'G58') or (GT_USERIF.BR = 'B100') ) then
		// 접수시 지사캐쉬 본사별 설정 금액까지만 가능    20160616 KHS
		//--------------------------------------------------------------------------------------------------
		sTmp := '';

		if (GS_PRJ_AREA <> 'S') and (sHdNo = 'A1747') and (sBrNo = 'S954') then
		begin
			if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), 0, iBrCharge, iBrSumCharge) then
			begin
				GMessagebox('지사캐쉬(0원미만)가 부족하여 후불로 수정할 수 없습니다.', CDMSI);
				Exit;
			end;
		end
		else
		if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.ShareNo = 'G91') or (GT_USERIF.ShareNo = 'G58') or (GT_USERIF.BR = 'B100') ) then
		begin
			if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.HD = 'A1891') or (GT_USERIF.HD = 'A1897') or (GT_USERIF.HD = 'A1756') or
																	 (GT_USERIF.HD = 'A1763') or (GT_USERIF.HD = 'A1768') or (GT_USERIF.HD = 'A1757') or
																	 (GT_USERIF.HD = 'A1844') or (GT_USERIF.HD = 'A1752') or (GT_USERIF.HD = 'A1853') or
																	 (GT_USERIF.HD = 'A1771') or (GT_USERIF.HD = 'A1822') or (GT_USERIF.HD = 'A1753') or
																	 (GT_USERIF.HD = 'A1866') or (GT_USERIF.HD = 'A2014') or (GT_USERIF.HD = 'A2010') or
																	 (GT_USERIF.HD = 'A1769') or (GT_USERIF.HD = 'A1772') or (GT_USERIF.HD = 'A1905') or
																	 (GT_USERIF.HD = 'A1946') or (GT_USERIF.HD = 'A1764') or (GT_USERIF.HD = 'A1879') or
																	 (GT_USERIF.HD = 'A1948') or (GT_USERIF.BR = 'B100') ) then
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), -50000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-50,000원까지)가 부족하여 후불로 수정할 수 없습니다.', CDMSI);
					Exit;
				end;
			end else
			if (GS_PRJ_AREA <> 'S') and (GT_USERIF.HD = 'A1745') then
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), -100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-100,000원까지)가 부족하여 후불로 수정할 수 없습니다.', CDMSI);
					Exit;
				end;
			end	else
			if (GS_PRJ_AREA <> 'S') and (sHdNo = 'A2195') and (sBrNo = 'U589') then       //20170323 이명재대리요청
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), 100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬가 100,000원 이하일 경우 후불로 수정할 수 없습니다.', CDMSI);
					Exit;
				end;
			end else
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), -100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-100,000원까지)가 부족하여 후불로 수정할 수 없습니다.', CDMSI);
					Exit;
				end;
			end;
		end else
		begin
			if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), 0, iBrCharge, iBrSumCharge) then
			begin
{				sTmp := '해당지사의 캐시가 [%s]원으로 후불접수가 불가합니다' + #13#10 + #13#10
							+ '* 후불접수예정금액 : %s원' + #13#10
							+ '* 지사보유금액 : %s원' + #13#10
							+ '* 현재 후불접수합계 : %s원' + #13#10
				;
				GMessagebox(Format(sTmp, [StrToMoney(FloatToStr(iBrCharge))
															 ,  StrToMoney(FloatToStr(edtPostPay.Value))
															 ,  StrToMoney(FloatToStr(iBrCharge))
															 ,  StrToMoney(FloatToStr(iBrSumCharge))]), CDMSI);                            
}				sTmp := '해당지사의 캐쉬가 [%s]원으로 후불접수가 불가합니다';
				GMessagebox(Format(sTmp, [StrToMoney(FloatToStr(iBrCharge))]), CDMSI);
				Exit;
			end;
    end;
  end;

	if GS_SEARCH_DEST_NOPOI_FALSE then
	begin
		if (cxtJoinNum.Hint = '0') then
		begin
			if Trim(meoEndArea.Text) = '' then
			begin
				GMessagebox('[접수] 도착지명이 없으면 수정이 불가능합니다.' + #13#10
									+ '도착지를 입력하세요.' + #13#10
									+ '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSI);
				meoEndArea.SetFocus;
//        meoEndArea.SelStart := Length(meoEndArea.Text);
				Exit;
			end;
		end;
		if (cxtJoinNum.Hint = '5') then
		begin
			if Trim(meoEndArea.Text) = '' then
			begin
				GMessagebox('[대기] 도착지명이 없으면 수정이 불가능합니다.' + #13#10
									+ '도착지를 입력하세요.' + #13#10
									+ '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSI);
				meoEndArea.SetFocus;
//        meoEndArea.SelStart := Length(meoEndArea.Text);
				Exit;
			end;
		end;
	end;
	if (cxtJoinNum.Hint = 'B') then
	begin
		GMessagebox('[배차중] 상태이므로 수정이 불가능합니다.', CDMSI);
		Exit;
	end;
	if (cxtJoinNum.Hint = 'C') then
	begin
		GMessagebox('[근배] 상태이므로 수정이 불가능합니다.', CDMSI);
		Exit;
	end;

  iFidx := Self.Tag; // 폼의 index를 저장.
  locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
  locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
	locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

  if Trim(LocKNum) = '' then
  begin
		GMessagebox('대표번호가 없으므로 수정이 불가능합니다.', CDMSI);
		Exit;
  end;

  Proc_BtnEnabled(False); // 버튼 활성/비활성 처리.

	try
		ls_TxLoad := GTx_UnitXmlLoad('JON03081.XML');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'MODI0001');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfSlipString', En_Coding(cxtJoinNum.Text)); // 접수번호
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID)); // 등록자 ID
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfStatusString', cxtJoinNum.Hint); // 오더 상태값을 저장한다.
		if (Pos('앱접수', Self.Caption) > 0) and (bAppOrderOpen) then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChangeStatusString', '6') // 변경될 상태정보(대기 => 해제)
		else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChangeStatusString', AStatus); // 변경될 상태정보
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostTimeString', PostTime); // 입금시간코드
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostChargeString', IntToStr(edtPostPay.Value)); // 자동입금금액
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkChargeString', ReplaceAll(cxLblWkJAmt.Caption, ',', '')); // 기사지원금

		if cxtCuBubin.Hint <> '' then
    begin // 법인코드 체크.
      sCbCode := cxtCuBubin.Hint;
      iRow := GT_BUBIN_INFO.cbcode.IndexOf(sCbCode + ',' + locBrNo);
      if iRow >= 0 then
      begin
				sCbNm := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc.Strings[iRow]), 121, 16));  // 단축법인명
				sCbDp := Trim(Copy(AnsiString(GT_BUBIN_INFO.cbEtc.Strings[iRow]), 137, 16));  // 단축법인부서명

        try
          if Trim(sCBNm) = '' then
          begin
            Assert(False, En_Coding('수정)법인코드검색오류1 - 검색명 : ' + sCbCode + ',' + locBrNo + ' 검색어 : ' + AnsiString(GT_BUBIN_INFO.cbEtc.Strings[iRow])));
          end;
        except
          on e: Exception do Assert(False, E.Message);
        end;
      end else
      begin
        sCbNm := '';
        sCbDp := '';

        Assert(False, En_Coding('수정)법인코드검색오류2 - 검색명 : ' + sCbCode + ',' + locBrNo + ' 검색갯수 : ' + IntToStr(GT_BUBIN_INFO.cbcode.Count)));
      end;
    end else
    begin
      sCbCode := '';
      sCbNm := '';
      sCbDp := '';
    end;

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallBellStatusString', gsUpdateCallBellStatus);   //콜벨오더 상태
//		gsCuCallBellID, gsOrderCallBellID
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallBellMemIdString', gsUpdateCallBellID);   //콜벨영업사원 ID

		// 법인일 경우 세팅..
    if (CbCuGb.ItemIndex = 2) and (cxtCuBubin.Hint <> '') then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', En_Coding(sCbCode));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BNameString', En_Coding(sCbNm));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BName2String', En_Coding(sCbDp));
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BNameString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BName2String', '');
    end;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuSeqString', En_Coding(lcsCu_seq)); // 고객일련번호
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ModeString', '');
    // 미사용.
    if pos('*', cxtCuTel.Text) > 0 then
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(locsCuTel))
    else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', ReplaceAll(En_Coding(cxtCuTel.Text), '-', ''));
    if pos('*', cxtCuTel2.Text) > 0 then
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTel2String', En_Coding(locsCuTel2))
    else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTel2String', ReplaceAll(En_Coding(cxtCuTel2.Text), '-', ''));

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustNameString', En_Coding(edtCuName.Text));

		// --------------------------------------------------------------------------------------------
		// 2018.10.16 추가(차종타입 1종/2종)
		if cb_CarType.ItemIndex = 1 then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarTypeString', En_Coding('2')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarTypeString', En_Coding('1')) ;

		// --------------------------------------------------------------------------------------------
		// 2019.04.11 마일리지사용시 마일리지 적립
		if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) and (btnCashSave.Down = True) then			
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CashSaveYnString', En_Coding('y')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CashSaveYnString', En_Coding('n')) ;
			
		if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) and (btnMileSave.Down = True) then			
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'MlgSaveYnString', En_Coding('y')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'MlgSaveYnString', En_Coding('n')) ;

    if chkViewLevel.Checked then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViewLevelString', En_Coding('1'))
		else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViewLevelString', En_Coding('0'));

		if BtnWkAge.Down then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkFromAgeString', En_Coding(edtWkFAge.Text));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkToAgeString', En_Coding(edtWkTAge.Text));
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkFromAgeString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkToAgeString', '');
    end;

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuWorMemo.Text), #$D#$A, '|');
		sContent := ReplaceAll(sContent, #13#10, '|');
		sContent := ReplaceAll(sContent, #10#13, '|');
		sContent := StringReplace(sContent, '│', '|', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarInfoString', En_Coding(sContent));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PayGubunString', PayMethod);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'TranNoString', gUpdate_CardTranNo);
		//수정창에서 후불(카드) 취소 후 재 승인 시 요금변경 가능하게 하기위하여 원 거래번호 추가 2016.08.24 KHS

    // 기사 수수료 설정값 추가. 2010-11-03
		cxDriverCharge.Text := StringReplace(cxDriverCharge.Text,',','',[rfReplaceAll]);

		//탁송, 스틱 옵션
    if BtnOptionSexM.Down then StrValue := 'M' else
    if BtnOptionSexF.Down then StrValue := 'F'
                          else StrValue := 'A';

		if cb_04.Down then sStickCall := 'y' else sStickCall := 'n';
		if sTakHwak = 'y' then sLicType := GetLicTypeCode(cbbLicType.Text); //면허명에 대한 코드

		StrValue := StrValue + sStickCall + sTaksong + sTakHwak + sLicType;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'DriverOptionString', StrValue);
		//탁송, 스틱 옵션

    // KCP 카드결제 "결제일련번호" 추가.  2011-10-26
    StrValue  := cxDriverCharge.Text + '" CardPaySeq="' + locCardPaySeq;
		ls_TxLoad := StringReplace(ls_TxLoad,'DriverChargeString', StrValue, [rfReplaceAll]);
    // 법인인증 여부
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'URLReqString', '');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'MChargeString', '');
    // 모바일결제 : 미사용.
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfoString', En_Coding(meoBigo.Text));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChargeString', ReplaceAll(curRate.Text, ',', ''));

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuCCMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfMemoString', En_Coding(sContent));

    if cbTelView.ItemIndex = 0 then StrValue := '1' else
    if cbTelView.ItemIndex = 1 then StrValue := '2' else
    if cbTelView.ItemIndex = 2 then StrValue := 'c';
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuCallingOptionString', StrValue);

		// 상황실 체크박스
		StrValue := IfThen(BtnCenterMng.Down, 'y', 'n');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'BrTelYnString', StrValue);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuTelYnString', CustBrTelYN);

    // SMS 수신여부
    StrValue := IfThen(ChkCuSmsNo.Checked, 'n', 'y');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', StrValue);

    // 기사종류
		if BtnOptionSexM.Down then StrValue := 'M' else
    if BtnOptionSexF.Down then StrValue := 'F'
                          else StrValue := 'A';
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'OptionString', StrValue);

    // 예약시간
    if BtnResv.Tag = 1 then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPretimeString', formatdatetime('yyyymmdd', dtpResvDate.Date) + formatdatetime('hhmm', dtpResvTime.Time) + '00');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreRealTimeString', formatdatetime('yyyymmdd', dtpResvDateJ.Date) + formatdatetime('hhmm', dtpResvTimeJ.Time) + '00');
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPretimeString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreRealTimeString', '');
    end;

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'BrNoString', En_Coding(locBrNo));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'KeyNumberString', En_Coding(locKNum));
    // 고객구분-0(일반), 1(업소), 3(법인)
    if CbCuGb.ItemIndex = 2 then ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '3') else
    if CbCuGb.ItemIndex = 1 then ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '1')
                            else ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '0');

    // 고객등급 추가 : 0.불량:빨강, 1.주의:주황, 2.일반:하늘, 3.우수:동색, 4.최우수:은색, 5.VIP:황금색
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'LevelCdString', GetCustLevelSeq);

    if AStatus = 'R' then
    begin
      if BtnResJ.Down then
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '0')
			else
      if BtnResD.Down then
				ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '5');
		end else
				ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '');


		lg_Save := '2';
		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
		begin
			if (cxtJoinNum.Hint <> '4') then //문의 
			begin
				//(/경유|경유/|(경유|경유)| 경유|경유 )
				if func_ViaCheck(meoStartArea.Text) and (GT_PASS_INFO[iFidx][0].AREA1 = '') then // 경유관련 문구 있음 and 경유지좌표 없음
				begin
					if pnl_ViaAlert_Title.Hint <> 'Skip' then
					begin
						pnlJonMain.Enabled := False; //다른입력 막음
						if ChkMini.Checked then
							pnl_ViaAlert.Width := 407
						else
							pnl_ViaAlert.Width := 592;

						pnl_ViaAlert_Title.Hint := ''; //Check, Skip 구분값
						pnl_ViaAlert.Hint := '';       // ss_Mode
						pnl_ViaAlert.Top := 286;
						pnl_ViaAlert.Left := 1;
						pnl_ViaAlert.Hint := cxtJoinNum.Hint;
						pnl_ViaAlert.Visible := True;
						exit;
					end;
				end;
			end;
		end;

		if (gRate_Update > 0) and (curRate.Value = 0) and (Not BtnOptionCallMu.Down) and //최초 요금이 0원이상인데 수정시 요금이 0원일이고 콜무선택 안했을경우
			 ((cxtJoinNum.Hint = '0') or (cxtJoinNum.Hint = '1') or (cxtJoinNum.Hint = '2')) then //접수,배차,완료일 경우 콜무 자동체크 여부 확인
		begin
		//Yes 콜무로 자동변경, No : 그냥 수정
			if (GS_PRJ_AREA = 'O') and (GT_USERIF.CT = 'H227') then
				Log('콜무처리 : gRate_Update[' + IntToStr(gRate_Update) + '] curRate[' + IntToStr(curRate.Value) +']', LOGDATAPATHFILE);

			sTmp := '콜무처리 하시겠습니까?' + #13#10
						+ '**수정창에서 요금을 0원으로 변경하시면 콜무로 수정 가능합니다.'  + #13#10 + #13#10
						+ '      [YES]콜무로 수정            [NO]계속진행';
						
			if Application.MessageBox(PChar(sTmp), CDMSI, MB_YESNO + MB_ICONINFORMATION) = IDYES then
			begin
				if Not BtnOptionCallMu.Down then
					BtnOptionCallMu.Down := True;	
				BtnOptionCallMuClick(BtnOptionCallMu);	
			end;
		end;    
		if BtnOptionCallMu.Down then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfOptionsString', 'y')
		else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfOptionsString', 'n');

		sContent := '';
		sContent := ReplaceAll(Trim(edt_CardMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuMemoString', En_Coding(sContent));

    try
      if Trim(lcsSta1) = '' then
        lcsSta1 := fGetCity('S', lcsSta1, lcsSta2, lcsSta3, GS_Grid_DEP);

      lcsSta1 := fGetSiDo(Self.Tag, 'S', lcsSta1, lcsSta2, lcsSta3, cxtJoinNum.Text, GS_Grid_DEP,
                          Trim(cxtStartAreaDetail.Text), Trim(meoStartArea.Text),
                          cxtStartXval.Text, cxtStartYval.Text,
                          locHdNo, locBrNo, locKNum);
    except
      on e: Exception do
        Assert(False, 'Proc_OrderUpdateSave lcsSta1 - ' + E.Message);
    end;


    try
      if (Trim(lcsEnd1) = '') and (GS_SEARCH_ENDNOSEARCH = False) then //도착지 검색 옵션적용 2012.05.30
      begin
        lcsEnd1 := fGetCity('E', lcsEnd1, lcsEnd2, lcsEnd3, GS_Grid_DES);
        if GS_LocalMapSET then meoEndArea.Text := lcsEnd1;
      end;

      lcsEnd1 := fGetSiDo(Self.Tag, 'E', lcsEnd1, lcsEnd2, lcsEnd3, cxtJoinNum.Text, GS_Grid_DES,
                          Trim(cxtEndAreaDetail.Caption), Trim(meoEndArea.Text),
                          cxtEndXval.Text, cxtEndYval.Text,
                          locHdNo, locBrNo, locKNum);
    except
      on e: Exception do
        Assert(False, 'Proc_OrderUpdateSave lcsEnd1 - ' + E.Message);
    end;

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea1String', En_Coding(lcsSta1));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea2String', En_Coding(lcsSta2));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea3String', En_Coding(lcsSta3));

    lcsSta4 := En_Coding(cxtStartAreaDetail.Text);
  	if (Trim(cxtStartAreaDetail.Text) <> Trim(lcsConfAREA4)) then
    begin
  		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
      begin
        if ( Trim(lcsConfAREA4) <> '' ) And (Trim(cxtStartAreaDetail.Text)= '') then lcsSta4 := '☆';
      end;
      Assert(False, '[상세지명변경] : ' + cxtJoinNum.Text + '¶ 발주(본사-' + locHdNo + ' 지사-' + locBrNo + ' 대표번호-' + locKNum +
                  '¶' + lcsConfAREA4 + '¶' + cxtStartAreaDetail.Text + '¶' + lcsSta1 + ' ' + lcsSta2+ ' ' + lcsSta3 + '¶' + lcsSta4 +
                  '¶'+ En_Coding(meoStartArea.Text)+'¶'+ cxtStartXval.Text + ' ' + cxtStartYval.Text+'¶'+ GS_Grid_DEP );
		end;

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea4String', En_Coding(lcsSta4));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea5String', En_Coding(meoStartArea.Text));

    if Not ( (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') ) then
    begin
      if (cxtStartAreaDetail.Text <> '') and ((lcsSta1 = '') or (lcsSta2 = '') or (lcsSta3 = '')) then
      begin
        GMessagebox('출발지 정보가 올바르지 않습니다. 출발지를 다시 조회하시기 바랍니다.', CDMSI);
        Assert(False, '출발지정보 : ' + lcsStaDocId + '/' + lcsSta1 + '/' + lcsSta2 + '/' + lcsSta3 + '/' + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + meoStartArea.text + '/' + GS_Grid_DEP);
        btnCmdUpdSave.Enabled := True;
        Exit;
      end;
    end;

		// 2006.06.06 맵번호 대신 좌표로 수정한다.
    if StrToFloatDef(cxtStartXval.Text, -1) = -1 then
    begin
      gJONStaChkXY.X := '';
      gJONStaChkXY.GUIDE_X := '';
      cxtStartXval.Text := '';
      cxtStartGUIDEXval.Text := '';
    end;

    if StrToFloatDef(cxtStartYval.Text, -1) = -1 then
    begin
      gJONStaChkXY.Y := '';
      gJONStaChkXY.GUIDE_Y := '';
      cxtStartYval.Text := '';
      cxtStartGUIDEYval.Text := '';
    end;

    if ((gJONStaChkXY.X) <> '') and (gJONStaChkXY.X[1] <> '0') then
      gJONStaChkXY.X := '0' + gJONStaChkXY.X;

    if ((cxtStartXval.Text) <> '') and (cxtStartXval.Text[1] <> '0') then
			cxtStartXval.Text := '0' + cxtStartXval.Text;


    // 고객지원팀은 제외
    if Not ( (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') ) then
    begin
			// 출발지 좌표 중 X/Y가 동일하거나, X좌표가 비어있는 경우 발생하여 예외처리 지시(최도순)
			if ((cxtStartXval.Text <> '') or (cxtStartYval.Text <> '')) and ((cxtStartXval.Text = cxtStartYval.Text) or
        (cxtStartXval.Text = '')) then
      begin
        GMessagebox('출발지 좌표 정보가 올바르지 않습니다. 출발지를 다시 조회 하시고 수정 바랍니다.', CDMSI);
        btnCmdUpdSave.Enabled := True;
        Exit;
      end;
    end;

    try
			if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
      begin
				sTmpLon := SetWGS84(cxtStartYval.Text);
				sTmpLat := SetWGS84(cxtStartXval.Text);      //037XXXXX -> 37.XXXXXXX로 변환
				dTmpLon := StrToFloatDef(sTmpLon, 0);                        //더블형으로 변환
				dTmpLat := StrToFloatDef(sTmpLat, 0);
				if (cxtJoinNum.Hint <> '4') and (cxtJoinNum.Hint <> '5') then
        begin
					bLonLat := PtInPolygon(dTmpLon, dTmpLat, FKOREAAREA_XY.Lon, FKOREAAREA_XY.Lat, FKOREAAREA_XY.Lon.count);
          if Not bLonLat then  //유효한 좌표가 아니면
          begin
            GMessagebox('[출발지 좌표오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
                      + '좌표(' + cxtStartYval.Text + '/' + cxtStartXval.Text + ')' + #13#10
											+ '출발지를 다시 조회하시기 바랍니다.', CDMSI);
						Assert(False, '출발지좌표 : ' + lcsStaDocId + '/'
												 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + meoStartArea.text + '/' + GS_Grid_DEP + '/' + cxtJoinNum.Hint);
						btnCmdUpdSave.Enabled := True;
						if (Self.Showing) And (meoStartArea.CanFocus) then meoStartArea.SetFocus;
						Exit;
					end;
          if (cxtStartAreaDetail.Text <> '') and ((lcsSta1 = '') or (lcsSta2 = '') or (lcsSta3 = '')) then
          begin
            GMessagebox('[출발지 정보오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
                      + '시도 : ' + lcsSta1 + ', 시군구 : ' + lcsSta2 + ', 읍면동 : ' + lcsSta3 + #13#10
                      + '출발지를 다시 조회하시기 바랍니다.', CDMSI);
						Assert(False, '출발지정보 : ' + lcsStaDocId + '/' + lcsSta1 + '/' + lcsSta2 + '/' + lcsSta3 + '/'
												 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + cxtStartAreaDetail.text + '/' + GS_Grid_DEP + '/' + cxtJoinNum.Hint);
            btnCmdUpdSave.Enabled := True;
						if (Self.Showing) And (meoStartArea.CanFocus) then meoStartArea.SetFocus;
            Exit;
					end;
        end;
      end;

{		//도착지 좌표 검증 보류(20181127)KHS
			if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
			begin
				if (cxtJoinNum.Hint <> '4') and (cxtJoinNum.Hint <> '5') then //and (not GS_SEARCH_ENDNOSEARCH) then   //대기, 문의, 도착지 true 사용안함, false 사용함
				begin
					if ((cxtEndXval.Text <> cxtEndXval.Hint) and (cxtEndXval.Text = '')) or 
						 ((cxtEndYval.Text <> cxtEndYval.Hint) and (cxtEndYval.Text = '')) then   //원본도 빈값인데 현재도 빈값이면 OK, 원본과 빈값이 다르면 좌표체크
					begin						 
						sTmpLon := SetWGS84(cxtEndYval.Text); 
						sTmpLat := SetWGS84(cxtEndXval.Text);      //037XXXXX -> 37.XXXXXXX로 변환
						dTmpLon := StrToFloatDef(sTmpLon, 0);                        //더블형으로 변환
						dTmpLat := StrToFloatDef(sTmpLat, 0);

						bLonLat := PtInPolygon(dTmpLon, dTmpLat, FKOREAAREA_XY.Lon, FKOREAAREA_XY.Lat, FKOREAAREA_XY.Lon.count);
						if Not bLonLat then  //유효한 좌표가 아니면
						begin
							GMessagebox('[도착지 좌표오류]' + #13#10 + '도착지좌표가 올바르지 않습니다.' + #13#10
												+ '좌표(' + cxtEndYval.Text + '/' + cxtEndXval.Text + ')' + #13#10
												+ '도착지를 다시 조회하시기 바랍니다.', CDMSI);
							Assert(False, '도착지좌표 : ' + lcsStaDocId + '/'
													 + cxtEndYval.Text + '/' + cxtEndXval.Text + '/' + meoEndArea.text + '/' + GS_Grid_DES + '/' + cxtJoinNum.Hint);
							btnCmdUpdSave.Enabled := True;
							if (Self.Showing) And (meoEndArea.CanFocus) then meoEndArea.SetFocus;
							Exit;
						end;
					end;
				end;
			end;}
			if ((cxtEndXval.Text <> cxtEndXval.Hint) and (cxtEndXval.Text = '')) or 
				 ((cxtEndYval.Text <> cxtEndYval.Hint) and (cxtEndYval.Text = '')) then   //원본도 빈값인데 현재도 빈값이면 OK, 원본과 빈값이 다르면 좌표체크
			begin						 
				if (lcsEnd1 <> '') and ((lcsEnd2 <> '') or (lcsEnd3 <> '')) and ((cxtEndYval.Text = '') or (cxtEndXval.Text = '')) then
				begin
					GMessagebox('[도착지 좌표오류]' + #13#10 + '도착지좌표가 올바르지 않습니다.' + #13#10
										+ '좌표(' + cxtEndYval.Text + '/' + cxtEndXval.Text + ')' + #13#10
										+ '도착지를 다시 조회하시기 바랍니다.', CDMSI);
					Assert(False, '도착지좌표 : ' + lcsStaDocId + '/'
											 + cxtEndYval.Text + '/' + cxtEndXval.Text + '/' + meoEndArea.text + '/' + GS_Grid_DES + '/' + cxtJoinNum.Hint);
					btnCmdUpdSave.Enabled := True;
					if (Self.Showing) And (meoEndArea.CanFocus) then meoEndArea.SetFocus;
					Exit;
				end;
			end;
		except
			on e: Exception do
				Assert(False, 'Proc_OrderUpdateSave PtInPolygon - ' + E.Message);
		end;


			// 20120808 LYB 수정
    iX := cxtStartXval.Text;
    iY := cxtStartYval.Text;

		if ( gJONStaChkXY.X <> cxtStartXval.Text ) Or ( gJONStaChkXY.Y <> cxtStartYval.Text ) then
    begin
			if ( gJONStaChkXY.X <> '' ) And ( gJONStaChkXY.Y <> '' ) And ( gJONStaChkXY.Area1 <> '') then
      begin
				sMsg := ' ** 출발지 선택원본과 접수정보가 일치하지 않습니다. ** ' + #13 +
                '   - 출발지 선택원본                                     ' + #13 +
								'   ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + #13 +
                '   - 출발지 접수정보                                     ' + #13 +
                '   ' + lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3 + ' ' + cxtStartAreaDetail.Text + ' ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + #13#10#13#10 +
								'   출발지 선택원본으로 접수 처리 하시겠습니까?           ' + #13 +
								'   (아니오 선택시 출발지 명칭 검색을 다시 해주시기바랍니다.) ';
        begin
          sErrMsg := '[수-출좌 Y] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + ' ' + gJONStaChkXY.Gubun;
//-          Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
          Assert(False, sErrMsg);
        end;

        iX := gJONStaChkXY.X;
        iY := gJONStaChkXY.Y;
      end else
      begin
        sErrMsg := '[수-출좌 O] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + ' ' + gJONStaChkXY.Gubun;
//        Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
        Assert(False, sErrMsg);
      end;
    end;

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stMapXString', iX);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stMapYString', iY);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'AreaUPS', GS_Grid_DEP);  // 출발지선택값

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'WaitTimeString', cxTmWaitTime.Text + FloatToStr(fCruKm));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChargeTypeString' , '22');

    if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  	  ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaSOPTString', '8')
    else
  	  ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaSOPTString', '9');

//-    Log('lcsStaDebug 수 : ' + En_Coding(lcsStaDebug), LOGDATAPATHFILE);
  	ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaSDebugString', En_Coding(lcsStaDebug));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaSetTypeString', lcsStaCellSel);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaKeywordString', En_Coding(lcsStaSchWord));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaIdString'     , lcsStaDocId);

		//카카오 오더의 경우 동정보까지 입력해야함. 20190604 KHS
		if bKakaoOrder then
		begin
			if Trim(lcsEnd3) = '' then
			begin
				GMessagebox('[카카오 공유오더입니다]' + #13#10 + '도착지 "동정보" 까지 정확히 입력하셔야 수정됩니다' , CDMSI);

				btnCmdUpdSave.Enabled := True;
				if (Self.Showing) And (meoEndArea.CanFocus) then meoEndArea.SetFocus;
				Exit;
			end;
		end;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea1String', En_Coding(lcsEnd1));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea2String', En_Coding(lcsEnd2));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea3String', En_Coding(lcsEnd3));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea4String', En_Coding(cxtEndAreaDetail.Caption));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea5String', En_Coding(meoEndArea.Text));

		// 2006.07.24 도착지좌표 추가한다.
		if StrToFloatDef(cxtEndXval.Text, -1) = -1 then cxtEndXval.Text := '';
		if StrToFloatDef(cxtEndYval.Text, -1) = -1 then cxtEndYval.Text := '';
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edMapXString', cxtEndXval.Text);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edMapYString', cxtEndYval.Text);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'AreaUPE', GS_Grid_DES); // 도착지선택값

    if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  	  ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaEOPTString', '8')
    else
  	  ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaEOPTString', '9');
//-    Log('lcsEndDebug 수 : ' + En_Coding(lcsEndDebug), LOGDATAPATHFILE);
  	ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaEDebugString', En_Coding(lcsEndDebug));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaSetTypeString', lcsEndCellSel);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaKeywordString', En_Coding(lcsEndSchWord));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaIdString'     , lcsEndDocId);

    // 경유요금 :::::::: 신버전 추가 기능 개발..(법인기능요청으로,,개발,,)
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaChargeViaString', ReplaceAll(cxCurPathRate.Text, ',', ''));
    // 대기요금
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WChargeWCString', ReplaceAll(cxCurWaitTmRate.Text, ',', ''));
    // 대기시간
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WTimeWTString', cxTmWaitTime.Text + FloatToStr(fCruKm));
    // 보정금액
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'AChargeACString', ReplaceAll(cxCurRevisionRate.Text, ',', ''));
    // 적요투(2)
		sTemp := ReplaceAll(meoBigo2.Text, CRLF, '|');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfo2String', En_Coding(sTemp));

    // 적요투(3)
    sTemp := ReplaceAll(meoBigo3.Text, CRLF, '|');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfo3String', En_Coding(sTemp));

    StrValue := '';
    if ( blCompulWor ) and (Trim(sWkSabun) <> '') then
    begin
      StrValue := Trim(sWkSabun);
    end;
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkSabunString', StrValue); // 기사사번 읽기.

		// 플러스콜 설정값 추가. 2010.10.03
		StrValue := IfThen(btnPlusYN.Down, 'y', 'n'); // 플러스콜 체크박스
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PlusYnString', StrValue);

		// 탁송연합콜 설정값 추가. 2019.05.15 
		StrValue := IfThen(BtnTakAlly.Down, 'y', 'n'); 
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConsShareYnString', StrValue);

		// AI 아웃바운드 배차지연콜 사용여부 추가. 2019.07.16 KHS
		StrValue := IfThen(chk_AIReCall.Checked, 'y', 'n'); 
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'AiOutString', StrValue);

		StrValue := IfThen(BtnWKJAmt.Down, 'y', 'n'); // 지원금 체크박스
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostChargeSmsYNString', StrValue);

		StrValue := '';//IfThen(chkCall2.Checked, 'y', 'n'); // 콜마너2 체크박스
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'Call2YNString', StrValue);

    // 소요시간이 있을경우에만 전송
    if fTotalTime > 0 then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'EstTimeString', FloatToStr(fTotalTime));  // 소요시간
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'EstDistString', FloatToStr(fCruKm));      // 거리
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'EstTimeString', '0');  // 소요시간
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'EstDistString', '0');  // 거리
    end;

		//--------------------------------------------------------------------------------------------
    //  경유지 추가
    //--------------------------------------------------------------------------------------------
		if GT_PASS_INFO[iFidx][0].AREA1 = '' then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoCountString', '0');
      ls_ViaInto := lc_ViaInfoString;
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area1String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area2String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area3String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area4String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area5String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapXString', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapYString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaUPV', '');  // 경유지선택값

      if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
	  		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '8')
      else
	  		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '9');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVDebugString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaSetTypeString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaKeywordString', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaIdString'     , '');
    end else
    begin
      lRow := 0;
      ls_ViaInto := '';
      while lRow <= 4 do
      begin
        if GT_PASS_INFO[iFidx][lRow].AREA1 = '' then break;
        ls_ViaInto := ls_ViaInto + lc_ViaInfoString;
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area1String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA1));
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area2String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA2));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area3String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA3));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area4String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA4));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area5String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA5));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapXString', GT_PASS_INFO[iFidx][lRow].MAP_X);
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapYString', GT_PASS_INFO[iFidx][lRow].MAP_Y);
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaUPV', GS_Grid_VIA);  // 경유지선택값

        if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
    			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '8')
        else
    			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '9');
	  		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVDebugString', '');
		  	ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaSetTypeString', GT_PASS_INFO[iFidx][lRow].CELLS);
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaKeywordString', En_Coding(GT_PASS_INFO[iFidx][lRow].SWORD));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaIdString'     , GT_PASS_INFO[iFidx][lRow].DOCID);
        inc(lRow);
      end;
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoCountString', IntToStr(lRow));
    end;
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoString', ls_ViaInto);

    // - 와이즈넛 검색어 실패/성공 여부 전송
    if ( GS_Grid_DEP <> 'C' ) And ( Trim(lcsStaSchWord) <> '' ) then
    begin
      if GS_Grid_DEP = 'W' then sRespSParam1 := meoStartArea.Text
                           else sRespSParam1 := GS_Grid_DEP + '/' + meoStartArea.Text + '/' + cxtStartXval.Text + '/' + cxtStartYval.Text;

      sRespSParam2 := GS_Grid_DEP;
      sRespSParam3 := lcsStaCellSel;
    end;

		if ( GS_Grid_DES <> 'D' ) And ( GS_Grid_DES <> 'C' ) And ( Trim(lcsEndSchWord) <> '' ) then
    begin
      if GS_Grid_DES = 'W' then sRespEParam1 := meoEndArea.Text
													 else sRespEParam1 := GS_Grid_DES + '/' + meoEndArea.Text + '/' + cxtEndXval.Text + '/' + cxtEndYval.Text;

      sRespEParam2 := GS_Grid_DES;
      sRespEParam3 := lcsEndCellSel;
    end;

		Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
			Proc_JobAfterProc(True, True);
      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
				if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, True);
			bAppOrderOpen := False;
			if cxtJoinNum.Hint <> '4' then
        tmrResponse.Enabled := True;  // 문의는 제외하고 처리
    end;
  except
    on e: Exception do
    begin
      ls_TxLoad := 'JON01[Proc_OrderUpdateSave]:' + e.Message;
      Log(ls_TxLoad, LOGDATADIRECTORY + 'Accept_Err.log');
			Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
      Assert(False, E.Message);
    end;
  end;
end;

// 고객 당일 오더 구분 : 폼의 라벨 컨트롤 칼라를 설정 한다.
procedure TFrm_JON01.SetCustControlColor(bType: boolean = False);
begin
  // 컨트 칼라 설정..
  if bType = True then
  begin
    PnlOCC.Color := $0080FFFF;
  end else
  begin
    PnlOCC.Color := $00C1DADB;
  end;
end;

procedure TFrm_JON01.Proc_CIDEventAutoSearch(sCID, sKeyNumber, sDNIS, sSndTime, sBrNo, sAutoCall : string);
begin
	SetDebugeWrite('JON01.Proc_CIDEventAutoSearch');
  try
		SetPrivateVariable; // 접수 전에 조회 조건 관련 전역변수 초기화..
    if locCustHP_MainNum_Search = '' then
    begin // JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
      cxLblCIDUseFlg.Hint := 'CID'; // CID 조회인지 설정을 한다.
    end;
    locHDNO := '';
		locBRNO := sBrNo; // 조회 고객 본사, 지사코드, 대표번호 임시저장.
		locKNum := sKeyNumber; // CID에서 들어온 대표번호 설정.
		locDNIS := sDNIS;
		locSndTime := sSndTime;
    locAutoCallYn := sAutoCall;

    sCID := StringReplace(sCID, '-', '', [rfReplaceAll]);
    cxtCallTelNum.Text := sCID; // CID 설정.
		cxtCuTel.Text := sCID;
		cxtCuTel.Hint := sCID;  //콜링 시 들어온 전화번호를 저장하여 추후 고객번호 keypress 시 변경된 사항이 있다면 DNIS 초기화

		if not GS_CIDINFO_OUR_KEYNUMBER then
		begin
			cboBranch.ItemIndex := -1;
			GMessagebox('존재하지 않는 대표번호(' + sKeyNumber + ') 입니다. 확인후 검색 하세요!' + #13#10 +
				'[콜센터에 이관된 지사 또는 본인 소속 지사만 검색 가능]', CDMSI);
			GS_CIDINFO_OUR_KEYNUMBER := True;
			try
				// CID 조회 일때는 발신전화없음 멘트 감춤..
				if (locCustHP_MainNum_Search = '') and (cxLblCIDUseFlg.Hint <> 'CID') then
				begin
					cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
					cxtCallTelNum.Text := cxtCuTel.Text; // 발신전화번호
					locsCuTel := cxtCuTel.Text;
				end else
				begin
					locsCuTel := cxtCallTelNum.Text;
				end;

				cxBtnSpSave.Enabled := True;
				cxBtnCuUpdate.Enabled := True;
				cxBtnCuNew.Enabled := True;
				cxBtnCuDel.Enabled := True;
				btnMileOut.Enabled := True;

				// 지사변경 제한.[이유:고객조회 후 지사변경시 조회한 고객정보 일부유실 경고메시지 띄우기 위함임]
//				cboBranch.Properties.ReadOnly := True;

				if lcsCu_seq <> '' then
				begin
//					spCuSeqColor.Brush.Color := $0070FEF3;
					// 존재 : $0070FEF3, 미존재 : $00FAEDE2
				end	else
				begin
//					spCuSeqColor.Brush.Color := $00FAEDE2;
					// 존재 : $0070FEF3, 미존재 : $00FAEDE2
					if (cxLblCIDUseFlg.Hint = 'CID') and (locWkSabun = '') then
					begin // CID 조회인지 설정을 한다.
						tmMent.Enabled := True;
						locKNum := Proc_MainKeyNumberSearch; // 대표번호 추출.
//						lblNewCustYN.Caption := sBr_Name + ' / ' + locKNum + ' 의' + #13#10
//							+ '-->>신규 고객<<-- 입니다.';
						pnlNewCustYN.Visible := True; // 신규고객여부의 정보를 보여준다.
					end;
				end;

        if Assigned(Frm_Jon012) then
        begin
  				Frm_Jon012.cxlbSlip.Caption    := cxtJoinNum.Text; // 오더접수번호
  				Frm_Jon012.cxlbCustTel.Caption := locsCuTel; // 고객전화번호 읽기.
  				Frm_Jon012.cxlbKeyNum.Caption  := Proc_MainKeyNumberSearch; // 대표번호 읽기.
        end;

				pnlJonMain.Enabled := True;   // 접수창 잠긴걸 해제함. 2011-11-08.

				if Self.Visible = True then
        begin
     			if meoStartArea.CanFocus then	meoStartArea.SetFocus;
//          meoStartArea.SelStart := Length(meoStartArea.Text);
        end;
			except
				on e: exception do
				begin
					Assert(False, E.Message);
				end;
			end;
			Exit;
		end;
	except
  end;

  if sAutoCall = 'Y' then tmrAutoCall.Enabled := True;
  // CID정보로 고객정보를 조회한다.
	Proc_KeyNumberSearch(sKeyNumber, True);
end;

// 고객 이용내역을 그리드에 보여준다.
procedure TFrm_JON01.Proc_CustOrderListView;
var
	I, iStatus, iSlip, iSlipDt, iSLatX, iSLatY, iELatX, iELatY, iJGubun, iRow : integer;
  TodayDate, sError: string;

  slCom : TStringList;
	elCom : TStringList;
	iCnt, sCnt, eCnt, idx, iMax, ssRow, eeRow, iETC2, iETC, iPos : Integer;
	sArea1, sArea2, sArea3, sArea4, sArea5, sArea6, sArea7, sArea8  : string;
  isArea1, isArea4, isArea5, isArea6, isArea7, isArea8  : Integer;
  eArea1, eArea2, eArea3, eArea4, eArea5, eArea6, eArea7, eArea8  : string;
	ieArea1, ieArea4, ieArea5, ieArea6, ieArea7, ieArea8  : Integer;
	sSlip, eSlip, etmpSlip, sETC2, sETC, sTmp, sStatus, sInDate : String;

	StartXY, EndXY, sNowDTM : string;
	dNowDate, dOrderDate : TDateTime;

	bCustAppOK : Boolean;    // 3분이내문의건이 여러건 있을경우 첫번째 자료 적용위해
	bCustAILBSOK : Boolean;    // 3분이내문의건이 여러건 있을경우 첫번째 자료 적용위해    AI-LBS
begin
	SetDebugeWrite('JON01.Proc_CustOrderListView');
  try
		TodayDate := StartDateTime('yyyy-mm-dd hh:nn:ss'); // 오늘 영업일자 얻기..
    iCnt := 0;
    sCnt := 0;
		eCnt := 0;

    slCom := TStringList.Create;
		slCom.Sorted := True;
  	elCom := TStringList.Create;
    elCom.Sorted := True;

   	sNowDTM := frm_Main.func_sysdate;

    try
      try
				iStatus := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('상태').Index;
				iSlip   := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('접수번호').Index;
				iSlipDt := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('접수일시').Index;

        iSLatX  := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('출좌표X').Index;
        iSLatY  := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('출좌표Y').Index;

        isArea1 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('출발지').Index;
      	isArea4 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('출1').Index;
      	isArea5 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('출2').Index;
      	isArea6 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('출3').Index;
      	isArea7 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('출4').Index;
      	isArea8 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('출5').Index;

        iELatX  := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('도좌표X').Index;
        iELatY  := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('도좌표Y').Index;

        iEArea1 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('도착지').Index;
      	iEArea4 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('도1').Index;
      	iEArea5 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('도2').Index;
      	iEArea6 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('도3').Index;
      	iEArea7 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('도4').Index;
      	iEArea8 := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('도5').Index;

				iJGubun := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('접수구분').Index;    //first_in_source
				iETC2   := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('적요2').Index;
				iETC    := Frm_JON012.cxGVeOrderList.GetColumnByFieldName('적요').Index;

			Except
        on e: exception do
        begin
					Log('Set_OrderLiast Error 1 : ' + E.Message, LOGDATAPATHFILE);
//--          Assert(False, 'Set_OrderLiast Error 1 : ' + E.Message);
        end;
			end;

      try
				bCustAppOK := False;
				bCustAILBSOK := False;
				bAppOrder := False;
        bAppOrderOpen := False;
				for I := 0 to Frm_JON012.cxGVeOrderList.ViewData.DataController.RecordCount - 1 do
        begin
      	  if (Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatX] <> '') and
             (Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatY] <> '') then
          begin
            try
              if sRet <> 1 then
              begin
								if Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip] <> '' then Inc(sCnt);
                StartXY := '';
                iCnt := slCom.Count;
                StartXY := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatX] +
                           Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatY];
                idx := slCom.Add(StartXY);
								if iCnt = slCom.Count then
								begin
                  sSSlip[idx]  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip];
									iSCount[idx] := iSCount[idx] + 1;
                  iSRow[idx]   := i;
                end else
                begin
                  if slCom.Count = 0 then
                  begin
          	  			sSSlip[slCom.Count]  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip];
          	  			iSCount[slCom.Count] := 1;
                    iSRow[slCom.Count]   := i;
									end else
                  begin
          	  			sSSlip[slCom.Count-1]  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip];
          	  			iSCount[slCom.Count-1] := 1;
										iSRow[slCom.Count-1]   := i;
                  end;
                end;
							end;
            Except
              on e: exception do
              begin
                Log('Set_OrderLiast Error 2 : ' + E.Message, LOGDATAPATHFILE);
              end;
            end;

            try
              etmpSlip := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip];
              if eRet <> 1 then
              begin
                if (Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iELatX] <> '') and
                   (Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iELatY] <> '') then
                begin
                  EndXY := '';
                  if Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip] <> '' then Inc(eCnt);
                  iCnt := elCom.Count;
                  EndXY := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iELatX] +
                           Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iELatY];
                  idx := elCom.Add(Endxy);
                  if iCnt = elCom.Count then
                  begin
                    sESlip[idx]  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                    iECount[idx] := iECount[idx] + 1;
                    iERow[idx]   := i;
                  end else
                  begin
                    if elCom.Count = 0 then
                    begin
                      sESlip[elCom.Count]  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                      iECount[elCom.Count] := 1;
                      iERow[elCom.Count]   := i;
                    end else
                    begin
                      sESlip[elCom.Count-1]  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                      iECount[elCom.Count-1] := 1;
                      iERow[elCom.Count-1]   := i;
                    end;
                  end;
                end;
              end;
            Except
              on e: exception do
              begin
                Log('Set_OrderLiast Error 3 : ' + etmpSlip + ', ' + E.Message, LOGDATAPATHFILE);
              end;
            end;
					end;

					dOrderDate := StrToDateTime(Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlipDt]);
					dNowDate := StrToDateTime(copy(sNowDTM,1,4) + '-' + copy(sNowDTM,5,2) + '-' + copy(sNowDTM,7,2) + ' '
																	+ copy(sNowDTM,9,2) + ':' + copy(sNowDTM,11,2) + ':' + copy(sNowDTM,13,2) );
					 // 접수구분이 고객용 어플일 경우 3분이내에 전화가 올경우 출발지 자동 선택
					if ( Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iJGubun] <> '' ) And
						 ( Not pbISStartEndXY ) And ( locAutoCallYn <> 'Y') then
					begin
						if Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlipDt] = Null then Break;
						sStatus  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iStatus];
						
						// 'A' : 고객앱, 'U' : 유한소프트, 'T' : AI배차지연콜
						if ( Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iJGubun] = 'T' ) then
						begin

							sETC2 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iETC2];
							sETC  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iETC];
							if (Pos('[Ai콜센터^]', sETC2) > 0) and (sStatus = '4') then   //문의
							begin
								if ( MinutesBetween(dNowDate,dOrderDate) < 3 ) And ( Not bCustAILBSOK ) then
                begin
									if ChkMini.Checked then
                  begin
                    lb_AIStart.Caption := '  LBS기반 출발지 위치 입력되었습니다.';
                    pnl_AIStart.Width := 391;
									end else
									begin
										lb_AIStart.Caption := '  LBS기반 휴대폰 위치추적으로 출발지 위치가 입력 되었습니다.';
                    pnl_AIStart.Width := 585;
                  end;
                  pnl_AIStart.Top := 174;
									pnl_AIStart.Left := 6;
                  pnl_AIStart.visible := True;
                  tmLockMent.Interval := 6000;
                  tmLockMent.Enabled := True;

                  sArea1 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea1];
                  sArea2 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatX ];
                  sArea3 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatY ];
                  sArea4 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea4];
                  sArea5 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea5];
                  sArea6 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea6];
                  sArea7 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea7];
                  sArea8 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea8];

                  sETC2  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iETC2];
                  meoBigo2.Text := Enc_Control(sETC2);

                  // 20120805 좌표 오류 체크 LYB
                  gJONStaChkXY.Area1 := sArea4;
                  gJONStaChkXY.Area2 := sArea5;
                  gJONStaChkXY.Area3 := sArea6;
                  gJONStaChkXY.Area4 := sArea7;
                  gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  gJONStaChkXY.X := sArea2;
                  gJONStaChkXY.Y := sArea3;
                  gJONStaChkXY.Gubun := 'E';

                  cxtStartXval.Text := sArea2;
                  cxtStartYval.Text := sArea3;
                  lcsSta1 := sArea4;
                  lcsSta2 := sArea5;
                  lcsSta3 := sArea6;
                  lcsSta4 := sArea7;
                  lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  cxtStartAreaDetail.Text := lcsSta4;
                  lcsConfAREA4            := lcsSta4;
    //							meoStartArea.Text := sArea1;
                  sTmp := func_StartAreaFunc(sArea1);
                  meoStartArea.Text := sTmp;
                  MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                  MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                  bCustAILBSOK := True;
                  GS_Grid_DEP := 'E'; //AI LBS
                end;
              end else
							if (Pos('[AiOB^]', sETC2) > 0) and (sStatus = '4') then
							begin
								if ( MinutesBetween(dNowDate,dOrderDate) < 1 ) And ( Not bCustAILBSOK ) then
                begin

									if ChkMini.Checked then
                  begin
										iPos := Pos('[AiOB^]', sETC2);
																	
										lb_AIOB.Caption := Copy(sETC2, Length('[AiOB^]')+1, Length(sETC2)-Length('[AiOB^]'));// 'AI배차지연콜 > 상담원과 통화요청 연결';
										pnl_AIOB.Width := 391;
                  end else
									begin
										lb_AIOB.Caption := sETC;//'AI배차지연콜 시스템에서 상담원과 통화를 원하여 연결되었습니다.';
										pnl_AIOB.Width := 585;
									end;
                  pnl_AIOB.Top := 174;
                  pnl_AIOB.Left := 6;
                  pnl_AIOB.visible := True;
                  tmLockMent.Interval := 6000;
                  tmLockMent.Enabled := True;

                  sArea1 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea1];
                  sArea2 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatX ];
                  sArea3 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatY ];
                  sArea4 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea4];
                  sArea5 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea5];
                  sArea6 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea6];
									sArea7 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea7];
                  sArea8 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea8];

                  sETC2  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iETC2];
                  meoBigo2.Text := Enc_Control(sETC2);

                  // 20120805 좌표 오류 체크 LYB
                  gJONStaChkXY.Area1 := sArea4;
                  gJONStaChkXY.Area2 := sArea5;
                  gJONStaChkXY.Area3 := sArea6;
                  gJONStaChkXY.Area4 := sArea7;
                  gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  gJONStaChkXY.X := sArea2;
                  gJONStaChkXY.Y := sArea3;
                  gJONStaChkXY.Gubun := 'E';

                  cxtStartXval.Text := sArea2;
                  cxtStartYval.Text := sArea3;
                  lcsSta1 := sArea4;
                  lcsSta2 := sArea5;
                  lcsSta3 := sArea6;
                  lcsSta4 := sArea7;
									lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  cxtStartAreaDetail.Text := lcsSta4;
                  lcsConfAREA4            := lcsSta4;
    //							meoStartArea.Text := sArea1;
                  sTmp := func_StartAreaFunc(sArea1);
                  meoStartArea.Text := sTmp;
                  MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                  MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                  bCustAILBSOK := True;
                  GS_Grid_DEP := 'E'; //AI LBS
                end;
              end;
            end else
						//그외 고객앱(외부 포함)
						if ( MinutesBetween(dNowDate,dOrderDate) < 3 ) And ( Not bCustAppOK ) then
						begin
							sArea1 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea1];
							sArea2 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatX ];
							sArea3 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSLatY ];
							sArea4 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea4];
							sArea5 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea5];
							sArea6 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea6];
							sArea7 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea7];
							sArea8 := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[isArea8];

							sETC2  := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iETC2];
							meoBigo2.Text := Enc_Control(sETC2);

							// 20120805 좌표 오류 체크 LYB
							gJONStaChkXY.Area1 := sArea4;
							gJONStaChkXY.Area2 := sArea5;
							gJONStaChkXY.Area3 := sArea6;
              gJONStaChkXY.Area4 := sArea7;
              gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
              gJONStaChkXY.X := sArea2;
							gJONStaChkXY.Y := sArea3;
							gJONStaChkXY.Gubun := 'A';

      	  		cxtStartXval.Text := sArea2;
      	  		cxtStartYval.Text := sArea3;
      	  		lcsSta1 := sArea4;
      	  		lcsSta2 := sArea5;
							lcsSta3 := sArea6;
      	  		lcsSta4 := sArea7;
              lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
							SetDebugeWrite('JON01.lblStartAreaName.Text 23184 : ' + lblStartAreaName.Text);
							cxtStartAreaDetail.Text := lcsSta4;
							lcsConfAREA4            := lcsSta4;
//							meoStartArea.Text := sArea1;
							sTmp := func_StartAreaFunc(sArea1);
							meoStartArea.Text := sTmp;
							MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
              MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

							bCustAppOK := True;
							GS_Grid_DEP := 'A'; //고객용 어플 일때
							if (sStatus = '5') then //어플접수 대기일떄
							begin
								bAppOrder := True;
                sSlip := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                sInDate := Frm_JON012.cxGVeOrderList.ViewData.Records[i].Values[iSlipDt];
								gAppSlip := sSlip;
								gAppInDate := sInDate;
//								Frm_Main.AcceptFromCreate(sSlip, sInDate, '앱접수', Jon03Tag);
								exit;	
{								if Not ChkMini.Checked then
								begin
									pnl_AppMsg.Left := 6;
									pnl_AppMsg.Top  := 285;
									pnl_AppMsg.Height := 286;
									pnl_AppMsg.width := 600;
									btn_Update.Left := (pnl_Title.Width Div 2) - (btn_Update.Width Div 2); //144;
//									btn_Join.Left := 200 + btn_Update.Left;
								end else
								begin
									pnl_AppMsg.Left := 6;
									pnl_AppMsg.Top  := 340;
									pnl_AppMsg.Height := 303;
									pnl_AppMsg.width := 405;
									btn_Update.Left := (pnl_Title.Width Div 2) - (btn_Update.Width Div 2);
//									btn_Update.Left := 44;
//									btn_Join.Left := 200 + btn_Update.Left;
								end;
								btn_Update.Hint := '';
								pnl_AppMsg.Hint := '';
								bAppOrder := True;
								pnl_AppMsg.visible := True;
								btn_Update.Hint := sSlip;    //sInDate
								pnl_AppMsg.Hint := sInDate;    }
							end;
							
						end;
					end;
        end;
      Except
        on e: exception do
        begin
          Log('Set_OrderLiast Error : ' + IntToStr(i) + ' ' + E.Message, LOGDATAPATHFILE);
        end;
      end;

			if ( not GS_AREA_AUTO_SET ) And  ( Not pbISStartEndXY )  And ( locAutoCallYn <> 'Y' ) and (not bOther) then      //과거이용내역기준 자동설정 사용안함 2013.05.23 KHS
			begin                                                                                      //타업체에 등록된 오더가 있을경우
        try
					if GS_Grid_DEP = 'A' then
          else
          if sRet <> 1 then
          begin
            for i := 0 to Length(iScount) - 1 do
            begin
              if i = 0 then
              begin
                iMax := iScount[i];
                ssRow := iSRow[i];
								sSlip := sSSlip[i];
              end else
              if  iMax < iScount[i] then
              begin
                iMax := iScount[i];
                ssRow := iSRow[i];
                sSlip := sSSlip[i];
              end;
            end;

            // 출발지 건수가 최소 4건이상 /  최대건수대비 출발지 건수 50% 이상
            if sCnt > 0 then
            begin
              if (iMax > 4) and (iMax / sCnt * 100 >= 50) then
							begin
                iRow := Frm_JON012.cxGVeOrderList.DataController.FindRecordIndexByText(0, iSlip, sSlip, False, True, True);

      	  	  	sArea1 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, isArea1];
      	  	  	sArea2 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, iSLatX ];
      	  	  	sArea3 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, iSLatY ];
      	  	  	sArea4 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, isArea4];
      	  	  	sArea5 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, isArea5];
      	  	  	sArea6 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, isArea6];
      	  	  	sArea7 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, isArea7];
      	  	  	sArea8 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, isArea8];

								if (sArea4 <> '') and (sArea5 <> '') and (sArea6 <> '') and (sArea7 <> '') and (sArea8 <> '') and 
									 (sArea2 <> '') and (sArea3 <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
								begin
                  // 20120805 좌표 오류 체크 LYB
                  gJONStaChkXY.Area1 := sArea4;
                  gJONStaChkXY.Area2 := sArea5;
                  gJONStaChkXY.Area3 := sArea6;
                  gJONStaChkXY.Area4 := sArea7;
                  gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  gJONStaChkXY.X := sArea2;
                  gJONStaChkXY.Y := sArea3;
                  gJONStaChkXY.Gubun := 'H';

                  cxtStartXval.Text := sArea2;
                  cxtStartYval.Text := sArea3;
                  cxtStartGUIDEXval.Text := sArea2;
                  cxtStartGUIDEYval.Text := sArea3;

                  lcsSta1 := sArea4;
                  lcsSta2 := sArea5;
                  lcsSta3 := sArea6;
                  lcsSta4 := sArea7;
                  lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  SetDebugeWrite('JON01.lblStartAreaName.Text 23261 : ' + lblStartAreaName.Text);
                  if lcsSta4 <> '☆' then
                    cxtStartAreaDetail.Text := lcsSta4
                  else
                    cxtStartAreaDetail.Text := '';
                  lcsConfAREA4            := lcsSta4;
		//							meoStartArea.Text := sArea1;
									sTmp := func_StartAreaFunc(sArea1);
									meoStartArea.Text := sTmp;
									MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                  MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                  lcsStaCellSel := '';
                  lcsStaDocId := '';
                  GS_Grid_DEP := 'H'; //과거이용내역일때
								end;
              end;
            end;
          end;

          if eRet <> 1 then
          begin
            for i := 0 to Length(iEcount) - 1 do
            begin
              if i = 0 then
              begin
                iMax := iEcount[i];
                eeRow := iERow[i];
                eSlip := sESlip[i];
              end else
              if  iMax < iEcount[i] then
              begin
                iMax := iEcount[i];
                eeRow := iERow[i];
                eSlip := sESlip[i];
              end;
            end;

            if eCnt > 0 then
            begin
              if (iMax > 4) and (iMax / eCnt * 100 >= 50) then
              begin
                iRow := Frm_JON012.cxGVeOrderList.DataController.FindRecordIndexByText(0, iSlip, eSlip, False, True, True);

      	  	  	eArea1 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, ieArea1];
      	  	  	eArea2 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, iELatX ];
      	  	  	eArea3 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, iELatY ];
      	  	  	eArea4 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, ieArea4];
      	  	  	eArea5 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, ieArea5];
      	  	  	eArea6 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, ieArea6];
      	  	  	eArea7 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, ieArea7];
      	  	  	eArea8 := Frm_JON012.cxGVeOrderList.DataController.Values[iRow, ieArea8];

								if (eArea4 <> '') and (eArea5 <> '') and (eArea6 <> '') {and (eArea7 <> '')} and (eArea8 <> '') and 
									 (eArea2 <> '') and (eArea3 <> '') then  //도착지 모든 데이터(Area4제외)가 있어야 자동 셋팅 2017.06.25 KHS
								begin
                  cxtEndXval.Text := eArea2;
                  cxtEndYval.Text := eArea3;
                  cxtEndGUIDEXval.Text := eArea2;
                  cxtEndGUIDEYval.Text := eArea3;

                  lcsEnd1 := eArea4;
                  lcsEnd2 := eArea5;
                  lcsEnd3 := eArea6;
                  lcsEnd4 := eArea7;
                  lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;
                  cxtEndAreaDetail.Caption := lcsEnd4;
                  meoEndArea.Text := eArea1;
									cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                  SetDebugeWrite('JON01.cxReEndArea.Text 23324 : ' + cxReEndArea.Text);
                  MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                  lcsEndCellSel := '';
                  lcsEndDocId := '';

                  GS_Grid_DES := 'H'; //과거이용내역일때
								end;
              end;
            end;
          end;
        except
          on e: exception do
          begin
            sError := '당일오더 건 Error '  + E.Message;
            Assert(False, sError);
          end;
        end;
      end;
    finally
      for i := 0 to Length(iScount) - 1 do
      begin
        sSSlip[i]  := '';
        iSCount[i] := 0;
        iSRow[i]   := 0;
        sESlip[i]  := '';
        iECount[i] := 0;
        iERow[i]   := 0;
      end;

      slCom.Free;
      elCom.Free;
    end;
  Except

  end;
end;

procedure TFrm_JON01.SetPosLblDistance;
begin
  Lbl_Distance.Left := Pnl_Charge.Width  - ( Lbl_Distance.Width  + 7);
  Lbl_Distance.Top  := Pnl_Charge.Height - ( Lbl_Distance.Height + 6);
end;

function TFrm_JON01.fGetCity(sGubun, sCity, sWard, sStree, sDep : String) : String;
Var i : Integer;
begin
	SetDebugeWrite('JON01.fGetCity');
	Try
    if ( Trim(sCity) = '' ) And ( Trim(sWard) = '' ) And ( Trim(sStree) = '' ) then
    begin
      if sGubun = 'S' then Result := slstLocalMapOrder[0] else
      if sGubun = 'E' then
      begin
        if GS_LocalMapSET then Result := slstLocalMapOrder[0]
                          else Result := lcsSta1;
      end;
    end else
    if ( Trim(sCity) = '' ) And ( Trim(sWard) <> '' ) And ( Trim(sStree) <> '' ) then
    begin
      if GT_MAPOrigi.slStre.Count < 22000 then
      begin
        if sGubun = 'S' then Result := slstLocalMapOrder[0] else
        if sGubun = 'E' then
        begin
          if GS_LocalMapSET then Result := slstLocalMapOrder[0]
                            else Result := lcsSta1;
        end;
        Exit;
      end;

			for i := 0 to GT_MAPOrigi.slStre.Count - 1 do
			begin
				if (Copy(GT_MAPOrigi.slStre[i], 1, 3) = Copy(sStree, 1, 3)) and
           (Copy(GT_MAPOrigi.slWard[i], 1, 3) = Copy(sWard , 1, 3)) then
				begin
          if slstLocalMapOrder.IndexOf(GT_MAPOrigi.slCity[i]) < 0 then Continue;
					Result := GT_MAPOrigi.slCity[i];
					Assert(False, '[시도자동입력] 시도 :' + sCity + ' / 시군구 :' + sWard + ' / 읍면동 :' + sStree +
                        '[선택구분] : ' + GT_MAPOrigi.slCity[i] + '-' + GS_Grid_DEP + ' Count : ' + IntToStr(GT_MAPOrigi.slStre.Count));
					Break;
				end;
			end;
      if Result = '' then
      begin
        if sGubun = 'S' then Result := slstLocalMapOrder[0] else
        if sGubun = 'E' then
        begin
          if GS_LocalMapSET then Result := slstLocalMapOrder[0]
                            else Result := lcsSta1;
        end;
      end;
    end;
	except
    if sGubun = 'S' then Result := slstLocalMapOrder[0] else
    if sGubun = 'E' then
    begin
      if GS_LocalMapSET then Result := slstLocalMapOrder[0]
                        else Result := lcsSta1;
    end;
		Assert(False, '시도 조회 오류');
	end;
end;

procedure TFrm_JON01.pSetFormScroll(iFix, iHeight : Integer );
Var i, iScreenY, iFrameH, iFrameW : Integer;
begin
  try
    if Self.Tag = -1 then Exit;
    //  iScreenY := 600;
    iScreenY := Screen.Monitors[Monitor.MonitorNum].Height;

    if iFix = 1 then
    begin
      pnlJonMain.Align := alClient;
      Self.Height := iHeight;
      if Assigned(Frm_Jon00) And ( GS_JON01_TAB = 1 ) then
        Frm_Main.JON01MNG[Self.Tag].iFrmHeight := iHeight + 60
      else
        Frm_Main.JON01MNG[Self.Tag].iFrmHeight := iHeight;
    end else
    begin
      pnlJonMain.Align := alClient;
      Frm_Main.JON01MNG[Self.Tag].iFrmHeight := Frm_Main.JON01MNG[Self.Tag].iFrmHeight + iHeight;
      if Assigned(Frm_Jon00) And ( GS_JON01_TAB = 1 ) then
        Self.Height := Frm_Main.JON01MNG[Self.Tag].iFrmHeight - 60
      else
        Self.Height := Frm_Main.JON01MNG[Self.Tag].iFrmHeight
    end;

    iFrameH := 0;
    iFrameW := 0;
    if Assigned(Frm_Jon00) then
    begin
      for i := 0 to 19 do
      begin
        if ( Frm_Main.JON01MNG[i].Use ) And ( Frm_Main.JON01MNG[i].CreateYN ) then
        begin
          if iFrameH = 0 then iFrameH := Frm_Main.JON01MNG[i].iFrmHeight;
          if Frm_Main.JON01MNG[i].FrmGubun <> 2 then
          begin
            if iFrameW = 0 then iFrameW := Frm_Main.Frm_JON01[i].Width;
          end else
          begin
            if iFrameW = 0 then iFrameW := Frm_Main.Frm_JON01B[i].Width;
          end;

          if iFrameH < Frm_Main.JON01MNG[i].iFrmHeight then
            iFrameH := Frm_Main.JON01MNG[i].iFrmHeight;

          if Frm_Main.JON01MNG[i].FrmGubun <> 2 then
          begin
            if iFrameW < Frm_Main.Frm_JON01[i].Width then
              iFrameW := Frm_Main.Frm_JON01[i].Width;
          end else
          begin
            if iFrameW < Frm_Main.Frm_JON01B[i].Width then
              iFrameW := Frm_Main.Frm_JON01B[i].Width;
          end;
        end;
      end;
      Frm_Jon00.Height := iFrameH;
      Frm_Jon00.Width  := iFrameW;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.pInitFormSize;
begin
  try
    { TODO : 접수창 사이즈 조절로 아주 중요 ------------------------------------------------------------------}
    if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
    begin
      Constraints.MinWidth := 415;
      Width := 415;
			if IsBubuinUse then
      begin
				Pnl_BubinV.Visible := True;

        pSetFormScroll(1, 724);

        GB3.Height := 79;
				GBTop5.Height := 221;

        CbCuGb.Tag := 1;

				meoBigo.Top := 102;
        LbmeoBigo.Top := meoBigo.Top + 5;
				meoBigo2.Top := 140;
        LbmeoBigo2.Top := meoBigo2.Top + 5;
        meoBigo3.Top := 179;
				LbmeoBigo3.Top := meoBigo3.Top + 5;
				btnAddBigo.Top := meoBigo.Top + 22;
				BtnResvView.Top := btnAddBigo.Top + btnAddBigo.Height + 2;
			end else
      begin
				Pnl_BubinV.Visible := False;

        pSetFormScroll(1, 724 - 25);

        GB3.Height := 79;
        GBTop5.Height := 221 - 25;

        CbCuGb.Tag := 0;

        meoBigo.Top := 102 - 25;
        LbmeoBigo.Top := ( meoBigo.Top + 5 );
        meoBigo2.Top := 140 - 25;
				LbmeoBigo2.Top := ( meoBigo2.Top + 5 );
        meoBigo3.Top := 179 - 25 ;
        LbmeoBigo3.Top := ( meoBigo3.Top + 5 );
				btnAddBigo.Top := meoBigo.Top + 22;
        BtnResvView.Top := btnAddBigo.Top + btnAddBigo.Height + 2;
      end;
    end else
    begin
			if GS_FormType = 'Normal' then
			begin
        Constraints.MinWidth := 614;
        Width := 614;
				if IsBubuinUse then
				begin
					Pnl_BubinV.Visible := True;

					GBTop5.Height := 200;
					GB3.Height := 62;

          pSetFormScroll(1, 650);

					CbCuGb.Tag := 1;

					meoBigo.Top := 82;
          LbmeoBigo.Top := meoBigo.Top + 5;
					meoBigo2.Top := 121;
          LbmeoBigo2.Top := meoBigo2.Top + 5;
          meoBigo3.Top := 159;
          LbmeoBigo3.Top := meoBigo3.Top + 5;
					btnAddBigo.Top := 82 + 22;
					BtnResvView.Top := btnAddBigo.Top;
				end else
				begin
					Pnl_BubinV.Visible := False;

					GBTop5.Height := 200 - 25;
					GB3.Height := 62;

          pSetFormScroll(1, 650 - 25);

					CbCuGb.Tag := 0;

					meoBigo.Top := 82 - 25;
					LbmeoBigo.Top := ( meoBigo.Top + 5 );
          meoBigo2.Top := 121 - 25;
					LbmeoBigo2.Top := ( meoBigo2.Top + 5 );
          meoBigo3.Top := 159 - 25 ;
          LbmeoBigo3.Top := ( meoBigo3.Top + 5 );
					btnAddBigo.Top := 82 + 22 - 25;
					BtnResvView.Top := btnAddBigo.Top;
				end;
			end else
      begin
				if IsBubuinUse then
					Pnl_BubinV.Visible := True;
      end;
			if FileExists(EXECDIRECTORY + 'preview.xml') and GS_JON01_PREVIEW then
				Pnl_BubinV.Visible := True;
{			else
			if GS_FormType = 'Type1'  then LoadJon01FormXML('C:\cmnxe\Type1.xml',0) else
			if GS_FormType = 'Type2'  then LoadJon01FormXML('C:\cmnxe\Type2.xml',0) ;  }
		end;

    { TODO : 접수창 사이즈 조절로 아주 중요 ------------------------------------------------------------------}
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01.pCompareQRateInfo;
Var lRow : Integer;
    sVia : String;
begin
  BtnQRate.Enabled := False;
  BtnQRate.Tag := 0;

  if Trim(GQ_PRate[Self.Tag].sta) <> Trim(meoStartArea.Text) then
  begin
    BtnQRate.Tag := 0;
    BtnQRate.Enabled := True;
    Exit;
  end;
  if Trim(GQ_PRate[Self.Tag].staddr) <> Trim(lcsSta1 +','+ lcsSta2 +','+ lcsSta3) then
  begin
    BtnQRate.Tag := 0;
    BtnQRate.Enabled := True;
    Exit;
  end;

  lRow := 0;
  sVia := '';
  while lRow <= 4 do
  begin
    if GT_PASS_INFO[Self.Tag][lRow].AREA1 = '' then break;
    if sVia = '' then
      sVia := En_Coding(GT_PASS_INFO[Self.Tag][lRow].AREA4)
    else
      sVia := sVia + '/' + En_Coding(GT_PASS_INFO[Self.Tag][lRow].AREA4);
    inc(lRow);
  end;

  if Trim(GQ_PRate[Self.Tag].via) <> Trim(sVia) then
  begin
    BtnQRate.Tag := 0;
    BtnQRate.Enabled := True;
    Exit;
  end;
  if Trim(GQ_PRate[Self.Tag].eda) <>  Trim(meoEndArea.Text) then
  begin
    BtnQRate.Tag := 0;
    BtnQRate.Enabled := True;
    Exit;
  end;
  if Trim(GQ_PRate[Self.Tag].edaddr) <>  Trim(lcsEnd1 +','+ lcsEnd2 +','+ lcsEnd3) then
  begin
    BtnQRate.Tag := 0;
    BtnQRate.Enabled := True;
    Exit;
  end;
  if Trim(GQ_PRate[Self.Tag].rate) <>  Trim(curRate.Value) then
  begin
    BtnQRate.Tag := 0;
    BtnQRate.Enabled := True;
    Exit;
  end;

  // 요금문의 답변 리스트가 있을경우 버튼 클릭 가능
  if ( RQAListView.DataController.RecordCount > 0 ) And
     ( Not gbRQAList.Visible ) then
  begin
    BtnQRate.Tag := 1;
    BtnQRate.Enabled := True;
  end;
end;

procedure TFrm_JON01.pSetSearchMainTel( bView : Boolean );
begin
  if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then Exit;

  if bView then
  begin
    cboBrOnly.Left := 332;
    cboBrOnly.Width := 49;

    cboBranch.Left := 380;
    cboBranch.Width := 140;

    cxTSearchMainTel.Left := 519;
    cxTSearchMainTel.Width := 72;
  end else
  begin
    if Trim(cxTSearchMainTel.Text) = '' then
    begin
      cboBrOnly.Left := 332;
      cboBrOnly.Width := 49;

      cboBranch.Left := 380;
      cboBranch.Width := 171;

      cxTSearchMainTel.Left := 550;
      cxTSearchMainTel.Width := 41;
    end;
  end;
end;

procedure TFrm_JON01.pSetCuTelLabel( iG : Integer );
begin
  if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 0 then
  begin
    if iG = 0 then
    begin
      lblCuTel.Visible := True;
      lblCuTel.Top := 31;
      lblCuTel.Left := 40;
      lblCuTel.Width := cxtCuTel.Width-2;

      cxtCuTel .Style.BorderColor := $004080FF;
      cxtCuTel2.Style.BorderColor := clWindowFrame;
    end else
    if iG = 1 then
    begin
      lblCuTel.Visible := True;
      lblCuTel.Top := 31;
      lblCuTel.Left := 172;
      lblCuTel.Width := cxtCuTel2.Width-2;

      cxtCuTel .Style.BorderColor := clWindowFrame;
      cxtCuTel2.Style.BorderColor := $004080FF;
    end else
    if iG = 2 then
    begin
      lblCuTel.Visible := False;

      cxtCuTel .Style.BorderColor := clWindowFrame;
      cxtCuTel2.Style.BorderColor := clWindowFrame;
    end;
  end else
  if Frm_Main.JON01MNG[Self.Tag].FrmGubun = 1 then
  begin
    if iG = 0 then
    begin
      lblCuTel.Visible := True;
      lblCuTel.Top := 54;
      lblCuTel.Left := 38;
      lblCuTel.Width := cxtCuTel.Width-2;

      cxtCuTel .Style.BorderColor := $004080FF;
      cxtCuTel2.Style.BorderColor := clWindowFrame;
    end else
    if iG = 1 then
    begin
      lblCuTel.Visible := True;
      lblCuTel.Top := 54;
      lblCuTel.Left := 190;
      lblCuTel.Width := cxtCuTel2.Width-2;

      cxtCuTel .Style.BorderColor := clWindowFrame;
      cxtCuTel2.Style.BorderColor := $004080FF;
    end else
    if iG = 2 then
    begin
      lblCuTel.Visible := False;

      cxtCuTel .Style.BorderColor := clWindowFrame;
      cxtCuTel2.Style.BorderColor := clWindowFrame;
    end;
  end;
end;

end.

