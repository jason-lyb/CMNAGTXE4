unit xe_JON01N;

interface

uses
  xe_GNL, System.StrUtils, xe_Structure, Magnetic, dxSkinOffice2010Silver, System.ImageList, Vcl.ImgList, cxImageList, cxCustomListBox, cxListBox,
  AdvUtil, Vcl.Grids, AdvObj, BaseGrid, AdvGrid, MSXML2_TLB, System.DateUtils, System.Math, ComObj, MSHTML, SHDocVw, IniFiles, System.AnsiStrings,
  SmartSRXLib_TLB, xe_gnl3, System.JSON,

  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore,
  cxGroupBox, Vcl.Menus, Vcl.StdCtrls, cxButtons, cxLabel, cxTextEdit, cxMaskEdit, cxDropDownEdit, AdvGlowButton, cxImage,
  Vcl.ExtCtrls, cxMemo, cxRichEdit, cxCurrencyEdit, cxSpinEdit, cxTimeEdit, cxCheckBox, cxCalendar, Vcl.ComCtrls, dxCore, cxDateUtils, Vcl.Buttons,
  cxStyles, cxCustomData, cxFilter, cxData, cxDataStorage, cxNavigator, dxDateRanges, Data.DB, cxDBData, cxGridLevel, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxClasses, cxGridCustomView, cxGrid, dxGDIPlusClasses, cxButtonEdit, dxSkinSharp, dxSkinMetropolisDark,
  dxSkinOffice2007Silver, dxScrollbarAnnotations;

{
A 위치지정방법 어플(고객용어플, 기타 어플) 전화걸기와 연동됨
C 위치지정방법 고객정보에 출발지 내용
D 위치지정방법 동선택
H 위치지정방법 과거이용내역
I 위치지정방법 내부검색
L 위치지정방법 Local선택
M 위치지정방법 MAP선택
N 위치지정방법 네이버검색
T 위치지정방법 타대표번호 타대표번호로 접수콜의 출도 정보
W 위치지정방법 wisenut
B 위치지정방법 추가접수
}
type
  TMsgRecord = record
    Tag : Integer;
    Index : Integer;
  end;

  TJONStaChkXY = record
    Area1 : string;
    Area2 : string;
    Area3 : string;
    Area4 : string;
    Area5 : string;
    X : string;
    Y : String;
		GUIDE_X : string;
    GUIDE_Y : String;
    Gubun : string;
	end;

	TCustChangeInfo = record
		Name         : string;
		CbCuGb       : Integer;
 		CbLevel      : Integer;
    BuCode       : string;
		meoCuCCMemo  : string;
    meoCBMemo    : string;
		meoCuWorMemo : String;
		edt_CardMemo : String;
		cboBrOnly    : Integer;
		KeyNumChange : Boolean;
	end;

  TModifyLoadInfo = record   // 수정시 로드된 정보
    Hp           : string;
    Conf_Area    : String;
    Conf_Area2   : String;
    Conf_Area3   : String;
    Conf_Area4   : String;
    Conf_Area5   : String;
    Conf_X       : String;
    Conf_Y       : String;

    Conf_EdArea  : String;
    Conf_EdArea2 : String;
    Conf_EdArea3 : String;
    Conf_EdArea4 : String;
    Conf_EdArea5 : String;
    Dest_X       : String;
    Dest_Y       : String;

    Conf_Charge  : String;

    Conf_Info    : String;
    Pay_Method   : String;
    Post_Charge  : String;
    Card_Pay_Seq : String;
    Up_Id        : String;
    Status       : String;
  end;

type
  TRec = record
    FieldName: string;  // 그리드 타이틀 명
    TagName: string;    // xml 태그명
  end;

type
  TFrm_JON01N = class(TForm)
    grpTop1: TcxGroupBox;
    cxtJoinNum: TcxTextEdit;
    cxLblConfSlipUseFlg: TcxLabel;
    cxtWorkerNm: TcxTextEdit;
    cxtCallTelNum: TcxTextEdit;
    cxLblCIDUseFlg: TcxLabel;
    btnHistory: TcxButton;
    shpTop1: TShape;
    shpTop2: TShape;
    grpTop2: TcxGroupBox;
    grpStartArea: TcxGroupBox;
    shpTop4: TShape;
    grpViaArea: TcxGroupBox;
    shpVia: TShape;
    shpBtm: TShape;
    grpBtm: TcxGroupBox;
    btnCmdJoin: TcxButton;
    btnCmdWait: TcxButton;
    btnCmdQuestion: TcxButton;
    btnCmdNoSMS: TcxButton;
    btnCmdExit: TcxButton;
    btnPickupInsert: TcxButton;
    btnCmdMultiCall: TcxButton;
    btnCmdUpdSave: TcxButton;
    btnCmdWaitCopy: TcxButton;
    btnCmdJoinCopy: TcxButton;
    Shape6: TShape;
    cxLabel1: TcxLabel;
    btn_LBS: TcxButton;
    cxtStartAreaDetail: TcxRichEdit;
    lblStartAreaName: TcxRichEdit;
    meoStartArea: TcxMemo;
    lbl_00: TcxLabel;
    lbl_06: TcxLabel;
    lbl_01: TcxLabel;
    lbl_02: TcxLabel;
    lbl_04: TcxLabel;
    lbl_03: TcxLabel;
    lblTakAlly: TcxLabel;
    lbl_05: TcxLabel;
    GBStartXYView: TcxGroupBox;
    cxLabel7: TLabel;
    cxtStartXval: TcxTextEdit;
    cxLabel8: TLabel;
    cxtStartYval: TcxTextEdit;
    btnSClose: TcxButton;
    cxViaAreaName1: TcxLabel;
    pnlBody: TPanel;
    grpEndArea: TcxGroupBox;
    Shape7: TShape;
    meoEndArea: TcxMemo;
    cxReEndArea: TcxRichEdit;
    cxLabel2: TcxLabel;
    GBEndXYView: TcxGroupBox;
    cxLabel10: TLabel;
    cxtEndXval: TcxTextEdit;
    cxLabel11: TLabel;
    cxtEndYval: TcxTextEdit;
    btnEClose: TcxButton;
    shpTop5: TShape;
    grpOption: TcxGroupBox;
    lblNoSet: TcxLabel;       // 미지정 사용안함 처리 20201123 정회귀팀장  lyb
    lblRangeRate: TcxLabel;   // 거리요금 사용안함 처리 20201123 정회귀팀장  lyb
    lblOptionSexM: TcxLabel;
    lblOptionSexF: TcxLabel;
    lblWKJAmt: TcxLabel;
    lblWkAge: TcxLabel;
    lblCenterMng: TcxLabel;
    lblPlusYN: TcxLabel;
    cbCardSanction: TcxButton;
    curRate: TcxSpinEdit;
    curKm: TcxTextEdit;
    LbDriverCharge: TcxLabel;
    cxDriverCharge: TcxCurrencyEdit;
    cbbPayMethod: TcxComboBox;
    cbbPostTime: TcxComboBox;
    LblPostPay: TcxLabel;
    edtPostPay: TcxSpinEdit;
    lblCashSave: TcxLabel;
    lblMileSave: TcxLabel;
    grpBubinV: TcxGroupBox;
    cxTBubinMemo: TcxTextEdit;
    cxCurPathRate: TcxCurrencyEdit;
    cxTmWaitTime: TcxTimeEdit;
    cxCurWaitTmRate: TcxCurrencyEdit;
    cxCurRevisionRate: TcxCurrencyEdit;
    grpWorkMemo: TcxGroupBox;
    shpTop6: TShape;
    shpmeoBigo: TShape;
    LbmeoBigo3: TcxLabel;
    LbmeoBigo2: TcxLabel;
    LbmeoBigo: TcxLabel;
    meoBigo: TcxMemo;
    meoBigo2: TcxMemo;
    meoBigo3: TcxMemo;
    edtCuName: TcxTextEdit;
    CbCuGb: TcxComboBox;
    cxtCuBubin: TcxTextEdit;
    imgBubinSch: TImage;
    cb_CarType: TcxComboBox;
    ChkCuSmsNo: TcxCheckBox;
    chkCenterMng: TcxCheckBox;
    cboCuLevel: TcxComboBox;
    shpCenterMemo: TShape;
    shpWorkMemo: TShape;
    shpSimpleMemo: TShape;
    meoCuCCMemo: TcxMemo;
    cxLCuCCMemoFlg: TcxLabel;
    cxLCuWorMemoFlg: TcxLabel;
    meoCuWorMemo: TcxMemo;
    cxLCuCCMemoFlg1: TcxLabel;
    edt_CardMemo: TcxMemo;
    pmBigo: TPopupMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    pmSpop: TPopupMenu;
    MenuItem1: TMenuItem;
    N3: TMenuItem;
    pmEpop: TPopupMenu;
    MenuItem2: TMenuItem;
    N4: TMenuItem;
    advPMnuWTR: TPopupMenu;
    MenuItem3: TMenuItem;
    MenuItem4: TMenuItem;
    popMenu: TPopupMenu;
    miCuNew: TMenuItem;
    miCuUpdate: TMenuItem;
    miCuDel: TMenuItem;
    miCustAdd: TMenuItem;
    btnSBigo1: TcxButton;
    btnEpop: TcxButton;
    chk_AIReCall: TcxCheckBox;
    pnlCard: TPanel;
    shpCard: TShape;
    pnl_charge: TPanel;
    Lbl_charge: TLabel;
    lbl_PlusAreaNotice: TLabel;
    Lbl_Distance: TLabel;
    pnlOrderInfoView: TcxGroupBox;
    GrpCReason: TcxGroupBox;
    lblCReason: TcxLabel;
    cxButton2: TcxButton;
    grpOrderInfoView: TcxGroupBox;
    cxMeoOrderUpInfo: TcxRichEdit;
    shpCBMemo: TShape;
    mmoCbMemo: TcxMemo;
    lblCbMemoFlag: TcxLabel;
    cxtEndAreaDetail: TcxLabel;
    lblEndAreaName: TcxLabel;
    popQRMenu: TPopupMenu;
    miQRate: TMenuItem;
    miQRList: TMenuItem;
		tmrThRealDis: TTimer;
		tmrCharge: TTimer;
    tmHoTranRlt: TTimer;
    tmrResponse: TTimer;
    TT3_1: TTimer;
    tmrKeyDown: TTimer;
    tmrWKSearch: TTimer;
    tmrXYChange: TTimer;
    tmrDistance: TTimer;
    trmBubinState: TTimer;
    lst_BRList: TcxListBox;
    tmFormClose: TTimer;
    tmrDisAc: TTimer;
    tmrStartPos: TTimer;
    grpReserv: TcxGroupBox;
    BtnResvClose: TcxButton;
    BtnResvCsl: TcxButton;
    CbSecond: TcxComboBox;
    cxLabel15: TcxLabel;
    cxLabel4: TcxLabel;
    cxlblResvG: TcxLabel;
    cxlblState: TcxLabel;
    dtpResvDate: TcxDateEdit;
    dtpResvDateJ: TcxDateEdit;
    dtpResvTime: TcxTimeEdit;
    dtpResvTimeJ: TcxTimeEdit;
    grpWkJi: TcxGroupBox;
    cxLabel5: TcxLabel;
    Shape1: TShape;
    cxLblWkJAmt: TcxLabel;
    pnlCallBell: TPanel;
    tmMent: TTimer;
    tmUpsoPnl: TTimer;
    tmLockMent: TTimer;
    pnlCallBellAll: TPanel;
    cxLabel18: TcxLabel;
    lbUpsoName: TcxLabel;
    lbUpsoPee: TcxLabel;
    chkViewLevel: TcxCheckBox;
    grpWkLicType: TcxGroupBox;
    btnWkLicTypeClose: TcxButton;
    cbbLicType: TcxComboBox;
    cxLabel24: TcxLabel;
    grpWkAge: TcxGroupBox;
    btnWkAgeClose: TcxButton;
    cxLabel6: TcxLabel;
    cxLabel20: TcxLabel;
    cxLabel9: TcxLabel;
    edtWkFAge: TcxTextEdit;
    edtWkTAge: TcxTextEdit;
    grpBubinState: TcxGroupBox;
    cxLabel13: TcxLabel;
    lbBubinStateMemo: TcxLabel;
    lbBubinStateName: TcxLabel;
    SpeedButton2: TcxButton;
    grpBrNoMent: TcxGroupBox;
    grpNewCustYN: TcxGroupBox;
    lblBrNoMent: TLabel;
    lblNewCustYN: TLabel;
    btnCMenu: TcxButton;
    cxBtnSpSave: TcxButton;
    btnMileGive: TcxButton;
    btnMileCharge: TcxButton;
    GrpHelp: TcxGroupBox;
    Label7: TLabel;
    cxButton7: TcxButton;
    shpBubinState: TShape;
    cxGBSearch: TcxGroupBox;
    cxGrdCuList: TcxGrid;
    cxCustView: TcxGridDBTableView;
    cxGridDBColumn1: TcxGridDBColumn;
    cxGridDBColumn2: TcxGridDBColumn;
    cxGridDBColumn3: TcxGridDBColumn;
    cxGridDBColumn4: TcxGridDBColumn;
    cxGridDBColumn5: TcxGridDBColumn;
    cxGrdCol6: TcxGridDBColumn;
    cxGrdCol7: TcxGridDBColumn;
    cxGrdCol8: TcxGridDBColumn;
    cxGrdCol9: TcxGridDBColumn;
    cxGrdCol10: TcxGridDBColumn;
    cxGrdCol11: TcxGridDBColumn;
    cxGrdCol12: TcxGridDBColumn;
    cxGrdCol13: TcxGridDBColumn;
    cxGrdCol14: TcxGridDBColumn;
    cxGrdCol15: TcxGridDBColumn;
    cxGrdCol16: TcxGridDBColumn;
    cxGrdCol17: TcxGridDBColumn;
    cxGrdCol18: TcxGridDBColumn;
    cxGrdCol19: TcxGridDBColumn;
    cxGrdCol20: TcxGridDBColumn;
    cxGrdCol21: TcxGridDBColumn;
    cxGrdCol22: TcxGridDBColumn;
    cxGrdCol23: TcxGridDBColumn;
    cxGrdCol24: TcxGridDBColumn;
    cxGrdCol25: TcxGridDBColumn;
    cxGrdCol26: TcxGridDBColumn;
    cxGrdCol27: TcxGridDBColumn;
    cxGrdCol28: TcxGridDBColumn;
    cxGrdCol29: TcxGridDBColumn;
    cxGrdCuListLevel1: TcxGridLevel;
    cxButton46: TcxButton;
    pnlBubin: TPanel;
    PnlKTPOIYN: TcxGroupBox;
    btnHiPOIY: TcxButton;
    btnKtPOIY: TcxButton;
    PnlCtrlV: TPanel;
    btnCtrlVCancel: TcxButton;
    pnl_ViaMent: TcxGroupBox;
    cxLabel14: TcxLabel;
    cxButton8: TcxButton;
    pnl_ViaAlert: TcxGroupBox;
    cxLabel29: TcxLabel;
    cxLabel28: TcxLabel;
    cxLabel27: TcxLabel;
    cxLabel26: TcxLabel;
    cxLabel25: TcxLabel;
    btn_ViaCheck: TcxButton;
    btn_ViaSkip: TcxButton;
    pnl_ViaAlert_Title: TcxLabel;
    shaPrcMsg: TcxGroupBox;
    lblCapItem: TLabel;
    lblRltCnt: TLabel;
    Label4: TLabel;
    pnlServerDisconn: TPanel;
    cxButton4: TcxButton;
    cxLabel16: TcxLabel;
    pnl_LockMent: TcxGroupBox;
    lb_LockMent: TLabel;
    imgLockMent: TcxImage;
    shrDNIS_DSP: TcxGroupBox;
    lblDNISInfo: TcxLabel;
    cxButton6: TcxButton;
    grpAIMent: TcxGroupBox;
    lblAiMent: TcxLabel;
    cxButton1: TcxButton;
    gbRQAList: TcxGroupBox;
    grdRQAList: TcxGrid;
    RQAListView: TcxGridDBTableView;
    cxGridDBColumn6: TcxGridDBColumn;
    cxGridDBColumn8: TcxGridDBColumn;
    cxGridDBColumn7: TcxGridDBColumn;
    cxGridDBColumn9: TcxGridDBColumn;
    RQAListViewColumn9: TcxGridDBColumn;
    RQAListViewColumn10: TcxGridDBColumn;
    cxGridDBColumn10: TcxGridDBColumn;
    cxGridDBColumn11: TcxGridDBColumn;
    cxGridDBColumn12: TcxGridDBColumn;
    cxGridDBColumn13: TcxGridDBColumn;
    RQAListViewColumn1: TcxGridDBColumn;
    RQAListViewColumn2: TcxGridDBColumn;
    RQAListViewColumn3: TcxGridDBColumn;
    RQAListViewColumn4: TcxGridDBColumn;
    RQAListViewColumn5: TcxGridDBColumn;
    RQAListViewColumn6: TcxGridDBColumn;
    RQAListViewColumn7: TcxGridDBColumn;
    RQAListViewColumn8: TcxGridDBColumn;
    cxGridLevel1: TcxGridLevel;
    btnRQALExit: TcxButton;
    shpCuLevel: TShape;
    cxLblCuLevel: TLabel;
    lblLevel: TLabel;
    shpLevel: TShape;
    lblStLock: TcxLabel;
    BtnStLock: TAdvGlowButton;
    btnStartLocalSave: TAdvGlowButton;
    BtnViaAdd: TAdvGlowButton;
    cxLabel19: TcxLabel;
    btnSViewMap: TAdvGlowButton;
    BtnViaLock1: TAdvGlowButton;
    BtnViaMinus1: TAdvGlowButton;
    cxViaMinus1: TcxLabel;
    BtnEdLock: TAdvGlowButton;
    lblEdLock: TcxLabel;
    btnEndLocalSave: TAdvGlowButton;
    btnViewMap: TAdvGlowButton;
    btnDCalc: TAdvGlowButton;
    BtnSR: TAdvGlowButton;
    btn_ChargeSave: TAdvGlowButton;
    BtnQRate: TAdvGlowButton;
    BtnRaLock: TAdvGlowButton;
    Shape9: TShape;
    Shape4: TShape;
    Shape5: TShape;
    cxLblSmartRate: TcxLabel;
    cxLblRate1: TcxLabel;
    cxLblRate2: TcxLabel;
    BtnSmartRate: TAdvGlowButton;
    btnAddBigo: TAdvGlowButton;
    BtnResvView: TAdvGlowButton;
    cxBtnWaitTmRate: TcxButton;
    grpTitle: TcxGroupBox;
    lblCuBubinName: TLabel;
    cxLblActive: TLabel;
    cxCallTitle: TLabel;
    btnNew: TcxButton;
    btnGroup: TcxButton;
    BtnFix: TcxButton;
    BtnClose: TcxButton;
    grpBrSelect: TcxGroupBox;
    cboBrOnly: TcxComboBox;
    cboBranch: TcxComboBox;
    btnBrSelectExit: TcxButton;
    shpTitle: TShape;
    lblCuNameFlag: TcxLabel;
    lblCuBubinFlag: TcxLabel;
    lblOptionCallMu: TcxLabel;
    shpCustLeft: TShape;
    Pop01Setup: TPopupMenu;
    N5: TMenuItem;
    grpModifyTitle: TcxGroupBox;
    cxLblOrderUpInfo: TcxLabel;
    BtnViewMemo: TcxButton;
    grpCustView: TGroupBox;
    cxLabel3: TcxLabel;
    tmr_CustInvert: TTimer;
    pnl_EndDetail_Update: TcxGroupBox;
    edt_EndDetail_Update: TcxTextEdit;
    btn_EndDetail_Update: TAdvGlowButton;
    cxLabel17: TcxLabel;
    grpMileOut: TcxGroupBox;
    btn_MileOut_Close: TcxButton;
    btnMileOut: TcxButton;
    cbbCuProduct: TcxComboBox;
    curOutMileMny: TcxCurrencyEdit;
    cxButton9: TcxButton;
    cxLabel30: TcxLabel;
    cxLabel31: TcxLabel;
    edtMileMemo: TcxTextEdit;
    lb_MileTitle: TcxLabel;
    lbMileCaption: TcxLabel;
    GrpCoupon: TcxGroupBox;
    Shape11: TShape;
    edtCouponHP: TcxTextEdit;
    btnCouponSend: TcxButton;
    btnCouponClose: TcxButton;
    lblCouponDesc: TcxLabel;
    cxLabel32: TcxLabel;
    tmrTitleInvert: TTimer;
    meoViaArea1: TcxMemo;
    btnMile: TcxButton;
    Shape8: TShape;
    Shape3: TShape;
    Shape2: TShape;
    Shape12: TShape;
    Shape10: TShape;
    Shape13: TShape;
    shpMile: TShape;
    Label6: TcxLabel;
    lblCuCntTotal: TcxLabel;
    Label10: TcxLabel;
    lblCoCntTotal: TcxLabel;
    Label8: TcxLabel;
    lblCuCancelR: TcxLabel;
    Label2: TcxLabel;
    lblCuMile: TcxLabel;
    Label5: TcxLabel;
    Label1: TcxLabel;
    lblCuMileUnit: TcxLabel;
    Label16: TcxLabel;
    lblCuMileCnt: TcxLabel;
    lblMoCuMile: TcxLabel;
    Label9: TcxLabel;
    Label11: TcxLabel;
    lblCuMileLost: TcxLabel;
    Label3: TcxLabel;
    shpOCC: TShape;
    img_SpeechBubble: TcxImage;
    btnCustAppinfo: TcxButton;
    pnlCustAppinfo: TcxGroupBox;
    mmoCuInfo: TcxMemo;
    grpMultiV: TcxGroupBox;
    Shape14: TShape;
    Shape15: TShape;
    Shape16: TShape;
    cxLabel21: TcxLabel;
    curCbCharge: TcxCurrencyEdit;
    cxLabel22: TcxLabel;
    curMileCharge: TcxCurrencyEdit;
    cxLabel23: TcxLabel;
    curCardCharge: TcxCurrencyEdit;
    cxLabel33: TcxLabel;
    curCharge: TcxCurrencyEdit;
    grpUseLimitV: TcxGroupBox;
    lblLimitDateNum: TcxLabel;
    Shape17: TShape;
    cxLabel35: TcxLabel;
    cxLabel36: TcxLabel;
    cxLabel37: TcxLabel;
    lblRemainCnt: TcxLabel;
    lblUseCnt: TcxLabel;
    lblLimitCnt: TcxLabel;
    lblRemainCharge: TcxLabel;
    lblUseCharge: TcxLabel;
    lblLimitCharge: TcxLabel;
    btnUseLimitV: TcxButton;
    btnSendEmail: TcxButton;
    cxLabel34: TcxLabel;
    cxLabel38: TcxLabel;
    cxLabel39: TcxLabel;
    cxLabel40: TcxLabel;
    cxLabel41: TcxLabel;
    cxLabel42: TcxLabel;
    cxLabel43: TcxLabel;
    pnlCallingBoard: TPanel;
    lblQuickX: TcxLabel;
    lblNoSmoking: TcxLabel;
		lblCustInDate: TcxLabel;
    lblCustInDateT: TcxLabel;
    cbDriverChargeLocalValue: TcxComboBox;
    btnCmdWaitR: TcxButton;
    cb_WiseNutSntest: TcxComboBox;
    edt_POIIP: TcxTextEdit;
    edt_RPIP: TcxTextEdit;
    Shape18: TShape;
    Shape19: TShape;
    cxCurSupportRate: TcxCurrencyEdit;
    cxCurOtherRate: TcxCurrencyEdit;
    N6: TMenuItem;
    cbMileSanction: TcxButton;
    chkCompulWor: TcxCheckBox;
    lb_CompulWor: TcxLabel;
    cxTxtBrNameCaption: TcxTextEdit;
    cxTSearchMainTel: TcxTextEdit;
    cbTelView: TcxComboBox;
    BtnCall2: TcxButton;
    cxtCuTel2: TcxTextEdit;
    BtnCall: TcxButton;
    cxImage1: TcxImage;
    cxtCuTel: TcxTextEdit;
    lblCuTel2: TcxLabel;
    lblCuTel: TcxLabel;
    shpGrpTop1: TShape;
    lbBubinStateName2: TcxLabel;
    lblCallByInsureFree: TcxLabel;
    img_KakaoTAiCharge: TImage;
    btnCustomSMS: TcxButton;
    cxLabel12: TcxLabel;
    cxLabel44: TcxLabel;
    cxLabel45: TcxLabel;
    lblDRemainCnt: TcxLabel;
    lblDUseCnt: TcxLabel;
    lblDLimitCnt: TcxLabel;
    lblDRemainCharge: TcxLabel;
    lblDUseCharge: TcxLabel;
    lblDLimitCharge: TcxLabel;
    cxLabel52: TcxLabel;
    cxLabel53: TcxLabel;
    cxLabel54: TcxLabel;
    cxLabel55: TcxLabel;
    cxLabel56: TcxLabel;
    cxLabel57: TcxLabel;
    cxLabel58: TcxLabel;
    btnCmdQuestionCopy: TcxButton;
    btn_FindWK: TcxButton;
    lb_CompulWor2: TcxLabel;
    lb_ResJ_: TcxLabel;
    lb_ResD: TcxLabel;
    cb_0D: TAdvGlowButton;
    BtnResJ: TcxButton;
    BtnResD: TcxButton;
    edtAppMemo: TcxTextEdit;
		procedure btnCmdExitClick(Sender: TObject);
    procedure BtnCloseClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormDestroy(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure cbCardSanctionClick(Sender: TObject);
    procedure MenuItem3Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure BtnViaAddClick(Sender: TObject);
    procedure BtnViaMinus1Click(Sender: TObject);
    procedure meoBigoPropertiesChange(Sender: TObject);
    procedure LbmeoBigoClick(Sender: TObject);
    procedure meoBigoExit(Sender: TObject);
    procedure meoBigoEnter(Sender: TObject);
    procedure meoBigoFocusChanged(Sender: TObject);
    procedure meoBigoKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoBigoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure grpWorkMemoResize(Sender: TObject);
    procedure LbmeoBigo2Click(Sender: TObject);
    procedure LbmeoBigo3Click(Sender: TObject);
    procedure meoBigo2Exit(Sender: TObject);
    procedure meoBigo2FocusChanged(Sender: TObject);
    procedure meoBigo2KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoBigo2PropertiesChange(Sender: TObject);
    procedure meoBigo3Exit(Sender: TObject);
    procedure meoBigo3FocusChanged(Sender: TObject);
    procedure meoBigo3KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoBigo3PropertiesChange(Sender: TObject);
    procedure grpTop2Resize(Sender: TObject);
    procedure cxLCuCCMemoFlgClick(Sender: TObject);
    procedure cxLCuWorMemoFlgClick(Sender: TObject);
    procedure meoCuCCMemoEnter(Sender: TObject);
    procedure meoCuCCMemoExit(Sender: TObject);
    procedure meoCuCCMemoFocusChanged(Sender: TObject);
    procedure meoCuCCMemoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoCuCCMemoPropertiesChange(Sender: TObject);
    procedure meoCuWorMemoEnter(Sender: TObject);
    procedure meoCuWorMemoExit(Sender: TObject);
    procedure meoCuWorMemoFocusChanged(Sender: TObject);
    procedure meoCuWorMemoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoCuWorMemoPropertiesChange(Sender: TObject);
    procedure edt_CardMemoEnter(Sender: TObject);
    procedure edt_CardMemoExit(Sender: TObject);
    procedure edt_CardMemoFocusChanged(Sender: TObject);
    procedure edt_CardMemoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure edt_CardMemoPropertiesChange(Sender: TObject);
    procedure cxLCuCCMemoFlg1Click(Sender: TObject);
    procedure cxtCuTelMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure BtnStLockClick(Sender: TObject);
    procedure BtnEdLockClick(Sender: TObject);
    procedure BtnViaLock1Click(Sender: TObject);
    procedure BtnRaLockClick(Sender: TObject);
    procedure BtnResvViewClick(Sender: TObject);
    procedure cxLblOrderUpInfoClick(Sender: TObject);
    procedure lblCbMemoFlagClick(Sender: TObject);
    procedure mmoCbMemoEnter(Sender: TObject);
    procedure mmoCbMemoExit(Sender: TObject);
    procedure mmoCbMemoFocusChanged(Sender: TObject);
    procedure mmoCbMemoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure mmoCbMemoPropertiesChange(Sender: TObject);
    procedure cxTSearchMainTelExit(Sender: TObject);
    procedure cxTSearchMainTelKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cxTSearchMainTelKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cxTSearchMainTelMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure cboBranchClick(Sender: TObject);
    procedure cboBranchMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure cboBranchMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure cboBrOnlyClick(Sender: TObject);
    procedure cboBrOnlyEnter(Sender: TObject);
    procedure cboBrOnlyKeyPress(Sender: TObject; var Key: Char);
    procedure cboBrOnlyPropertiesChange(Sender: TObject);
    procedure cbTelViewPropertiesChange(Sender: TObject);
    procedure BtnCall2Click(Sender: TObject);
    procedure BtnCallClick(Sender: TObject);
    procedure cxtCuTelKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnCmdJoinClick(Sender: TObject);
    procedure btnCmdWaitClick(Sender: TObject);
    procedure btnCmdQuestionClick(Sender: TObject);
    procedure btnCmdNoSMSClick(Sender: TObject);
    procedure btnCmdJoinCopyClick(Sender: TObject);
    procedure btnCmdWaitCopyClick(Sender: TObject);
    procedure btnCmdMultiCallClick(Sender: TObject);
    procedure btnPickupInsertClick(Sender: TObject);
    procedure btnCmdUpdSaveClick(Sender: TObject);
    procedure lblTakAllyClick(Sender: TObject);
    procedure lbl_00MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure btnWkLicTypeCloseClick(Sender: TObject);
    procedure lblOptionCallMuClick(Sender: TObject);
    procedure lblWkAgeClick(Sender: TObject);
    procedure edtWkFAgeKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure edtWkTAgeKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnWkAgeCloseClick(Sender: TObject);
    procedure lblPlusYNClick(Sender: TObject);
		procedure cbbPayMethodPropertiesChange(Sender: TObject);
    procedure cxButton2Click(Sender: TObject);
    procedure btnGroupClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure N3Click(Sender: TObject);
    procedure btnSCloseClick(Sender: TObject);
    procedure btnECloseClick(Sender: TObject);
    procedure cboCuLevelPropertiesChange(Sender: TObject);
		procedure lst_BRListDblClick(Sender: TObject);
    procedure lst_BRListExit(Sender: TObject);
		procedure lst_BRListKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cboBranchPropertiesChange(Sender: TObject);
    procedure CbCuGbPropertiesChange(Sender: TObject);
    procedure btnHistoryClick(Sender: TObject);
    procedure cxImage1Click(Sender: TObject);
    procedure cxButton7Click(Sender: TObject);
    procedure edtCuNameKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure imgBubinSchClick(Sender: TObject);
    procedure ChkCuSmsNoClick(Sender: TObject);
    procedure chkCenterMngClick(Sender: TObject);
    procedure BtnViewMemoClick(Sender: TObject);
    procedure chkViewLevelClick(Sender: TObject);
    procedure cxBtnSpSaveClick(Sender: TObject);
    procedure btnMileGiveClick(Sender: TObject);
    procedure cxButton9Click(Sender: TObject);
    procedure btn_MileOut_CloseClick(Sender: TObject);
    procedure cbbCuProductKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cbbCuProductPropertiesChange(Sender: TObject);
    procedure curOutMileMnyKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure edtMileMemoKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnMileOutClick(Sender: TObject);
    procedure miCuNewClick(Sender: TObject);
    procedure miCuUpdateClick(Sender: TObject);
    procedure miCuDelClick(Sender: TObject);
    procedure miCustAddClick(Sender: TObject);
    procedure tmUpsoPnlTimer(Sender: TObject);
    procedure tmMentTimer(Sender: TObject);
    procedure lblNewCustYNClick(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure cxCustViewCellDblClick(Sender: TcxCustomGridTableView; ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure cxCustViewEditKeyPress(Sender: TcxCustomGridTableView; AItem: TcxCustomGridTableItem; AEdit: TcxCustomEdit; var Key: Char);
    procedure cxButton46Click(Sender: TObject);
    procedure btnHiPOIYClick(Sender: TObject);
    procedure btnKtPOIYClick(Sender: TObject);
    procedure tmFormCloseTimer(Sender: TObject);
    procedure tmrStartPosTimer(Sender: TObject);
    procedure tmLockMentTimer(Sender: TObject);
    procedure trmBubinStateTimer(Sender: TObject);
    procedure tmrXYChangeTimer(Sender: TObject);
    procedure tmrChargeTimer(Sender: TObject);
    procedure tmrWKSearchTimer(Sender: TObject);
    procedure tmHoTranRltTimer(Sender: TObject);
    procedure meoStartAreaEnter(Sender: TObject);
    procedure meoStartAreaExit(Sender: TObject);
    procedure meoStartAreaKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoStartAreaKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoStartAreaMouseEnter(Sender: TObject);
    procedure meoStartAreaMouseLeave(Sender: TObject);
    procedure meoStartAreaPropertiesChange(Sender: TObject);
    procedure tmrKeyDownTimer(Sender: TObject);
    procedure meoViaArea1Enter(Sender: TObject);
    procedure meoViaArea1Exit(Sender: TObject);
    procedure meoViaArea1KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoViaArea1KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure meoViaArea1PropertiesChange(Sender: TObject);
    procedure meoEndAreaEnter(Sender: TObject);
    procedure meoEndAreaExit(Sender: TObject);
    procedure meoEndAreaKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
		procedure meoEndAreaKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
		procedure meoEndAreaPropertiesChange(Sender: TObject);
    procedure btnStartLocalSaveClick(Sender: TObject);
    procedure btnEndLocalSaveClick(Sender: TObject);
    procedure btnViewMapClick(Sender: TObject);
    procedure btnSViewMapClick(Sender: TObject);
    procedure btnDCalcClick(Sender: TObject);
    procedure BtnSRClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormDeactivate(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btn_ChargeSaveClick(Sender: TObject);
    procedure BtnSmartRateClick(Sender: TObject);
    procedure BtnQRateClick(Sender: TObject);
    procedure curRateEditing(Sender: TObject; var CanEdit: Boolean);
    procedure curRateEnter(Sender: TObject);
    procedure curRateExit(Sender: TObject);
    procedure curRateKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure curRateKeyPress(Sender: TObject; var Key: Char);
    procedure curRateKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure curRateMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure curRatePropertiesChange(Sender: TObject);
    procedure curKmEnter(Sender: TObject);
    procedure curKmExit(Sender: TObject);
    procedure LbDriverChargeClick(Sender: TObject);
    procedure cxDriverChargeEnter(Sender: TObject);
    procedure cxDriverChargeExit(Sender: TObject);
    procedure cxDriverChargeFocusChanged(Sender: TObject);
    procedure cxDriverChargePropertiesChange(Sender: TObject);
    procedure cbbPostTimePropertiesChange(Sender: TObject);
    procedure LblPostPayClick(Sender: TObject);
    procedure edtPostPayPropertiesChange(Sender: TObject);
    procedure edtPostPayEnter(Sender: TObject);
    procedure edtPostPayExit(Sender: TObject);
    procedure edtPostPayFocusChanged(Sender: TObject);
    procedure edtPostPayKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure edtPostPayKeyPress(Sender: TObject; var Key: Char);
    procedure cxCurPathRateKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure tmrThRealDisTimer(Sender: TObject);
    procedure cxtStartYvalPropertiesChange(Sender: TObject);
    procedure TT3_1Timer(Sender: TObject);
    procedure cxtEndYvalPropertiesChange(Sender: TObject);
    procedure tmrResponseTimer(Sender: TObject);
    procedure tmrDistanceTimer(Sender: TObject);
    procedure tmrDisAcTimer(Sender: TObject);
    procedure btn_ViaCheckClick(Sender: TObject);
    procedure btn_ViaSkipClick(Sender: TObject);
    procedure CbSecondPropertiesChange(Sender: TObject);
    procedure BtnResDClick(Sender: TObject);
    procedure BtnResvCslClick(Sender: TObject);
    procedure BtnResvCloseClick(Sender: TObject);
    procedure cxButton1Click(Sender: TObject);
    procedure miQRateClick(Sender: TObject);
    procedure miQRListClick(Sender: TObject);
    procedure popQRMenuPopup(Sender: TObject);
    procedure btnRQALExitClick(Sender: TObject);
    procedure RQAListViewCellDblClick(Sender: TcxCustomGridTableView; ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure RQAListViewColumn10GetProperties(Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
      var AProperties: TcxCustomEditProperties);
    procedure RQAListViewColumn10PropertiesButtonClick(Sender: TObject; AButtonIndex: Integer);
    procedure RQAListViewEditKeyPress(Sender: TcxCustomGridTableView; AItem: TcxCustomGridTableItem; AEdit: TcxCustomEdit; var Key: Char);
    procedure grpTitleMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure btnBrSelectExitClick(Sender: TObject);
    procedure cxTxtBrNameCaptionMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure grpTop2MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure btnAddBigoClick(Sender: TObject);
    procedure lblCuNameFlagClick(Sender: TObject);
    procedure lblCuBubinFlagClick(Sender: TObject);
    procedure edtCuNameEnter(Sender: TObject);
    procedure cxtCuBubinEnter(Sender: TObject);
    procedure edtCuNameExit(Sender: TObject);
    procedure cxtCuBubinExit(Sender: TObject);
    procedure edtCuNameFocusChanged(Sender: TObject);
    procedure cxtCuBubinFocusChanged(Sender: TObject);
    procedure edtCuNamePropertiesChange(Sender: TObject);
    procedure cxtCuBubinPropertiesChange(Sender: TObject);
    procedure cxReEndAreaPropertiesChange(Sender: TObject);
    procedure lblStLockClick(Sender: TObject);
    procedure lblEdLockClick(Sender: TObject);
    procedure N5Click(Sender: TObject);
    procedure BtnFixClick(Sender: TObject);
    procedure tmr_CustInvertTimer(Sender: TObject);
    procedure btn_EndDetail_UpdateClick(Sender: TObject);
    procedure cxReEndAreaClick(Sender: TObject);
    procedure tmrTitleInvertTimer(Sender: TObject);
    procedure btnMileClick(Sender: TObject);
    procedure cxtCuTel2PropertiesChange(Sender: TObject);
    procedure img_SpeechBubbleClick(Sender: TObject);
    procedure img_SpeechBubbleMouseLeave(Sender: TObject);
    procedure img_SpeechBubbleMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure cxViaMinus1Click(Sender: TObject);
    procedure OnActiveMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure shpOCCMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure shpMileMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure Label6MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure Label2MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure btnCMenuDropDownMenuPopup(Sender: TObject; var APopupMenu: TPopupMenu; var AHandled: Boolean);
    procedure btn_LBSClick(Sender: TObject);
    procedure cxButton8Click(Sender: TObject);
    procedure btnCustAppinfoClick(Sender: TObject);
    procedure lblOptionSexMMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure lblOptionSexFMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure btnSBigo1DropDownMenuPopup(Sender: TObject; var APopupMenu: TPopupMenu; var AHandled: Boolean);
    procedure btnEpopDropDownMenuPopup(Sender: TObject; var APopupMenu: TPopupMenu; var AHandled: Boolean);
    procedure chk_AIReCallMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure onMultiChargeEnter(Sender: TObject);
    procedure onMultiChargeKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure onMultiChargePropertiesChange(Sender: TObject);
    procedure btnUseLimitVClick(Sender: TObject);
    procedure Shape17MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure lblCashSaveMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure btnSendEmailClick(Sender: TObject);
    procedure cxDriverChargeKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure curCbChargeExit(Sender: TObject);
    procedure btnSBigo1MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure btnEpopMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure btnAddBigoMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure cbDriverChargeLocalValuePropertiesChange(Sender: TObject);
    procedure btnCmdWaitRClick(Sender: TObject);
    procedure cxCurRevisionRateExit(Sender: TObject);
    procedure cxCurPathRateKeyPress(Sender: TObject; var Key: Char);
    procedure cxCurSupportRateKeyPress(Sender: TObject; var Key: Char);
    procedure cxCurOtherRateKeyPress(Sender: TObject; var Key: Char);
    procedure N6Click(Sender: TObject);
    procedure cbMileSanctionClick(Sender: TObject);
    procedure chkCompulWorPropertiesChange(Sender: TObject);
    procedure lblCallByInsureFreeMouseDown(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure img_KakaoTAiChargeClick(Sender: TObject);
    procedure dtpResvDateJPropertiesEditValueChanged(Sender: TObject);
    procedure dtpResvTimeJPropertiesEditValueChanged(Sender: TObject);
    procedure btnCustomSMSClick(Sender: TObject);
    procedure btnCmdQuestionCopyClick(Sender: TObject);
    procedure btn_FindWKClick(Sender: TObject);
    procedure lb_ResJ_MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure BtnResJClick(Sender: TObject);
  private
    { Private declarations }

    sRespSParam1, sRespSParam2, sRespSParam3 : String;  // 와이즈넛 성공/실패 여부 전송 파라메타 - 출발지
    sRespEParam1, sRespEParam2, sRespEParam3 : String;  // 와이즈넛 성공/실패 여부 전송 파라메타 - 도착지

    gsPlusYNHint : String;

    sSSlip : array [0..CHECK_MAX_LIST] of string;
		iSCount : array [0..CHECK_MAX_LIST] of Integer;
    iSRow : array [0..CHECK_MAX_LIST] of Integer;
    sESlip : array [0..CHECK_MAX_LIST] of string;
		iECount : array [0..CHECK_MAX_LIST] of Integer;
    iERow : array [0..CHECK_MAX_LIST] of Integer;

    gsStArea : array [0..JON_MAX_CNT - 1] of String;  // 출발지 내용 저장 - 경유지 분리건으로 선언   2018.07.18 LYB
    gsEdArea : array [0..JON_MAX_CNT - 1] of String;  // 도착지 내용 저장 - 경유지 분리건으로 선언

    CustGroup : TCustGroup;

    AUseMileage : Boolean;

    gbCallRouteBrChange : Boolean;

    sProdName : String;

    sPreSuggestWord : String;

 		SCboLevelSeq : TStringList;

    sAnsiSchTxt : AnsiString;

    loc_Ud_xdom: msDomDocument; // 수정모드 전용 XML 전문 Pasing 변수.
    loc_Ud_lst_Node: IXMLDomNodeList;

    FHidePhoneNum: Boolean; // 수정전문 요청후 화면 초기화 완료여부

    lvs_ReceiveText: string; // 임시변수 : Socket에서 사용
    sNowRate: string; // 현재 지사의 기본요금 설정액.

    loc_bUpdateLock: boolean;   // 수정화면 Lock 설정 여부.[True:설정, False:미설정]

		FBigoList: TStringList;
		FSpopList: TStringList;
		FEpopList: TStringList;

    FCurrBigo: TcxMemo;
    FCurrSpop: TcxMemo;
    FCurrEpop: TcxMemo;

    giRealKmCnt, giRealKmIdx : Integer;
		searchBRlist: TStringList;  //접수장 지사명, 대표번호 검색 시 인덱스 저장 2013.06.15  KHS

    loc_Up_Recv_YN: boolean;

    loc_TmClose: string; // 화면 종료 타이머 변수. CDS. 080830.

    lsBr_KeyNumber : String;

		loc_sHoTransArea: string; // 콜라우팅 호전환 지역 정보 저장.

		pbPayMethod : Integer;   // 법인콜 체크박스 선택시 이전값 되돌리기 위한 변수.
		glsMapRltVal : TStringList;  // 출/도착지 조회 결과값을 매칭 점수 저장.

		loc_RateNOT : boolean; // 요금 계산을 막음.
    loc_Modify : boolean;  // 수정모드여부

    pbISStartEndXY : Boolean;   // 20130724 LYB 고객전화번호 조회 시 출발지/도착지에 자료가 있는지 없는지 여부 체크

    // ------------------------------  고객
    FCustBrTelYN: string;

    PAY_METHOD_BUSAN_YN : Boolean;   // 하트콜 사용유무 20150610

    sTelRanDom : String;

		bOther : Boolean; //타업체 접수건 여부 f:없음. T:있음     2016.07.16 KHS

		FCustChangeInfo, FChkCCI : TCustChangeInfo; //콜링 오더의 지사변경 시 고객 기본정보 유지를 위하여 사용 2016.07.20 KHS

    FModifyLoadInfo : TModifyLoadInfo;

		gUpdate_CardTranNo : string; //수정창(결제구분 = 후불(카드)) 오픈 시 원 결제 Tran_No를 저장한다 2016.08.24 KHS

		bCurRateEditMode : Boolean;

		gsCuCallBellID, gsOrderCallBellID, gsUpdateCallBellStatus, gsUpdateCallBellID : string; //콜벨업소 아이디(고객정보저장된 ID, 오더정보에저장된ID), 수정 시 저장될 ID

		sNaverSuggest : string; //네이버 자동완성 검색어

		gsKDWkHp  : string; //KD드라이버 연락처. 빈값이 아니면 KD기사
		gsSvrWkHp : string; //서버에서 받은 기사 전화번호 #기사 때문에 서버에서 받은 번호를 사용해야됨

		iPnlWorkCnt, iAPnlCustCnt, iBPnlCustCnt : Integer;

		bKakaoOrder : Boolean; //수정창 오픈시 카카오 오더여부 Ture : 카카오 False : 일반
		bResToJoin : Boolean; //대기 해제 여부 2019.06.18 KHS
		bJoinBtn : Boolean; //접수버튼 클릭여부(T : 수정버튼클릭) 대기오더 접수로 전환에서 사용

		bAppOrder, bAppOrderOpen : Boolean; //앱오더 여부 True-앱오더, false-일반오더, 앱오더창 여부 True-앱오더, false-일반오더;
    giBtnIndex : Integer;  //앱오더에서 접수버튼 눌렀는지 대기버튼 눌렀는지 확인용 giBtnIndex = -1; 0:접수, 5:대기
		gAppSlip, gAppInDate : string;// 앱접수창 오픈용 접수번호화 접수일자
		gFocusInDex : Integer;

    bQuestionSave : Boolean;  // 이중등록여부

		gbLimitOverYn : Boolean;  // 개인이용한도 초과시 후불접수가능
		gsKMAiChargeStr : string; //kakaoT AI요금조회를 위한 좌표값
		
		procedure mniUserClick(Sender: TObject);
    procedure mniSpopClick(Sender: TObject);
    procedure mniEpopClick(Sender: TObject);

    // 고객정보 컨트롤을 초기화
    procedure ControlClear(bTF: boolean = False);   // bTF. 콜링여부
    procedure SetPnlWorkMemoSize;
    // 대기시간별 요금 메뉴 생성.
    procedure Proc_WTRMenuCreate(iSeq : Integer; sValue, sTitle, sComponentName: string; iTagMoney: Integer);
    // 대기시간 메뉴 클릭시 대기시간, 대기요금 입력 이벤트 처리
    procedure Proc_WTRateMenu_Click(Sender: TObject);
    procedure pSetCuTelLabel(iG: Integer);

    function proc_TakCall_CtrlYN: string;
    function proc_AIOB_CtrlYN: string;
    function proc_PlusCall_YN_Cont: string;
    function func_MilePayMileSave_YN: Boolean;
    function func_CashPayMileSave_YN: Boolean;

    procedure SetPnlCustMemoSize(Sender: TObject);
    function func_LBS_YN: Boolean;
    // 접수 전에 조회 조건 관련 전역변수 초기화..
    procedure SetPrivateVariable;
    procedure pSetSearchMainTel(bView: Boolean);
    procedure LoadCustLevel;
    procedure LoadPayMethod;
    procedure SetCustLevelData;
    procedure DefaultCustLevel;
    function GetCustLevelSeq: string;
    procedure SetPayMethod(const Value: string = PAY_METHOD_MONEY);
    procedure SetCustLevelSeq(bCheck : Boolean; ASeq : string);
		// 대표번호 검색 리스트 생성 2013.06.15 KHS..
		function Func_KeyNumberList_Search: Boolean;
		// 지사명으로 지사리스트 뿌리기..  2013.06.15 KHS
		function proc_BrNameList_Search: boolean;
    // 고객 SEQUENCE 조회 해 온다.
		procedure Proc_CuSeq_Select;
    // 고객 SEQUENCE 조회에 대한 결과를 처리 한다.
    procedure Proc_RequestResult(ls_rxxml: String; ls_ClientKey: string);
		// 지사별 멘트 구하기..  CDS. 080827.
    function Func_brtel_memo(sBrNo, sKeyNum: string): string;
    // 버튼 활성/비활성 처리.
    procedure Proc_BtnEnabled(bTF: boolean = True);
    // 접수전 기본값 체크..
    function NotNullCheck(b24HourCheck: boolean = False): Boolean;
    procedure SetCboBranch(bBrNoSetType: boolean = False);
    // 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
    procedure Proc_Cust_AreaSave(sStartDest: string);
    // 고객 SMS거부 정보를 저장한다.
    procedure Proc_CustSMSSave;
		// 고객 마일리지를 즉시차감 처리 한다.
		procedure Proc_CustMileDeduct(ATag : integer; AMsg:string);
		procedure SetCuProduct(AProdName: string; AProdPrice: Integer);
		function GetPriceFromProduct(AStr: string): Integer;
    procedure pCall_Cust(sCtHp: string);
    procedure _SetItem(Combo: TcxComboBox; AValue: string);
    function proc_PlusCall_RateYN: Boolean;
    function func_ecukrCheck: Boolean;
    function IsPayMethodPost: Boolean;
    function IsUseCoupon(ABrNo: string): Boolean;
    procedure Proc_GetTelPOISearch(vTelNo: String);
    function proc_PlusCall_CtrlYN: string;
    procedure SetPosLblDistance;
    procedure RemovePriceDesc;
    procedure SetMunuChecked(sName: String; bCheck: Boolean);

    procedure SetCustBrTelYN(const Value: string);
    procedure SetCustAppInfo(AAppCode, AAppLastRegDate, AAppLastDelDate, AAppLastFinishDate, AAppCuArea, AAppTermModel, AAppTermOS,
      AAppDelYn: string);
		function func_ResToJoin(AGubun, ASlip, AStatus: string): Boolean;
    function func_ReaToJoin(ASlip, AStatus: string): Boolean;
		procedure LoadPostTime;
    function GetPostTime: string;
    procedure SetPostTime(const Value: string);
    function GetPayMethod: string;
    function IsMultiCallFixPrice: Boolean;
    procedure pCompareQRateInfo;
    procedure ptmrThRealDisTimer(var RealKmPtr: TRealKmRecord);
    function fGetCity(sGubun, sCity, sWard, sStree, sDep: String): String;
    function proc_Wisenut_GetTelPOI_Proc(wURL, word: string): Boolean;
    function proc_Wisenut_GetTelPOILast(wURL, word: String): Boolean;
    procedure proc_WiseNut_Response(sPoiName, sGubun, sNo: String);
    procedure proc_CaActiveComplete;
    function func_ViaCheck(AStart: String): Boolean;
    procedure CheckResvDateTime(bView: Boolean);
    function GetTimeGap(StrStartDate, StrEndDate: string): Int64;
    function fGetDiffDay(sEndDate: String): String;
    procedure pSetLockMent(gubun: Integer);
    procedure pClearModifyInfo;
    procedure pQuestionSave;
    function pLocalRoutingCheck : Boolean;
    procedure pBaseCharge( sBrNo, sKeyNumber : String );
    procedure pNoShowSave;
    function func_distance_charge(vTotalDis : Real; Var bPeak : Boolean; Var sDesc : String; sPeakPlus : String = 'n' ) : Integer;
    procedure pSetCardRate;

    property PostTime: string read GetPostTime write SetPostTime;

    // 고객 기본정보를 저장 한다.
    procedure Proc_CustBasicSave;
		// 조회 고객삭제를 한다.
    procedure proc_delete_customer;
    // 고객조회 그리드에서 그리드 선택시에 고객관련 정보를 입력 컨트롤에 Display~
    procedure Proc_GridCustChoice(iRcIdx: Integer);
    //기사수수료 검색
		procedure Proc_Driver_Charge;
    //  사용자 추가 지역 저장
		procedure proc_Save_Area(iGubun: Integer);

		// 주문 접수를 처리 한다.
		function Proc_Save(ss_Mode: string) : Boolean;
    // 오더를 접수등록을 한다.
    procedure Proc_OrderJoinIns;
    // 오더를 대기로 접수 한다.
    procedure Proc_OrderWaitJoinIns;
    // 오더를 문의로 접수 한다.
    procedure Proc_OrderQuesJoinIns;
    // 오더 수신거부 등록을 한다.
    procedure Proc_OrderSMSRecvNo;
    // 조회 한 오더 정보를 수정 한다. : DB Update~~
		procedure Proc_OrderUpdateSave(AStatus: string = '');

		procedure proc_AutoSetEtc1;
    function fBubinLimitCheck : Boolean;

		//KM AI요금조회
		procedure proc_KMAiRate(AGubun : integer=0); //0:기본, 1:T버튼 클릭
		
    function func_AngelPlusMarker(AHdNo : string) : string;
	public
    Jon03Tag : Integer;

		ViaSA1        : array[1..5] of string;  // 경유지 시도
		ViaSA2        : array[1..5] of string;  // 경유지 시군구
		ViaSA3        : array[1..5] of string;  // 경유지 읍면동
		ViaAreaDetail : array[1..5] of string;  // 경유지 검색어
		ViaAreaName   : array[1..5] of string;  // 경유지 POI
		DocId         : array[1..5] of string;  // UID
    CellSel       : array[1..5] of String;  // 셀선택구분
		SchWord       : array[1..5] of String;  // 검색어
		XposVia       : array[1..5] of string;  // 추가된 경유지 X좌표
		YposVia       : array[1..5] of string;  // 추가된 경유지 Y좌표
		GUIDE_X       : array[1..5] of string;  // 추가된 경유지 GUIDE_X좌표
		GUIDE_Y       : array[1..5] of string;  // 추가된 경유지 GUIDE_Y좌표

		ABubinStateIndex : Integer; //0:정상, 1~2 : 이용제한 , 3 : 기타(정상이용)

    gJONStaChkXY, gJONEndChkXY : TJONStaChkXY;  // 출발지 좌표 오류 검증을 위한 내부 레코드 변수 20120806 LYB

    giArea_Charge_YN : String;

    fCruKm : Real;   // 거리
    fChgKm : Real;   // 배수거리
    fDirKm : Real;   // 직선거리
    fTotalTime : Real;  //  소요시간
    fViaKm : Real;   // 경유거리
    fStEdKm : Real;   // 경유계산시 출도착지 거리
    bViaKm : Boolean; // 경유여부

    RVHandle : Hwnd;

    bNoShowSave : Boolean;  // 노쇼저장여부
    fNoShwState : String;   // 노쇼저장시 상태값 처리
    giKmComplet : Boolean;
    giViaKmComplet : Boolean;
    giKmComPletG : String;

    pJON01Dock : TUNDOCKMNG;

    gsRanDom, gslsText, gsNaverRanDom : AnsiString;
    gilsCnt : Integer;
    gbEnter : Boolean;

		gsCuTelHint : string;    // 검색전 전화번호 저장(검색후 다른지 비교)

		FResize : Boolean;
		locNowControlName: string; // 현재 활성화된 컨트롤 명.

		ViaNowTag : integer;   //현재 입력중인 경유지위치
		ViaADDTag : integer;   //현재 추가한 경유지위치

		blChkCuSMS, blCompulWor : Boolean;   // 접수배차
		gWkSabun : String;   //접수배차 기사사번

		cxViaAreaName : array[2..5] of TcxLabel;
		meoViaArea    : array[2..5] of TcxMemo;
		BtnViaMinus   : array[2..5] of TAdvGlowButton;
		BtnViaLock    : array[2..5] of TAdvGlowButton;
		cxViaMinus    : array[2..5] of TcxLabel;

    slCboBranch : TStringList;

    bCardSanction : Boolean;

		FIsCalcPrice: Boolean;  // JON03에서 고객 전화번호로  조회시 사용함.
		sTaksong, sTakHwak, sStickCall, sLicType : string; //탁송콜, 스틱콜 여부 기본 :n, n 2012.04.24 KHS //탁송확대 추가 2017.04.07 KHS

		lcsCu_seq: string; // 현재 선택된 고객seq
		locHDNO, locBRNO, locKNum, locSndTime : string;  // 조회 고객 본사, 지사코드, 대표번호 임시저장.
		locCallingBrNo, locCallingBrName, locCallingKeyNumber : String;
		sOrgHDNO, sOrgBRNO, sOrgKNum : string ; //수정창 오픈 시 최초 본사, 지사, 대표번호, 고객전화번호
    locCustHP_MainNum_Search: string;

    sBHSAddr, sBHEAddr : String;
		bAUTOCMDQUESTION : Boolean; // 접수설정에서 종료 시 자동 문의 처리 할경우 종료 무한 루프 방지 위함  20120801  LYB

		locsCuTel, locsCuTel2, locsCuTelTxtBoxVal: string;
    locbWkToCust: Boolean;

    J30ShowS, J30ShowE : Boolean;      //접수, 수정, 문의 에 따른 조회창 띄울지 여부값

    TmplcsSta1, TmplcsSta2, TmplcsSta3, TmplcsSta4, TmplcsSta5, TmplcsX, TmplcsY, TmpDef : String;  // KT POI검색시 과거이용내역 POI 임시 저장

		lcsSta1, lcsSta2, lcsSta3, lcsSta4, lcsConfAREA4, lcsStaDocId, lcsStaCellSel, lcsStaSchWord, lcsStaDebug, lcsStaUrl, GS_Grid_DEP : string; // 출1, 출2, 출3
		lcsEnd1, lcsEnd2, lcsEnd3, lcsEnd4, lcsEndDocId, lcsEndCellSel, lcsEndSchWord, lcsEndDebug, lcsEndUrl, GS_Grid_DES : string; // 도1, 도2, 도3
		lg_Save: string;     //저장구분 1:저장, 2:업데이트

    lcsStaQ1, lcsStaQ2, lcsStaQ3 : String;

    StartListN, EndListN : String;    // 출 도착지 리스트 선택 시 어떤 리스트 선택했는지 번호값(1: 지역리스트, 2: 상세지명, 3: 포탈검색)

		locCardPaySeq, locCardTranNo, locCardPayInfo : string; // 결제일련번호, 거래번호, 카드결제정보저장(파이프 구분자로 저장됨)
		gsUpdateCardPaySeq : string; //수정창에서 카드/현영 결제가 되었는지 확인하기 위한 변수
		locLogSeq, locDNIS: string;
    locWkSabun, locWkBrNo: string; // 조회기사 사번, 기사지사코드 저장.

		OrgRate : Integer;  //요금저장변수 2012.04.23 KHS
		gRate_Update, gCbCharge_Update : Integer;  //수정창 오픈시 최초 요금, 기사입금액  2018.12.11 KHS

		sCust_Gubun : string; //고객인지 기사인지 구분 1:기사, 2:고객, 0 : 기사+고객 2013.05.22 KHS
    FHasTodayData: Boolean; // 당일 내역 존재 여부
    FWk_sabun : String;  // 기사 사번
    gsWkSubun_Up : String;//업데이트시 배차기사사번 용(예약오더 수정시 초기화 가능) 20211125KHS
                          //FWk_sabun 를 사용하려 했으나 다른곳과 연관되서 새로운 변수 선언함

		Pay_Gubun : string;    // 결제구분(현금, 카드등)

    sRet, eRet : Integer;          //고객정보에 출발지 도착지 정보확인변수 2012.04.18 KHS

		Only_Exit : Boolean; //창 종료 구분

		FType : integer; //다중 요금제 선택 시 선정된 요금제 순서 20140625 KHS

		//앱고객 정보 2013.03.30 KHS
		sAppCode, sAppLastRegDate, sAppLastDelDate, sAppLastFinishDate, sAppCuArea, sAppTermModel, sAppTermOS, sAppDelYn, sFirstInSource : string;

		gCardStatus : string;      //수정창(결제구분 = 후불(카드)) 카드 결제 상태를 저장한다 0: 승인, 1: 취소  2016.08.24 KHS

    gsrKey : String;

		gb_SpeechBubbleMouseOn : Boolean;   //확장검색 말풍선 클릭용도로 사용 20200120 KHS

    gsStartGUIDEXval, gsStartGUIDEYval, gsEndGUIDEXval, gsEndGUIDEYval : String;
		gbViaError : Boolean; //경유있는 경탐 에러여부. 초기화 False;  True : 경유지포함 경탐중 에러발생(새로운 방식으로 경탐 로직 진행)
		{ Public declarations }

		// 접수화면의 기본 컨트롤을 초기화 한다.
		procedure FControlInitial(bTF: Boolean = False; bBrNoSetType: boolean = False);
    procedure AddSpop(ASpop: string; Atag: Integer);
    procedure AddEpop(AEpop: string; Atag: Integer);
		procedure AddBigo(ABigo: string; Atag : Integer);

    procedure pInitFormSize;
		procedure pJON011Show;
		procedure pJON05Show;
    procedure pSetFormScroll(iFix, iHeight: Integer);
    procedure pSetLabelClick(var sLabel : TcxLabel );
    procedure pSetButtonClick(var sButton : TcxButton );
    // 지사리스트에서 지사코드, 본사코드로 첫번째 대표번호 index를 찾는다.
    function Proc_HeNoBrNoListIdxFind(sHdNo, sBrNo: string): Boolean;
    // 지사리스트에서 대표번호, 지사코드로 index를 찾는다.
    function Proc_BrNoListIdxFind(sBrNo, sKeyNumber: string): Boolean;
    // CID 정보 들어왔을경우 고객정보를 자동 조회 시킨다...
    procedure Proc_CIDEventAutoSearch(sCID, sKeyNumber, sDNIS, sSndTime, sBrNo, sAutoCall : string);
    // 접수창을 닫는다.
    procedure Proc_JoinFromClose;
    // 선택된 지사정보에서 대표번호를 추출 한다.
    function Proc_MainKeyNumberSearch: string;
    // 고객 등급별 폼 칼라를 변경해 준다.
    procedure Proc_SetFormColor(bCheck : Boolean);
    // CU_LEVEL_TYPE : 0 : 고객 자동등급별 라벨 칼라를 변경해 준다.
    procedure Proc_SetFormColor_2(iType: integer);
    // 고객 구분에 따른 라벨 칼라를 변경해 준다.
    procedure Proc_SetFormColor_3(iType: integer);
    // 선택된 지사정보에서 지사코드호를 추출 한다.
    // 선택된 지사정보에서 지사코드호를 추출 한다.
    function Proc_BRNOSearch: string;
    // 선택된 지사정보에서 본사코드를 추출 한다.
    function Proc_HDNOSearch: string;
		// ipwIPPort1 전문을 전송한다. 알림화면을 실행해준다.[bOrderInsGB: True:Ascending False:Descending]
    procedure LocNewSocketSend(lsSendText: string; bOrderInsGB: boolean = False);
    // 전문 요청후 결과에 따라 화면 Enabled: True/False 처리를 해준다.
    procedure Proc_JobAfterProc(bFormLock: boolean; bOrderInsGB: boolean = False);
    // 출발지, 도착지 컨트롤에서 KeyDown 이벤트시에 호출됨.
		procedure Proc_AreaSearchKDown_Added(Key: Word; sSchTxt : String);
    // 전화번호, 고객명 으로 조회 한다... sGB : NAME(고객명으로 조회), : TELL(전화번호로 조회)
    procedure CustomerSearch(sGB: string);
    // 고객 이용내역을 그리드에 보여준다.
		procedure Proc_CustOrderListView;
    // 선택된 지사정보에서 지사명을 추출 한다.
    function Proc_BrNameReadSearch: string;
		procedure Proc_Cust_History(sCuSeq : string);
    // 고객 전화번호로 고객 기본정보 조회
		procedure Proc_KeyNumberSearch(ss_KeyNumber: string; bCid: Boolean = False);
		procedure proc_dis_alculation_Via(bSearchFlag: boolean = False);
    // 요금설정에 의한 요금 계산
    function func_search_charge : Integer;
    // 올세븐 전용
		function func_search_A7charge(ASTPoi, AEDPoi : string): Integer;
    // 요금설정에 의한 요금 계산 --> [수도권 플러스콜 시행에 따른 고가요금 참고한다.] : 고가요금표 조회.
    function func_search_charge_high: Integer;
    // 선택 오더에 대해 Lock 을 설정한다.
    procedure Proc_AcceptLock(ss_Gubun: string);
    // 오더 일련번호를 받아 오더 수정창을 열어 준다.
		procedure Proc_OrderUpdate_Select(sConfSlip, sTodayGb, sInsGubun: string);
    // 오더 일련번호를 받아 오더 수정창을 열어 준다.  sTodayGb:1(당일오더), 2:(과거오더); sInsGubun:"수정", "추가접수"
		procedure Proc_OrderUpdate_Select_New(sConfSlip, sTodayGb, sInsGubun: string);
    // 오더 일련번호를 받아 오더 수정정보를 조회 한다.  sTodayGubun:1(당일오더), 2:(과거오더)
    procedure Proc_ConfSlip_Select_New(sConfSlip, sTodayGubun: string);
    // 접수시에 또는 수정시에 버튼위치 설정.
    procedure SetCmdOrderUpdate;
    function func_StartAreaFunc(AStartArea: string):string;
    function fJON01_SmartCharge(AOderWorker, AWeather, ASta1, ASta2, ASta3, ASPOI, ASX, ASY, AEnd1, AEnd2, AEnd3, AEPOI, AEX, AEY, AType : string; Var OType : String) : Integer;

    procedure SearchCuTel(AIsUpdate: Boolean = False);
    procedure SetMileColorChange;

    // 고객 당일 오더 구분 : 폼의 라벨 컨트롤 칼라를 설정 한다.
    procedure SetCustControlColor(bCheck, bType: boolean);
    // 고객 기사내역을 표시한다.
    procedure Proc_WorkListView(rxxml: String);
    // 고객 이용내역을 띄워준다.
    procedure Proc_Jon012Show;

		procedure Proc_recieve(ls_rxxml: String);
    // 대표번호로 조회 후 결과 처리를 한다.
    procedure Proc_NumberInsert(rxxml: String);
    // 받아온 경유지 정보를 배열에 저장한다.
    procedure proc_ViaInfo_insert(rxxml: String);
    // 접수등록 후 결과를 처리 한다.
    procedure Proc_SaveReturn(ss_RxXml: String);
    // 고객전화번호 조회 후 결과 처리를 한다.
		procedure Proc_KeyNumberInsert(rxxml: String);
		// [수정화면 띄우기..]오더일련번호:접수번호로 조회 후 그 결과 처리를 한다.
		procedure Proc_ConfSlipSelectResult(rxxml: String);
		// 고객기본정보를 저장 요청 후 결과 처리를 한다.
    procedure Proc_CustBasicSave_Result(rxxml: String);
    // 경유지 포함 거리 계산
		procedure proc_dis_alculation(iLow: Integer; bDisp : Boolean);
		// 경유지 포함 실거리 계산
		procedure proc_Realdis_Mng;
    function fnc_RealKmThread_End : Boolean;
    procedure proc_RealKmPtr_Init;

    function proc_SmartCharge(var outPriceInfo, outAreaType: string; var  outType: Integer): Integer; //스마트 요금 계산

 		procedure ViaOK;

    procedure plbl_00Click(Sender: TObject);

    // 고객전화번호 마킹처리..
    function Func_Cust_Tel(sCall, sBrch, sCallCenter, sAccCenter: string; ATodayOrder: Boolean): string; overload;
    function Func_Cust_Tel(sCall, sBrch, sCallCenter, sAccCenter, sDatetime: string): string; overload;

    procedure pCompareCustInfo;
    function IsNotModifyPrice: Boolean;

    procedure lcs_Clear(Panel: string);
    procedure Hide_Panel(Panel: string; Showhide : integer);
    procedure AllClear;

    function pCheck_Modify(iType : Integer; sSlip : String): Boolean;

    property PayMethod: string read GetPayMethod write SetPayMethod;

		procedure SetStartAreaMap(const ASido, AGugun, ADong, ADetail, AX, AY: string);
		procedure SetStartAreaMapNew(const ASido, AGugun, ADong, ADetail, AX, AY: string);
		procedure SetEndAreaMap(const ASido, AGugun, ADong, ADetail, AX, AY: string);
		procedure SetEndAreaMapNew(const ASido, AGugun, ADong, ADetail, AX, AY: string);

    procedure AppendPostDesc;
    procedure RemovePostDesc;

    procedure LoadBigoList;
    procedure LoadSpopList;
    procedure LoadEpopList;

    procedure pSLoadView;
    procedure pELoadView;

    procedure pInitShow;
    procedure pFormActive;

    property CustBrTelYN: string read FCustBrTelYN write SetCustBrTelYN;
 		property HidePhoneNum: Boolean read FHidePhoneNum write FHidePhoneNum;

		procedure WMEnterSizeMove(var Msg: TMessage); message WM_ENTERSIZEMOVE;
		procedure WMSizing(var Msg: TMessage); message WM_SIZING;
		procedure WMMoving(var Msg: TMessage); message WM_MOVING;
		procedure WMExitSizeMove(var Msg: TMessage); message WM_ExitSIZEMOVE;
		procedure WMSysCommand(var Msg: TMessage); message WM_SYSCOMMAND;
		procedure WMCommand(var Msg: TMessage); message WM_COMMAND;
		//콜마트 파일 콜링에 대한 접수창 입력
		procedure proc_CallMartJon01(ACALLMART : TCALLMART);
    procedure Proc_WTRCreate;
	end;

var
  Frm_JON01N: TFrm_JON01N;

implementation

{$R *.dfm}

uses Main, xe_Msg, xe_Func, xe_JON34B, xe_Lib, xe_gnl2, xe_JON30, xe_Dm, xe_CUT011, xe_Jon015, xe_JON56, xe_JON30S, xe_JON019, xe_JON60,
  xe_JON011, xe_JON018, xe_JON01Share, xe_WOR11, xe_xml, xe_Query, xe_charge, xe_JON01WNThread, xe_JON31, xe_packet, xe_JON54, xe_JON016,
  xe_CUT012, xe_COM40, xe_AllShot, xe_JON01_01, FastStrings, FastStringFuncs, xe_JON01SPThread, uLkJSON, CidSi415Lib, xe_JON63, xe_AIC10,
  xe_JON36, xe_JON013, xe_agentCfg, xe_JON00, xe_JON17, xe_JON08, xe_JON021, xe_JON05, xe_JON05_1, xe_SMS01;

var
  CS : TRTLCriticalSection;

// 문자열에서 숫자만 추출(소숫점제외)
// 2010.12.13
function str2integer(str:AnsiString):integer;
var
 ii:integer;
 TempStr:String;
begin
 TempStr:= '';
 for ii:= 1 to length(str) do
  begin
    if (str[ii] >= '0') and (str[ii] <= '9') then
      TempStr:= TempStr+str[ii];
   end;
 Result:= StrToIntDef(TempStr, 0);
end;

// 문자열에서 숫자제외한 문자 추출(소숫점제외)
// 2010.12.13
function str2string(str:string):string;
var
 ii:integer;
 TempStr:String;
begin
 TempStr:= '';
 for ii:= 1 to length(str) do
  begin
    if not((str[ii] >= '0') and (str[ii] <= '9')) then
      TempStr:= TempStr+str[ii];
   end;
 Result:= TempStr;
end;

function rpos1(substr1: string; str1: string): Integer;
var
  i: integer;
  tpos: integer;
begin
  if (substr1='') or (str1='') or (Length(substr1)>Length(str1)) then
  begin
    result:=0;
  end else
  begin
    tpos:=0;
    for i:=1 to Length(str1) do
    begin
      if substr1=Copy(str1,i,Length(substr1)) then
        tpos:=i;
    end;
    result:=tpos;
  end;
end;

//---------------------- Custom Message Handling procedures ----------------------
// These procedures shold be placed per every forms which we want to give magnetic
//  effect.

procedure TFrm_JON01N.WMEnterSizeMove(var Msg: TMessage);
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  inherited;

  if Assigned(MagneticWndProc) then
     MagneticWndProc(Self.Handle, WM_ENTERSIZEMOVE, lGlue, Msg, dummyHandled);
end;

procedure TFrm_JON01N.WMSizing(var Msg: TMessage);
var
   bHandled: Boolean;
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  if not Assigned(MagneticWndProc) then
     inherited
  else
  if MagneticWndProc(Self.Handle, WM_SIZING, lGlue, Msg, bHandled) then
    if not bHandled then
       inherited;
end;

procedure TFrm_JON01N.WMMoving(var Msg: TMessage);
var
   bHandled: Boolean;
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  lGlue := True;
  if not Assigned(MagneticWndProc) then
     inherited
  else
  if MagneticWndProc(Self.Handle, WM_MOVING, lGlue, Msg, bHandled) then
    if not bHandled then
       inherited;
end;

procedure TFrm_JON01N.WMExitSizeMove(var Msg: TMessage);
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  inherited;

  if Assigned(MagneticWndProc) then
     MagneticWndProc(Self.Handle, WM_ExitSIZEMOVE, lGlue, Msg, dummyHandled);
end;

procedure TFrm_JON01N.WMSysCommand(var Msg: TMessage);
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  inherited;

  if Assigned(MagneticWndProc) then
     MagneticWndProc(Self.Handle, WM_SYSCOMMAND, lGlue, Msg, dummyHandled);
end;

procedure TFrm_JON01N.WMCommand(var Msg: TMessage);
begin
  if ( Not GS_JON01_GROUPMOVE ) Or ( Frm_Main.JON01MNG[Self.Tag].Dock ) Or ( GS_JON01_TAB = 1 ) then
  begin
    inherited;
    Exit;
  end;

  inherited;
  if Assigned(MagneticWndProc) then
     MagneticWndProc(Self.Handle, WM_COMMAND, lGlue, Msg, dummyHandled);
end;

//------------------- end of Custom Message Handling procedures -----------------

procedure TFrm_JON01N.Proc_AreaSearchKDown_Added(Key: Word; sSchTxt : String);
var sViaWord : string;
begin
	SetDebugeWrite('JON01N.Proc_AreaSearchKDown_Added');
  if ( Not Assigned(Frm_JON30) ) Or ( Frm_JON30 = Nil ) then
     Frm_JON30 := TFrm_JON30.Create(Self);

	Frm_JON30.bMouseDownSelect := False;
	if (lcsActiveEdit = 'meoEndArea') and (GS_SEARCH_ENDNOSEARCH = True) then Exit;  //도착지 검색 안함 2012.05.29 KHS
  GS_JON30_KeyDown := Key;
  try
		if not (key in [vk_F7..vk_F12]) then
  	begin
  		if ViaNowTag = 1 then sViaWord := meoViaArea1.Text
											 else sViaWord := meoViaArea[ViaNowTag].Text;

			if ((lcsActiveEdit = 'meoStartArea') and (Length(WideString(meoStartArea.Text)) >= 2)) Or
  			 ((lcsActiveEdit = 'meoEndArea'  ) and (Length(WideString(meoEndArea.Text)) >= 2)) Or
  			 ((lcsActiveEdit = 'meoViaArea'  ) and (Length(WideString(sViaWord)) >= 2))then
  		begin
  			Application.ProcessMessages;

  			if not frm_JON30.noSearch then      //advgrid3 클릭 시 재 검색 안됨.
        begin
  				if GS_MAP_AREA_AUTOSHOW and (not frm_JON30.Visible) then
          begin
            if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
                 (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
                 (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  20130703  LYB  출발지/도착지 포커스가 있을때만 창 표시
            begin
							Hide_Panel(lcsActiveEdit,0);
            end;
					end else
          if GS_MAP_AREA_AUTOSHOW = False then
          begin
            frm_JON30.chk_Map(False);
            Hide_Panel(lcsActiveEdit,0);
					end;

					if Self.Showing then
          begin
						SetDebugeWrite('Proc_AreaSearchKDown_Added - ' + sSchTxt);
						Hide_Panel(lcsActiveEdit, 0);
						if ( gbSCtrlV Or gbECtrlV or gbVCtrlV ) And ( GS_SEARCH_POISVR_CTRLV ) then
						begin
							frm_JON30.tmThreadPaste.Interval := 90;
    		  		frm_JON30.tmThreadPaste.Enabled := True;
            end else
            begin
    	  			frm_JON30.tmThread.Interval := 90;
    		  		frm_JON30.tmThread.Enabled := True;
            end;
          end;
				end else
        begin
          frm_JON30.noSearch := False;
  			end;
      end else
      begin
        Frm_JON30.Grid_Init(lcsActiveEdit,1);
  			Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
  		end;
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.Hide_Panel(Panel: string; Showhide : integer);
begin
  SetDebugeWrite('JON01N.Hide_Panel');
  try
      if ( Not Assigned(Frm_JON30) ) Or ( Frm_JON30 = Nil ) then
       Frm_JON30 := TFrm_JON30.Create(Self);

		if Assigned(Frm_JON30) then
		begin
			if Frm_JON30.Tag > 21 then
			begin
  			Frm_JON30.Tag := Self.Tag;
			end;
		end;

  	if Showhide = 0 then
    begin
      if (Panel = 'meoStartAreaCUT') OR (Panel = 'meoEndAreaCUT') then
      begin
				Frm_JON30.Show;
      end else
      begin
        try
          Frm_JON30.bChkTime := True;
          Frm_Jon30.TmrChkTag.Tag := 100;
          Frm_JON30.Show;
          SetDebugeWrite('JON01N.Hide_Panel_2');
        except on E: Exception do
          begin
            Frm_JON30.Close;
            Assert(False, 'Frm_JON30.Close : ' + E.Message);
          end;
        end;
  		end;
    end else
		if Showhide = 1 then
  	begin
      if (Panel = 'meoStartAreaCUT') OR (Panel = 'meoEndAreaCUT') then
      begin
  			Frm_JON30.Hide;
      end else
      begin
        SetDebugeWrite('JON01N.Hide_Panel_3');
        try
          Frm_JON30.bChkTime := False;
          Frm_Jon30.TmrChkTag.Tag := 100;
          Frm_JON30.Hide;
          SetDebugeWrite('JON01N.Hide_Panel_4');
        except on E: Exception do
          begin
            Frm_JON30.Close;
            Assert(False, 'Frm_JON30.Close : ' + E.Message);
          end;
        end;
  		end;
  	end;

    if (Panel = 'meoStartArea') or (Panel = 'meoStartAreaCUT') then
    begin
      frm_JON30.pnl_01START.Visible := True;
      frm_JON30.pnl_02END.Visible := False;
      frm_JON30.pnl_03VIA.Visible := False;
  	end else
    if (Panel = 'meoEndArea') or (Panel = 'meoEndAreaCUT') then
    begin
      frm_JON30.pnl_01START.Visible := False;
      frm_JON30.pnl_02END.Visible := True;
      frm_JON30.pnl_03VIA.Visible := False;
    end else
    if Panel = 'meoViaArea' then
    begin
      frm_JON30.pnl_01START.Visible := False;
			frm_JON30.pnl_02END.Visible := False;
      frm_JON30.pnl_03VIA.Visible := True;
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.imgBubinSchClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.btnBubinSchClick');
  try
    if TCK_USER_PER.JON_BUBININFO = '1' then
    begin
			GMessagebox('접수창 법인정보 변경 권한이 없습니다.', CDMSE);
      Exit;
    end;

    pnlBubin.Left := 7;
    pnlBubin.Top  := grpTop2.Top + 50;

    if ( Not Assigned(Frm_JON01_01) ) Or ( Frm_JON01_01 = Nil ) then
      Frm_JON01_01 := TFrm_JON01_01.Create(Nil) // 폼 객체를 생성한다.
    else
    begin
      Frm_Main.Frm_JON01N[Frm_JON01_01.Tag].pnlBubin.Visible := False;
    end;

    Frm_JON01_01.Parent := pnlBubin;
    Frm_JON01_01.Align := alClient;
    Frm_JON01_01.Tag := Self.Tag;
    Frm_JON01_01.Show;
    Frm_JON01_01.cxtBubinSearchName.Text := '';
    Frm_JON01_01.cxBubinView.DataController.SetRecordCount(0);
    pnlBubin.BringToFront;
    pnlBubin.Visible := True;
    Frm_JON01_01.cxtBubinSearchName.SetFocus;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.img_KakaoTAiChargeClick(Sender: TObject);
begin
	proc_KMAiRate(1);
end;

procedure TFrm_JON01N.img_SpeechBubbleClick(Sender: TObject);
begin
  if Self.Tag < 0 then Exit;
	if (Frm_JON30.gb2ndSearch) and (img_SpeechBubble.Visible) then
	begin
		Frm_JON30.TT2.Tag := 1;
		Frm_JON30.TT2.Interval := 1;
		Frm_JON30.TT2.Enabled  := True;

		Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
		Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);
		if lcsActiveEdit = 'meoStartArea' then meoStartArea.SetFocus else
		if lcsActiveEdit = 'meoEndArea' then meoEndArea.SetFocus else
		if lcsActiveEdit = 'meoViaArea' then
		begin
			if ViaNowTag = 1 then meoViaArea1.SetFocus else	meoViaArea[ViaNowTag].SetFocus;
		end;
		exit;
	end;
end;

procedure TFrm_JON01N.img_SpeechBubbleMouseLeave(Sender: TObject);
begin
	gb_SpeechBubbleMouseOn := False;
end;

procedure TFrm_JON01N.img_SpeechBubbleMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
	gb_SpeechBubbleMouseOn := True;
end;

procedure TFrm_JON01N.BtnCall2Click(Sender: TObject);
begin
  SetDebugeWrite('JON01N.BtnCall2Click');
  pFormActive;
  pCall_Cust(cxtCuTel2.Text);
end;

procedure TFrm_JON01N.BtnCallClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.BtnCallClick');
  pFormActive;

	if Pos('*', cxtCuTel.Text) > 0  then
    pCall_Cust(cxtCallTelNum.Text)
  else
    pCall_Cust(cxtCuTel.Text);
end;

procedure TFrm_JON01N.pCall_Cust(sCtHp: string);
var vCustTel, vKeyNum, vSlip : String;
begin
  SetDebugeWrite('JON01N.pCall_Cust');
  try
    if sCtHp = '' then
    begin
      GMessagebox('고객님의 전화번호을(를) 입력하세요',CDMSE);
      Exit;
    end;

    vKeyNum  := Proc_MainKeyNumberSearch;
    vCustTel := StringReplace(sCtHp, '-', '', [rfReplaceAll]);
		vSlip := cxtJoinNum.Text;

    SetDebugeWrite('대표번호:' + vKeyNum + ' - 고객번호:' + vCustTel);

    Frm_Main.pCallingCID(vCustTel, vKeyNum, vSlip);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.BtnCloseClick(Sender: TObject);
begin
	btnCmdExit.Click;
end;

procedure TFrm_JON01N.btnCmdExitClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.btnCmdExitClick');
  try
    if ( GT_CARD_APPROVE_ST[Self.Tag] = casReq ) then
    begin
			GMessagebox('카드결제승인 요청중입니다. ' + #13#10
  							+ '승인완료까지 잠시 기다려 주세요.' , CDMSE);
  		Exit;
    end;

		if btnCmdUpdSave.Tag <> 99 then   //btnCmdUpdSave.Tag = 99 7일 경과오더는 아래조건과 상관없이 종료가능 20210723 KHS 이명재 대리요청
		begin
  		  if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) and (Pos('조회', Self.Caption) = 0) and (locCardPaySeq <> '') and (not Only_Exit) then
		  begin
			  GMessagebox('카드결제/현금영수증/쿠폰결제를 한 후에 접수창 종료를 하게되면 ' + #13#10
								  + '거래내역이 사라지게 됩니다. ' + #13#10
								  + '최소한 "문의등록" 을 하셔서 거래내역을 보존하세요.' , CDMSE);
			  Exit;
		  end else
		  //수정모드에서 수정창오픈시 결제일련번호가 없지만 수정창 종료시 결제일련번호가 있다면  
		  if (Pos('수정', Self.Caption) > 0 ) and (gsUpdateCardPaySeq = '') and (locCardPaySeq <> '') and (locCardPaySeq <> 'null') and (not Only_Exit) then
		  begin
			  GMessagebox('카드결제/현금영수증/쿠폰결제를 한 후에 수정창 종료를 하게되면 ' + #13#10
								  + '거래내역이 사라지게 됩니다. ' + #13#10
								  + '오더수정 버튼을 눌러 거래내역을 보존하세요.' , CDMSE);
			  Exit;
		  end;
                end;

    if ( ( Not fnc_RealKmThread_End ) And ( GT_DISTANCE_ST = 1 ) )  Or  ( giViaKmComplet )  then
    begin
			GMessagebox('경로탐색거리 계산중입니다' + #13 +
									'완료 후 종료 바랍니다.', CDMSE);
			proc_CaActiveComplete; //종료시에는 1회 메세지 이후 종료될 수 있도록 강제로 False 처리 20191201 KHS
      giViaKmComplet := False;
      Exit;
    end;

    // 종료 확인 메시지
    if ( btnCmdExit.Description = '' ) And ( GB_JON_CLOSE_CONFIRM ) then
    begin
      if Application.MessageBox('종료하시겠습니까?', '[종료확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
      begin
        Exit;
      end;
    end;

		// 종료 시 자동 문의 변경 옵션 처리  20120801  LYB
		if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) And GS_JON_AUTOCMDQUESTION and bAUTOCMDQUESTION then
		begin
      if (cxtCuTel.Text = '') and ((cxtCallTelNum.Text = '발신정보없음') or (cxtCallTelNum.Text = '')) then
      begin
        bAUTOCMDQUESTION := False;
  		end else
  		begin
  			bAUTOCMDQUESTION := False;
  			btnCmdQuestionClick(Sender);
				Exit;
  		end;
    end;

    // DNIS 대표번호 찾기 정보창을 감춘다.  2011.05.17
    shrDNIS_DSP.Visible := False;
		if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
		begin
      if btnCmdExit.Hint = 'UPDATE_MODE' then
  		begin // 오더정보 수정모드 설정을 한다.
  			if Length(cxTxtBrNameCaption.Hint) > 18 then
        begin
  				// 오픈된지 1분 지난 수정건에 대해서는 Lock 해제 처리를 하지 않는다.
  				if StrToIntDef(FormatDateTime('hhnnss', (StrToDateTime(cxTxtBrNameCaption.Hint) - now)), 99) < 60 then
          begin
  					if loc_bUpdateLock then
            begin // 수정화면 Lock 설정 여부.[True:설정, False:미설정]
              Proc_AcceptLock('2'); // 해당오더의 Lock을 해제 한다.
            end;
          end;
        end;
      end;
      cxTxtBrNameCaption.Hint := ''; // 수정모드 읽은 최초시간 초기화.
  	end;

    SetDebugeWrite_CID('btnCmdExitClick : No['+IntToStr(Self.Tag)+'] ' + cxtCallTelNum.Text);

    bQuestionSave := False;
    bNoShowSave   := False;
    btnCmdUpdSave.Caption := '수정(F7)';

    Frm_Main.JON01MNG[Self.Tag].bNoChangeBr := False;
    cxTSearchMainTel.Enabled := True;

    GrpHelp.Visible := False;
    BtnQRate.Enabled := True;
    BtnQRate.Tag := 0;
  	RQAListView.DataController.SetRecordCount(0);
    gbRQAList.Visible := False;

		grpBtm.Enabled := True;
    grpTitle.Enabled := True;

		if bAppOrder then sleep(300); //앱오더 이면 수정창 오픈을 위해 0.3초 대기
		bAppOrder := False;           //앱오더 여부 20191217 KHS
		// 접수창을 닫는다.
		Proc_JoinFromClose;
	except
    on e: exception do
    begin
      Log('btnCmdExitClick Error 0 :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdExitClick Error 0 :' + E.Message);
    end;
  end;

  try
    if ( Frm_Main.Frm_Jon012[Self.Tag].Tag = Self.Tag ) And ( Frm_Main.Frm_Jon012[Self.Tag].Showing ) then
    begin
			Frm_Main.Frm_Jon012[Self.Tag].pnlColorSet.Visible := False;;
      // 고객이용내역 화면을 닫는다.
      Frm_Main.Frm_Jon012[Self.Tag].bChkTime := False;
			Frm_Main.Frm_Jon012[Self.Tag].TmrChkTag.Tag := 100;
      if GS_JON01_GROUPMOVE then MagneticWnd.RemoveWindow(Frm_Main.Frm_Jon012[Self.Tag].Handle);
      Frm_Main.Frm_Jon012[Self.Tag].Hide;
    end;

      // 전화번호 위치 조회.
    if Assigned(Frm_CUT011) then Frm_CUT011.Close;

  	if Assigned(Frm_JON015) and Frm_JON015.HandleAllocated and (Frm_JON015.OrderHandle = Self.Handle) then
      if Frm_JON015.Tag = Self.Tag then Frm_JON015.Close;

		if Assigned(Frm_JON016) then Frm_JON016.Close;
		
		if Assigned(Frm_JON63) then 
		begin
			if not GS_All7Type2 then Frm_JON63.Close;
		end;

		if Assigned(Frm_JON56) then Frm_JON56.Close;
		if Assigned(Frm_JON30S) then Frm_JON30S.Close;
    if Assigned(Frm_Main.Frm_JON34B[Self.Tag]) And
      ( Frm_Main.JON34MNG[Self.Tag].CreateYN ) then Frm_Main.Frm_JON34B[Self.Tag].Close;

    if Assigned(Frm_JON01_01) then Frm_JON01_01.Close;

    if Assigned(Frm_JON019) then
      if Frm_JON019.Tag = Self.Tag then Frm_JON019.Close;

		if Assigned(Frm_JON021) then
			if Frm_JON021.Tag = Self.Tag then Frm_JON021.Close;

		if Assigned(Frm_JON60)  then      // LBS동의
			if Frm_JON60.Tag = Self.Tag then Frm_JON60.Close;

		Screen.Cursor := crDefault;
  except
    on e: exception do
    begin
      Log('btnCmdExitClick Error 1 :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdExitClick Error 1 :' + E.Message);
    end;
  end;

  try
  	sCust_Gubun := '';
    if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
    begin
      btnCmdExit.Tag := -1;
    end;

    if Assigned(Frm_Main.Frm_JON03[Jon03Tag]) then
    begin
      if ( Frm_Main.JON03MNG[Jon03Tag].Use ) And ( Frm_Main.JON03MNG[Jon03Tag].CreateYN ) then
      begin
        if Frm_Main.Frm_JON03[Jon03Tag].Grd2.CanFocus then
          Frm_Main.Frm_JON03[Jon03Tag].Grd2.SetFocus
        else
        if Frm_Main.Frm_JON03[Jon03Tag].cxGridCounselToday.CanFocus then
          Frm_Main.Frm_JON03[Jon03Tag].cxGridCounselToday.SetFocus;
      end;
    end;
  except
    on e: exception do
    begin
      Log('btnCmdExitClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdExitClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btnCmdJoinClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.btnCmdJoinClick');
  try
		bJoinBtn := False;
		if Pos('앱접수', Self.Caption) > 0 then //앱접수로 들어온 대기오더인지 먼저 처리 후 옵션 적용
		begin
			bAppOrderOpen := True;   //콜링창에서는 초기화 한뒤 수정창에서 다시 설정해줌
      giBtnIndex := 0;
			btnCmdUpdSaveClick(btnCmdUpdSave);
			Exit;
		end else
		if (btnCmdUpdSave.Visible) and (cxtJoinNum.Hint = '5') and ( GB_ResToJoin_USE ) then  //대기오더 수정시 접수로 변경 사용시 20190618 KHS
		begin
			bJoinBtn := True;
			btnCmdUpdSaveClick(btnCmdUpdSave);
		end;

		Proc_BtnEnabled(False);

		if GS_SEARCH_DEST_NOPOI_FALSE then
    begin
      if Trim(meoEndArea.Text) = '' then
      begin
        GMessagebox('[접수] 도착지명이 없으면 접수가 불가능합니다.' + #13#10
                  + '도착지를 입력하세요' + #13#10
                  + '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSE);
				if meoEndArea.CanFocus then meoEndArea.SetFocus;
				Proc_BtnEnabled(True);
				Exit;
      end;
		end;

		if (ABubinStateIndex in [1,2]) and (CbCuGb.ItemIndex = 2) then
		begin
			//법인상태 = 정상 이아닌 경우 접수/수정 불가 20210721 KHS 코리아요청 - 팀장님지시
			GMessagebox('법인계약 해지되어' +#13#10
								+ '법인콜 접수불가 합니다' +#13#10+#13#10
								+ '개인으로 변경 후 접수가 가능합니다', CDMSE); 
			Proc_BtnEnabled(True);
			Exit;
{			if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCBCharge.Value <> 0 ) ) then
			begin
				GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSE);
				SetPayMethod(PAY_METHOD_MONEY);
				Exit;
			end;  }
		end;

		if ( cbbPayMethod.Text = PAY_METHOD_POST_MILE ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curMileCharge.Value <> 0 ) ) then
    begin
			if (lcsCu_seq = '') And (edtPostPay.Value = 0) then
      begin
        GMessagebox('신규고객은 마일리지 사용을 할 수 없습니다.', CDMSE);
				SetPayMethod(PAY_METHOD_MONEY);
				Proc_BtnEnabled(True);
        Exit;
      end;
    end;

    if ( ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCbCharge.Value <> 0 ) ) ) And
       ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
				begin
					Proc_BtnEnabled(True);
					Exit;
				end;
      end;
    end;

    // 플러스콜 표준요금을 비교한다. 2010.10.13
		if Not proc_PlusCall_RateYN then
		begin
			Proc_BtnEnabled(True);
			exit;
		end;

    // 화면닫는 중이면 요청 무시
    if (tmFormClose.Enabled) and (tmFormClose.Tag = 99) and (loc_TmClose = 'CLOSE') then
    begin
      OutputDebugString(PChar(Format('Closing accept window', [])));
			Proc_BtnEnabled(True);
			Exit;
    end;

		if btnCmdUpdSave.Visible then
    begin
			//수정모드에서 최초결제일련번호가 없지만 수정 후 결제일련번호가 있다면 수정버튼 클릭해야함. 20210623KHS. 팀장님지시
			if (Pos('수정', Self.Caption) > 0 ) and (gsUpdateCardPaySeq = '') and (locCardPaySeq <> '') and (locCardPaySeq <> 'null') and (not Only_Exit) then
			begin
				GMessagebox('카드결제/현금영수증/쿠폰결제 한 후 수정창 종료를 하게되면 ' + #13#10
									+ '거래내역이 사라지게 됩니다. ' + #13#10
									+ '오더수정 버튼을 눌러 거래내역을 보존하세요.' , CDMSE);
				Proc_BtnEnabled(True);
				Exit;
			end;
			if Application.MessageBox('현재 화면은 오더 수정모드 입니다.' + #13#10 + #13#10
        + '수정모드에서 해당 오더를 신규오더로 [접수] 하시겠습니까?',
        '[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
			begin
				Proc_BtnEnabled(True);
				Exit;
			end;

      // 수정모드에서 신규오더는 결제 정보 초기화
			locCardPaySeq := '';   // 결제일련번호
			gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)
  		locCardTranNo := '';   // 거래번호
  		locCardPayInfo:= '';   // 결재 정보
    end;

    if (Assigned(Frm_JON015) and Frm_JON015.HandleAllocated) and
       (Frm_JON015.Count > 0) and (Frm_JON015.OrderHandle = Self.Handle) then
    begin
      if Application.MessageBox(PChar(Format('%d 건의 복수콜을 접수하시겠습니까?', [Frm_JON015.Count])),
        '복수콜 접수', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
      begin
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    // 오더정보 접수 모드 설정을 한다.
    btnCmdExit.Hint := 'INSERT_MODE';
    btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.
    btnCmdQuestionCopy.Hint := ''; // 문의후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 접수 시 문의 처리 안타게 처리 20120806 LYB
		Only_Exit := True;   //종료버튼 힌트변경됨
    // 오더를 접수등록을 한다.
		gsOrderClick := '0';
		Proc_OrderJoinIns;
  Except
    on e: exception do
    begin
      Log('btnCmdJoinClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdJoinClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btnCmdJoinCopyClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.btnCmdJoinCopyClick');
  try
    if GS_SEARCH_DEST_NOPOI_FALSE then
    begin
      if Trim(meoEndArea.Text) = '' then
      begin
        GMessagebox('[접수후복사] 도착지명이 없으면 접수가 불가능합니다.' + #13#10
                  + '도착지를 입력하세요' + #13#10
                  + '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSE);
        if meoEndArea.CanFocus then meoEndArea.SetFocus;
  //      meoEndArea.SelStart := Length(meoEndArea.Text);
        Exit;
      end;
    end;

    if btnCmdUpdSave.Visible then
    begin
			//수정모드에서 최초결제일련번호가 없지만 수정 후 결제일련번호가 있다면 수정버튼 클릭해야함. 20210623KHS. 팀장님지시
			if (Pos('수정', Self.Caption) > 0 ) and (gsUpdateCardPaySeq = '') and (locCardPaySeq <> '') and (locCardPaySeq <> 'null') and (not Only_Exit) then
			begin
				GMessagebox('카드결제/현금영수증/쿠폰결제 한 후 수정창 종료를 하게되면 ' + #13#10
									+ '거래내역이 사라지게 됩니다. ' + #13#10
									+ '오더수정 버튼을 눌러 거래내역을 보존하세요.' , CDMSE);
				Proc_BtnEnabled(True);
				Exit;
			end;

      if Application.MessageBox('현재 화면은 오더 수정모드 입니다.' + #13#10 + #13#10
				+ '수정모드에서 해당 오더를 신규오더로 [접수후복사] 하시겠습니까?',
				'[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
			begin	
				Proc_BtnEnabled(True);
				exit;
			end;

      // 수정모드에서 신규오더는 결제 정보 초기화
			locCardPaySeq := '';   // 결제일련번호
			gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)
      locCardTranNo := '';   // 거래번호
      locCardPayInfo:= '';   // 카드결제 정보
    end;

		if (ABubinStateIndex in [1,2]) and (CbCuGb.ItemIndex = 2) then
		begin
			//법인상태 = 정상 이아닌 경우 접수/수정 불가 20210721 KHS 코리아요청 - 팀장님지시
			GMessagebox('법인계약 해지되어' +#13#10
								+ '법인콜 접수불가 합니다' +#13#10+#13#10
								+ '개인으로 변경 후 접수가 가능합니다', CDMSE); 

			Proc_BtnEnabled(True);
			Exit;
{			if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCBCharge.Value <> 0 ) ) then
			begin
				GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSE);
				SetPayMethod(PAY_METHOD_MONEY);
				Exit;
			end;  }
		end;

    if ( cbbPayMethod.Text = PAY_METHOD_POST_MILE ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curMileCharge.Value <> 0 ) ) then
    begin
      if (lcsCu_seq = '') And (edtPostPay.Value = 0) then
      begin
        GMessagebox('신규고객은 마일리지 사용을 할 수 없습니다.', CDMSE);
        SetPayMethod(PAY_METHOD_MONEY);
        Exit;
      end;
    end;

    if edtPostPay.Value > curRate.Value then
    begin
      if (cbbPayMethod.Text <> PAY_METHOD_BUSAN) and (cbbPayMethod.Text <> PAY_METHOD_BUSAN2K) And
         (cbbPayMethod.Text <> PAY_METHOD_BUSAN3K) then
      begin
        GMessagebox('기사송금금액이 요금보다 많습니다.', CDMSE);
        edtPostPay.Value := curRate.Value;
      end;
    end;

    if ( ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCbCharge.Value <> 0 ) ) ) And
       ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
          Exit;
      end;
    end;

    // 플러스콜 표준요금을 비교한다. 2010.10.13
    if Not proc_PlusCall_RateYN then Exit;

    // 오더정보 접수후복사 모드 설정을 한다.
    btnCmdExit.Hint := 'INSERTCOPY_MODE';
    btnCmdJoinCopy.Hint := 'JOINCOPY'; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.
    btnCmdQuestionCopy.Hint := ''; // 문의후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 접수후복사 시 문의 처리 안타게 처리 20120806 LYB
		Only_Exit := True;   //종료버튼 힌트변경됨

    // 오더를 접수등록을 한다.
    gsOrderClick := 'JC';
    Proc_OrderJoinIns;
  Except
    on e: exception do
    begin
      Log('btnCmdJoinCopyClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdJoinCopyClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btnCmdMultiCallClick(Sender: TObject);
var
	AData: TMultiCallData;
	sTmpLon, sTmpLat : string;
	dTmpLon, dTmpLat : Double;
	bLonLat : Boolean; //좌표유효성 검사
begin
	SetDebugeWrite('JON01N.btnCmdMultiCallClick');
  try
		if func_ecukrCheck then exit;

		sTmpLon := SetWGS84(cxtStartYval.Text);
		sTmpLat := SetWGS84(cxtStartXval.Text);      //037XXXXX -> 37.XXXXXXX로 변환
		dTmpLon := StrToFloatDef(sTmpLon, 0);                        //더블형으로 변환
		dTmpLat := StrToFloatDef(sTmpLat, 0);

		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
		begin
			bLonLat := PtInPolygon(dTmpLon, dTmpLat, FKOREAAREA_XY.Lon, FKOREAAREA_XY.Lat, FKOREAAREA_XY.Lon.count);
			if Not bLonLat then  //유효한 좌표가 아니면
			begin
				GMessagebox('[출발지 좌표오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
									+ '좌표(' + cxtStartYval.Text + '/' + cxtStartXval.Text + ')' + #13#10
									+ '출발지를 다시 조회하시기 바랍니다.', CDMSE);
				Assert(False, '출발지좌표 : ' + lcsStaDocId + '/'
										 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + meoStartArea.text + '/' + GS_Grid_DEP + '/' + '복수콜등록');
				if meoStartArea.CanFocus then meoStartArea.SetFocus;
				Exit;
			end;

			if (cxtStartAreaDetail.Text <> '') and ((lcsSta1 = '') or (lcsSta2 = '') or (lcsSta3 = '')) then
			begin
				GMessagebox('[출발지 정보오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
									+ '시도 : ' + lcsSta1 + ', 시군구 : ' + lcsSta2 + ', 읍면동 : ' + lcsSta3 + #13#10
									+ '출발지를 다시 조회하시기 바랍니다.', CDMSE);
				Assert(False, '출발지정보 : ' + lcsStaDocId + '/' + lcsSta1 + '/' + lcsSta2 + '/' + lcsSta3 + '/'
										 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + cxtStartAreaDetail.text + '/' + GS_Grid_DEP + '/' + '복수콜등록');
				if meoStartArea.CanFocus then meoStartArea.SetFocus;
				Exit;
			end;

			if (lcsEnd1 <> '') and ((lcsEnd2 <> '') or (lcsEnd3 <> '')) and ((cxtEndYval.Text = '') or (cxtEndXval.Text = '')) then
			begin
				GMessagebox('[도착지 좌표오류]' + #13#10 + '도착지좌표가 올바르지 않습니다.' + #13#10
									+ '좌표(' + cxtEndYval.Text + '/' + cxtEndXval.Text + ')' + #13#10
									+ '도착지를 다시 조회하시기 바랍니다.', CDMSE);
				Assert(False, '도착지좌표 : ' + lcsStaDocId + '/'
										 + cxtEndYval.Text + '/' + cxtEndXval.Text + '/' + meoEndArea.text + '/' + GS_Grid_DES + '/' + '복수콜등록');
				if meoEndArea.CanFocus then meoEndArea.SetFocus;
				Exit;
			end;
		end;


		if GS_SEARCH_DEST_NOPOI_FALSE then
		begin
      if Trim(meoEndArea.Text) = '' then
      begin
        GMessagebox('[복수콜] 도착지명이 없으면 접수가 불가능합니다.' + #13#10
                  + '도착지를 입력하세요' + #13#10
                  + '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSE);
        if meoEndArea.CanFocus then meoEndArea.SetFocus;
  //      meoEndArea.SelStart := Length(meoEndArea.Text);
        Exit;
      end;
    end;

    // 플러스콜 체크되어 있으면 자동 해제한다.
    if GS_PRJ_AREA = 'S' then
    begin
      if lblPlusYN.Tag = 1 then
      begin
        lblPlusYN.Tag := 0;
        pSetLabelClick(lblPlusYN);
      end;
    end;

    if edtPostPay.Value > curRate.Value then
    begin
      if (cbbPayMethod.Text <> PAY_METHOD_BUSAN) and (cbbPayMethod.Text <> PAY_METHOD_BUSAN2K) And
         (cbbPayMethod.Text <> PAY_METHOD_BUSAN3K) then
      begin
        GMessagebox('기사송금금액이 요금보다 많습니다.', CDMSE);
        edtPostPay.Value := curRate.Value;
      end;
    end;

    if ( ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCbCharge.Value <> 0 ) ) ) And
       ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
          Exit;
      end;
    end;

    if not NotNullCheck(True) then Exit;

    if IsPayMethodPost then
    begin
      GMessageBox('후불오더는 복수콜로 등록할 수 없습니다. [접수후복사(Z)]를 이용바랍니다.', CDMSE);
      Exit;
    end;

		if (cxLblCIDUseFlg.Hint <> 'CID') and (gsCuTelHint <> cxtCuTel.Text) then
    begin // CID 조회인지 설정을 한다., 고객전화번호 변경여부를 체크하기 위해 저장한다.
      GMessagebox(
				Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10
        + Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
				+ '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요',
        CDMSE);
      Exit;
    end;

		if not Assigned(Frm_JON015) or not Frm_JON015.HandleAllocated then
    begin
      Frm_JON015 := TFrm_JON015.Create(Self);
      Frm_JON015.Tag  := Self.Tag;
      if Frm_Main.JON01MNG[Self.Tag].Dock then
      begin
        Frm_JON015.Left := Frm_Jon00.Left - (Frm_JON015.Width + 1);
      end else
      begin
        Frm_JON015.Left := Self.Left - (Frm_JON015.Width + 1);
      end;
      Frm_JON015.Top  := meoStartArea.ClientOrigin.Y;
    end else
    begin
      if Frm_JON015.OrderHandle <> Self.Handle then
      begin
        GMessagebox('복수콜은 동시에 접수할 수 없습니다.' + #13#10
          + '(다른 복수콜을 먼저 접수하시고 시도해주세요.)', CDMSE);
        Exit;
      end;
    end;

    bAUTOCMDQUESTION := False; // 복수콜 시 문의 처리 안타게 처리 20120806 LYB

    AData.StArea1 := lcsSta1;
    AData.StArea2 := lcsSta2;
    AData.StArea3 := lcsSta3;
    AData.StArea4 := cxtStartAreaDetail.Text;
    AData.StArea5 := meoStartArea.Text;

    AData.EdArea1 := lcsEnd1;
		AData.EdArea2 := lcsEnd2;
    AData.EdArea3 := lcsEnd3;
    AData.EdArea4 := cxtEndAreaDetail.Caption;
		AData.EdArea5 := meoEndArea.Text;

		AData.Price    := StrToIntDef(ReplaceAll(curRate.Text, ',', ''), 0);

    AData.Km      := fCruKm;
    AData.TotalTime := fTotalTime;
		AData.Summary := meoBigo.Text;
    AData.PayType := cbbPayMethod.Text;

    AData.StPosX  := cxtStartXval.Text;
    AData.StPosY  := cxtStartYval.Text;
    AData.EdPosX  := cxtEndXval.Text;
    AData.EdPosY  := cxtEndYval.Text;
    AData.CorpYN  := False;
    if lblNoSet.Tag = 1 then AData.PriceYN := True
                        else AData.PriceYN := False;
		AData.Call2YN := '';
		AData.DriverCharge := StringReplace(cxDriverCharge.Text,',','',[rfReplaceAll]);

		if Frm_JON015.AddMultiCallData(Self.Handle, AData) then
    begin
			// Editor clear
      meoEndArea.Clear;
      lcsEnd1 := '';
      lcsEnd2 := '';
      lcsEnd3 := '';
      cxtEndAreaDetail.Clear;
      lblEndAreaName.Clear;
      cxReEndArea.Clear;

      cxtEndXval.Clear;
			cxtEndYval.Clear;

      Lbl_charge.Caption := '';
      Lbl_Distance.Caption := '';

      // 원주365는 "복수콜 입력시 요금적요 정보유지" 옵션강제 적용 2020.01.14. 정회귀팀장님 요청
			if ( gsMyRateRemarkMaintain = 'FALSE' ) And ( Not GB_365System ) then
			begin
				curRate.Clear;
        curCbCharge.Clear;
        curCardCharge.Clear;
        curMileCharge.Clear;
				cxDriverCharge.Clear;
        meoBigo.Clear;
			end;
			curKm.Clear;
      fCruKm := 0;
      fChgKm := 0;
      fDirKm := 0;
      fTotalTime := 0;
      fViaKm := 0;
      fStEdKm := 0;
      bViaKm := False;

      Frm_JON015.Show;
      if meoEndArea.CanFocus then meoEndArea.SetFocus;
    end else
    begin
      GMessagebox('복수콜 접수를 실패 했습니다.', CDMSE);
    end;
  Except
    on e: exception do
    begin
      Log('btnCmdMultiCallClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdMultiCallClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btnCmdNoSMSClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.btnCmdNoSMSClick');
  if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) and (Pos('조회', Self.Caption) = 0) and (locCardPaySeq <> '') and (not Only_Exit) then
  begin
    GMessagebox('카드결제 및 현금영수증 발행 및 쿠폰결제를 한 후에는 SMS거부를 할수 없습니다.' , CDMSE);
    Exit;
  end;

  if GB_JON_NOSMSCONFIRM then
    if Application.MessageBox('SMS거부 하시겠습니까?', PChar(Application.Title), MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON1) = IDNO then Exit;

  try
    // 오더정보 수신거부 모드 설정을 한다.
    btnCmdExit.Hint := 'NOSMSINSERT_MODE';
    btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.
    btnCmdQuestionCopy.Hint := ''; // 문의후 복사 기능 설정.
    lg_Save := '1';
    // 오더 수신거부 등록을 한다.
    Proc_OrderSMSRecvNo;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.btnCmdQuestionClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.btnCmdQuestionClick');
  // 플러스콜 체크되어 있으면 자동 해제한다.
  try
		Proc_BtnEnabled(False);

		if (ABubinStateIndex in [1,2]) and (CbCuGb.ItemIndex = 2) then
		begin
			//법인상태 = 정상 이아닌 경우 접수/수정 불가 20210721 KHS 코리아요청 - 팀장님지시
			GMessagebox('법인계약 해지되어' +#13#10
								+ '법인콜 접수불가 합니다' +#13#10+#13#10
								+ '개인으로 변경 후 접수가 가능합니다', CDMSE); 

			Proc_BtnEnabled(True);
			Exit;
{			if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCBCharge.Value <> 0 ) ) then
			begin
				GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSE);
				SetPayMethod(PAY_METHOD_MONEY);
				Exit;
			end;  }
		end;

    if btnCmdUpdSave.Visible then
    begin
      if Application.MessageBox('현재 화면은 오더 수정모드 입니다.' + #13#10#13#10
        + '수정모드에서 해당 오더를 신규오더로 [문의] 접수 하시겠습니까?',
        '[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
			begin
				Proc_BtnEnabled(True);
				Exit;
			end;

      // 수정모드에서 신규오더는 결제 정보 초기화
			locCardPaySeq := '';   // 결제일련번호
			gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)
      locCardTranNo := '';   // 거래번호
      locCardPayInfo:= '';   // 카드결제 정보
    end;

    if GS_PRJ_AREA = 'S' then
    begin
      if lblPlusYN.Tag = 1 then
      begin
        lblPlusYN.Tag := 0;
        pSetLabelClick(lblPlusYN);
      end;
    end;

    // 오더정보 수정모드 설정을 한다.
    btnCmdExit.Hint := 'QUESTINSERT_MODE';
    btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.
    btnCmdQuestionCopy.Hint := ''; // 문의후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 문의 시 문의 처리 안타게 처리 20120806 LYB
  	Only_Exit := True;   //종료버튼 힌트변경됨

    lg_Save := '1';
    gsOrderClick := '4';
    // 오더를 문의로 접수 한다.
		Proc_OrderQuesJoinIns;
  except
    on e: exception do
    begin
      Log('btnCmdQuestionClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdQuestionClick Error :' + E.Message);
		end;
  end;
end;

procedure TFrm_JON01N.btnCmdQuestionCopyClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.btnCmdWaitCopyClick');
  try
		Proc_BtnEnabled(False);

		if (ABubinStateIndex in [1,2]) and (CbCuGb.ItemIndex = 2) then
		begin
			//법인상태 = 정상 이아닌 경우 접수/수정 불가 20210721 KHS 코리아요청 - 팀장님지시
			GMessagebox('법인계약 해지되어' +#13#10
								+ '법인콜 접수불가 합니다' +#13#10+#13#10
								+ '개인으로 변경 후 접수가 가능합니다', CDMSE);

			Proc_BtnEnabled(True);
			Exit;
		end;

    if btnCmdUpdSave.Visible then
    begin
      if Application.MessageBox('현재 화면은 오더 수정모드 입니다.' + #13#10#13#10
        + '수정모드에서 해당 오더를 신규오더로 [문의] 접수 하시겠습니까?',
        '[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
			begin
				Proc_BtnEnabled(True);
				Exit;
			end;

      // 수정모드에서 신규오더는 결제 정보 초기화
//			locCardPaySeq := '';   // 결제일련번호
//			gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)
//      locCardTranNo := '';   // 거래번호
//      locCardPayInfo:= '';   // 카드결제 정보
    end;

    if GS_PRJ_AREA = 'S' then
    begin
      if lblPlusYN.Tag = 1 then
      begin
        lblPlusYN.Tag := 0;
        pSetLabelClick(lblPlusYN);
      end;
    end;

    // 오더정보 수정모드 설정을 한다.
    btnCmdExit.Hint := 'QUESTINSERTCOPY_MODE';
    btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.
    btnCmdQuestionCopy.Hint := 'JOINCOPY'; // 문의후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 문의 시 문의 처리 안타게 처리 20120806 LYB
  	Only_Exit := True;   //종료버튼 힌트변경됨

    lg_Save := '1';
    gsOrderClick := '4';
    // 오더를 문의로 접수 한다.
		Proc_OrderQuesJoinIns;
  Except
    on e: exception do
    begin
      Log('btnCmdQuestionClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdQuestionClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btnCmdUpdSaveClick(Sender: TObject);
var
  Status, msg: string;
begin
	SetDebugeWrite('JON01N.btnCmdUpdSaveClick');
  try
  	// 수정을 클릭.
    if ( btnCmdUpdSave.Tag = 99 ) And ( cxtJoinNum.Hint <> '4' ) then
		begin // 수정 할 수 없음.
      GMessagebox('이용한지 7일이 지난 오더는 수정 할 수 없고, 내용만 볼 수 있습니다.', CDMSE);
      Exit;
		end;
		if Pos('앱접수', Self.Caption) = 0 then //앱접수로 들어온 대기오더인지 먼저 처리 후 옵션 적용
		begin
			bAppOrderOpen := False; //그냥수정창일때는 상태변경 안함.
      giBtnIndex := -1;
		end;

		// 고객전화번호 변경여부를 체크하기 위해 저장한다.
		if gsCuTelHint <> cxtCuTel.Text then  //수정모드에서 전화번호1 변경 가능 2016.07.23 KHS
		begin
			GMessagebox(Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10 +
				Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 수정하세요', [cxtCuTel.Text]) + #13#10
				+ '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요', CDMSE);
			Exit;
		end;

		if (ABubinStateIndex in [1,2]) then
		begin
			if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCBCharge.Value <> 0 ) ) then
			begin
				GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSE);
				SetPayMethod(PAY_METHOD_MONEY);
				Exit;
			end;  
		end;

		if Not fBubinLimitCheck then Exit;

    // 오더정보 수정모드 설정을 한다.
  	btnCmdExit.Hint := 'UPDATE_MODE';

    Status := cxtJoinNum.Hint;
  	if (cxtJoinNum.Hint = '5') and ( (BtnResJ.Tag = 1) or (BtnResD.Tag = 1) ) then
    begin
			msg := '대기오더에 예약시간을 넣으면 예약으로 변경됩니다.' + CRLF + '예약으로 변경하시겠습니까?' + CRLF + CRLF
				+ '([예] 예약으로 저장, [아니오] 대기로 저장)';
			if Application.MessageBox(PChar(msg), CDMSI, MB_YESNO+MB_ICONQUESTION+MB_DEFBUTTON1) = IDYES then
			begin
				Status := 'R';
			end;
		end;

    if ( ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCbCharge.Value <> 0 ) ) ) And
       ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
          Exit;
      end;
    end;

    if ((Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['2', '4', '8'])) // 수정[완료/문의/취소] 건 경우
        and ( (cxtStartXval.Text <> cxtStartXval.Hint) or (cxtStartYval.Text <> cxtStartYval.Hint)
         or (cxtEndXval.Text <> cxtEndXval.Hint) or (cxtEndYval.Text <> cxtEndYval.Hint))  // 좌표변환이 있었을경우
        and (not FIsCalcPrice)
    then
    begin
      msg := '출발지/도착지정보가 변경되었으나, 요금은 재계산되지 않았습니다.' + CRLF
        + '(수정[완료/취소/문의]오더는 요금항목을 선택하여 수동요금계산 바랍니다.)' + CRLF + CRLF
        + '요금 변경없이 저장 하시겠습니까?';

      if Application.MessageBox(PChar(msg), CDMSI, MB_YESNO+MB_ICONQUESTION+MB_DEFBUTTON1) = IDNO then
      begin
        if curRate.CanFocus then curRate.SetFocus;
        Exit;
      end;
    end;

    if Not pCheck_Modify(1, En_Coding(cxtJoinNum.Text)) then Exit;

    // 플러스콜로 등록되었는데, 수정시 플러스콜여건이 안되면 해제
    if lblPlusYN.Tag = 1 then
      if proc_PlusCall_RateYN = False then Exit;

		Only_Exit := True;  	
		// 조회 한 오더 정보를 수정 한다. : DB Update~~
		Proc_OrderUpdateSave(Status);
  Except
    on e: exception do
    begin
      Log('btnCmdUpdSaveClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdUpdSaveClick Error :' + E.Message);
    end;
	end;
end;

procedure TFrm_JON01N.btnCmdWaitClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.btnCmdWaitClick');
  try
    if (Pos('앱접수', Self.Caption) > 0) and (cxtJoinNum.Hint = '4') then //앱접수로 들어온 문의오더 대기버튼 클릭시
    begin
       bAppOrderOpen := True;   //콜링창에서는 초기화 한뒤 수정창에서 다시 설정해줌
       giBtnIndex := 5;
       btnCmdUpdSaveClick(btnCmdUpdSave);
       Exit;
    end;

		Proc_BtnEnabled(False);
		if GS_SEARCH_DEST_NOPOI_FALSE then
    begin
      if Trim(meoEndArea.Text) = '' then
      begin
        GMessagebox('[대기] 도착지명이 없으면 대기접수가 불가능합니다.' + #13#10
                  + '도착지를 입력하세요' + #13#10
                  + '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSE);
        if meoEndArea.CanFocus then meoEndArea.SetFocus;
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

		if (ABubinStateIndex in [1,2]) and (CbCuGb.ItemIndex = 2) then
		begin
			//법인상태 = 정상 이아닌 경우 접수/수정 불가 20210721 KHS 코리아요청 - 팀장님지시
			GMessagebox('법인계약 해지되어' +#13#10
								+ '법인콜 접수불가 합니다' +#13#10+#13#10
								+ '개인으로 변경 후 접수가 가능합니다', CDMSE); 

			Proc_BtnEnabled(True);
			Exit;
{			if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCBCharge.Value <> 0 ) ) then
			begin
				GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSE);
				SetPayMethod(PAY_METHOD_MONEY);
				Exit;
			end;  }
		end;

    if btnCmdUpdSave.Visible then
    begin
			//수정모드에서 최초결제일련번호가 없지만 수정 후 결제일련번호가 있다면 수정버튼 클릭해야함. 20210623KHS. 팀장님지시
			if (Pos('수정', Self.Caption) > 0 ) and (gsUpdateCardPaySeq = '') and (locCardPaySeq <> '') and (locCardPaySeq <> 'null') and (not Only_Exit) then
			begin
				GMessagebox('카드결제/현금영수증/쿠폰결제 한 후 수정창 종료를 하게되면 ' + #13#10
									+ '거래내역이 사라지게 됩니다. ' + #13#10
									+ '오더수정 버튼을 눌러 거래내역을 보존하세요.' , CDMSE);
				Proc_BtnEnabled(True);
				Exit;
			end;

			if Application.MessageBox('현재 화면은 오더 수정모드 입니다.' + #13#10 + #13#10
        + '수정모드에서 해당 오더를 신규오더로 [대기] 접수 하시겠습니까?',
        '[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
			begin
				Proc_BtnEnabled(True);
				Exit;
			end;

      // 수정모드에서 신규오더는 결제 정보 초기화
			locCardPaySeq := '';   // 결제일련번호
			gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)
      locCardTranNo := '';   // 거래번호
      locCardPayInfo:= '';   // 카드결제 정보
    end;

    if ( ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCbCharge.Value <> 0 ) ) ) And
       ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
				begin
					Proc_BtnEnabled(True);
					Exit;
				end;
      end;
    end;

    // 플러스콜 표준요금을 비교한다. 2010.10.13
    if Not proc_PlusCall_RateYN then
		begin
			Proc_BtnEnabled(True);
			Exit;
		end;

    // 오더정보 대기접수 모드 설정을 한다.
    btnCmdExit.Hint := 'WAITINSERT_MODE';
    btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.
    btnCmdQuestionCopy.Hint := ''; // 문의후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 대기 시 문의 처리 안타게 처리 20120806 LYB
		Only_Exit := True;   //종료버튼 힌트변경됨

    gsOrderClick := '5';
    // 오더를 대기로 접수 한다.
		Proc_OrderWaitJoinIns;
  Except
    on e: exception do
    begin
      Log('btnCmdWaitClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdWaitClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btnCmdWaitCopyClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.btnCmdWaitCopyClick');
  try
  	if GS_SEARCH_DEST_NOPOI_FALSE then
  	begin
  		if Trim(meoEndArea.Text) = '' then
  		begin
  			GMessagebox('[대기후복사] 도착지명이 없으면 대기접수가 불가능합니다.' + #13#10
									+ '도착지를 입력하세요' + #13#10
  								+ '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSE);
        if meoEndArea.CanFocus then meoEndArea.SetFocus;
  			Exit;
  		end;
  	end;

		if (ABubinStateIndex in [1,2]) and (CbCuGb.ItemIndex = 2) then
		begin
			//법인상태 = 정상 이아닌 경우 접수/수정 불가 20210721 KHS 코리아요청 - 팀장님지시
			GMessagebox('법인계약 해지되어' +#13#10
								+ '법인콜 접수불가 합니다' +#13#10+#13#10
								+ '개인으로 변경 후 접수가 가능합니다', CDMSE); 

			Exit;
{			if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCBCharge.Value <> 0 ) ) then
			begin
				GMessagebox('법인 이용정지/계약해지 고객은 후불 사용을 할 수 없습니다.', CDMSE);
				SetPayMethod(PAY_METHOD_MONEY);
				Exit;
			end;  }
		end;

    if btnCmdUpdSave.Visible then
    begin
			//수정모드에서 최초결제일련번호가 없지만 수정 후 결제일련번호가 있다면 수정버튼 클릭해야함. 20210623KHS. 팀장님지시
			if (Pos('수정', Self.Caption) > 0 ) and (gsUpdateCardPaySeq = '') and (locCardPaySeq <> '') and (locCardPaySeq <> 'null') and (not Only_Exit) then
			begin
				GMessagebox('카드결제/현금영수증/쿠폰결제 한 후 수정창 종료를 하게되면 ' + #13#10
									+ '거래내역이 사라지게 됩니다. ' + #13#10
									+ '오더수정 버튼을 눌러 거래내역을 보존하세요.' , CDMSE);
				Proc_BtnEnabled(True);
				Exit;
			end;

			if Application.MessageBox('현재 화면은 오더 수정모드 입니다.' + #13#10 +
        #13#10 + '수정모드에서 해당 오더를 신규오더로 [대기후복사] 하시겠습니까?',
        '[수정모드]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
        Exit;

      // 수정모드에서 신규오더는 결제 정보 초기화
			locCardPaySeq := '';   // 결제일련번호
			gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)
      locCardTranNo := '';   // 거래번호
    	locCardPayInfo:= '';   // 카드결제 정보
    end;

    if edtPostPay.Value > curRate.Value then
    begin
      if (cbbPayMethod.Text <> PAY_METHOD_BUSAN) and (cbbPayMethod.Text <> PAY_METHOD_BUSAN2K) And
         (cbbPayMethod.Text <> PAY_METHOD_BUSAN3K) then
      begin
        GMessagebox('기사송금금액이 요금보다 많습니다.', CDMSE);
        edtPostPay.Value := curRate.Value;
      end;
    end;

    if ( ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) Or ( (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curCbCharge.Value <> 0 ) ) ) And
       ( cbbPostTime.Text <> POST_TIME_NOPAY ) then
    begin
      if curRate.Value <> edtPostPay.Value  then
      begin
        if Application.MessageBox('오더금액과 기사송금금액이 다릅니다.' + #13#10
          + '계속 진행하시겠습니까?', '[금액확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
          Exit;
      end;
    end;

    // 플러스콜 표준요금을 비교한다. 2010.10.13
    if Not proc_PlusCall_RateYN then  Exit;

    // 오더정보 대기후복사 모드 설정을 한다.
  	btnCmdExit.Hint := 'WAITINSERTCOPY_MODE';
  	btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    btnCmdWaitCopy.Hint := 'JOINCOPY'; // 대기후 복사 기능 설정.
    btnCmdQuestionCopy.Hint := ''; // 문의후 복사 기능 설정.

    bAUTOCMDQUESTION := False; // 대기후복사 시 문의 처리 안타게 처리 20120806 LYB
  	Only_Exit := True;   //종료버튼 힌트변경됨

    // 오더를 대기로 접수 한다.
    gsOrderClick := 'WC';
    Proc_OrderWaitJoinIns;
  Except
    on e: exception do
    begin
      Log('btnCmdWaitCopyClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnCmdWaitCopyClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btnCmdWaitRClick(Sender: TObject);
begin
  try
    btnCmdWaitR.Tag := 1;
    btnCmdUpdSave.Click;
  finally
    btnCmdWaitR.Tag := 0;
  end;
end;

procedure TFrm_JON01N.btnCMenuDropDownMenuPopup(Sender: TObject; var APopupMenu: TPopupMenu; var AHandled: Boolean);
begin
  pFormActive;
end;

procedure TFrm_JON01N.btnCustAppinfoClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.btnCustAppinfoClick');
  if Not pnlCustAppinfo.Visible then
  begin
   	pnlCustAppinfo.Top := grpTop2.Top + 85;
    pnlCustAppinfo.Left := 295;
  	pnlCustAppinfo.Visible := True;
  end else
  begin
  	pnlCustAppinfo.Visible := False;
  end;
end;

procedure TFrm_JON01N.btnCustomSMSClick(Sender: TObject);
var
  sKeyNum, sCustTel: string;
begin
	SetDebugeWrite('JON01N.btnCustomSMSClick');

  try
    sKeyNum := Proc_MainKeyNumberSearch;
		sKeyNum := StringReplace(sKeyNum, '-', '', [rfReplaceAll]);

    if Trim(cxtCuTel2.Text) <> '' then sCustTel := cxtCuTel2.Text
                                  else sCustTel := cxtCuTel.Text;


    if StrToIntDef(Copy(sCustTel, 1, 2), 0) <> 1 then
    begin
			GMessagebox('고객번호가 핸드폰이 아닙니다.' + #13#10 +
        '문자메세지를 보낼수 없습니다.', CDMSE);
      Exit;
    end;

  	sCustTel := StringReplace(sCustTel, '-', '', [rfReplaceAll]);

    if Not Assigned(Frm_SMS01) then Frm_SMS01 := TFrm_SMS01.Create(Nil);
    Frm_SMS01.pSMS01Dock.bUnDock := pJON01Dock.bUnDock;
    Frm_SMS01.pSMS01Dock.HdNo    := pJON01Dock.HdNo;
    Frm_SMS01.pSMS01Dock.BrNo    := pJON01Dock.BrNo;
    Frm_SMS01.pSMS01Dock.BrName  := pJON01Dock.BrName;
    Frm_SMS01.pSMS01Dock.Gubun   := pJON01Dock.Gubun;
    Frm_SMS01.pSMS01Dock.Idx     := pJON01Dock.Idx;

    Frm_SMS01.mm_message.Text := '';
    sKeyNum := StringReplace(sKeyNum, '-', '', [rfReplaceAll]);
    Frm_SMS01.ed_send.Text := sKeyNum;
    Frm_SMS01.ls_sms.Items.Clear;
    Frm_SMS01.ls_sms.Items.Add(sCustTel);
    Frm_SMS01.sMemo := '[고객문자전송]';
    Frm_SMS01.sConfSlip := GT_OrderInfo[Self.Tag].Slip;
    Frm_SMS01.sWkSabun := '';
    Frm_SMS01.Proc_Init;
    Frm_SMS01.PageControl1.ActivePageIndex := 1;
    Frm_SMS01.Show;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.btnDCalcClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.cxButton3Click');
  pFormActive;
  tmrThRealDis.Tag := 0;
  tmrDistance.Enabled := True;
end;

procedure TFrm_JON01N.btnECloseClick(Sender: TObject);
begin
  GBEndXYView.Visible := False;
end;

procedure TFrm_JON01N.Proc_JoinFromClose;
var
	sCaption: string;
	iCnt, i, iJOn03, iJon01LastNo : Integer;
begin
	SetDebugeWrite('JON01N.Proc_JoinFromClose');
  try
  	try
      try
        if Frm_Main.JON01MNG[Self.Tag].rOriginal then
        begin
          pSet703CShareClose('Z', Self.Tag, Frm_Main.Frm_JON01N[Self.Tag]);
          Frm_Main.JON01MNG[Self.Tag].rKey := '';
          Frm_Main.JON01MNG[Self.Tag].rTime := '';
          Frm_Main.JON01MNG[Self.Tag].rOriginal := False;
        end;

				pnl_EndDetail_Update.Visible := False;
				edt_EndDetail_Update.Text := '';

     		grpBrNoMent.Visible := False; // 지사 안내멘트 닫음.
        grpNewCustYN.Visible := False; // 신규고객여부의 정보창 닫음.

        btnUseLimitV.Visible := False;
        grpUseLimitV.Visible := False;

        btnSendEmail.Visible := False;

        if (GB_365System) then
        begin
          btnCmdWaitR.Tag := 0;
          btnCmdWaitR.Visible  := False;
          btnCmdUpdSave.Left   := btnCmdQuestion.Left;
          btnCmdUpdSave.Top    := btnCmdQuestion.Top;
          btnCmdUpdSave.Width  := 112;
          btnCmdUpdSave.Height := 57;
        end;

        lblLimitDateNum.Caption := '기준일 : -일';
        lblLimitCnt.Caption := '0';
        lblUseCnt.Caption := '0';
        lblRemainCnt.Caption := '0';
        lblLimitCharge.Caption := '0';
        lblUseCharge.Caption := '0';
        lblRemainCharge.Caption := '0';

        lblDLimitCnt.Caption := '0';
        lblDUseCnt.Caption := '0';
        lblDRemainCnt.Caption := '0';
        lblDLimitCharge.Caption := '0';
        lblDUseCharge.Caption := '0';
        lblDRemainCharge.Caption := '0';

				cxCallTitle.Caption := ''; //초기화 추가  20191201 KHS
//				/////////기사면허종류 초기화////////////////
//				cbbLicType.ItemIndex := 0;
//				grpWkLicType.Visible := false;
//				/////////기사면허종류 초기화////////////////

//				chkViewLevel.Checked := False;
//				/////////기사나이 초기화////////////////
//				lblWkAge.Tag := 0;
//        pSetLabelClick(lblWkAge);
//        edtWkFAge.Text := '';
//        edtWkTAge.Text := '';
//        lblWkAge.Hint := '';
//        grpWkAge.Visible := false;
//				/////////기사나이 초기화////////////////

//        grpBubinState.Visible := False; //법인 상태 알림창
//        grpBubinState.Left := 285;
//        grpBubinState.Top := 76;
//        ABubinStateIndex := 0; //법인 상태 초기화

        // 이용내역 팝업메뉴 초기화
    		FillChar(A01_HIS_POPUP, SizeOf(A01_HIS_POPUP), chr($00));

        edtPostPay.Hint := '';

        grpMultiV.Visible := False;

//    		cxtCuBubin.Hint := '';  //법인코드 초기화

    		btnCmdJoinCopy.Hint := ''; // 접수후 복사 기능 설정.
    		btnCmdWaitCopy.Hint := ''; // 대기후 복사 기능 설정.
        btnCmdQuestionCopy.Hint := ''; // 문의후 복사 기능 설정.

        // CID 조회인지 설정을 한다.  Value:CID
//        cxLblCIDUseFlg.Hint := '';
    		// 접수번호 조회 인지 설정을 한다. Value:CONFSLIP
    		cxLblConfSlipUseFlg.Hint := '';

//        lsBr_KeyNumber := '';

//        GBTop3.Color := $00DADCFE;
//        PnlKTPOIYN.Visible := False;
//        TmplcsSta1 := '';
//        TmplcsSta2 := '';
//        TmplcsSta3 := '';
//        TmplcsSta4 := '';
//        TmplcsX := '';
//				tmplcsY := '';
//        TmpDef := '';

//				pnl_ViaAlert_Title.Hint := '';
    		meoStartArea.Hint := ''; // 포커스 더이상 넘어가지 않도록 한다.

        if Assigned(Frm_JON30) then
				begin
					Hide_Panel(lcsActiveEdit,1);
          Frm_JON30.ClearMarkStartEndVia_Icon;
          Frm_JON30.BtnAllSch.Down := False;
        	GS_POISCH_ALL := False;
          Frm_JON30.btnAllSch.LookAndFeel.SkinName := 'Sharp';
        end;

        giViaKmComplet := False;

        gsCuTelHint := '';
        locLogSeq := '';

        Only_Exit := False;      //종료버튼 힌트 초기화

//        cxLblSmartRate.Caption := '';
//        cxLblRate1.Caption := '';
//        cxLblRate2.Caption := '';

//    		pnl_charge.Visible := False;
//        cxLblWkJAmt.Caption := '0';
//        grpWkJi.Visible := False;

        pnlOrderInfoView.Visible := False;
//        grpModifyTitle.Visible := False;

//        cxTxtBrNameCaption.BringToFront;
//        cxTxtBrNameCaption.Visible := True;
        // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.

        cxLblOrderUpInfo.Caption := '수정 화면';
    		cxMeoOrderUpInfo.Text := '';

				cxtJoinNum.Tag := 0; // sTodayGb:1(당일오더), 2:(과거오더)
				btnCmdUpdSave.Hint := ''; // "수정", "추가접수" 구분값 저장.

        blChkCuSMS  := False;
        blCompulWor := False;
				gWkSabun := '';

        miCuUpdate.Enabled := False;

        meoBigo.Visible    := True;
        meoBigo2.Visible   := True;
        meoBigo3.Visible   := True;

        lblCenterMng.Enabled := True;

				btnCmdUpdSave.Tag := 0;
				tmrThRealDis.Tag := 0;

        proc_RealKmPtr_Init;

        grpReserv.Visible := False;
        cxGBSearch.Visible := False;
        BtnResvView.ImageIndex := 2;
        BtnResvView.Hint := '';

//        BtnResv.Tag := 0;  // 예약 초기화
        dtpResvDateJ.Enabled := True;
        dtpResvTimeJ.Enabled := True;
        cbSecond.Enabled := True;

        // 해당 탭을 찾아서 삭제 처리 한다.
				Frm_Main.JON01MNG[Self.Tag].Use := False;
				Frm_Main.JON01MNG[Self.Tag].Jon03Tag := -1;
				Frm_Main.JON01MNG[Self.Tag].rKey := '';
        Frm_Main.JON01MNG[Self.Tag].rTime := '';
				Frm_Main.JON01MNG[Self.Tag].rOriginal := False;
        Frm_Main.JON01MNG[Self.Tag].bNoChangeBr := False;
        cxTSearchMainTel.Enabled := True;

        if Assigned(Frm_JON011) then
        begin
          Frm_JON011.meoCuCCMemoS .Clear;
          Frm_JON011.meoCuWorMemoS.Clear;
          Frm_JON011.mmoCbMemoS.   Clear;
          Frm_JON011.TmrChkTag.Tag := 100;
        end;

        if Assigned(Frm_JON015) and Frm_JON015.HandleAllocated and (Frm_JON015.OrderHandle = Self.Handle) then Frm_JON015.Close;

    		Frm_Main.Frm_Jon012[Self.Tag].Caption := '';
        Frm_Main.Frm_Jon012[Self.Tag].cxBtnOldSelect.Tag := 0;
    		Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.SetRecordCount(0);
        Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Clear;
        Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Active := False;

        FreeAndNil(SmartSR);
        RouteMan := nil;
      except
        on e: exception do
        begin
          Log('Proc_JoinFromClose Error 0 :' + E.Message, LOGDATAPATHFILE);
          Assert(False, 'Proc_JoinFromClose Error 0 :' + E.Message);
        end;
      end;

      { TODO : 화면을 숨긴후 초기화 처리 LYB }
			Self.Hide;
      sCaption := Self.Caption;

      if GS_JON01_TAB = 1 then
      begin
        try
          if Frm_Main.JON01MNG[Self.Tag].Dock then
          begin
            Self.Parent := Self;      // nil대신 self처리..  nil을 쓰면 매번 show할때 속도 느림 lyb;
            Frm_Main.JON01MNG[Self.Tag].Dock := False;
            for iCnt := 0 to Frm_JON00.cxTabControl1.Tabs.Count - 1 do
            begin
              if (Frm_JON00.cxTabControl1.Tabs[iCnt].Caption = sCaption) And
                 (Frm_JON00.slTabTag[iCnt] = IntToStr(Self.Tag)) then
              begin
                Frm_JON00.slTabTag.Delete(iCnt);
                Frm_JON00.cxTabControl1.Tabs.Delete(iCnt);
                if iCnt <> Frm_JON00.cxTabControl1.Tabs.Count then
                  Frm_JON00.cxTabControl1Change(BtnCmdExit);
                Break;
              end;
            end;

            Application.ProcessMessages;
            Frm_Main.JON01MNG[Self.Tag].TabIndex := -1;
            if Frm_JON00.cxTabControl1.Tabs.Count = 0 then
            begin
              Frm_JON00.Hide;
              Frm_JON00.Height := 590;
              Frm_JON00.Width  := 593;
            end else
            begin
              Frm_JON00.Show;
            end;
          end;
        except
        end;
      end;

  		sCust_Gubun := '';
      // 위치 수정하면 안됨 ( 초기화 하기 전에 공백 )
			Self.Caption := '';

      try
        ControlClear(False);
				FControlInitial(False, True); // 접수화면의 기본 컨트롤을 초기화 한다.

        // CU_LEVEL_TYPE : 0 : 고객 자동등급별 라벨 칼라를 변경해 준다.
    		Proc_SetFormColor_2(10);
        // 고객 구분에 따른 라벨 칼라를 변경해 준다.
    		Proc_SetFormColor_3(10);
        // 고객 등급별 폼 칼라를 변경해 준다.
				SetCustControlColor(False, False);

				Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
				SetPrivateVariable; // 접수 전에 조회 조건 관련 전역변수 초기화..
				locDNIS := '';  //종료시에만 초기화 해줌 20160716 KHS
				cxLblCIDUseFlg.Hint := ''; ;  //종료시에만 초기화 해줌 20160716 KHS
				cxtCuTel.Hint := '';  //종료시에만 초기화 해줌 20160716 KHS
				FCustChangeInfo.name         := '';
				FCustChangeInfo.CbCuGb       := -1;
				FCustChangeInfo.meoCuCCMemo  := '';
				FCustChangeInfo.meoCuWorMemo := '';
				FCustChangeInfo.edt_CardMemo := '';
				FCustChangeInfo.cboBrOnly    := 0;
			except
      end;
      // ------------------ 발신번호 정보를 보여준다.------------------------
      cxtCallTelNum.Text := '';
//      cxtCallTelNum.StyleDisabled.TextColor := $00555151;
			// 진한 칼라 : $00555151,   // 옅은 칼라 : $00FAE1CD;

      // 지사변경 제한.[이유:고객조회 후 지사변경시 조회한 고객정보 일부유실 경고메시지 띄우기 위함임]
			cboBranch.Properties.ReadOnly := False;
      if cboBranch.Properties.Items.Count > 0 then
      begin
        cboBranch.Tag := 10;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
        cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
        cboBranch.Tag := 0;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
			end;

  		GS_CIDINFO_OUR_KEYNUMBER := True;

      if ( Not Assigned(Frm_JON30) ) Or ( Frm_JON30 = Nil ) then
       Frm_JON30 := TFrm_JON30.Create(Self);

      if Assigned(Frm_JON08) then Frm_JON08.Hide;
      if Assigned(Frm_JON018) then Frm_JON018.Close;
      Frm_JON30.Grid_Clear('meoStartArea',1);
      Frm_JON30.Grid_Clear('meoStartArea',2);
      Frm_JON30.Grid_Clear('meoStartArea',3);
      Frm_JON30.Grid_Clear('meoStartArea',4);
      Frm_JON30.Grid_Clear('meoEndArea',1);
      Frm_JON30.Grid_Clear('meoEndArea',2);
      Frm_JON30.Grid_Clear('meoEndArea',3);
      Frm_JON30.Grid_Clear('meoEndArea',4);
      Frm_JON30.Grid_Clear('meoViaArea',1);
      Frm_JON30.Grid_Clear('meoViaArea',2);
      Frm_JON30.Grid_Clear('meoViaArea',3);
      Frm_JON30.Grid_Clear('meoViaArea',4);

    { TODO : 전검색단어 초기화-같은단어가들어오면검색이 안되는부분 종료시 해제 }
      Frm_JON30.sPreSearchWord := '';
      gmap_forword := '';

      GQ_PRate[Self.Tag].sta := '';
      GQ_PRate[Self.Tag].staddr := '';
      GQ_PRate[Self.Tag].via := '';
      GQ_PRate[Self.Tag].eda := '';
      GQ_PRate[Self.Tag].edaddr := '';
      GQ_PRate[Self.Tag].rate := '';

      GC_PShare[Self.Tag].brno := '';
      GC_PShare[Self.Tag].brnm := '';
      GC_PShare[Self.Tag].mnum := '';
      GC_PShare[Self.Tag].cuhp := '';
      GC_PShare[Self.Tag].cunm := '';
      GC_PShare[Self.Tag].sta  := '';
      GC_PShare[Self.Tag].staddr := '';
      GC_PShare[Self.Tag].via  := '';
      GC_PShare[Self.Tag].eda  := '';
      GC_PShare[Self.Tag].edaddr := '';
      GC_PShare[Self.Tag].rate := '';

      GQ_PRate[Self.Tag].sta := '';
      GQ_PRate[Self.Tag].staddr := '';
      GQ_PRate[Self.Tag].via := '';
      GQ_PRate[Self.Tag].eda := '';
      GQ_PRate[Self.Tag].edaddr := '';
      GQ_PRate[Self.Tag].rate := '';

  		lst_BRList.Items.Clear;
  		lst_BRList.Visible := False;
  		searchBRlist.Clear;
  	finally
      iCnt := 0;
      iJOn03 := 0;
      GT_CALL_LIST_STATUS := clsNone;
      for i := 0 to JON_MAX_CNT - 1 do
      begin
				if Frm_Main.JON01MNG[i].Use then
        begin
          iJon01LastNo := i;
          if (Pos('콜링', Frm_Main.JON01MNG[i].Caption) > 0) then GT_CALL_LIST_STATUS := clsNew;
          if Not Frm_Main.Frm_JON03[JON03Tag].pJON03Dock.bUNDock then
						Inc(iCnt)
          else
					if Frm_Main.JON01MNG[i].Jon03Tag = Jon03Tag then Inc(iJOn03);
				end;
      end;

      if GT_CALL_LIST_STATUS = clsNone then
      begin
        if Frm_JON54.pnlCallListLock.Visible then Frm_JON54.btnCallContinue.Click;
      end;

      if iCnt < 1 then
      begin
        if gbfrmJON00Show then gbfrmJON00Show := False;

        // 자동조회 재시작 해줌.
        if Frm_Main.JON03MNG[Jon03Tag].Use then
        begin
    			if Frm_Main.Frm_JON03[Jon03Tag].btnAutoRe.Tag = 1 then
          begin
            FRm_Main.Frm_JON03[Jon03Tag].AAutoSearch_Stop := False;
    				Frm_Main.Frm_JON03[Jon03Tag].tmr_dis.Enabled := True;
            Frm_Main.Frm_JON03[Jon03Tag].PnlAuto.Visible := True;
          end;
        end;

  			GS_JON01OPEN_CHECK := False;
        if Assigned(Frm_JON011) then Frm_JON011.Hide;
        if Assigned(Frm_JON05) then Frm_JON05.Hide;
        if Assigned(Frm_JON05_1) then Frm_JON05_1.Close;
      end else
      begin
        Frm_Main.Frm_JON01N[iJon01LastNo].pFormActive;
      end;

      if Frm_Main.Frm_JON03[JON03Tag].pJON03Dock.bUNDock then
      begin
        if iJon03 < 1 then
        begin
          if Frm_Main.Frm_JON03[JON03Tag].bJON01View then Frm_Main.Frm_JON03[JON03Tag].bJON01View := False;

          if Frm_Main.JON03MNG[Jon03Tag].Use then
          begin
            // 자동조회 재시작 해줌.
    			  if Frm_Main.Frm_JON03[Jon03Tag].btnAutoRe.Tag = 1 then
            begin
              FRm_Main.Frm_JON03[Jon03Tag].AAutoSearch_Stop := False;
    			  	Frm_Main.Frm_JON03[Jon03Tag].tmr_dis.Enabled := True;
              Frm_Main.Frm_JON03[Jon03Tag].PnlAuto.Visible := True;
            end;
          end;
        end;
      end;

      Try
        if RVHandle > 0 then
        begin
          PostMessage (RVHandle, WM_CLOSE, 0, 0);
          RVHandle := 0;
        end;
      except
      End;

      if ( GS_JON01_GROUPMOVE ) And ( Not Frm_Main.JON01MNG[Self.Tag].Dock ) And ( GS_JON01_TAB = 0 ) then
        MagneticWnd.RemoveWindow(Self.Handle);
  	end;
  except
    on e: exception do
    begin
      Log('Proc_JoinFromClose Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_JoinFromClose Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.BtnEdLockClick(Sender: TObject);
begin
  pFormActive;

  if BtnEdLock.Down then
  begin
    BtnEdLock.Hint := 'F4)잠금';
    BtnEdLock.Tag  := 0;
    BtnEdLock.ImageIndex := 1;

    lblEdLock.Style.TextColor := clRed;
    lblEdLock.Style.Font.Style := [fsBold,fsUnderline];

    Frm_JON30.N2.Enabled := False;
    Frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
    Frm_JON30.btnEPoiMove.Enabled := False;
    Frm_JON30.N7.Enabled := False;
    Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
    Frm_JON30.btnEPoiAMove.Enabled := False;
  end else
  begin
    BtnEdLock.Hint := 'F4)수정';
    BtnEdLock.Tag  := 0;
    BtnEdLock.ImageIndex := 0;

    lblEdLock.Style.TextColor := $004B4B4B;
    lblEdLock.Style.Font.Style := [fsBold];

    Frm_JON30.N2.Enabled := True;
    Frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
    Frm_JON30.btnEPoiMove.Enabled := True;
    Frm_JON30.N7.Enabled := True;
    Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
    Frm_JON30.btnEPoiAMove.Enabled := True;
  end;
end;

procedure TFrm_JON01N.btnEndLocalSaveClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.btnEndLocalSaveClick');
	// 로컬에 사용자 맵정보를 저장한다.
	if TCK_USER_PER.JON_LocalMap <> '1' then
	begin
		GMessagebox('권한이 없습니다',CDMSE);
		Exit;
	end;
	proc_Save_Area(1) // 도착지 저장.
end;

procedure TFrm_JON01N.btnEpopDropDownMenuPopup(Sender: TObject; var APopupMenu: TPopupMenu; var AHandled: Boolean);
begin
  pFormActive;
end;

procedure TFrm_JON01N.btnEpopMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  if GB_JON01_MENU_OVER then
    pmEpop.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
end;

procedure TFrm_JON01N.BtnFixClick(Sender: TObject);
begin
  pFormActive;
  N5.Click;
end;

procedure TFrm_JON01N.btnGroupClick(Sender: TObject);
Var i : Integer;
begin
  pFormActive;

  if btnGroup.Tag <> 0 then Exit;

  SetDebugeWrite('JON01N.btnGroupClick');
  GS_JON01_GROUPMOVE := TcxButton(Sender).Down;
  GS_EnvFile.WriteBool('AcceptWin', 'GroupMove', GS_JON01_GROUPMOVE);

  if btnGroup.HelpContext <> 0 then Exit;
  for i := 0 to JON_MAX_CNT - 1 do
  begin
		if Frm_Main.JON01MNG[i].Use then
		begin
      if Frm_Main.Frm_JON01N[i].Tag <> Self.Tag then
      begin
        btnGroup.HelpContext := 1;
        Frm_Main.Frm_JON01N[i].btnGroup.Down := GS_JON01_GROUPMOVE;
        btnGroup.HelpContext := 0;
      end;
    end;
  end;
end;

procedure TFrm_JON01N.btnHiPOIYClick(Sender: TObject);
begin
  PnlKTPOIYN.Visible := False;
end;

procedure TFrm_JON01N.btnHistoryClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.cxButton1Click');
  if Trim(cxtCuTel.Text) = '' then Exit;

  try
    if Frm_Main.Frm_Jon012[Self.Tag].Tag <> Self.Tag then
    begin
      // 현재 할당된 폼 배열값을 저장.(현재 조회한 고객 데이터가 있는지 여부를 체킹)
      // 고객 이용내역을 그리드에 보여준다.
      Proc_CustOrderListView;
      Proc_WorkListView('');
    end else
      // 고객 이용내역을 띄워준다.
      Proc_Jon012Show;
  except

  end;
end;

procedure TFrm_JON01N.btnKtPOIYClick(Sender: TObject);
begin
  gJONStaChkXY.Area1 := TmplcsSta1;
  gJONStaChkXY.Area2 := TmplcsSta2;
  gJONStaChkXY.Area3 := TmplcsSta3;
  gJONStaChkXY.Area4 := TmplcsSta4;
  gJONStaChkXY.Area5 := TmplcsSta5;
  gJONStaChkXY.X := TmplcsX;
  gJONStaChkXY.Y := TmplcsY;
  gJONStaChkXY.GUIDE_X := TmplcsX;
  gJONStaChkXY.GUIDE_Y := TmplcsY;

  lcsSta1 := TmplcsSta1;
  lcsSta2 := TmplcsSta2;
  lcsSta3 := TmplcsSta3;
  lcsSta4 := TmplcsSta4;
  lblStartAreaName.Text := TmplcsSta1 + ' ' + TmplcsSta2 + ' ' + TmplcsSta3;
  SetDebugeWrite('JON01N.lblStartAreaName.Text 4018 : ' + lblStartAreaName.Text);
  meoStartArea.Text := TmplcsSta5;
  cxtStartAreaDetail.Text := TmplcsSta4;
  lcsConfAREA4            := TmplcsSta4;
  cxtStartXval.Text := TmplcsX;
  cxtStartYval.Text := TmplcsY;
  gsStartGUIDEXval := TmplcsX;
  gsStartGUIDEYval := TmplcsY;
  GS_Grid_DEP := TmpDef;

  PnlKTPOIYN.Visible := False;
end;

procedure TFrm_JON01N.btnMileGiveClick(Sender: TObject);
var iTag : integer;
begin
  pFormActive;
	iTag := TcxButton(Sender).Tag;

	curOutMileMny.value := 0;
	edtMileMemo.Text := '';
	btnMileOut.Tag := iTag;
	if iTag = 0 then
	begin
		lb_MileTitle.Caption := ' 마일리지 지급';
		lb_MileTitle.style.Color := $007B5B37;
		cbbCuProduct.Enabled := True;
		lbMileCaption.Caption := '지급마일';
		btnMileOut.Caption := '지급';

    cbbCuProduct.Clear; // 지급상품명
    cbbCuProduct.Properties.Items.Text := _PROD_BASE;
    curOutMileMny.Enabled := True;
    curOutMileMny.Value := 0; // 지급마일리지

    SetCuProduct(SProdName, 0);
	end else
	begin
		lb_MileTitle.Caption :=  ' 마일리지 충전';
		lb_MileTitle.style.Color := $003F745A;
		cbbCuProduct.Enabled := False;
		lbMileCaption.Caption := '충전마일';
		btnMileOut.Caption := '충전';

		curOutMileMny.Enabled := True;
		curOutMileMny.Value := 0; // 지급마일리지
	end;

	grpMileOut.Left := 285;
	grpMileOut.Top := grpTop2.Top + 58;
  grpMileOut.BringToFront;
	grpMileOut.Visible := True;
	if curOutMileMny.CanFocus then curOutMileMny.SetFocus;
end;

procedure TFrm_JON01N.btnMileOutClick(Sender: TObject);
var
	 iTag : Integer;
	 sTmp : string;
begin
	SetDebugeWrite('JON01N.btnMileOutClick');
	Try
		iTag := TcxButton(Sender).Tag;
		if iTag = 0 then sTmp := '지급' else sTmp := '충전';
		// 권한 적용 (지호 2008-08-19)
		if (iTag = 0) and (TCK_USER_PER.COM_CustMlgCharge <> '1') then
		begin
			GMessagebox('고객에게 마일리지' + sTmp + '권한이 없습니다.', CDMSE);
			Exit;
		end;

		if curOutMileMny.Value < 1 then
		begin
			ShowMessage(sTmp + '할 마일리지 금액을 입력 하세요!');
			curOutMileMny.SetFocus;
			Exit;
		end;

		if (lcsCu_seq <> '') then
		begin
			// 고객 마일리지를 즉시차감 처리 한다.
	{		if Pos('원 주유할인권', cbbCuProduct.Text) > 0 then
			begin
				UseMile := StrToIntDef(RemoveComma(curOutMileMny.Text), 0);
				if UseMile = 0 then
				begin
					GMessagebox(Format('지급상품권을 다시 선택해주세요.(지급마일리지가 부적절합니다.[%s])', [curOutMileMny.Text]), CDMSE);
					Exit;
				end;

				TotalMile := StrToIntDef(RemoveComma(curCurrent.Caption), 0);
				if TotalMile < UseMile then
				begin
					GMessagebox(Format('사용가능 마일리지가 부족합니다.[현재: %s, 지급: %s]', [
						FormatCash(TotalMile), FormatCash(UseMile)]), CDMSE);
					Exit;
				end;

				GrpCoupon.Left := 39;
				GrpCoupon.Top  := 3;
				edtCouponHP.Text := Frm_Main.Frm_JON01[Self.Tag].locsCuTel;
				GrpCoupon.Visible := True;
				edtCouponHP.SetFocus;
			end else   }
			begin
				Proc_CustMileDeduct(iTag, sTmp);
			end;
		end else
		begin
			ShowMessage('신규 미등록 고객은 마일리지를 '+sTmp+'할 수 없습니다.');
		end;
	except
		on e: exception do
		begin
			Assert(False, 'btnMileOutClick Error :' + E.Message);
		end;
	end;
end;

procedure TFrm_JON01N.btnNewClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.btnNewClick');
  pFormActive;

	if ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'J610')) or (GT_USERIF.BR = 'B100') or
		 ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'S662')) or ((GS_PRJ_AREA = 'O') and (GT_USERIF.CT = 'H227')) or
		 ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'Z780')) then //천안월드
	begin
		Log('JON01N.btnNewClick self click', LOGDATAPATHFILE);
	end;

  GS_JONSEL_BRNO := cboBranch.Text;
  try
  	Frm_Main.Proc_JoinFromView(Jon03Tag);
  finally
    GS_JONSEL_BRNO := '';
  end;
end;

procedure TFrm_JON01N.btnPickupInsertClick(Sender: TObject);
var
  CustTel, WkSabun, HdNo, BrNm: string;
begin
  SetDebugeWrite('JON01N.btnPickupInsertClick');
	if func_ecukrCheck then exit;
  if Application.MessageBox('픽업등록 하시겠습니까?', PChar(Application.Title), MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON1) = IDNO then Exit;

  try
    WkSabun   := locWkSabun;
    CustTel   := cxtCuTel.Text;
    BrNm      := locWkBrNo;
    HdNo      := '';

    if WkSabun = '' then
    begin
      BrNm := Proc_BrNameReadSearch;
      if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;
      if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
        HdNo := pJON01Dock.HDNO
      else
        HdNo := GT_USERIF.HD
    end;

    try
      if Not Assigned(Frm_WOR11) then Frm_WOR11 := TFrm_WOR11.Create(Nil);
      if Frm_WOR11.UpdatePickupData(
        '',                 // ASeq,
        'C',                // AAction,
        '',                 // AStatus,
        WkSabun,            // AWkSabun,
        HdNo,               // AHdNo,
        BrNm,               // ABrNm,
        CustTel,            // APhone
        lcsSta1,
        lcsSta2,
        lcsSta3,
        meoStartArea.Text,
        lcsEnd1,
        lcsEnd2,
        lcsEnd3,
        meoEndArea.Text,
        cxtStartXval.Text,
        cxtStartYval.Text,
        cxtEndXval.Text,
        cxtEndYval.Text
      ) then
      begin
        GMessagebox('픽업 등록 되었습니다.', CDMSI);
        btnCmdExit.Description := 'T';
        btnCmdExitClick(Self);
      end;
    finally
      Frm_WOR11.Close;
      Frm_WOR11.Free;
    end;
  Except
    on e: exception do
    begin
      Log('btnPickupInsertClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btnPickupInsertClick Error :' + E.Message);
    end;
	end;
end;

procedure TFrm_JON01N.BtnQRateClick(Sender: TObject);
begin
  BtnQRate.Enabled := False;
  try
    pFormActive;
    if ( BtnQRate.Tag = 0 ) And ( RQAListView.DataController.RecordCount = 0 ) then
    begin
      if fSet601QRate(Self.Tag, Frm_Main.Frm_JON01N[Self.Tag]) then
      begin
        RQAListView.DataController.SetRecordCount(0);
        btnRQALExit.Click;
        pCompareQRateInfo;
        GMessagebox('요금문의 완료', CDMSI);
      end;
    end else
    begin
      popQRMenu.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
      pCompareQRateInfo;
    end;
  finally
    BtnQRate.Enabled := True;
  end;
end;

procedure TFrm_JON01N.BtnRaLockClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.BtnRaLockClick');
  pFormActive;

  if Not BtnRaLock.Down then
  begin
    BtnRaLock.Hint := 'F4)수정';
    BtnRaLock.Tag  := 0;
    BtnRaLock.Down := False;
    BtnRaLock.ImageIndex := 0;
  end else
  begin
    BtnRaLock.Hint := 'F4)잠금';
    BtnRaLock.Tag  := 0;
    BtnRaLock.Down := True;
    BtnRaLock.ImageIndex := 1;
		curRate.Value := curRate.Value;           // 이부분을 안해주면 금액이 기존대로 돌아감
  end;
end;

procedure TFrm_JON01N.BtnResDClick(Sender: TObject);
begin
	fGetDiffDay( FormatDateTime('YYYYMMDD', dtpResvDate.Date) + FormatDateTime('HHNN00', dtpResvTime.Time) );
end;

procedure TFrm_JON01N.BtnResJClick(Sender: TObject);
var sTmp, sGubun : string;
begin
  if TcxButton(Sender).Name = 'BtnResJ' then
  begin
    BtnResJ.Tag := 1;
    BtnResD.Tag := 0;
    sGubun := '접수';
  end else
  if TcxLabel(Sender).Name = 'BtnResD' then
  begin
    BtnResJ.Tag := 0;
    BtnResD.Tag := 1;
    sGubun := '대기';
  end;
  
  fGetDiffDay( FormatDateTime('YYYYMMDD', dtpResvDate.Date) + FormatDateTime('HHNN00', dtpResvTime.Time) );
  //카카오T AI요금표사용
  if TcxButton(Sender).Tag = 1 then
  begin
    if ( dtpResvDate.Text + ' ' + dtpResvTime.Text )  < FormatDateTime('YYYY-MM-DD HH:NN:SS', Now) then
    begin
			GMessagebox('과거날짜로는 예약할 수 없습니다', CDMSE);
      TcxButton(Sender).Tag := 0;
      Exit;
    end;

		sTmp := FormatDateTime('YYYY-MM-DD', dtpResvDate.Date) + ' ' + FormatDateTime('HH:NN:SS', dtpResvTime.Time);
    sTmp := sTmp + ' [' + sGubun + '] 상태로 예약';
    btnCmdJoin.Caption := sGubun + '예약(F9)';

		BtnResvView.ImageIndex := 3;
    BtnResvView.Hint := sTmp;
    BtnResvView.ShowHint := True;

    if GT_Kakao_KMAiRate then img_KakaoTAiChargeClick(img_KakaoTAiCharge); //경유요금을 계산하기 위함
  end;
  //예약접수 처리
  pSetButtonClick(BtnResJ);
  pSetButtonClick(BtnResD);
end;

procedure TFrm_JON01N.BtnResvCloseClick(Sender: TObject);
begin
  grpReserv.Visible := False;
end;

procedure TFrm_JON01N.BtnResvCslClick(Sender: TObject);
begin
	BtnResvView.ImageIndex := 2;
  grpReserv.Visible := False;
  BtnResvView.ShowHint := False;

  BtnResJ.Tag := 0;
  BtnResD.Tag := 0;
  pSetButtonClick(BtnResJ);
  pSetButtonClick(BtnResD);

  if btn_FindWK.Tag = 1 then btn_FindWKClick(btn_FindWK);

  btnCmdJoin.Caption := '접수(F9)';
	//카카오T AI요금표사용
	if GT_Kakao_KMAiRate then img_KakaoTAiChargeClick(img_KakaoTAiCharge); //경유요금을 계산하기 위함
end;

procedure TFrm_JON01N.BtnResvViewClick(Sender: TObject);
begin
{  //수정창에서 예약못하도록 변경.예약이 적용되지 않아 의미없음 KHS. 정회귀팀장화 협의
  if (Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint <> 'R') then
  begin
    GMessagebox('수정창에서는 예약등록이 불가합니다.' +CRLF+CRLF
              + '단, 예약오더는 수정할 수 있습니다', CDMSE);
    Exit;
  end;   }


  pFormActive;

  grpReserv.Left := 40;
  grpReserv.Top  := 5;

  if grpReserv.Visible then
  begin
    grpReserv.Visible := False;
  end else
  begin
    if (BtnResJ.Tag = 0) and (BtnResD.Tag = 0) then
    begin
      CbSecond.ItemIndex := 0;

      dtpResvDateJ.Text := FormatDateTime('YYYY-MM-DD', Date); // 예약일자
      dtpResvTimeJ.Text := FormatDateTime('AM/PM hh:mm:ss', Now + ((1 / 24 / 60) * 10)); // 예약시간

      dtpResvDate.Text := dtpResvDateJ.Text;
      dtpResvTime.Text := dtpResvTimeJ.Text;
    end;
    fGetDiffDay( FormatDateTime('YYYYMMDD', dtpResvDate.Date) + FormatDateTime('HHNN00', dtpResvTime.Time) );
    grpReserv.BringToFront;
    grpReserv.Visible := True;
  end;
end;

procedure TFrm_JON01N.btnRQALExitClick(Sender: TObject);
begin
  gbRQAList.Visible := False;
  pCompareQRateInfo;
end;

procedure TFrm_JON01N.btnSBigo1DropDownMenuPopup(Sender: TObject; var APopupMenu: TPopupMenu; var AHandled: Boolean);
begin
  pFormActive;
end;

procedure TFrm_JON01N.btnSBigo1MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  if GB_JON01_MENU_OVER then
    pmSpop.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
end;

procedure TFrm_JON01N.btnSCloseClick(Sender: TObject);
begin
  GBStartXYView.Visible := False;
end;

procedure TFrm_JON01N.btnSendEmailClick(Sender: TObject);
begin
  if Assigned(Frm_Main.Frm_JON34B[Self.Tag]) then
  begin
    Frm_JON36 := TFrm_JON36.Create(Nil);
    try
      Frm_JON36.FTid  := Frm_Main.Frm_JON34B[Self.Tag].lcTranNo;
      Frm_JON36.FTAmt := Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Text;
      Frm_JON36.FCuSeq := lcsCu_seq;
      Frm_JON36.ShowModal;
    Except
    end;
  end else
  begin
		GMessagebox('카드전표 오픈후 사용 가능', CDMSE);
  end;
end;

procedure TFrm_JON01N.BtnSmartRateClick(Sender: TObject);
var oOderWorker, oWeather, oType : string;
   ln_Env : TIniFile;
begin
  SetDebugeWrite('JON01N.BtnSmartRateClick');
  pFormActive;
  try
    if ( Trim(cxtStartYval.Text) = '' ) Or ( Trim(cxtEndYval.Text) = '' ) then Exit;

    ln_Env := TIniFile.Create(ENVPATHFILE);
    try
      GT_AutoSmartCharge  := ln_Env.ReadBool('SmartOption', 'AutoSmartCharge',  False );
      GT_PopUpSmartCharge := ln_Env.ReadBool('SmartOption', 'PopUpSmartCharge', False );
      GT_AllPopUpSmartCharge := ln_Env.ReadBool('SmartOption', 'AllPopUpSmartCharge', False );
      GT_Smart_Section    := ln_Env.ReadString('SmartOption', 'SmartSection',   '0' );
		finally
			FreeAndNil(ln_Env);
		end;
		if not Assigned(frm_Jon019) then frm_Jon019 := Tfrm_Jon019.Create(Nil);

		if GT_RealTimeWorker then oOderWorker := ''
												 else oOderWorker := '0';
    if GT_RealTimeWeather then oWeather := ''
                          else oWeather := '0';
    //출발지 시도      lcsSta1
    //출발지 시군구    lcsSta2
    //출발지 읍면동    lcsSta3
    //출발지 세부명칭  cxtStartAreaDetail.Text
    //출발지 X         cxtStartXval.Text
    //출발지 Y         cxtStartYval.Text
    //도착지 시도      lcsEnd1
    //도착지 시군구    lcsEnd2
    //도착지 읍면동    lcsEnd3
    //도착지 세부명칭  cxtEndAreaDetail.Caption
    //도착지 X         cxtStartXval.Text
    //도착지 Y         cxtStartYval.Text
    oType := '';//검색타입

//    frm_Jon019.iSizeFlag := 1;
		frm_Jon019.rb_Auto.Tag := 1;
		frm_Jon019.rb_Auto.Checked := True;
		frm_JON019.Proc_SmartCharge(oOderWorker, oWeather
															, lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text,  cxtStartXval.Text, cxtStartYval.Text
															, lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption, cxtStartXval.Text, cxtStartYval.Text
															, oType);

		frm_Jon019.bChkTime := True;
		frm_Jon019.Tag  := Self.Tag;
		frm_Jon019.Show;
	Except
    on e: exception do
    begin
      Log('BtnSmartRateClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'BtnSmartRateClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.BtnSRClick(Sender: TObject);
Var i : Integer;
    bUse : Boolean;
    RealKmPtr : TRealKmRecord;
begin
  SetDebugeWrite('JON01N.BtnSRClick');
  pFormActive;

  if (cxtStartXval.Text = '') or (cxtStartYval.Text = '') or
		 (cxtEndXval  .Text = '') or (cxtEndYval  .Text = '') then Exit;

  if GT_DISTANCE_ST = 0 then
  begin
    GMessagebox('설정-접수현황설정-요금/거리게산방법=> 경로 탐색 거리 계산 체크후 경로보기를 눌러주세요', CDMSE);
    Exit;
  end;

  bUse := False;

  if RealKmPtr_th1[Self.Tag].UseYn then begin RealKmPtr := RealKmPtr_th1[Self.Tag];  bUse := True;  end;
  if RealKmPtr_th2[Self.Tag].UseYn then begin RealKmPtr := RealKmPtr_th2[Self.Tag];  bUse := True;  end;
  if RealKmPtr_th3[Self.Tag].UseYn then begin RealKmPtr := RealKmPtr_th3[Self.Tag];  bUse := True;  end;
  if RealKmPtr_th4[Self.Tag].UseYn then begin RealKmPtr := RealKmPtr_th4[Self.Tag];  bUse := True;  end;

  if Not bUse then
  begin
    if (Pos('수정', Self.Caption) > 0 ) then
    begin
      tmrThRealDis.Tag := 1;
      proc_dis_alculation(Self.Tag, False);
      if GT_DISTANCE_ST = 1 then proc_Realdis_Mng;
      Exit;
    end else
    begin
      GMessagebox('경로 탐색 거리 계산 후 경로보기를 눌러주세요', CDMSE);
      Exit;
    end;
  end;

  try
    With Frm_Main.Frm_JON52[JON03_MAX_CNT] do
    begin
      CONFRec.ConfSlip := 'A';
      CONFRec.ConfStatus := '';
      CONFRec.UpDate := '';
      CONFRec.DepLat := RealKmPtr.StartXVal;
      CONFRec.DepLng := RealKmPtr.StartYVal;
      CONFRec.DepName := lcsSta1 + '|' + lcsSta2 + '|' + lcsSta3 + '|' +  cxtStartAreaDetail.Text;
      CONFRec.ArrLat := RealKmPtr.EndXVal;
      CONFRec.ArrLng := RealKmPtr.EndYVal;
      CONFRec.ArrName := lcsEnd1 + '|' + lcsEnd2 + '|' + lcsEnd3 + '|' + cxtEndAreaDetail.Caption;
      CONFRec.BaechaLat := '';
      CONFRec.BaechaLng := '';
      CONFRec.BaechaName := '';

      CONFRec.ViaCnt := 0;
      CONFRec.ViaLat.Clear;
      CONFRec.ViaLng.Clear;
      CONFRec.ViaName.Clear;

      for i := 0 to 4 do
      begin
        if RealKmPtr.ViaXVal[i] <> '' then
        begin
          CONFRec.ViaLat .Add(RealKmPtr.ViaXVal[i]);
          CONFRec.ViaLng .Add(RealKmPtr.ViaYVal[i]);
          CONFRec.ViaName.Add(GT_PASS_INFO[Self.Tag][i].AREA1 + '|' + GT_PASS_INFO[Self.Tag][i].AREA2 + '|' + GT_PASS_INFO[Self.Tag][i].AREA3 + '|' + GT_PASS_INFO[Self.Tag][i].AREA4);

          Inc(CONFRec.ViaCnt);
        end;
      end;

      CONFRec.WkSabun := '';
      CONFRec.WKConnState := '';
      CONFRec.WKLocLat := '';
      CONFRec.WKLocLng := '';
      CONFRec.WKLocType := '';
      CONFRec.WKLocElapseTime := '';

      if Not GB_CALLMAP_POPUP then
      begin
        Frm_Main.cxPageControl2.ActivePageIndex := 4;
        if Not Frm_Main.BtnFix.Down then
          Frm_Main.cxPageControl2Click(Frm_Main.cxPageControl2);
      end;

      Proc_MapMode_Bessel1(fDirKm); //출발지 도착지 한지도

      btn_Mod1.Down := True;

      btn_Mod2.Enabled := False;
      btn_Mod3.Enabled := False;
      btn_Mod4.Enabled := False;

      if GB_CALLMAP_POPUP then
      begin
        Frm_Main.Frm_JON52[JON03_MAX_CNT].Show;

        for i := 0 to JON03_MAX_CNT - 1 do
        begin
          if ( Frm_Main.JON03MNG[i].Use = True ) And ( Frm_Main.JON03MNG[i].CreateYN = True ) And ( Not Frm_Main.Frm_Jon03[i].pJON03Dock.bUNDock ) then
          begin
            Frm_Main.Frm_Jon03[i].Grd2.Invalidate;
          end;
        end;
      end;
    end;
  Except
    on e: exception do
    begin
      Log('BtnSRClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'BtnSRClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btnStartLocalSaveClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.btnStartLocalSaveClick');
	// 로컬에 사용자 맵정보를 저장한다.
	if TCK_USER_PER.JON_LocalMap <> '1' then
	begin
    GMessagebox('권한이 없습니다',CDMSE);
		Exit;
  end;
	proc_Save_Area(0) // 출발지 저장.
end;

procedure TFrm_JON01N.BtnStLockClick(Sender: TObject);
begin
  pFormActive;

  if BtnStLock.Down then
  begin
    BtnStLock.Hint := 'F4)잠금';
    BtnStLock.Tag  := 0;
    BtnStLock.ImageIndex := 1;

    lblStLock.Style.TextColor := clRed;
    lblStLock.Style.Font.Style := [fsBold,fsUnderline];

    Frm_JON30.N1.Enabled := False;
    Frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
    Frm_JON30.btnSPoiMove.Enabled := False;
    Frm_JON30.N6.Enabled := False;
    Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
    Frm_JON30.btnSPoiAMove.Enabled := False;
  end else
  begin
    BtnStLock.Hint := 'F4)수정';
    BtnStLock.Tag  := 0;
    BtnStLock.ImageIndex := 0;

    lblStLock.Style.TextColor := $004B4B4B;
    lblStLock.Style.Font.Style := [fsBold];

		Frm_JON30.N1.Enabled := True;
		Frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
    Frm_JON30.btnSPoiMove.Enabled := True;
    Frm_JON30.N6.Enabled := True;
    Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
    Frm_JON30.btnSPoiAMove.Enabled := True;
  end;
end;

procedure TFrm_JON01N.btnSViewMapClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.btnSViewMapClick');
  pFormActive;
	if (cxtStartXval.Text <> '') and (cxtStartXval.Text <> '00000000') and (cxtStartXval.Text <> '000000') then
  begin
    if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
    try
      Frm_JON31.Tag := Self.Tag;
      Frm_JON31.Show;
      Frm_JON31.OnSelectedMap := SetStartAreaMap;
      Frm_JON31.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text);
      if Frm_JON31.WebBrowser1.Document <> nil then
        (Frm_JON31.Webbrowser1.Document as IHTMLDocument2).ParentWindow.Focus;
    except
      Frm_JON31.Close;
    end;
  end;
end;

procedure TFrm_JON01N.btnUseLimitVClick(Sender: TObject);
begin
  grpUseLimitV.Visible := not grpUseLimitV.Visible;
end;

procedure TFrm_JON01N.BtnViaAddClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.BtnViaAddClick');
  pFormActive;

  if Self.Tag < 0 then Exit;

  grpViaArea.Enabled  := True;

  if ViaADDTag < 5 then
  begin
    grpViaArea.Height := grpViaArea.Height + 27;
    gJon01Size[Self.Tag].grpViaAreaH := grpViaArea.Height;

		ViaADDTag := ViaADDTag + 1;

		if ViaADDTag = 1 then
		begin
      shpVia.Height := shpVia.Height + 5;
      gJon01Size[Self.Tag].shpViaH := shpVia.Height;
      pSetFormScroll(0, 32);

			BtnViaLock1.Down := False;
			BtnViaLock1.ImageIndex := 0;
			meoViaArea1.SetFocus;
			if meoViaArea1.CanFocus then meoViaArea1.SetFocus;
		end else
		if ViaADDTag > 1 then
		begin
			pSetFormScroll(0, 27);

			BtnViaLock[ViaADDTag].Down := False;
			BtnViaLock[ViaADDTag].ImageIndex := 0;
			meoViaArea[ViaADDTag].SetFocus;
			if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
		end;
	end else
  begin
		GMessagebox('경유지는 최대 5개까지 입니다.', CDMSE);
    if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
  end;
end;

procedure TFrm_JON01N.BtnViaLock1Click(Sender: TObject);
var BViaLock : TAdvGlowButton;
begin
  pFormActive;

	BViaLock := TAdvGlowButton(sender);
	if BViaLock.Down then
	begin
		BViaLock.Hint := 'F4)잠금';
		BViaLock.Tag  := 0;
		BViaLock.ImageIndex := 1;
	end else
	begin
		BViaLock.Hint := 'F4)수정';
		BViaLock.Tag  := 0;
		BViaLock.ImageIndex := 0;
	end;
end;

procedure TFrm_JON01N.BtnViaMinus1Click(Sender: TObject);
Var i, iTag, j : Integer;

		TmpViaSA1        : array[1..5] of string;  // 경유지 시도
		TmpViaSA2        : array[1..5] of string;  // 경유지 시군구
		TmpViaSA3        : array[1..5] of string;  // 경유지 읍면동
		TmpViaAreaDetail : array[1..5] of string;  // 경유지 검색어
		TmpViaAreaNAME   : array[1..5] of string;  // 경유지 POI
		TmpDocId         : array[1..5] of string;  // UID
    TmpCellSel       : array[1..5] of String;  // 셀선택구분
		TmpSchWord       : array[1..5] of String;  // 검색어
		TmpXposVia       : array[1..5] of string[10];  // 추가된 경유지 X좌표
		TmpYposVia       : array[1..5] of string[10];  // 추가된 경유지 Y좌표
begin
  SetDebugeWrite('JON01N.BtnViaMinus1Click');
  pFormActive;

  try
    if grpViaArea.Height < 10 then Exit;

    if Sender is TAdvGlowButton then iTag := TAdvGlowButton(Sender).Tag else
    if Sender is TcxLabel then iTag := TcxLabel(Sender).Tag;

    if ViaADDTag < 1 THEN ViaADDTag := 1;

    // 경유지 삭제 자료 초기화
    ViaSA1[iTag] := '';
    ViaSA2[iTag] := '';
    ViaSA3[iTag] := '';
		ViaAreaDetail[iTag] := '';
		ViaAreaName[iTag] := '';
    DocId[iTag]  := '';
		CellSel[iTag]  := '';
    SchWord[iTag]  := '';
    XposVia[iTag] := '';
    YposVia[iTag] := '';

    // 경유지 화면 표시 내역 삭제
    for i := 1 to 5 do
    begin
      if i = 1 then
      begin
				meoViaArea1.Text := '';
				cxViaAreaName1.Caption := '';
      end else
      begin
        meoViaArea[i].Text := '';
				cxViaAreaName[i].Caption := '';
      end;
    end;

    // 경유지 정보 임시 자료 저장
    for i := 1 to 5 do
    begin
      TmpViaSA1[i]        := ViaSA1[i];
      TmpViaSA2[i]        := ViaSA2[i];
      TmpViaSA3[i]        := ViaSA3[i];
			TmpViaAreaDetail[i] := ViaAreaDetail[i];
			TmpViaAreaNAME[i]   := ViaAreaNAME[i];
			TmpDocId[i]         := DocId[i];
      TmpCellSel[i]       := CellSel[i];
      TmpSchWord[i]       := SchWord[i];
      TmpXposVia[i]       := XposVia[i];
      TmpYposVia[i]       := YposVia[i];
    end;

    // 경유지 기존 정보 삭제
    for i := 1 to 5 do
    begin
      ViaSA1[i]        := '';
      ViaSA2[i]        := '';
      ViaSA3[i]        := '';
			ViaAreaDetail[i] := '';
			ViaAreaNAME[i]   := '';
			DocId[i]         := '';
			CellSel[i]       := '';
			SchWord[i]       := '';
      XposVia[i]       := '';
      YposVia[i]       := '';
    end;

    j := 1;
    for i := 1 to 5 do
    begin
      if TmpViaSA1[i] <> '' then
      begin
        ViaSA1[j]        := TmpViaSA1[i];
        ViaSA2[j]        := TmpViaSA2[i];
				ViaSA3[j]        := TmpViaSA3[i];
				ViaAreaDetail[j] := TmpViaAreaDetail[i];
				ViaAreaName[j]   := TmpViaAreaName[i];
				DocId[j]         := TmpDocId[i];
				CellSel[j]       := TmpCellSel[i];
        SchWord[j]       := TmpSchWord[i];
        XposVia[j]       := TmpXposVia[i];
				YposVia[j]       := TmpYposVia[i];
        Inc(j);
      end;
    end;

    for i := 1 to 5 do
    begin
      if i = 1 then
      begin
				meoViaArea1.Text := ViaAreaName[i];
        cxViaAreaName1.Caption := ViaSA1[i] + ' ' + ViaSA2[i] + ' '+ ViaSA3[i];
			end else
      begin
				meoViaArea[i].Text := ViaAreaName[i];
        cxViaAreaName[i].Caption := ViaSA1[i] + ' ' + ViaSA2[i] + ' '+ ViaSA3[i];
      end;
    end;

    ViaADDTag := ViaADDTag - 1;

    ViaOK;

    if grpViaArea.Height - 27 = 0 then
    begin
      grpViaArea.Enabled  := False;
      shpVia.Height := 0;
      gJon01Size[Self.Tag].shpViaH := shpVia.Height;
      grpViaArea.Height := 0;
      gJon01Size[Self.Tag].grpViaAreaH := grpViaArea.Height;

      pSetFormScroll(0, -32);
    end else
    begin
      grpViaArea.Height := grpViaArea.Height - 27;
      gJon01Size[Self.Tag].grpViaAreaH := grpViaArea.Height;

      pSetFormScroll(0, -27);
      if ViaADDTag = 1 then
      begin
        if meoViaArea1.CanFocus then meoViaArea1.SetFocus;
      end else
      if ViaADDTag > 1 then
      begin
				if meoViaArea[ViaADDTag].CanFocus then meoViaArea[ViaADDTag].SetFocus;
      end;
    end;
  Except
    on e: exception do
    begin
      Log('BtnViaMinus1Click Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'BtnViaMinus1Click Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btnViewMapClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.btnViewMapClick');
  pFormActive;
	if (cxtEndXval.Text <> '') and (cxtEndXval.Text <> '00000000') and (cxtEndYval.Text <> '000000') then
  begin
    try
      if ( Not Assigned(Frm_JON31) ) Or ( Frm_JON31 = Nil ) then Frm_JON31 := TFrm_JON31.Create(Nil);
      Frm_JON31.Tag := Self.Tag;
      Frm_JON31.OnSelectedMap := SetEndAreaMap;
      Frm_JON31.Show;
     	Frm_JON31.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
       if Frm_JON31.WebBrowser1.Document <> nil then
        (Frm_JON31.Webbrowser1.Document as IHTMLDocument2).ParentWindow.Focus;
    except
      Frm_JON31.Close;
    end;
  end;
end;

procedure TFrm_JON01N.BtnViewMemoClick(Sender: TObject);
Var iTop, iLeft : Integer;
    bLeft : Boolean;
begin
  SetDebugeWrite('JON01N.BtnViewMemoClick');
  pFormActive;
  try
//    if ( Trim(meoCuCCMemo.Text) <> '' ) Or ( Trim(meoCuWorMemo.Text) <> '' ) Or
//       ( Trim(mmoCbMemo.Text) <> '' ) Or ( Trim(edt_CardMemo.Text) <> '' ) then   // 사천사 대리 요청  2015.08.17 LYB
    begin
      if Not Assigned(Frm_JON011) Or (Frm_JON011 = Nil) then Frm_JON011 := TFrm_JON011.Create(Nil);
			Frm_JON011.lb_CuctName.Caption := edtCuName.Text;
      Frm_JON011.Tag := Self.Tag;
      if ( Not GS_JON011_POSFIX ) then
      begin
        if Frm_Main.JON01MNG[Self.Tag].Dock then
        begin
          Frm_JON011.Left := Frm_Jon00.Left - (Frm_JON011.Width + 1);
          Frm_JON011.Top  := Frm_Jon00.Top - 40;
        end else
        begin
          Frm_JON011.Left := Self.Left - (Frm_JON011.Width + 1);
          Frm_JON011.Top  := Self.Top - 40;
        end;
      end else
      begin
        iTop  := GS_EnvFile.ReadInteger('AcceptWin', 'Jon011Top', 200);
        iLeft := GS_EnvFile.ReadInteger('AcceptWin', 'Jon011Left', 0);
        if GB_JON_FIXEDPIN then
        begin
          bLeft := GS_EnvFile.ReadBool('AcceptWin', 'Jon011Pos' , True);
          if bLeft then
          begin
            Frm_JON011.Left := Self.Left - (Frm_JON011.Width + 1);
            Frm_JON011.Top  := Self.Top + iTop;
          end else
          begin
            Frm_JON011.Left := Self.Left + iLeft;
            Frm_JON011.Top  := Self.Top + (Frm_JON011.Height + 1);
          end;
        end else
        begin
          iTop  := GS_EnvFile.ReadInteger('WinPos', 'Jon011Top', 200);
          iLeft := GS_EnvFile.ReadInteger('WinPos', 'Jon011Left', 0);

          Frm_JON011.Left := iLeft;
          Frm_JON011.Top  := iTop;
        end;
      end;

      if Not mmoCbMemo.Visible then
      begin
        Frm_JON011.mmoCbMemoS.Visible := False;
        Frm_JON011.meoCuCCMemoS.Width := Frm_JON011.meoCuWorMemoS.Width;
      end;

      if TCK_USER_PER.JON_CUSTMEMO2 = '1' then
      begin
        Frm_JON011.edt_CardMemo.Properties.ReadOnly := False;
        Frm_JON011.edt_CardMemo.Properties.ImeMode := imSHanguel;
      end else
      begin
        Frm_JON011.edt_CardMemo.Properties.ReadOnly := True;
        Frm_JON011.edt_CardMemo.Properties.ImeMode := imDontCare;
      end;

      Frm_JON011.meoCuCCMemoS .Text := meoCuCCMemo.Text;
      Frm_JON011.meoCuWorMemoS.Text := meoCuWorMemo.Text;
      Frm_JON011.mmoCbMemoS.   Text := mmoCbMemo.Text;
      Frm_JON011.edt_CardMemo. Text := edt_CardMemo.Text;

      Frm_JON011.bChkTime := True;
      if chkViewLevel.Checked then
        Frm_JON011.chkViewLevel.Checked := True
      else
        Frm_JON011.chkViewLevel.Checked := False;
      Frm_JON011.Show;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.btnWkAgeCloseClick(Sender: TObject);
begin
  if StrToIntDef(edtWkFAge.Text, 0) > StrToIntDef(edtWkTAge.Text, 0) then
  begin
    ShowMessage('제한나이 설정이 잘못되었습니다.');
    Exit;
  end;

  grpWkAge.Visible := False;
  if lblWkAge.Tag = 1 then lblWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하'
                      else lblWkAge.Hint := '';
end;

procedure TFrm_JON01N.btnWkLicTypeCloseClick(Sender: TObject);
begin
	grpWkLicType.Visible := False;
end;

procedure TFrm_JON01N.btn_ChargeSaveClick(Sender: TObject);
var
  msg: string;
begin
  SetDebugeWrite('JON01N.btn_ChargeSaveClick');
  pFormActive;

  try
    if (cxtStartYval.Text = '') or (cxtEndYval.Text = '') then
    begin
      GMessageBox('출발지/도착지를 검색하여야 요금 저장이 가능합니다.', CDMSE);
      Exit;
    end;

    if gsMyMainTelUse = 'TRUE' then
    begin
      GMessageBox('대표번호 별 기본요금 강제적용 상태에서는 요금저장 할 수 없습니다.', CDMSE);
      Exit;
    end;

    if (CHARGE_GUBUN = 'P') and (GS_EXEC_GUBUN = 0) then
    begin
      msg := '콜마너 프로그램 동시 실행 시 나중에 실행된 프로그램에서는 발신번호(CID), 로컬요금DB 연동이 제한 됩니다.' + #13#10 + #13#10
           + '먼저 실행한 프로그램을 통해 이용바랍니다.';
      GMessageBox(msg, CDMSE);
      Exit;
    end;


    if not Assigned(Frm_JON018) then Frm_JON018 := TFrm_JON018.Create(Nil);
    Frm_JON018.Left := Self.ClientOrigin.X - Frm_JON018.Width;
    Frm_JON018.Top := Self.ClientOrigin.Y;
    Frm_JON018.cxTreeFirstDetail.Root.TreeList.Clear;
    if (GS_Grid_DEP = 'D') or (GS_Grid_DES = 'D') then
    begin
      if (GS_Grid_DEP = 'D')  and (GS_Grid_DES <> 'D') then
        Frm_JON018.LoadCharge(FType, Proc_MainKeyNumberSearch, lcsSta1, lcsSta2, lcsSta3, '', cxtStartXval.Text, cxtStartYval.Text
                                                     , lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, Ceil(fCruKm))
      else
      if (GS_Grid_DEP <> 'D') and (GS_Grid_DES = 'D') then
        Frm_JON018.LoadCharge(FType, Proc_MainKeyNumberSearch, lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text
                                                     , lcsEnd1, lcsEnd2, lcsEnd3, '', cxtEndXval.Text  , cxtEndYval.Text, Ceil(fCruKm))
      else
      if (GS_Grid_DEP = 'D')  and (GS_Grid_DES = 'D')  then
        Frm_JON018.LoadCharge(FType, Proc_MainKeyNumberSearch, lcsSta1, lcsSta2, lcsSta3, '', cxtStartXval.Text, cxtStartYval.Text
                                                     , lcsEnd1, lcsEnd2, lcsEnd3, '', cxtEndXval.Text  , cxtEndYval.Text, Ceil(fCruKm))
    end
    else
      Frm_JON018.LoadCharge(FType, Proc_MainKeyNumberSearch, lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text
                                                   , lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text  , cxtEndXval.Text  , cxtEndYval.Text, Ceil(fCruKm));

    Frm_JON018.Show;
  Except
    on e: exception do
    begin
      Log('btn_ChargeSaveClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'btn_ChargeSaveClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.btn_EndDetail_UpdateClick(Sender: TObject);
begin
	pnl_EndDetail_Update.Visible := False;
	cxtEndAreaDetail.Caption := edt_EndDetail_Update.Text;
	cxReEndArea.Text := StringReplace(cxReEndArea.Text, edt_EndDetail_Update.Hint, edt_EndDetail_Update.Text, [rfReplaceAll]);
	MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);
	cxReEndArea.Enabled := True;
	edt_EndDetail_Update.Text := '';
	curRate.SetFocus;
end;

procedure TFrm_JON01N.btn_FindWKClick(Sender: TObject);
begin
  if ((Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 )) or (cxtJoinNum.Hint = 'R') then
//  if cxtJoinNum.Hint = 'R' then
  begin
    if btn_FindWK.Tag = 0 then 
    begin
      btn_FindWK.Tag := 1;
      if chkCompulWor.Checked then
      begin
        lb_CompulWor2.Caption := lb_CompulWor.Caption;   			
      end else
      begin
        chkCompulWor.Checked := True;
      end;
      
    end else 
    begin
      btn_FindWK.Tag := 0;
      pSetButtonClick(btn_FindWk);
      chkCompulWor.Checked := False;
      gsWkSubun_Up := '';
      lb_CompulWor2.Caption := '';
      lb_CompulWor.Caption := '';
      exit;
    end;

  end;
end;

procedure TFrm_JON01N.btn_LBSClick(Sender: TObject);
var sStr : string;
	iCnt, iLeft : Integer;
	bSendOk : Boolean;
begin
  pFormActive;

  if Not func_LBS_YN then
  begin
		sStr := '콜마너IPCC와 마술피리 이용시에만 사용이 가능합니다.';
		GMessageBox(sStr, CDMSE);
    Exit;
  end;

	if CallToStr(Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber)) <> CallToStr(Trim(GS_JONCidInput.PhoneNumber)) then
	begin
		sStr := '이미 통화가 종료된 고객입니다.' + #13#10 + #13#10
					+ '통화가 종료된 고객은 LBS(고객위치확인) 요청이 불가능합니다.';
		GMessageBox(sStr, CDMSE);
		Exit;
	end;

//	if CallToStr(Trim(btn_LBS.Hint)) <> CallToStr(Trim(cxtCuTel.Text)) then
	if CallToStr(Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber)) <> CallToStr(Trim(cxtCuTel.Text)) then
	begin
		sStr := '최초 인입된 연락처가 아닙니다.' + #13#10
					+ '[인입]>>' + StrToCall(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber) + #13#10
					+ '[현재]>>' + StrToCall(cxtCuTel.Text) + #13#10 + #13#10
					+ 'LBS(고객위치확인)은  CID를 통하여 정상적으로 인입된' + #13#10
					+ '고객연락처에 대해서만 요청이 가능합니다.' + #13#10 + #13#10
					+ '** 통화관리, CID 내역에서 띄운 접수창에서는' + #13#10
					+ '   LBS를 이용할 수 없습니다.';
		GMessageBox(sStr, CDMSE);
		Exit;
	end;

	if copy(Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber),1,2) <> '01' then
	begin
		sStr := 'LBS(고객위치확인)은 고객연락처가 일반전화일 경우 이용이 불가능합니다.' + #13#10 + #13#10
				 + '고객연락처를 확인하세요';
		GMessageBox(sStr, CDMSE);
		cxtCuTel.SetFocus;
		Exit;
	end;

	if Frm_Main.JON01MNG[Self.Tag].Dock then iLeft := Frm_JON00.Left
	                                    else iLeft := Self.Left;

	Try
		if (GT_OCX = 'SI415') then
		begin
			if fSi415IPCCSendData(fSI_MakeHeader_Only('8110', '0', '')) then
			begin
				btn_LBS.enabled := False;
				if ( Not Assigned(frm_JON60) ) Or ( frm_JON60 = Nil ) then
					frm_JON60 := Tfrm_JON60.Create(Nil)
				else frm_JON60.proc_Init;
				frm_JON60.Top := 222;
				frm_JON60.Left := iLeft - frm_JON60.width;
				Frm_JON60.Tag := Self.Tag	;

				Frm_JON60.gsBrNo := Proc_BRNOSearch;
				//frm_main Frm_JON01[GI_JON01_LastFromIdx].btn_LBS.Hint := GS_JONCidInput.PhoneNumber;
				Frm_JON60.gsTel  := Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber);//cxtCuTel.Text; //} btn_LBS.Hint; //GS_JONCidInput.PhoneNumber;
				frm_JON60.Show;
			end
		end else
		if (GT_OCX = 'SSIT') then
		begin
			// 서버에 연결
			if Not frm_main.bSSIO_CTI.Socket.Connected then
      begin
				iCnt := 0;
				while Not frm_main.bSSIOCTIConnected do
				begin
					frm_main.tmr_SSIO_check.Tag := 0;
					frm_main.tmr_SSIO_check.Interval := 10;
					frm_main.tmr_SSIO_check.Enabled := True;
					Application.ProcessMessages;
					Sleep(10);
					Inc(iCnt);
					if iCnt > 50 then
					begin
						 SetDebugeWrite('bSSIO_CTI Socket Active Error ');
						 Break;
					end;
				end;
			end;

			if frm_main.bSSIO_CTI.Socket.Connected then
			begin
				frm_main.gbCTI_Calling_Status := True;
				frm_main.gtCTI_Calling_Time   := Now;   // :: [분초(시간) 저장]

				// 2501. 전화걸기 요청 패킷
				sStr := '#';
				sStr := sStr + '8110';                    // 패킷 구분 값
				sStr := sStr + Rpad('5001'  ,   4, ' ');  // 사업자 구분 코드 ( 5001 )
				sStr := sStr + Rpad(''      ,  20, ' ');  // 사업자 자체 패킷 구분 번호
				sStr := sStr + Rpad('00'    ,   2, ' ');  // 결과값
				sStr := sStr + Rpad(''      ,  15, ' ');  // 전화걸번호
				sStr := sStr + Rpad(''      ,  15, ' ');  // 발신번호
				sStr := sStr + Rpad(''      ,  15, ' ');  // 대표번호
				sStr := sStr + '$';

				frm_main.bSSIO_CTI.Socket.SendText(sStr);
				bSendOk := True;
				SetDebugeWrite('bSSIO_CTI Send: '+ sStr);

				btn_LBS.enabled := False;
				if ( Not Assigned(frm_JON60) ) Or ( frm_JON60 = Nil ) then
					frm_JON60 := Tfrm_JON60.Create(Nil)
				else frm_JON60.proc_Init;
				frm_JON60.Top := 222;
				frm_JON60.Left := iLeft - frm_JON60.width;
				Frm_JON60.Tag := Self.Tag	;

		//		if GS_PRJ_AREA = 'S' then Frm_JON60.sArea := 's' else Frm_JON60.sArea := 'j';
				Frm_JON60.gsBrNo := Proc_BRNOSearch;
				//frm_main Frm_JON01[GI_JON01_LastFromIdx].btn_LBS.Hint := GS_JONCidInput.PhoneNumber;
				Frm_JON60.gsTel  := Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber);//cxtCuTel.Text; //} btn_LBS.Hint; //GS_JONCidInput.PhoneNumber;
				frm_JON60.Show;
			end;
		end;
	except
		btn_LBS.enabled := True;
  End;
end;

procedure TFrm_JON01N.btn_MileOut_CloseClick(Sender: TObject);
begin
	grpMileOut.Visible := False;
end;

procedure TFrm_JON01N.btn_ViaCheckClick(Sender: TObject);
begin
	grpBtm.Enabled := True; //다른입력 막음
	BtnViaAddClick(BtnViaAdd);
	pnl_ViaAlert.Visible := False;

	if lg_Save = '1' then
	else if lg_Save = '2' then
		Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
end;

procedure TFrm_JON01N.btn_ViaSkipClick(Sender: TObject);
begin
	grpBtm.Enabled := True; //다른입력 막음
	pnl_ViaAlert.Visible := False;
	pnl_ViaAlert_Title.Hint := 'Skip';
	if lg_Save = '1' then
		Proc_Save(pnl_ViaAlert.Hint)
	else if lg_Save = '2' then
		btnCmdUpdSaveClick(btnCmdUpdSave)
end;

procedure TFrm_JON01N.ViaOK;
var
	i, iRow, iLastViaTag, iVia, iRate : Integer;
	bSearchYN: boolean; // 요금 재조회 여부
  sViaTmp, sViaMemo : String;
begin
	SetDebugeWrite('JON01N.ViaOK');
	try
		iRow := Self.Tag; // 폼 인덱스.

		bSearchYN := False; // 요금 재조회 여부

		if gsViaStartEndCheck = 'Y' then
    begin
	  	meoStartArea.Text := gsStArea[iRow];
		end else
    if gsViaStartEndCheck = 'N' then
    begin
 	  	meoEndArea.Text := gsEdArea[iRow];
    end;

  	if (XposVia[1] <> '') and (ViaADDTag = 0) then ViaADDTag := 1; //첫번째 경유지일 경우

  	iLastViaTag := ViaADDTag;

    sViaTmp := '';
    sViaMemo := '';

  	iVia := 1;    //저장전문에 포함될 경유지 추가 초기값
  	if iLastViaTag > 0 then
  	begin
  		for i := 0 to 4 do
  		begin
  			GT_PASS_INFO[iRow][i].AREA1 := '';
        GT_PASS_INFO[iRow][i].AREA2 := '';
        GT_PASS_INFO[iRow][i].AREA3 := '';
  			GT_PASS_INFO[iRow][i].AREA4 := '';
  			GT_PASS_INFO[iRow][i].AREA5 := '';
  			GT_PASS_INFO[iRow][i].DOCID := '';
  			GT_PASS_INFO[iRow][i].CELLS := '';
  			GT_PASS_INFO[iRow][i].SWORD := '';
  			GT_PASS_INFO[iRow][i].MAP_X := '';
  			GT_PASS_INFO[iRow][i].MAP_Y := '';
      end;

      meoStartArea.Tag := 1;
			meoEndArea.Tag := 1;
      try
        for i := 1 to iLastViaTag do
        begin
          if i = 1 then
          begin
            if meoViaArea1.Text <> '' then
						begin
							meoViaArea1.Text := StringReplace(meoViaArea1.Text, #9, '', [rfReplaceAll]);  // Tab키 삭제
              GT_PASS_INFO[iRow][iVia - 1].AREA1 := ViaSA1[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA2 := ViaSA2[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA3 := ViaSA3[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA4 := ViaAreaDetail[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA5 := meoViaArea1.Text;
              GT_PASS_INFO[iRow][iVia - 1].DOCID := DocId[i];
              GT_PASS_INFO[iRow][iVia - 1].CELLS := CellSel[i];
              GT_PASS_INFO[iRow][iVia - 1].SWORD := ViaAreaDetail[i];
              GT_PASS_INFO[iRow][iVia - 1].MAP_X := XposVia[i];
              GT_PASS_INFO[iRow][iVia - 1].MAP_Y := YposVia[i];
							if (gsViaStartEndCheck = 'Y') and (GT_PASS_INFO[iRow][0].AREA1 <> '') then
                meoStartArea.Text := meoStartArea.Text + '/' + meoViaArea1.Text
              else
              if gsViaStartEndCheck = 'N' then
                sViaTmp := meoViaArea1.Text + '/';

							sViaMemo := meoViaArea1.Text;
							inc(iVia);

							if (pos('경유)', meoStartArea.Text) < 1) and (GT_PASS_INFO[iRow][0].AREA1 <> '') then
							begin
								lbl_02.Tag := 1;
                plbl_00Click(lbl_02);
                pSetLabelClick(lbl_02);
							end	else
							begin
								if GT_PASS_INFO[iRow][0].AREA1 = '' then
								begin
									lbl_02.Tag := 0;
                  plbl_00Click(lbl_02);
                  pSetLabelClick(lbl_02);
								end;
							end;
						end else
						begin
							lbl_02.Tag := 0;
              plbl_00Click(lbl_02);
              pSetLabelClick(lbl_02);
						end;
					end else
          begin
            if meoViaArea[i].Text <> '' then
            begin
              meoViaArea[i].Text := StringReplace(meoViaArea[i].Text, #9, '', [rfReplaceAll]);  // Tab키 삭제
              GT_PASS_INFO[iRow][iVia - 1].AREA1 := ViaSA1[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA2 := ViaSA2[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA3 := ViaSA3[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA4 := ViaAreaDetail[i];
              GT_PASS_INFO[iRow][iVia - 1].AREA5 := meoViaArea[i].Text;
              GT_PASS_INFO[iRow][iVia - 1].DOCID := DocId[i];
							GT_PASS_INFO[iRow][iVia - 1].CELLS := CellSel[i];
              GT_PASS_INFO[iRow][iVia - 1].SWORD := ViaAreaDetail[i];
              GT_PASS_INFO[iRow][iVia - 1].MAP_X := XposVia[i];
							GT_PASS_INFO[iRow][iVia - 1].MAP_Y := YposVia[i];
							if (gsViaStartEndCheck = 'Y') and (GT_PASS_INFO[iRow][iVia - 1].AREA1 <> '') then
                meoStartArea.Text := meoStartArea.Text + '/' + meoViaArea[i].Text
              else
              if gsViaStartEndCheck = 'N' then
                sViaTmp := sViaTmp + meoViaArea[i].Text + '/';

							if (pos('경유)', meoStartArea.Text) < 1) and (GT_PASS_INFO[iRow][0].AREA1 <> '') then
							begin
								lbl_02.Tag := 1;
                plbl_00Click(lbl_02);
                pSetLabelClick(lbl_02);
							end	else
							begin
								if GT_PASS_INFO[iRow][0].AREA1 = '' then
								begin
									lbl_02.Tag := 0;
                  plbl_00Click(lbl_02);
                  pSetLabelClick(lbl_02);
								end;
							end;

							sViaMemo := sViaMemo + '/' + meoViaArea[i].Text;
							inc(iVia);
						end else
						begin
							if GT_PASS_INFO[iRow][0].AREA1 = '' then
							begin
								lbl_02.Tag := 0;
                plbl_00Click(lbl_02);
                pSetLabelClick(lbl_02);
							end;
						end;
					end;
				end;

				if GT_PASS_INFO[iRow][0].AREA1 <> '' then
				begin
					meoEndArea.Text := sViaTmp + meoEndArea.Text;
					meoBigo.Text := fMemoToVia(sViaMemo, meoBigo.Text);
				end;
			finally
        meoStartArea.Tag := 0;
        meoEndArea.Tag := 0;
      end;

		end	else
  	begin
  		i := 1;
  		GT_PASS_INFO[iRow][i - 1].AREA1 := '';
  		GT_PASS_INFO[iRow][i - 1].AREA2 := '';
  		GT_PASS_INFO[iRow][i - 1].AREA3 := '';
      GT_PASS_INFO[iRow][i - 1].AREA4 := '';
  		GT_PASS_INFO[iRow][i - 1].AREA5 := '';
  		GT_PASS_INFO[iRow][i - 1].DOCID := '';
  		GT_PASS_INFO[iRow][i - 1].CELLS := '';
  		GT_PASS_INFO[iRow][i - 1].SWORD := '';
  		GT_PASS_INFO[iRow][i - 1].MAP_X := '';
      GT_PASS_INFO[iRow][i - 1].MAP_Y := '';

			lbl_02.Tag := 0;
      plbl_00Click(lbl_02);
      pSetLabelClick(lbl_02);
  	end;

    meoBigo.Text := fMemoToVia(sViaMemo, meoBigo.Text);

  	proc_dis_alculation_Via;
  	if bSearchYN = False then
  	begin // 요금 재조회 여부
  		if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) and ( not GS_ALL_SEVEN ) then
      begin
        tmrThRealDis.Tag := 0;
        if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                               else begin
                                      iRate := func_search_charge;
                                      if Not gsMyMainRateNoChange then
                                      begin
																				if BtnRaLock.Hint <> 'F4)잠금' then
																				begin
																					curRate.Value := iRate{ + cxCurRevisionRate.value};
																					OrgRate := curRate.Value{ - cxCurRevisionRate.value};
																				end
																				else
																				begin
																					if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
																					begin
																						if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
																						begin
                                              pSetLockMent(3);
																						end;
																					end;
																				end;
                                      end;
                                    end;
     	end;
    end;
    pCompareQRateInfo;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.LoadPostTime;
begin
  try
    cbbPostTime.Properties.Items.Clear;

    //  후불일경우에만 입금방식 추가해줬었는데 부산오천콜 작업하면서 현금이면서 입금방식이 변경될수도 있으므로 해제 처리  2015.01.20 LYB
//--    if IsPayMethodPost then
    begin
      cbbPostTime.Properties.Items.Add(POST_TIME_NOPAY);
      cbbPostTime.Properties.Items.Add(POST_TIME_TOMORROW);
      cbbPostTime.Properties.Items.Add(POST_TIME_FIN20);
      cbbPostTime.Properties.Items.Add(POST_TIME_FIN60);
{    end else
    begin
      cbbPostTime.Properties.Items.Add(POST_TIME_NOPAY);}
    end;

    cbbPostTime.ItemIndex := 0;
    // 2011.03.02 후불기본값 cbbPayMethodPropertiesChange 에서 이후에 로드(GT_USERIF.AfterPayMidx)
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01N.GetPostTime: string;
var
  Str: string;
begin
  SetDebugeWrite('JON01N.GetPostTime');
  try
    Str := cbbPostTime.Text;

    if Str = POST_TIME_TOMORROW then  Result := '1440' else
    if Str = POST_TIME_FIN20 then Result := '20' else
    if Str = POST_TIME_FIN60 then Result := '60'
                             else Result := '';
  except
    Result := '';
  end;
end;

procedure TFrm_JON01N.SetPostTime(const Value: string);
begin
  SetDebugeWrite('JON01N.SetPostTime');
  try
    if (Value = '') or (Value = '0') or (Value = POST_TIME_NOPAY) then _SetItem(cbbPostTime, POST_TIME_NOPAY)  else
    if (Value = '1440') or (Value = POST_TIME_TOMORROW) then _SetItem(cbbPostTime, POST_TIME_TOMORROW) else
    if (Value = '20') or (Value = POST_TIME_FIN20) then _SetItem(cbbPostTime, POST_TIME_FIN20) else
    if (Value = '60') or (Value = POST_TIME_FIN60) then _SetItem(cbbPostTime, POST_TIME_FIN60);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.cbbCuProductKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if Ord(Key) = VK_RETURN then curOutMileMny.SetFocus;
end;

procedure TFrm_JON01N.cbbCuProductPropertiesChange(Sender: TObject);
begin
	curOutMileMny.Enabled := True;
	curOutMileMny.Value := 0;

	case TcxComboBox(Sender).ItemIndex of
	-1:
		TcxComboBox(Sender).Properties.DropDownListStyle := lsEditList;
	0:
		begin
			TcxComboBox(Sender).Properties.DropDownListStyle := lsEditList;
			TcxComboBox(Sender).Text := '';
		end;
	else
		TcxComboBox(Sender).Properties.DropDownListStyle := lsFixedList;
		if Pos('원 주유할인권', TcxComboBox(Sender).Text) > 0 then
		begin
			curOutMileMny.Value := GetPriceFromProduct(TcxComboBox(Sender).Text);
			curOutMileMny.Enabled := False;
		end;
	end;
end;

procedure TFrm_JON01N.cbbPayMethodPropertiesChange(Sender: TObject);
var
  UserMile, iCoupon : Integer;
	Price, iMileUnit : Integer;
  sTmp, sHDNO, sBRNO : string;
begin
	try
    LoadPostTime;

    PAY_METHOD_BUSAN_YN := False;
    grpWkJi.Visible := False;
    cxLblWkJAmt.Caption := '0';

    sHDNO := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    sBRNO := Proc_BRNOSearch; // 지사코드 정보를 읽는다.

		// 결재구분 콤보 박스에서 유저 별도체크 원복용으로 사용함. 2011-11-08
    // 법인콜 여부(수도권만 사용함)
    if GS_PRJ_AREA = 'S' then
    begin
      sTmp := sBRNO;
      // 플러스콜 사용 [접수창체크옵션,지사,본사,연합] 조회
			sTmp := GetPlusCallYN(sTmp);
      //if proc_PlusCall_CtrlYN = 'nyyy' then
      if copy(sTmp,1,4) = 'nyyy' then
      begin //법인콜 사용여부,,  'nyyy' : 미설정. 모드
        if lblPlusYN.Hint = '' then
				begin
          lblPlusYN.Tag := 0;
          pSetLabelClick(lblPlusYN);
        end;
      end;
    end;

    cbbPayMethod.Tag := 0;  // 법인콜 체크 박스에서 결재방법 변경할수 있는 모드 초기화. 2011-11-11.
  	//자체발행쿠폰사용여부 사용여부
		cbbPayMethod.Hint := GetCouponYN(sBRNO);

    if cbbPayMethod.Text = PAY_METHOD_MULTI then
    begin
      grpMultiV.Visible := True;
      edtPostPay.Properties.ReadOnly := True;
      // 마일전용버튼

      if (cbbPayMethod.Hint = 'y') then cbMileSanction.Visible := True;
    end else
    begin
      grpMultiV.Visible := False;
      edtPostPay.Properties.ReadOnly := False;
      cbMileSanction.Visible := False;
    end;

    if cbbPayMethod.Text = PAY_METHOD_CARD_KCP then
    begin
      if btnCmdUpdSave.Visible then
      begin
        if (Pos('앱접수', Self.Caption) > 0) then
        begin
           btnCmdJoin.Enabled := True;
           btnCmdWait.Enabled := True;
        end else
        begin
           btnCmdJoin.Enabled := False;
           btnCmdWait.Enabled := False;
        end;
        btnCmdJoinCopy.Enabled := False;
        btnCmdWaitCopy.Enabled := False;
        btnCmdQuestionCopy.Enabled := False;
      end else
      begin
        btnCmdJoin.Enabled := True;
        btnCmdWait.Enabled := True;
        btnCmdJoinCopy.Enabled := True;
        btnCmdWaitCopy.Enabled := True;
        btnCmdQuestionCopy.Enabled := True;
      end;
    end else
    begin
      btnCmdJoin.Enabled := True;
      btnCmdWait.Enabled := True;
      btnCmdJoinCopy.Enabled := True;
      btnCmdWaitCopy.Enabled := True;
      btnCmdQuestionCopy.Enabled := True;
    end;

    // 후불인 경우 자동입금 금액설정
		if IsPayMethodPost then
		begin
      PostTime := POST_TIME_TOMORROW;

      // 마일리지는 한도내에서 적용
      if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
      begin
				if StrToIntDef(RemoveComma(lblCuMile.Caption), 0) < 0 then
				begin
					GMessagebox('마일리지 금액이 (-)금액입니다. ', CDMSE);
					cbbPayMethod.ItemIndex := 0;
					Exit;
				end;
				Price := curRate.Value;
				UserMile := StrToIntDef(RemoveComma(lblCuMile.Caption), 0)
									+ StrToIntDef(RemoveComma(lblMoCuMile.Caption), 0);

        iMileUnit := StrToIntDef(RemoveComma(lblCuMileUnit.Caption), 0);
        iCoupon := StrToIntDef(RemoveComma(edtPostPay.Hint), 0);  // 20130603  LYB  쿠폰결
        if iCoupon = 0 then
        begin
          if Price >= UserMile then
          begin
            if ( iMileUnit > 0 ) And ( gsJON01MileUnitUse ) then
            begin
              if ( iMileUnit >= Trunc(UserMile / 1000) * 1000 ) then
                edtPostPay.Value := Trunc(UserMile / 1000) * 1000
              else
                edtPostPay.Value := iMileUnit;
            end else
            begin
              edtPostPay.Value := Trunc(UserMile / 1000) * 1000;
            end;
          end else
          begin
            if ( iMileUnit > 0 ) And ( gsJON01MileUnitUse ) then
            begin
              if ( iMileUnit >= Price ) then
                edtPostPay.Value := Price
              else
                edtPostPay.Value := iMileUnit
            end else
            begin
              edtPostPay.Value := Price;
            end;
          end;
				end else
        begin
          edtPostPay.Value := IfThen(Price > (UserMile + iCoupon), UserMile+iCoupon, Price);
        end;
      end else
      begin
        if Not pJON01Dock.bUnDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

        if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
        begin
          edtPostPay.Value := 0;
          cxLblWkJAmt.Caption := '1,000';
          PAY_METHOD_BUSAN_YN := True;
          if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then grpWkJi.Visible := True;
        end else
        if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
        begin
          edtPostPay.Value := 0;
          cxLblWkJAmt.Caption := '2,000';
          PAY_METHOD_BUSAN_YN := True;
          if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then grpWkJi.Visible := True;
        end else
        if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
        begin
          edtPostPay.Value := 0;
          cxLblWkJAmt.Caption := '3,000';
          PAY_METHOD_BUSAN_YN := True;
          if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then grpWkJi.Visible := True;
        end else
        begin
          if (cbbPayMethod.Text = PAY_METHOD_MULTI) then
          begin
            curCbCharge.Tag := 0;
            if curCardCharge.Properties.ReadOnly then curCardCharge.Value := 0;
            onMultiChargePropertiesChange(curCbCharge);
          end else
          if edtPostPay.Value = 0 then
            edtPostPay.Value := curRate.Value;
        end;
      end;

			// KCP 카드 결제 체크. 2011-10-19.
			if cbbPayMethod.Text = PAY_METHOD_CARD_KCP then
			begin
        cbCardSanction.Hint := _PAY_CARD;
        cbCardSanction.OptionsImage.ImageIndex := 2;
				cbCardSanction.Enabled := True;
			end else
			if cbbPayMethod.Text = PAY_METHOD_POST_MILE then     // 20130603  LYB  쿠폰결제
			begin
				// 쿠폰 결제는 코리아드라이브-A1531, 서울/경기/인천-G891, 천안/안성/평택/아산-Q452/콜마너/콜마너영업 만 사용 가능
				if ((GS_PRJ_AREA = 'S') and
					   ((sHDNO = 'A1531') or (sBRNO = 'G891') or (sBRNO = 'Q452') or (sHDNO = 'A100') or (sHDNO = 'A283'))) or
					 ((GS_PRJ_AREA = 'O') and // 대전-L290, 광주-M135, 전주-O914, 구미,대구-P263/콜마너/콜마너영업 만 사용 가능
					   ((sBRNO = 'L290') or (sBRNO = 'M135') or (sBRNO = 'O914') or (sBRNO = 'P263') or
					   	(sHDNO = 'A100') or (sHDNO = 'A283'))) or
           (cbbPayMethod.Hint = 'y') then
				begin
					cbCardSanction.Hint := _PAY_COUPON;
          cbCardSanction.OptionsImage.ImageIndex := 1;
					cbCardSanction.Enabled := True;
				end else
				begin
					cbCardSanction.Enabled := False;
          cbCardSanction.Hint := _PAY_CARD;
          cbCardSanction.OptionsImage.ImageIndex := 2;
				end;
			end	else
      if cbbPayMethod.Text = PAY_METHOD_MULTI then
      begin
        // 카드전용버튼으로 사용
        cbCardSanction.Hint := _PAY_CARD;
        cbCardSanction.OptionsImage.ImageIndex := 2;
        cbCardSanction.Enabled := True;
      end else
			begin
				cbCardSanction.Enabled := False;
        cbCardSanction.Hint := _PAY_CARD;
        cbCardSanction.OptionsImage.ImageIndex := 2;
			end;

      // 법인콜 여부(수도권만 사용함)
      if GS_PRJ_AREA = 'S' then
      begin
        if copy(sTmp,1,4) = 'nyyy' then
        begin //법인콜 사용여부,,  'nyyy' : 미설정. 모드

          // "후불" 선택시 "법인콜" 자동선택 처리. 2011-11-07(영업요청)
          if lblPlusYN.Hint <> '' then
          begin
            if cbbPayMethod.Text = PAY_METHOD_POST_NML then
            begin
              if gsPlusYNHint <> 'NOCHANGE' then // 법인콜 다른 함수에서 변경 못 하도록 함.[오더수정 모드에서 설정됨]
              begin
                if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;
                if pJON01Dock.HDNO <> 'A2279' then  // 20130801  LYB 드림세븐은 법인콜 자동 체크 제외  정회귀 팀장 요청
                begin
                  cbbPayMethod.Tag := 20;    // 후불 선택시  "법인콜" 체크 박스 선택하더라도 결재방법 자동변경 차단. 2011-11-11.
                  lblPlusYN.Tag := 1;
                  pSetLabelClick(lblPlusYN);
                end;
              end;
            end;
          end;
        end;
      end;
    end else
    begin
      edtPostPay.Value := 0;
      if ( IsCardUseBranch_KCP(sBRNO) = '03' ) Or
         ( IsCardUseBranch_KCP(sBRNO) = '06' ) then
      begin
        if cbbPayMethod.Text = PAY_METHOD_MONEY then
        begin
          cbCardSanction.Hint := _PAY_CASH;
          cbCardSanction.OptionsImage.ImageIndex := 0;
          cbCardSanction.Enabled := True;
        end else
        begin
					cbCardSanction.Enabled := False;
          cbCardSanction.Hint := _PAY_CARD;
          cbCardSanction.OptionsImage.ImageIndex := 2;
        end;
      end;

      AddSpop('',97);
      if cbbPayMethod.Text = PAY_METHOD_CARD then AddSpop('카드',95);
    end;

		//엔젤요청. 기사송금액 수정불가 20210902 KHS
		if GB_PostPayNoUpdate then edtPostPay.Enabled := False else
		edtPostPay.Enabled := IsPayMethodPost;

		//setposttime으로 이동
    if IsPayMethodPost then
    begin
      cbbPostTime.ItemIndex := GT_USERIF.AfterPayMidx;
      cbbPostTime.Enabled := True;
    end else
    begin
			cbbPostTime.Enabled := False;
		end;

		// 마일리지 사용시 마일리지 적립
		if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) then
		begin
			lblCashSave.Visible := True;
			lblMileSave.Visible := True;
			lblCallByInsureFree.Left := 425;
			if (func_MilePayMileSave_YN) then
			begin
				lblMileSave.Visible := True;
				lblMileSave.Tag := 1;
			end else
			begin
				lblMileSave.Tag := 0;
			end;
			pSetLabelClick(lblMileSave);

			if (func_CashPayMileSave_YN) then
			begin
				lblCashSave.Visible := True;
				lblCashSave.Tag := 1;
			end else
			begin
				lblCashSave.Tag := 0;
			end;
			pSetLabelClick(lblCashSave);
		end else
    begin
			lblCashSave.Visible := False;
			lblMileSave.Visible := False;
			lblCallByInsureFree.Left := 312; 
    end;

		if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
		begin
			lb_CompulWor.Left := 397;
			lb_CompulWor.Top  := 22;
		end else
		begin
			lb_CompulWor.Left := 380;//352;
			lb_CompulWor.Top  := 1;
		end;

		AppendPostDesc;

    if cbCardSanction.Tag = 1 then cbCardSanction.Click;
  except
    on e: exception do
    begin
      Log('cbbPayMethodPropertiesChange Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cbbPayMethodPropertiesChange Error :' + E.Message);
		end;
  end;
end;

procedure TFrm_JON01N.cbbPostTimePropertiesChange(Sender: TObject);
begin
  try
    if GS_PRJ_AREA = 'S' then
    begin
      // 수도권 수정모드 기사자동입금액 변경 허용.
      if cbbPostTime.Text = POST_TIME_NOPAY then
        edtPostPay.Value := 0
      else
      begin
        if (cbbPayMethod.Text = PAY_METHOD_MULTI) then
        begin
          curCbCharge.Tag := 0;
          onMultiChargePropertiesChange(curCbCharge);
        end else
				if edtPostPay.Value = 0 then
				begin
					edtPostPay.Value := curRate.Value;
				end;
      end;
    end else
    begin
      // 수정모드 일때는 기사자동입금액이 수정되지 않도록 요청하여 적용함(신과장요청). 2011.07.19
//      if (Pos('수정', Self.Caption) = 0 ) then    2017.12.28.  주석처리
			begin
				if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

        if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
        begin
          edtPostPay.Value := 0;
					cxLblWkJAmt.Caption := IfThen(cbbPostTime.Text = POST_TIME_NOPAY, '', '1,000');
          if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then grpWkJi.Visible := True;
        end else
        if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
        begin
          edtPostPay.Value := 0;
          cxLblWkJAmt.Caption := IfThen(cbbPostTime.Text = POST_TIME_NOPAY, '', '2,000');
          if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then grpWkJi.Visible := True;
        end else
        if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
        begin
          edtPostPay.Value := 0;
					cxLblWkJAmt.Caption := IfThen(cbbPostTime.Text = POST_TIME_NOPAY, '', '3,000');
          if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' )  then grpWkJi.Visible := True;
        end else
        begin
          if cbbPostTime.Text = POST_TIME_NOPAY then
            edtPostPay.Value := 0
          else
          begin
            if (cbbPayMethod.Text = PAY_METHOD_MULTI) then
            begin
              curCbCharge.Tag := 0;
              onMultiChargePropertiesChange(curCbCharge);
            end else
            if edtPostPay.Value = 0 then
              edtPostPay.Value := curRate.Value;
          end;
        end;
      end;
    end;

		//엔젤요청. 기사송금액 수정불가 20210902 KHS
		if GB_PostPayNoUpdate then edtPostPay.Enabled := False else
		edtPostPay.Enabled := not (cbbPostTime.Text = POST_TIME_NOPAY);

    AppendPostDesc;
  except
    on e: exception do
    begin
      Log('cbbPostTimePropertiesChange Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cbbPostTimePropertiesChange Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.cbCardSanctionClick(Sender: TObject);
var lsTemp : TStringList;
    sBrNo : String;
    iCharge : Double;
begin
  SetDebugeWrite('JON01N.cbCardSanctionClick');
  pFormActive;
  try
		if ((Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 )) and (gsCuTelHint <> cxtCuTel.Text) then
		begin
			GMessagebox('고객조회 후 이용하여 주십시오.', CDMSE);
			cxtCuTel.setFocus;
			Exit;
		end;

    if (cbbPayMethod.Text = PAY_METHOD_MULTI) And
       ( ( (curCharge.Value < 2000) And (cbCardSanction.Hint = _PAY_CASH) ) or              // 현금 최소 2000원 이상then
         ( (curCardCharge.Value < 2000) And (cbCardSanction.Hint <> _PAY_COUPON) ) ) then   // 카드 최소 2000원 이상then
    begin
      if (cbCardSanction.Hint = _PAY_CASH) then
        GMessagebox('현금영수증 금액은 2000원 이상 입니다.', CDMSE)
      else
        GMessagebox('카드결제 최소 금액은 2000원 이상 입니다.', CDMSE);
      if curCardCharge.CanFocus then curCardCharge.SetFocus;
      Exit;
    end;

    if ( (curRate.Value >= 2000) And (cbCardSanction.Hint <> _PAY_COUPON) ) or   // 카드/현금은 최소 2000원 이상
       ( (curRate.Value >= 0   ) And (cbCardSanction.Hint =  _PAY_COUPON) ) then // 쿠폰은 적립만 할수 있으므로 0원도 가능   20130730  LYB
    begin
      if cbCardSanction.Tag = 0 then
      begin
        if (cbCardSanction.Hint = _PAY_CARD) then Frm_Main.JON34MNG[Self.Tag].Size := 155
                                             else Frm_Main.JON34MNG[Self.Tag].Size := 125;

        pnlBody.Height := pnlBody.Height + Frm_Main.JON34MNG[Self.Tag].Size;
        pSetFormScroll(0, Frm_Main.JON34MNG[Self.Tag].Size);

        if cbCardSanction.Hint = _PAY_CASH   then cbCardSanction.OptionsImage.ImageIndex := 3 else
        if cbCardSanction.Hint = _PAY_COUPON then cbCardSanction.OptionsImage.ImageIndex := 4 else
        if cbCardSanction.Hint = _PAY_CARD   then cbCardSanction.OptionsImage.ImageIndex := 5;

        cbCardSanction.Tag := 1;
      end else
      begin
        btnSendEmail.Visible := False;
        if Assigned(Frm_Main.Frm_JON34B[Self.Tag]) then
        begin
          Frm_Main.Frm_JON34B[Self.Tag].sb_Exit.Click;
          Exit;
        end;
      end;

      Try
        if Frm_Main.JON34MNG[Self.Tag].Use = False then
        begin
          if Frm_Main.JON34MNG[Self.Tag].CreateYN = False then
          begin
            Frm_Main.Frm_JON34B[Self.Tag] := TFrm_JON34B.Create(Nil); // 폼 객체를 생성한다.
            Frm_Main.JON34MNG[Self.Tag].CreateYN := True;
            Frm_Main.JON34MNG[Self.Tag].Use := True;
          end;
        end;

				sBrNo := Proc_BRNOSearch;

        if ( cbCardSanction.Hint = _PAY_CASH ) then
        begin
//          Frm_JON34B.pnlTitle.Caption := '   현금영수증(지출증빙) 발급';
          // 카드결제 창 오픈.  2011-10-13.
          Frm_Main.Frm_JON34B[Self.Tag].Jon03Tag := Self.Jon03Tag;
          Frm_Main.Frm_JON34B[Self.Tag].Card_Gubun := 0;
          Frm_Main.Frm_JON34B[Self.Tag].proc_init;
          Frm_Main.Frm_JON34B[Self.Tag].lcJON_IDX := Self.Tag;   // 접수창의 index 값 저장.
          Frm_Main.Frm_JON34B[Self.Tag].chk_BaRo_Card.Visible := False;
          Frm_Main.Frm_JON34B[Self.Tag].pnl5.Visible := False;

          Frm_Main.Frm_JON34B[Self.Tag].pnl2.Visible := False;
          Frm_Main.Frm_JON34B[Self.Tag].pnl4.Visible := True;
          Frm_Main.Frm_JON34B[Self.Tag].pnl6.Visible := False;
          Frm_Main.Frm_JON34B[Self.Tag].pnl4.Left := 2;
          Frm_Main.Frm_JON34B[Self.Tag].pnl4.Top := 1;

          //공통사항///////////////////
          Frm_Main.Frm_JON34B[Self.Tag].lcBRNO    := sBrNo;                     // 지사코드 정보를 읽는다.
          Frm_Main.Frm_JON34B[Self.Tag].lcMainNum := Proc_MainKeyNumberSearch;  // 대표번호 정보를 읽는다.
          Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := cxtCuTel.Text;             // 고객전화번호.
          Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Text := Frm_Main.Frm_JON34B[Self.Tag].lcCustTel;
          Frm_Main.Frm_JON34B[Self.Tag].lcCustSeq := lcsCu_seq;                 // 고객 시퀀스.
          //공통사항///////////////////

          if ( cbbPayMethod.Text = PAY_METHOD_MULTI ) And ( curCharge.Value <> 0 ) then
            Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Cash.Value := curCharge.Value    // 요금(현금영수증)
          else
            Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Cash.Value := curRate.Value;    // 요금(현금영수증)

          // 기 결제 정보가 있으면, 해당 값을 넣어준다.
					if Length(locCardPayInfo) > 10 then
					begin
						try
              Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := '';             // 고객전화번호.
              Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Text := '';
							lsTemp := TStringList.Create;
							lsTemp.Delimiter := '|';
							lsTemp.DelimitedText := locCardPayInfo;

              Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Cash.Text  := lsTemp[0];
              Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus_Cash.Caption := lsTemp[1];  // 상태
              if lsTemp.Count = 3 then
              begin
                Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Text := lsTemp[2];
              end;

              // 접수번호가 있을경우만 서버에서 재조회 한다.  2011-10-27
              if (length(cxtJoinNum.Text) > 1) or (locCardPaySeq <> '') then
                Frm_Main.Frm_JON34B[Self.Tag].ProCardInfoSelect(cxtJoinNum.Text + '│' + locCardPaySeq);   // 카드결제 정보를 조회 한다.

              if Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus_Cash.Caption = '증빙완료' then
              begin
                // 카드결제 승인 취소 할 준비.
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := True;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;
                Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Enabled   := False;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Cash.Enabled := False;
              end	else
              if Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus_Cash.Caption = '증빙요청완료' then
              begin
                // 카드결제 승인 취소 할 준비.
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;
                Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Enabled   := False;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Cash.Enabled := False;
              end	else
              begin
                // 카드결제 승인 할 준비.
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := True;
                Frm_Main.Frm_JON34B[Self.Tag].btn_CashSMS.Enabled       := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;
                Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Enabled   := True;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Cash.Enabled := True;

                Frm_Main.Frm_JON34B[Self.Tag].rg_charge_ser2.Enabled := True;
                Frm_Main.Frm_JON34B[Self.Tag].rg_charge_ser1.Enabled := True;
              end;

              Frm_Main.Frm_JON34B[Self.Tag].lcPaySeq := locCardPaySeq;   // 결제일련번호
              Frm_Main.Frm_JON34B[Self.Tag].lcTranNo := locCardTranNo;   // 거래번호

              Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Cash.Caption := locCardPaySeq;
              Frm_Main.Frm_JON34B[Self.Tag].lblTranNo_Cash.Caption := locCardTranNo;
            finally
              FreeAndNil(lsTemp);
            end;
          end else
					if Length(locCardPaySeq) > 1 then
          begin
            Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := '';             // 고객전화번호.
            Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Text := '';
            Frm_Main.Frm_JON34B[Self.Tag].lcPaySeq               := locCardPaySeq;   // 결제일련번호  만 있으면 승인취소 가능 함.
            Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Cash.Caption := locCardPaySeq;

            Frm_Main.Frm_JON34B[Self.Tag].ProCardInfoSelect(cxtJoinNum.Text);   // 카드결제 정보를 조회 한다.

            if Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus_Cash.Caption =  '증빙완료' then
            begin
              // 카드결제 승인 취소 할 준비.
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := True;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;
              Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Enabled      := False;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_cash.Enabled    := False;
            end else
            if Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus_Cash.Caption = '증빙요청완료' then
            begin
              // 카드결제 승인 취소 할 준비.
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;
              Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Enabled      := False;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_cash.Enabled    := False;
            end else
            begin
              // 카드결제 승인 할 준비.
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := True;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

              Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Enabled      := True;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_cash.Enabled    := True;
              Frm_Main.Frm_JON34B[Self.Tag].rg_charge_ser2.Enabled   := True;
              Frm_Main.Frm_JON34B[Self.Tag].rg_charge_ser1.Enabled   := True;
            end;
          end else
          begin
            // 카드결제 승인 할 준비.
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := True;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;
            Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.Enabled      := True;
            Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_cash.Enabled    := True;
            Frm_Main.Frm_JON34B[Self.Tag].rg_charge_ser2.Enabled   := True;
            Frm_Main.Frm_JON34B[Self.Tag].rg_charge_ser1.Enabled   := True;
          end;
        end else
        if (cbCardSanction.Hint = _PAY_COUPON) then
        begin
//          Frm_JON34B.pnlTitle.Caption := '   모바일 쿠폰 결제';
          Frm_Main.Frm_JON34B[Self.Tag].lcAppModify := 'N';

          Frm_Main.Frm_JON34B[Self.Tag].Card_Gubun := 2;
          Frm_Main.Frm_JON34B[Self.Tag].proc_init;
          Frm_Main.Frm_JON34B[Self.Tag].lcJON_IDX := Self.Tag;   // 접수창의 index 값 저장.

          Frm_Main.Frm_JON34B[Self.Tag].chk_BaRo_Card.Visible := False;
          Frm_Main.Frm_JON34B[Self.Tag].pnl5.Visible := False;

          Frm_Main.Frm_JON34B[Self.Tag].pnl2.Visible := False;
          Frm_Main.Frm_JON34B[Self.Tag].pnl4.Visible := False;
          Frm_Main.Frm_JON34B[Self.Tag].pnl6.Visible := True;
          Frm_Main.Frm_JON34B[Self.Tag].pnl6.Left := 2;
          Frm_Main.Frm_JON34B[Self.Tag].pnl6.Top := 1;

					if cbbPayMethod.Hint = 'y' then
					begin
						Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Left := 3;
						Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Top  := 2;
						Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Visible := True;
						Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Enabled := False;
						Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled := False;
						Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Caption := '쿠폰조회';

						Frm_Main.Frm_JON34B[Self.Tag].lb_CouponNotice.Left := 216;
						Frm_Main.Frm_JON34B[Self.Tag].lb_CouponNotice.Top  := 34;
						Frm_Main.Frm_JON34B[Self.Tag].lb_CouponNotice.Visible  := True;

						Frm_Main.Frm_JON34B[Self.Tag].Label2.Visible           := False;
						Frm_Main.Frm_JON34B[Self.Tag].Lbl_ChangeMile.Visible   := False;
						Frm_Main.Frm_JON34B[Self.Tag].Label1.Visible           := False;
						Frm_Main.Frm_JON34B[Self.Tag].Label4.Visible           := False;
						Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Coupon.Visible := False;
						Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Visible  := False;
						Frm_Main.Frm_JON34B[Self.Tag].cxLabel15.Visible        := False;
						Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Visible := False;
						Frm_Main.Frm_JON34B[Self.Tag].cxCurDec_Coupon1.Visible := False;
					end else
					begin
						Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Visible := False;
						Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled := True;
						Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Caption := '인증요청';

						Frm_Main.Frm_JON34B[Self.Tag].lb_CouponNotice.Visible  := False;

						Frm_Main.Frm_JON34B[Self.Tag].Label2.Visible           := True;
						Frm_Main.Frm_JON34B[Self.Tag].Lbl_ChangeMile.Visible   := True;
						Frm_Main.Frm_JON34B[Self.Tag].Label1.Visible           := True;
						Frm_Main.Frm_JON34B[Self.Tag].Label4.Visible           := True;
						Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Coupon.Visible := True;
						Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Visible  := True;
						Frm_Main.Frm_JON34B[Self.Tag].cxLabel15.Visible        := True;
						Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Visible := True;
						Frm_Main.Frm_JON34B[Self.Tag].cxCurDec_Coupon1.Visible := True;
					end;
					Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Hint := cbbPayMethod.Hint;

          if ( cbbPayMethod.Text = PAY_METHOD_MULTI ) And ( curMileCharge.Value <> 0 ) then
            Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Value := curMileCharge.Value     // 요금
          else
            Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Value := curRate.Value;    // 요금

          //공통사항///////////////////
          Frm_Main.Frm_JON34B[Self.Tag].lcBRNO    := Proc_BRNOSearch;           // 지사코드 정보를 읽는다.
          Frm_Main.Frm_JON34B[Self.Tag].lcMainNum := Proc_MainKeyNumberSearch;  // 대표번호 정보를 읽는다.
          Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := cxtCuTel.Text;             // 고객전화번호.
          Frm_Main.Frm_JON34B[Self.Tag].lcCustSeq := lcsCu_seq;                 // 고객 시퀀스.
          //공통사항///////////////////

          // 기 결제 정보가 있으면, 해당 값을 넣어준다.
          if Length(locCardPayInfo) > 10 then
          begin
            try
              Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := '';             // 고객전화번호.

              lsTemp := TStringList.Create;
              lsTemp.Delimiter := '|';
              lsTemp.DelimitedText := locCardPayInfo;

              Frm_Main.Frm_JON34B[Self.Tag].cxCurDec_Coupon1.Text     := lsTemp[1];
              Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption   := lsTemp[2];
              Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Text        := lsTemp[3];
              Frm_Main.Frm_JON34B[Self.Tag].Lbl_ChangeMile.Caption := '0';

              // 접수번호가 있을경우만 서버에서 재조회 한다.  2011-10-27
              if (length(cxtJoinNum.Text) > 1) or (locCardPaySeq <> '') then
                Frm_Main.Frm_JON34B[Self.Tag].ProCardInfoSelect(locCardPaySeq);   // 모바일 쿠폰 결제 정보를 조회 한다.

              if Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption = '인증완료' then
              begin
                // 쿠폰결제 승인 할 준비.
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := True;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

                Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled        := False;
              end else
              if Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption = '승인완료' then
              begin
                // 카드결제 승인 취소 할 준비.
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := True;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := True;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

                Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled     := False;
              end else
              begin
                // 카드결제 인증 할 준비.
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled    := True;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := False;
                Frm_Main.Frm_JON34B[Self.Tag].btn_CashSMS.Enabled        := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

                Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled      := True;
              end;

              Frm_Main.Frm_JON34B[Self.Tag].lcPaySeq := locCardPaySeq;   // 쿠폰일련번호
              Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Coupon.Caption := locCardPaySeq;
            finally
              FreeAndNil(lsTemp);
            end;
          end else
          if Length(locCardPaySeq) > 1 then
          begin
            Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := '';             // 고객전화번호.
            Frm_Main.Frm_JON34B[Self.Tag].lcPaySeq                 := locCardPaySeq;   // 쿠폰일련번호  만 있으면 승인취소 가능 함.
            Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Coupon.Caption := locCardPaySeq;

            Frm_Main.Frm_JON34B[Self.Tag].ProCardInfoSelect(locCardPaySeq);   // 쿠폰결제 정보를 조회 한다.

            if Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption =  '인증완료' then
            begin
              // 쿠폰결제 승인 할 준비.
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled    := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := True;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

              Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled      := False;
            end else
            if Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption = '승인완료' then
            begin
              // 쿠폰결제 승인 취소 할 준비.
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := True;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := True;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

              Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled     := False;
            end else
            begin
              // 쿠폰결제 인증 할 준비.
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := True;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

              Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled     := True;
            end;
          end else
          begin
            // 카드결제 인증 할 준비.
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := True;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

            Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled     := True;
          end;
        end else         //카드
        begin
          Frm_Main.Frm_JON34B[Self.Tag].Card_Gubun := 1;
          Frm_Main.Frm_JON34B[Self.Tag].proc_init;
          Frm_Main.Frm_JON34B[Self.Tag].lcJON_IDX := Self.Tag;   // 접수창의 index 값 저장.

          if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

          if (pJON01Dock.HDNO = 'A1531') or (pJON01Dock.HDNO = 'A100')  then
          begin
//            Frm_Main.Frm_JON34B[Self.Tag].chk_BaRo_Card.Visible := True;      // 코리아 드라이브만 사용으로 현재 사용업체 없음 2017.03.07
          end	else
          begin
            Frm_Main.Frm_JON34B[Self.Tag].chk_BaRo_Card.Visible := False;
          end;
          Frm_Main.Frm_JON34B[Self.Tag].pnl5.Visible := True;
          Frm_Main.Frm_JON34B[Self.Tag].pnl2.Visible := True;
          Frm_Main.Frm_JON34B[Self.Tag].pnl4.Visible := False;
          Frm_Main.Frm_JON34B[Self.Tag].pnl6.Visible := False;
          Frm_Main.Frm_JON34B[Self.Tag].pnl2.Left := 2;
          Frm_Main.Frm_JON34B[Self.Tag].pnl2.Top := 1;

          //공통사항///////////////////
          Frm_Main.Frm_JON34B[Self.Tag].lcBRNO    := Proc_BRNOSearch;           // 지사코드 정보를 읽는다.
          Frm_Main.Frm_JON34B[Self.Tag].lcMainNum := Proc_MainKeyNumberSearch;  // 대표번호 정보를 읽는다.
          Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := cxtCuTel.Text;             // 고객전화번호.
          Frm_Main.Frm_JON34B[Self.Tag].lcCustSeq := lcsCu_seq;                 // 고객 시퀀스.
          //공통사항///////////////////

          pSetCardRate;

					Frm_Main.Frm_JON34B[Self.Tag].proc_BillKeyList;

          // 기 결제 정보가 있으면, 해당 값을 넣어준다.
          if Length(locCardPayInfo) > 10 then
          begin
            try
              lsTemp := TStringList.Create;
              lsTemp.Delimiter := '|';
              lsTemp.DelimitedText := locCardPayInfo;

              Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Text       := lsTemp[0];
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Text     := lsTemp[1];
              Frm_Main.Frm_JON34B[Self.Tag].cxCurTerm.Text        := lsTemp[2];
              Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus.Caption := lsTemp[3];  // 상태
              if lsTemp.Count = 6 then
              begin
                Frm_Main.Frm_JON34B[Self.Tag].medCardNum.Text       := lsTemp[4];
                Frm_Main.Frm_JON34B[Self.Tag].medLimiteDate.text    := lsTemp[5];
              end;

              // 접수번호가 있을경우만 서버에서 재조회 한다.  2011-10-27
              if (length(cxtJoinNum.Text) > 1) or (locCardPaySeq <> '') then
              begin
                btnSendEmail.Visible := True;
                Frm_Main.Frm_JON34B[Self.Tag].ProCardInfoSelect(cxtJoinNum.Text + '│' + locCardPaySeq);   // 카드결제 정보를 조회 한다.
              end;

              if Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus.Caption = '결제완료' then
              begin
                // 카드결제 승인 취소 할 준비.
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := True;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := True;

                Frm_Main.Frm_JON34B[Self.Tag].medCardNum.Enabled      := False;
                Frm_Main.Frm_JON34B[Self.Tag].medLimiteDate.Enabled   := False;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Enabled      := False;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Enabled    := False;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurTerm.Enabled       := False;
              end	else
              if Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus.Caption = '결제요청완료' then
              begin
                // 카드결제 승인 취소 할 준비.
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

                Frm_Main.Frm_JON34B[Self.Tag].medCardNum.Enabled      := False;
                Frm_Main.Frm_JON34B[Self.Tag].medLimiteDate.Enabled   := False;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Enabled      := False;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Enabled    := False;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurTerm.Enabled       := False;
              end	else
              begin
                // 카드결제 승인 할 준비.
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := True;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
                Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

                Frm_Main.Frm_JON34B[Self.Tag].medCardNum.Enabled      := True;
                Frm_Main.Frm_JON34B[Self.Tag].medLimiteDate.Enabled   := True;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Enabled      := True;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Enabled    := True;
                Frm_Main.Frm_JON34B[Self.Tag].cxCurTerm.Enabled       := True;

//                Frm_Main.Frm_JON34B[Self.Tag].chk_BaRo_Card.Enabled   := True;
              end;

              Frm_Main.Frm_JON34B[Self.Tag].lcPaySeq := locCardPaySeq;   // 결제일련번호
              Frm_Main.Frm_JON34B[Self.Tag].lcTranNo := locCardTranNo;   // 거래번호

              Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq.Caption := locCardPaySeq;
              Frm_Main.Frm_JON34B[Self.Tag].lblTranNo.Caption := locCardTranNo;
            finally
              FreeAndNil(lsTemp);
            end;
          end	else
          if Length(locCardPaySeq) > 1 then
          begin
            btnSendEmail.Visible := True;
            Frm_Main.Frm_JON34B[Self.Tag].lcPaySeq          := locCardPaySeq;   // 결제일련번호  만 있으면 승인취소 가능 함.
            Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq.Caption := locCardPaySeq;

            Frm_Main.Frm_JON34B[Self.Tag].ProCardInfoSelect(cxtJoinNum.Text);   // 카드결제 정보를 조회 한다.

            btnSendEmail.Enabled := Not (Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus.Caption = '결제취소');

            if Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus.Caption = '결제완료' then
            begin
              // 카드결제 승인 취소 할 준비.
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := True;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := True;

              Frm_Main.Frm_JON34B[Self.Tag].medCardNum.Enabled      := False;
              Frm_Main.Frm_JON34B[Self.Tag].medLimiteDate.Enabled   := False;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Enabled      := False;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Enabled    := False;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurTerm.Enabled       := False;
            end else
            if Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus.Caption = '결제요청완료' then
            begin
              // 카드결제 승인 취소 할 준비.
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

              Frm_Main.Frm_JON34B[Self.Tag].medCardNum.Enabled      := False;
              Frm_Main.Frm_JON34B[Self.Tag].medLimiteDate.Enabled   := False;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Enabled      := False;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Enabled    := False;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurTerm.Enabled       := False;
            end	else
            begin
              // 카드결제 승인 할 준비.
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := True;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
              Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

              Frm_Main.Frm_JON34B[Self.Tag].medCardNum.Enabled      := True;
              Frm_Main.Frm_JON34B[Self.Tag].medLimiteDate.Enabled   := True;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Enabled      := True;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Enabled    := True;
              Frm_Main.Frm_JON34B[Self.Tag].cxCurTerm.Enabled       := True;
//              Frm_Main.Frm_JON34B[Self.Tag].chk_BaRo_Card.Enabled   := True;
            end;
          end	else
          begin
            // 카드결제 승인 할 준비.
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := True;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

            Frm_Main.Frm_JON34B[Self.Tag].medCardNum.Enabled      := True;
            Frm_Main.Frm_JON34B[Self.Tag].medLimiteDate.Enabled   := True;
            Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Enabled      := True;
            Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Enabled    := True;
            Frm_Main.Frm_JON34B[Self.Tag].cxCurTerm.Enabled       := True;
//            Frm_Main.Frm_JON34B[Self.Tag].chk_BaRo_Card.Enabled   := True;
          end;
        end;

        if cbCardSanction.Tag = 0 then
        begin
          shpCard.Height := 3;
          pnlCard.Height := 127;

          if (cbCardSanction.Hint = _PAY_CARD) then Frm_Main.JON34MNG[Self.Tag].Size := 155
                                               else Frm_Main.JON34MNG[Self.Tag].Size := 125;

          pnlBody.Height := pnlBody.Height + Frm_Main.JON34MNG[Self.Tag].Size;
          pSetFormScroll(0, Frm_Main.JON34MNG[Self.Tag].Size);

          cbCardSanction.Tag := 1;
        end;

        fSetFont(Frm_Main.Frm_JON34B[Self.Tag], GS_FONTNAME);

        Frm_Main.Frm_JON34B[Self.Tag].Parent := pnlCard;
        Frm_Main.Frm_JON34B[Self.Tag].Align := alClient;
        Frm_Main.Frm_JON34B[Self.Tag].Show;

        if (cbCardSanction.Hint = _PAY_CASH) then
        begin
          if Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.CanFocus then Frm_Main.Frm_JON34B[Self.Tag].medtCashCardNum.SetFocus;
        end else
        if (cbCardSanction.Hint = _PAY_COUPON) then
        begin
          if Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.CanFocus then Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.SetFocus;
        end else
        begin
          if Frm_Main.Frm_JON34B[Self.Tag].medCardNum.CanFocus then Frm_Main.Frm_JON34B[Self.Tag].medCardNum.SetFocus;
        end;
      except

      end;
    end else
    begin
      if (cbCardSanction.Hint = _PAY_CASH) then
        GMessagebox('현금영수증 금액은 2000원 이상 입니다.', CDMSE)
      else
        GMessagebox('카드결제 최소 금액은 2000원 이상 입니다.', CDMSE);
      if curRate.CanFocus then curRate.SetFocus;
    end;
  except
    on e: exception do
    begin
      Log('cbCardSanctionClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cbCardSanctionClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.pSetButtonClick(var sButton: TcxButton);
begin
	if sButton.Tag = 0 then
  begin
    sButton.Colors.NormalText := clDefault;
//    sButton.Font.Size := 9;
    sButton.Font.Style := [];
  end else
  begin
    sButton.Colors.NormalText := clBlue;
//    sButton.Font.Size := 10;
    sButton.Font.Style := [fsBold];
  end;
end;

procedure TFrm_JON01N.pSetCardRate;
Var iCharge : Double;
begin
  try
    if Assigned(Frm_Main.Frm_JON34B[Self.Tag]) then
    begin
      // 복합일경우 - 보정금액이 (-)이면 후불금액에서 보정금액을 차감하기 때문에 카드결제금액은 그대로
      // 후불(카드)일경우 - 보정금액이 (-)이면 후불금액이 없으므로 보정금액을 카드결제금액에 차감
      if ( cbbPayMethod.Text = PAY_METHOD_MULTI ) And ( curCardCharge.Value <> 0 ) then
      begin
        if cxCurRevisionRate.Value > 0 then
          iCharge := curCardCharge.Value + cxCurRevisionRate.Value  // 요금 + 보정금액으로 카드요금 설정
        else
          iCharge := curCardCharge.Value  // 요금 + 보정금액으로 카드요금 설정
      end else
      begin
        iCharge := curRate.Value + cxCurRevisionRate.Value;       // 요금 + 보정금액으로 카드요금 설정
      end;

      Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Value := iCharge;

      if Frm_Main.Frm_JON34B[Self.Tag].rbConfigVATset1.Checked then
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Value := iCharge
      else
      if Frm_Main.Frm_JON34B[Self.Tag].rbConfigVATset2.Checked then
        // 결제요금.  설정된 부가세 적용.
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Value := iCharge + (iCharge *
                                                            (StrToFloatDef(Frm_Main.Frm_JON34B[Self.Tag].cxCurVATvalue.Text, 0.0)) / 100)
      else
      if Frm_Main.Frm_JON34B[Self.Tag].rbConfigVATset3.Checked then
      begin
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Value := Frm_Main.Frm_JON34B[Self.Tag].proc_getSvrCardCharge(Frm_Main.Frm_JON34B[Self.Tag].lcBRNO, iCharge);
      end;

      if GS_CardPayFeeType[Self.Tag] = '1' then   // 대리요금
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Value := Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Value + (Frm_Main.Frm_JON34B[Self.Tag].cxCurDRate.Value * (StrToFloatDef(GS_CardPayFeeValue[Self.Tag], 0.0)) / 100) else
      if GS_CardPayFeeType[Self.Tag] = '2' then   // 기사입금액
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate.Value := edtPostPay.Value + (edtPostPay.Value * (StrToFloatDef(GS_CardPayFeeValue[Self.Tag], 0.0)) / 100); // else
    end;
  except
    on e: exception do
    begin
      Log('pSetCardRate Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'pSetCardRate Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.CbCuGbPropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('JON01N.CbCuGbPropertiesChange');
  try
    if Self.Tag < 0 then Exit;

    imgBubinSch.Visible := False;
    cxtCuBubin.Visible := False;
    if (CbCuGb.Hint <> 'Clear') then
    begin
      if (lcsCu_seq <> '') then
      begin
        if CBCuGb.ItemIndex = 0 then
        begin
          if CbCuGb.Hint = '3' then
          begin
            if Application.MessageBox('고객구분을 [법인 --> 개인] 으로 정보를 변경 하시겠습니까?' +
              #10#13 + '변경 후에는 [수정] 버튼을 눌러 저장 하세요~',
              '법인정보 제거 확인', MB_OKCANCEL) = IDOK then
            begin
              lblCuBubinName.Caption := '';
              gsShortCoprNm[Self.Tag] := '';
              cxtCuBubin.Text := '';
              cxtCuBubin.Hint := '';
              CbCuGb.Hint := '1';
              if pnlBubin.Visible then pnlBubin.Visible := False;
              CbCuGb.Hint := '1';
            end else
            begin
              CbCuGb.ItemIndex := 2;
            end;
          end else
          begin
						CbCuGb.Hint := '1';
          end;
        end else
        if CBCuGb.ItemIndex = 1 then
        begin
          if CbCuGb.Hint = '3' then
          begin
            if Application.MessageBox('고객구분을 [법인 --> 업소] 로 정보를 변경 하시겠습니까?',
              '법인정보 제거 확인', MB_OKCANCEL) = IDOK then
            begin
              lblCuBubinName.Caption := '';
              gsShortCoprNm[Self.Tag] := '';
              cxtCuBubin.Text := '';
              cxtCuBubin.Hint := '';
							CbCuGb.Hint := '2';
              if pnlBubin.Visible then pnlBubin.Visible := False;
              CbCuGb.Hint := '2';
            end else
            begin
              CbCuGb.ItemIndex := 2;
            end;
          end else
          begin
            CbCuGb.Hint := '2';
          end;
        end else
        if CBCuGb.ItemIndex = 2 then
        begin
          CbCuGb.Hint := '3';
        end;
      end;
    end;

		if (CbCuGb.Hint = '') and (GB_SHOPTYPE_CALLCENTER = 1) and (CustBrTelYN = 'y') then
    begin
      lblCenterMng.Tag := 1;
      pSetLabelClick(lblCenterMng);
    end;

    if ( CbCuGb.ItemIndex = 2 ) then
		begin
      if Not GB_JON_USEBUBIN then
      begin
        if ( CbCuGb.Tag = 0 ) And ( grpOption.Height <> 133 ) then
        begin
          CbCuGb.Tag := 1;
          grpBubinV.BringToFront;
          grpBubinV.Visible := True;

					grpOption.Height := 133;
          gJon01Size[Self.Tag].grpOptionH := grpOption.Height;

					pSetFormScroll(0, 51);
        end;
			end;
			imgBubinSch.Visible := True;
      cxtCuBubin.Visible := True;
    end else
    begin
      if Not GB_JON_USEBUBIN then
      begin
				if ( CbCuGb.Tag = 1 ) And ( grpOption.Height = 133 ) then
        begin
          CbCuGb.Tag := 0;
					grpBubinV.Visible := False;

					grpOption.Height := 133 - 51;
          gJon01Size[Self.Tag].grpOptionH := grpOption.Height;

					pSetFormScroll(0, - 51);
				end;
      end;
//      btnBubinSch.Visible := False;
      imgBubinSch.Visible := False;
      cxtCuBubin.Visible := False;
    end;

		pCompareCustInfo;
  Except
    on e: exception do
    begin
			Log('CbCuGbPropertiesChange Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'CbCuGbPropertiesChange Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.cbDriverChargeLocalValuePropertiesChange(Sender: TObject);
begin
  Proc_Driver_Charge;
end;

procedure TFrm_JON01N.cbMileSanctionClick(Sender: TObject);
var lsTemp : TStringList;
    sBrNo : String;
    iCharge : Double;
begin
  SetDebugeWrite('JON01N.cbCardSanctionClick');
  pFormActive;
  try
		if ((Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 )) and (gsCuTelHint <> cxtCuTel.Text) then
		begin
			GMessagebox('고객조회 후 이용하여 주십시오.', CDMSE);
			cxtCuTel.setFocus;
			Exit;
		end;

    // 쿠폰화면 표시
    if cbCardSanction.Tag = 0 then
    begin
      Frm_Main.JON34MNG[Self.Tag].Size := 125;

      pnlBody.Height := pnlBody.Height + Frm_Main.JON34MNG[Self.Tag].Size;
      pSetFormScroll(0, Frm_Main.JON34MNG[Self.Tag].Size);

      cbMileSanction.OptionsImage.ImageIndex := 4;
      cbCardSanction.Tag := 1;
    end else
    begin
      btnSendEmail.Visible := False;
      if Assigned(Frm_Main.Frm_JON34B[Self.Tag]) then
      begin
        Frm_Main.Frm_JON34B[Self.Tag].sb_Exit.Click;
        Exit;
      end;
    end;

    Try
      if Frm_Main.JON34MNG[Self.Tag].Use = False then
      begin
        if Frm_Main.JON34MNG[Self.Tag].CreateYN = False then
        begin
          Frm_Main.Frm_JON34B[Self.Tag] := TFrm_JON34B.Create(Nil); // 폼 객체를 생성한다.
          Frm_Main.JON34MNG[Self.Tag].CreateYN := True;
          Frm_Main.JON34MNG[Self.Tag].Use := True;
        end;
      end;

      sBrNo := Proc_BRNOSearch;

//          Frm_JON34B.pnlTitle.Caption := '   모바일 쿠폰 결제';
      Frm_Main.Frm_JON34B[Self.Tag].lcAppModify := 'N';

      Frm_Main.Frm_JON34B[Self.Tag].Card_Gubun := 2;
      Frm_Main.Frm_JON34B[Self.Tag].proc_init;
      Frm_Main.Frm_JON34B[Self.Tag].lcJON_IDX := Self.Tag;   // 접수창의 index 값 저장.

      Frm_Main.Frm_JON34B[Self.Tag].chk_BaRo_Card.Visible := False;
      Frm_Main.Frm_JON34B[Self.Tag].pnl5.Visible := False;

      Frm_Main.Frm_JON34B[Self.Tag].pnl2.Visible := False;
      Frm_Main.Frm_JON34B[Self.Tag].pnl4.Visible := False;
      Frm_Main.Frm_JON34B[Self.Tag].pnl6.Visible := True;
      Frm_Main.Frm_JON34B[Self.Tag].pnl6.Left := 2;
      Frm_Main.Frm_JON34B[Self.Tag].pnl6.Top := 1;

      if cbbPayMethod.Hint = 'y' then
      begin
        Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Left := 3;
        Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Top  := 2;
        Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Visible := True;
        Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Enabled := False;
        Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled := False;
        Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Caption := '쿠폰조회';

        Frm_Main.Frm_JON34B[Self.Tag].lb_CouponNotice.Left := 216;
        Frm_Main.Frm_JON34B[Self.Tag].lb_CouponNotice.Top  := 34;
        Frm_Main.Frm_JON34B[Self.Tag].lb_CouponNotice.Visible  := True;

        Frm_Main.Frm_JON34B[Self.Tag].Label2.Visible           := False;
        Frm_Main.Frm_JON34B[Self.Tag].Lbl_ChangeMile.Visible   := False;
        Frm_Main.Frm_JON34B[Self.Tag].Label1.Visible           := False;
        Frm_Main.Frm_JON34B[Self.Tag].Label4.Visible           := False;
        Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Coupon.Visible := False;
        Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Visible  := False;
        Frm_Main.Frm_JON34B[Self.Tag].cxLabel15.Visible        := False;
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Visible := False;
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDec_Coupon1.Visible := False;
      end else
      begin
        Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Visible := False;
        Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled := True;
        Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Caption := '인증요청';

        Frm_Main.Frm_JON34B[Self.Tag].lb_CouponNotice.Visible  := False;

        Frm_Main.Frm_JON34B[Self.Tag].Label2.Visible           := True;
        Frm_Main.Frm_JON34B[Self.Tag].Lbl_ChangeMile.Visible   := True;
        Frm_Main.Frm_JON34B[Self.Tag].Label1.Visible           := True;
        Frm_Main.Frm_JON34B[Self.Tag].Label4.Visible           := True;
        Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Coupon.Visible := True;
        Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Visible  := True;
        Frm_Main.Frm_JON34B[Self.Tag].cxLabel15.Visible        := True;
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Visible := True;
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDec_Coupon1.Visible := True;
      end;
      Frm_Main.Frm_JON34B[Self.Tag].btn_Coupon.Hint := cbbPayMethod.Hint;

      if ( cbbPayMethod.Text = PAY_METHOD_MULTI ) And ( curMileCharge.Value <> 0 ) then
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Value := curMileCharge.Value     // 요금
      else
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Value := curRate.Value;    // 요금

      //공통사항///////////////////
      Frm_Main.Frm_JON34B[Self.Tag].lcBRNO    := Proc_BRNOSearch;           // 지사코드 정보를 읽는다.
      Frm_Main.Frm_JON34B[Self.Tag].lcMainNum := Proc_MainKeyNumberSearch;  // 대표번호 정보를 읽는다.
      Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := cxtCuTel.Text;             // 고객전화번호.
      Frm_Main.Frm_JON34B[Self.Tag].lcCustSeq := lcsCu_seq;                 // 고객 시퀀스.
      //공통사항///////////////////

      // 기 결제 정보가 있으면, 해당 값을 넣어준다.
      if Length(locCardPayInfo) > 10 then
      begin
        try
          Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := '';             // 고객전화번호.

          lsTemp := TStringList.Create;
          lsTemp.Delimiter := '|';
          lsTemp.DelimitedText := locCardPayInfo;

          Frm_Main.Frm_JON34B[Self.Tag].cxCurDec_Coupon1.Text     := lsTemp[1];
          Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption   := lsTemp[2];
          Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Text        := lsTemp[3];
          Frm_Main.Frm_JON34B[Self.Tag].Lbl_ChangeMile.Caption := '0';

          // 접수번호가 있을경우만 서버에서 재조회 한다.  2011-10-27
          if (length(cxtJoinNum.Text) > 1) or (locCardPaySeq <> '') then
            Frm_Main.Frm_JON34B[Self.Tag].ProCardInfoSelect(locCardPaySeq);   // 모바일 쿠폰 결제 정보를 조회 한다.

          if Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption = '인증완료' then
          begin
            // 쿠폰결제 승인 할 준비.
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := True;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

            Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled        := False;
          end else
          if Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption = '승인완료' then
          begin
            // 카드결제 승인 취소 할 준비.
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := True;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := True;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

            Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled     := False;
          end else
          begin
            // 카드결제 인증 할 준비.
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled    := True;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := False;
            Frm_Main.Frm_JON34B[Self.Tag].btn_CashSMS.Enabled        := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
            Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

            Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled      := True;
          end;

          Frm_Main.Frm_JON34B[Self.Tag].lcPaySeq := locCardPaySeq;   // 쿠폰일련번호
          Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Coupon.Caption := locCardPaySeq;
        finally
          FreeAndNil(lsTemp);
        end;
      end else
      if Length(locCardPaySeq) > 1 then
      begin
        Frm_Main.Frm_JON34B[Self.Tag].lcCustTel := '';             // 고객전화번호.
        Frm_Main.Frm_JON34B[Self.Tag].lcPaySeq                 := locCardPaySeq;   // 쿠폰일련번호  만 있으면 승인취소 가능 함.
        Frm_Main.Frm_JON34B[Self.Tag].lblPaySeq_Coupon.Caption := locCardPaySeq;

        Frm_Main.Frm_JON34B[Self.Tag].ProCardInfoSelect(locCardPaySeq);   // 쿠폰결제 정보를 조회 한다.

        if Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption =  '인증완료' then
        begin
          // 쿠폰결제 승인 할 준비.
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled    := False;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled    := True;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled     := False;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled := False;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

          Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled      := False;
        end else
        if Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption = '승인완료' then
        begin
          // 쿠폰결제 승인 취소 할 준비.
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := False;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := True;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := True;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

          Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled     := False;
        end else
        begin
          // 쿠폰결제 인증 할 준비.
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := True;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := False;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := False;
          Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

          Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled     := True;
        end;
      end else
      begin
        // 카드결제 인증 할 준비.
        Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveRed.Enabled     := True;
        Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReq.Enabled     := False;
        Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveOK.Enabled      := False;
        Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveCancle.Enabled  := False;
        Frm_Main.Frm_JON34B[Self.Tag].sb_ApproveReceipt.Enabled := False;

        Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.Enabled     := True;
      end;

      if cbCardSanction.Tag = 0 then
      begin
        shpCard.Height := 3;
        pnlCard.Height := 127;

        if (cbCardSanction.Hint = _PAY_CARD) then Frm_Main.JON34MNG[Self.Tag].Size := 155
                                             else Frm_Main.JON34MNG[Self.Tag].Size := 125;

        pnlBody.Height := pnlBody.Height + Frm_Main.JON34MNG[Self.Tag].Size;
        pSetFormScroll(0, Frm_Main.JON34MNG[Self.Tag].Size);

        cbCardSanction.Tag := 1;
      end;

      fSetFont(Frm_Main.Frm_JON34B[Self.Tag], GS_FONTNAME);

      Frm_Main.Frm_JON34B[Self.Tag].Parent := pnlCard;
      Frm_Main.Frm_JON34B[Self.Tag].Align := alClient;
      Frm_Main.Frm_JON34B[Self.Tag].Show;

      if Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.CanFocus then Frm_Main.Frm_JON34B[Self.Tag].medtCouponNum.SetFocus;
    except
    end;
  except
    on e: exception do
    begin
      Log('cbCardSanctionClick Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cbCardSanctionClick Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.cboBranchClick(Sender: TObject);
begin
  if cboBranch.Properties.Items.Count > 40 then cboBranch.Properties.DropDownRows := 40
                                           else cboBranch.Properties.DropDownRows := cboBranch.Properties.Items.Count;
end;

procedure TFrm_JON01N.cboBranchMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('JON01N.cboBranchMouseDown');
//  pFormActive;
  try
    if (Pos('신규', Self.Caption) < 1) and (cboBranch.Properties.ReadOnly = True) then
    begin
      if cxtCuTel.Visible = True then cxtCuTel.SetFocus;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.cboBranchMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01N.cboBranchPropertiesChange(Sender: TObject);
Var
	sTmp : string;
begin
	SetDebugeWrite('JON01N.cboBranchPropertiesChange');
  if Self.Tag < 0 then Exit;
  try
		if (GS_PRJ_AREA = 'O') And
       ((GT_USERIF.ShareNo = 'G63') or (GT_USERIF.HD = 'A100')) And
			 ((Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 )) And
			 ((StrToIntDef(cboBranch.Hint, -1) > -1)) then
		begin
			sTmp := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
			if sTmp <> sOrgBRNO then
			begin
				GMessagebox('지사변경이 불가능합니다.',CDMSE);
				cboBranch.Tag := 10;
				cboBranch.ItemIndex := StrToInt(cboBranch.Hint);
				cboBranch.Tag := 0;
        btnBrSelectExit.Click;
				Exit;
			end;
		end;

		cxTxtBrNameCaption.Text := cboBranch.Text;
//    cxTxtBrNameCaption.Hint := cboBranch.Text;

		//구미 특정지사 적요 자동적용
//		proc_AutoSetEtc1;

    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 한다.
    if cboBranch.Tag <> 20 then
    begin
			LoadCustLevel;
      LoadPayMethod;
    end;

		if cboBranch.Tag < 5 then
		begin
			FCustChangeInfo.name := edtCuName.Text;
			FCustChangeInfo.CbCuGb := CbCuGb.ItemIndex;
			FCustChangeInfo.meoCuCCMemo := meoCuCCMemo.Text;
			FCustChangeInfo.meoCuWorMemo := meoCuWorMemo.Text;
			FCustChangeInfo.edt_CardMemo := edt_CardMemo.Text;

			// 고객조회 한 상태에서 지사정보를 바꾸면 고객정보를 초기화 해야 한다.
      cxCustView.DataController.SetRecordCount(0);

			if ((Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 )) and (cxtCuTel.Text <> '') then  //수정모드에서는 제외
			 gsCuTelHint := '';  // 지사변경시 자동엔터가 아니면 다시 엔터를 치게 만들어야 됨.

      gsShortCoprNm[Self.Tag] := '';
			cxtCuBubin.Text := ''; // 법인명(법인정보)
      cxtCuBubin.Hint := '';

      sNowRate := ''; // 현재 지사의 기본요금 설정액.

			lcsCu_seq := ''; // 현재 선택된 고객seq
			pCompareCustInfo;

//			locHDNO := '';
//			locBRNO := '';
//	  	locKNum := ''; // 조회 고객 본사, 지사코드, 대표번호 임시저장.
//      locDNIS := '';  //콜링시 지사변경 가능. DNIS는 그대로 유지 20160715 KHS

			locWkSabun := '';
      locWkBrNo := ''; // 조회기사 사번, 기사지사코드 저장.
      locSndTime := '';

      // 플러스콜 사용여부 체크
			proc_PlusCall_CtrlYN;

			// 탁송연합콜 사용
			proc_TakCall_CtrlYN;

			//AI 아웃바운드 옵션 배차지연콜 사용여부
			proc_AIOB_CtrlYN;

			//건당보럼료 부료 사용 여부 체크
			if GetBranchYN(scb_JON03CallByInsureFree, Proc_BRNOSearch) = 'y' then 
			begin
				lblCallByInsureFree.Visible := True;
				lblCallByInsureFree.Tag := 0;        // 기본값 사용 안함
				pSetLabelClick(lblCallByInsureFree);
			end else
			begin
				lblCallByInsureFree.Visible := False;
				lblCallByInsureFree.Tag := 0;
				pSetLabelClick(lblCallByInsureFree);
			end;
			// LBS 사용여부 체크 수정창 제외
			if ((Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 )) then
				btn_LBS.Enabled := True else btn_Lbs.Enabled := False;

			// 고객구분 법인일때 개인으로 변경함.
			if CbCuGb.ItemIndex = 2 then
      begin
        CbCuGb.Hint := 'Clear';
        CbCuGb.ItemIndex := 0;
        CbCuGb.Hint := '';
      end;
      lblCuMile.Caption := '0'; // 현재 마일리지
      lblCuMile.Style.Font.Style := [fsBold];
      lblCuMileUnit.Caption := '0';
      // 선택지사 마일리지 지급단위
      lblCuMileCnt.Caption := '0';
      // 마일리지 지급횟수
			lblCuMileLost.Caption := '0';
			// 마일리지 소멸예정금액
      lblCuCntTotal.Caption := '0';
      lblCoCntTotal.Caption := '0';
      SetMileColorChange;
      // 접수/왼료
      lblCuCancelR.Caption := '0%'; // 취소율

  //-    curOutMileMny.Value := 0; // 지급마일
      sProdName := '';

			if (Pos('신규', Self.Caption) < 1) and (cxtCuTel.Text <> '') then
				Proc_CuSeq_Select; // 고객 SEQUENCE 를 조회 해 온다.[현재 조회한 고객정보를 다른지사의 고객정보로 그대로 등록 해주기 위해서..]

//			if cxtCuTel.Text <> '' then  //수정모드는 별도로 SearchCuTel에서 체크
//			begin
//        Key := Char(13);
//				cxtCuTelKeyPress(cxtCuTel, Key);
//      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.cboBrOnlyClick(Sender: TObject);
begin
  if cboBrOnly.Properties.Items.Count > 35 then cboBrOnly.Properties.DropDownRows := 35
                                           else cboBrOnly.Properties.DropDownRows := cboBrOnly.Properties.Items.Count;
end;

procedure TFrm_JON01N.cboBrOnlyEnter(Sender: TObject);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01N.cboBrOnlyKeyPress(Sender: TObject; var Key: Char);
begin
	if key in ['0'..'9', #13, #8] then
	else
		key := #0;
end;

procedure TFrm_JON01N.cboBrOnlyPropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('JON01N.cboBrOnlyPropertiesChange');
  if cboBrOnly.Tag = 0 then
  begin
    SetCboBranch(True);
    cxTSearchMainTel.Text := '';
  end;
end;

procedure TFrm_JON01N.cboCuLevelPropertiesChange(Sender: TObject);
begin
  Proc_SetFormColor(cboCuLevel.Tag = 0);
  pCompareCustInfo;
end;

procedure TFrm_JON01N.CbSecondPropertiesChange(Sender: TObject);
Var sDateTime : TDateTime;
begin
  SetDebugeWrite('JON01N.CbSecondPropertiesChange');
  if CbSecond.Tag = 1 then Exit;

  try
    if CbSecond.ItemIndex >= 0 then
    begin
      sDateTime := StrToDateTime(FormatDateTime('YYYY-MM-DD', dtpResvDateJ.date) + ' ' +
                                 FormatDateTime('HH:NN:SS'  , dtpResvTimeJ.Time));

      sDateTime := sDateTime - ((1 / 24 / 60) * StrToFloatDef(CBSecond.Text, 0));

      dtpResvDate.Text := FormatDateTime('YYYY-MM-DD', sDateTime);
      dtpResvTime.Text := FormatDateTime('HH:NN'     , sDateTime);

      CheckResvDateTime(True);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.cbTelViewPropertiesChange(Sender: TObject);
begin
	if (cbTelView.ItemIndex = 1) or (cbTelView.ItemIndex = 2) then
  begin
    if cxtCuTel2.Text = '' then
    begin
      GMessagebox('전화번호2에 번호가 없습니다.',CDMSE);
      cbTelView.ItemIndex := 0;
    end;
  end;

  if cbTelView.ItemIndex = 3 then
  begin
    lblCenterMng.Tag := 1;
    pSetLabelClick(lblCenterMng);
  end else
  begin
    lblCenterMng.Tag := 0;
    pSetLabelClick(lblCenterMng);
  end;

  pSetCuTelLabel(cbTelView.ItemIndex);
end;

procedure TFrm_JON01N.chkCenterMngClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.chkCenterMngClick');
  CustBrTelYN := IfThen(chkCenterMng.Checked, 'y', 'n');
  if chkCenterMng.Checked then lblCenterMng.Tag := 1
                          else lblCenterMng.Tag := 0;
  pSetLabelClick(lblCenterMng);

  if chkCenterMng.Checked then
  begin
    cbTelView.ItemIndex := 3;
  end else
  begin
    if ( Trim(cxtCuTel2.Text) <> '' ) then cbTelView.ItemIndex := 1
                                      else cbTelView.ItemIndex := 0;
  end;
end;

procedure TFrm_JON01N.chkCompulWorPropertiesChange(Sender: TObject);
begin
	//강배체크 -> JON17 show -> 기사선택 -> 접수창적용 -> 체크유지
	//                                      접수창미적요 -> 체크해제
  if Self.Tag < 0 then Exit;
  if chkCompulWor.Tag = 99 then exit;
	if chkCompulWor.Checked then 
	begin
		if (locsCuTel <> gsCuTelHint) or (gsCuTelHint = '') then
		begin
			chkCompulWor.Tag := 99;
			GMessagebox('고객조회 후 강/배를 선택해 주십시오', CDMSI);
			chkCompulWor.Checked := False;
			chkCompulWor.Tag := 0;
			exit;
		end;

{		if Not Assigned(Frm_Main.Frm_JON17[self.Tag]) Or ( Frm_Main.Frm_JON17[self.Tag] = Nil ) then
		begin
			Frm_Main.Frm_JON17[self.Tag] := TFrm_JON17.Create(Self); // 폼 객체를 생성한다.
			fSetFont(Frm_Main.Frm_JON17[self.Tag], GS_FONTNAME);
			fSetSkin(Frm_Main.Frm_JON17[self.Tag]);
			Frm_Main.JON17MNG[self.Tag].CreateYN := True;
			Frm_Main.JON17MNG[self.Tag].USE := True;
			Frm_Main.JON17MNG[self.Tag].Tag := self.Tag;
		end; }
		Frm_Main.Frm_JON17[self.Tag].proc_Init;
		Frm_Main.Frm_JON17[self.Tag].gsOrderBrNo := proc_BRNOSearch;
		Frm_Main.Frm_JON17[Self.Tag].Tag := Self.Tag;
		Frm_Main.Frm_JON17[self.Tag].Jon03Tag := Self.Jon03Tag;
		Frm_Main.Frm_JON17[self.Tag].Top := self.Top + pnlBody.Top + grpOption.Top + cbCardSanction.Top;
		Frm_Main.Frm_JON17[self.Tag].Left := self.Left + self.Width - Frm_Main.Frm_JON17[self.Tag].Width;
		Frm_Main.JON17MNG[self.Tag].CreateYN := True;
		Frm_Main.JON17MNG[self.Tag].USE := True;
		Frm_Main.Frm_JON17[self.Tag].show;
		
	end else 
	begin
		chkCompulWor.Hint := '';
		lb_CompulWor.Caption := '';
		lb_CompulWor2.Caption := '';
		lb_CompulWor.Visible := False;
		Frm_Main.JON17MNG[self.Tag].CreateYN := False;
		Frm_Main.JON17MNG[self.Tag].USE := False;
		Frm_Main.Frm_JON17[self.Tag].Hide;	
{		if Not Frm_Main.JON17MNG[self.Tag].CreateYN then   
		begin
			if Assigned(Frm_Main.Frm_JON17[self.Tag]) then
			begin
				Frm_Main.Frm_JON17[self.Tag].Close;
				Frm_Main.Frm_JON17[self.Tag].Free;
			end;
		end;   }
	end;
end;

procedure TFrm_JON01N.SetCboBranch(bBrNoSetType: boolean = False);
Var i : Integer;
    lsBrNo : String;
begin
  SetDebugeWrite('JON01N.SetCboBranch');
  try
    // 콜센터 지사리스트 재설정 여부..
    if ( bBrNoSetType ) Or ( cboBranch.Properties.Items.Count = 0 ) then
    begin
      if cboBrOnly.ItemIndex <= 0 then
        lsBrNo := ''
			else
        lsBrNo := scb_BranchCode[scb_BranchName.IndexOf(cboBrOnly.Text)];

      if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

      // 콜센터 지사리스트 와 접수화면의 지사리스트가 다를경우에만 재설정 해준다.
      if ( cboBranch.Properties.Items.Count <> scb_DsBranchCode.Count ) Or ( lsBrNo <> '' ) Or ( cboBranch.Properties.Items.Count = 1 ) then
      begin
        cboBranch.Tag := 10;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
        cboBranch.Properties.Items.Clear; // 지사명
        slCboBranch.Clear;

        // 지사리스트를 담는다.
        for i := 0 to scb_DsBranchCode.Count - 1 do
        begin
          if lsBrNo = '' then
          begin
//            cboBranch.Properties.Items.Add(scb_DsBranchName[i] + '[' + scb_KeyNumber[i] + '] ' +
//              Copy(scb_HeadCode[i] + '     ', 1, 5) + '.' + Copy(scb_DsBranchCode[i] + '     ', 1, 5));

            if Trim(scb_Area1[i]) = 'ALL' then
              cboBranch.Properties.Items.Add(scb_DsBranchName[i] + '[' + scb_KeyNumber[i] + ']')
            else
              cboBranch.Properties.Items.Add(scb_DsBranchName[i] + '[' + scb_KeyNumber[i] + ']' + scb_Area1[i] + '.' + scb_Area2[i] + '.' + scb_Area3[i]);
            slCboBranch.Add(Copy(scb_HeadCode[i] + '     ', 1, 5) + '.' + Copy(scb_DsBranchCode[i] + '     ', 1, 5));
          end else
          begin
            if ( lsBrNo = scb_DsBranchCode[i] ) then
            begin
//              cboBranch.Properties.Items.Add(scb_DsBranchName[i] + '[' + scb_KeyNumber[i] + '] ' +
//                Copy(scb_HeadCode[i] + '     ', 1, 5) + '.' + Copy(scb_DsBranchCode[i] + '     ', 1, 5));

              if Trim(scb_Area1[i]) = 'ALL' then
                cboBranch.Properties.Items.Add(scb_DsBranchName[i] + '[' + scb_KeyNumber[i] + ']')
              else
                cboBranch.Properties.Items.Add(scb_DsBranchName[i] + '[' + scb_KeyNumber[i] + ']' + scb_Area1[i] + '.' + scb_Area2[i] + '.' + scb_Area3[i]);

              slCboBranch.Add(Copy(scb_HeadCode[i] + '     ', 1, 5) + '.' + Copy(scb_DsBranchCode[i] + '     ', 1, 5));
            end;
          end;
        end;
      end;
      cboBranch.Tag := 0;
      // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.

      if Not pJON01Dock.bUNDock then pJON01Dock.GUBUN := GT_SEL_BRNO.Gubun;
      if Not pJON01Dock.bUNDock then pJON01Dock.BrNo  := GT_SEL_BRNO.BrNo;

      // 지사통합 선택이 아니면.. 죄측메뉴에 선택된 지사정보로 설정 해준다.
      if pJON01Dock.GUBUN <> '0' then
      begin // 지사리스트에서 지사코드, 본사코드로 첫번째 대표번호 index를 찾는다.  CDS. 080818.
        if not Proc_HeNoBrNoListIdxFind(Trim(pJON01Dock.HDNO), Trim(pJON01Dock.BrNo)) then
        begin
          cboBranch.Tag := 10;
          // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
          cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
          cboBranch.Tag := 0;
          // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
        end;
      end else
      begin // 환경설정에 설정된 대표지사로 세팅한다.
        if (GS_MainBranch.sBrNo <> '') and (GS_MainBranch.sKeyNumber <> '') then
        begin
          // 지사리스트에서 대표번호, 지사코드로 index를 찾는다.
          if not Proc_BrNoListIdxFind(GS_MainBranch.sBrNo, GS_MainBranch.sKeyNumber) then
          begin
            cboBranch.Tag := 10;
            // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
            cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
            cboBranch.Tag := 0;
            // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
          end;
        end else
        begin
          if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then
          begin
            if not Proc_HeNoBrNoListIdxFind(Trim(scb_FamilyHeadCode[0]), Trim(scb_FamilyDsBranchCode[0])) then
            begin
              cboBranch.Tag := 10;
              // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
              cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
              cboBranch.Tag := 0;
              // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
            end;
          end else
          begin
            cboBranch.Tag := 10;
            // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
            cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
            cboBranch.Tag := 0;
            // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
          end;
        end;
      end;
    end else
    begin
      // 콜센터 지사리스트와 접수화면의 지사리스트가 다를경우에만 재설정 해준다.
      if ( cboBranch.Properties.Items.Count <> scb_DsBranchCode.Count ) Or ( cboBranch.Properties.Items.Count = 1 ) then
      begin
        cboBranch.Tag := 10;
      end;
    end;

    if (GS_JONSEL_BRNO <> '') And ( cboBranch.Properties.Items.IndexOf(GS_JONSEL_BRNO) >= 0 ) then cboBranch.Text := GS_JONSEL_BRNO;

    SetDebugeWrite('JON01N.SetCboBranch End');
  Except
    on e: exception do
    begin
      Log('SetCboBranch Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'SetCboBranch Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.cxBtnSpSaveClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.cxBtnSpSaveClick');
  pFormActive;

	if (lcsCu_seq <> '') then
  begin
 		// 고객 기본정보를 저장 한다.
  	Proc_CustBasicSave
  end else
	begin
		GMessagebox('신규 미등록 고객은 기본정보를 저장 할 수 없습니다. 고객등록을 먼저 하세요!', CDMSE);
	end;
end;

procedure TFrm_JON01N.cxButton1Click(Sender: TObject);
begin
	grpAIMent.Visible := False;
end;

procedure TFrm_JON01N.cxButton2Click(Sender: TObject);
begin
  pnlOrderInfoView.Visible := False;
end;

procedure TFrm_JON01N.btnMileClick(Sender: TObject);
var
	sCurMlg, sPrzCnt: string;
begin
	SetDebugeWrite('JON01N.miMileOutClick');
  pFormActive;

  if Trim(cxtCuTel.Text) = '' then Exit;

	// 마일리지 지급 현황 띄우기..
  if Not Assigned(Frm_COM40) then Frm_COM40 := TFrm_COM40.Create(Self);

  try
    Frm_COM40.Tag := Self.Tag;
    Frm_COM40.SetCuProduct(SProdName, 0);
		Frm_COM40.clbCuSeq.Caption := Self.lcsCu_seq;
		Frm_COM40.CB_Gubun.ItemIndex := 0;
    sCurMlg := lblCuMile.Caption;
    sCurMlg := StringReplace(sCurMlg, ',', '', [rfReplaceAll]);
		if sCurMlg = '' then sCurMlg := '0';
    sPrzCnt := lblCuMileCnt.Caption;
    sPrzCnt := StringReplace(sPrzCnt, ',', '', [rfReplaceAll]);
		if sPrzCnt = '' then sPrzCnt := '0';
    Frm_COM40.curCurrent.Caption := sCurMlg;            // 20130703  LYB 수정
    Frm_COM40.curPrzCnt.Caption := sPrzCnt;

		Frm_COM40.curMileLost.Caption := lblCuMileLost.Caption;
    Frm_COM40.proc_search;

    Frm_COM40.Show;
  except
  end;
end;

procedure TFrm_JON01N.btnBrSelectExitClick(Sender: TObject);
begin
  grpBrSelect.Visible := False;
end;

procedure TFrm_JON01N.cxButton46Click(Sender: TObject);
begin
  cxGBSearch.Visible := False;
end;

procedure TFrm_JON01N.cxButton7Click(Sender: TObject);
begin
  GrpHelp.Visible := False;
	if cxtCuTel.CanFocus then cxtCuTel.SetFocus;
end;

procedure TFrm_JON01N.cxButton8Click(Sender: TObject);
begin
	pnl_ViaMent.Visible := False;
end;

procedure TFrm_JON01N.cxButton9Click(Sender: TObject);
begin
	btnMile.Click;
	btn_MileOut_Close.Click;
end;

procedure TFrm_JON01N.cxCurOtherRateKeyPress(Sender: TObject; var Key: Char);
begin
	if (Key = '-') or (Key = 'e') or (Key = 'E') then
		Key := #0;
end;

procedure TFrm_JON01N.cxCurPathRateKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	SetDebugeWrite('JON01N.cxCurPathRateKeyDown');
  try
    if Ord(Key) = VK_RETURN then
    begin
      if Sender = cxCurPathRate then
      begin
				if (cxCurPathRate.Value > 0) and (cxCurPathRate.Value < 1000) then
        begin
					cxCurPathRate.Value := cxCurPathRate.Value * 1000;
        end;
        if cxTmWaitTime.CanFocus then cxTmWaitTime.SetFocus;
      end else
			if Sender = cxTmWaitTime then
      begin
				if cxCurWaitTmRate.CanFocus then cxCurWaitTmRate.SetFocus;
			end else
			if Sender = cxCurWaitTmRate then
			begin
				if (cxCurWaitTmRate.Value > 0) and (cxCurWaitTmRate.Value < 1000) then
				begin
					cxCurWaitTmRate.Value := cxCurWaitTmRate.Value * 1000;
				end;
				if cxCurRevisionRate.CanFocus then cxCurRevisionRate.SetFocus;
			end else
			if Sender = cxCurRevisionRate then
			begin
//				cxCurRevisionRate.Hint := (curRate.text);
				if (cxCurRevisionRate.Value > 0) and (cxCurRevisionRate.Value < 1000) then
				begin
					cxCurRevisionRate.Value := cxCurRevisionRate.Value * 1000;
				end;
//				curRate.Value := OrgRate + cxCurRevisionRate.value;
				if cxCurSupportRate.CanFocus then cxCurSupportRate.SetFocus;
			end else
			if Sender = cxCurSupportRate then
			begin
				if (cxCurSupportRate.Value > 0) and (cxCurSupportRate.Value < 1000) then
				begin
					cxCurSupportRate.Value := cxCurSupportRate.Value * 1000;
				end;
				if cxCurOtherRate.CanFocus then cxCurOtherRate.SetFocus;
			end else
			if Sender = cxCurOtherRate then
			begin
				if (cxCurOtherRate.Value > 0) and (cxCurOtherRate.Value < 1000) then
				begin
					cxCurOtherRate.Value := cxCurOtherRate.Value * 1000;
				end;
				if meoBigo.Visible then meoBigo.SetFocus
													 else meoBigo2.SetFocus;
			end;
		end;

    if Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        //      VK_F6     : if rb_search.Enabled then rb_Search.OnClick(rb_Search);
        Vk_F7: //if rb_Modify.Enabled then rb_Modify.OnClick(rb_Modify);              // 수정
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave);
				Vk_F8: //whbtn_Cancel.OnClick(whbtn_Cancel);
				begin                       // 종료
					SetDebugeWrite('JON01N.cxCurPathRateKeyDown->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit);
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then
            btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
          if btnCmdQuestion.Enabled then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
        VK_ESCAPE: // ESC 키
          begin
            if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
            begin
              if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
                and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
								and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
								begin
									SetDebugeWrite('JON01N.cxCurPathRateKeyDown->VK_ESCAPE');
									btnCmdExit.OnClick(btnCmdExit); // 종료
								end;
            end;
          end;
      end;
    end;
  Except
    on e: exception do
    begin
      Log('cxCurPathRateKeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'cxCurPathRateKeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.cxCurPathRateKeyPress(Sender: TObject; var Key: Char);
begin
	if (Key = '-') or (Key = 'e') or (Key = 'E') then
		Key := #0;
end;

procedure TFrm_JON01N.cxCurRevisionRateExit(Sender: TObject);
begin
//	cxCurRevisionRate.Hint := (curRate.text);
	if (cxCurRevisionRate.Value > 0) and (cxCurRevisionRate.Value < 1000) then
	begin
		cxCurRevisionRate.Value := cxCurRevisionRate.Value * 1000;
	end;
//	curRate.Value := OrgRate + cxCurRevisionRate.value;
end;

procedure TFrm_JON01N.cxCurSupportRateKeyPress(Sender: TObject; var Key: Char);
begin
	if (Key = '-') or (Key = 'e') or (Key = 'E') then
		Key := #0;
end;

procedure TFrm_JON01N.cxCustViewCellDblClick(Sender: TcxCustomGridTableView; ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
var
  iRcIdx: Integer;
begin
  SetDebugeWrite('JON01N.cxCustViewCellDblClick');
  iRcIdx := cxCustView.DataController.FocusedRecordIndex;
  // 현재 선택된 레코드 index 읽기.

  // 고객조회 그리드에서 그리드 선택시에 고객관련 정보를 입력 컨트롤에 Display~
  if iRcIdx > -1 then
    Proc_GridCustChoice(iRcIdx);
end;

procedure TFrm_JON01N.cxCustViewEditKeyPress(Sender: TcxCustomGridTableView; AItem: TcxCustomGridTableItem; AEdit: TcxCustomEdit; var Key: Char);
var
  iRcIdx: integer;
begin
  SetDebugeWrite('JON01N.cxCustViewEditKeyPress');
  if Ord(Key) = VK_RETURN then
  begin
    // 현재 선택된 레코드 index 읽기.
    iRcIdx := cxCustView.DataController.FocusedRecordIndex;
    // 고객조회 그리드에서 그리드 선택시에 고객관련 정보를 입력 컨트롤에 Display~
    if iRcIdx > -1 then
      Proc_GridCustChoice(iRcIdx);
  end;
end;

procedure TFrm_JON01N.cxDriverChargeEnter(Sender: TObject);
begin
  LbDriverCharge.Visible := False;
end;

procedure TFrm_JON01N.cxDriverChargeExit(Sender: TObject);
begin
  LbDriverCharge.Visible := (cxDriverCharge.Text = '') // 수수료 입력 잔상.
end;

procedure TFrm_JON01N.cxDriverChargeFocusChanged(Sender: TObject);
begin
  LbDriverCharge.Visible := ( Not cxDriverCharge.Focused ) And (cxDriverCharge.Text = '');
end;

procedure TFrm_JON01N.cxDriverChargeKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  try
//    if Ord(Key) = VK_RETURN then
//    begin
//      if cxDriverCharge.Value < 1000 then
//      begin
//        cxDriverCharge.Value := cxDriverCharge.Value * 1000;
//      end;
//      if cbbPayMethod.CanFocus then cbbPayMethod.SetFocus;
//    end;
except
  end;
end;

procedure TFrm_JON01N.cxDriverChargePropertiesChange(Sender: TObject);
begin
  if ( Not cxDriverCharge.Focused ) then
    LbDriverCharge.Visible := (cxDriverCharge.Text = '') // 수수료 입력 잔상.
end;

procedure TFrm_JON01N.cxImage1Click(Sender: TObject);
begin
  SetDebugeWrite('JON01N.cxImage1Click');
  GrpHelp.Top  := 65;
  GrpHelp.Left := 28;
  GrpHelp.BringToFront;
  if GrpHelp.Visible then GrpHelp.Visible := False
                     else GrpHelp.Visible := True;
end;

procedure TFrm_JON01N.cxLblOrderUpInfoClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.cxLblOrderUpInfoClick');
  if pnlOrderInfoView.Visible then
  begin
		pnlOrderInfoView.Visible := False;
  end else
	if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
  begin
    // 오더수정시에 오더배차 및 상태에 관련 정보를 보여준다.
    pnlOrderInfoView.Top := grpModifyTitle.Top + 21;
    pnlOrderInfoView.Left := grpModifyTitle.Left + 1;
		pnlOrderInfoView.Visible := True;
		pnlOrderInfoView.BringToFront;
	end;
end;

procedure TFrm_JON01N.cxLCuCCMemoFlg1Click(Sender: TObject);
begin
  if edt_CardMemo.CanFocus then edt_CardMemo.SetFocus;
end;

procedure TFrm_JON01N.cxLCuCCMemoFlgClick(Sender: TObject);
begin
  meoCuCCMemo.SetFocus;
end;

procedure TFrm_JON01N.cxLCuWorMemoFlgClick(Sender: TObject);
begin
  meoCuWorMemo.SetFocus;
end;

procedure TFrm_JON01N.cxReEndAreaClick(Sender: TObject);
begin
	if cxtEndAreaDetail.Caption = '' then exit;
	cxReEndArea.Enabled := false;
  pnl_EndDetail_Update.BringToFront;
	pnl_EndDetail_Update.Visible := True;
	pnl_EndDetail_Update.Left := 53;
	pnl_EndDetail_Update.Top := cxReEndArea.Top - 2;

	edt_EndDetail_Update.Text := '';
	edt_EndDetail_Update.Text := cxtEndAreaDetail.Caption;
	edt_EndDetail_Update.Hint := cxtEndAreaDetail.Caption;
	edt_EndDetail_Update.SetFocus;
end;

procedure TFrm_JON01N.cxReEndAreaPropertiesChange(Sender: TObject);
begin
  if (cxReEndArea.Text <> '') then btnEndLocalSave.Enabled := True
                              else btnEndLocalSave.Enabled := False;
end;

procedure TFrm_JON01N.cxtCuBubinEnter(Sender: TObject);
begin
  lblCuBubinFlag.Visible := False
end;

procedure TFrm_JON01N.cxtCuBubinExit(Sender: TObject);
begin
  lblCuBubinFlag.Visible := (cxtCuBubin.Text = ''); // 입력 잔상.
end;

procedure TFrm_JON01N.cxtCuBubinFocusChanged(Sender: TObject);
begin
  lblCuBubinFlag.Visible := ( Not cxtCuBubin.Focused ) And (cxtCuBubin.Text = '');
end;

procedure TFrm_JON01N.cxtCuBubinPropertiesChange(Sender: TObject);
begin
  if ( Not cxtCuBubin.Focused ) then
    lblCuBubinFlag.Visible := (cxtCuBubin.Text = ''); // 입력 잔상.
end;

procedure TFrm_JON01N.cxtCuTel2PropertiesChange(Sender: TObject);
begin
	if ( Trim(cxtCuTel2.Text) <> '' ) And ( BtnCall.Visible ) then
  begin
    BtnCall2.Visible := True;
		cxtCuTel2.Width := 84;
  end else
  begin
		BtnCall2.Visible := False;
		cxtCuTel2.Width := 106;
  end;

  if chkCenterMng.Checked then
  begin
    cbTelView.ItemIndex := 3;
	end else
  begin
    if ( Trim(cxtCuTel2.Text) <> '' ) then cbTelView.ItemIndex := 1
                                      else cbTelView.ItemIndex := 0;
  end;
end;

procedure TFrm_JON01N.cxtCuTelKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	SetDebugeWrite('JON01N.cxtCuTelKeyPress');
  try
    if Ord(Key) = VK_RETURN then
    begin
      if ( StrToIntDef(Copy(cxtCuTel.Text, 1, 1), -1) In [0..9] ) then
			begin
        // 전화번호 검색
				SearchCuTel(((Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 )));
			end else
      begin
				if Length(Trim(cxtCuTel.Text)) >= 2 then
        begin
          // 고객명 으로 조회 한다... sGB : NAME(고객명으로 조회), : TELL(전화번호로 조회)
          CustomerSearch('NAME');
        end else
        begin
          GMessagebox('고객명 검색은 2자 이상 입력하셔야 합니다.', CDMSE);
        end;
      end;
    end;

    if Ord(key) in [VK_F7..VK_F12, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
  					btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
				//      VK_F6     : if rb_search.Enabled then rb_Search.OnClick(rb_Search);
        Vk_F7:
          if btnCmdUpdSave.Enabled then btnCmdUpdSave.OnClick(btnCmdUpdSave); // 수정
        Vk_F8:
				begin
					SetDebugeWrite('JON01N.cxtCuTelKeyPress->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
          if btnCmdQuestion.Enabled then btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.SearchCuTel(AIsUpdate: Boolean);
begin
	SetDebugeWrite('JON01N.SearchCuTel');
	try
		if AIsUpdate then
		begin
			if gsCuTelHint <> cxtCuTel.Text then
			begin
				if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
				begin
					GMessagebox('결제구분이 후불(마일)일 경우에는 결제구분을 변경 하신 뒤 고객연락처를 변경하여 주십시오.' +#13#10 + #13#10 +
											'** 적용된 마일리지는 수정 후 이전고객의 마일리지로 원상복구됩니다.', CDMSE);
					cxtCuTel.Text := gsCuTelHint;
					cbbPayMethod.SetFocus;
					Exit;
				end;
				gsCuTelHint := cxtCuTel.Text;
				cxtCallTelNum.Text := cxtCuTel.Text;
				Proc_CuSeq_Select;
				Proc_Cust_History(lcsCu_seq); //수정창에서 고객전번 변경 시 과거이용내역 추가로 조회 2016.08.05 KHS
			end else
			if locsCuTelTxtBoxVal <> cxtCuTel.Text then //최초 수정창 오픈 고객번호와 현재 입력된 고객번호비교 2016.08.05 KHS
			begin
				Proc_CuSeq_Select;
				Proc_Cust_History(lcsCu_seq); //수정창에서 고객전번 변경 시 과거이용내역 추가로 조회 2016.08.05 KHS
			end	else
			begin
				//수정창 오픈 시 본사, 지사, 대표번호가 동일하면 열어줌. 수정시 지사변경 가능수정의 일부 2016.07.19 KHS
				if (locHdNo = sOrgHDNO) and (locBrNo = sOrgBRNO) and (locKNum = sOrgKNum) then
					// 오더 일련번호를 받아 오더 수정창을 열어 준다.  sTodayGb:1(당일오더), 2:(과거오더)
					Proc_OrderUpdate_Select(cxtJoinNum.Text, IntToStr(cxtJoinNum.Tag), btnCmdUpdSave.Hint);
			end;
			//Perform(WM_NEXTDLGCTL, 0, 0);
    end else
    begin
			if cxtCuTel.Hint <> cxtCuTel.Text then //콜링이후 전화번호가 변경됐는지 확인 후 초기화 2016.07.22 KHS
				cxLblCIDUseFlg.Hint := ''; // CID 조회인지 설정을 한다.  value:CID

      SetPrivateVariable; // 접수 전에 조회 조건 관련 전역변수 초기화..
      if Length(Trim(cxtCuTel.Text)) < 4 then
      begin
				GMessagebox('고객전화번호가 없거나 혹은 잘못 입력된 번호 입니다.', CDMSE);
				cxtCuTel.SetFocus;
				Exit;
			end;

      if Length(Trim(cxtCuTel.Text)) = 4 then
  		begin
  			CustomerSearch('TEL4');
        Exit;
      end;

      cxtCuTel.Text := AddPhoneDDD(cxtCuTel.Text);

      meoStartArea.Hint := 'STOPFOCUS'; // 포커스 더이상 넘어가지 않도록 한다.
      locCustHP_MainNum_Search := '';
      // JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
      // 선택된 지사정보에서 대표번호를 추출 한다.

      shpLevel.Brush.Color := GS_BasicColor;
      PnlKTPOIYN.Visible := False;
      cxGBSearch.Visible := False;

  		Proc_KeyNumberSearch(Proc_MainKeyNumberSearch);

      // 일반전화번호 인입시 KT전화번호로 POI 추출
      if ( Copy(cxtCuTel.Text, 1, 2) <> '01' ) And ( Copy(cxtCuTel.Text, 1, 2) <> '08' ) And ( GB_JON_POITELSEARCH ) then
        Proc_GetTelPOISearch(cxtCuTel.Text);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 고객 SEQUENCE 를 조회 해 온다.
procedure TFrm_JON01N.Proc_CuSeq_Select;
var
	XmlData, Param, ErrMsg : string;
  ls_TxLoad, ls_TxQry, sQueryTemp : string;

	ls_Rcrd, slList : TStringList;
  rv_str, ls_rxxml: string;
  ErrCode: integer;
begin
	SetDebugeWrite('JON01N.Proc_CuSeq_Select');
	if cxLblCIDUseFlg.Hint <> 'CID' then
  begin // CID 조회인지 설정을 한다.
    if (Length(Trim(cxtCuTel.Text)) < 4) or (Length(Trim(cxtCallTelNum.Text)) < 4) then
		begin
			GMessagebox('고객 전화번호가 없거나 부정확 합니다. 지사 선택 후 고객정보를 조회 하세요!', CDMSE);
			cxtCuTel.Text := '';
      cxtCallTelNum.Text := '';
      Exit;
		end;
		if cxtCuTel.Text <> gsCuTelHint then
		begin
			if Pos('*', cxtCuTel.Text) <= 0 then
				cxtCallTelNum.Text := cxtCuTel.Text;
		end;
	end else
  begin
    if (Length(Trim(cxtCallTelNum.Text)) < 4) then
		begin
      Exit;
    end;
  end;

	locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
  locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
  locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

  Param := '';
  Param := locHdNo + '│' + locBrNo + '│' + locKNum + '│' + cxtCallTelNum.Text;

  if (locHdNo = '') Or (locBrNo = '') Or (locKNum = '') then Exit;

  try
    Screen.Cursor := crHourGlass;
    slList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);

      if not RequestBasePaging(GetSel06('CUSE0001', 'MNG.GET_CUST_TEL_SEARCH', '1000', Param), slList, ErrCode, ErrMsg) then
      begin
        GMessagebox(Format('고객 조회 오류' + CRLF + '[%d]%s', [ErrCode, ErrMsg]), CDMSE);
        Screen.Cursor := crDefault;
        Exit;
      end;

      rv_str := slList[0];
      if rv_str <> '' then
      begin
        ls_rxxml := rv_str;
        Application.ProcessMessages;
        proc_recieve(ls_rxxml);

        tmFormClose.Tag := 99; // 화면 닫기 설정값.
      end;
    finally
      FreeAndNil(slList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;
  except
    on e: exception do
    begin
      grpBtm.Enabled := True;
      Screen.Cursor := crDefault;
      Assert(False, E.Message);
    end;
  end;
end;

// 고객 SEQUENCE 조회에 대한 결과를 처리 한다.
procedure TFrm_JON01N.Proc_RequestResult(ls_rxxml: String; ls_ClientKey:
  string);
var
  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  ls_Msg_Err, sTmp, sTmp2: string;
  ls_Rcrd : TStringList;
  iBarIndex : Integer;
begin
  SetDebugeWrite('JON01N.Proc_RequestResult');
  grpBtm.Enabled := True;

  xdom := ComsDomDocument.Create;
  try
    if not xdom.loadXML(ls_rxxml) then Exit;

    try
      if ls_ClientKey = 'CUSE0001' then
      begin
        // 고객 SEQUENCE 정보를 읽는다.
        ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
        if ('0000' = ls_Msg_Err) then
        begin
          sTmp := Proc_MainKeyNumberSearch; // 지사 대표번호를 가져온다.
          sTmp2 := Proc_BrNameReadSearch;
          // 선택된 지사정보에서 지사명을 추출 한다.
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
            if lst_Result = Nil then Exit;

            ls_Rcrd := TStringList.Create;
            try
              GetTextSeperationEx2('│', lst_Result.item[0].attributes.getNamedItem('Value').text, ls_Rcrd);
              lcsCu_seq := Trim(ls_Rcrd[0]);
              pCompareCustInfo;
              edtCuName.Text := Trim(ls_Rcrd[1]);
              FChkCCI.Name := edtCuName.Text;

              // 0.일반, 1.업소, 3.법인
              if Trim(ls_Rcrd[2]) = '법인' then iBarIndex := 3 else
              if Trim(ls_Rcrd[2]) = '업소' then iBarIndex := 1
                                           else iBarIndex := 0;

							CBCuGB.Hint := 'Clear';
              gsShortCoprNm[Self.Tag] := '';
              cxtCuBubin.text := '';
              cxtCuBubin.Hint := '';
              if ( iBarIndex = 0) or (iBarIndex = 4) then
              begin
                CbCuGb.ItemIndex := 0;
                CbCuGb.Hint := '1';
                // 0:개인, 4:불량 둘다 일반으로 처리(불량코드는 사용안함)
              end	else
              if iBarIndex = 1 then
              begin
                CbCuGb.ItemIndex := 1;
                CbCuGb.Hint := '2';
              end else
              if iBarIndex = 3 then
              begin
                CbCuGb.ItemIndex := 2;
                CbCuGb.Hint := '3';
                gsShortCoprNm[Self.Tag] := '';
                cxtCuBubin.text := Trim(ls_Rcrd[9]) + '|' + Trim(ls_Rcrd[10]);
                cxtCuBubin.Hint := Trim(ls_Rcrd[8]);
              end	else
              begin
                CbCuGb.ItemIndex := 0;
                CbCuGb.Hint := '1';
              end;
  //							CBCuGB.Hint := '';
              FChkCCI.CbCuGb  := CbCuGb.ItemIndex;

              //법인고객의 경우 색상표기
              if (GS_PRJ_AREA = 'S') and (Trim(ls_Rcrd[8]) <> '') and (locBRNO <> 'G898') and (locBRNO <> 'Q908') and (locBRNO <> 'H849') then
              begin
                shpTitle.Pen.Color := $00FE8769;   // 파란색
              end else
              begin
                shpTitle.Pen.Color := GS_BasicColor;   // 기본색
              end;
              shpTitle.Hint := ColorToString(shpTitle.Pen.Color);

              meoCuCCMemo.Text 		 := Trim(ls_Rcrd[3]);
              meoCuWorMemo.Text    := Trim(ls_Rcrd[4]);
              edt_CardMemo.Text    := Trim(ls_Rcrd[5]);

              FChkCCI.meoCuCCMemo  := meoCuCCMemo.Text;
              FChkCCI.meoCuWorMemo := meoCuWorMemo.Text;
              FChkCCI.edt_CardMemo := edt_CardMemo.Text;

              SetCustLevelSeq(True, ls_Rcrd[6]);
							FChkCCI.CbLevel := cboCuLevel.ItemIndex;

              // 고객 구분에 따른 색상 표시
              if (iBarIndex = 0) or (iBarIndex = 2) then
                Proc_SetFormColor_3(0)
              else if iBarIndex = 1 then
                Proc_SetFormColor_3(1)
              else if iBarIndex = 3 then
                Proc_SetFormColor_3(3);

              lblCuMile.Caption := FormatFloat('#,##0', StrToFloatDef(ls_Rcrd[7], 0));
              if StrToFloatDef(ls_Rcrd[7], 0) > 999999 then lblCuMile.Style.Font.Style := []
                                                       else lblCuMile.Style.Font.Style := [fsBold];

              lblMoCuMile.Caption := '0';
            finally
              FreeAndNil(ls_Rcrd);
            end;
            // 존재 : $0070FEF3, 미존재 : $00FAEDE2
          end else
          begin
  //            GMessagebox(sTmp2 + ' 지사에 ' + cxtCuTel.Text + ' 번호로 등록된 고객정보가 없습니다.', CDMSE);
            lcsCu_seq := '';
            pCompareCustInfo;
            edtCuName.Text 			 := FCustChangeInfo.name;
						CbCuGb.ItemIndex     := 0;
            CbCuGb.Hint          := '';
            meoCuCCMemo.Text 		 := FCustChangeInfo.meoCuCCMemo;
            meoCuWorMemo.Text    := FCustChangeInfo.meoCuWorMemo;
            edt_CardMemo.Text    := FCustChangeInfo.edt_CardMemo;
          end;

          if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
          begin
            if (locHdNo = sOrgHDNO) And (locBrNo = sOrgBRNO) And (locKNum = sOrgKNum) then
            begin
              cxTxtBrNameCaption.Text := sTmp2 + '[' + sTmp + ']'
            end else
            begin
              grpBrSelect.Visible := False;
              cxTxtBrNameCaption.Text := '지사변경됨:' + sTmp2 + '[' + sTmp + ']';
//              cxTxtBrNameCaption.BringToFront;
              cxTxtBrNameCaption.Left := cxTSearchMainTel.Left + cxTSearchMainTel.Width;
//              cxTxtBrNameCaption.Visible := True;
            end;
          end else
          begin
            grpBrSelect.Visible := False;
            cxTxtBrNameCaption.Text := '지사변경됨:' + sTmp2 + '[' + sTmp + ']';
//            cxTxtBrNameCaption.BringToFront;
            cxTxtBrNameCaption.Left := cxTSearchMainTel.Left + cxTSearchMainTel.Width;
//            cxTxtBrNameCaption.Visible := True;
          end;

          // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.
        end else
				begin
					GMessagebox(ls_Msg_Err, CDMSE);
				end;
			end else
			if ls_ClientKey = 'CUSE0011' then
      begin
        ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
        if ('0000' = ls_Msg_Err) then
        begin
          GMessagebox('출발지 정보를 저장 하였습니다.', CDMSI);
        end else
          GMessagebox(ls_Msg_Err, CDMSE);
      end else
      if ls_ClientKey = 'CUSE0012' then
      begin
         // 도착지 정보 저장 삭제
        ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
        if ('0000' = ls_Msg_Err) then
        begin
          GMessagebox('도착지 정보를 저장 하였습니다.', CDMSI);
        end else
          GMessagebox(ls_Msg_Err, CDMSE);
      end;
    except
      on e: exception do
      begin
        Assert(False, E.Message);
      end;
    end;
  finally
    xdom := nil;
  end;
end;

// 전화번호, 고객명 으로 조회 한다... sGB : NAME(고객명으로 조회), : TEL4(전화번호4자리 조회)
procedure TFrm_JON01N.CustomerSearch(sGB: string);
var
  sType, sHDNO, sBRNO, sKeyNumber: string;
  sSearch: String;

  XmlData, Param, ErrMsg: string;
  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  ls_Rcrd: TStringList;
  I, ErrCode, iRow : Integer;
  idx: Integer;
begin
  SetDebugeWrite('JON01N.CustomerSearch');
  // 선택된 지사정보에서 대표번호를 추출 한다.
  sKeyNumber := Proc_MainKeyNumberSearch;
  sHDNO := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
  sBRNO := Proc_BRNOSearch; // 지사코드 정보를 읽는다.

	if (sGB = 'TEL4') and (length(Trim(cxtCuTel.Text)) = 4) then
  begin
    sSearch := Trim(cxtCuTel.Text);
    sType := '1';
  end else
  if (sGB = 'NAME') and (length(Trim(cxtCuTel.Text)) >= 2) then
	begin
		sSearch := Trim(cxtCuTel.Text);
    sType := '2';
  end else
	begin
		GMessagebox('전화번호 일경우는 4자리, 고객명 일경우는 2자이상 입력하셔야 합니다.', CDMSE);
		cxtCuTel.Text := '';
		cxtCuTel.SetFocus;
		Exit;
  end;

  try
    Param := En_Coding(sType + '│' + sHDNO + '│' + sBRNO + '│' + sKeyNumber + '│' + sSearch);
		if not RequestBase(GetSel05('CUST_SEARCH_TYPE_LIST', 'MNG_CUST.CUST_SEARCH_TYPE_LIST', '1000', Param), XmlData, ErrCode, ErrMsg) then
    begin
      GMessagebox(Format('고객 조회  중 오류발생' + #13#10 + '[%d]%s', [ErrCode, ErrMsg]), CDMSE);
      Exit;
    end;

    cxCustView.DataController.SetRecordCount(0); // Record 초기화.

    xdom := ComsDomDocument.Create;
    try
      xdom.loadXML(XmlData);

      if GetXmlRecordCount(XmlData) > 0 then
      begin
        lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
        ls_Rcrd := TStringList.Create;
        cxCustView.BeginUpdate; // 데이터 삽입 필수.
        try
          for I := 0 to lst_Result.length - 1 do
          begin
            if Trim(lst_Result.item[I].attributes.getNamedItem('Value').Text) = '' then Continue;

            GetTextSeperationEx2('│', lst_Result.item[I].attributes.getNamedItem('Value').Text, ls_Rcrd);
            Application.ProcessMessages;

            iRow := cxCustView.DataController.AppendRecord; // 1 Record 추가
            cxCustView.DataController.Values[iRow, 0] := ls_Rcrd[0];
            // 고객일련번호
            cxCustView.DataController.Values[iRow, 1] := ls_Rcrd[1]; // 고객명
            cxCustView.DataController.Values[iRow, 2] := ls_Rcrd[2];
            // 전화번호
            if Trim(ls_Rcrd[3]) <> '' then
            begin
              idx := GT_BUBIN_INFO.cbcode.IndexOf(Trim(ls_Rcrd[3]) + ',' + sBRNO);
              if idx = -1 then
              begin
                // 법인코드 불러오기 실패
              end else
              begin
                cxCustView.DataController.Values[iRow, 3] := Trim(GT_BUBIN_INFO.cbCorpNm[idx]); // 법인명
                cxCustView.DataController.Values[iRow, 4] := Trim(GT_BUBIN_INFO.cbDeptNm[idx]); // 법인부서명
              end;
            end else
            begin
              cxCustView.DataController.Values[iRow, 3] := ''; // 법인명
              cxCustView.DataController.Values[iRow, 4] := ''; // 법인부서명
            end;
            cxCustView.DataController.Values[iRow, 5] := ls_Rcrd[3]; // 법인코드
            cxCustView.DataController.Values[iRow, 6] := ls_Rcrd[4]; // 상담메모
            cxCustView.DataController.Values[iRow, 7] := ls_Rcrd[5]; // 기사용메모
            cxCustView.DataController.Values[iRow, 8] := ls_Rcrd[6]; // 고객구분
            cxCustView.DataController.Values[iRow, 9] := ls_Rcrd[7]; // 고객등급
            cxCustView.DataController.Values[iRow, 10] := ls_Rcrd[8]; // 완료건수
            cxCustView.DataController.Values[iRow, 11] := ls_Rcrd[9]; // 취소건수
            cxCustView.DataController.Values[iRow, 12] := ls_Rcrd[10]; // 현재마일리지
            cxCustView.DataController.Values[iRow, 13] := ls_Rcrd[11]; // 마일리지지급횟수
            if Trim(ls_Rcrd[12]) <> '' then
            begin
              cxCustView.DataController.Values[iRow, 14] := Copy(ls_Rcrd[12], 1, Pos('/', ls_Rcrd[12]) - 1); // 마일리지지급단위
              cxCustView.DataController.Values[iRow, 15] := Copy(ls_Rcrd[12], Pos('/', ls_Rcrd[12]) + 1, Length(ls_Rcrd[12])); // 지금상품명
            end else
            begin
              cxCustView.DataController.Values[iRow, 14] := ''; // 마일리지지급단위
              cxCustView.DataController.Values[iRow, 15] := ''; // 지금상품명
            end;
            cxCustView.DataController.Values[iRow, 16] := ls_Rcrd[13]; // 출발지명
            cxCustView.DataController.Values[iRow, 17] := ls_Rcrd[14]; // 출1
            cxCustView.DataController.Values[iRow, 18] := ls_Rcrd[15]; // 출2
            cxCustView.DataController.Values[iRow, 19] := ls_Rcrd[16]; // 출3
            cxCustView.DataController.Values[iRow, 20] := ls_Rcrd[17]; // 출X
            cxCustView.DataController.Values[iRow, 21] := ls_Rcrd[18]; // 출Y
            cxCustView.DataController.Values[iRow, 22] := ls_Rcrd[19]; // 도착지명
            cxCustView.DataController.Values[iRow, 23] := ls_Rcrd[20]; // 도1
            cxCustView.DataController.Values[iRow, 24] := ls_Rcrd[21]; // 도2
            cxCustView.DataController.Values[iRow, 25] := ls_Rcrd[22]; // 도3
            cxCustView.DataController.Values[iRow, 26] := ls_Rcrd[23]; // 도X
            cxCustView.DataController.Values[iRow, 27] := ls_Rcrd[24]; // 도Y
            cxCustView.DataController.Values[iRow, 28] := ls_Rcrd[25]; // SMS수신거부
          end;
          cxCustView.EndUpdate; // 데이터 삽입 필수.
        finally
          FreeAndNil(ls_Rcrd);
        end;
      end;
    finally
      xdom := nil;
    end;
    cxGBSearch.BringToFront;
    cxGBSearch.Visible := True;
  except
    on E: Exception do
    begin
      ErrMsg := 'JON01N[Proc_CustSearchRlt] Error:' + E.Message;
      GMessagebox(ErrMsg, CDMSE);
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.cxtCuTelMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('JON01N.cxtCuTelMouseDown');
  pFormActive;
  grpBrSelect.Visible := False;
	curRate.SelectAll;
end;

procedure TFrm_JON01N.cxtEndYvalPropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('JON01N.cxtEndYvalPropertiesChange');
  tmrXYChange.Tag := 1;   // 도착지
  tmrXYChange.Enabled := True;
end;

procedure TFrm_JON01N.cxTSearchMainTelExit(Sender: TObject);
begin
  pSetSearchMainTel(False);
  cboBranchPropertiesChange(cboBranch);
end;

procedure TFrm_JON01N.cxTSearchMainTelKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
Var i : Integer;
begin
  SetDebugeWrite('JON01N.cxTSearchMainTelKeyDown');
  if ( GB_365System ) And (Pos('수정', Self.Caption) > 0 ) then Exit;
  if Key = VK_BACK then
  begin
    if (Length(cxTSearchMainTel.Text) <= 1) then
    begin
      lst_BRList.Items := cboBranch.Properties.Items;
      searchBRlist.Clear;
      for i := 0 to lst_BRList.Items.Count - 1 do
        searchBRlist.Add(IntToStr(i));

      if lst_BRList.Items.Count > 30 then
        lst_BRList.Height := 500
      else
        lst_BRList.Height := lst_BRList.Items.Count * 25;
		end;
  end else
  if Key = VK_DOWN then
	begin
    if lst_BRList.Visible then
    begin
      if lst_BRLIst.ItemIndex < 0 then lst_BRLIst.ItemIndex := 0;
      if lst_BRList.Visible then lst_BRList.SetFocus;
    end;
  end else
	if Key = VK_RETURN then
  begin
		if cboBranch.ItemIndex = StrToIntDef(searchBRlist[0], 0) then
		begin
			//이미 선택돤 인덱스이기 때문에 갱신이 안되는 오류개선하기 위해서 사용 2018.09.11 KHS
			cboBranch.Tag := 20;
			cboBranch.ItemIndex := -1;
			cboBranch.Tag := 0;

			cboBranch.ItemIndex := StrToIntDef(searchBRlist[0], 0);
			LoadCustLevel;
			LoadPayMethod;
		end else
			cboBranch.ItemIndex := StrToIntDef(searchBRlist[0], 0);

		lst_BRList.Visible := False;
		cxtCuTel.SetFocus;
	end;
end;

procedure TFrm_JON01N.cxTSearchMainTelKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	SetDebugeWrite('JON01N.cxTSearchMainTelKeyUp');
  if ( GB_365System ) And (Pos('수정', Self.Caption) > 0 ) then Exit;
//	if (key <> 229) then      //  20191224 한컴입력기 에서는 모든 한글이 229로 넘어옴 그래서 삭제 KHS
	begin
  	if Trim(cxTSearchMainTel.Text) = '' then
    begin
      cxTSearchMainTel.SetFocus;
      Exit;
    end;

    if ( StrToIntDef(Copy(cxTSearchMainTel.Text, 1, 1), -1) In [0..9] ) then
    begin
      // 대표번호로 조회..
			if not Func_KeyNumberList_Search then Exit;
		end else
    begin
      if Length(Trim(cxTSearchMainTel.Text)) >= 1 then
      begin
        // 지사명으로 조회..  CDS. 080818.
  			if not proc_BrNameList_Search then Exit;
      end;
    end;
  end;
end;

procedure TFrm_JON01N.cxTSearchMainTelMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
Var i : Integer;
begin
	SetDebugeWrite('JON01N.cxTSearchMainTelMouseDown');
  if ( GB_365System ) And (Pos('수정', Self.Caption) > 0 ) then Exit;
  pFormActive;
  pSetSearchMainTel(True);

  if Trim(cxTSearchMainTel.Text) = '' then
  begin
    lst_BRList.Items := cboBranch.Properties.Items;
    searchBRlist.Clear;
    for i := 0 to lst_BRList.Items.Count - 1 do
			searchBRlist.Add(IntToStr(i));
  end;
  if lst_BRList.Items.Count > 30 then
    lst_BRList.Height := 500
  else
    lst_BRList.Height := lst_BRList.Items.Count * 25;

  lst_BRList.BringToFront;
  lst_BRList.Visible := True;
end;

procedure TFrm_JON01N.cxtStartYvalPropertiesChange(Sender: TObject);
begin
	SetDebugeWrite('JON01N.cxtStartYvalPropertiesChange');
	tmrXYChange.Tag := 0;   // 출발지
  tmrXYChange.Enabled := True;
end;

procedure TFrm_JON01N.cxTxtBrNameCaptionMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  try
    if Self.Tag < 0 then Exit;
    pFormActive;
    if Frm_Main.JON01MNG[Self.Tag].bNoChangeBr then Exit;
    if ( GB_365System ) And (Pos('수정', Self.Caption) > 0 ) then Exit;

    grpBrSelect.Left := 320;
    grpBrSelect.Top  := 0;
    grpBrSelect.BringToFront;
    grpBrSelect.Visible := True;
  except
  end;
end;

procedure TFrm_JON01N.cxViaMinus1Click(Sender: TObject);
begin
  BtnViaMinus1Click(Sender);
end;

function TFrm_JON01N.Func_KeyNumberList_Search: Boolean;
var
	i, iOldIdx: integer;
	bRlt: boolean;
	sKey: string;
begin
	SetDebugeWrite('JON01N.Func_KeyNumberList_Search');
  try
		bRlt := False;
    searchBRlist.Clear;

    lst_BRList.Items.Clear;

    sKey := RemoveAll(cxTSearchMainTel.Text, '-'); // 조회할 지사명 읽기.

    iOldIdx := cboBranch.ItemIndex;
    cboBranch.Tag := 20;
    lst_BRList.Items.BeginUpdate;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    for i := 0 to cboBranch.Properties.Items.Count - 1 do
    begin
      if (Pos(sKey, cboBranch.Properties.Items.Strings[i]) > 0) then
      begin // 지사명  찾기..
        lst_BRList.Items.Add(cboBranch.Properties.Items.Strings[i]);
        searchBRlist.Add(IntToStr(i));
        bRlt := True;
      end;
    end;
    lst_BRList.Items.EndUpdate;
    cboBranch.ItemIndex := iOldIdx;
    if searchBRlist.count > 0 then
      cboBranch.ItemIndex := StrToIntDef(searchBRlist[0], 0);

    lst_BRList.Visible := True;
    if lst_BRList.Items.Count > 30 then
      lst_BRList.Height := 500
    else
      lst_BRList.Height := lst_BRList.Items.Count * 25;
    cboBranch.Tag := 0;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    Result := bRlt;
  Except
    on e: exception do
    begin
      Log('Func_KeyNumberList_Search Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Func_KeyNumberList_Search Error :' + E.Message);
    end;
  end;
end;

function TFrm_JON01N.proc_BrNameList_Search: boolean;
var
	i, iOldIdx: integer;
	bRlt: boolean;
	sKey: string;
begin
  SetDebugeWrite('JON01N.proc_BrNameList_Search');
  try
    bRlt := False;
    lst_BRList.Items.Clear;
    searchBRlist.Clear;
    sKey := cxTSearchMainTel.text; // 조회할 지사명 읽기.

    iOldIdx := cboBranch.ItemIndex;  // 현재 index 값을 저장.[못찾을 경우 현재 선택지사로 되돌려줌]
    cboBranch.Tag := 20;
    lst_BRList.Items.BeginUpdate;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    for i := 0 to cboBranch.Properties.Items.Count - 1 do
    begin
      if (Pos(sKey, cboBranch.Properties.Items.Strings[i]) > 0) then
      begin // 지사명  찾기..
        lst_BRList.Items.Add(cboBranch.Properties.Items.Strings[i]);
				searchBRlist.Add(IntToStr(i));
        bRlt := True;
      end;
    end;
    lst_BRList.Items.EndUpdate;
    cboBranch.ItemIndex := iOldIdx;
    lst_BRList.Visible := True;
    if lst_BRList.Items.Count > 30 then
      lst_BRList.Height := 500
    else
      lst_BRList.Height := lst_BRList.Items.Count * 25;
    cboBranch.Tag := 0;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    Result := bRlt;
  Except
    on e: exception do
    begin
      Log('proc_BrNameList_Search Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_BrNameList_Search Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.LoadPayMethod;
var sBrNo, sHdNo : string;
begin
  SetDebugeWrite('JON01N.LoadPayMethod');
  try
    cbbPayMethod.Properties.Items.Clear;

    sHDNO := Proc_HDNOSearch;
		sBrNo := Proc_BRNOSearch;

  	if (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (GT_SEL_BRNO.HDNO = 'A100'))  then //부산연합하트2K 20140221 KHS
  	begin
  		cbbPayMethod.Properties.Items.Add(PAY_METHOD_MONEY);
			cbbPayMethod.Properties.Items.Add(PAY_METHOD_BUSAN);

  		if gsJON01AfterMoneyYN <> 'FALSE' then
  		begin
  			cbbPayMethod.Properties.Items.Add(PAY_METHOD_POST_NML);
  			cbbPayMethod.Properties.Items.Add(PAY_METHOD_POST_MILE);
  		end;

  		if gsJON01CreditMoneyYN <> 'FALSE' then
  			cbbPayMethod.Properties.Items.Add(PAY_METHOD_TRUST);

			if ( IsCardUseBranch(sBrNo) ) Or ( GT_SPOT_CARD_CFG_YN ) then
			begin
				// 접수창에서 결제구분(현장카드) 사용여부 설정. 20210128 KHS
				if gsJON01SelfCard <> 'FALSE' then
    			cbbPayMethod.Properties.Items.Add(PAY_METHOD_CARD);
      end;

  		// KCP 카드 결제 지사 사용여부 체크. 2011-10-19.
			if (IsCardUseBranch_KCP(sBrNo) = '03') or
				 (IsCardUseBranch_KCP(sBrNo) = '06') then
      begin
				cbbPayMethod.Properties.Items.Add(PAY_METHOD_CARD_KCP);
        curCardCharge.Properties.ReadOnly := False;
      end else
      begin
        curCardCharge.Properties.ReadOnly := True;
      end;

			cbbPayMethod.Properties.Items.Add(PAY_METHOD_BUSAN2K);
  		cbbPayMethod.Properties.Items.Add(PAY_METHOD_BUSAN3K);
  	end	else
  	begin
      cbbPayMethod.Properties.Items.Add(PAY_METHOD_MONEY);
      if gsJON01AfterMoneyYN <> 'FALSE' then
        cbbPayMethod.Properties.Items.Add(PAY_METHOD_POST_NML);

		{  if (GT_SEL_BRNO.HDNO = 'A1531') then
			begin
				//코리아드라이브 외상, 카드 결제수단 제외 2015.07.27 KHS(김계명과장 요청)
			end else }   //예외처리 제거 20210721 KHS 팀장님 지시
			begin
        if gsJON01CreditMoneyYN <> 'FALSE' then
          cbbPayMethod.Properties.Items.Add(PAY_METHOD_TRUST);

				if ( IsCardUseBranch(sBrNo) ) Or ( GT_SPOT_CARD_CFG_YN ) then
				begin
					// 접수창에서 결제구분(현장카드) 사용여부 설정. 20210128 KHS
					if gsJON01SelfCard <> 'FALSE' then
  					cbbPayMethod.Properties.Items.Add(PAY_METHOD_CARD);
				end;
      end;

      if gsJON01AfterMoneyYN <> 'FALSE' then
        cbbPayMethod.Properties.Items.Add(PAY_METHOD_POST_MILE);

      // KCP 카드 결제 지사 사용여부 체크. 2011-10-19.
			if (IsCardUseBranch_KCP(sBrNo) = '03') or
				 (IsCardUseBranch_KCP(sBrNo) = '06') then
			begin
				cbbPayMethod.Properties.Items.Add(PAY_METHOD_CARD_KCP);
        curCardCharge.Properties.ReadOnly := False;
      end else
      begin
        curCardCharge.Properties.ReadOnly := True;
      end;
		end;
  	cbbPayMethod.Properties.Items.Add(PAY_METHOD_MULTI);

    if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

    cbbPaymethod.ItemIndex := 0;

		if (IsCardUseBranch_KCP(sBrNo) = '03') or
			 (IsCardUseBranch_KCP(sBrNo) = '06') then
		begin
			cbCardSanction.Hint := _PAY_CASH;
      cbCardSanction.OptionsImage.ImageIndex := 0;
  		cbCardSanction.Enabled := True;
  	end else
  	begin
  		cbCardSanction.Enabled := False;
  		cbCardSanction.Hint := _PAY_CARD;
      cbCardSanction.OptionsImage.ImageIndex := 2;
    end;

		//부산오천콜 요청사항. 특정지사 오더금액 90만원까지 늘림
		if (GS_PRJ_AREA = 'O') and ((sBrNo = 'P981') or (sBrNo = 'B100')) then
			curRate.Properties.MaxValue := 900000
		else
		if (GS_PRJ_AREA = 'S') and (sBrNo = 'M628') then     //정승훈팀장님 요청 20181025 KHS
    	curRate.Properties.MaxValue := 999000
    else
    if (GS_PRJ_AREA = 'S') and ((sBrNo = 'L603') or (sBrNo = 'B100')) then  //20200508 KHS 정승훈팀장님 요청 부자대리
      curRate.Properties.MaxValue := 5000000
		else
    if (GS_PRJ_AREA = 'S') and (sBrNo = 'S76') then    //S76-드라이브매니저 S76 20201103 KHS 정승훈팀장님 요청
      curRate.Properties.MaxValue := 3000000
    else
    if (GS_PRJ_AREA = 'S') and (sHDNO = 'A1531') then    //A1531 코리아드라이브 20210719 LYB 최도순팀장님 요청
      curRate.Properties.MaxValue := 2000000
    else
      curRate.Properties.MaxValue := 700000;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.LoadCustLevel;
begin
  SetDebugeWrite('JON01N.LoadCustLevel');
  GetCustGroup(Proc_MainKeyNumberSearch, CustGroup);
  SetCustLevelData;
end;

procedure TFrm_JON01N.SetCustLevelData;
var
	I: Integer;
	sTemp : string;
begin
  SetDebugeWrite('JON01N.SetCustLevelData');
  try
    cboCuLevel.Tag := 1;
    cboCuLevel.Properties.Items.Clear;
  	SCboLevelSeq.Clear;
    for I := 0 to Length(CustGroup.LevelInfo) - 1 do
    begin
      cboCuLevel.Properties.Items.Add(CustGroup.LevelInfo[I].LevelName);
			SCboLevelSeq.Add(CustGroup.LevelInfo[I].LevelSeq);
    end;
    DefaultCustLevel;
    cboCuLevel.Tag := 0;
	except
		sTemp := 'SetCustLevelData';
		Log('고객등급 : '+ sTemp, LOGDATAPATHFILE);
	end;
end;

procedure TFrm_JON01N.DefaultCustLevel;
begin
  SetDebugeWrite('JON01N.DefaultCustLevel');
  SetCustLevelSeq(False, CustGroup.Default.LevelSeq);
end;

procedure TFrm_JON01N.dtpResvDateJPropertiesEditValueChanged(Sender: TObject);
begin
  if dtpResvDate.Tag = 1 then Exit;

  CbSecondPropertiesChange(CbSecond);
  CheckResvDateTime(True);
end;

procedure TFrm_JON01N.dtpResvTimeJPropertiesEditValueChanged(Sender: TObject);
begin
  if dtpResvTime.Tag = 1 then Exit;

  CbSecondPropertiesChange(CbSecond);
  CheckResvDateTime(True);
end;

function TFrm_JON01N.GetCustLevelSeq: string;
var sTemp : string;
begin
	SetDebugeWrite('JON01N.GetCustLevelSeq');
	Try
		Result := '';
		if cboCuLevel.ItemIndex >= 0 then
			Result := SCboLevelSeq[cboCuLevel.ItemIndex];
	except
		sTemp := 'GetCustLevelSeq';
		Log('고객등급 : '+ sTemp, LOGDATAPATHFILE);
	end;
end;

procedure TFrm_JON01N.SetCustLevelSeq(bCheck : Boolean; ASeq : string);
var
	I: Integer;
	sTemp : string;
begin
  SetDebugeWrite('JON01N.SetCustLevelSeq');
  if cboCuLevel.Properties.Items.Count = 0 then Exit;

	try
    for I := 0 to Length(CustGroup.LevelInfo) - 1 do
    begin
      if CustGroup.LevelInfo[I].LevelSeq = ASeq then
      begin
        if bCheck then bCheck := cboCuLevel.ItemIndex = I;
        cboCuLevel.ItemIndex := I;
        Break;
      end;
    end;

    if ( bCheck ) And ( cboCuLevel.Style.Font.Color = GS_BasicColor ) then
        cboCuLevelPropertiesChange(cboCuLevel);
	except
		sTemp := 'SetCustLevelSeq';
		Log('고객등급 : '+ sTemp, LOGDATAPATHFILE);
	end;
end;

procedure TFrm_JON01N.pSetSearchMainTel( bView : Boolean );
begin
//  cboBrOnly.Left := 322;
//  cboBrOnly.Width := 67;
  if bView then
  begin
    cxTSearchMainTel.Left := 322;
    cxTSearchMainTel.Width := 89;

    cxTxtBrNameCaption.Left := 410;
    cxTxtBrNameCaption.Width := 172;
  end else
  begin
    if Trim(cxTSearchMainTel.Text) = '' then
    begin
      cxTSearchMainTel.Left := 322;
      cxTSearchMainTel.Width := 52;

      cxTxtBrNameCaption.Left := 373;
      cxTxtBrNameCaption.Width := 209;
    end;
  end;
end;

procedure TFrm_JON01N.pSLoadView;
Var IE : Variant;
    sURL : String;
    Value : Cardinal;
begin
  if cxtStartXval.Text <> '' then
  begin
    if RVHandle > 0 then
    begin
      PostMessage (RVHandle, WM_CLOSE, 0, 0);
      RVHandle := 0;
    end;

    try
      DAUMROADVIEW_URL := 'http://203.251.202.13:88/map/RoadView.html?x=%s&y=%s';
      sURL := Format(DAUMROADVIEW_URL, [Frm_JON30.SetWGS84(cxtStartXval.Text), Frm_JON30.SetWGS84(cxtStartYval.Text)]);

      IE := CreateOleObject('InternetExplorer.Application');

      IE.Width := 780;
      IE.Height := 580;
      IE.AddressBar := True;
      IE.Navigate( sURL );

      while IE.ReadyState <> READYSTATE_COMPLETE do
        Application.ProcessMessages;

      IE.MenuBar := False;
      IE.ToolBar := False;
      IE.StatusBar := False;

      if Frm_Main.JON01MNG[Self.Tag].Dock then
      begin
        IE.Top := ((Frm_Jon00.Top * 2 + Self.Height) - IE.Height)/2;
        IE.Left := Frm_Jon00.Left - IE.Width;
      end else
      begin
        IE.Top := ((Self.Top * 2 + Self.Height) - IE.Height)/2;
        IE.Left := Self.Left - IE.Width;
      end;

      Value := IE.Hwnd;
      RegSetValue(HKEY_CURRENT_USER, 'HKSFA\IE_HWND', REG_DWORD, @Value, SizeOf(Cardinal));
      IE.Visible := true;
      SetForegroundWindow(Value);
      IE := Unassigned;
    except on E:Exception do
      begin
        ShowMessage('로드뷰 오류 : ' + E.Message);
      end;
    end;
  end;
end;

procedure TFrm_JON01N.pELoadView;
Var IE : Variant;
    sURL : String;
    Value : Cardinal;
begin
  if cxtEndXval.Text <> '' then
  begin
    if RVHandle > 0 then
    begin
      PostMessage (RVHandle, WM_CLOSE, 0, 0);
      RVHandle := 0;
    end;

    try
      DAUMROADVIEW_URL := 'http://203.251.202.13:88/map/RoadView.html?x=%s&y=%s';
      sURL := Format(DAUMROADVIEW_URL, [Frm_JON30.SetWGS84(cxtEndXval.Text), Frm_JON30.SetWGS84(cxtEndYval.Text)]);

      IE := CreateOleObject('InternetExplorer.Application');

      IE.Width := 780;
      IE.Height := 580;
      IE.AddressBar := True;
      IE.Navigate( sURL );

      while IE.ReadyState <> READYSTATE_COMPLETE do
        Application.ProcessMessages;

      IE.MenuBar := False;
      IE.ToolBar := False;
      IE.StatusBar := False;

      if Frm_Main.JON01MNG[Self.Tag].Dock then
      begin
        IE.Top := ((Frm_Jon00.Top * 2 + Self.Height) - IE.Height)/2;
        IE.Left := Frm_Jon00.Left - IE.Width;
      end else
      begin
        IE.Top := ((Self.Top * 2 + Self.Height) - IE.Height)/2;
        IE.Left := Self.Left - IE.Width;
      end;

      Value := IE.Hwnd;
      RegSetValue(HKEY_CURRENT_USER, 'HKSFA\IE_HWND', REG_DWORD, @Value, SizeOf(Cardinal));
      IE.Visible := true;
      SetForegroundWindow(Value);
      IE := Unassigned;
    except on E:Exception do
      begin
        ShowMessage('test' + E.Message);
      end;
    end;
  end;
end;

procedure TFrm_JON01N.edtCuNameEnter(Sender: TObject);
begin
  lblCuNameFlag.Visible := False
end;

procedure TFrm_JON01N.edtCuNameExit(Sender: TObject);
begin
  lblCuNameFlag.Visible := (edtCuName.Text = ''); // 입력 잔상.
end;

procedure TFrm_JON01N.edtCuNameFocusChanged(Sender: TObject);
begin
  lblCuNameFlag.Visible := ( Not edtCuName.Focused ) And (edtCuName.Text = '');
end;

procedure TFrm_JON01N.edtCuNameKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  TcxTextEdit(Sender).Text := Enc_Control(TcxTextEdit(Sender).Text);
	pCompareCustInfo;
end;

procedure TFrm_JON01N.edtCuNamePropertiesChange(Sender: TObject);
begin
  if ( Not edtCuName.Focused ) then
    lblCuNameFlag.Visible := (edtCuName.Text = ''); // 입력 잔상.
end;

procedure TFrm_JON01N.edtMileMemoKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if key = vk_Return then btnMileOut.SetFocus;
end;

procedure TFrm_JON01N.edtPostPayEnter(Sender: TObject);
begin
  LblPostPay.Visible := False;
end;

procedure TFrm_JON01N.edtPostPayExit(Sender: TObject);
begin
	SetDebugeWrite('JON01N.edtPostPayExit');
  LblPostPay.Visible := (edtPostPay.Value = 0); // 기사송금 입력 잔상.
//-  edtPostPay.Refresh;

  if edtPostPay.Value > curRate.Value then
  begin
    if (cbbPayMethod.Text <> PAY_METHOD_BUSAN) and (cbbPayMethod.Text <> PAY_METHOD_BUSAN2K) And
       (cbbPayMethod.Text <> PAY_METHOD_BUSAN3K) then
      edtPostPay.Value := curRate.Value;
  end;

  if edtPostPay.Value = 0 then
      PostTime := POST_TIME_NOPAY;
end;

procedure TFrm_JON01N.edtPostPayFocusChanged(Sender: TObject);
begin
  LblPostPay.Visible := ( Not edtPostPay.Focused ) And (edtPostPay.Value = 0);
end;

procedure TFrm_JON01N.edtPostPayKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  SetDebugeWrite('JON01N.edtPostPayKeyDown');
  if Ord(Key) = VK_RETURN then
  begin
		if (edtPostPay.Value > 0) and (edtPostPay.Value < 1000) then
		begin
			edtPostPay.Value := edtPostPay.Value * 1000;
    end;

    if meoBigo.Visible = True then
      meoBigo.SetFocus
    else
      meoBigo2.SetFocus;
  end;
end;

procedure TFrm_JON01N.edtPostPayKeyPress(Sender: TObject; var Key: Char);
begin
	if (Key = '-') or (Key = 'e') or (Key = 'E') then
		Key := #0;
end;

procedure TFrm_JON01N.edtPostPayPropertiesChange(Sender: TObject);
begin
	SetDebugeWrite('JON01N.edtPostPayPropertiesChange');
  if ( Not edtPostPay.Focused ) then
  begin
    LblPostPay.Visible := (edtPostPay.Value = 0); // 기사송금 입력 잔상.
  end;

	AppendPostDesc;
end;

procedure TFrm_JON01N.edtWkFAgeKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if key = VK_RETURN then edtWkTAge.SetFocus;
end;

procedure TFrm_JON01N.edtWkTAgeKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if key = VK_RETURN then btnWkAgeClose.Click;
end;

procedure TFrm_JON01N.edt_CardMemoEnter(Sender: TObject);
begin
  cxLCuCCMemoFlg1.Visible := False;
end;

procedure TFrm_JON01N.edt_CardMemoExit(Sender: TObject);
begin
  cxLCuCCMemoFlg1.Visible := (edt_CardMemo.Text = '') // 기사메모 입력 잔상.
end;

procedure TFrm_JON01N.edt_CardMemoFocusChanged(Sender: TObject);
begin
  cxLCuCCMemoFlg1.Visible := ( Not edt_CardMemo.Focused ) And (edt_CardMemo.Text = '');
end;

procedure TFrm_JON01N.edt_CardMemoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if fCheckMaxLength(edt_CardMemo, 300) then Key := 0;
  TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);
  SetPnlCustMemoSize(Sender);
	pCompareCustInfo;
end;

procedure TFrm_JON01N.edt_CardMemoPropertiesChange(Sender: TObject);
begin
  if ( Not edt_CardMemo.Focused ) then
    cxLCuCCMemoFlg1.Visible := (edt_CardMemo.Text = ''); // 기사메모 입력 잔상.

  if grpTitle.Tag = 0 then SetPnlCustMemoSize(Sender);
end;

function TFrm_JON01N.fBubinLimitCheck: Boolean;
Var mRate, mCharge : Integer;
begin
  Result := True;
  if (Not gbLimitOverYn) And
     ((cbbPayMethod.Text = PAY_METHOD_POST_NML) Or             // 후불 : 요금
      (cbbPayMethod.Text = PAY_METHOD_MULTI   )) then          // 복합 : 후불금액   으로 체크
  begin
    if (cbbPayMethod.Text = PAY_METHOD_POST_NML) then mRate := (curRate.Value + cxCurRevisionRate.Value) else
    if (cbbPayMethod.Text = PAY_METHOD_MULTI   ) then mRate := StrToIntDef(RemoveComma(curCbCharge.Text), 0) + StrToIntDef(RemoveComma(cxCurRevisionRate.Text), 0);

    if (Pos('수정', Self.Caption) > 0 ) then
    begin
      mCharge := mRate - gCbCharge_Update;
      if ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) > 0 ) And  // 금액 설정시에
         ( mCharge > StrToIntDef(RemoveComma(lblRemainCharge.Caption), 0) ) then
      begin
        GMessagebox(edtCuName.Text + '고객님은 법인개인이용한도 후불금액을 초과하여 후불로 접수할수 없습니다. ', CDMSI);
        Result := False;
      end;

      if ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) > 0 ) And // 금액 설정시에
         ( mCharge > StrToIntDef(RemoveComma(lblDRemainCharge.Caption), 0) ) then
      begin
        GMessagebox(edtCuName.Text + '고객님은 법인부서이용한도 후불금액을 초과하여 후불로 접수할수 없습니다. ', CDMSI);
        Result := False;
      end;
    end else
    begin
      if ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) > 0 ) And                 // 한도금액을 설정했을경우
         ( mRate > StrToIntDef(RemoveComma(lblRemainCharge.Caption), 0) ) then
      begin
        GMessagebox(edtCuName.Text + '고객님은 법인개인이용한도 후불금액을 초과하여 후불로 접수할수 없습니다. ', CDMSI);
        Result := False;
        Exit;
      end;

      if ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) > 0 ) And                    // 이용횟수를 설정했을경우
         ( StrToIntDef(RemoveComma(lblRemainCnt.Caption), 0) = 0 ) And ( mRate > 0 ) then
      begin
        GMessagebox(edtCuName.Text + '고객님은 법인개인이용한도 이용횟수를 초과하여 후불로 접수할수 없습니다.', CDMSI);
        Result := False;
      end;

      if ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) > 0 ) And                 // 한도금액을 설정했을경우
         ( mRate > StrToIntDef(RemoveComma(lblDRemainCharge.Caption), 0) ) then
      begin
        GMessagebox(edtCuName.Text + '고객님은 법인부서이용한도 후불금액을 초과하여 후불로 접수할수 없습니다. ', CDMSI);
        Result := False;
        Exit;
      end;

      if ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) > 0 ) And                    // 이용횟수를 설정했을경우
         ( StrToIntDef(RemoveComma(lblDRemainCnt.Caption), 0) = 0 ) And ( mRate > 0 ) then
      begin
        GMessagebox(edtCuName.Text + '고객님은 법인부서이용한도 이용횟수를 초과하여 후불로 접수할수 없습니다.', CDMSI);
        Result := False;
      end;
    end;
  end;
end;

procedure TFrm_JON01N.FormActivate(Sender: TObject);
Var iSel : Integer;
begin
	SetDebugeWrite('JON01N.FormActivate');
  try
    if Not Frm_Main.JON01MNG[Self.Tag].Dock then
    begin
			cxLblActive.Color := GS_ActiveColor;
      cxLblActive.Visible := True;
    end;

		GS_JON01_LASTACTIVE := Self.Tag;      //POI창이 뜬 본체를 확인하기 위한 선언
		if GS_JON01_LASTACTIVE <> Frm_JON30.Tag then   //POI창이 뜬 본체가 아니면 검색결과 클리어 천안로그 20191126 KHS
    begin
      Frm_JON30.AdvStringGrid3.Height := 64;
      Frm_JON30.AdvStringGrid6.Height := 64;
      Frm_JON30.AdvStringGrid9.Height := 64;

      Frm_JON30.BtnLClose1Exec;
      Frm_JON30.AdvStringGrid1L.Visible := True;
      Frm_JON30.BtnLClose1.Visible := True;

      Frm_JON30.BtnLClose2Exec;
      Frm_JON30.AdvStringGrid5L.Visible := True;
      Frm_JON30.BtnLClose2.Visible := True;

      Frm_JON30.BtnLClose3Exec;
      Frm_JON30.AdvStringGrid8L.Visible := True;
      Frm_JON30.BtnLClose3.Visible := True;

      Frm_JON30.Grid_Init('meoStartArea',1);
      Frm_JON30.Grid_Init('meoStartArea',2);
      Frm_JON30.Grid_Init('meoStartArea',3);
      Frm_JON30.Grid_Init('meoStartArea',4);
      Frm_JON30.Grid_Init('meoEndArea',1);
      Frm_JON30.Grid_Init('meoEndArea',2);
      Frm_JON30.Grid_Init('meoEndArea',3);
      Frm_JON30.Grid_Init('meoEndArea',4);
      Frm_JON30.Grid_Init('meoViaArea',1);
      Frm_JON30.Grid_Init('meoViaArea',2);
      Frm_JON30.Grid_Init('meoViaArea',3);
      Frm_JON30.Grid_Init('meoViaArea',4);
    end;

    if Not pJON01Dock.bUNDock then
    begin
      for iSel := 0 to Frm_Main.cxPageControl1.PageCount - 1 do
      begin
        if Frm_Main.cxPageControl1.Pages[iSel].Tag = Jon03Tag then
        begin
          Frm_Main.cxPageControl1.ActivePageIndex := iSel;
        end;
			end;
    end;

		//다른 폼에서 AI요금표 가져오기
//		gsKMAiChargeStr := '';
		if GT_Kakao_KMAiRate then
		begin

			if Assigned(frm_JON021) then
			begin
				if GS_JON01_LASTACTIVE <> Frm_JON021.Tag then
				begin
					gsKMAiChargeStr := '';
//					meoBigo.SetFocus;
//					curRate.SetFocus;
				end;
			end;
		end; 
		
    pJON011Show;
    pJON05Show;

    //다른 접수창에 풍선도움말 제거
    Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
    Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);
    for iSel := 0 to JON_MAX_CNT - 1 do
    begin
      if Frm_Main.JON01MNG[iSel].Use then
      begin
        if Assigned(Frm_Main.Frm_JON01N[iSel]) then
        begin
          Frm_Main.Frm_JON01N[iSel].img_SpeechBubble.Visible := False;
        end;
      end;
    end;

    if (Frm_Main.Frm_JON17[self.Tag].Showing) and (Frm_Main.JON17MNG[self.Tag].CreateYN) and (chkCompulWor.Checked) then
    begin
      SetWindowPos(Frm_Main.Frm_JON17[self.Tag].handle, HWND_TOPMOST
                 , Frm_Main.Frm_JON17[self.Tag].Left , Frm_Main.Frm_JON17[self.Tag].Top
                 , Frm_Main.Frm_JON17[self.Tag].Width, Frm_Main.Frm_JON17[self.Tag].Height, 0);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.pJON011Show;
Var iTop, iLeft : Integer;
    bLeft : Boolean;
begin
  try
    if Assigned(Frm_JON011) then
    begin
      Frm_JON011.Tag := Self.Tag;
      if ( Frm_JON011.Showing ) And ( gsCuTelHint <> '' ) then
      begin
        if ( Not GS_JON011_POSFIX ) then
        begin
          if Frm_Main.JON01MNG[Self.Tag].Dock then
          begin
            Frm_JON011.Left := Frm_Jon00.Left - (Frm_JON011.Width + 1);
            Frm_JON011.Top  := Frm_Jon00.Top - 40;
          end else
          begin
            Frm_JON011.Left := Self.Left - (Frm_JON011.Width + 1);
            Frm_JON011.Top  := Self.Top - 40;
          end;
        end else
        begin
          iTop  := GS_EnvFile.ReadInteger('AcceptWin', 'Jon011Top', 200);
          iLeft := GS_EnvFile.ReadInteger('AcceptWin', 'Jon011Left', 0);
          if GB_JON_FIXEDPIN then
          begin
            bLeft := GS_EnvFile.ReadBool('AcceptWin', 'Jon011Pos' , True);
            if bLeft then
            begin
              Frm_JON011.Left := Self.Left - (Frm_JON011.Width + 1);
              Frm_JON011.Top  := Self.Top + iTop;
            end else
            begin
              Frm_JON011.Left := Self.Left + iLeft;
              Frm_JON011.Top  := Self.Top + (Frm_JON011.Height + 1);
            end;
          end else
          begin
            iTop  := GS_EnvFile.ReadInteger('WinPos', 'Jon011Top', 200);
            iLeft := GS_EnvFile.ReadInteger('WinPos', 'Jon011Left', 0);

            Frm_JON011.Left := iLeft;
            Frm_JON011.Top  := iTop;
          end;
        end;
        Frm_JON011.lb_CuctName.Caption := edtCuName.Text;
        Frm_JON011.meoCuCCMemoS .Text := meoCuCCMemo.Text;
        Frm_JON011.meoCuWorMemoS.Text := meoCuWorMemo.Text;
        Frm_JON011.mmoCbMemoS.   Text := mmoCbMemo.Text;
        Frm_JON011.edt_CardMemo. Text := edt_CardMemo.Text;

        Frm_JON011.FormResize(Nil);

        Frm_JON011.bChkTime := True;
        if GS_JON01_GROUPMOVE then
          Frm_JON011.TmrChkTag.Enabled := True;
      end else
      begin
        if gsCuTelHint = '' then
        begin
          Frm_JON011.lb_CuctName.Caption := '';
          Frm_JON011.meoCuCCMemoS .Clear;
          Frm_JON011.meoCuWorMemoS.Clear;
          Frm_JON011.mmoCbMemoS.   Clear;
          Frm_JON011.edt_CardMemo. Clear;
        end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.pJON05Show;
Var iTop, iLeft : Integer;
    bLeft : Boolean;
begin
  try
    if Assigned(Frm_JON05) then
    begin
      Frm_JON05.Tag := Self.Tag;
      if ( Frm_JON05.Showing ) then
      begin
        if ( Not GS_JON05_POSFIX ) then
        begin
          if Frm_Main.JON01MNG[Self.Tag].Dock then
          begin
            Frm_JON05.Left := Frm_Jon00.Left + (Frm_JON00.Width + 1);
            Frm_JON05.Top  := Frm_Jon00.Top + 40;
          end else
          begin
            Frm_JON05.Left := Self.Left + (Self.Width + 1);
            Frm_JON05.Top  := Self.Top + 40;
          end;
        end else
        begin
          iTop  := GS_EnvFile.ReadInteger('AcceptWin', 'Jon05Top', 200);
          iLeft := GS_EnvFile.ReadInteger('AcceptWin', 'Jon05Left', 0);
          if GB_JON_FIXEDPIN then
          begin
            bLeft := GS_EnvFile.ReadBool('AcceptWin', 'Jon05Pos' , True);
            if bLeft then
            begin
              Frm_JON05.Left := Self.Left + (Self.Width + 1);
              Frm_JON05.Top  := Self.Top + iTop;
            end else
            begin
              Frm_JON05.Left := Self.Left + iLeft;
              Frm_JON05.Top  := Self.Top + (Frm_JON05.Height + 1);
            end;
          end else
          begin
            iTop  := GS_EnvFile.ReadInteger('WinPos', 'Jon05Top', 200);
            iLeft := GS_EnvFile.ReadInteger('WinPos', 'Jon05Left', 0);

            Frm_JON05.Left := iLeft;
            Frm_JON05.Top  := iTop;
          end;
        end;

        Frm_JON05.bChkTime := True;
        if GS_JON01_GROUPMOVE then
          Frm_JON05.TmrChkTag.Enabled := True;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := caFree;
end;

procedure TFrm_JON01N.FormCreate(Sender: TObject);
const
  TabInc: LongInt = 0;

Var sTitle: string;
    i, idx : Integer;
    ii: Integer;
begin
  SetDebugeWrite('JON01N.FormCreate');
  Application.ProcessMessages;

  try
    // 한글인 경우에 ImeName가 공백이 아니면 사용자PC에서 한글 키가 안먹힐때가 있음. ImeName을 공백으로 넣어주면 무조건 적용
		for ii := 0 to ComponentCount - 1 do
    begin
      if Components[ii] is TEdit then
				(Components[ii] as TEdit).ImeName := ''
			else
			if Components[ii] is TcxDateEdit then
			begin
				(Components[ii] as TcxDateEdit).Properties.DisplayFormat := 'yyyy/mm/dd';
				(Components[ii] as TcxDateEdit).Properties.EditFormat    := 'yyyy/mm/dd';
			end
			else
			if Components[ii] is TcxMemo then
			begin
				(Components[ii] as TcxMemo).Properties.ImeMode := imSHanguel;
			end;
    end;
  except
  end;

  try
    Proc_WTRCreate;

    Lbl_Charge.Caption := '';
    Lbl_Distance.Caption := '';

    gbRQAList.Left := 5;
    gbRQAList.Top := grpEndArea.Height + shpTop5.Height + 75;

  	RQAListView.DataController.SetRecordCount(0);
    for i := 0 to RQAListView.ColumnCount - 1 do
      RQAListView.Columns[i].DataBinding.ValueType := 'String';
    RQAListView.Columns[1].DataBinding.ValueType := 'Integer';

    grpModifyTitle.Top := shpTop2.Top-1;
    grpModifyTitle.Left := 5;
    grpModifyTitle.Width := 577;

    pnl_charge.Left := Shape2.Left; // 요금조회 조건 표기. 하단쪽..
    pnl_charge.Top := 147;
    pnl_charge.BringToFront;

    // 문의 후 복사
    btnCmdQuestionCopy.Visible := False;

    cbDriverChargeLocalValue.Left := 193;
    cbDriverChargeLocalValue.Top  := 54;

    if GS_JON_DRIVERCHARGELOCAL <> 'n' then
    begin
      cxDriverCharge.Left := 234;
      cxDriverCharge.Width := 48;
      cbDriverChargeLocalValue.Visible := True;
      idx := cbDriverChargeLocalValue.Properties.Items.IndexOf(GS_JON_DRIVERCHARGELOCAL);
      if idx >= 0 then
      begin
        cbDriverChargeLocalValue.ItemIndex := idx;
      end else
      begin
        GS_JON_DRIVERCHARGELOCAL := 'n';
        GS_EnvFile.WriteString('CHARGE', 'JON_DRIVERCHARGELOCAL', GS_JON_DRIVERCHARGELOCAL);
      end;
    end else
    begin
      cbDriverChargeLocalValue.Visible := False;
      cxDriverCharge.Left := 193;
      cxDriverCharge.Width := 89;
    end;

    grpMultiV.Left := 33;
    grpMultiV.Top  := 21;
    grpMultiV.BringToFront;

    grpWkJi.Left := edtPostPay.Left;
    grpWkJi.Top := 146;

    pnlCallingBoard.Top  := 0;
    pnlCallingBoard.Left := 6;

    loc_Ud_xdom := ComsDomDocument.Create; // 수정모드 전용 XML 전문 Pasing 변수.

  	SCboLevelSeq := TStringList.Create;
    slCboBranch  := TStringList.Create;

    pSetSearchMainTel(False);

    // 수정화면에서, 사용하는 오더정보를 보여준다.
    cxMeoOrderUpInfo.Text := '';

    cxGBSearch.Left := 5;
    cxGBSearch.Top := shpTop2.Top;
    cxGBSearch.Width := 570;
    cxGBSearch.Visible := False;

    lst_BRList.Left := 260;
    lst_BRList.Top := grpTop1.Top + 23;
    lst_BRList.Visible := False;

    shaPrcMsg.left := 170;
    shaPrcMsg.Top := 100;

    grpNewCustYN.Left := 7;    // 신규멘트
    grpNewCustYN.Top  := 1;
    grpNewCustYN.Width := 573;

    grpBrNoMent.Left := 7;     // 지사별 멘트를 보여준다.
    grpBrNoMent.Top := 27;
    grpBrNoMent.Width := 573;

    // DNIS 정보 추가. 2011.05.17 CDS.
    shrDNIS_DSP.Left := 3;
    shrDNIS_DSP.Top  := 97;
    shrDNIS_DSP.Width := 352;
   	shrDNIS_DSP.Visible := False;

    InitializeCriticalSection(CS);

    // CID 조회인지 설정을 한다.  Value:CID
    cxLblCIDUseFlg.Hint := '';

    // 접수번호 조회 인지 설정을 한다. Value:CONFSLIP
    cxLblConfSlipUseFlg.Hint := '';

    // 수정버튼 위치 설정.
    btnCmdUpdSave.Left  := btnCmdQuestion.Left;
    btnCmdUpdSave.Top   := btnCmdQuestion.Top;

    // 대기해제 버튼 위치 설정.
    btnCmdWaitR.Top  := btnCmdQuestion.Top;
    btnCmdWaitR.Left := btnCmdQuestion.Left;

//    cxTxtBrNameCaption.Top := cboBrOnly.Top; // 수정시에 지사명, 대표번호 크게 보여줌.
//    cxTxtBrNameCaption.Left := cboBrOnly.Left;

    // 고객 검색 그리드
  	cxCustView.DataController.SetRecordCount(0);
    for i := 0 to cxCustView.ColumnCount - 1 do
      cxCustView.Columns[i].DataBinding.ValueType := 'String';

    lcsActiveEdit := ''; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
		gsKakaoAiActieEdit := '';
		
    glsMapRltVal := TStringList.Create;  // 출/도착지 조회 결과값을 매칭 점수 저장.

    if GS_PRJ_AREA = 'O' then
      btnPickupInsert.Visible := (GT_USERIF.SA = '02') or (GT_USERIF.SA = '09') or (GT_USERIF.PickUp = '1');

  	// 접수화면의 기본 컨트롤을 초기화 한다.
		// False : 컨트롤초기화 안함. True : 지사코드 재로드 한다.
  	for i := 2 to 5 do
  	begin
			BtnViaLock[i] := TAdvGlowButton.Create(grpViaArea);
			BtnViaLock[i].Name := 'BtnViaLock' + IntToStr(i);
			BtnViaLock[i].Parent := grpViaArea;
			BtnViaLock[i].Left := BtnViaLock1.Left;
			BtnViaLock[i].Height := BtnViaLock1.Height;
			BtnViaLock[i].Width := BtnViaLock1.Width;
			BtnViaLock[i].Tag := i;
			BtnViaLock[i].Images := BtnViaLock1.Images;
			BtnViaLock[i].Style := BtnViaLock1.Style;
			BtnViaLock[i].BorderStyle := BtnViaLock1.BorderStyle;
      BtnViaLock[i].Transparent := BtnViaLock1.Transparent;
			BtnViaLock[i].Appearance := BtnViaLock1.Appearance;
			BtnViaLock[i].ImageIndex := BtnViaLock1.ImageIndex;
			if i = 2 then
				BtnViaLock[i].Top := BtnViaLock1.Top + ( BtnViaLock1.Height + 3 )
			else if i = 5 then
				BtnViaLock[i].Top := BtnViaLock[i-1].Top + ( BtnViaLock1.Height + 3 )
			else
				BtnViaLock[i].Top := BtnViaLock[i-1].Top + ( BtnViaLock1.Height + 2 );
			BtnViaLock[i].Visible := True;
			BtnViaLock[i].Caption := '';
			BtnViaLock[i].Hint := 'F4)잠금';
			BtnViaLock[i].ShowHint := True;
			BtnViaLock[i].Cursor := BtnViaLock1.Cursor;
			BtnViaLock[i].OnClick := BtnViaLock1Click;

			meoViaArea[i] := TcxMemo.create(grpViaArea);
  		meoViaArea[i].Name := 'meoViaArea' + IntToStr(i);
  		meoViaArea[i].Parent := grpViaArea;
  		meoViaArea[i].Left := meoViaArea1.left;
  		meoViaArea[i].Height := meoViaArea1.Height;
  		meoViaArea[i].Width := meoViaArea1.Width;
      meoViaArea[i].TabStop := meoViaArea1.TabStop;
  		meoViaArea[i].Tag := i;
  		meoViaArea[i].Text := '';
  		meoViaArea[i].OnEnter   := meoViaArea1Enter;
  		meoViaArea[i].OnKeyDown := meoViaArea1KeyDown;
  		meoViaArea[i].OnKeyUp   := meoViaArea1KeyUp;
  		meoViaArea[i].OnExit    := meoViaArea1Exit;
  		meoViaArea[i].Properties.OnChange := meoViaArea1PropertiesChange;
  		meoViaArea[i].Style := meoViaArea1.Style;
  		meoViaArea[i].StyleFocused := meoViaArea1.StyleFocused;

  		if i = 2 then
  			meoViaArea[i].Top := meoViaArea1.Top + ( meoViaArea1.Height + 2 )
  		else
  			meoViaArea[i].Top := meoViaArea[i-1].Top + ( meoViaArea1.Height + 2 );

  		meoViaArea[i].Visible := True;

  		cxViaAreaName[i] := TcxLabel.create(grpViaArea);
  		cxViaAreaName[i].Name := 'cxViaAreaName' + IntToStr(i);
  		cxViaAreaName[i].AutoSize := cxViaAreaName1.AutoSize;
  		cxViaAreaName[i].Parent := grpViaArea;
  		cxViaAreaName[i].Left := cxViaAreaName1.Left;
  		cxViaAreaName[i].Height := cxViaAreaName1.Height;
  		cxViaAreaName[i].Width := cxViaAreaName1.Width;
      cxViaAreaName[i].ParentColor := cxViaAreaName1.ParentColor;
   		cxViaAreaName[i].Style := cxViaAreaName1.Style;
      cxViaAreaName[i].TabStop := cxViaAreaName1.TabStop;
      cxViaAreaName[i].Transparent := cxViaAreaName1.Transparent;
  		cxViaAreaName[i].Tag := i;
  		cxViaAreaName[i].Caption := '';
  		cxViaAreaName[i].Properties := cxViaAreaName1.Properties;

  		if i = 2 then
  			cxViaAreaName[i].Top := cxViaAreaName1.Top + ( cxViaAreaName1.Height + 2)
  		else
  			cxViaAreaName[i].Top := cxViaAreaName[i-1].Top + ( cxViaAreaName1.Height + 2);

  		cxViaAreaName[i].Visible := True;

  		BtnViaMinus[i] := TAdvGlowButton.create(grpViaArea);
  		BtnViaMinus[i].Name := 'BtnViaAdd' + IntToStr(i);
  		BtnViaMinus[i].Parent := grpViaArea;
  		BtnViaMinus[i].Left := BtnViaMinus1.Left;
  		BtnViaMinus[i].Height := BtnViaMinus1.Height;
  		BtnViaMinus[i].Width := BtnViaMinus1.Width;
  		BtnViaMinus[i].Tag := i;
			BtnViaMinus[i].Style := BtnViaMinus1.Style;
			BtnViaMinus[i].BorderStyle := BtnViaMinus1.BorderStyle;
      BtnViaMinus[i].Transparent := BtnViaMinus1.Transparent;
			BtnViaMinus[i].Appearance := BtnViaMinus1.Appearance;
      BtnViaMinus[i].Picture := BtnViaMinus1.Picture;
  		if i = 2 then
  			BtnViaMinus[i].Top := BtnViaMinus1.Top + ( BtnViaMinus1.Height + 2 )
  		else
  			BtnViaMinus[i].Top := BtnViaMinus[i-1].Top + ( BtnViaMinus1.Height + 2 );
  		BtnViaMinus[i].Visible := True;
  		BtnViaMinus[i].Caption := '';
  		BtnViaMinus[i].Hint := '삭제(F6)';
  		BtnViaMinus[i].ShowHint := True;
			BtnViaMinus[i].Cursor := BtnViaMinus1.Cursor;
  		BtnViaMinus[i].OnClick := BtnViaMinus1Click;

  		cxViaMinus[i] := TcxLabel.create(grpViaArea);
  		cxViaMinus[i].Name := 'cxViaMinus' + IntToStr(i);
  		cxViaMinus[i].AutoSize := cxViaMinus1.AutoSize;
  		cxViaMinus[i].Parent := grpViaArea;
      cxViaMinus[i].Cursor := cxViaMinus1.Cursor;
  		cxViaMinus[i].Left := cxViaMinus1.Left;
  		cxViaMinus[i].Height := cxViaMinus1.Height;
  		cxViaMinus[i].Width := cxViaMinus1.Width;
      cxViaMinus[i].ParentColor := cxViaMinus1.ParentColor;
   		cxViaMinus[i].Style := cxViaMinus1.Style;
      cxViaMinus[i].TabStop := cxViaMinus1.TabStop;
      cxViaMinus[i].Transparent := cxViaMinus1.Transparent;
  		cxViaMinus[i].Tag := i;
  		cxViaMinus[i].Caption := cxViaMinus1.Caption;
  		cxViaMinus[i].Properties := cxViaAreaName1.Properties;
			cxViaMinus[i].OnClick := cxViaMinus1Click;

  		if i = 2 then
  			cxViaMinus[i].Top := cxViaMinus1.Top + ( cxViaMinus1.Height + 2)
  		else
  			cxViaMinus[i].Top := cxViaMinus[i-1].Top + ( cxViaMinus1.Height + 2);

  		cxViaMinus[i].Visible := True;
  	end;

    Self.Tag := -1;
  	FControlInitial(False, True);
    ControlClear(False);

    ViaNowTag := 1;   //현재 입력중인 경유지위치
  	ViaADDTag := 0;   //현재 추가한 경유지위치

  	FBigoList := TStringList.Create;
    FSpopList := TStringList.Create;
  	FEpopList := TStringList.Create;

    LoadBigoList;
  	LoadSpopList;
    LoadEpopList;

  	searchBRlist := TStringList.Create;

    LoadPayMethod;

    if GB_365System then
    begin
      chkCenterMng.Enabled := False;
      lblCenterMng.Enabled := False;
    end;

    Application.ProcessMessages;

    SetDebugeWrite('JON01N.FormCreate End');
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.FormDeactivate(Sender: TObject);
begin
  cxLblActive.Visible := False;
end;

procedure TFrm_JON01N.FormDestroy(Sender: TObject);
begin
  DeleteCriticalSection(CS);
  loc_Ud_xdom := Nil;
	FBigoList.Free;
  FSpopList.Free;
  FEpopList.Free;

	searchBRlist.Free;
 	FreeAndNil(SCboLevelSeq);
  FreeAndNil(slCboBranch);
  Frm_JON01N := Nil;
end;

procedure TFrm_JON01N.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if ((ssAlt in Shift) and (Key = VK_F4)) then
	begin
		Key := 0;
		SetDebugeWrite('JON01N.FormKeyDown->VK_F4 + VK_F4');
		btnCmdExit.Click;
	end else
	if (Key = VK_ESCAPE) then
	begin
		SetDebugeWrite('JON01N.FormKeyDown->VK_ESCAPE');
		btnCmdExit.OnClick(btnCmdExit); // 종료
	end;
end;

procedure TFrm_JON01N.FormShow(Sender: TObject);
begin
	SetDebugeWrite('JON01N.FormShow');
	try
		//경남연합만 도착지 상세지명 수정 이벤트 적용
		cxReEndArea.Enabled := (((GS_PRJ_AREA = 'O') and (GT_USERIF.ShareNo = 'G33')) or (GT_USERIF.BR = 'B100'));
		SetWindowPos(Self.handle, HWND_TOPMOST, Self.Left, Self.Top, Self.Width, Self.Height, 0);

		if Frm_Main.JON01MNG[Self.Tag].Dock then
		begin
			Self.Left := 0;
			Self.Top := 0;
		end;

    if Frm_Main.JON01MNG[Self.Tag].Dock then
    begin
      btnGroup.Visible := False;
      BtnFix.Visible := False;
			btnNew.Visible := False;
      btnClose.Visible := False;
      grpTitle.Cursor := crDefault;
      lblCuBubinName.Cursor := crDefault;
    end else
    begin
      btnGroup.Visible := True;
      BtnFix.Visible := True;
      btnNew.Visible := True;
      btnClose.Visible := True;
      grpTitle.Cursor := crSizeAll;
      lblCuBubinName.Cursor := crSizeAll;
    end;

		SetDebugeWrite_CID('JON01N.FormShow NO[' + IntToStr(Self.Tag) + ']');
  	SetDebugeWrite('JON01N.FormShow end');
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01N.func_AngelPlusMarker(AHdNo: string): string;
begin
  if AHdNo = 'A5522' then Result := '☆천사'   else
  if AHdNo = 'A5523' then Result := '☆엔에스' else
  if AHdNo = 'A5524' then Result := '◎스타'   else
  if AHdNo = 'A5525' then Result := '♥바차'    else  Result := '';
end;

procedure TFrm_JON01N.OnActiveMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  pFormActive;
end;

procedure TFrm_JON01N.onMultiChargeEnter(Sender: TObject);
begin
//  try
//    TcxCurrencyEdit(Sender).Tag   := 0;
//    if TcxCurrencyEdit(Sender).Name = 'curCharge' then
//    begin
//      cbCardSanction.Hint := _PAY_CARD;
//      cbCardSanction.OptionsImage.ImageIndex := 2;
//      cbCardSanction.Enabled := False;
//    end else
//    if TcxCurrencyEdit(Sender).Name = 'curCardCharge' then
//    begin
//      cbCardSanction.Hint := _PAY_CARD;
//      cbCardSanction.OptionsImage.ImageIndex := 2;
//      cbCardSanction.Enabled := Not TcxCurrencyEdit(Sender).Properties.ReadOnly;
//    end else
//    if TcxCurrencyEdit(Sender).Name = 'curMileCharge' then
//    begin
//      // 자체발행쿠폰 사용시만 사용가능 ( lcPaySeq를 사용할수 없음 )
//      if (cbbPayMethod.Hint = 'y') then
//      begin
//        cbCardSanction.Hint := _PAY_COUPON;
//        cbCardSanction.OptionsImage.ImageIndex := 1;
//        cbCardSanction.Enabled := True;
//      end else
//      begin
//        cbCardSanction.Enabled := False;
//        cbCardSanction.Hint := _PAY_CARD;
//        cbCardSanction.OptionsImage.ImageIndex := 2;
//      end;
//    end	else
//    begin
//      cbCardSanction.Enabled := False;
//      cbCardSanction.Hint := _PAY_CARD;
//      cbCardSanction.OptionsImage.ImageIndex := 2;
//    end;
//  except
//  end;
end;

procedure TFrm_JON01N.onMultiChargeKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  try
    if Ord(Key) = VK_RETURN then
		begin
			if (TcxCurrencyEdit(Sender).Value > 0) and (TcxCurrencyEdit(Sender).Value < 1000) then
      begin
				TcxCurrencyEdit(Sender).Value := TcxCurrencyEdit(Sender).Value * 1000;
      end;

      if TcxCurrencyEdit(Sender).Tag = -1 then
      begin
        TcxCurrencyEdit(Sender).Tag := 0;
        Exit;
      end;

      if TcxCurrencyEdit(Sender).Name = 'curCbCharge'   then curMileCharge.SetFocus else
      if TcxCurrencyEdit(Sender).Name = 'curMileCharge' then curCardCharge.SetFocus else
      if TcxCurrencyEdit(Sender).Name = 'curCardCharge' then
      begin
        if meoBigo.Visible then meoBigo.SetFocus
                           else meoBigo2.SetFocus;

				if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
				begin
					OrgRate := curRate.Value{ - cxCurRevisionRate.value};
				end;

        if (GS_START_AUTOLOCK) then
        begin
          BtnRaLock.Hint := 'F4)잠금';
          BtnRaLock.Tag  := 0;
          BtnRaLock.Down := True;
          BtnRaLock.ImageIndex := 1;
        end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.onMultiChargePropertiesChange(Sender: TObject);
begin
  if curCbCharge.Tag < 0 then Exit;
  
  try
    curCharge.Value := curRate.Value - ( curCbCharge.Value + curMileCharge.Value + curCardCharge.Value );
    if curCharge.Value < 0 then
    begin
      GMessagebox('복합결제요금이 대리요금을 초과했습니다. ', CDMSE);
      if Sender is TcxCurrencyEdit then
      begin
        TcxCurrencyEdit(Sender).Value := 0;
        TcxCurrencyEdit(Sender).Tag   := -1;
      end else
      if Sender is TcxSpinEdit then
      begin
        curCbCharge.Tag := -1;
        curCbCharge.Value := 0;
        curCardCharge.Value := 0;
        curMileCharge.Value := 0;
        curCharge.Value := curRate.Value;
        edtPostPay.Value := 0;
        curCbCharge.Tag := 0;
      end;
    end else
    begin
      TcxCurrencyEdit(Sender).Tag   := 0;
      edtPostPay.Value := curCbCharge.Value + curMileCharge.Value + curCardCharge.Value;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.grpTitleMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  if Frm_Main.JON01MNG[Self.Tag].Dock then Exit;

  pFormActive;

  ReleaseCapture;
  PostMessage(Self.Handle, WM_SYSCOMMAND, $F012, 0);
end;

procedure TFrm_JON01N.grpTop2MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  lst_BRList.Visible := False;
end;

procedure TFrm_JON01N.grpTop2Resize(Sender: TObject);
begin
  try
    shpSimpleMemo.Top := shpCenterMemo.Top + shpCenterMemo.Height + 2;
    edt_CardMemo.Top := shpSimpleMemo.Top + 5;
    cxLCuCCMemoFlg1.Top := edt_CardMemo.Top + 1;

    shpCBMemo.Top := shpSimpleMemo.Top;
    mmoCbMemo.Top := edt_CardMemo.Top;
    lblCbMemoFlag.Top := cxLCuCCMemoFlg1.Top;
  except
  end;
end;

procedure TFrm_JON01N.grpWorkMemoResize(Sender: TObject);
begin
  try
    meoBigo.Top := 9;
    LbmeoBigo.Top := 13;

    meoBigo2.Top := meoBigo.Top + meoBigo.Height + 1;
    LbmeoBigo2.Top := meoBigo2.Top + 3;

    if meoBigo3.Visible then
    begin
      meoBigo3.Top := meoBigo2.Top + meoBigo2.Height + 1;
      LbmeoBigo3.Top := meoBigo3.Top + 3;
    end;
  except
  end;
end;

procedure TFrm_JON01N.lblCallByInsureFreeMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
	if TcxLabel(Sender).Tag = 0 then TcxLabel(Sender).Tag := 1
															else TcxLabel(Sender).Tag := 0;
	pSetLabelClick(TcxLabel(Sender));
end;

procedure TFrm_JON01N.lblCashSaveMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
	if TcxLabel(Sender).Tag = 0 then TcxLabel(Sender).Tag := 1
															else TcxLabel(Sender).Tag := 0;
	pSetLabelClick(TcxLabel(Sender));
end;

procedure TFrm_JON01N.lblCbMemoFlagClick(Sender: TObject);
begin
  if mmoCbMemo.CanFocus then mmoCbMemo.SetFocus;
end;

procedure TFrm_JON01N.lblCuBubinFlagClick(Sender: TObject);
begin
  if cxtCuBubin.CanFocus then cxtCuBubin.SetFocus;
end;

procedure TFrm_JON01N.lblCuNameFlagClick(Sender: TObject);
begin
  if edtCuName.CanFocus then edtCuName.SetFocus;
end;

procedure TFrm_JON01N.lblEdLockClick(Sender: TObject);
begin
  if BtnEdLock.Down then BtnEdLock.Down := False
                    else BtnEdLock.Down := True;
  BtnEdLock.Click;
end;

procedure TFrm_JON01N.lblNewCustYNClick(Sender: TObject);
begin
  grpNewCustYN.Visible := False; // 신규고객여부의 정보창 닫음.
end;

procedure TFrm_JON01N.lblOptionCallMuClick(Sender: TObject);
begin
  AddSpop('콜무',96);
end;

procedure TFrm_JON01N.lblOptionSexFMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
Var wStr : String;
begin
  try
    if TcxLabel(Sender).Tag = 0 then TcxLabel(Sender).Tag := 1
                                else TcxLabel(Sender).Tag := 0;
    pSetLabelClick(TcxLabel(Sender));

    wStr := meoStartArea.Text;

    if lblOptionSexF.Tag = 1 then
    begin
      wStr := fDelString('남)', wStr);

      lblOptionSexM.Tag := 0;
      pSetLabelClick(lblOptionSexM);
    end;

    if lblOptionSexF.Tag = 1 then
    begin
      if Pos('여)', wStr) < 1 then
      begin
        meoStartArea.text := '여)' + wStr;
      end;
    end else
    begin
      meoStartArea.Text := fDelString('여)', wStr);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.lblOptionSexMMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
Var wStr : String;
begin
  try
    if TcxLabel(Sender).Tag = 0 then TcxLabel(Sender).Tag := 1
                                else TcxLabel(Sender).Tag := 0;
    pSetLabelClick(TcxLabel(Sender));

    wStr := meoStartArea.Text;

    if lblOptionSexM.Tag = 1 then
    begin
      wStr := fDelString('여)', wStr);

      lblOptionSexF.Tag := 0;
      pSetLabelClick(lblOptionSexF);
    end;

    if lblOptionSexM.Tag = 1 then
    begin
      if Pos('남)', wStr) < 1 then
      begin
        meoStartArea.text := '남)' + wStr;
      end;
    end else
    begin
      meoStartArea.Text := fDelString('남)', wStr);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.lblPlusYNClick(Sender: TObject);
var idx : Integer;
begin
  try
    if cbbPayMethod.Tag > 10 then Exit;      // "후불" 선택시  "법인콜" 체크 박스 선택하더라도 결재방법 자동변경 차단. 2011-11-11.
    if gsPlusYNHint = 'NOCHANGE' then Exit;  // 법인콜 다른 함수에서 변경 못 하도록 함.[오더수정 모드에서 설정됨]

    // 법인콜 선택시 결제방식 "후불" 자동변경 처리.  2011.09.01
    if lblPlusYN.Tag = 1 then
    begin
      if cbbPayMethod.Text <> PAY_METHOD_POST_NML then
      begin
        idx := cbbPayMethod.Properties.Items.IndexOf(PAY_METHOD_POST_NML);
        if idx > -1 then
        begin
          pbPayMethod := cbbPayMethod.ItemIndex;

          lblPlusYN.Hint := '10';
          cbbPayMethod.ItemIndex := idx;
          lblPlusYN.Hint := '';
        end;
      end;
    end else
    begin
      if pbPayMethod > -1 then
      begin
        lblPlusYN.Hint := '10';
        cbbPayMethod.ItemIndex := pbPayMethod;
        lblPlusYN.Hint := '';
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.LblPostPayClick(Sender: TObject);
begin
  if EdtPostPay.Enabled then EdtPostPay.SetFocus;
end;

procedure TFrm_JON01N.lblStLockClick(Sender: TObject);
begin
  if BtnStLock.Down then BtnStLock.Down := False
                    else BtnStLock.Down := True;

  BtnStLock.Click;
end;

procedure TFrm_JON01N.lblTakAllyClick(Sender: TObject);
var wStr : string;
		i : Integer;
begin
	SetDebugeWrite('JON01N.btnTakAllyClick');
	try
		wStr := meoStartArea.Text;
		if lblTakAlly.Tag = 1 then
		begin
			if lbl_06.Tag = 1 then
			begin
				lbl_06.Tag := 0;
				pSetLabelClick(lbl_06);
				grpWkLicType.Visible := False;
				i := Pos('탁확)', wStr);
				if i = 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁확)'), Length(widestring(wStr)) - Length(widestring('탁확)')));
					sTakHwak := 'n';
				end else
				if i > 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁확)') , Length(widestring(wStr)) - i);
					sTakHwak := 'n';
				end else
					sTakHwak := 'n';

				SetMunuChecked('탁확', False);
			end;
			if Pos('탁송)', wStr) < 1 then
				AddSpop('탁송기사만', 19);    //탁송연합콜 관련 수정 20210208KLHS
		end else
		begin
			i := Pos('탁송)', wStr);
			if i = 1 then
			begin
				meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁송)'), Length(widestring(wStr)) - Length(widestring('탁송)')));
			end else
			if i > 1 then
			begin
				meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁송)') , Length(widestring(wStr)) - i);
			end;
			sTaksong := 'n';
			SetMunuChecked('탁', False);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.lblWkAgeClick(Sender: TObject);
begin
  if lblWkAge.Tag = 1 then
  begin
    lblWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하';
    grpWkAge.Left := 303;
    grpWkAge.Top  := 91;
    grpWkAge.BringToFront;
    grpWkAge.Visible := True;
    if edtWkFAge.CanFocus then edtWkFAge.SetFocus;
  end else
  begin
    grpWkAge.Hint := '';
    grpWkAge.Visible := False;
  end;
end;

procedure TFrm_JON01N.lbl_00MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  try
    if TcxLabel(Sender).Name = 'lblPlusYN' then
    begin
      //수정창에서 대기,문의 상태에서는 법인 체크 설정 가능하도록 수정. 20211206 KHS 엔젤요청사항
      if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 )  then
      begin
        if (Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['4', '5']) then
        begin
          if TcxLabel(Sender).Tag = 0 then TcxLabel(Sender).Tag := 1
                                      else TcxLabel(Sender).Tag := 0;
          pSetLabelClick(TcxLabel(Sender));

          plbl_00Click(Sender);
        end;
      end else //수정이 아니면 
      begin
        if TcxLabel(Sender).Tag = 0 then TcxLabel(Sender).Tag := 1
                                    else TcxLabel(Sender).Tag := 0;
        pSetLabelClick(TcxLabel(Sender));

        plbl_00Click(Sender);
      end;
    end else
    begin
      if TcxLabel(Sender).Tag = 0 then TcxLabel(Sender).Tag := 1
                                  else TcxLabel(Sender).Tag := 0;
      pSetLabelClick(TcxLabel(Sender));

      plbl_00Click(Sender);
    end;

    if TcxLabel(Sender).Name = 'lblCenterMng' then
    begin
      if TcxLabel(Sender).Tag = 1 then
      begin
        cbTelView.ItemIndex := 3;
      end else
      begin
        if ( Trim(cxtCuTel2.Text) <> '' ) then cbTelView.ItemIndex := 1
                                          else cbTelView.ItemIndex := 0;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.SetMunuChecked( sName : String; bCheck : Boolean);
Var j : Integer;
begin
  SetDebugeWrite('JON01N.SetMunuChecked');
  try
    for j := 0 to pmSpop.Items.Count - 1 do
    begin
      if pmSpop.Items.Items[j].Tag In [11..19] then
      begin
        if Copy(pmSpop.Items.Items[j].Caption, 1, 1) = sName then
        begin
          pmSpop.Items.Items[j].Checked := bCheck;
          Break;
        end else
        if sName = '탁확' then
        begin
          pmSpop.Items.Items[18].Checked := bCheck;
          Break;
        end;
      end;
    end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.LbmeoBigo2Click(Sender: TObject);
begin
  meoBigo2.SetFocus;
end;

procedure TFrm_JON01N.LbmeoBigo3Click(Sender: TObject);
begin
  meoBigo3.SetFocus;
end;

procedure TFrm_JON01N.LbmeoBigoClick(Sender: TObject);
begin
  meoBigo.SetFocus;
end;

procedure TFrm_JON01N.MenuItem3Click(Sender: TObject);
begin
  SetDebugeWrite('JON01N.MenuItem3Click');
  cxTmWaitTime.Text := '00:00';
  cxCurWaitTmRate.Value := 0;
end;

procedure TFrm_JON01N.meoBigo2Exit(Sender: TObject);
begin
  LbmeoBigo2.Visible := (meoBigo2.Text = '') // 적요2 입력 잔상.
end;

procedure TFrm_JON01N.meoBigo2FocusChanged(Sender: TObject);
begin
  LbmeoBigo2.Visible := ( Not meoBigo2.Focused ) And (meoBigo2.Text = '');
  if Self.Tag < 0 then Exit;

  try
    if Not meoBigo3.Visible then
    begin
      meoBigo3.Visible := True;
      LbmeoBigo3.Visible := True;
      grpWorkMemo.Height := grpWorkMemo.Height + 23;
      gJon01Size[Self.Tag].grpWorkMemoH := grpWorkMemo.Height;
      pSetFormScroll(0, 23 );
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.meoBigo2KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if fCheckMaxLength(meoBigo2, 1996) then Key := 0;
  TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);
  SetPnlWorkMemoSize;
end;

procedure TFrm_JON01N.meoBigo2PropertiesChange(Sender: TObject);
begin
	if ( Not meoBigo2.Focused ) then
		lbmeoBigo2.Visible := (meoBigo2.Text = ''); // 적요2 입력 잔상.
	meoBigo2.Text := Enc_Control(meoBigo2.Text);
end;

procedure TFrm_JON01N.meoBigo3Exit(Sender: TObject);
begin
  LbmeoBigo3.Visible := (meoBigo3.Text = '') // 적요3 입력 잔상.
end;

procedure TFrm_JON01N.meoBigo3FocusChanged(Sender: TObject);
begin
  LbmeoBigo3.Visible := ( Not meoBigo3.Focused ) And (meoBigo3.Text = '');
end;

procedure TFrm_JON01N.meoBigo3KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if fCheckMaxLength(meoBigo3, 1996) then Key := 0;
  TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);
  SetPnlWorkMemoSize;
end;

procedure TFrm_JON01N.meoBigo3PropertiesChange(Sender: TObject);
begin
  if ( Not meoBigo3.Focused ) then
    lbmeoBigo3.Visible := (meoBigo3.Text = ''); // 적요2 입력 잔상.
end;

procedure TFrm_JON01N.meoBigoEnter(Sender: TObject);
begin
  try
    if TcxMemo(Sender).Name = 'meoBigo'  then
    begin
       LbmeoBigo.Visible := False;
       if grpWkJi.Visible then grpWkJi.Visible := False;
    end else
    if TcxMemo(Sender).Name = 'meoBigo2' then LbmeoBigo2.Visible := False
    else
    if TcxMemo(Sender).Name = 'meoBigo3' then LbmeoBigo3.Visible := False;

    pnl_charge.Visible := False;
    FCurrBigo := TcxMemo(Sender);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.meoBigoExit(Sender: TObject);
begin
  lbmeoBigo.Visible := (meoBigo.Text = ''); // 적요1 입력 잔상.
  if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
end;

procedure TFrm_JON01N.meoBigoFocusChanged(Sender: TObject);
begin
  LbmeoBigo.Visible := ( Not meoBigo.Focused ) And (meoBigo.Text = '');
end;

procedure TFrm_JON01N.meoBigoKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  SetDebugeWrite('JON01N.meoBigoKeyDown');
  try
    if Ord(Key) = VK_RETURN then
    begin
      if (Pos('수정', Self.Caption) = 0 ) then
        btnCmdJoin.SetFocus
      else
        btnCmdUpdSave.SetFocus;
    end;

    if Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        //      VK_F6     : if rb_search.Enabled then rb_Search.OnClick(rb_Search);
        Vk_F7: //if rb_Modify.Enabled then rb_Modify.OnClick(rb_Modify);              // 수정
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave);
				Vk_F8: //whbtn_Cancel.OnClick(whbtn_Cancel);                                   // 종료
				begin
					SetDebugeWrite('JON01N.meoBigoKeyDown->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
				Vk_F9:
					begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then
          begin
            if meoBigo.CanFocus then
            begin
              meoBigo.SetFocus;
              Application.ProcessMessages;
            end;
            btnCmdWait.OnClick(btnCmdWait); // 대기
          end;
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
          if btnCmdQuestion.Enabled then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
        VK_ESCAPE: // ESC 키
          begin
            if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
            begin
              if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
                and (Trim(lblStartAreaName.Text) = '') and (Trim(cxReEndArea.Text) = '')
                and (Trim(cxtStartAreaDetail.Text) = '') then
							begin
								SetDebugeWrite('JON01N.meoBigoKeyDown->VK_ESCAPE');
								btnCmdExit.OnClick(btnCmdExit); // 종료
							end;
						end;
          end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.meoBigoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if fCheckMaxLength(meoBigo, 296) then Key := 0;
  TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);
  SetPnlWorkMemoSize;
end;

procedure TFrm_JON01N.meoBigoPropertiesChange(Sender: TObject);
begin
  if ( Not meoBigo.Focused ) then
    lbmeoBigo.Visible := (meoBigo.Text = ''); // 적요1 입력 잔상.
end;

procedure TFrm_JON01N.meoCuCCMemoEnter(Sender: TObject);
begin
  cxLCuCCMemoFlg.Visible := False;
end;

procedure TFrm_JON01N.meoCuCCMemoExit(Sender: TObject);
begin
  cxLCuCCMemoFlg.Visible := (meoCuCCMemo.Text = '') // 상담메모 입력 잔상.
end;

procedure TFrm_JON01N.meoCuCCMemoFocusChanged(Sender: TObject);
begin
  cxLCuCCMemoFlg.Visible := ( Not meoCuCCMemo.Focused ) And (meoCuCCMemo.Text = '');
end;

procedure TFrm_JON01N.meoCuCCMemoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if fCheckMaxLength(meoCuCCMemo, 596) then Key := 0;
  TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);

  SetPnlCustMemoSize(Sender);
end;

procedure TFrm_JON01N.meoCuCCMemoPropertiesChange(Sender: TObject);
begin
  if ( Not meoCuCCMemo.Focused ) then
    cxLCuCCMemoFlg.Visible := (meoCuCCMemo.Text = ''); // 상담메모 입력 잔상.

	pCompareCustInfo;
  if grpTitle.Tag = 0 then SetPnlCustMemoSize(Sender);
end;

procedure TFrm_JON01N.meoCuWorMemoEnter(Sender: TObject);
begin
  cxLCuWorMemoFlg.Visible := False;
end;

procedure TFrm_JON01N.meoCuWorMemoExit(Sender: TObject);
begin
  cxLCuWorMemoFlg.Visible := (meoCuWorMemo.Text = '') // 기사메모 입력 잔상.
end;

procedure TFrm_JON01N.meoCuWorMemoFocusChanged(Sender: TObject);
begin
  cxLCuWorMemoFlg.Visible := ( Not meoCuWorMemo.Focused ) And (meoCuWorMemo.Text = '');
end;

procedure TFrm_JON01N.meoCuWorMemoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if fCheckMaxLength(meoCuWorMemo, 596) then Key := 0;
  TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);
  SetPnlCustMemoSize(Sender);
end;

procedure TFrm_JON01N.meoCuWorMemoPropertiesChange(Sender: TObject);
begin
  if ( Not meoCuWorMemo.Focused ) then
    cxLCuWorMemoFlg.Visible := (meoCuWorMemo.Text = ''); // 기사메모 입력 잔상.

	pCompareCustInfo;
  if grpTitle.Tag = 0 then SetPnlCustMemoSize(Sender);
end;

procedure TFrm_JON01N.meoEndAreaEnter(Sender: TObject);
begin
	SetDebugeWrite('JON01N.meoEndAreaEnter');
  try
    locNowControlName := 'meoEndArea'; // 현재 활성화된 컨트롤 명.
		lcsActiveEdit := locNowControlName;
    gmap_forword := '';

    if Assigned(Frm_JON30) then
    begin
      if ( Frm_JON30.Tag <> Self.Tag ) And ( Trim(TcxMemo(Sender).Text) <> '' )  then
      begin
        if ( Frm_JON30.AdvStringGrid5.Cells[0,1] <> '' ) Or
           ( Frm_JON30.AdvStringGrid4.Cells[0,0] <> '' ) Or
           ( Frm_JON30.AdvStringGrid6.Cells[0,0] <> '') then
				Hide_Panel(lcsActiveEdit, 0);
			end;
			Frm_JON30.Tag := Self.Tag;
		end;

		if J30ShowE = True then
    begin
      Exit;
    end;

  //  if Assigned(Frm_JON30) and (cxLabel19.Caption = 'F4)수정') then     //  20130703  LYB  잠김 상태에서도 검색창 표시 (팀장님지시)
    if Assigned(Frm_JON30) then
    begin
      if GS_MAP_AREA_AUTOSHOW then
			begin
				Frm_JON30.pnl_PoiAddress.Visible := False;
        Frm_JON30.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
        Frm_JON30.OnSelectedMap := SetEndAreaMap;
        if (not Frm_JON30.Visible) and ( meoEndArea.Text <> '' ) then // (cxtEndXval.Text <> '') and (cxtEndYval.Text <> '') then
        begin
          lcsActiveEdit := locNowControlName;
          Hide_Panel(lcsActiveEdit,0);
				end;
      end else
      begin
        if (not Frm_JON30.Visible) and (cxtEndXval.Text <> '') and (cxtEndYval.Text <> '') then
        begin
          lcsActiveEdit := locNowControlName;
          Hide_Panel(lcsActiveEdit,0);
          Frm_JON30.chk_Map(False);
        end;
      end;

      if ( Assigned(Frm_JON31) ) And ( Frm_JON31 <> nil ) And ( Frm_JON31.Showing ) then
      begin
        Frm_JON31.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
        Frm_JON31.OnSelectedMap := SetEndAreaMap;
      end;

      gKWComp := '';
    end;
  Except
    on e: exception do
    begin
      Log('meoEndAreaEnter Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoEndAreaEnter Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.meoEndAreaExit(Sender: TObject);
begin
  SetDebugeWrite('JON01N.meoEndAreaExit');
  try
    if Not gb_SpeechBubbleMouseOn then
    begin
      Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
      Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);
    end else Exit;

    locNowControlName := ''; // 현재 활성화된 컨트롤 명.
    if Assigned(Frm_JON30) and (not (meoEndArea.Focused)) then
    begin
      gbCtrlVCancel := True;
      gbECtrlV := False;
      PnlCtrlV.Visible := False;
			Hide_Panel(lcsActiveEdit,1);
      Frm_JON30.BtnAllSch.Down := False;
      GS_POISCH_ALL := False;
      Frm_JON30.btnAllSch.LookAndFeel.SkinName := 'Sharp';
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.meoEndAreaKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
Var iRate : Integer;
begin
	SetDebugeWrite('JON01N.meoEndAreaKeyDown');
	SetDebugeWrite('JON01N-No[' + locsCuTel + '/' + IntToStr(self.Tag) + '/' + IntToStr(GS_JON01_TAB) + '] ' + meoEndArea.Text );
	try
		if Assigned(Frm_JON30) then
		begin
			Frm_JON30.Tag := Self.Tag;
		end;

		lcsActiveEdit := 'meoEndArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
		sActieEdit := 'meoEndArea';
		gsKakaoAiActieEdit := 'meoEndArea'; // 카카오 요금 계산을 어느 입력란에서 keydown 되었는지 기록하기 위함
		// 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then  Exit;

    if Key = VK_RETURN then
    begin
			if (Frm_JON30.gb2ndSearch) and (img_SpeechBubble.Visible) then Exit;

      if not IsNotModifyPrice and (GT_CHARGE_CAL = 1) then
      begin
        // 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
        if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
        begin
          tmrThRealDis.Tag := 0;
          proc_dis_alculation(Self.Tag, True);
					if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                                 else begin
                                        if GS_ALL_SEVEN then
  																				iRate := func_search_A7charge(meoStartArea.Text, meoEndArea.text)
                                        else
                                          iRate := func_search_charge;

                                        if Not gsMyMainRateNoChange then
                                        begin
                                          if BtnRaLock.Hint <> 'F4)잠금' then
																					begin
																						curRate.Value := iRate{ + cxCurRevisionRate.value};
																						OrgRate := curRate.Value{ - cxCurRevisionRate.value};
																					end else
																					begin
																						if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
																						begin
																							if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
																							begin
                                                pSetLockMent(3);
																							end;
																						end;
																					end;
                                        end;
                                      end;
        end;
      end;
      Exit;
    end;

    if Key in [VK_DOWN, VK_UP] then
    begin
      Exit; // 그리드에 포커스 넘기는건 KeyUp Event에서 처리한다.
    end;

    gbSCtrlV := False;
    { TODO : Ctrl+V(붙여넣기)시 전검색단어 초기화-같은단어가들어오면검색이 안되는부분 붙여넣기시 허용 }
    if ( ssCtrl in Shift) and ( Key = Ord('V') ) then
    begin
      Frm_JON30.sPreSearchWord := '';
      gmap_forword := '';
      gbECtrlV := True;
    end else
      gbECtrlV := False;

    sAnsiSchTxt := meoEndArea.Text;

    if Key = VK_BACK then
    begin
      if ( BtnEdLock.Tag = 1 ) And ( BtnEdLock.Hint = 'F4)잠금' ) then
      begin
        if ( Pos('인근', meoEndArea.Text) = 0 ) And
           ( Pos('부근', meoEndArea.Text) = 0 ) And
           ( Pos('근처', meoEndArea.Text) = 0 ) then
        begin
          BtnEdLock.Hint := 'F4)수정';
          BtnEdLock.Tag  := 0;
          BtnEdLock.ImageIndex := 0;
          BtnEdLock.Down := False;
          lblEdLock.Style.TextColor := $004B4B4B;
          lblEdLock.Style.Font.Style := [fsBold];
          Frm_JON30.N2.Enabled := True;
          Frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
          Frm_JON30.btnEPoiMove.Enabled := True;
          Frm_JON30.N7.Enabled := True;
          Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
          Frm_JON30.btnEPoiAMove.Enabled := True;
        end;
      end;

      if (Length(widestring(meoEndArea.Text)) = 1) and (BtnEdLock.Hint <> 'F4)잠금') then
      begin
        Frm_JON30.Grid_Init(lcsActiveEdit,1);
        Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
        GS_FULLWORD_CMP := '';
      end else
  //    if (Length(meoEndArea.Text) <= 1) and (cxLabel19.Caption <> 'F4)잠금') then
      if (Length(widestring(sAnsiSchTxt)) = 0) then
      begin
        lblEndAreaName.Caption := '';
        cxtEndAreaDetail.Caption := '';
        cxReEndArea.Clear;

        lcsEnd1 := '';
        lcsEnd2 := '';
        lcsEnd3 := ''; // 도1, 도2, 도3

        lcsEndDocId := '';
        lcsEndCellSel := '';
        lcsEndSchWord := '';

        GS_Grid_DES := '';

        gJONEndChkXY.X := '';
        gJONEndChkXY.Y := '';
        gJONEndChkXY.GUIDE_X := '';
        gJONEndChkXY.GUIDE_Y := '';

        cxtEndXval.Text := '';
        cxtEndYval.Text := '';
        gsEndGUIDEXval := '';
        gsEndGUIDEYval := '';

        gKWComp := '';

        gmap_forword := '';
        GS_FULLWORD_CMP := '';

        Frm_JON30.Grid_Init(lcsActiveEdit,1);
        Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
        Hide_Panel(lcsActiveEdit,1);

        if BtnEdLock.Hint = 'F4)잠금' then
        begin
          BtnEdLock.Hint := 'F4)수정';
          BtnEdLock.Tag  := 0;
          BtnEdLock.ImageIndex := 0;
          BtnEdLock.Down := False;
          lblEdLock.Style.TextColor := $004B4B4B;
          lblEdLock.Style.Font.Style := [fsBold];
          Frm_JON30.N2.Enabled := True;
          Frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
          Frm_JON30.btnEPoiMove.Enabled := True;
          Frm_JON30.N7.Enabled := True;
          Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
          Frm_JON30.btnEPoiAMove.Enabled := True;
        end;

				if ( GS_ALL_SEVEN ) And ( Assigned(Frm_JON63) ) and (not GS_All7Type2) then
				begin
					Frm_JON63.bChkTime := False;
					Frm_JON63.TmrChkTag.Tag := 100;
					Frm_JON63.Close;
				end;
      end else
      if (Length(sAnsiSchTxt) <= 2) and (BtnEdLock.Hint <> 'F4)잠금') then
      begin

      end;
		end;

    if Ord(key) = VK_F4 then
    begin
      if BtnEdLock.Hint = 'F4)잠금' then
      begin
        BtnEdLock.Hint := 'F4)수정';
        BtnEdLock.Tag  := 0;
        BtnEdLock.ImageIndex := 0;
        BtnEdLock.Down := False;
        lblEdLock.Style.TextColor := $004B4B4B;
        lblEdLock.Style.Font.Style := [fsBold];
        Frm_JON30.N2.Enabled := True;
        Frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
        Frm_JON30.btnEPoiMove.Enabled := True;
        Frm_JON30.N7.Enabled := True;
        Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
        Frm_JON30.btnEPoiAMove.Enabled := True;
      end else
      begin
        BtnEdLock.Hint := 'F4)잠금';
        BtnEdLock.Tag  := 0;
        BtnEdLock.ImageIndex := 1;
        BtnEdLock.Down := True;
        lblEdLock.Style.TextColor := clRed;
        lblEdLock.Style.Font.Style := [fsBold,fsUnderline];
        Frm_JON30.N2.Enabled := False;
        Frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
        Frm_JON30.btnEPoiMove.Enabled := False;
        Frm_JON30.N7.Enabled := False;
        Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
        Frm_JON30.btnEPoiAMove.Enabled := False;
      end;
      Exit;
    end else
    if Ord(key) = VK_F3 then
    begin
      Exit;
    end;

    if Ord(key) = VK_ESCAPE then  // ESC 키
    begin
      if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
      begin
        if (Trim(meoEndArea.Text) = '') then
        begin
          lblEndAreaName.Clear;
          cxtEndAreaDetail.Clear;
        end;

        if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
          and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
          and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
				begin
					SetDebugeWrite('JON01N.meoEndAreaKeyDown->VK_ESCAPE');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
			end;
    end;
  Except
    on e: exception do
    begin
      Log('meoEndAreaKeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoEndAreaKeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.meoEndAreaKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
Var
	sTmp, sSTPoi, sEDPoi : string;
	iPos, iTmpL : integer;

  procedure pJON03POISetFocus;
  begin
    if Frm_JON30.AdvStringGrid5.Cells[0,1] = '' then
    begin
      if Frm_JON30.AdvStringGrid4.Cells[0,0] = '' then
      begin
        if Frm_JON30.AdvStringGrid6.Cells[0,0] <> '' then
        begin
          Frm_JON30.AdvStringGrid5.ShowSelection := False;
          Frm_JON30.AdvStringGrid4.ShowSelection := False;
          Frm_JON30.AdvStringGrid6.ShowSelection := True;
          if Frm_JON30.AdvStringGrid6.CanFocus then
            Frm_JON30.AdvStringGrid6.SetFocus;
        end;
      end else
      begin
        Frm_JON30.AdvStringGrid5.ShowSelection := False;
        Frm_JON30.AdvStringGrid4.ShowSelection := True;
        Frm_JON30.AdvStringGrid6.ShowSelection := False;
        if Frm_JON30.AdvStringGrid4.CanFocus then
          Frm_JON30.AdvStringGrid4.SetFocus;
        Frm_JON30.AdvStringGrid4.FocusCell(0,0);
      end;
    end else
    begin
      Frm_JON30.AdvStringGrid5.ShowSelection := True;
      Frm_JON30.AdvStringGrid4.ShowSelection := False;
      Frm_JON30.AdvStringGrid6.ShowSelection := False;
      if Frm_JON30.AdvStringGrid5.CanFocus then
        Frm_JON30.AdvStringGrid5.SetFocus;
    end;
  end;
begin
	SetDebugeWrite('JON01N.meoEndAreaKeyUp');
	frm_JON30.trm_WK3SEC.Enabled := False;
  TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);
  try
    lcsActiveEdit := 'meoEndArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
		sActieEdit := 'meoEndArea';
    //cxLblEnd.Tag  := 0;  // 위치찾기 판넬이 떠잇을 경우엔 자동닫기 제한.

    // 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    //  if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then  Exit;
    if (Key = 39) or (Key = 35) or (Key = 36) then  Exit;

    if ( ssCtrl in Shift) and ( Key = VK_LEFT ) then
    begin
      Exit;
    end;

    if Key = VK_LEFT then Exit;

    if fCheckMaxLength(meoEndArea, 98) then Key := 0;

    if Length(AnsiString(meoEndArea.Text)) > 2 then
    begin
      sBHSAddr := '';
      sBHEAddr := '';
    end else
    begin
      J30ShowE := False;
      sBHSAddr := '';
      sBHEAddr := '';
    end;

    // 검색 그리드로 포커스 이동..
    if ( Key in [VK_DOWN, VK_UP] ) then
    begin
 			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

      pJON03POISetFocus;
    end else
		if (Shift = [ssShift]) and (Key = vk_Return) then //$0D) then
		begin
			if (Frm_JON30.gb2ndSearch) and (img_SpeechBubble.Visible) then
			begin
				Frm_JON30.TT2.Tag := 1;
				Frm_JON30.TT2.Interval := 1;
				Frm_JON30.TT2.Enabled  := True;

				Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
				Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

				Exit;
			end;
		end else
		if Key = VK_RETURN then
		begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

      if Frm_JON30.Visible = True then
      begin
        if BtnEdLock.Hint <> 'F4)잠금' then       // 20130703  LYB
        begin
          if (GS_SEARCH_DEST_DONGSINAME) or (GS_SEARCH_DEST_DONGNAME_G33) then// and (frmJON30.AdvStringGrid4.Cells[0,0] <> '') then
          begin

          end else
          begin
            if (Frm_JON30.AdvStringGrid5.Cells[0,1] <> '') then
            begin
              frm_JON30.bEnter := False;
							Frm_JON30.Proc_SendParent(Frm_JON30.AdvStringGrid5.GetRealRow + 1);
							if not GS_END_AUTOLOCK then
							begin
								BtnEdLock.Hint := 'F4)잠금';
								BtnEdLock.Tag  := 0;
								BtnEdLock.ImageIndex := 1;
								BtnEdLock.Down := True;
                lblEdLock.Style.TextColor := clRed;
                lblEdLock.Style.Font.Style := [fsBold,fsUnderline];
								Frm_JON30.N2.Enabled := False;
								Frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
								Frm_JON30.btnEPoiMove.Enabled := False;
								Frm_JON30.N7.Enabled := False;
								Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
								Frm_JON30.btnEPoiAMove.Enabled := False;
							end;

							if meoEndArea.CanFocus then meoEndArea.SetFocus;
              Hide_Panel(lcsActiveEdit,1);
						end;
            if GS_SEARCH_POTAL_FIRST then
            begin
              if (Frm_JON30.AdvStringGrid5.Cells[0,1] = '') and (Frm_JON30.AdvStringGrid6.Cells[0,1] <> '') then
              begin
                frm_JON30.bEnter := False;
                Frm_JON30.Proc_SendParent_ADV3(Frm_JON30.AdvStringGrid6.GetRealRow + 1, True);
              end;
            end else
            begin
              if (Frm_JON30.AdvStringGrid5.Cells[0,1] = '') and (Frm_JON30.AdvStringGrid4.Cells[0,0] <> '') then
              begin
                frm_JON30.bEnter := False;
                Frm_JON30.Proc_SendParent_ADV2(Frm_JON30.AdvStringGrid4.GetRealRow + 1, Frm_JON30.AdvStringGrid4.GetRealCol, True);
                Hide_Panel(lcsActiveEdit,1);
              end;
            end;
          end;
					if not GS_END_AUTOLOCK then
					begin
						BtnEdLock.Hint := 'F4)잠금';
						BtnEdLock.Tag  := 0;
						BtnEdLock.ImageIndex := 1;
						BtnEdLock.Down := True;
            lblEdLock.Style.TextColor := clRed;
            lblEdLock.Style.Font.Style := [fsBold,fsUnderline];
						Frm_JON30.N2.Enabled := False;
						Frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
						Frm_JON30.btnEPoiMove.Enabled := False;
						Frm_JON30.N7.Enabled := False;
						Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
						Frm_JON30.btnEPoiAMove.Enabled := False;
					end;

          if meoEndArea.CanFocus then meoEndArea.SetFocus;
        end;
        Hide_Panel(lcsActiveEdit,1);
      end;


      try
				if (GS_ALL_SEVEN) and (not GS_All7Type2) then
        begin
          //후불)스틱)적요)현대오일뱅크(3공단주유소)
          sTmp := meoStartArea.Text;
          iPos := Pos('(', meoStartArea.Text);   //'(' 위치

          if iPos > 0 then sTmp := Copy(meoStartArea.Text, 1, iPos-1); //후불)스틱)적요)현대오일뱅크
          iTmpL := LastDelimiter(')', sTmp);   //'요)현' 위치    마지막 ')'위치
          sSTPoi := Copy(sTmp, iTmpL + 1, 2);
          sEDPoi := Copy(meoEndArea.Text, 1, 2);

          if Not Assigned(Frm_JON63)  then Frm_JON63 := TFrm_JON63.Create(Nil);
          Frm_JON63.Hide;
          Frm_JON63.proc_Init;
          Frm_JON63.Tag := Self.Tag;
          Frm_JON63.bChkTime := True;
          Frm_JON63.Show;
          Frm_JON63.edt_StPoi.Text := sSTPoi;
          Frm_JON63.edt_EdPoi.Text := sEDPoi;
          Frm_JON63.btnSearch.Click;
        end;
      except
      end;

      key := 0;

			if (Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['2', '4', '8']) then
			begin
				if meoBigo.Visible = True then
					meoBigo.SetFocus
				else
					meoBigo2.SetFocus;
			end else
			begin
				if curRate.CanFocus then curRate.SetFocus;
			end;
		end else
    if Ord(key) in [VK_F7..VK_F12, Vk_F1] then
    begin
      sActieEdit := 'meoEndArea';
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        Vk_F7:
          if btnCmdUpdSave.Enabled then btnCmdUpdSave.OnClick(btnCmdUpdSave);
				Vk_F8: // 종료
				begin
					SetDebugeWrite('JON01N.meoEndAreaKeyUp->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then
            btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
          if btnCmdQuestion.Enabled then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
      end;
		end else
		if Key = VK_BACK then
		begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

			Frm_JON30.sPreSearchWord := '';
			J30ShowE := False;
			gmap_forword := '';

			if not GB_JON_BACKKEYUSE then Exit;
		end else
		if (Key = vk_delete) then
		begin
			J30ShowE := False;
		end else
		if (Key = VK_F4) then Exit
		else
//		if (key <> 229) then  //  20191224 한컴입력기 에서는 모든 한글이 229로 넘어옴 그래서 삭제 KHS
		begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

			gKWComp := '';
			if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
			begin
				if (BtnEdLock.Hint = 'F4)잠금') and (BtnEdLock.Tag = 0) then
				begin
					pSetLockMent(2);
				end;
			end;

			if J30ShowE = False then Proc_AreaSearchKDown_Added(Key, meoEndArea.Text);
			gsKMAiChargeStr := '';
		end;
	Except
    on e: exception do
    begin
			gbCallMartFileJON01 := False;
			Log('meoEndAreaKeyUp Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoEndAreaKeyUp Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.meoEndAreaPropertiesChange(Sender: TObject);
Var iRow, i : Integer;
begin
	SetDebugeWrite('JON01N.meoEndAreaPropertiesChange');
	SetDebugeWrite('JON01N-No[' + locsCuTel + '/' + IntToStr(self.Tag) + '/' + IntToStr(GS_JON01_TAB) + '] ' + meoEndArea.Text );

  if Length(AnsiString(meoEndArea.Text)) <= 38 then
  begin
    meoEndArea.Style.Font.Size := 16;
  end else
  if ( Length(AnsiString(meoEndArea.Text)) > 38 ) And ( Length(AnsiString(meoEndArea.Text)) <= 40 ) then  // 1자 2
  begin
    meoEndArea.Style.Font.Size := 15
  end else
  if ( Length(AnsiString(meoEndArea.Text)) > 40 ) And ( Length(AnsiString(meoEndArea.Text)) <= 42 ) then  // 1자 2
  begin
    meoEndArea.Style.Font.Size := 14
  end else
  if ( Length(AnsiString(meoEndArea.Text)) > 42 ) And ( Length(AnsiString(meoEndArea.Text)) <= 46 ) then  // 2자 4
  begin
    meoEndArea.Style.Font.Size := 13
  end else
  if ( Length(AnsiString(meoEndArea.Text)) > 46 ) And ( Length(AnsiString(meoEndArea.Text)) <= 50 ) then  // 2자 4
  begin
    meoEndArea.Style.Font.Size := 12
  end else
  if ( Length(AnsiString(meoEndArea.Text)) > 50 ) And ( Length(AnsiString(meoEndArea.Text)) <= 54 ) then  // 2자 4
  begin
    meoEndArea.Style.Font.Size := 11
  end else
  if ( Length(AnsiString(meoEndArea.Text)) > 54 ) then
  begin
    meoEndArea.Style.Font.Size := 10
  end;

	try
    // 도착지 입력 글자 저장
		if meoEndArea.Tag = 0 then
    begin
      iRow := Self.Tag;
      gsEdArea[iRow] := meoEndArea.Text;
      for i := 1 to ViaADDTag do
      begin
        if GT_PASS_INFO[iRow][i-1].AREA5 <> '' then
          gsEdArea[iRow] := StringReplace(gsEdArea[iRow], GT_PASS_INFO[iRow][i-1].AREA5 + '/', '', [rfReplaceAll]);
      end;
    end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.meoStartAreaEnter(Sender: TObject);
begin
	SetDebugeWrite('JON01N.meoStartAreaEnter');
  try
		locNowControlName := 'meoStartArea'; // 현재 활성화된 컨트롤 명.
    lcsActiveEdit := locNowControlName;

    // 신규 일때만 맵 표시 안함
    if ( loc_RateNOT ) And ( Not loc_Modify ) then Exit;

		if Assigned(Frm_JON30) then
    begin
      if ( Frm_JON30.Tag <> Self.Tag ) And ( Trim(TcxMemo(Sender).Text) <> '' )  then
      begin
				if ( Frm_JON30.AdvStringGrid1.Cells[0,1] <> '' ) Or
					 ( Frm_JON30.AdvStringGrid2.Cells[0,0] <> '' ) Or
					 ( Frm_JON30.AdvStringGrid3.Cells[0,0] <> '') then
				Hide_Panel(lcsActiveEdit, 0);
			end;

			Frm_JON30.Tag := Self.Tag;
		end;

    if J30ShowS then Exit;

  //  if Assigned(frmJON30) and (cxLabel20.Caption = 'F4)수정') then       //  20130703  LYB  잠김 상태에서도 검색창 표시 (팀장님지시)
    if Assigned(Frm_JON30) then
    begin
      if GS_MAP_AREA_AUTOSHOW then
      begin
        Frm_JON30.pnl_PoiAddress.Visible := False;
        Frm_JON30.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text);
				Frm_JON30.OnSelectedMap := SetStartAreaMap;
				if (not Frm_JON30.Visible) And ( meoStartArea.Text <> '' ) then // and (cxtStartXval.Text <> '') and (cxtStartYval.Text <> '') then //좌표가 선택이 안되도 검색어가 있으면 검색창표시
        begin
					lcsActiveEdit := locNowControlName;
					Hide_Panel(lcsActiveEdit,0);
				end;
			end else
      begin
        if (not Frm_JON30.Visible) and (cxtStartXval.Text <> '') and (cxtStartYval.Text <> '') then
				begin
					Hide_Panel(lcsActiveEdit,0);
					Frm_JON30.chk_Map(False);
				end;
      end;

      if ( Assigned(Frm_JON31) ) And ( Frm_JON31 <> nil ) And ( Frm_JON31.Showing ) then
      begin
        Frm_JON31.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text);
        Frm_JON31.OnSelectedMap := SetStartAreaMap;
      end;

      gKWComp := '';
    end;
  Except
    on e: exception do
    begin
      Log('meoStartAreaEnter Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoStartAreaEnter Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.meoStartAreaExit(Sender: TObject);
begin
	SetDebugeWrite('JON01N.meoStartAreaExit');
  try
    if Not gb_SpeechBubbleMouseOn then
    begin
      Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
      Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);
    end else Exit;

    if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
    begin
      if giArea_Charge_YN = 'y' then
      begin
        Proc_Driver_Charge;
      end else
        cxDriverCharge.Text := '';
    end;

    locNowControlName := ''; // 현재 활성화된 컨트롤 명.

    if Assigned(Frm_JON30) and (not (meoStartArea.Focused)) then
    begin
      gbCtrlVCancel := True;
      gbSCtrlV := False;
      PnlCtrlV.Visible := False;
      Hide_Panel(lcsActiveEdit,1);
      Frm_JON30.BtnAllSch.Down := False;
      GS_POISCH_ALL := False;
      Frm_JON30.btnAllSch.LookAndFeel.SkinName := 'Sharp';
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.meoStartAreaKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
Var iRate : Integer;
begin
	SetDebugeWrite('JON01N.meoStartAreaKeyDown');
	SetDebugeWrite('JON01N-No[' + locsCuTel + '/' + IntToStr(self.Tag) + '/' + IntToStr(GS_JON01_TAB) + '] ' + meoStartArea.Text );
	try
		if Assigned(Frm_JON30) then
		begin
			Frm_JON30.Tag := Self.Tag;
		end;

    lcsActiveEdit := 'meoStartArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
    sActieEdit := 'meoStartArea';
		gsKakaoAiActieEdit := 'meoStartArea'; // 카카오 요금 계산을 어느 입력란에서 keydown 되었는지 기록하기 위함
		// 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then Exit;
    if Key = VK_RETURN then
    begin
			if (Frm_JON30.gb2ndSearch) and (img_SpeechBubble.Visible) then Exit;

      Key := 0;
      if not IsNotModifyPrice and (GT_CHARGE_CAL = 1) then
      begin
        // 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
        if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) and ( not GS_ALL_SEVEN ) then
        begin
          tmrThRealDis.Tag := 0;
          proc_dis_alculation(Self.Tag, True);
          if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                                 else begin
                                        iRate := func_search_charge;
                                        if Not gsMyMainRateNoChange then
                                        begin
																					if BtnRaLock.Hint <> 'F4)잠금' then
																					begin
																						curRate.Value := iRate{ + cxCurRevisionRate.value};
																						OrgRate := curRate.Value{ - cxCurRevisionRate.value};
																					end else
																					begin
																						if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
																						begin
																							if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
																							begin
                                                pSetLockMent(3);
																							end;
																						end;
																					end;
                                        end;
                                      end;
        end;
      end;
      Exit;
    end;

    gbECtrlV := False;
    { TODO : Ctrl+V(붙여넣기)시 전검색단어 초기화-같은단어가들어오면검색이 안되는부분 붙여넣기시 허용 }
		if ( ssCtrl in Shift) and ( Key = Ord('V') ) then
    begin
      Frm_JON30.sPreSearchWord := '';
      gmap_forword := '';
      gbSCtrlV := True;
    end else
      gbSCtrlV := False;

    if Key in [VK_DOWN, VK_UP] then
    begin
      Exit; // 그리드에 포커스 넘기는건 KeyUp Event에서 처리한다.
    end;

    sAnsiSchTxt := meoStartArea.Text;

    if Key = VK_BACK then
    begin
      if ( BtnStLock.Tag = 1 ) And ( BtnStLock.Hint = 'F4)잠금' ) then
      begin
        if ( Pos('인근', meoStartArea.Text) = 0 ) And
           ( Pos('부근', meoStartArea.Text) = 0 ) And
           ( Pos('근처', meoStartArea.Text) = 0 ) then
        begin
          BtnStLock.Hint := 'F4)수정';
          BtnStLock.Tag  := 0;
          BtnStLock.Down := False;
          BtnStLock.ImageIndex := 0;
          lblStLock.Style.TextColor := $004B4B4B;
          lblStLock.Style.Font.Style := [fsBold];
          Frm_JON30.N1.Enabled := True;
          Frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
          Frm_JON30.btnSPoiMove.Enabled := True;
          Frm_JON30.N6.Enabled := True;
          Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
          Frm_JON30.btnSPoiAMove.Enabled := True;
        end;
      end;

      if (Length(widestring(meoStartArea.Text)) = 1) and ( BtnStLock.Hint <> 'F4)잠금' ) then
      begin
        Frm_JON30.Grid_Init(lcsActiveEdit,1);
        Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
        GS_FULLWORD_CMP := '';
      end else
      if (Length(widestring(sAnsiSchTxt)) = 0) then
      begin
        // 20120805 좌표 오류 체크 LYB
        gJONStaChkXY.Area1 := '';
        gJONStaChkXY.Area2 := '';
        gJONStaChkXY.Area3 := '';
        gJONStaChkXY.Area4 := '';
        gJONStaChkXY.Area5 := '';
        gJONStaChkXY.X := '';
        gJONStaChkXY.Y := '';
        gJONStaChkXY.GUIDE_X := '';
        gJONStaChkXY.GUIDE_Y := '';
        gJONStaChkXY.Gubun := '';

        // 키워드가 모두 지워진 상태에서 한번더 BACK 키를 누를경우 컨트롤 초기화 처리.
        lblStartAreaName.Text := '';
        cxtStartAreaDetail.Text := '';
        lcsConfAREA4            := '';
        lcsSta1 := '';
        lcsSta2 := '';
        lcsSta3 := ''; // 출1, 출2, 출3
        cxtStartXval.Text := '';
        cxtStartYval.Text := '';
        gsStartGUIDEXval := '';
        gsStartGUIDEYval := '';

        lcsStaDocId := '';
        lcsStaCellSel := '';
        lcsStaSchWord := '';
        GS_Grid_DEP := '';

        sBHSAddr := '';
        sBHEAddr := '';

        gKWComp := '';

        gmap_forword := '';
        GS_FULLWORD_CMP := '';
        gbSCtrlV := False;
        gbECtrlV := False;

        Frm_JON30.Grid_Init(lcsActiveEdit,1);
        Frm_JON30.Grid_Init(lcsActiveEdit,2);
        Frm_JON30.Grid_Init(lcsActiveEdit,3);
        Frm_JON30.Grid_Init(lcsActiveEdit,4);
        Hide_Panel(lcsActiveEdit,1);

        if BtnStLock.Hint = 'F4)잠금' then
        begin
          BtnStLock.Hint := 'F4)수정';
          BtnStLock.Tag  := 0;
          BtnStLock.Down := False;
          BtnStLock.ImageIndex := 0;
          lblStLock.Style.TextColor := $004B4B4B;
          lblStLock.Style.Font.Style := [fsBold];
          Frm_JON30.N1.Enabled := True;
          Frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
          Frm_JON30.btnSPoiMove.Enabled := True;
          Frm_JON30.N6.Enabled := True;
          Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
          Frm_JON30.btnSPoiAMove.Enabled := True;
        end;
        Exit;
      end else
      if (Length(sAnsiSchTxt) <= 2) and (BtnStLock.Hint <> 'F4)잠금') then
      begin
        gmap_forword := '';
      end else
      if (Length(sAnsiSchTxt) < Length(map_ls_Text)) then
      begin
        map_ls_Text := '';
        gmap_forword := '';
      end;
		end;

    if Ord(key) = VK_F4 then
    begin
      if BtnStLock.Hint = 'F4)잠금' then
      begin
        BtnStLock.Hint := 'F4)수정';
        BtnStLock.Tag  := 0;
        BtnStLock.Down := False;
        BtnStLock.ImageIndex := 0;
        lblStLock.Style.TextColor := $004B4B4B;
        lblStLock.Style.Font.Style := [fsBold];
        Frm_JON30.N1.Enabled := True;
        Frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
        Frm_JON30.btnSPoiMove.Enabled := True;
        Frm_JON30.N6.Enabled := True;
        Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
        Frm_JON30.btnSPoiAMove.Enabled := True;
      end else
      begin
        BtnStLock.Hint := 'F4)잠금';
        BtnStLock.Tag  := 0;
				BtnStLock.Down := True;
        BtnStLock.ImageIndex := 1;
        lblStLock.Style.TextColor := clRed;
        lblStLock.Style.Font.Style := [fsBold,fsUnderline];
        Frm_JON30.N1.Enabled := False;
        Frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
        Frm_JON30.btnSPoiMove.Enabled := False;
        Frm_JON30.N6.Enabled := False;
        Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
        Frm_JON30.btnSPoiAMove.Enabled := False;
      end;
      Exit;
    end else
    if Ord(key) = VK_F3 then
    begin
      Exit;
    end else
    if Ord(key) = VK_ESCAPE then  // ESC 키
    begin
      if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
      begin
        if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
          and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
					and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
				begin
					SetDebugeWrite('JON01N.meoStartAreaKeyDown->VK_ESCAPE');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
			end;
    end;
  Except
    on e: exception do
    begin
      Log('meoStartAreaKeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoStartAreaKeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.meoStartAreaKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
  procedure pJON03POISetFocus;
  begin
    if Frm_JON30.AdvStringGrid1.Cells[0,1] = '' then
    begin
      if Frm_JON30.AdvStringGrid2.Cells[0,0] = '' then
      begin
        if Frm_JON30.AdvStringGrid3.Cells[0,0] <> '' then
        begin
          Frm_JON30.AdvStringGrid1.ShowSelection := False;
          frm_JON30.AdvStringGrid2.ShowSelection := False;
          frm_JON30.AdvStringGrid3.ShowSelection := True;
          if frm_JON30.AdvStringGrid3.CanFocus then
            frm_JON30.AdvStringGrid3.SetFocus;
        end;
      end else
			begin
				frm_JON30.AdvStringGrid1.ShowSelection := False;
        frm_JON30.AdvStringGrid2.ShowSelection := True;
        frm_JON30.AdvStringGrid3.ShowSelection := False;
        if frm_JON30.AdvStringGrid2.CanFocus then
          frm_JON30.AdvStringGrid2.SetFocus;
        frm_JON30.AdvStringGrid2.FocusCell(0,0);
      end;
    end else
    begin
      frm_JON30.AdvStringGrid1.ShowSelection := True;
      frm_JON30.AdvStringGrid2.ShowSelection := False;
      frm_JON30.AdvStringGrid3.ShowSelection := False;
      if frm_JON30.AdvStringGrid1.CanFocus then
        frm_JON30.AdvStringGrid1.SetFocus;
    end;
  end;
begin
//	meoCuCCMemo.text := meoCuCCMemo.text + '/'+ IntToStr(key); 한컴입력기 테스트용
	SetDebugeWrite('JON01N.meoStartAreaKeyUp');
	frm_JON30.trm_WK3SEC.Enabled := False;
	TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);
  try
    lcsActiveEdit := 'meoStartArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.

    // 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
    //-  if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then  Exit;
    if (Key = 39) or (Key = 35) or (Key = 36) then  Exit;

    if ( ssCtrl in Shift) and ( Key = VK_LEFT ) then
    begin
      Exit;
    end;

    if Key = VK_LEFT then Exit;

    if fCheckMaxLength(meoStartArea, 98) then Key := 0;

    sAnsiSchTxt := meoStartArea.Text;

    if Length(Trim(sAnsiSchTxt)) > 2 then
    begin
      meoViaArea1.Enabled := True;
      cxViaAreaName1.Enabled := True;
			BtnViaMinus1.Enabled := True;
      sBHSAddr := '';
      sBHEAddr := '';
    end else
    begin
      J30ShowS := False;
      sBHSAddr := '';
      sBHEAddr := '';
    end;

    // 검색 그리드로 포커스 이동..
    if Key in [VK_DOWN] then
    begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);
      pJON03POISetFocus;
    end else
		if (Shift = [ssShift]) and (Key = vk_Return) then //$0D) then
		begin
			if (Frm_JON30.gb2ndSearch) and (img_SpeechBubble.Visible) then
			begin
				Frm_JON30.TT2.Tag := 1;
				Frm_JON30.TT2.Interval := 1;
				Frm_JON30.TT2.Enabled  := True;

				Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
				Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

				Exit;
			end;
		end else
		if Key = VK_RETURN then
    begin
      if lcsActiveEdit = 'meoStartArea' then
      begin
				Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
				Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

        if frm_JON30.Visible = True then
        begin
					if BtnStLock.Hint <> 'F4)잠금' then     // 20130703  LYB
					begin
						if frm_JON30.AdvStringGrid1.Cells[0,1] <> '' then
						begin
							frm_JON30.bEnter := False;
							frm_JON30.Proc_SendParent(frm_JON30.AdvStringGrid1.GetRealRow + 1);
							Hide_Panel(lcsActiveEdit,1);
						end;

						if GS_SEARCH_POTAL_FIRST then
						begin
							if (frm_JON30.AdvStringGrid1.Cells[0,1] = '') and (frm_JON30.AdvStringGrid3.Cells[0,1] <> '') then
							begin
                frm_JON30.bEnter := False;
								frm_JON30.Proc_SendParent_ADV3(frm_JON30.AdvStringGrid3.GetRealRow + 1, True);
							end;
						end else
						begin
							if (frm_JON30.AdvStringGrid1.Cells[0,1] = '') and (frm_JON30.AdvStringGrid2.Cells[0,0] <> '') then
							begin
								frm_JON30.bEnter := False;
								frm_JON30.Proc_SendParent_ADV2(frm_JON30.AdvStringGrid2.GetRealRow + 1, frm_JON30.AdvStringGrid2.GetRealCol, True);
								Hide_Panel(lcsActiveEdit,1);
							end;
            end;

						if GS_START_AUTOLOCK then
            begin
							BtnStLock.Hint := 'F4)잠금';
              BtnStLock.Tag  := 0;
							BtnStLock.Down := True;
              BtnStLock.ImageIndex := 1;
              lblStLock.Style.TextColor := clRed;
              lblStLock.Style.Font.Style := [fsBold,fsUnderline];
              frm_JON30.N1.Enabled := False;
              frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
              Frm_JON30.btnSPoiMove.Enabled := False;
              frm_JON30.N6.Enabled := False;
              frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
              Frm_JON30.btnSPoiAMove.Enabled := False;
            end;
            if meoStartArea.CanFocus then meoStartArea.SetFocus;
					end;
				end;
        key := 0;
        if meoStartArea.Hint <> 'STOPFOCUS' then
        begin // 포커스 더이상 넘어가지 않도록 한다.
          if ViaADDTag > 0 then meoViaArea1.SetFocus
                           else meoEndArea.SetFocus;
  //-        meoEndArea.SetFocus;
          gmap_forword := '';
        end else
        begin
          meoStartArea.Hint := ''; // 포커스 더이상 넘어가지 않도록 한다.
        end;
      end else
      begin
        key := 0;
        if curRate.CanFocus then curRate.SetFocus;
      end;
    end else
    if Ord(key) in [VK_F7..VK_F12, VK_F2, Vk_F1] then
    begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

      sActieEdit := 'meoStartArea';
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        Vk_F7:
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave); // 수정
				Vk_F8:
				begin
					SetDebugeWrite('JON01N.meoStartAreaKeyUp->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit); // 종료
				end;
				Vk_F9:
					begin
            if not btnCmdJoin.Enabled then Exit; // 접수
						if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
						begin
							if giArea_Charge_YN = 'y' then
							begin
								Proc_Driver_Charge;
							end else
								cxDriverCharge.Text := '';
						end;
						btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
					if btnCmdWait.Enabled then
					begin
						if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
						begin
							if giArea_Charge_YN = 'y' then
							begin
								Proc_Driver_Charge;
							end else
								cxDriverCharge.Text := '';
						end;
						btnCmdWait.OnClick(btnCmdWait); // 대기
					end;
        Vk_F11:
					if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then
					begin
						if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
						begin
							if giArea_Charge_YN = 'y' then
							begin
								Proc_Driver_Charge;
							end else
								cxDriverCharge.Text := '';
						end;
						btnCmdMultiCall.Click;   // 복수콜
					end;
        Vk_F12:
					if btnCmdQuestion.Enabled then
					begin
						if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
						begin
							if giArea_Charge_YN = 'y' then
							begin
								Proc_Driver_Charge;
							end else
								cxDriverCharge.Text := '';
						end;
						btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
					end;
			end;
		end else
		if Key = VK_BACK then
		begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

			Frm_JON30.sPreSearchWord := '';
			J30ShowS := False;
			gmap_forword := '';

			// 2011.05.18 CDS.
			if not GB_JON_BACKKEYUSE then Exit;
		end else
		if (Key = vk_delete) then
		begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

		  J30ShowS := False;
		end else
		if (Key = VK_F4) then Exit
		else
//		if (key <> 229) then  //  20191224 한컴입력기 에서는 모든 한글이 229로 넘어옴 그래서 삭제 KHS
		begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

			if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
			begin
				if (BtnStLock.Hint = 'F4)잠금') and (BtnStLock.Tag = 0) then
				begin
          pSetLockMent(1);
				end;
			end;

			gKWComp := '';
			if J30ShowS = False then Proc_AreaSearchKDown_Added(Key, meoStartArea.Text);
			gsKMAiChargeStr := '';

		end;
	Except
    on e: exception do
    begin
			gbCallMartFileJON01 := False;
			Log('meoStartAreaKeyUp Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoStartAreaKeyUp Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.meoStartAreaMouseEnter(Sender: TObject);
begin
  TcxCustomTextEdit(Sender).Properties.AutoSelect := False;
end;

procedure TFrm_JON01N.meoStartAreaMouseLeave(Sender: TObject);
begin
	TcxCustomTextEdit(Sender).Properties.AutoSelect := True;
end;

procedure TFrm_JON01N.meoStartAreaPropertiesChange(Sender: TObject);
Var iRow, i : Integer;
    sLine : String;
begin
	SetDebugeWrite('JON01N.meoStartAreaPropertiesChange');
	SetDebugeWrite('JON01N-No[' + locsCuTel + '/' + IntToStr(self.Tag) + '/' + IntToStr(GS_JON01_TAB) + '] ' + meoStartArea.Text );
	try
    meoStartArea.Hint := ''; // 포커스 더이상 넘어가지 않도록 한다.

    if (lblStartAreaName.Text <> '') and (meoStartArea.Text <> '') then
      btnStartLocalSave.Enabled := True
    else
      btnStartLocalSave.Enabled := False;

    if ( meoStartArea.Style.Font.Size <> 16 ) And ( Length(AnsiString(meoStartArea.Text)) <= 38 ) then
    begin
      meoStartArea.Style.Font.Size := 16;
    end else
    if ( meoStartArea.Style.Font.Size <> 15 ) And
       ( Length(AnsiString(meoStartArea.Text)) > 38 ) And ( Length(AnsiString(meoStartArea.Text)) <= 40 ) then  // 1자 2
    begin
      meoStartArea.Style.Font.Size := 15
    end else
    if ( meoStartArea.Style.Font.Size <> 14 ) And
       ( Length(AnsiString(meoStartArea.Text)) > 40 ) And ( Length(AnsiString(meoStartArea.Text)) <= 42 ) then  // 1자 2
    begin
      meoStartArea.Style.Font.Size := 14
    end else
    if ( meoStartArea.Style.Font.Size <> 13 ) And
       ( Length(AnsiString(meoStartArea.Text)) > 42 ) And ( Length(AnsiString(meoStartArea.Text)) <= 46 ) then  // 2자 4
    begin
      meoStartArea.Style.Font.Size := 13
    end else
    if ( meoStartArea.Style.Font.Size <> 12 ) And
       ( Length(AnsiString(meoStartArea.Text)) > 46 ) And ( Length(AnsiString(meoStartArea.Text)) <= 50 ) then  // 2자 4
    begin
      meoStartArea.Style.Font.Size := 12
    end else
    if ( meoStartArea.Style.Font.Size <> 11 ) And
       ( Length(AnsiString(meoStartArea.Text)) > 50 ) And ( Length(AnsiString(meoStartArea.Text)) <= 54 ) then  // 2자 4
    begin
      meoStartArea.Style.Font.Size := 11
    end else
    if ( meoStartArea.Style.Font.Size <> 10 ) And
       ( Length(AnsiString(meoStartArea.Text)) > 54 ) then
    begin
      meoStartArea.Style.Font.Size := 10
    end;
	except on E: Exception do
    Assert(False, E.Message);
  end;

  try
    // 출발지 입력 글자 저장
    sLine := '1';
    if meoStartArea.Tag = 0 then
    begin
      iRow := Self.Tag;
      sLine := '2';
      gsStArea[iRow] := meoStartArea.Text;
      sLine := '3';
      for i := 1 to ViaADDTag do
      begin
        sLine := '4';
        if ( i < 1 ) Or ( i > 5 ) then Break;
        if GT_PASS_INFO[iRow][i-1].AREA5 <> '' then
          gsStArea[iRow] := StringReplace(gsStArea[iRow],'/'+ GT_PASS_INFO[iRow][i-1].AREA5, '', [rfReplaceAll]);

        sLine := '5';
      end;
    end;
	except on E: Exception do
    Assert(False, sLine + ' - ' + IntToStr(iRow) + ' - ' + IntToStr(i) + ' - ' + meoStartArea.Text + ' - ' + E.Message);
  end;
end;

procedure TFrm_JON01N.meoViaArea1Enter(Sender: TObject);
var iNowTag : integer;
begin
	SetDebugeWrite('JON01N.meoViaArea1Enter');
	try
		iNowTag := TcxMemo(Sender).Tag;

    locNowControlName := 'meoViaArea'; // 현재 활성화된 컨트롤 명.
    lcsActiveEdit := locNowControlName;

    if Assigned(Frm_JON30) then
    begin
      if ( Frm_JON30.Tag <> Self.Tag ) And ( Trim(TcxMemo(Sender).Text) <> '' )  then
      begin
        if ( Frm_JON30.AdvStringGrid8.Cells[0,1] <> '' ) Or
           ( Frm_JON30.AdvStringGrid7.Cells[0,0] <> '' ) Or
           ( Frm_JON30.AdvStringGrid9.Cells[0,0] <> '') then
        Hide_Panel(lcsActiveEdit, 0);
      end;
			Frm_JON30.Tag := Self.Tag;
		end;

    if  J30ShowS = True then
    begin
			Exit;
    end;
    if Assigned(frm_JON30) then
    begin
      if GS_MAP_AREA_AUTOSHOW then
      begin
        if iNowTag = 1 then
        begin
					if XposVia[1]<> '' then
            Frm_JON30.ViaPos(meoViaArea1.Text, XposVia[1], YposVia[1]);
        end	else
        begin
          if XposVia[iNowTag] <> '' then
            Frm_JON30.ViaPos(meoViaArea[iNowTag].Text, XposVia[iNowTag], YposVia[iNowTag]);
        end;
        if (not Frm_JON30.Visible) and ( meoViaArea[iNowTag].Text <> '') then // (XposVia[iNowTag] <> '') and (YposVia[iNowTag] <> '') then
        begin
          lcsActiveEdit := locNowControlName;
					Hide_Panel(lcsActiveEdit,0);
				end;
      end else
      begin
				if (not Frm_JON30.Visible) and (XposVia[iNowTag] <> '') and (YposVia[iNowTag] <> '') then
        begin
          Hide_Panel(lcsActiveEdit,0);
          Frm_JON30.chk_Map(False);
        end;
      end;
      gKWComp := '';
  	end;
  Except
    on e: exception do
    begin
      Log('meoViaArea1Enter Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoViaArea1Enter Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.meoViaArea1Exit(Sender: TObject);
begin
  SetDebugeWrite('JON01N.meoViaArea1Exit');
  try
    if Not gb_SpeechBubbleMouseOn then
    begin
      Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
      Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);
    end else Exit;

    locNowControlName := ''; // 현재 활성화된 컨트롤 명.

    if Assigned(Frm_JON30) and (not (meoViaArea1.Focused)) then
    begin
      gbCtrlVCancel := True;
      gbVCtrlV := False;
      PnlCtrlV.Visible := False;
      Hide_Panel(lcsActiveEdit,1);
      Frm_JON30.BtnAllSch.Down := False;
      GS_POISCH_ALL := False;
      Frm_JON30.btnAllSch.LookAndFeel.SkinName := 'Sharp';
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.meoViaArea1KeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
var iTag, i : integer;
	tmpMeoVia : TcxMemo;
	tmpViaLock : TAdvGlowButton;
	tmpViaAreaName : TcxLabel;
begin
	SetDebugeWrite('JON01N.meoViaArea1KeyDown');
  try
		ViaNowTag := TcxMemo(Sender).Tag;
		if ViaNowTag = 1 then
		begin
			tmpMeoVia := meoViaArea1;
			tmpViaLock := BtnViaLock1;
			tmpViaAreaName := cxViaAreaName1;
		end	else
		begin
			tmpMeoVia := meoViaArea[ViaNowTag];
			tmpViaLock := BtnViaLock[ViaNowTag];
			tmpViaAreaName := cxViaAreaName[ViaNowTag];
		end;
		sAnsiSchTxt := tmpMeoVia.Text;

		// 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
		if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then Exit;

    if Key in [VK_DOWN, VK_UP] then
    begin
      Exit; // 그리드에 포커스 넘기는건 KeyUp Event에서 처리한다.
    end;

    if Key = VK_BACK then
    begin
			if (Length(widestring(tmpMeoVia.Text)) = 1) and ( tmpViaLock.Hint <> 'F4)잠금' ) then
			begin
				Frm_JON30.Grid_Init(lcsActiveEdit,1);
				Frm_JON30.Grid_Init(lcsActiveEdit,2);
				Frm_JON30.Grid_Init(lcsActiveEdit,3);
				Frm_JON30.Grid_Init(lcsActiveEdit,4);
				GS_FULLWORD_CMP := '';
			end else
			if (Length(widestring(sAnsiSchTxt)) = 0) then
			begin
				gKWComp := '';
				gmap_forword := '';

				Frm_JON30.Grid_Init(lcsActiveEdit,1);
				Frm_JON30.Grid_Init(lcsActiveEdit,2);
				Frm_JON30.Grid_Init(lcsActiveEdit,3);
				Frm_JON30.Grid_Init(lcsActiveEdit,4);

				if ViaNowTag = 1 then
				begin
					BtnViaLock1.Hint := 'F4)수정';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := False;
					BtnViaLock1.ImageIndex := 0;
				end else
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)수정';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := False;
					BtnViaLock[ViaNowTag].ImageIndex := 0;
				end;
				Hide_Panel(lcsActiveEdit,1);
				Exit;
      end else
			if (Length(sAnsiSchTxt) <= 2) and (BtnViaLock[ViaNowTag].Hint <> 'F4)잠금') then
			begin
				gmap_forword := '';
			end else
			if (Length(sAnsiSchTxt) < Length(map_ls_Text)) then
			begin
				map_ls_Text := '';
				gmap_forword := '';
			end;
		end;

		if Ord(key) = VK_F4 then
		begin
			if ViaNowTag = 1 then
			begin
				if BtnViaLock1.Hint = 'F4)잠금' then
				begin
					BtnViaLock1.Hint := 'F4)수정';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := False;
					BtnViaLock1.ImageIndex := 0;
				end else
				begin
					BtnViaLock1.Hint := 'F4)잠금';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := True;
					BtnViaLock1.ImageIndex := 1;
				end;
			end else
			begin
				if BtnViaLock[ViaNowTag].Hint = 'F4)잠금' then
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)수정';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := False;
					BtnViaLock[ViaNowTag].ImageIndex := 0;
				end else
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)잠금';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := True;
					BtnViaLock[ViaNowTag].ImageIndex := 1;
				end;
			end;

			Exit;
    end else
		if Ord(key) = VK_F5 then
		begin
      BtnViaAddClick(Sender);
    end;

    if Ord(key) = VK_F6 then
    begin
      iTag := ViaNowTag; //삭제원하는 경유지 위치
      if iTag = 1 then BtnViaMinus1.Click
                  else BtnViaMinus[ViaNowTag].Click;
		end;

    lcsActiveEdit := 'meoViaArea';

		if Key = VK_TAB then
		begin
			Key := 0;
//			sleep(800); //너무 빠른 이동을 막기위하여 1초 추가 20181116 KHS
			while i <= 800 do
			begin
				Application.ProcessMessages;
				Inc(i);
			end;
			// 엔터키 입력 일때,,   그리드에 경유지 정보 추가 한다.
			if tmpViaAreaName.Caption <> '' then
			begin
				ViaOK; // 경유지 저장 및 화면 닫기.
				Hide_Panel('meoViaArea',1);

				if meoViaArea[TcxMemo(sender).Tag + 1].Text <> '' then
					meoViaArea[TcxMemo(sender).Tag + 1].SetFocus
				else
				begin
					gsKakaoAiActieEdit := 'meoViaArea';
					if meoEndArea.CanFocus then meoEndArea.SetFocus;
				end;
			end else
			begin
				if (tmpViaLock.Hint <> 'F4)잠금') and (Frm_Jon30.gB_ViaIng) then
				begin
					//시작 grpViaArea.Top + 28부터 22씩 증가
					pnl_ViaMent.Left := 1;
					pnl_ViaMent.Top := grpViaArea.Top + 28;
					if ViaNowTag = 1 then
						pnl_ViaMent.Top :=  pnl_ViaMent.Top
					else
						pnl_ViaMent.Top :=  pnl_ViaMent.Top + ((ViaNowTag-1) * 22);
          pnl_ViaMent.BringToFront;
					pnl_ViaMent.Visible := True; //POI검색중....
					pnl_ViaMent.Hint := 'Enter';
				end else //잠금상태에서 포커스 이동
				begin
					if meoViaArea[TcxMemo(sender).Tag + 1].Text <> '' then
						meoViaArea[TcxMemo(sender).Tag + 1].SetFocus
					else
					begin
						gsKakaoAiActieEdit := 'meoViaArea';
						if meoEndArea.CanFocus then meoEndArea.SetFocus;
					end;
				end;
			end;

			if ViaNowTag = 1 then
			begin
				if cxViaAreaName1.Caption <> '' then
				begin
					BtnViaLock1.Hint := 'F4)잠금';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := True;
					BtnViaLock1.ImageIndex := 1;
				end;
			end	else
			begin
				if cxViaAreaName[ViaNowTag].Caption <> '' then
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)잠금';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := True;
					BtnViaLock[ViaNowTag].ImageIndex := 1;
				end;
			end;
		end;
	Except
    on e: exception do
    begin
      Log('meoViaArea1KeyDown Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoViaArea1KeyDown Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.meoViaArea1KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
  procedure pJON03POISetFocus;
  begin
		if Frm_JON30.AdvStringGrid8.Cells[0,1] = '' then
		begin
      if Frm_JON30.AdvStringGrid7.Cells[0,0] = '' then
      begin
				if Frm_JON30.AdvStringGrid9.Cells[0,0] <> '' then
        begin
					Frm_JON30.AdvStringGrid8.ShowSelection := False;
					Frm_JON30.AdvStringGrid7.ShowSelection := False;
					Frm_JON30.AdvStringGrid9.ShowSelection := True;
          Frm_JON30.AdvStringGrid9.SetFocus;
        end;
      end else
      begin
        Frm_JON30.AdvStringGrid8.ShowSelection := False;
				Frm_JON30.AdvStringGrid7.ShowSelection := True;
				Frm_JON30.AdvStringGrid9.ShowSelection := False;
				Frm_JON30.AdvStringGrid7.SetFocus;
        Frm_JON30.AdvStringGrid7.FocusCell(0,0);
			end;
    end else
    begin
			Frm_JON30.AdvStringGrid8.ShowSelection := True;
			Frm_JON30.AdvStringGrid7.ShowSelection := False;
			Frm_JON30.AdvStringGrid9.ShowSelection := False;
      Frm_JON30.AdvStringGrid8.SetFocus;
    end;
  end;
var i : integer;
	tmpMeoVia : TcxMemo;
	tmpViaLock : TAdvGlowButton;
	tmpViaAreaName : TcxLabel;
begin
	SetDebugeWrite('JON01N.meoViaArea1KeyUp');
  try
		ViaNowTag := TcxMemo(Sender).Tag;
		if ViaNowTag = 1 then
		begin
			tmpMeoVia := meoViaArea1;
			tmpViaLock := BtnViaLock1;
			tmpViaAreaName := cxViaAreaName1;
		end	else
		begin
			tmpMeoVia := meoViaArea[ViaNowTag];
			tmpViaLock := BtnViaLock[ViaNowTag];
			tmpViaAreaName := cxViaAreaName[ViaNowTag];
		end;

		tmpMeoVia.text := ReplaceAll(Trim(tmpMeoVia.Text), #$D#$A, '');
		sAnsiSchTxt := tmpMeoVia.Text;

		if Assigned(Frm_JON30) then
		begin
			Frm_JON30.Tag := Self.Tag;
		end;

		lcsActiveEdit := 'meoViaArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.

    // 좌, 우, HOME, END 방향키는 이벤트 타지 않도록 한다.
		// if (Key = 37) or (Key = 39) or (Key = 35) or (Key = 36) then  Exit;
		if (Key = 39) or (Key = 35) or (Key = 36) then  Exit;

    if ( ssCtrl in Shift) and ( Key = VK_LEFT ) then
    begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);
			Exit;
		end;

    if Key = VK_LEFT then Exit;

    // 검색 그리드로 포커스 이동..
    if ( Key in [VK_DOWN, VK_UP] ) then
    begin
      pJON03POISetFocus;
    end else
    if Key = VK_BACK then
    begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

      Frm_JON30.sPreSearchWord := '';
      J30ShowS := False;
      gmap_forword := '';

			if Length(sAnsiSchTxt) <= 1 then
			begin
				if ViaNowTag = 1 then
				begin
					cxViaAreaName1.Caption := '';
				end else
				if ViaNowTag > 1 then
				begin
					cxViaAreaName[ViaNowTag].Caption := '';
				end;
				XposVia[ViaNowTag] := '';
				YposVia[ViaNowTag] := '';
				ViaAreaDetail[ViaNowTag] := '';
				ViaAreaName[ViaNowTag] := '';
				DocId[ViaNowTag] := '';
				CellSel[ViaNowTag] := '';
				SchWord[ViaNowTag] := '';
				ViaSA1[ViaNowTag] := '';
				ViaSA2[ViaNowTag] := '';
				ViaSA3[ViaNowTag] := ''; // 출1, 출2, 출3
			end;
			if ( Length(sAnsiSchTxt) = 0 ) then ViaOK;
		end else
		if (Shift = [ssShift]) and (Key = vk_Return) then //$0D) then
		begin
			if (Frm_JON30.gb2ndSearch) and (img_SpeechBubble.Visible) then
			begin
				Frm_JON30.TT2.Tag := 1;
				Frm_JON30.TT2.Interval := 1;
				Frm_JON30.TT2.Enabled  := True;

				Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
				Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

				Exit;
			end;
		end else
		if Key = VK_RETURN then
		begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

//			sleep(800); //너무 빠른 이동을 막기위하여 1초 추가 20181116 KHS
			while i <= 800 do
			begin
				Application.ProcessMessages;
				Inc(i);
			end;
			if tmpViaAreaName.Caption <> '' then
			begin
				ViaOK; // 경유지 저장 및 화면 닫기.
				Hide_Panel('meoViaArea',0);

				if meoViaArea[TcxMemo(sender).Tag + 1].Text <> '' then
					meoViaArea[TcxMemo(sender).Tag + 1].SetFocus
				else
				begin
					gsKakaoAiActieEdit := 'meoViaArea';

					if meoEndArea.CanFocus then meoEndArea.SetFocus;
				end;
			end else
			begin
				if (tmpViaLock.Hint <> 'F4)잠금') and (Frm_Jon30.gB_ViaIng) then
				begin
					//시작 310부터 22씩 증가
					//시작 grpViaArea.Top + 28부터 22씩 증가
					pnl_ViaMent.Left := 1;
					pnl_ViaMent.Top := grpViaArea.Top + 28;
					if ViaNowTag = 1 then
						pnl_ViaMent.Top :=  pnl_ViaMent.Top
					else
						pnl_ViaMent.Top :=  pnl_ViaMent.Top + ((ViaNowTag-1) * 22);
          pnl_ViaMent.BringToFront;
					pnl_ViaMent.Visible := True; //POI검색중....
					pnl_ViaMent.Hint := 'Enter';
				end else //잠금상태에서 포커스 이동
				begin
					if meoViaArea[TcxMemo(sender).Tag + 1].Text <> '' then
						meoViaArea[TcxMemo(sender).Tag + 1].SetFocus
					else
					begin
						gsKakaoAiActieEdit := 'meoViaArea';

						if meoEndArea.CanFocus then meoEndArea.SetFocus;
					end;
				end;
			end;

			if ViaNowTag = 1 then
			begin
				if cxViaAreaName1.Caption <> '' then
				begin
					BtnViaLock1.Hint := 'F4)잠금';
					BtnViaLock1.Tag  := 0;
					BtnViaLock1.Down := True;
					BtnViaLock1.ImageIndex := 1;
				end;
			end	else
			begin
				if cxViaAreaName[ViaNowTag].Caption <> '' then
				begin
					BtnViaLock[ViaNowTag].Hint := 'F4)잠금';
					BtnViaLock[ViaNowTag].Tag  := 0;
					BtnViaLock[ViaNowTag].Down := True;
					BtnViaLock[ViaNowTag].ImageIndex := 1;
				end;
			end;
		end else
		if (Key = VK_F4) then
    begin
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);

      Exit;
		end else
//		if (key <> 229) then  //  20191224 한컴입력기 에서는 모든 한글이 229로 넘어옴 그래서 삭제 KHS
		begin
			gKWComp := '';
			GS_VIA_Tag := ViaNowTag;
			Frm_JON30.gb2ndSearch := False; //확장검색 진행 막음
			Proc_2ndSearchIng(Self.Tag, Frm_JON30.gb2ndSearch);
			Proc_AreaSearchKDown_Added(Key, sAnsiSchTxt);
			gsKMAiChargeStr := '';
		end;
  Except
    on e: exception do
    begin
      gbCallMartFileJON01 := False;
			Log('meoViaArea1KeyUp Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'meoViaArea1KeyUp Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.meoViaArea1PropertiesChange(Sender: TObject);
begin
  TcxMemo(Sender).Text := StringReplace(TcxMemo(Sender).Text, #9, '', [rfReplaceAll]);  // Tab키 삭제
end;

procedure TFrm_JON01N.miCuDelClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.cxBtnCuDelClick');
  // 권한 적용 (지호 2008-08-19)
  if TCK_USER_PER.JON_CustDel <> '1' then
  begin
    GMessagebox('고객 삭제 권한이 없습니다.', CDMSE);
    Exit;
  end;
  proc_delete_customer;
end;

procedure TFrm_JON01N.miCuNewClick(Sender: TObject);
Var iRow : Integer;
begin
  SetDebugeWrite('JON01N.cxBtnCuNewClick');
  try
    if ( Not Assigned(Frm_CUT011) ) Or ( Frm_CUT011 = Nil ) then Frm_CUT011 := TFrm_CUT011.Create(Nil);

		Frm_CUT011.FControlInitial(true); // 컨트롤 초기화..

		Frm_CUT011.pCUT011Dock.bUnDock := pJON01Dock.bUnDock;
		Frm_CUT011.pCUT011Dock.HdNo    := Proc_HDNOSearch;//pJON01Dock.HdNo;
		Frm_CUT011.pCUT011Dock.BrNo    := Proc_BRNOSearch;//pJON01Dock.BrNo;
		Frm_CUT011.pCUT011Dock.BrName  := pJON01Dock.BrName;
    Frm_CUT011.pCUT011Dock.Gubun   := pJON01Dock.Gubun;
    Frm_CUT011.pCUT011Dock.Idx     := pJON01Dock.Idx;

		// 78 : 접수창에서 신규등록 58 : 수정창에서 신규등록
    if (btnCmdUpdSave.Visible) and (btnCmdUpdSave.Enabled) then
    begin
      iRow := Frm_CUT011.cxCustTel.DataController.AppendRecord;
      Frm_CUT011.cxCustTel.DataController.Values[iRow, 0] := StrToCall(cxtCuTel.Text);
      Frm_CUT011.cxCustTel.DataController.Values[iRow, 1] := '수신';
      Frm_CUT011.cxCustTel.DataController.Values[iRow, 3] := '해제';
			Frm_CUT011.Tag := 79;
		end else
		if (not btnCmdUpdSave.Visible) then
		begin
			iRow := Frm_CUT011.cxCustTel.DataController.AppendRecord;
			Frm_CUT011.cxCustTel.DataController.Values[iRow, 0] := StrToCall(cxtCuTel.Text);
			Frm_CUT011.cxCustTel.DataController.Values[iRow, 1] := '수신';
			Frm_CUT011.cxCustTel.DataController.Values[iRow, 3] := '해제';
			Frm_CUT011.Tag := 59;
		end;

	  Frm_CUT011.Hint := IntToStr(Self.Tag);
    Frm_CUT011.clbCuSeq.Caption := '';
    Frm_CUT011.proc_search_brKeyNum(Proc_BRNOSearch, Proc_MainKeyNumberSearch);

    if Frm_Main.JON01MNG[Self.Tag].Dock then
    begin
      Frm_CUT011.Left := Frm_Jon00.Left - (Frm_CUT011.Width + 1);
      Frm_CUT011.Top  := Frm_Jon00.Top + 100;
    end else
    begin
      Frm_CUT011.Left := Self.Left - (Frm_CUT011.Width + 1);
      Frm_CUT011.Top  := Self.Top + 100;
    end;
    Frm_CUT011.Show;

		Frm_CUT011.proc_cust_Intit;
		Frm_CUT011.cboCuLevel.itemindex := cboCuLevel.itemindex;
		Frm_CUT011.edtCuName.Text := edtCuName.Text;
		case CbCuGb.ItemIndex of
		0 : Frm_CUT011.rdoCuGb1.Checked := True;
		1 : Frm_CUT011.rdoCuGb2.Checked := True;
		2 :
			begin
				Frm_CUT011.rdoCuGb3.Checked := True;
//				Frm_CUT011.cboCuBubin.ItemIndex := Frm_CUT011.cboCuBubin.properties.Items.IndexOf(Trim(cxtCuBubin.Text));
			end;
		end;
	except on E: Exception do
		Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.miCustAddClick(Sender: TObject);
var
  sBrNo, sKeyNum, sSeq, sCustTel: string;
begin
  SetDebugeWrite('JON01N.BtnCustAddClick');
  if Length(Proc_HDNOSearch) < 3 then
  begin
    GMessagebox('지사정보를 선택하지 않았습니다. 지사를 선택 한 후에 오더접수를 하세요!', CDMSE);
    Exit;
  end;
  if (cxtCuTel.Text = '') and ((cxtCallTelNum.Text = '발신정보없음') or (cxtCallTelNum.Text = '')) then
  begin
    GMessagebox('고객번호는 ' + MDXCI_0005, CDMSE);
    if cxtCuTel.CanFocus then cxtCuTel.SetFocus;
    Exit;
  end;

  if TCK_USER_PER.COM_CustModify <> '1' then
  begin
    GMessagebox('고객 수정권한이 없습니다.', CDMSE);
    Exit;
  end;

  sBrNo   := Proc_BRNOSearch;
  sKeyNum := Proc_MainKeyNumberSearch;
  sSeq    := lcsCu_seq;
  sCustTel:= locsCuTel;

  try
    if ( not Assigned(Frm_CUT012) ) Or ( Frm_CUT012 = Nil ) then Frm_CUT012 := TFrm_CUT012.Create(Self);
    Frm_CUT012.Show(sBrNo, sKeyNum, sSeq, sCustTel);
  Except
  end;
end;

procedure TFrm_JON01N.miCuUpdateClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.cxBtnCuUpdateClick');
  try
    // 권한 적용 (지호 2008-08-19)
    if TCK_USER_PER.COM_CustModify <> '1' then
    begin
      GMessagebox('고객 수정권한이 없습니다.', CDMSE);
      Exit;
    end;

    if Pos('*', cxtCuTel.Text) > 0 then
    begin
      GMessageBox('전화번호가 보호된 고객은 수정할 수 없습니다.', CDMSE);
      Exit;
		end;

		if Trim(lcsCu_seq) = '' then
		begin
			GMessagebox('신규 미등록고객은 고객등록 후 수정이 가능합니다.', CDMSE);
			Exit;
		end;

    if ( Not Assigned(Frm_CUT011) ) Or ( Frm_CUT011 = Nil ) then Frm_CUT011 := TFrm_CUT011.Create(Nil);
    Frm_CUT011.pCUT011Dock.bUnDock := pJON01Dock.bUnDock;
		Frm_CUT011.pCUT011Dock.HdNo    := Proc_HDNOSearch;//pJON01Dock.HdNo;
		Frm_CUT011.pCUT011Dock.BrNo    := Proc_BRNOSearch;//pJON01Dock.BrNo;
    Frm_CUT011.pCUT011Dock.BrName  := pJON01Dock.BrName;
    Frm_CUT011.pCUT011Dock.Gubun   := pJON01Dock.Gubun;
    Frm_CUT011.pCUT011Dock.Idx     := pJON01Dock.Idx;

		// 69 : 수정창에서 고객수정 49 : 접수창에서 고객수정
    if (btnCmdUpdSave.Visible) and (btnCmdUpdSave.Enabled) then
			Frm_CUT011.Tag := 69
    else
    if (not btnCmdUpdSave.Visible) then
			Frm_CUT011.Tag := 49;


    Frm_CUT011.FControlInitial(true); // 컨트롤 초기화..
    Frm_CUT011.Hint := IntToStr(Self.Tag);
    Frm_CUT011.clbCuSeq.Caption := lcsCu_seq;
    Frm_CUT011.proc_search_brKeyNum(Proc_BRNOSearch, Proc_MainKeyNumberSearch);

//    if Frm_Main.JON01MNG[Self.Tag].Dock then
//    begin
//      Frm_CUT011.Left := Frm_Jon00.Left - (Frm_CUT011.Width + 1);
//      Frm_CUT011.Top  := Frm_Jon00.Top + 100;
//    end else
//    begin
//     	Frm_CUT011.Left := Self.Left - (Frm_CUT011.Width + 1);
//      Frm_CUT011.Top  := Self.Top + 100;
//    end;
    Frm_CUT011.Show;
    Frm_CUT011.proc_cust_Intit;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.miQRateClick(Sender: TObject);
begin
  if fSet601QRate(Self.Tag, Frm_Main.Frm_JON01N[Self.Tag]) then
  begin
  	RQAListView.DataController.SetRecordCount(0);
    btnRQALExit.Click;
    pCompareQRateInfo;
    GMessagebox('요금문의 완료', CDMSI);
  end;
end;

procedure TFrm_JON01N.miQRListClick(Sender: TObject);
begin
  if RQAListView.DataController.RecordCount > 0 then
  begin
    Lbl_Charge.Caption := '';
    pnl_Charge.Visible := False;
    gbRQAList.BringToFront;
    gbRQAList.Visible := True;
    pCompareQRateInfo;
  end;
end;

procedure TFrm_JON01N.mmoCbMemoEnter(Sender: TObject);
begin
  lblCbMemoFlag.Visible := False;
end;

procedure TFrm_JON01N.mmoCbMemoExit(Sender: TObject);
begin
  lblCbMemoFlag.Visible := (mmoCbMemo.Text = '') // 법인메모 입력 잔상.
end;

procedure TFrm_JON01N.mmoCbMemoFocusChanged(Sender: TObject);
begin
  lblCbMemoFlag.Visible := ( Not mmoCbMemo.Focused ) And (mmoCbMemo.Text = '');
end;

procedure TFrm_JON01N.mmoCbMemoKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if fCheckMaxLength(mmoCbMemo, 296) then Key := 0;
  TcxMemo(sender).Text := Enc_Control(TcxMemo(sender).Text);
  SetPnlCustMemoSize(Sender);
end;

procedure TFrm_JON01N.mmoCbMemoPropertiesChange(Sender: TObject);
begin
  if ( Not mmoCbMemo.Focused ) then
    lblCbMemoFlag.Visible := (mmoCbMemo.Text = ''); // 메모 입력 잔상.

  if grpTitle.Tag = 0 then SetPnlCustMemoSize(Sender);
end;

procedure TFrm_JON01N.pSetLabelClick(var sLabel: TcxLabel);
begin
	if sLabel.Tag = 0 then
  begin
    sLabel.Style.TextColor := $004B4B4B;
    sLabel.Style.Font.Size := 9;
    sLabel.Style.Font.Style := [fsBold];
//    sLabel.Style.Font.Style := [];
  end else
  begin
    sLabel.Style.TextColor := clBlue;
    sLabel.Style.Font.Size := 10;
    sLabel.Style.Font.Style := [fsBold,fsUnderline];
  end;
end;

procedure TFrm_JON01N.Proc_WTRCreate;
Var sTitle, sValue : String;
    i : Integer;
    ls_Rcrd : TStringList;
begin
  if advPMnuWTR.Items.Count > 3 then
  begin
    for i := advPMnuWTR.Items.Count - 4 downto 0 do
    begin
      advPMnuWTR.Items[i].Clear;
      advPMnuWTR.Items[i].Free;
    end;
  end;

  try
    ls_Rcrd := TStringList.Create;

    if ( GB_JON_WAITFARE_USE = 'D' ) Or ( GS_WaitFareList.Count = 0 ) then
    begin
      for i := 0 to GS_WaitFareDefault.Count - 1 do
      begin
        if Trim(GS_WaitFareDefault.ValueFromIndex[i]) = '' then Continue;
        GetTextSeperationEx2('│', GS_WaitFareDefault.ValueFromIndex[i], ls_Rcrd);

        if ls_Rcrd[0] = '0' then sTitle := ls_Rcrd[1] + ' (분)까지 ['      + FormatFloat('#,##0', StrToFloat(ls_Rcrd[2])) + '원]' else
        if ls_Rcrd[0] = '1' then sTitle := ls_Rcrd[1] + ' (시간:분)까지 [' + FormatFloat('#,##0', StrToFloat(ls_Rcrd[2])) + '원]';

        Proc_WTRMenuCreate(i, ls_Rcrd[1], sTitle, 'WaitTmR' + IntToStr(i+1), StrToInt(ls_Rcrd[2]));
      end;
    end else
    begin
      for i := 0 to GS_WaitFareList.Count - 1 do
      begin
        if Trim(GS_WaitFareList.ValueFromIndex[i]) = '' then Continue;
        GetTextSeperationEx2('│', GS_WaitFareList.ValueFromIndex[i], ls_Rcrd);

        if ls_Rcrd[0] = '0' then sTitle := ls_Rcrd[1] + ' (분)까지 ['      + FormatFloat('#,##0', StrToFloat(ls_Rcrd[2])) + '원]' else
        if ls_Rcrd[0] = '1' then sTitle := ls_Rcrd[1] + ' (시간:분)까지 [' + FormatFloat('#,##0', StrToFloat(ls_Rcrd[2])) + '원]';

        Proc_WTRMenuCreate(i, ls_Rcrd[1], sTitle, 'WaitTmR' + IntToStr(i+1), StrToInt(ls_Rcrd[2]));
      end;
    end;
  finally
    FreeAndNil(ls_Rcrd);
  end;
end;

// 대기시간별 요금 메뉴 생성.
procedure TFrm_JON01N.Proc_WTRMenuCreate(iSeq : Integer; sValue, sTitle, sComponentName: string; iTagMoney: Integer);
var
  mm: TMenuItem;
begin
  mm := TMenuItem.Create(advPMnuWTR);
  mm.AutoHotkeys := maManual;
  mm.Caption := sTitle;
  mm.Hint := sValue;
  mm.Name := 'mm_' + sComponentName;
  mm.Tag := iTagMoney; // 메뉴식별ID 값.
  mm.OnClick := Proc_WTRateMenu_Click; // 메뉴클릭 이벤트 생성.

  advPMnuWTR.Items.Insert(iSeq, mm);
end;

procedure TFrm_JON01N.Proc_WTRateMenu_Click(Sender: TObject);
var
  iRate: integer;
  sTitle: string;
begin
  SetDebugeWrite('JON01N.Proc_WTRateMenu_Click');
  // 메뉴 식별자 읽기..
  iRate := TMenuItem(Sender).Tag;
  if Pos(':', TMenuItem(Sender).Hint) > 0 then
    sTitle := TMenuItem(Sender).Hint
  else
    sTitle := ConvertMinutesToHoursAndMinutes(StrToInt(TMenuItem(Sender).Hint));

  cxTmWaitTime.Text := sTitle;
  cxCurWaitTmRate.Value := iRate;
end;

// 선택된 지사정보에서 대표번호를 추출 한다.
function TFrm_JON01N.Proc_MainKeyNumberSearch: string;
var
  iPos2: Integer;
  sKeyNumber, sTmp: string;
begin
  SetDebugeWrite('JON01N.Proc_MainKeyNumberSearch');
  try
    Result := '';
    sTmp := cboBranch.Text;

    if sTmp = '' then Exit;

    while (True) do
    begin
      iPos2 := Pos('[', Copy(sTmp, 1, Length(sTmp)));
      if iPos2 = 0 then
      begin
        sKeyNumber := Copy(sTmp, 1, Pos(']', sTmp) - 1);
        Break;
      end;
      sTmp := Copy(sTmp, iPos2 + 1, Length(sTmp));
    end;

    Result := sKeyNumber;
  except
    Result := '';
  end;
end;

function TFrm_JON01N.Proc_BRNOSearch: string;
begin
//  Result := Trim(RightStr(cboBranch.Text, 5)); // 본사코드,지사코드
  if ( slCboBranch.Count > 0 ) And ( cboBranch.ItemIndex >= 0 ) then
    Result := Trim(RightStr(slCboBranch[cboBranch.ItemIndex], 5)); // 본사코드,지사코드
end;

// 선택된 지사정보에서 본사코드를 추출 한다.
function TFrm_JON01N.Proc_HDNOSearch: string;
var
  sTmp: string;
begin
  // A100.B100:*NS법인[15889999]
  // *NS법인[15889999] A100.B100
//  sTmp := RightStr(cboBranch.Text, 11); // 본사코드,지사코드
  if ( slCboBranch.Count > 0 ) And ( cboBranch.ItemIndex >= 0 ) then
  begin
    sTmp := RightStr(slCboBranch[cboBranch.ItemIndex], 11); // 본사코드,지사코드
    Result := Trim(Copy(sTmp, 1, Pos('.', sTmp) - 1)); // 본사코드
  end;
end;

procedure TFrm_JON01N.pSetFormScroll(iFix, iHeight : Integer );
Var i, iScreenY, iFrameH, iFrameW : Integer;
begin
  try
    if Self.Tag = -1 then Exit;
    if grpTitle.Tag = -1 then Exit; // 조회/수정 모드에서는 한꺼번에 사이즈 조절을 위해

    //  iScreenY := 600;
    iScreenY := Screen.Monitors[Monitor.MonitorNum].Height;

    if iFix = 1 then
    begin
      Self.Height := iHeight;
      if Assigned(Frm_Jon00) And ( GS_JON01_TAB = 1 ) then
        Frm_Main.JON01MNG[Self.Tag].iFrmHeight := iHeight + 60
      else
        Frm_Main.JON01MNG[Self.Tag].iFrmHeight := iHeight ;
      Self.Constraints.MinWidth := 587;
      Self.Width := 587;
    end else
    begin
      if Frm_Main.JON01MNG[Self.Tag].iFrmHeight + iHeight > iScreenY then
      begin
        Self.Constraints.MinWidth := 587;
        Self.Width := 587;
        Self.Height := iScreenY;
        Frm_Main.JON01MNG[Self.Tag].iFrmHeight := Frm_Main.JON01MNG[Self.Tag].iFrmHeight + iHeight;

        if Monitor.MonitorNum = 0 then
        begin
          if Screen.Monitors[0].Width < ( Self.Left + Self.Width ) then
            Self.Left := Self.Left - 20;
				end;
      end else
      begin
        Frm_Main.JON01MNG[Self.Tag].iFrmHeight := Frm_Main.JON01MNG[Self.Tag].iFrmHeight + iHeight;
        if Assigned(Frm_Jon00) And ( GS_JON01_TAB = 1 ) then
          Self.Height := Frm_Main.JON01MNG[Self.Tag].iFrmHeight - 60
        else
          Self.Height := Frm_Main.JON01MNG[Self.Tag].iFrmHeight;
        Self.Constraints.MinWidth := 587;
        Self.Width := 587;
      end;
    end;

    iFrameH := 590;
    iFrameW := 593;
    if Assigned(Frm_Jon00) then
    begin
      for i := 0 to JON_MAX_CNT - 1 do
      begin
				if ( Frm_Main.JON01MNG[i].Use ) And ( Frm_Main.JON01MNG[i].CreateYN ) then
				begin
          if iFrameH = 0 then iFrameH := Frm_Main.JON01MNG[i].iFrmHeight;
          if iFrameW = 0 then iFrameW := Frm_Main.Frm_JON01N[i].Width;

          if iFrameH < Frm_Main.JON01MNG[i].iFrmHeight then
            iFrameH := Frm_Main.JON01MNG[i].iFrmHeight;

					if iFrameW < Frm_Main.Frm_JON01N[i].Width + 0 then
             iFrameW := Frm_Main.Frm_JON01N[i].Width + 0;
        end;
      end;
      Frm_Jon00.Height := iFrameH;
      Frm_Jon00.Width  := iFrameW;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.pInitFormSize;
Var iHeight : Integer;
begin
  if Self.Tag < 0 then Exit;
	SetDebugeWrite('JON01N.pInitFormSize');
  try
    { TODO : 접수창 사이즈 조절로 아주 중요 ------------------------------------------------------------------}

    pInitJon01Size(Frm_Main.JON01MNG[Self.Tag].bModify, gJon01Size[Self.Tag]);

    meoCuCCMemo.Height := 21;
    meoCuWorMemo.Height := meoCuCCMemo.Height;
    shpCenterMemo.Height := meoCuCCMemo.Height + 7;
    shpWorkMemo.Height := shpCenterMemo.Height;

    edt_CardMemo.Height := 21;
    mmoCbMemo.Height := edt_CardMemo.Height;
    shpSimpleMemo.Height := edt_CardMemo.Height + 7;
    shpCBMemo.Height := shpSimpleMemo.Height;

    grpTop2.Height := 145;
    gJon01Size[Self.Tag].grpTop2H := grpTop2.Height;
    grpCustView.Top := shpTop2.Top;
    grpCustView.Left := shpTop2.Left;
    grpCustView.Width := grpTop2.Width + 1;
    grpCustView.Height := shpTop2.Height + grpTop2.Height + 1;

    grpStartArea.Height := 80;
    meoStartArea.Height := 27;
    gJon01Size[Self.Tag].grpStartAreaH := grpStartArea.Height;

    grpEndArea.Height := 66;
    meoEndArea.Height := 27;
    gJon01Size[Self.Tag].grpEndAreaH := grpEndArea.Height;

    shpVia.Height := 0;
    gJon01Size[Self.Tag].shpViaH := shpVia.Height;
    grpViaArea.Height := 0;
    gJon01Size[Self.Tag].grpViaAreaH := grpViaArea.Height;

    if GB_JON_USEBUBIN then
    begin
      grpBubinV.Visible := True;

      grpOption.Height := 133;
      gJon01Size[Self.Tag].grpOptionH := grpOption.Height;

      if GB_JON_MEMO3_USE then
      begin
        grpWorkMemo.Height := 83;
        gJon01Size[Self.Tag].grpWorkMemoH := grpWorkMemo.Height;

        meoBigo3.Visible := True;
        LbmeoBigo3.Visible := True;

//        pSetFormScroll(1, cDHeight);
      end else
      begin
        grpWorkMemo.Height := 83 - 23;
        gJon01Size[Self.Tag].grpWorkMemoH := grpWorkMemo.Height;

        meoBigo3.Visible := False;
        LbmeoBigo3.Visible := False;

//        pSetFormScroll(1, cDHeight-20);
      end;
      CbCuGb.Tag := 1;
    end else
    begin
      grpBubinV.Visible := False;

      grpOption.Height := 133 - 51;
      gJon01Size[Self.Tag].grpOptionH := grpOption.Height;

      if GB_JON_MEMO3_USE then
      begin
        grpWorkMemo.Height := 83;
        gJon01Size[Self.Tag].grpWorkMemoH := grpWorkMemo.Height;

        meoBigo3.Visible := True;
        LbmeoBigo3.Visible := True;

//        pSetFormScroll(1, cDHeight - 21 );
      end else
      begin
        grpWorkMemo.Height := 83 - 23;
        gJon01Size[Self.Tag].grpWorkMemoH := grpWorkMemo.Height;

        meoBigo3.Visible := False;
        LbmeoBigo3.Visible := False;

//        pSetFormScroll(1, cDHeight - 41 );
      end;
      CbCuGb.Tag := 0;
    end;

    iHeight := pFormJon01Size(gJon01Size[Self.Tag]);
    pSetFormScroll(1, iHeight);

    iPnlWorkCnt := 0;
    iAPnlCustCnt := 0;
    iBPnlCustCnt := 0;
    SetPnlWorkMemoSize;
    { TODO : 접수창 사이즈 조절로 아주 중요 ------------------------------------------------------------------}
  except

  end;
end;

procedure TFrm_JON01N.pInitShow;
begin
	SetDebugeWrite('JON01N.pInitShow');
  try
		if ( GS_JON01_GROUPMOVE ) And ( Not Frm_Main.JON01MNG[Self.Tag].Dock ) And ( GS_JON01_TAB = 0 ) then
    begin
      if ( Assigned(MagneticWnd) ) then
      begin
        // Snapweite aktualisieren
        MagneticWnd.SnapWidth := 15;
        //frmMain als Parent Form zum andocken zuweisen
        MagneticWnd.AddWindow(Self.Handle, 0, MagneticWndProc);
      end else
      begin
        MagneticWnd := TMagnetic.Create;
				// Snapweite aktualisieren
        MagneticWnd.SnapWidth := 15;
				//frmMain als Parent Form zum andocken zuweisen
        MagneticWnd.AddWindow(Self.Handle, 0, MagneticWndProc);
			end;
    end;

    gbEnter := False;

		lblCashSave.Visible := False;
		lblMileSave.Visible := False;
		lblCallByInsureFree.Left := 312; 
		if GT_OCX <> '' then
    begin
			BtnCall.Visible := True;
			cxtCuTel.Width := 101;//109;
			cxImage1.Left  := 117;//125;

			if Trim(cxtCuTel2.Text) <> '' then
      begin
        BtnCall2.Visible := True;
				cxtCuTel2.Width := 84;
      end else
      begin
        BtnCall2.Visible := False;
        cxtCuTel2.Width := 106;
      end;
    end else
    begin
      BtnCall.Visible := False;
      BtnCall2.Visible := False;

			cxtCuTel.Width := 124;//132;
			cxImage1.Left  := 140;//148;
      cxtCuTel2.Width := 106;
    end;

    pSetCuTelLabel(0);

    PnlKTPOIYN.Left := 247;
    PnlKTPOIYN.Top  := 260;

    giArea_Charge_YN := Area_Charge_YN; // 공유제어 권한으로 인해 별도 변수 지정

    if GT_USERIF.HD = 'A1531' then
      LbmeoBigo3.Caption := '적요③ ( 기사에게 안보임 ) ▶ 결재정보 기재'
    else
      LbmeoBigo3.Caption := '적요③ ( 기사에게 안보임 ) - 다음날 일마감후 자동 삭제됨';

    if TCK_USER_PER.JON_CUSTMEMO2 = '1' then
    begin
      edt_CardMemo.Properties.ReadOnly := False;
      edt_CardMemo.Properties.ImeMode := imSHanguel;
    end else
    begin
      edt_CardMemo.Properties.ReadOnly := True;
      edt_CardMemo.Properties.ImeMode := imDontCare;
    end;

    if TCK_USER_PER.JON_CUSTPLUS = '1' then
      miCustAdd.Enabled := True
    else
      miCustAdd.Enabled := False;

  	if TCK_USER_PER.JON_CustLevel = '1' then
  		cboCuLevel.Enabled := True
  	else
  		cboCuLevel.Enabled := False;

    if GS_CALLMU_Use = 'y' then lblOptionCallMu.Visible := True
                           else lblOptionCallMu.Visible := False;

    if giArea_Charge_YN = 'y' then
    begin
      LbDriverCharge.Visible := True;
  		if Area_Edit_Charge_YN = 'y' then
      begin
  			cxDriverCharge.Properties.ReadOnly := False;
        cxDriverCharge.Visible := True;
  		end else
      begin
  			cxDriverCharge.Properties.ReadOnly := True;
  			cxDriverCharge.Visible := True;
  		end;

      cbbPayMethod.Left := 281;
			cbbPayMethod.Width := 84;

      cbbPostTime.Left  := 365;
      cbbPostTime.Width := 113;
    end else
    begin
  		LbDriverCharge.Visible := False;
      cxDriverCharge.Enabled := False;
  		cxDriverCharge.Visible := False;

      cbbPayMethod.Left := 193;
      cbbPayMethod.Width := 130;

      cbbPostTime.Left  := 322;
      cbbPostTime.Width := 157;
    end;

    if Frm_Main.JON01MNG[Self.Tag].Dock then
    begin
      btnGroup.Visible := False;
      BtnFix.Visible := False;
			btnNew.Visible := False;
      btnClose.Visible := False;
      grpTitle.Cursor := crDefault;
      lblCuBubinName.Cursor := crDefault;
    end else
    begin
      btnGroup.Visible := True;
      BtnFix.Visible := True;
      btnNew.Visible := True;
      btnClose.Visible := True;
      grpTitle.Cursor := crSizeAll;
      lblCuBubinName.Cursor := crSizeAll;
    end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.popQRMenuPopup(Sender: TObject);
begin
//  if BtnQRate.Tag = 1 then miQRate.Visible := False
//                      else miQRate.Visible := True;
end;

procedure TFrm_JON01N.FControlInitial(bTF: Boolean = False; bBrNoSetType: boolean = False);
var
  i, j, idx : Integer;
  ErrLine : String;
begin
	SetDebugeWrite('JON01N.FControlInitial');

  pInitFormSize;
  gsWkSubun_Up := '';
  btn_FindWk.Tag := 0;
  BtnResJ.Tag := 0;
  BtnResD.Tag := 0;
  pSetButtonClick(btn_FindWk);
  pSetButtonClick(BtnResJ);
  pSetButtonClick(BtnResD);
  btnCmdJoin.Caption := '접수(F9)';
  lb_CompulWor2.Caption := '';
	gsKMAiChargeStr := '';
	lblCallByInsureFree.visible := GT_Kakao_CallByInsureFee;

	//카카오T AI요금표사용
	img_KakaoTAiCharge.visible := (GT_Kakao_KMAiRate);
	
	//정기점검시 경탐 서버 지정용 20191021 KHS sntest로 로그인시만 보임
	if (GT_USERIF.ID = 'sntest') then
	begin
		cb_WiseNutSntest.Visible := True;
		edt_PoiIP.Visible := True;
		edt_RPIP.Visible := True;
	end else
	begin
		cb_WiseNutSntest.Visible := False;
		edt_PoiIP.Visible := False;
		edt_RPIP.Visible := False;
	end;
	lb_CompulWor.Visible := False;
	pnlCallingBoard.Visible := False;

  tmr_CustInvert.Enabled := False;
  tmrTitleInvert.Enabled := False;

  grpViaArea.Enabled  := False;   // 출발지에서 탭키 누를때 도착지로 가지않고 경유지로 가는거 방지 20200729 lyb

  if Self.Tag > -1 then GT_CARD_APPROVE_ST[Self.Tag] := casNone;
  if Self.Tag > -1 then GS_CardPayFeeType[Self.Tag] := '';
  if Self.Tag > -1 then GS_CardPayFeeValue[Self.Tag] := '';

	cboBranch.Hint := ''; // 수정창오픈시 지사+대표번호 인텍스값 저장을 위한 고유값  20200423 KHS
	img_SpeechBubble.Visible := False;  //확장검색 말풍선 초기화
	bAppOrder := False; //앱오더 여부 20191217 KHS
	bAppOrderOpen := False;   //앱접수창 팝업 여부 20191223 KHS
  gbLimitOverYn := True;
  giBtnIndex := -1;
  bCardSanction := False;
	pnl_ViaAlert_Title.Hint := '';
	cxTBubinMemo.Text := ''; //법인한줄메모 초기화 20210114 KHS
  edtAppMemo.Text := '';  // 고객앱 메모 초기화
  cbTelView.ItemIndex := 0;
	if bTF = False then
	begin
		try
      bCurRateEditMode := False; //요금수정 시 전체삭제
      // 입력 컨트롤 초기화...
      if cxLblConfSlipUseFlg.Hint <> 'CONFSLIP' then
      begin // 접수번호 조회인지 설정.
        cxtJoinNum.Text := ''; // 접수번호
      end;

      cxtWorkerNm.Text := ''; // 기사명
      // 접수시간
      // 접수본사코드/지사코드/지사명
      if (locCustHP_MainNum_Search = '') and (cxLblCIDUseFlg.Hint <> 'CID') then
      begin // CID 조회인지 설정을 한다.
        cxtCallTelNum.Text := ''; // 발신전화번호
      end;
      cxTSearchMainTel.Text := ''; // 지사의 대표번호 조회 가능토록처리..
			cxtCuTel.Text := ''; // 고객전화번호 조회
			cxtCuTel2.Text := ''; // 전화번호2
      cxtCuBubin.Text := ''; // 법인명(법인정보)
      cxtCuBubin.Visible := False;
      cxtCuBubin.Hint := '';
      lsBr_KeyNumber := '';
      sBHSAddr := '';
      sBHEAddr := '';
      if Self.Tag > -1 then gsShortCoprNm[Self.Tag] := '';
      btnCmdExit.Description := '';

			PnlKTPOIYN.Visible := False;
      TmplcsSta1 := '';
      TmplcsSta2 := '';
      TmplcsSta3 := '';
      TmplcsSta4 := '';
      TmplcsX := '';
      tmplcsY := '';
      TmpDef := '';

      cxLblSmartRate.Caption := '';
      cxLblRate1.Caption := '';
      cxLblRate2.Caption := '';

      meoCuCCMemo.Clear;
      mmoCbMemo.Clear;
      meoCuWorMemo.Clear;
      edt_CardMemo.Text := '';

      Lbl_charge.Caption := '';
      Lbl_Distance.Caption := '';
      lbl_PlusAreaNotice.Caption := '';

      shpTitle.Pen.Color := GS_BasicColor;   // 기본색
      shpTitle.Brush.Color := GS_BasicColor;   // 기본색
      shpGrpTop1.Brush.Color := GS_BasicColor;   // 기본색
      cboCuLevel.Style.Font.Color := GS_BasicColor;

      shpTop1.Pen.Color := $006C7882;
      shpTop1.Brush.Color := $006C7882;

      // 20120805 좌표 오류 체크 LYB
      gJONStaChkXY.Area1 := '';
      gJONStaChkXY.Area2 := '';
      gJONStaChkXY.Area3 := '';
      gJONStaChkXY.Area4 := '';
      gJONStaChkXY.Area5 := '';
      gJONStaChkXY.X := '';
      gJONStaChkXY.Y := '';
      gJONStaChkXY.GUIDE_X := '';
      gJONStaChkXY.GUIDE_Y := '';
      gJONStaChkXY.Gubun := '';

      meoStartArea.Clear; // 출발지 추가정보
      cxtStartXval.Text := ''; // 출발지 X좌표
      cxtStartYval.Text := ''; // 출발지 Y좌표
      gsStartGUIDEXval := '';
      gsStartGUIDEYval := '';

      lblStartAreaName.Text := ''; // 출발지 주소
      cxtStartAreaDetail.Text := ''; // 출발지 상세지명(로컬저장용)
      lcsConfAREA4            := '';
      meoEndArea.Clear; // 도착지 추가정보

      lcsStaQ1 := '';
      lcsStaQ2 := '';
      lcsStaQ3 := '';

      lcsSta1 := '';
      lcsSta2 := '';
      lcsSta3 := ''; // 출1, 출2, 출3
      lcsStaDocId   := '';
      lcsStaCellSel := '';
      lcsStaSchWord := '';
      lcsStaUrl := '';
      lcsStaDebug := '';
      GS_Grid_DES := '';

      lcsEnd1 := '';
      lcsEnd2 := '';
      lcsEnd3 := ''; // 도1, 도2, 도3
      lcsEndDocId   := '';
      lcsEndCellSel := '';
      lcsEndSchWord := '';
      lcsEndUrl := '';
      lcsEndDebug := '';
      GS_Grid_DEP := '';

      gJONEndChkXY.X := '';
      gJONEndChkXY.Y := '';
      gJONEndChkXY.GUIDE_X := '';
      gJONEndChkXY.GUIDE_Y := '';

      cxtEndXval.Text := ''; // 도착지 X좌표
      cxtEndYval.Text := ''; // 도착지 Y좌표
      gsEndGUIDEXval := '';
      gsEndGUIDEYval := '';

      lblEndAreaName.Caption := ''; // 도착지 주소
      cxtEndAreaDetail.Caption := ''; // 도착지 상세지명(로컬저장용)
      cxReEndArea.Clear;

      curCbCharge.Tag := -1;  // 이동하면 안됨

      curCbCharge.Value := 0;
      curCardCharge.Value := 0;
      curCardCharge.Properties.ReadOnly := False;
      curMileCharge.Value := 0;

			curRate.Value := 0; // 요금
			curRate.Tag := 0;
      gRate_Update := 0;
      gCbCharge_Update := 0;

      curCbCharge.Tag := 0;

			curKm.Text := ''; // 출발지, 도착지, 경유지 Km
      fCruKm := 0;
			fChgKm := 0;
			fDirKm := 0;
      fTotalTime := 0;
      fViaKm := 0;
      fStEdKm := 0;
      bViaKm := False;
      lblNoSet.Tag := 0; // 요금 미지정
      pSetLabelClick(lblNoSet);
      lblRangeRate.Tag := 0; // 거리요금
      pSetLabelClick(lblRangeRate);
      lblWKJAmt.Tag := 0;
      pSetLabelClick(lblWKJAmt);

    	pnl_ViaMent.Visible := False;
      pnl_charge.Visible := False;
			grpWkJi.Visible := False;
			cxLblWkJAmt.Caption := '0';

      cxLCuCCMemoFlg.Visible := True;
      cxLCuWorMemoFlg.Visible := True;

      btnCustAppinfo.Enabled := False;

      lst_BRlist.Clear;

			bOther := False; //타업체콜 여부 초기화
			sOrgHDNO := ''; sOrgBRNO := ''; sOrgKNum := '';

			GBStartXYView.Left := 282;
			GBStartXYView.Top := 8;
      GBStartXYView.Visible := False;     //좌표

			GBEndXYView.Left := 282;
			GBEndXYView.Top := 8;
      GBEndXYView.Visible := False;     //좌표
		Except
      on e: exception do
      begin
        if Self.Tag > -1 then
          Frm_Main.JON01MNG[Self.Tag].bInit := False;
        Log('FControlInitial Error 0 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
        Assert(False, 'FControlInitial Error 0 :' + ErrLine + ', ' + E.Message);
      end;
    end;

    try
      cbCardSanction.Tag := 0; // 위치중요
      PayMethod := PAY_METHOD_MONEY;

			grpBubinState.Visible := False; //법인 상태 알림창
			grpBubinState.Left := 295;
			grpBubinState.Top := 76;
			ABubinStateIndex := 0; //법인 상태 초기화

      lblCenterMng.Tag := 0; // 상황실 전화번호 보이도록,, 설정값
      pSetLabelClick(lblCenterMng);

      cxCustView.DataController.SetRecordCount(0);
      // 고객명으로 조회한 결과 디스플레이 그리드.

      if BtnStLock.Hint = 'F4)잠금' then
      begin
        BtnStLock.Hint := 'F4)수정';
        BtnStLock.Tag  := 0;
        BtnStLock.ImageIndex := 0;
        BtnStLock.Down := False;
        lblStLock.Style.TextColor := $004B4B4B;
        lblStLock.Style.Font.Style := [fsBold];
      end;
      if BtnEdLock.Hint = 'F4)잠금' then
      begin
        BtnEdLock.Hint := 'F4)수정';
        BtnEdLock.Tag  := 0;
        BtnEdLock.ImageIndex := 0;
        lblEdLock.Style.TextColor := $004B4B4B;
        lblEdLock.Style.Font.Style := [fsBold];
        BtnEdLock.Down := False;
      end;
      if BtnRaLock.Hint = 'F4)잠금' then
      begin
        BtnRaLock.Hint := 'F4)수정';
        BtnRaLock.Tag  := 0;
        BtnRaLock.ImageIndex := 0;
        BtnRaLock.Down := False;

        curRate.Properties.Increment := 1000;
				curRate.Properties.ReadOnly := False;
			end;

			//경유지 잠금추가 20181112 KHS
			if BtnViaLock1.Hint = 'F4)잠금' then
			begin
				BtnViaLock1.Hint := 'F4)수정';
				BtnViaLock1.Tag  := 0;
				BtnViaLock1.ImageIndex := 0;
				BtnViaLock1.Down := False;
			end;
			for i := 2 to 5 do
			begin
				if BtnViaLock[i].Hint = 'F4)잠금' then
				begin
					BtnViaLock[i].Hint := 'F4)수정';
					BtnViaLock[i].Tag  := 0;
					BtnViaLock[i].ImageIndex := 0;
					BtnViaLock[i].Down := False;
				end;
			end;
			sNowRate := ''; // 현재 지사의 기본요금 설정액.
      lvs_ReceiveText := ''; // 임시변수 : Socket에서 사용
      locbWkToCust := False;

			if (Self.Tag > -1) And (Not Frm_Main.JON01MNG[Self.Tag].bModify) then
			begin
        shpTop2.Height := 5;
        grpModifyTitle.Visible := False;

        grpCustView.Top := shpTop2.Top;
        grpCustView.Left := shpTop2.Left;
        grpCustView.Width := grpTop2.Width + 1;
        grpCustView.Height := shpTop2.Height + grpTop2.Height + 1;
        grpCustView.BringToFront;
        grpCustView.Visible := True;
      end;

      // 고객 구분에 따른 라벨 칼라를 변경해 준다.
      Proc_SetFormColor_3(10);

      loc_sHoTransArea := ''; // 호전환 지역명;

      if TCK_USER_PER.JON_ChargeSave = '1' then
        btn_ChargeSave.Enabled := False
      else
        btn_ChargeSave.Enabled := True;

			cxCurPathRate.Value := 0; // 경유요금
      cxTmWaitTime.Text := '00:00'; // 대기시간 초기화.
      cxCurWaitTmRate.Value := 0; // 대기요금
      cxCurRevisionRate.Value := 0; // 보정금액
			cxCurSupportRate.Value := 0; // 지원금
			cxCurOtherRate.Value := 0; // 기타요금

      meoBigo2.Clear; // 적요2
      meoBigo3.Clear; // 적요3
      cxDriverCharge.Text := ''; // 기사수수료 초기화.

      try
        meoViaArea1.Text := '';
        cxViaAreaName1.Caption := '';
        for i := 2 to 5 do
        begin
          if Assigned(meoViaArea[i]) then meoViaArea[i].Text := '';
          if Assigned(cxViaAreaName[i]) then cxViaAreaName[i].Caption := '';
        end;
      Except
        on e: exception do
        begin
          if Self.Tag > -1 then
            Frm_Main.JON01MNG[Self.Tag].bInit := False;
          Log('FControlInitial Error 19 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
          Assert(False, 'FControlInitial Error 19 :' + ErrLIne + ', ' + E.Message);
        end;
      end;

      // 저장된 경유지 정보를 초기화 한다.
      for i := 1 to 5 do
      begin
        XposVia[i] := '';
        YposVia[i] := '';
				ViaAreaDetail[i] := '';
				ViaAreaName[i] := '';
				DocId[i] := '';
        CellSel[i] := '';
        SchWord[i] := '';
        ViaSA1[i] := '';
        ViaSA2[i] := '';
        ViaSA3[i] := '';
        DocId[i]  := '';
        CellSel[i] := '';
        SchWord[i] := '';
      end;
      ViaNowTag := 1;   //현재 입력중인 경유지위치
      ViaADDTag := 0;   //현재 추가한 경유지위치

      if Self.Tag > -1 then
        Frm_Main.JON01MNG[Self.Tag].bInit := True;
    Except
      on e: exception do
      begin
        if Self.Tag > -1 then
          Frm_Main.JON01MNG[Self.Tag].bInit := False;
        Log('FControlInitial Error 1 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
        Assert(False, 'FControlInitial Error 1 :' + ErrLIne + ', ' + E.Message);
      end;
    end;
  end;

  try
    if Self.Tag > -1 then
    begin
      For j := 0 to 4 do
      begin
        GT_PASS_INFO[Self.Tag][j].AREA1 := '';
        GT_PASS_INFO[Self.Tag][j].AREA2 := '';
        GT_PASS_INFO[Self.Tag][j].AREA3 := '';
        GT_PASS_INFO[Self.Tag][j].AREA4 := '';
        GT_PASS_INFO[Self.Tag][j].AREA5 := '';
        GT_PASS_INFO[Self.Tag][j].DOCID := '';
        GT_PASS_INFO[Self.Tag][j].CELLS := '';
        GT_PASS_INFO[Self.Tag][j].SWORD := '';
        GT_PASS_INFO[Self.Tag][j].MAP_X := '';
        GT_PASS_INFO[Self.Tag][j].MAP_Y := '';
      end;
    end;

    if meoBigo.Hint <> 'NOCLEAR' then
    begin
      meoBigo.Clear; // 적요
  		//구미 특정지사 적요 자동적용
//	  	proc_AutoSetEtc1;    //선택지사에 따른 옵션적용
      if gJONAcceptMemo.Use then
        meoBigo.Text := gJONAcceptMemo.Memo;
      SetPnlWorkMemoSize;
    end;

    cboBranch.Enabled := True;
    cboBranch.Properties.ReadOnly := False;

    grpBrSelect.Visible := False;

		pbPayMethod := -1;   // 법인콜 선택시 결제구분 현재값 저장 초기화.

		chkCompulWor.Checked := False; // 강제배차 체크버튼
		chkCompulWor.Enabled := False;
		// 수정 시 강제배차 제한(예약은 허용)
		if TCK_USER_PER.JON_Recon = '1' then
		begin
			chkCompulWor.Enabled := False;
		end else
		begin
			if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) then  //접수일때만 체크 가능
				chkCompulWor.Enabled := True;
		end;

		cboBrOnly.Tag := 10;
    cboBrOnly.Properties.Items.Clear;
    if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
    begin
      cboBrOnly.Properties.Items.Assign(scb_FamilyBrName);
    end else
    begin
			cboBrOnly.Properties.Items.Assign(scb_BranchName);
		end;
    cboBrOnly.Properties.Items.Insert(0, '지사전체');
    cboBrOnly.ItemIndex := 0;
    cboBrOnly.Tag := 0;

    SetCboBranch(bBrNoSetType);

    lg_Save := '';

    loc_RateNOT := False; // 요금 계산을 막음.
    loc_Modify  := False;

    FIsCalcPrice := False;

    // 플러스콜 여부(수도권만 사용함)
    if GS_PRJ_AREA = 'S' then
    begin
      lblPlusYN.Tag := 0;
      pSetLabelClick(lblPlusYN);
//      lblPlusYN.Enabled := False;
      lblPlusYN.Visible := True;
			proc_PlusCall_CtrlYN;                // 플러스콜 사용여부 체크
    end else
    begin
      lblPlusYN.Visible := False;
    end;

		// 탁송연합콜 사용
		proc_TakCall_CtrlYN;

		//AI 아웃바운드 옵션 배차지연콜 사용여부
		proc_AIOB_CtrlYN;

		//건당보럼료 부료 사용 여부 체크
		if GetBranchYN(scb_JON03CallByInsureFree, Proc_BRNOSearch) = 'y' then 
		begin
			lblCallByInsureFree.Visible := True;
			lblCallByInsureFree.Tag := 0;      // 기본값 사용안함
			pSetLabelClick(lblCallByInsureFree);
		end else
		begin
			lblCallByInsureFree.Visible := False;
			lblCallByInsureFree.Tag := 0;
			pSetLabelClick(lblCallByInsureFree);
		end;
	Except
    on e: exception do
    begin
			if Self.Tag > -1 then
        Frm_Main.JON01MNG[Self.Tag].bInit := False;
      Log('FControlInitial Error 2 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'FControlInitial Error 2 :' + ErrLine + ', ' + E.Message);
    end;
  end;

  try
		pnlCallBell.Hint := ''; //콜벨업소 초기화
		pnlCallBell.Visible := False;
		pnlCallBellAll.Visible := False;
		lbUpsoName.Caption := '';

    cbCardSanction.Tag := 0; // 위치중요
    LoadPayMethod;

    //--------------- 카드결제 관련 초기화.
		locCardPaySeq := '';   // 결제일련번호
		gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)
		locCardTranNo := '';   // 거래번호
		locCardPayInfo:= '';   // 카드결제 정보

		gUpdate_CardTranNo := ''; //수정창에서만 사용 2016.08.24 KHS
		gCardStatus := '';       //수정창에서만 사용 2016.08.24 KHS

    // 03.KCP, 06.KICC 카드 결제 지사 사용여부 체크. 2011-10-19.
    if cbbPayMethod.Text = PAY_METHOD_CARD_KCP then
    begin
      cbCardSanction.Hint := _PAY_CARD;
      cbCardSanction.OptionsImage.ImageIndex := 2;
      cbCardSanction.Enabled := ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '03' ) Or
                                ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '06' );
    end else
    if cbbPayMethod.Text = PAY_METHOD_MONEY then
    begin
      // 03.KCP, 06.KICC 카드 결제 지사 사용여부 체크. 2011-10-19.
      if ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '03' ) Or
         ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '06' ) then
      begin
        cbCardSanction.Hint := _PAY_CASH;
        cbCardSanction.OptionsImage.ImageIndex := 0;
        cbCardSanction.Enabled := True;
      end;
    end	else
    if cbbPayMethod.Text = PAY_METHOD_POST_MILE then                  // 20130603  LYB
    begin
      // 03.KCP, 06.KICC 카드 결제 지사 사용여부 체크. 2011-10-19.
      if ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '03' ) Or
         ( IsCardUseBranch_KCP(Proc_BRNOSearch) = '06' ) then
      begin
        cbCardSanction.Hint := _PAY_COUPON;
        cbCardSanction.OptionsImage.ImageIndex := 1;
        cbCardSanction.Enabled := True;
      end;
    end	else
    begin
      cbCardSanction.Enabled := False;
      cbCardSanction.Hint := _PAY_CARD;
      cbCardSanction.OptionsImage.ImageIndex := 2;
    end;

    //---------------

    FCurrBigo := nil;
    FCurrSpop := nil;
    FCurrEpop := nil;

		sTaksong := 'n';
		sTakHwak := 'n';
		sStickCall := 'n';
		sLicType := '00';

    lbl_00.Tag := 0;
    pSetLabelClick(lbl_00);
    lbl_01.Tag := 0;
    pSetLabelClick(lbl_01);
    lbl_02.Tag := 0;
    pSetLabelClick(lbl_02);
    lbl_03.Tag := 0;
    pSetLabelClick(lbl_03);
    lbl_04.Tag := 0;
    pSetLabelClick(lbl_04);
		lbl_05.Tag := 0;
    pSetLabelClick(lbl_05);
		lblQuickX.Tag := 0;
    pSetLabelClick(lblQuickX);
    lblNoSmoking.Tag := 0;
    pSetLabelClick(lblNoSmoking);
		lbl_06.Tag := 0; //탁확
    pSetLabelClick(lbl_06);

		if GS_PRJ_AREA = 'S' then
		begin
			for j := 0 to pmSpop.Items.Count - 1 do
			begin
				if pmSpop.Items.Items[j].Tag In [11..19] then
				begin
					pmSpop.Items.Items[j].Checked := False;
				end;
			end;
		end else
		begin
			for j := 0 to pmSpop.Items.Count - 1 do
			begin
				if pmSpop.Items.Items[j].Tag In [11..18] then
				begin
					pmSpop.Items.Items[j].Checked := False;
				end;
			end;
		end;
		lblOptionSexM.Tag := 0;
    if GB_JON_SEXM then lblOptionSexM.Tag := 1;
    pSetLabelClick(lblOptionSexM);
    lblOptionSexF.Tag := 0;
    pSetLabelClick(lblOptionSexF);
		lblOptionCallMu.Tag := 0;
    pSetLabelClick(lblOptionCallMu);
    lblCenterMng.Tag := 0;
    pSetLabelClick(lblCenterMng);

    ChkCuSmsNo.Tag := 1;
    ChkCuSmsNo.Checked := False;
    ChkCuSmsNo.Tag := 0;

    if Assigned(Frm_JON30) then frm_JON30.N1.Enabled := True;
    if Assigned(Frm_JON30) then frm_JON30.N1.Caption := '출발지선택(좌표만이동)';
    if Assigned(Frm_JON30) then Frm_JON30.btnSPoiMove.Enabled := True;
    if Assigned(Frm_JON30) then frm_JON30.N2.Enabled := True;
    if Assigned(Frm_JON30) then frm_JON30.N2.Caption := '도착지선택(좌표만이동)';
    if Assigned(Frm_JON30) then Frm_JON30.btnEPoiMove.Enabled := True;

    if Assigned(Frm_JON30) then Frm_JON30.N6.Enabled := True;
    if Assigned(Frm_JON30) then Frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)';
    if Assigned(Frm_JON30) then Frm_JON30.btnSPoiAMove.Enabled := True;
    if Assigned(Frm_JON30) then Frm_JON30.N7.Enabled := True;
    if Assigned(Frm_JON30) then Frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)';
    if Assigned(Frm_JON30) then Frm_JON30.btnEPoiAMove.Enabled := True;

    sAppCode := '';
    sAppLastRegDate := '';
    sAppLastDelDate := '';
    sAppLastFinishDate := '';
    sAppCuArea := '';
    sAppTermModel := '';
    sAppTermOS := '';
    sAppDelYn := '';
    sFirstInSource := '';

		gsCuCallBellID := '';
		gsOrderCallBellID := '';
		gsUpdateCallBellID := '';
		gsUpdateCallBellStatus := '';

		cbbLicType.Properties.Items.Clear;
		for I := 0 to Length(LicTypeList) - 1 do
		begin
			if (LicTypeList[I].Value = '1종대형') or (LicTypeList[I].Value = '1종보통') or
				 (LicTypeList[I].Value = '1종특수') or (LicTypeList[I].Value = '2종보통') then
				cbbLicType.Properties.Items.Add(LicTypeList[I].Value);
		end;

    /////////기사면허종류 초기화////////////////
    cbbLicType.ItemIndex := 0;
    grpWkLicType.Visible := false;
    /////////기사면허종류 초기화////////////////

    chkViewLevel.Checked := False;
    /////////기사나이 초기화////////////////
    lblWkAge.Tag := 0;
		pSetLabelClick(lblWkAge);
		if (GB_365System) then   // 원주365 기본값 25세~ 65세기본값 적용
    begin
      edtWkFAge.Text := '25';
      edtWkTAge.Text := '65';
		end else
		begin
			edtWkFAge.Text := '';
			edtWkTAge.Text := '';
		end;
		lblWkAge.Hint := '';
    grpWkAge.Visible := false;
    /////////기사나이 초기화////////////////

		BtnStLock.Tag := 0;
		BtnEdLock.Tag := 0;
		BtnRaLock.Tag := 0;

		//차종타입 기본값 20181016 KHS
		cb_CarType.ItemIndex := 1;
		gsKDWkHp := '';
    gsSvrWkHp := '';

		bKakaoOrder := False;
	Except
    on e: exception do
		begin
      if Self.Tag > -1 then
        Frm_Main.JON01MNG[Self.Tag].bInit := False;
      Log('FControlInitial Error 3 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'FControlInitial Error 3 :' + ErrLine + ', ' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.AddSpop(ASpop: string; Atag: Integer);
var
  AddStr, OrgStr, wStr, sFword, sDesc, sSelBtn : string;
  i, iPos : Integer;
  slTmp : TStringList;
  sTmp : String;
  iMainX, iMainY, iSubX, iSubY: Integer;
	bTmp : Boolean;
begin
	SetDebugeWrite('JON01N.AddSpop');
  try
  	if FSpopList = Nil then exit;

		FCurrSpop := nil;

    if not Assigned(FCurrSpop) then
			FCurrSpop := meoStartArea;

		OrgStr := FCurrSpop.Lines.Text;  //원래 있던내용

    wStr := meoStartArea.Text;
    begin
			if (Atag > 10) and (Atag < 95)then
      begin
				if FSpopList.Values[ASpop] = '탁송기사만' then
				begin
					if Pos('탁송)', wStr) < 1 then
					begin
						if Atag <> 19 then //탁송연합콜 관련 수정 20210208KLHS
						begin
							lbl_00.Tag := 1;
							pSetLabelClick(lbl_00);
						end;
						sTaksong := 'y';
						AddStr := '탁송)' + AddStr;
					end;
				end else
				if FSpopList.Values[ASpop] = '탁송확대기사만' then
				begin
					if Pos('탁확)', wStr) < 1 then
					begin
						lbl_06.Tag := 1;
            pSetLabelClick(lbl_06);
						AddStr := '탁확)' + AddStr;
						sTakHwak := 'y';     //탁송연합콜 관련 수정 20210208KLHS
					end;
				end else
				if FSpopList.Values[ASpop] = '정장기사만' then
				begin
					if Pos('정장)', wStr) < 1 then
          begin
            lbl_01.Tag := 1;
            pSetLabelClick(lbl_01);
            AddStr := '정장)' + AddStr;
					end;
				end else
        if FSpopList.Values[ASpop] = '경유있음' then
        begin
          if Pos('경유)', wStr) < 1 then
          begin
            lbl_02.Tag := 1;
            pSetLabelClick(lbl_02);
            AddStr := '경유)' + AddStr;
          end;
        end else
        if FSpopList.Values[ASpop] = '적요있음' then
        begin
          if Pos('적요)', wStr) < 1 then
          begin
            lbl_03.Tag := 1;
            pSetLabelClick(lbl_03);
            AddStr := '적요)' + AddStr;
          end;
        end else
        if FSpopList.Values[ASpop] = '스틱기사만' then
        begin
          if Pos('스틱)', wStr) < 1 then
          begin
            lbl_04.Tag := 1;
            pSetLabelClick(lbl_04);
            AddStr := '스틱)' + AddStr;
            sStickCall := 'y';
          end;
        end else
        if FSpopList.Values[ASpop] = '킥보드x' then
        begin
          if Pos('킥보드x)', wStr) < 1 then
          begin
            lblQuickX.Tag := 1;
            pSetLabelClick(lblQuickX);
            AddStr := '킥보드x)' + AddStr;
          end;
        end else
        if FSpopList.Values[ASpop] = '비흡연' then
        begin
          if Pos('비흡연)', wStr) < 1 then
          begin
            lblNoSmoking.Tag := 1;
            pSetLabelClick(lblNoSmoking);
            AddStr := '비흡연)' + AddStr;
          end;
        end else
        if FSpopList.Values[ASpop] = GS_USERSELECT1 then
        begin
          if Pos(GS_USERSELECT + ')', wStr) < 1 then
          begin
            lbl_05.Tag := 1;
            pSetLabelClick(lbl_05);
            AddStr := GS_USERSELECT + ')' + AddStr;
          end;
        end else
        begin
          iPos := Pos('│', FSpopList.Values[ASpop]);
          if iPos > 0 then
          begin
            sDesc   := Copy(FSpopList.Values[ASpop], 1, iPos - 1);
            sSelBtn := Copy(FSpopList.Values[ASpop], iPos + 1, Length(FSpopList.Values[ASpop]) - iPos);
          end else
          begin
            sDesc   := FSpopList.Values[ASpop];
          end;

          // 버튼을 자동으로 눌러주면 '{' '}' 삭제
          if sSelBtn <> '' then
          begin
            AddStr := sDesc + AddStr;
            slTmp := TStringList.Create;
            try
              slTmp.Delimiter := '/';
              slTmp.DelimitedText := sSelBtn;

              for i := 0 to slTmp.Count -1 do
              begin
								if slTmp[i] = '탁' then
								begin
                  lbl_00.Tag := 1;
                  pSetLabelClick(lbl_00);
									SetMunuChecked('탁', True);
									sTaksong := 'y';
								end else
								if slTmp[i] = '탁확' then
								begin
                  lbl_06.Tag := 1;
                  pSetLabelClick(lbl_06);
									SetMunuChecked('탁확', True);
									sTakHwak := 'y';
								end else
								if slTmp[i] = '정' then
                begin
                  lbl_01.Tag := 1;
                  pSetLabelClick(lbl_01);
                  SetMunuChecked('정', True);
                end else
                if slTmp[i] = '경' then
                begin
                  lbl_02.Tag := 1;
                  pSetLabelClick(lbl_02);
                  SetMunuChecked('경', True);
                end else
                if slTmp[i] = '적' then
                begin
                  lbl_03.Tag := 1;
                  pSetLabelClick(lbl_03);
                  SetMunuChecked('적', True);
                end else
                if slTmp[i] = '스' then
                begin
                  lbl_04.Tag := 1;
                  pSetLabelClick(lbl_04);
                  SetMunuChecked('스', True);
                  sStickCall := 'y';
                end else
                if slTmp[i] = '킥' then
                begin
                  lblQuickX.Tag := 1;
                  pSetLabelClick(lblQuickX);
                  SetMunuChecked('킥', True);
                end else
                if slTmp[i] = '비' then
                begin
                  lblNoSmoking.Tag := 1;
                  pSetLabelClick(lblNoSmoking);
                  SetMunuChecked('비', True);
                end else
                if slTmp[i] = Copy(GS_USERSELECT, 1, 1) then
                begin
                  lbl_05.Tag := 1;
                  pSetLabelClick(lbl_05);
                  SetMunuChecked(Copy(GS_USERSELECT, 1, 1), True);
                end;
              end;
            finally
              FreeAndNil(slTmp);
            end;
          end else
          begin
    				if GS_SEPER_USE then sFword := '{' + sDesc + '}'
    				                else sFword := sDesc;
    				i := Pos(sFword, wStr);
    				if i < 1 then
    				begin
    					AddStr := sFword + AddStr;
    				end else
    				begin
    					if GS_SEPER_USE then
    					begin
    						if i = 1 then
    						begin
    							meoStartArea.Text := Copy(widestring(wStr), 1 + Length(widestring(sFword)), Length(widestring(wStr)) - Length(widestring(sFword)));
    						end	else
                if i > 1 then
    						begin
    							meoStartArea.Text := Copy(widestring(wStr), 1, i-1) +
    																	 Copy(widestring(wStr), i + Length(widestring(sFword)) , Length(widestring(wStr)) - i);
    						end;
    						Exit;
    					end;
    				end;
//-            AddStr := '{' + sDesc + '}' + AddStr;
          end;
        end;
      end else
  		if Atag = 95 then  //카드
  		begin
  			i := Pos('카드)', wStr);
  			if Pos('카드)', wStr) < 1 then
  			begin
  				AddStr := '카드)' + AddStr;
  			end	else
  			if i = 1 then
  			begin
  				OrgStr := Copy(wStr, 1 + Length('카드)'), Length(wStr) - Length('카드)'));
  			end else
	  		if i > 1 then
		  	begin
			  	OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('카드)') , Length(wStr) - i);
  			end;
  		end else
  		if Atag = 96 then  //콜무
  		begin
  			i := Pos('콜무)', wStr);
  			if Pos('콜무)', wStr) < 1 then
  			begin
  				AddStr := '콜무)' + AddStr;
  			end	else
  			if i = 1 then
  			begin
  				OrgStr := Copy(wStr, 1 + Length('콜무)'), Length(wStr) - Length('콜무)'));
  			end else
	  		if i > 1 then
		  	begin
			  	OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('콜무)') , Length(wStr) - i);
  			end;
  		end else
      if Atag = 97 then  //후불
      begin
        i := Pos('후불)', wStr);
        if i = 1 then
        begin
          OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
        end else
        if i > 1 then
        begin
          OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('후불)') , Length(wStr) - i);
        end;

        i := Pos('즉후)', wStr);
        if i = 1 then
        begin
          OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
        end else
        if i > 1 then
        begin
          OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
        end;

        i := Pos('법후)', wStr);
        if i = 1 then
        begin
          OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
        end else
        if i > 1 then
        begin
          OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('법후)') , Length(wStr) - i);
        end;

        if gsJON01SelfCard <> 'FALSE' then  // 현장카드 사용일때만 카드) 삭제 - S콜센터에서 요청  2021.01.28
        begin
          i := Pos('카드)', wStr);
          if i = 1 then
          begin
            OrgStr := Copy(wStr, 1 + Length('카드)'), Length(wStr) - Length('카드)'));
          end else
          if i > 1 then
          begin
            OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('카드)') , Length(wStr) - i);
          end;
        end;

  			if Pos('♥♥♥]', wStr) > 0 then
  			begin
  				i := Pos('♥♥♥]', wStr);
  				if i = 1 then
  				begin
  					OrgStr := Copy(wStr, 1 + Length('♥♥♥]'), Length(wStr) - Length('♥♥♥]'));
  				end else
  				if i > 1 then
  				begin
  					OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥♥]') , Length(wStr) - i);
  				end;
  			end	else
  			if Pos('♥♥]', wStr) > 0 then
  			begin
  				i := Pos('♥♥]', wStr);
  				if i = 1 then
  				begin
  					OrgStr := Copy(wStr, 1 + Length('♥♥]'), Length(wStr) - Length('♥♥]'));
  				end else
  				if i > 1 then
  				begin
  					OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥]') , Length(wStr) - i);
  				end;
  			end	else
  			if Pos('♥]', wStr) > 0 then
  			begin
  				i := Pos('♥]', wStr);
    			if i = 1 then
    			begin
    				OrgStr := Copy(wStr, 1 + Length('♥]'), Length(wStr) - Length('♥]'));
    			end else
    			if i > 1 then
    			begin
    				OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥]') , Length(wStr) - i);
    			end;
  			end;

        AddStr := '';
      end else
      if Atag = 98 then  //후불
			begin
//        if ( Pos('후불)', wStr) < 1 ) And ( Pos('즉후)', wStr) < 1 ) And ( Pos('법후)', wStr) < 1 ) then
        if ( Pos('후불)', wStr) < 1 ) then
        begin
          i := Pos('후불)', wStr);
          if i = 1 then
          begin
            OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
          end else
          if i > 1 then
          begin
            OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('후불)') , Length(wStr) - i);
          end;

          i := Pos('즉후)', wStr);
          if i = 1 then
          begin
            OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
          end else
          if i > 1 then
          begin
            OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
          end;

          i := Pos('법후)', wStr);
          if i = 1 then
          begin
            OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
          end else
          if i > 1 then
          begin
            OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('법후)') , Length(wStr) - i);
          end;

          if gsJON01SelfCard <> 'FALSE' then  // 현장카드 사용일때만 카드) 삭제 - S콜센터에서 요청  2021.01.28
          begin
            i := Pos('카드)', wStr);
            if i = 1 then
            begin
              OrgStr := Copy(wStr, 1 + Length('카드)'), Length(wStr) - Length('카드)'));
            end else
            if i > 1 then
            begin
              OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('카드)') , Length(wStr) - i);
            end;
          end;

  				if Pos('♥♥♥]', wStr) > 0 then
  				begin
    				i := Pos('♥♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥♥]'), Length(wStr) - Length('♥♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥♥]') , Length(wStr) - i);
  					end;
  				end	else
  				if Pos('♥♥]', wStr) > 0 then
  				begin
    				i := Pos('♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥]'), Length(wStr) - Length('♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥]') , Length(wStr) - i);
  					end;
  				end	else
  				if Pos('♥]', wStr) > 0 then
  				begin
    				i := Pos('♥]', wStr);
    				if i = 1 then
    				begin
    					OrgStr := Copy(wStr, 1 + Length('♥]'), Length(wStr) - Length('♥]'));
    				end else
    				if i > 1 then
    				begin
    					OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥]') , Length(wStr) - i);
    				end;
  				end;

					if not gsJON01AfterMoneyWordUse then // 출발지 '후불)' 문구 사용 false, 사용안함 True
					begin
						sTmp := Proc_BRNOSearch;
						for i := 0 to GS_BubHu_LIST.Count -1 do //법후사용 지사인지 확인 20171211 KHS
						begin
							if GS_BubHu_LIST[i] = sTmp then
							begin
								bTmp := True;
								Break;
							end;
						end;
						if ((GB_JON_BUBHUUSE) or (bTmp)) and (cxtCuBubin.Hint <> '')then
	//					if (GB_JON_BUBHUUSE) and (cxtCuBubin.Hint <> '') then
							AddStr := '법후)'
						else
						if (gsJON01AfterMoneyYN = 'TRUE') then
							AddStr := '후불)';
					end;
        end;
      end else
      if Atag = 99 then  //즉후
      begin
  			if ASpop = '♥♥♥]' then
	  		begin
  				if Pos('♥♥♥]', wStr) < 1 then
  				begin
  					i := Pos('후불)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('후불)') , Length(wStr) - i);
  					end;

  					i := Pos('즉후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
  					end;

  					i := Pos('법후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('법후)') , Length(wStr) - i);
  					end;

            if gsJON01SelfCard <> 'FALSE' then  // 현장카드 사용일때만 카드) 삭제 - S콜센터에서 요청  2021.01.28
            begin
              i := Pos('카드)', wStr);
              if i = 1 then
              begin
                OrgStr := Copy(wStr, 1 + Length('카드)'), Length(wStr) - Length('카드)'));
              end else
              if i > 1 then
              begin
                OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('카드)') , Length(wStr) - i);
              end;
            end;

            i := Pos(']', wStr);
            if i = 1 then
            begin
              OrgStr := StringReplace(wStr, ']', '', [rfReplaceAll]);
            end else
            if i > 1 then
            begin
              OrgStr := StringReplace(wStr, Copy(wStr, 1, i), '', [rfReplaceAll]);
            end;

  					i := Pos('♥♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥♥]'), Length(wStr) - Length('♥♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥♥]') , Length(wStr) - i);
  					end;
  					AddStr := ASpop ;
  				end;
  			end	else
  			if ASpop = '♥♥]' then
	  		begin
  				if Pos('♥♥]', wStr) < 1 then
  				begin
  					i := Pos('후불)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('후불)') , Length(wStr) - i);
  					end;

  					i := Pos('즉후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
  					end;

  					i := Pos('법후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('법후)') , Length(wStr) - i);
  					end;

            if gsJON01SelfCard <> 'FALSE' then  // 현장카드 사용일때만 카드) 삭제 - S콜센터에서 요청  2021.01.28
            begin
              i := Pos('카드)', wStr);
              if i = 1 then
              begin
                OrgStr := Copy(wStr, 1 + Length('카드)'), Length(wStr) - Length('카드)'));
              end else
              if i > 1 then
              begin
                OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('카드)') , Length(wStr) - i);
              end;
            end;

            i := Pos(']', wStr);
            if i = 1 then
            begin
              OrgStr := StringReplace(wStr, ']', '', [rfReplaceAll]);
            end else
            if i > 1 then
            begin
              OrgStr := StringReplace(wStr, Copy(wStr, 1, i), '', [rfReplaceAll]);
            end;

  					i := Pos('♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥]'), Length(wStr) - Length('♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥]') , Length(wStr) - i);
  					end;
  					AddStr := ASpop ;
  				end;
  			end	else
  			if ASpop = '♥]' then
  			begin
  				if Pos('♥]', wStr) < 1 then
  				begin
  					i := Pos('후불)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('후불)') , Length(wStr) - i);
  					end;

  					i := Pos('즉후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
  					end;

  					i := Pos('법후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('법후)') , Length(wStr) - i);
  					end;

            if gsJON01SelfCard <> 'FALSE' then  // 현장카드 사용일때만 카드) 삭제 - S콜센터에서 요청  2021.01.28
            begin
              i := Pos('카드)', wStr);
              if i = 1 then
              begin
                OrgStr := Copy(wStr, 1 + Length('카드)'), Length(wStr) - Length('카드)'));
              end else
              if i > 1 then
              begin
                OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('카드)') , Length(wStr) - i);
              end;
            end;

            i := Pos(']', wStr);
            if i = 1 then
            begin
              OrgStr := StringReplace(wStr, ']', '', [rfReplaceAll]);
            end else
            if i > 1 then
            begin
              OrgStr := StringReplace(wStr, Copy(wStr, 1, i), '', [rfReplaceAll]);
            end;

  					i := Pos('♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥]'), Length(wStr) - Length('♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('♥]') , Length(wStr) - i);
  					end;
  					AddStr := ASpop ;
  				end;
  			end	else
  			begin
  				if Pos('즉후)', wStr) < 1 then
  				begin
  					i := Pos('후불)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('후불)'), Length(wStr) - Length('후불)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('후불)') , Length(wStr) - i);
  					end;

  					i := Pos('즉후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('즉후)'), Length(wStr) - Length('즉후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('즉후)') , Length(wStr) - i);
  					end;

  					i := Pos('법후)', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('법후)'), Length(wStr) - Length('법후)'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('법후)') , Length(wStr) - i);
  					end;

            if gsJON01SelfCard <> 'FALSE' then  // 현장카드 사용일때만 카드) 삭제 - S콜센터에서 요청  2021.01.28
            begin
              i := Pos('카드)', wStr);
              if i = 1 then
              begin
                OrgStr := Copy(wStr, 1 + Length('카드)'), Length(wStr) - Length('카드)'));
              end else
              if i > 1 then
              begin
                OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('카드)') , Length(wStr) - i);
              end;
            end;

  					i := Pos('♥♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥♥]'), Length(wStr) - Length('♥♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥♥]') , Length(wStr) - i);
  					end;

  					i := Pos('♥♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥♥]'), Length(wStr) - Length('♥♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('♥♥]') , Length(wStr) - i);
  					end;

  					i := Pos('♥]', wStr);
  					if i = 1 then
  					begin
  						OrgStr := Copy(wStr, 1 + Length('♥]'), Length(wStr) - Length('♥]'));
  					end else
  					if i > 1 then
  					begin
  						OrgStr := Copy(wStr, 1, i-1) +
  																 Copy(wStr, i + Length('♥]') , Length(wStr) - i);
  					end;

						if not gsJON01AfterMoneyWordUse1 then // 출발지 '즉후)' 문구 사용 false, 사용안함 True
						begin
							sTmp := Proc_BRNOSearch;
							for i := 0 to GS_BubHu_LIST.Count -1 do //법후사용 지사인지 확인 20171211 KHS
							begin
								if GS_BubHu_LIST[i] = sTmp then
								begin
									bTmp := True;
									Break;
								end;
							end;
							if ((GB_JON_BUBHUUSE) or (bTmp)) and (cxtCuBubin.Hint <> '')then
								AddStr := '법후)'
							else
							if (gsJON01AfterMoneyYN = 'TRUE') then
								AddStr := '즉후)';
						end;
{
						if (GB_JON_BUBHUUSE) and (cxtCuBubin.Hint <> '') then
							AddStr := '법후)'
						else
						if (gsJON01AfterMoneyYN = 'TRUE') and (gsJON01AfterMoneyWordUse1 = False) then
							AddStr := '즉후)';  }
  				end;
  			end;
      end else
      if Atag = 0 then
      begin
        btnSViewMap.Click;
      end else
      if Atag = 1 then
      begin
        pSLoadView;
      end else
      if Atag = 2 then
      begin
        // 출발지 전화번호검색 제거 XE 3, 4에서
      end else
      if Atag = 3 then
      begin
        GBStartXYView.Visible := True;     //좌표
      end else
      if Atag = 5 then
      begin
        // 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
        Proc_Cust_AreaSave('START');
      end else
			if Atag = 6 then
      begin
        // 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
        Proc_Cust_AreaSave('DEST');
      end else
      if Atag = 8 then //출발지 POI추가요청
      begin
//				Proc_POIRequest(0, '', '', '', '', '', '', '');
				Proc_POIRequest(0, lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, lcsStaDocId, cxtStartYval.Text, cxtStartXval.Text);

//        Frm_jon30.mCtrlMan := Frm_jon30.mMap.GetCtrlMan();
//				Frm_jon30.mCtrlState := Frm_jon30.mCtrlMan.GetControlState();
//				Frm_jon30.mCenterLL := Frm_jon30.mCtrlState.GetLLCenter();
//				Frm_jon56.mCtrlState.SetLevel(Frm_jon30.mCtrlState.GetLevel());
//				Frm_jon56.OnMoveMap(Frm_jon30.mCenterLL.GetX,Frm_jon30.mCenterLL.GetY);

      end else
      if Atag = 9 then //출발지 POI오류 수정
      begin
				Proc_POIRequest(1, lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, lcsStaDocId, cxtStartYval.Text, cxtStartXval.Text);
      end
      else AddStr := FSpopList.Values[ASpop] + AddStr;
    end;
    FCurrSpop.Lines.Text := AddStr + OrgStr;
    FCurrSpop.SelStart := Length(AddStr + OrgStr);
  Except
    on e: exception do
    begin
      Log('AddSpop Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'AddSpop Error :' + E.Message);
    end;
  end;
end;

// 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
procedure TFrm_JON01N.Proc_Cust_AreaSave(sStartDest: string);
var
  ls_TxLoad, ls_TxQry, sCl_Key, sQueryTemp : string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  ErrCode: integer;
begin
  SetDebugeWrite('JON01N.Proc_Cust_AreaSave');
  if lcsCu_seq = '' then
  begin
    GMessagebox('고객 일련번호가 없습니다. 고객정보를 조회 한 다음 [저장] 하세요!', CDMSE);
    Exit;
  end;
  if cxtCallTelNum.Text = '' then
  begin
    GMessagebox('고객 전화번호가 없습니다. 고객정보를 조회 한 다음 [저장] 하세요!', CDMSE);
    Exit;
  end;

  if sStartDest = 'START' then
  begin
    // 출발지 정보를 저장.
    fGet_BlowFish_Query(GSQ_CUSTOMER_START_SAVE, sQueryTemp);
    ls_TxQry := Format(sQueryTemp, [lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text, lcsCu_seq]);
    sCl_Key := 'CUSE0011';
  end else
  begin
    // 도착지 정보를 저장.
    fGet_BlowFish_Query(GSQ_CUSTOMER_DEST_SAVE, sQueryTemp);
    ls_TxQry := Format(sQueryTemp, [lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, lcsCu_seq]);
    sCl_Key := 'CUSE0012';
  end;

  try
    ls_TxLoad := GTx_UnitXmlLoad('QUERY.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', sCl_Key);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'QueryString', ls_TxQry);

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;
  except
    on e: exception do
    begin
      grpBtm.Enabled := True;
      Screen.Cursor := crDefault;

      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.AddEpop(AEpop: string; Atag: Integer);
var
  AddStr, OrgStr, sDesc, sSelBtn : string;
  iPos : Integer;
begin
  SetDebugeWrite('JON01N.AddEpop');
  try
    if not Assigned(FCurrEpop) then
      FCurrEpop := meoEndArea;

    OrgStr := FCurrEpop.Lines.Text;  //원래 있던내용

    if Atag > 7 then
    begin
      iPos := Pos('│', FEpopList.Values[AEpop]);
      if iPos > 0 then
      begin
        sDesc   := Copy(FEpopList.Values[AEpop], 1, iPos - 1);
        sSelBtn := Copy(FEpopList.Values[AEpop], iPos + 1, Length(FEpopList.Values[AEpop]) - iPos);
      end else
      begin
        sDesc   := FEpopList.Values[AEpop];
      end;
      AddStr := '{' + sDesc + '}' + AddStr;
    end else
    if Atag = 0 then
    begin
      GBEndXYView.Visible := True;     //좌표
    end else
    if Atag = 1 then
    begin
      pELoadView;
    end else
    if Atag = 3 then
    begin
      // 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
      Proc_Cust_AreaSave('START');
    end else
    if Atag = 4 then
    begin
      // 고객 출발지(START), 도착지(DEST) 정보를 저장한다.
      Proc_Cust_AreaSave('DEST');
    end else
    if Atag = 6 then //도착지POI오류 신고
    begin
      Proc_POIRequest(1, lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption, lcsEndDocId, cxtEndYval.Text, cxtEndXval.Text);
    end
    else  AddStr := FEpopList.Values[AEpop] + AddStr;

    FCurrEpop.Lines.Text := AddStr + OrgStr;
  Except
    on e: exception do
    begin
      Log('AddEpop Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'AddEpop Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.AddBigo(ABigo: string; Atag : Integer);
var
  AddStr, OrgStr, sDesc, sSelBtn : string;
  iPos : Integer;
begin
  SetDebugeWrite('JON01N.AddBigo');
  try
    if not Assigned(FCurrBigo) then
      FCurrBigo := meoBigo;

    OrgStr := FCurrBigo.Lines.Text;  //원래 있던내용
    if OrgStr <> '' then
      AddStr := '/';

    iPos := Pos('│', FBigoList.Values[ABigo]);
    if iPos > 0 then
    begin
      sDesc   := Copy(FBigoList.Values[ABigo], 1, iPos - 1);
      sSelBtn := Copy(FBigoList.Values[ABigo], iPos + 1, Length(FBigoList.Values[ABigo]) - iPos);
    end else
    begin
      sDesc   := FBigoList.Values[ABigo];
    end;

    if Pos('<$시간$>', sDesc) > 0 then AddStr := sDesc + AddStr   //추가된내용      2011.12.02 KHS
    else
    begin
      if Atag < 4 then
      begin
        AddStr := sDesc + '-' + '<$시간$>' + AddStr ;  //추가된내용
      end
      else  AddStr := sDesc + AddStr;
    end;
    AddStr := StringReplace(AddStr, '<$시간$>', FormatDateTime('HH:MM:SS', Now), [rfReplaceall]);
    FCurrBigo.Lines.Text := AddStr + OrgStr;
    if FCurrBigo.CanFocus then
    begin
      FCurrBigo.SetFocus;
      FCurrBigo.SelStart := Length(FCurrBigo.Text);
    end;

    SetPnlWorkMemoSize;
  Except
    on e: exception do
    begin
      Log('AddBigo Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'AddBigo Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.ChkCuSmsNoClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.BtnCuSmsNoClick');
  if ChkCuSmsNo.Tag = 1 then Exit;

  if Trim(cxtCuTel.Text) = '' then
  begin
    ChkCuSmsNo.Tag := 1;
    ChkCuSmsNo.Checked := False;
    ChkCuSmsNo.Tag := 0;
    Exit;
  end;

	if (lcsCu_seq <> '') then
  begin
    Proc_CustSMSSave;
  end else
  begin
    ChkCuSmsNo.Tag := 1;
    ChkCuSmsNo.Checked := False;
    ChkCuSmsNo.Tag := 0;
		GMessagebox('신규 미등록 고객은 SMS거부를 접수 전에 저장 할 수 없습니다.', CDMSE);
  end;
end;

procedure TFrm_JON01N.chkViewLevelClick(Sender: TObject);
begin
  if chkViewLevel.Checked then
  begin
    if Assigned(Frm_JON011) then
      Frm_JON011.chkViewLevel.Checked := True;
    chkViewLevel.Checked := True;
  end else
  begin
    if Assigned(Frm_JON011) then
      Frm_JON011.chkViewLevel.Checked := False;
    chkViewLevel.Checked := False;
  end;
end;

procedure TFrm_JON01N.chk_AIReCallMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  pFormActive;
	if chk_AIReCall.Properties.ReadOnly  then
	begin
		if ( Not Assigned(Frm_AIC10) ) Or ( Frm_AIC10 = Nil ) then
			Frm_AIC10 := TFrm_AIC10.Create(Nil);
		Frm_AIC10.Show;
	end;
end;

procedure TFrm_JON01N.ControlClear(bTF: boolean);
Var iH : Integer;
begin
  SetDebugeWrite('JON01N.ControlClear');
  try
    FCustBrTelYN := '';

    chkCenterMng.Checked := False;

    cxBtnSpSave.Enabled := False;

    cbMileSanction.Visible := False;

    // 컨트롤 초기화..
    edtCuName.Text := ''; // 고객명
		CbCuGb.Hint := 'Clear';
    CbCuGb.ItemIndex := 0; // -- 개인(고객구분)
    lblCuBubinName.Caption := '';
    cxtCuBubin.Text := '';
    cxtCuBubin.Hint := '';
    if Self.Tag > -1 then gsShortCoprNm[Self.Tag] := '';
    CbCuGbPropertiesChange(CbCuGb);
    CbCuGb.Hint := '';

    FChkCCI.Name    := '';
		FChkCCI.CbCuGb  := 0;
 		FChkCCI.CbLevel := 0;
    FChkCCI.BuCode  := '';
		FChkCCI.meoCuCCMemo  := '';
    FChkCCI.meoCBMemo    := '';
		FChkCCI.meoCuWorMemo := '';
		FChkCCI.edt_CardMemo := '';

    lblCuCntTotal.Caption := '0'; // 접수
    lblCoCntTotal.Caption := '0'; // 완료
    lblCuCancelR.Caption := '0%'; // 취소율
    lblCuMile.Caption := '0'; // 적립마일리지
    lblCuMile.Style.Font.Style := [fsBold];
		lblMoCuMile.Caption := '0';
//    lblMoCuMile.Visible := False;
//    Label9.Visible := False;
    lblCuMileUnit.Caption := '0'; // 기준마일리지
    lblCuMileCnt.Caption := '0'; // 지급 횟수
		lblCuMileLost.Caption := '0'; // 소멸예정마일리지

    meoCuCCMemo.Clear; // 상담메모(상담원용)
    edt_CardMemo.Text := '';

//  	mmoCuInfo.Text := '앱코드 : '#13#10 +
//    								  '앱설치 : '#13#10+
//                      '앱삭제 : '#13#10 +
//    								  '최종 : '#13#10 +
//    								  '앱지역 : '#13#10 +
//    								  'OS/모델 : '#13#10 +
//    								  '앱설치버전 : '#13#10 +
//    								  '사용 : ';

    ChkCuSmsNo.Tag := 1;
    ChkCuSmsNo.Checked := False;
    ChkCuSmsNo.Tag := 0;

    if ( GB_365System ) And ( bTF ) then
    begin
      iH := 60;
      lblCustInDateT.Visible := True;
			lblCustInDate .Visible := True;
      lblCustInDate .Caption := '';
    end else
    begin
      iH := 0;
      lblCustInDateT.Visible := False;
      lblCustInDate .Visible := False;
    end;

    cxLCuCCMemoFlg1.Left  := 12 + iH;
    shpSimpleMemo.Left  := 6 + iH;
    shpSimpleMemo.Width := 576 - iH;
    edt_CardMemo.Left  := 7 + iH;
    edt_CardMemo.Width := 572 - iH;

    mmoCBMemo.Clear;
    mmoCBMemo.Visible := False;
    shpCBMemo.Visible := False;
    lblCbMemoFlag.Visible := False;

    meoCuWorMemo.Lines.Clear; // 기사용고객메모
    lblCuBubinName.Caption := ''; // 법인명/부서명

    shpMile.Brush.Color := $00585C5C;
    Proc_SetFormColor_2(2);
    DefaultCustLevel;
    SetMileColorChange;

 		// 접수시에 또는 수정시에 버튼위치 설정.
		SetCmdOrderUpdate;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.curCbChargeExit(Sender: TObject);
begin
  if TcxCurrencyEdit(Sender).Value < 0 then TcxCurrencyEdit(Sender).Value := 0;
  if ( TcxCurrencyEdit(Sender).Name = 'curMileCharge' ) And ( TcxCurrencyEdit(Sender).Value > 0 ) then
  begin
    if scb_MultiSetYN[scb_BranchCode.IndexOf(Proc_BRNOSearch)] = 'n' then
    begin
      GMessagebox('복합결제 마일리지 설정 값이 없습니다.' + #13#10 +
                  '일마감 전까지 마일리지 설정을 해주세요.' + #13#10 +
                  '(설정메뉴:고객-마일리지설정-복합결제)', CDMSE);
    end;
  end;
end;

procedure TFrm_JON01N.curKmEnter(Sender: TObject);
begin
  SetDebugeWrite('JON01N.curKmEnter');
  if ( Lbl_Charge.Caption <> '' ) And ( GT_DISTANCE_ST = 1 ) then
  begin
    if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                        else lbl_PlusAreaNotice.Visible := False;

    SetPosLblDistance;
    pnl_charge.BringToFront;
    pnl_charge.Visible := True;
    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Top := pnl_charge.Top + pnl_Charge.height;
  end;
end;

procedure TFrm_JON01N.curKmExit(Sender: TObject);
begin
  SetDebugeWrite('JON01N.curKmExit');
  pnl_charge.Visible := False;
end;

procedure TFrm_JON01N.curOutMileMnyKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	if key = vk_Return then edtMileMemo.SetFocus;
end;

procedure TFrm_JON01N.curRateEditing(Sender: TObject; var CanEdit: Boolean);
begin
	curRate.Tag := 30;//요금에 포커스 들어감
	bCurRateEditMode := True;
end;

procedure TFrm_JON01N.curRateEnter(Sender: TObject);
Var iRate : Integer;
begin
	SetDebugeWrite('JON01N.curRateEnter');
	try
		// 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
  	if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice)
      and ((Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['2', '4', '8']))
      and (    (cxtStartXval.Text <> cxtStartXval.Hint) or (cxtStartYval.Text <> cxtStartYval.Hint)
            or (cxtEndXval.Text <> cxtEndXval.Hint) or (cxtEndYval.Text <> cxtEndYval.Hint))  // 좌표변환이 있었을경우
      then
    begin
      if ( Not GS_ALL_SEVEN ) then
      begin
        tmrThRealDis.Tag := 0;
        proc_dis_alculation(Self.Tag, True);
				if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
															 else begin
                                      iRate := func_search_charge;
                                      if Not gsMyMainRateNoChange then
                                      begin
                                        if BtnRaLock.Hint <> 'F4)잠금' then
                                        begin
																					curRate.Value := iRate{ + cxCurRevisionRate.value};
																					OrgRate := curRate.Value{ - cxCurRevisionRate.value};
																				end;
                                      end;
                                    end;
      end;
    end else
    if ((gsMyMainTelUse = 'TRUE') And (Not GSMyMainTelOrderChargeCheck)) then    // 대표번호별 기본요금 사용 및 접수 미반영시에는 거리만 따로 계산
    begin
      if GT_DISTANCE_ST = 0 then proc_dis_alculation(Self.Tag, True) else
      if GT_DISTANCE_ST = 1 then
      begin
				tmrThRealDis.Tag := 0;
        proc_dis_alculation(Self.Tag, True);
        proc_Realdis_Mng;  // 대표번호별 기본요금 사용 시 거리 계산 안되는 문제 처리
      end;
    end;

    FIsCalcPrice := True;

    if Lbl_Charge.Caption <> '' then
    begin
      if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                          else lbl_PlusAreaNotice.Visible := False;

      SetPosLblDistance;
      pnl_charge.BringToFront;
      pnl_charge.Visible := True;
      if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Top := pnl_charge.Top + pnl_Charge.height;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.curRateExit(Sender: TObject);
begin
	SetDebugeWrite('JON01N.curRateExit');
  try
    pnl_charge.Visible := False;
		if curRate.Text = '' then
			curRate.Value := 0;

		//요금이 보정금액보다 적으면 요금=보정금액 20210226 KHS
//		if curRate.Value < cxCurRevisionRate.value then curRate.Value := cxCurRevisionRate.value;

    if GB_365System then
		begin
			if (curRate.Value > 0) and (curRate.Value < 1000) then
			begin
				curRate.Value := curRate.Value * 1000;
			end;
		end;

		if cbbPayMethod.Text = PAY_METHOD_MULTI then
    begin
      curCbCharge.Tag := 0;
      onMultiChargePropertiesChange(curRate);
      if curCbCharge.Tag = -1 then
      begin
        curCbCharge.Tag := 0;
        curCbCharge.Value := 0;
        curMileCharge.Value := 0;
        curCardCharge.Value := 0;
      end;
    end;

		curRate.Tag := 0; //포커스 나감
		bCurRateEditMode := False;

		if GT_Kakao_KMAiRate then
		begin
			if Assigned(frm_JON021) and (frm_JON021.Showing) then frm_JON021.hide;
		end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.curRateKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  SetDebugeWrite('JON01N.curRateKeyDown');
  try
    if Ord(Key) = VK_RETURN then
		begin
			if (curRate.Value > 0) and (curRate.Value < 1000) then
      begin
				curRate.Value := curRate.Value * 1000;
			end;
			//요금이 보정금액보다 적으면 요금=보정금액 20210226 KHS
//			if curRate.Value < cxCurRevisionRate.value then curRate.Value := cxCurRevisionRate.value;
			if meoBigo.Visible = True then
        meoBigo.SetFocus
			else
        meoBigo2.SetFocus;

			if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
				OrgRate := curRate.Value{ - cxCurRevisionRate.value};

			if (GS_START_AUTOLOCK) then
      begin
				BtnRaLock.Hint := 'F4)잠금';
        BtnRaLock.Tag  := 0;
        BtnRaLock.Down := True;
        BtnRaLock.ImageIndex := 1;
      end;
    end else
    if Ord(key) = VK_F4 then
    begin
      if BtnRaLock.Hint = 'F4)잠금' then
      begin
        BtnRaLock.Hint := 'F4)수정';
        BtnRaLock.Tag  := 0;
        BtnRaLock.Down := False;
        BtnRaLock.ImageIndex := 0;
      end else
      begin
        BtnRaLock.Hint := 'F4)잠금';
        BtnRaLock.Tag  := 0;
        BtnRaLock.Down := True;
        BtnRaLock.ImageIndex := 1;

				curRate.Value := curRate.Value;      // 이부분을 안해주면 금액이 기존대로 돌아감
      end;
      Exit;
    end else
    if Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1] then
    begin
      case ord(key) of
        Vk_F1:
          if btnPickupInsert.Visible then
            btnPickupInsert.OnClick(btnPickupInsert); // 픽업등록 단축키 : 2011.05.25 CDS. Add.
        //      VK_F6     : if rb_search.Enabled then rb_Search.OnClick(rb_Search);
        Vk_F7: //if rb_Modify.Enabled then rb_Modify.OnClick(rb_Modify);              // 수정
          if btnCmdUpdSave.Enabled then
            btnCmdUpdSave.OnClick(btnCmdUpdSave);
				Vk_F8: //whbtn_Cancel.OnClick(whbtn_Cancel);
				begin                                // 종료
					SetDebugeWrite('JON01N.curRateKeyDown->Vk_F8');
					btnCmdExit.OnClick(btnCmdExit);
				end;
				Vk_F9:
          begin
            if not btnCmdJoin.Enabled then Exit; // 접수
            btnCmdJoinClick(btnCmdJoin);
          end;
        Vk_F10:
          if btnCmdWait.Enabled then
            btnCmdWait.OnClick(btnCmdWait); // 대기
        Vk_F11:
          if ( btnCmdMultiCall.Visible ) And ( btnCmdMultiCall.Enabled ) then btnCmdMultiCall.Click;   // 복수콜
        Vk_F12:
          if btnCmdQuestion.Enabled then
            btnCmdQuestion.OnClick(btnCmdQuestion); // 문의
        VK_ESCAPE: // ESC 키
          begin
            if (lcsActiveEdit = 'meoStartArea') or (lcsActiveEdit = 'meoEndArea') then
            begin
              if (Trim(meoStartArea.Text) = '') and (Trim(meoEndArea.Text) = '')
								and (Trim(lblStartAreaName.Text) = '') and (Trim(lblEndAreaName.Caption) = '')
								and (Trim(cxtStartAreaDetail.Text) = '') and (Trim(cxtEndAreaDetail.Caption) = '') then
							begin
								SetDebugeWrite('JON01N.curRateKeyDown->Vk_F8');
								btnCmdExit.OnClick(btnCmdExit);
							end;
						end;
          end;
      end;
    end;

		if (Ord(Key) = VK_RETURN) or (Ord(key) in [VK_F7..VK_F12, VK_ESCAPE, Vk_F1]) or (Ord(key) = VK_DOWN) or (Ord(key) = VK_UP) then
		else
		begin
			if bCurRateEditMode = False then
      begin
				curRate.Text := '';
      end;
		end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.curRateKeyPress(Sender: TObject; var Key: Char);
begin
  SetDebugeWrite('JON01N.curRateKeyPress');
	if (Key = '-') or (Key = 'e') or (Key = 'E') then
		Key := #0;
end;

procedure TFrm_JON01N.curRateKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
	OrgRate := curRate.Value{ - cxCurRevisionRate.value};
end;

procedure TFrm_JON01N.curRateMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
	if curRate.Tag <> 30 then
		bCurRateEditMode := False; //수정불가   , 전체삭제됨
end;

procedure TFrm_JON01N.curRatePropertiesChange(Sender: TObject);
var
	UserMile, Price: Integer;
  iMileUnit : Integer;
  TotMile : Real;
begin
	SetDebugeWrite('JON01N.curRatePropertiesChange');
  try
    // 기사자동입금액 보정
  	if IsPayMethodPost then
    begin
      if GS_PRJ_AREA = 'S' then
      begin
        // 수도권은 수정모드에서도 허용
        if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
        begin
					Price := curRate.Value;
					UserMile := StrToIntDef(RemoveComma(lblCuMile.Caption), 0)
										+ StrToIntDef(RemoveComma(lblMoCuMile.Caption), 0);
          iMileUnit := StrToIntDef(RemoveComma(lblCuMileUnit.Caption), 0);
					if Price >= UserMile then
					begin
            if ( iMileUnit > 0 ) And ( gsJON01MileUnitUse ) then
            begin
							if ( iMileUnit >= Trunc(UserMile / 1000) * 1000 ) then
                edtPostPay.Value := Trunc(UserMile / 1000) * 1000
              else
                edtPostPay.Value := iMileUnit;
            end else
            begin
              edtPostPay.Value := Trunc(UserMile / 1000) * 1000;
            end;
					end	else
          begin
            if ( iMileUnit > 0 ) And ( gsJON01MileUnitUse ) then
            begin
              if ( iMileUnit >= Price ) then
                edtPostPay.Value := Price
              else
                edtPostPay.Value := iMileUnit
            end else
            begin
              edtPostPay.Value := Price;
            end;
          end;
				end	else
        if cbbPayMethod.Text = PAY_METHOD_CARD_KCP then
				begin
					if gCardStatus <> '결제완료' then  //카드결제완료일때는 요금변경 시 기사송금금액은 변경되지 않게 한다 20160823KHS
						edtPostPay.Value := curRate.Value
					else
						AppendPostDesc;
				end	else
        if cbbPayMethod.Text = PAY_METHOD_MULTI then
        begin
//          curCbCharge.Tag := 0;
//          onMultiChargePropertiesChange(curCbCharge);
//          if curCbCharge.Tag = -1 then
//          begin
//            curCbCharge.Tag := 0;
//            curCbCharge.Value := 0;
//            curMileCharge.Value := 0;
//            curCardCharge.Value := 0;
//          end;
        end
  			else
  				edtPostPay.Value := curRate.Value;
      end else
			begin
  			// 지방권은 수정모드에서 미적용.
				// 수정모드 일때는 기사자동입금액이 수정되지 않도록 요청하여 적용함(신과장요청). 2011.07.19
        // 정회귀팀장과 지방 XE3 만 미적용에서 적용으로 협의   2020.07.07
//				if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0 ) then
        begin
          if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
					begin
            Price := curRate.Value;
            UserMile := StrToIntDef(RemoveComma(lblCuMile.Caption), 0)
                      + StrToIntDef(RemoveComma(lblMoCuMile.Caption), 0);
            iMileUnit := StrToIntDef(RemoveComma(lblCuMileUnit.Caption), 0);

  					if AUseMileage then
  						edtPostPay.Value := IfThen(UserMile >= Price, Price, 10000)
  					else
            begin
              if Price >= UserMile then
              begin
                if ( iMileUnit > 0 ) And ( gsJON01MileUnitUse ) then
                begin
									if ( iMileUnit >= Trunc(UserMile / 1000) * 1000 ) then
                    edtPostPay.Value := Trunc(UserMile / 1000) * 1000
                  else
                    edtPostPay.Value := iMileUnit;
                end else
                begin
                  edtPostPay.Value := Trunc(UserMile / 1000) * 1000;
                end;
              end	else
              begin
                if ( iMileUnit > 0 ) And ( gsJON01MileUnitUse ) then
								begin
                  if ( iMileUnit >= Price ) then
                    edtPostPay.Value := Price
                  else
                    edtPostPay.Value := iMileUnit
                end else
                begin
                  edtPostPay.Value := Price;
                end;
              end;
            end;
  				end else
  				begin
            if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

  					if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
            begin
              edtPostPay.Value := 0;
              cxLblWkJAmt.Caption := '1,000';
              if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
  					end else
     				if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
            begin
              edtPostPay.Value := 0;
              cxLblWkJAmt.Caption := '2,000';
							if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
  	  			end else
     				if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
            begin
              edtPostPay.Value := 0;
              cxLblWkJAmt.Caption := '3,000';
              if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
  	  			end else
            if cbbPayMethod.Text = PAY_METHOD_MULTI then
            begin
              curCbCharge.Tag := 0;
              onMultiChargePropertiesChange(curCbCharge);
              if curCbCharge.Tag = -1 then
              begin
                curCbCharge.Tag := 0;
                curCbCharge.Value := 0;
                curMileCharge.Value := 0;
                curCardCharge.Value := 0;
              end;
            end else
  						edtPostPay.Value := curRate.Value;
  				end;
  			end;
      end;
    end;

		if (Pos('수정', Self.Caption) > 0) or (Pos('앱접수', Self.Caption) > 0 ) then
		begin
			if curRate.Tag <> curRate.Value then
			begin
				if giArea_Charge_YN = 'y' then
				begin
					Proc_Driver_Charge;
				end else
					cxDriverCharge.Text := '';

				curRate.Tag := curRate.Value{ - cxCurRevisionRate.value};

			end;
		end else
		begin
			if giArea_Charge_YN = 'y' then
			begin
				Proc_Driver_Charge;
			end else
				cxDriverCharge.Text := '';
		end;

		if cbbPostTime.Text = POST_TIME_NOPAY then
		begin
  		edtPostPay.Value := 0;
    end;

    if cbbPayMethod.Text = PAY_METHOD_POST_MILE then          //  20130705  LYB   요금수정되면 쿠폰결제금액도 수정
    begin
   	  if Assigned(Frm_Main.Frm_JON34B[Self.Tag]) then
			begin
        Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Value := curRate.Value;

        if Frm_Main.Frm_JON34B[Self.Tag].lblCouponStatus.Caption = '승인완료' then
        begin
					UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0)
										+ StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);
					if Frm_Main.Frm_JON34B[Self.Tag].cxCurDec_Coupon.Value >= Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Value then
  					edtPostPay.Value := Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Value
					else
          begin
  					TotMile := Frm_Main.Frm_JON34B[Self.Tag].cxCurDec_Coupon.Value + UserMile;
						if Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Value > TotMile then
  						edtPostPay.Value := TotMile
            else
  						edtPostPay.Value := Frm_Main.Frm_JON34B[Self.Tag].cxCurDecRate_Coupon.Value;
          end;
        end;
      end;
    end;

  	AppendPostDesc;
    pCompareQRateInfo;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.SetPnlWorkMemoSize;
Var iHeight : Integer;
begin
 	SetDebugeWrite('JON01N.SetPnlWorkMemoSize');
  if Self.Tag < 0 then Exit;

  if Length(AnsiString(meoBigo.Text)) < 80 then
  begin
    meoBigo.Height := 22;
  end else
  if ( Length(AnsiString(meoBigo.Text)) >= 80 ) And
     ( Length(AnsiString(meoBigo.Text)) <= 160 )  then
  begin
    meoBigo.Height := 34;
  end else
  if Length(AnsiString(meoBigo.Text)) > 160 then
  begin
    meoBigo.Height := 46;
  end;

  if Length(AnsiString(meoBigo2.Text)) < 80 then
  begin
    meoBigo2.Height := 22;
  end else
  if ( Length(AnsiString(meoBigo2.Text)) >= 80 ) And
     ( Length(AnsiString(meoBigo2.Text)) <= 160 )  then
  begin
    meoBigo2.Height := 34;
  end else
  if Length(AnsiString(meoBigo2.Text)) > 160 then
  begin
    meoBigo2.Height := 46;
  end;

  if ( Trim(meoBigo3.Text) <> '' ) Or ( GB_JON_MEMO3_USE ) then
  begin
    if Not meoBigo3.Visible then
    begin
      meoBigo3.Visible := True;
    end;

    if Length(AnsiString(meoBigo3.Text)) < 80 then
    begin
      meoBigo3.Height := 22;
    end else
    if ( Length(AnsiString(meoBigo3.Text)) >= 80 ) And
       ( Length(AnsiString(meoBigo3.Text)) <= 160 )  then
    begin
      meoBigo3.Height := 34;
    end else
    if Length(AnsiString(meoBigo3.Text)) > 160 then
    begin
      meoBigo3.Height := 46;
    end;
  end;

  if Not meoBigo3.Visible then
    iHeight := 7 + meoBigo.Height + 1 + meoBigo2.Height + 8
  else
    iHeight := 7 + meoBigo.Height + 1 + meoBigo2.Height + 1 + meoBigo3.Height + 8;

  grpWorkMemo.Height := iHeight;
  if gJon01Size[Self.Tag].grpWorkMemoH = grpWorkMemo.Height then Exit;

  try
    pSetFormScroll(0, grpWorkMemo.Height - gJon01Size[Self.Tag].grpWorkMemoH );
  finally
    gJon01Size[Self.Tag].grpWorkMemoH := grpWorkMemo.Height;
  end;
end;

procedure TFrm_JON01N.SetPnlCustMemoSize(Sender: TObject);
Var iACnt, iBCnt, iHeight : Integer;
begin
 	SetDebugeWrite('JON01N.SetPnlCustMemoSize');

  if Self.Tag < 0 then Exit;

  if TcxMemo(Sender).Tag = 1 then Exit;

//  if ( TcxMemo(Sender).Name = 'meoCuCCMemo'  ) And ( TcxMemo(Sender).Text = '' ) then Exit;
//  if ( TcxMemo(Sender).Name = 'meoCuWorMemo' ) And ( TcxMemo(Sender).Text = '' ) then Exit;
//  if ( TcxMemo(Sender).Name = 'edt_CardMemo' ) And ( TcxMemo(Sender).Text = '' ) then Exit;
//  if ( TcxMemo(Sender).Name = 'mmoCbMemo'    ) And ( TcxMemo(Sender).Text = '' ) then Exit;

  iACnt := 0;
  if ( Length(AnsiString(meoCuCCMemo.Text)) < 40 ) And ( Length(AnsiString(meoCuWorMemo.Text)) < 40 ) And
     ( ( meoCuCCMemo.Lines.Count <= 1 ) And ( meoCuWorMemo.Lines.Count <= 1 ) ) then
  begin
    iACnt := 0;
  end else
  if ( ( meoCuCCMemo.Lines.Count >= 7 ) Or ( meoCuWorMemo.Lines.Count >= 7 ) ) Or
     ( ( Length(AnsiString(meoCuCCMemo.Text)) > 240 ) Or ( Length(AnsiString(meoCuWorMemo.Text)) > 240 ) ) then
  begin
    iACnt := 6;
  end else
  if ( ( meoCuCCMemo.Lines.Count = 6 ) Or ( meoCuWorMemo.Lines.Count = 6 ) ) Or
     ( ( Length(AnsiString(meoCuCCMemo .Text)) >= 200 ) And ( Length(AnsiString(meoCuCCMemo .Text)) < 240 ) ) Or
     ( ( Length(AnsiString(meoCuWorMemo.Text)) >= 200 ) And ( Length(AnsiString(meoCuWorMemo.Text)) < 240 ) ) then
  begin
    iACnt := 5;
  end else
  if ( ( meoCuCCMemo.Lines.Count = 5 ) Or ( meoCuWorMemo.Lines.Count = 5 ) ) Or
     ( ( Length(AnsiString(meoCuCCMemo .Text)) >= 160 ) And ( Length(AnsiString(meoCuCCMemo .Text)) < 200 ) ) Or
     ( ( Length(AnsiString(meoCuWorMemo.Text)) >= 160 ) And ( Length(AnsiString(meoCuWorMemo.Text)) < 200 ) ) then
  begin
    iACnt := 4;
  end else
  if ( ( meoCuCCMemo.Lines.Count = 4 ) Or ( meoCuWorMemo.Lines.Count = 4 ) ) Or
     ( ( Length(AnsiString(meoCuCCMemo .Text)) >= 120 ) And ( Length(AnsiString(meoCuCCMemo .Text)) < 160 ) ) Or
     ( ( Length(AnsiString(meoCuWorMemo.Text)) >= 120 ) And ( Length(AnsiString(meoCuWorMemo.Text)) < 160 ) ) then
  begin
    iACnt := 3;
  end else
  if ( ( meoCuCCMemo.Lines.Count = 3 ) Or ( meoCuWorMemo.Lines.Count = 3 ) ) Or
     ( ( Length(AnsiString(meoCuCCMemo .Text)) >= 80 ) And ( Length(AnsiString(meoCuCCMemo .Text)) < 120 ) ) Or
     ( ( Length(AnsiString(meoCuWorMemo.Text)) >= 80 ) And ( Length(AnsiString(meoCuWorMemo.Text)) < 120 ) ) then
  begin
    iACnt := 2;
  end else
  if ( ( meoCuCCMemo.Lines.Count = 2 ) Or ( meoCuWorMemo.Lines.Count = 2 ) ) Or
     ( ( Length(AnsiString(meoCuCCMemo .Text)) >= 40 ) And ( Length(AnsiString(meoCuCCMemo .Text)) < 80 ) ) Or
     ( ( Length(AnsiString(meoCuWorMemo.Text)) >= 40 ) And ( Length(AnsiString(meoCuWorMemo.Text)) < 80 ) ) then
  begin
    iACnt := 1;
  end;

  meoCuCCMemo.Height := 21 + (11 * iACnt);
  meoCuWorMemo.Height := meoCuCCMemo.Height;
  shpCenterMemo.Height := meoCuCCMemo.Height + 7;
  shpWorkMemo.Height := shpCenterMemo.Height;

  iBCnt := 0;
  if mmoCbMemo.Visible then
  begin
    if ( Length(AnsiString(edt_CardMemo.Text)) < 40 ) And ( Length(AnsiString(mmoCbMemo.Text)) < 40 ) And
       ( ( edt_CardMemo.Lines.Count <= 1 ) And ( mmoCbMemo.Lines.Count <= 1 ) ) then
    begin
      iBCnt := 0;
    end else
    if ( ( edt_CardMemo.Lines.Count >= 6 ) Or ( mmoCbMemo.Lines.Count >= 6 ) ) Or
       ( ( Length(AnsiString(edt_CardMemo.Text)) > 200 ) Or ( Length(AnsiString(mmoCbMemo.Text)) > 200 ) ) then
    begin
      iBCnt := 5;
    end else
    if ( ( edt_CardMemo.Lines.Count = 5 ) Or ( mmoCbMemo.Lines.Count = 5 ) ) Or
       ( ( Length(AnsiString(edt_CardMemo.Text)) >= 160 ) And ( Length(AnsiString(edt_CardMemo.Text)) < 200 ) ) Or
       ( ( Length(AnsiString(mmoCbMemo   .Text)) >= 160 ) And ( Length(AnsiString(mmoCbMemo   .Text)) < 200 ) ) then
    begin
      iBCnt := 4;
    end else
    if ( ( edt_CardMemo.Lines.Count = 4 ) Or ( mmoCbMemo.Lines.Count = 4 ) ) Or
       ( ( Length(AnsiString(edt_CardMemo.Text)) >= 120 ) And ( Length(AnsiString(edt_CardMemo.Text)) < 160 ) ) Or
       ( ( Length(AnsiString(mmoCbMemo   .Text)) >= 120 ) And ( Length(AnsiString(mmoCbMemo   .Text)) < 160 ) ) then
    begin
      iBCnt := 3;
    end else
    if ( ( edt_CardMemo.Lines.Count = 3 ) Or ( mmoCbMemo.Lines.Count = 3 ) ) Or
       ( ( Length(AnsiString(edt_CardMemo.Text)) >= 80 ) And ( Length(AnsiString(edt_CardMemo.Text)) < 120 ) ) Or
       ( ( Length(AnsiString(mmoCbMemo   .Text)) >= 80 ) And ( Length(AnsiString(mmoCbMemo   .Text)) < 120 ) ) then
    begin
      iBCnt := 2;
    end else
    if ( ( edt_CardMemo.Lines.Count = 2 ) Or ( mmoCbMemo.Lines.Count = 2 ) ) Or
       ( ( Length(AnsiString(edt_CardMemo.Text)) >= 40 ) And ( Length(AnsiString(edt_CardMemo.Text)) < 80 ) ) Or
       ( ( Length(AnsiString(mmoCbMemo   .Text)) >= 40 ) And ( Length(AnsiString(mmoCbMemo   .Text)) < 80 ) ) then
    begin
      iBCnt := 1;
    end;

    edt_CardMemo.Height := 21 + (11 * iBCnt);
    mmoCbMemo.Height := edt_CardMemo.Height;
    shpSimpleMemo.Height := edt_CardMemo.Height + 7;
    shpCBMemo.Height := shpSimpleMemo.Height;
  end else
  begin
    if ( ( Length(AnsiString(edt_CardMemo.Text)) < 90 ) And ( edt_CardMemo.Lines.Count = 1 ) ) Or ( Trim(edt_CardMemo.Text) = '' ) then
    begin
      iBCnt := 0;
    end else
    if ( edt_CardMemo.Lines.Count >= 6 ) Or ( Length(AnsiString(edt_CardMemo.Text)) > 450 )  then
    begin
      iBCnt := 5;
    end else
    if ( edt_CardMemo.Lines.Count = 5 ) Or
       ( ( Length(AnsiString(edt_CardMemo.Text)) >= 360 ) And ( Length(AnsiString(edt_CardMemo.Text)) < 450 ) ) then
    begin
      iBCnt := 4;
    end else
    if ( edt_CardMemo.Lines.Count = 4 ) Or
       ( ( Length(AnsiString(edt_CardMemo.Text)) >= 270 ) And ( Length(AnsiString(edt_CardMemo.Text)) < 360 ) ) then
    begin
      iBCnt := 3;
    end else
    if ( edt_CardMemo.Lines.Count = 3 ) Or
       ( ( Length(AnsiString(edt_CardMemo.Text)) >= 180 ) And ( Length(AnsiString(edt_CardMemo.Text)) < 270 ) ) then
    begin
      iBCnt := 2;
    end else
    if ( edt_CardMemo.Lines.Count = 2 ) Or
       ( ( Length(AnsiString(edt_CardMemo.Text)) >= 90 ) And ( Length(AnsiString(edt_CardMemo.Text)) < 180 ) ) then
    begin
      iBCnt := 1;
    end;

    edt_CardMemo.Height := 21 + (11 * iBCnt);
    shpSimpleMemo.Height := edt_CardMemo.Height + 7;
  end;

  if ( iACnt = 0 ) And ( iAPnlCustCnt = 0 ) And ( iBCnt = 0 ) And ( iBPnlCustCnt = 0 ) then Exit;
  if ( iAPnlCustCnt = iACnt ) And ( iBPnlCustCnt = iBCnt ) then Exit;

  try
    if ( TcxMemo(Sender).Name = 'meoCuCCMemo'  ) Or ( TcxMemo(Sender).Name = 'meoCuWorMemo' ) then
    begin
      grpTop2.Height := 145 + ( 11 * ( iACnt + iBCnt ) );
      iHeight := 11 * ( iACnt - iAPnlCustCnt );
      if iACnt = 0 then iAPnlCustCnt := 0
                   else iAPnlCustCnt := iACnt;
    end else
    if ( TcxMemo(Sender).Name = 'edt_CardMemo' ) Or ( TcxMemo(Sender).Name = 'mmoCbMemo'    ) then
    begin
      grpTop2.Height := 145 + ( 11 * ( iACnt + iBCnt ) );
      iHeight := 11 * ( iBCnt - iBPnlCustCnt );
      if iBCnt = 0 then iBPnlCustCnt := 0
                   else iBPnlCustCnt := iBCnt;
    end;

    gJon01Size[Self.Tag].grpTop2H := grpTop2.Height;
    pSetFormScroll(0, iHeight);
  except

  end;
end;

procedure TFrm_JON01N.pSetCuTelLabel( iG : Integer );
begin
  if iG = 0 then
  begin
    lblCuTel.Visible := True;
		lblCuTel2.Visible := False;
    lblCuTel.Top := shpTop1.Top + 2;
    lblCuTel.Left := cxtCuTel.Left+1;
    lblCuTel.Width := cxtCuTel.Width-2;

    cxtCuTel .Style.BorderColor := $00595959;
    cxtCuTel2.Style.BorderColor := clWindowFrame;
	end else
  if iG = 1 then
	begin
		lblCuTel.Visible := False;
		lblCuTel2.Visible := True;
		lblCuTel2.Top := shpTop1.Top + 2;
		lblCuTel2.Left := cxtCuTel2.Left+1;
		lblCuTel2.Width := cxtCuTel2.Width-2;

    cxtCuTel .Style.BorderColor := clWindowFrame;
    cxtCuTel2.Style.BorderColor := $00595959;
  end else
  if iG = 2 then
  begin
		lblCuTel.Visible := True;
		lblCuTel.Top := shpTop1.Top + 2;
		lblCuTel.Left := cxtCuTel.Left+1;
		lblCuTel.Width := cxtCuTel.Width-2;

		lblCuTel2.Visible := True;
		lblCuTel2.Top := shpTop1.Top + 2;
		lblCuTel2.Left := cxtCuTel2.Left+1;
		lblCuTel2.Width := cxtCuTel2.Width-2;

		cxtCuTel .Style.BorderColor := $00595959;
		cxtCuTel2.Style.BorderColor := $00595959;
	end else
	if iG = 3 then
	begin
		lblCuTel.Visible := False;
		lblCuTel2.Visible := False;

	    cxtCuTel .Style.BorderColor := clWindowFrame;
    	cxtCuTel2.Style.BorderColor := clWindowFrame;
  end;
end;

procedure TFrm_JON01N.pCompareCustInfo;
begin
  if ( GB_MODIFY_ST ) then Exit;  // 수정자료 불러올경우 제외 처리

 	SetDebugeWrite('JON01N.pCompareCustInfo');
	cxBtnSpSave.Enabled := False;

	if (lcsCu_seq = '') then Exit;

  if Trim(edtCuName.Text) <> Trim(FChkCCI.Name) then
  begin
    cxBtnSpSave.Enabled := True;
		Exit;
  end;
	if CbCuGb.ItemIndex <> FChkCCI.CbCuGb then
  begin
    cxBtnSpSave.Enabled := True;
    Exit;
  end;
  if cboCuLevel.ItemIndex <> FChkCCI.CbLevel then
  begin
    cxBtnSpSave.Enabled := True;
    Exit;
  end;
  if Trim(cxtCuBubin.Hint) <> Trim(FChkCCI.BuCode) then
  begin
    cxBtnSpSave.Enabled := True;
    Exit;
  end;
  if Trim(meoCuCCMemo.Text) <> Trim(FChkCCI.meoCuCCMemo) then
  begin
    cxBtnSpSave.Enabled := True;
    Exit;
  end;
  if Trim(meoCuWorMemo.Text) <> Trim(FChkCCI.meoCuWorMemo) then
  begin
    cxBtnSpSave.Enabled := True;
    Exit;
  end;
  if Trim(edt_CardMemo.Text) <> Trim(FChkCCI.edt_CardMemo) then
  begin
    cxBtnSpSave.Enabled := True;
    Exit;
  end;
end;

// 지사리스트에서 지사코드, 본사코드로 첫번째 대표번호 index를 찾는다.
function TFrm_JON01N.Proc_HeNoBrNoListIdxFind(sHdNo, sBrNo: string): Boolean;
var
  i: integer;
  str: string;
begin
  SetDebugeWrite('JON01N.Proc_HeNoBrNoListIdxFind');
  try
    Result := False;
    cboBranch.Tag := 10;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    for i := 0 to cboBranch.Properties.Items.Count - 1 do
    begin
      str := cboBranch.Properties.Items[i] + slCboBranch[i];
      if (Pos(sHdNo, str) > 0) and (Pos(sBrNo, str) > 0) then
      begin //지사코드
        cboBranch.ItemIndex := i;
        Result := True;
        Break;
      end;
    end;
    cboBranch.Tag := 0;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 지사리스트에서 대표번호, 지사코드로 index를 찾는다.
function TFrm_JON01N.Proc_BrNoListIdxFind(sBrNo, sKeyNumber: string): Boolean;

  function LastCharPos(const S: string; const Chr: char): integer;
  var
    i: Integer;
  begin
    result := 0;
    for i := length(S) downto 1 do
      if S[i] = Chr then
      begin
        result := i;
        break;
      end;
  end;

var
  i, sLen, eLen : integer;
  Str, lsKeyNum : string;
begin
  SetDebugeWrite('JON01N.Proc_BrNoListIdxFind');
  try
    Result := False;
    sKeyNumber := Trim(sKeyNumber);
    cboBranch.Tag := 10;

    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
    for i := 0 to cboBranch.Properties.Items.Count - 1 do
    begin
      Str := cboBranch.Properties.Items[i] + slCboBranch[i];

      { TODO : 지사명에 '[', ']' 사용하는 지사들이 있어서 뒤에서부터 '[', ']' 찾아야 한다. }
      sLen := LastCharPos(Str, '[');
      eLen := LastCharPos(Str, ']');
      lsKeyNum := Copy(Str, sLen + 1, (eLen - sLen-1));

      if (Pos(sBrNo, Str) > 0) and (Trim(sKeyNumber) = lsKeyNum) then
      begin //지사코드
        Result := True;
        Break;
      end;
    end;

  	if Result then
  		cboBranch.ItemIndex := I;

		// LBS 사용여부 체크 수정창 제외
		if (Pos('수정', Self.Caption) = 0) and (Pos('앱접수', Self.Caption) = 0) then
			btn_LBS.Enabled := True else btn_Lbs.Enabled := False;

		cboBranch.Tag := 0;
    // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01N.func_LBS_YN: Boolean;
var sTmp : string;
	iTmp : integer;
begin
	SetDebugeWrite('JON01N.func_LBS_YN');
	try
		Result := False;
		if ((GT_OCX = 'SSIT') or (GT_OCX = 'SI415')) and          //IPCC or si415
//			 (Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber) <> '') and (GS_JONCidInput.CidCall) then // CID 직접콜링 and 팝업전송이 아닐때
			 (Trim(Frm_Main.JON01MNG[Self.Tag].CidInputPhoneNumber) <> '') then // CID 직접콜링 and 팝업전송이 아닐때
		begin
			sTmp := Proc_BRNOSearch;
			if sTmp <> '' then
			begin
				iTmp := scb_BranchCode.IndexOf(sTmp);
				if scb_LBS[iTmp] = 'y' then Result := True else Result := False;
			end;
		end;
	except
		Result := False;
	end;
end;

function TFrm_JON01N.proc_TakCall_CtrlYN: string;
var sTmp : string;
begin
	SetDebugeWrite('JON01N.proc_TakCall_CtrlYN');
	try
		sTmp := '';
		// 탁송연합콜 여부
//		if GS_PRJ_AREA = 'S' then
		begin
			sTmp := Proc_BRNOSearch;
			// 탁송연합콜 사용 [접수창체크옵션,지사,본사,연합] 조회  yyny 5번째는 탁송연합 기사 가입가능여부
			sTmp := GetTakAllyYN(sTmp);
			lblTakAlly.Visible := False;
			lblTakAlly.Enabled := True;
			if copy(sTmp,1,4) = 'yyyy' then
			begin
				lblTakAlly.Visible := True;
				lblTakAlly.Tag := 1;
				pSetLabelClick(lblTakAlly);

				lbl_00.Visible := False;
				lblTakAllyClick(lblTakAlly);

				lblTakAlly.Top := lbl_00.Top;
			end else
			if copy(sTmp,1,4) = 'fyyy' then
			begin
				lblTakAlly.Visible := True;
				lblTakAlly.Tag := 1;
        pSetLabelClick(lblTakAlly);

				lblTakAlly.Enabled := False;
				lbl_00.Visible := False;
				lblTakAllyClick(lblTakAlly);

				lblTakAlly.Top := lbl_00.Top;
			end else
			if copy(sTmp,1,4) = 'nyyy' then    // 미설정. 모드
			begin
				lblTakAlly.Visible := True;
				lblTakAlly.Tag := 0;
				pSetLabelClick(lblTakAlly);

				lbl_00.Visible := False;
				lblTakAlly.Top := lbl_00.Top;
			end else
			if copy(sTmp,1,4) = 'xyyy' then
			begin
				lblTakAlly.Visible := False;
				lblTakAlly.Tag := 0;
        pSetLabelClick(lblTakAlly);

				lblTakAlly.Enabled := False;
				lbl_00.Visible := True;
			end else
			begin
				lblTakAlly.Visible := False;
				lblTakAlly.Tag := 0;
        pSetLabelClick(lblTakAlly);

				lblTakAlly.Enabled := False;
				lbl_00.Visible := True;
			end;
		end;
		Result := sTmp;
	except
		Result := '';
	end;
end;

function TFrm_JON01N.proc_AIOB_CtrlYN: string;
var sTmp : string;
begin
	SetDebugeWrite('JON01N.proc_AIOB_CtrlYN');
	try
		sTmp := '';

		sTmp := Proc_MainKeyNumberSearch;
		if not GetAIOBKeyNumberYN(sTmp) then   //고객이 선택되어 있어도 지사의 대표번호에서 사용안하면 체크해제
		begin
			chk_AIReCall.Properties.ReadOnly := True;
			chk_AIReCall.checked := False;
		end else chk_AIReCall.Properties.ReadOnly := False;

		Result := sTmp;
	except
		Result := '';
	end;
end;

function TFrm_JON01N.proc_PlusCall_YN_Cont: string;
var sTmp : string;
begin
  SetDebugeWrite('JON01N.proc_PlusCall_YN_Cont');
  try
    // 플러스콜 여부(수도권만 사용함)
    if GS_PRJ_AREA = 'S' then
    begin
      sTmp := Proc_BRNOSearch;
      // 플러스콜 사용 [접수창체크옵션,지사,본사,연합] 조회
  		sTmp := GetPlusCallYN(sTmp);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01N.func_MilePayMileSave_YN: Boolean;
var sTmp : string;
	iTmp : integer;
begin
	SetDebugeWrite('JON01N.func_MilePayMileSave_YN');
	try
		Result := False;
		sTmp := Proc_BRNOSearch;
		if sTmp <> '' then
		begin
			iTmp := scb_BranchCode.IndexOf(sTmp);
			if scb_MilePayMileSave[iTmp] = 'y' then Result := True else Result := False;
		end;
	except
		Result := False;
	end;
end;

function TFrm_JON01N.func_CashPayMileSave_YN: Boolean;
var sTmp : string;
	iTmp : integer;
begin
	SetDebugeWrite('JON01N.func_CashPayMileSave_YN');
	try
		Result := False;
		sTmp := Proc_BRNOSearch;
		if sTmp <> '' then
		begin
			iTmp := scb_BranchCode.IndexOf(sTmp);
			if scb_CashPayMileSave[iTmp] = 'y' then Result := True
                                         else Result := False;
		end;
	except
		Result := False;
	end;
end;

function TFrm_JON01N.IsMultiCallFixPrice: Boolean;
begin
  Result := False;
  if gsMyRateRemarkMaintain = 'FALSE' then Exit;
  if Assigned(Frm_JON015) and Frm_JON015.HandleAllocated and (Frm_JON015.OrderHandle = Self.Handle) then Result := True;
end;

procedure TFrm_JON01N.SetStartAreaMap(const ASido, AGugun, ADong, ADetail, AX, AY: string);
begin
  SetDebugeWrite('JON01N.SetStartAreaMap');
  try
  	if BtnStLock.Hint = 'F4)수정' then
    begin
      // 20120805 좌표 오류 체크 LYB
      gJONStaChkXY.Area1 := ASido;
      gJONStaChkXY.Area2 := AGugun;
      gJONStaChkXY.Area3 := ADong;
      gJONStaChkXY.Area4 := ADetail;
      gJONStaChkXY.Area5 := ASido + ' ' + AGugun + ' ' + ADong;
      gJONStaChkXY.X := AX;
      gJONStaChkXY.Y := AY;
      gJONStaChkXY.GUIDE_X := '';
      gJONStaChkXY.GUIDE_Y := '';

      cxtStartXval.Text := AX;
      cxtStartYval.Text := AY;
      gsStartGUIDEXval := '';
      gsStartGUIDEYval := '';

      BtnStLock.Hint := 'F4)잠금';
      BtnStLock.Tag  := 0;
			BtnStLock.Down := True;
      BtnStLock.ImageIndex := 1;
      lblStLock.Style.TextColor := clRed;
      lblStLock.Style.Font.Style := [fsBold,fsUnderline];

      frm_JON30.N1.Enabled := False;
      frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
      Frm_JON30.btnSPoiMove.Enabled := False;
      frm_JON30.N6.Enabled := False;
      frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
      Frm_JON30.btnSPoiAMove.Enabled := False;

			if meoStartArea.CanFocus then meoStartArea.SetFocus;
      meoStartArea.SelStart := Length(meoStartArea.Text);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.SetStartAreaMapNew(const ASido, AGugun, ADong, ADetail, AX, AY: string);
begin
  SetDebugeWrite('JON01N.SetStartAreaMapNew');
  try
    if BtnStLock.Hint = 'F4)수정' then
    begin
      // 20120805 좌표 오류 체크 LYB
      gJONStaChkXY.Area1 := ASido;
      gJONStaChkXY.Area2 := AGugun;
      gJONStaChkXY.Area3 := ADong;
      gJONStaChkXY.Area4 := ADetail;
      gJONStaChkXY.Area5 := ASido + ' ' + AGugun + ' ' + ADong;
      gJONStaChkXY.X := AX;
      gJONStaChkXY.Y := AY;
      gJONStaChkXY.GUIDE_X := '';
      gJONStaChkXY.GUIDE_Y := '';

      lcsSta1 := ASido;
      lcsSta2 := AGugun;
      lcsSta3 := ADong;
      if ASido <> '' then
      begin
        lblStartAreaName.Text := ASido + ' ' + AGugun + ' ' + ADong;
        SetDebugeWrite('JON01N.lblStartAreaName.Text 20418 : ' + lblStartAreaName.Text);
      end;

      cxtStartXval.Text := AX;
      cxtStartYval.Text := AY;
      gsStartGUIDEXval := '';
      gsStartGUIDEYval := '';

      BtnStLock.Hint := 'F4)잠금';
			BtnStLock.Tag  := 0;
      BtnStLock.ImageIndex := 1;
			BtnStLock.Down := True;
      lblStLock.Style.TextColor := clRed;
      lblStLock.Style.Font.Style := [fsBold,fsUnderline];

      frm_JON30.N1.Enabled := False;
      frm_JON30.N1.Caption := '출발지선택(좌표만이동)-잠금상태';
      Frm_JON30.btnSPoiMove.Enabled := False;
      frm_JON30.N6.Enabled := False;
      frm_JON30.N6.Caption := '출발지선택(주소+좌표이동)-잠금상태';
			Frm_JON30.btnSPoiAMove.Enabled := False;

			if meoStartArea.CanFocus then meoStartArea.SetFocus;
      meoStartArea.SelStart := Length(meoStartArea.Text);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.Shape17MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  grpUseLimitV.Visible := False;
end;

procedure TFrm_JON01N.shpMileMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  if shpMile.Brush.Color = $00FF8000 then shpMile.ShowHint := True
                                     else shpMile.ShowHint := False;
end;

procedure TFrm_JON01N.shpOCCMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  if shpOCC.Brush.Color = $0080FFFF then shpOCC.ShowHint := True
                                    else shpOCC.ShowHint := False;
end;

procedure TFrm_JON01N.SpeedButton2Click(Sender: TObject);
begin
  grpBubinState.Visible := False;
end;

procedure TFrm_JON01N.tmFormCloseTimer(Sender: TObject);
begin
  tmFormClose.Enabled := False;
  SetDebugeWrite('JON01N.tmFormCloseTimer');
  if tmFormClose.Tag = 99 then
  begin // 화면 닫기 or LOCK 해제 한다.
    if loc_TmClose = 'CLOSE' then
    begin
      btnCmdExit.Description := 'T';
      btnCmdExitClick(Self);
    end else
    if loc_TmClose = 'UNLOCK' then
    begin
      Proc_AcceptLock('2'); // 해당오더의 Lock을 해제 한다.
    end;
  end;
end;

procedure TFrm_JON01N.tmHoTranRltTimer(Sender: TObject);
begin
  tmHoTranRlt.Enabled := False;
	SetDebugeWrite('JON01N.tmHoTranRltTimer');

  if tmHoTranRlt.Interval = 50 then
  begin
    btnCmdExit.Description := 'T';
    btnCmdExitClick(Self)
      // 호전환이 성공적으로 수행 되었으므로, 접수화면 자동종료 한다.
  end else
  begin
    frm_Main.proc_bubinlist_insert; // 법인정보 자동 갱신한다.
		SearchCuTel(Caption = '수정');
  end;
end;

procedure TFrm_JON01N.tmLockMentTimer(Sender: TObject);
begin
	SetDebugeWrite('JON01N.tmLockMent');
	// 지사별 상담 멘트를 닫는다.
	tmLockMent.Enabled := False;

	pnl_LockMent.Visible := False;
  grpAiMent.Visible := False;
end;

procedure TFrm_JON01N.tmMentTimer(Sender: TObject);
begin
  SetDebugeWrite('JON01N.tmMentTimer');
  // 지사별 상담 멘트를 닫는다.
	tmMent.Enabled := False;
  if tmMent.Interval = 5000 then
  begin
		grpBrNoMent.Visible := False; // 지사 안내멘트 닫음.
    grpNewCustYN.Visible := False; // 신규고객여부의 정보창 닫음.
  end else
  begin
		pnl_charge.Visible := False;
  end;
end;

procedure TFrm_JON01N.tmrChargeTimer(Sender: TObject);
Var oOderWorker, oWeather, iType, oType : String;
    iSmartRate, iRate : Integer;
    bOpen : Boolean;
begin
  SetDebugeWrite('JON01N.tmrChargeTimer');
  try
		tmrCharge.Enabled := False;

    // 쓰레드에서 라벨에 표시해주면 핸들오류가 나서 쓰레드 끝나고 라벨에 표시처리
    if GT_DISTANCE_ST = 1 then
		begin
			curKm.Text := FloatToStr(fCruKm) + 'Km';

      if Not bViaKm then
        Lbl_Distance.Caption := Format('경탐)%s 직선)%s', [curKm.Text, FloatToStr(fChgKm) + 'Km'])
      else
        Lbl_Distance.Caption := Format('경탐)%s-%s 직선)%s', [curKm.Text, FloatToStr(fViaKm) + 'Km', FloatToStr(fChgKm) + 'Km']);

      SetPosLblDistance;
    end;

		if GS_ALL_SEVEN then
    begin
      iRate := func_search_A7charge(meoStartArea.Text, meoEndArea.text);

      if Not gsMyMainRateNoChange then
      begin
        if BtnRaLock.Hint <> 'F4)잠금' then
				begin
					curRate.Value := iRate{ + cxCurRevisionRate.value};
					OrgRate := curRate.Value{ - cxCurRevisionRate.value};
				end else
				begin
					if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
					begin
						if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
						begin
              pSetLockMent(3);
						end;
					end;
        end;
      end;
      SetDebugeWrite('JON01N.tmrChargeTimer 1');
      if curRate.Focused then curRate.SelectAll;
      Exit;
    end;

    // 거리 계산이 끝난후 요금 계산을 한다.
		if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
		begin
      if GS_ALL_SEVEN then
        iRate := func_search_A7charge(meoStartArea.Text, meoEndArea.text)
      else
				iRate := func_search_charge;

      if Not gsMyMainRateNoChange then
      begin
				if BtnRaLock.Hint <> 'F4)잠금' then
				begin
					//카카오요금사용업체 + 자동적용 카카오 요금제 적용
					gsKMAiChargeOK := False;
					if (GT_Kakao_KMAiRate) and (GB_KMAiRateUSE) then
					begin
						proc_KMAiRate;
						//카카오 요금 실패 시 기존 요금제 요금 으로 자동입력
						if not gsKMAiChargeOK then curRate.Value := iRate;
					end
					else
					//카카오요금사용업체 + 자동모드 경우에 기존 요금제 적용
					if (GT_Kakao_KMAiRate) and (not GB_KMAiRateMode) then
					begin
						proc_KMAiRate;
						curRate.Value := iRate;
					end
					else
						curRate.Value := iRate{ + cxCurRevisionRate.value};
						
					OrgRate := curRate.Value{ - cxCurRevisionRate.value};
				end else
				begin
					if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
					begin
						if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
						begin
              pSetLockMent(3);
						end;
					end;
        end;
      end;
      SetDebugeWrite('JON01N.tmrChargeTimer 1');
    end else
    begin
      ///////////////////////////////////////////////////////////////
      // (#2) 스마트요금제 계산
      ///////////////////////////////////////////////////////////////
      if GT_RealTimeWorker then oOderWorker := ''
                           else oOderWorker := '0';

      if GT_RealTimeWeather then oWeather := ''
                            else oWeather := '0';

      iType := '';//검색타입 '동-동' 접수창에서는 무조건 동-동으로 조회

      if GB_DEBUG_USE then Log(oOderWorker + oWeather +
                                       lcsSta1 + lcsSta2 + lcsSta3 + meoStartArea.Text + cxtStartXval.Text + cxtStartYval.Text +
                                       lcsEnd1 + lcsEnd2 + lcsEnd3 + meoEndArea.Text + cxtEndXval.Text + cxtEndYval.Text + iType, LOGDATAPATHFILE);

      iSmartRate := fJON01_SmartCharge(oOderWorker, oWeather,
                                       lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text,
                                       lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, iType, oType);

      if oType = 'DD' then oType := '동->동' else
      if oType = 'DG' then oType := '동->구' else
      if oType = 'GD' then oType := '구->동' else
      if oType = 'GG' then oType := '구->구' else
      if oType = 'GS' then oType := '구->시';

      bOpen := False;
      if ( curRate.Value = 0 ) Or ( curRate.Value <> iSmartRate ) then
      begin
        if GT_AutoSmartCharge then // 0원이거나 요금이 다를경우 스마트요금 접수창요금 자동적용
        begin
          Lbl_Charge.Caption := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
          if BtnRaLock.Hint <> 'F4)잠금' then
            curRate.Value := iSmartRate;
        end;

        if GT_PopUpSmartCharge then // 0원이거나 요금이 다를경우 스마트요금창 자동팝업
        begin
          if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
               (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
               (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
          begin
          end else
          begin
            bOpen := True;
            BtnSmartRate.Click;
            if curRate.CanFocus then curRate.SetFocus;
          end;
        end;
      end;

      if GB_JON_SMARTRATEUSE then
      begin
        Lbl_Charge.Caption := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
        if BtnRaLock.Hint <> 'F4)잠금' then
           curRate.Value := iSmartRate;
      end;

      if ( GT_AllPopUpSmartCharge ) And ( Not bOpen )  then // 스마트요금창 자동팝업
      begin
        if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
             (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
             (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
        begin
        end else
        begin
          BtnSmartRate.Click;
          if curRate.CanFocus then curRate.SetFocus;
        end;
      end;
    end;

    if curRate.Focused then curRate.SelectAll;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.tmrDisAcTimer(Sender: TObject);
Var iRate : Integer;
begin
  SetDebugeWrite('JON01N.tmrDisAcTimer');
  try
    tmrDisAc.Enabled := False;

    if (cxtStartXval.Text = '') or (cxtStartYval.Text = '') or
  		 (cxtEndXval  .Text = '') or (cxtEndYval  .Text = '') then Exit;

    if GT_DISTANCE_ST = 0 then proc_dis_alculation(Self.Tag, True);

    if not IsNotModifyPrice and (GT_CHARGE_CAL = 0) then
  	begin
  		if ((lcsSta1 <> '') and (lcsSta2 <> '') and (lcsEnd1 <> '') and (lcsEnd2 <> '')) then
      begin
        // 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
  			if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
  			begin
          tmrThRealDis.Tag := 0;
          proc_dis_alculation(Self.Tag, True);
          if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                                 else begin
                                        if GS_ALL_SEVEN then
                                          iRate := func_search_A7charge(meoStartArea.Text, meoEndArea.text)
                                        else
                                          iRate := func_search_charge;
                                        if Not gsMyMainRateNoChange then
                                        begin
                                          if BtnRaLock.Hint <> 'F4)잠금' then
                                          begin
																						curRate.Value := iRate{ + cxCurRevisionRate.value};
																						OrgRate := curRate.Value{ - cxCurRevisionRate.value};
																					end;
                                        end;
                                      end;
        end;
      end;
    end;

    // 복수콜일경우 자동 계산 처리 2014.06.18 LYB
    if (Assigned(Frm_JON015) and Frm_JON015.HandleAllocated) and
       (Frm_JON015.Count > 0) and (Frm_JON015.OrderHandle = Self.Handle) then
    begin
      if gsMyRateRemarkMaintain <> 'FALSE' then
      begin
        tmrThRealDis.Tag := 0;
        proc_dis_alculation(Self.Tag, True);
        if GT_DISTANCE_ST = 1  then
           proc_Realdis_Mng
  //        proc_Realdis_alculation;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.tmrDistanceTimer(Sender: TObject);
Var iRate : Integer;
begin
  SetDebugeWrite('JON01N.tmrDistanceTimer');
  try
    tmrDistance.Enabled := False;

    if not IsNotModifyPrice and (GT_CHARGE_CAL = 1) then
    begin
      // 대표번호 별 기본 설정 요금 반영 여부를 결정 한다.[True:반영, False:미반영]
  		if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) And ( Not GS_ALL_SEVEN ) then
      begin
        tmrThRealDis.Tag := 0;
        proc_dis_alculation(Self.Tag, True);
				if GT_DISTANCE_ST = 1  then proc_Realdis_Mng
                               else begin
                                      iRate := func_search_charge;
                                      if Not gsMyMainRateNoChange then
                                      begin
																				if BtnRaLock.Hint <> 'F4)잠금' then
																				begin
																					curRate.Value := iRate{ + cxCurRevisionRate.value};
																					OrgRate := curRate.Value{ - cxCurRevisionRate.value};
																				end else
																				begin
																					if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
																					begin
																						if (BtnRaLock.Hint = 'F4)잠금') and (BtnRaLock.Tag = 0) then
																						begin
                                              pSetLockMent(3);
																						end;
																					end;
																				end;
                                      end;
                                    end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.tmrKeyDownTimer(Sender: TObject);
Var ls_Text : AnsiString;
    iSpace : Integer;
begin
  SetDebugeWrite('JON01N.tmrKeyDownTimer');
  try
    tmrKeyDown.Enabled := False;

    if lcsActiveEdit = 'meoStartArea' then
      ls_Text := meoStartArea.Text ;
    if lcsActiveEdit = 'meoEndArea' then
      ls_Text := meoEndArea.Text   ;
  	if lcsActiveEdit = 'meoViaArea' then
  	begin
  		if GS_VIA_Tag = 1 then
  			ls_Text := meoViaArea1.Text
  		else
  			ls_Text := meoViaArea[GS_VIA_Tag].Text;
  	end;
  	if lcsActiveEdit = 'meoStartAreaCUT' then
      ls_Text := Frm_CUT011.meoStartAreaCUT.Text;
    if lcsActiveEdit = 'meoEndAreaCUT' then
      ls_Text := Frm_CUT011.meoEndAreaCUT.Text;

    if ( pos('인근', ls_Text) > 1 ) And ( Length(ls_Text) >= 4 ) then
    begin
      ls_Text := Copy(ls_Text, 1, pos('인근', ls_Text) - 1);
    end;

    if ( pos('부근', ls_Text) > 1 ) And ( Length(ls_Text) >= 4 ) then
    begin
      ls_Text := Copy(ls_Text, 1, pos('부근', ls_Text) - 1);
    end;

    if ( pos('근처', ls_Text) > 1 ) And ( Length(ls_Text) >= 4 ) then
    begin
      ls_Text := Copy(ls_Text, 1, pos('근처', ls_Text) - 1);
    end;

    if ( Copy(ls_Text,Length(ls_Text),1) = '근' ) And ( Length(ls_Text) >= 4 ) then
    begin
      ls_Text := Copy(ls_Text, 1, Length(ls_Text)-1);
    end;

    ls_Text := Frm_JON30.Proc_AreaSearch_KWBaseComp(ls_Text);

    // '@' 를 '아파트' 로 치환.
    ls_Text := FastReplace(ls_Text, '@', '아파트', False);

    if Pos('번지', ls_Text) > 0  then
    begin
      ls_Text := FastReplace(ls_Text, '번지', '', False);
    end else
    // '4' 를 '사거리' 로 치환.
    if Copy(ls_Text,Length(ls_Text),1) = '4' then
    begin
      if ( Not StrToIntDef(RightStr(Trim(Copy(ls_Text,Length(ls_Text)-1, 1)), 1), -1) In [0,1,2,3,4,5,6,7,8,9] ) And
         ( RightStr(Trim(Copy(ls_Text,Length(ls_Text)-1, 1)), 1) <> '-' ) then
        ls_Text := CopyStr(ls_Text, 1, Length(ls_Text)-1) + '사거리';
    end;

    iSpace := System.AnsiStrings.AnsiPos(' ', ls_Text);

    ls_Text := Frm_JON30.fnc_TruncChar(ls_Text);

    if iSpace > 0 then
    begin
      Insert(' ', ls_Text, iSpace);
      SetDebugeWrite('JON01N iSpace ls_Text : ' + ls_Text + IntToStr(iSpace));
    end;

    ls_Text := lcsActiveEdit + ls_Text;  // 영타를 한글로 교정시 소문자만 인식

    SetDebugeWrite(lcsActiveEdit + '--' + LowerCase(gslsText) + ' --- ' + LowerCase(ls_Text));

    Inc(gilsCnt);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.tmrResponseTimer(Sender: TObject);
Var sError : String;
begin
  SetDebugeWrite('JON01N.tmrResponseTimer');
  tmrResponse.Enabled := False;

  SetDebugeWrite( 'tmrResponseTimer : ' + sRespSParam1 + '/' + sRespSParam2 + '/' + sRespSParam3 + '/' + sRespEParam1 + '/' + sRespEParam2 + '/' + sRespEParam3);

  try
    if Trim(sRespSParam1) <> '' then
    begin
      proc_WiseNut_Response(sRespSParam1, sRespSParam2, sRespSParam3);

      sRespSParam1 := '';
      sRespSParam2 := '';
      sRespSParam3 := '';
    end;

    Sleep(50);

    if Trim(sRespEParam1) <> '' then
    begin
      proc_WiseNut_Response(sRespEParam1, sRespEParam2, sRespEParam3);

      sRespEParam1 := '';
      sRespEParam2 := '';
      sRespEParam3 := '';
    end;

  Except
    on e: Exception do
    begin
      sError := 'JON01N[proc_WiseNut_Response]오더저장:' + e.message;
      Log(sError, LOGDATADIRECTORY + 'Accept_Err.log');
    end;
  end;
end;

procedure TFrm_JON01N.tmrStartPosTimer(Sender: TObject);
begin
  SetDebugeWrite('JON01N.tmrStartPosTimer');
  tmrStartPos.Enabled := False;
  if ( Assigned(Frm_JON31) ) And ( Frm_JON31 <> nil ) And ( Frm_JON31.Showing ) then
     Frm_JON31.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text);
end;

procedure TFrm_JON01N.tmrThRealDisTimer(Sender: TObject);
begin
	SetDebugeWrite('JON01N.tmrThRealDisTimer');
	tmrThRealDis.Enabled := False;
  tmrThRealDis.Interval := 1000;

  Application.ProcessMessages;
  SetDebugeWrite('tmrThRealDisTimer Start ');
  try
    if ( Not RealKmPtr_th1[Self.Tag].CaActive ) And ( Not RealKmPtr_th2[Self.Tag].CaActive ) And
       ( Not RealKmPtr_th3[Self.Tag].CaActive ) And ( Not RealKmPtr_th4[Self.Tag].CaActive ) then
    begin
      SetDebugeWrite('tmrThRealDisTimer0 End ');

      giRealKmCnt := 0;
      giRealKmIdx := 1;
      giKmComplet := True;
      giKmComPletG := 'OK';

      if tmrThRealDis.Tag = 1 then BtnSR.Click;
      Exit;
    end;

    if ( giRealKmIdx > 4 ) And  ( giRealKmCnt > 20 ) then
    begin
      // 4회 검색후에도 자료가 없으면 직선거리 처리
      curKm.Text := FloatToStr(fChgKm) + 'Km';
      fCruKm := fChgKm;
      fTotalTime := 0;   // 직선거리이면 소요시간 0
      Lbl_Distance.Caption := Format(' 직선)%s', [FloatToStr(fCruKm) + 'Km']);
      Application.ProcessMessages;

      giKmComplet := True;
      giViaKmComplet := False;
      giKmComPletG := 'NO';
			tmrCharge.Enabled := True;

      if tmrThRealDis.Tag = 1 then BtnSR.Click;
      proc_RealKmPtr_Init;
			Exit;
    end;

    if ( giRealKmCnt mod 3 ) = 0 then
    begin
      //=============================
      if giRealKmIdx = 1 then ptmrThRealDisTimer(RealKmPtr_th1[Self.Tag]);
			if giRealKmIdx = 2 then ptmrThRealDisTimer(RealKmPtr_th2[Self.Tag]);
      if giRealKmIdx = 3 then ptmrThRealDisTimer(RealKmPtr_th3[Self.Tag]);
      if giRealKmIdx = 4 then ptmrThRealDisTimer(RealKmPtr_th4[Self.Tag]);

      Inc(giRealKmIdx);
    end;
		tmrThRealDis.Enabled := True;
    Inc(giRealKmCnt);
  Except
    begin
      tmrThRealDis.Enabled := False;

      if tmrThRealDis.Tag = 0 then curKm.Text := '';
      giRealKmCnt := 0;
      giRealKmIdx := 1;
      giKmComplet := True;
      giKmComPletG := 'NO';

      Exit;
    end;
  end;
end;

procedure TFrm_JON01N.tmrWKSearchTimer(Sender: TObject);
begin
  SetDebugeWrite('JON01N.tmrWKSearchTimer');
  tmrWKSearch.Enabled := False;

  if tmrXYChange.Tag = 0 then
    Frm_JON30.StartPos(meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text) else
  if tmrXYChange.Tag = 1 then
    Frm_JON30.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
end;

procedure TFrm_JON01N.tmrXYChangeTimer(Sender: TObject);
var
  sErrMsg : String;
begin
  SetDebugeWrite('JON01N.tmrXYChangeTimer');
  try
    tmrXYChange.Enabled := False;

  	// 수정모드 일때 요금 계산을 막음.
    if loc_RateNOT then Exit;

    if not Self.Visible then Exit;

  	if tmrXYChange.Tag = 0 then
  	begin
    	if ( gJONStaChkXY.X <> cxtStartXval.Text ) And (  cxtStartXval.Text <> '' ) then
  		begin
  			if ( gJONStaChkXY.X <> '' ) And ( gJONStaChkXY.Y <> '' ) And ( gJONStaChkXY.Area1 <> '') And ( cxtStartXval.Text <> '' ) then
        begin
  				sErrMsg := '[비-출좌 X] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + '-' + gJONStaChkXY.Gubun;
  				Assert(False, sErrMsg);
        end else
        begin
  				sErrMsg := '[비-출좌 X] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + '-' + gJONStaChkXY.Gubun;
  				Assert(False, sErrMsg);
        end;
      end;

      if ( gJONStaChkXY.Y <> cxtStartYval.Text )  And (  cxtStartYval.Text <> '' ) then
      begin
        if ( gJONStaChkXY.X <> '' ) And ( gJONStaChkXY.Y <> '' ) And ( gJONStaChkXY.Area1 <> '') And ( cxtStartYval.Text <> '' ) then
        begin
          sErrMsg := '[비-출좌 Y] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + '-' + gJONStaChkXY.Gubun;
          Assert(False, sErrMsg);
        end else
        begin
          sErrMsg := '[비-출좌 Y] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + '-' + gJONStaChkXY.Gubun;
  				Assert(False, sErrMsg);
        end;
      end;
    end;

    try
      if Assigned(Frm_JON30) then
      begin
      	if tmrXYChange.Tag = 0 then
        begin
          if (cxtStartXval.Text = '') and (cxtStartYval.Text = '') and (Trim(meoStartArea.Text) = '') then
          begin
            Hide_Panel(lcsActiveEdit,1);
            if ( Assigned(Frm_JON31) ) And ( Frm_JON31 <> nil ) And ( Frm_JON31.Showing ) then
               Frm_JON31.StartPos('', '', '');
          end else
          begin
            if True or (BtnStLock.Hint = 'F4)수정') then
            begin
              if GS_MAP_AREA_AUTOSHOW and (not Frm_JON30.Visible) then
              begin
                if J30ShowS = False then
                begin
                  Frm_JON30.OnSelectedMap := SetStartAreaMap;
                  Hide_Panel(lcsActiveEdit,0);
								end;
              end else
              if GS_MAP_AREA_AUTOSHOW = False then
              begin
                if  J30ShowS = False then
                begin
  								Frm_JON30.OnSelectedMap := SetStartAreaMap;
                  Hide_Panel(lcsActiveEdit,0);
                end;
              end;

              if J30ShowS = False then
              begin
                tmrWKSearch.Enabled := True;
              end;

              if ( Assigned(Frm_JON31) ) And ( Frm_JON31 <> nil ) And ( Frm_JON31.Showing ) then
              begin
                if J30ShowS = False then
                begin
                  try
                    Frm_JON31.OnSelectedMap := SetStartAreaMap;
                  finally
                    tmrStartPos.Enabled := True;
                  end;
                end;
              end;
            end;
          end;
        end else
      	if tmrXYChange.Tag = 1 then
        begin
          if J30ShowE = True then
          begin
            Exit;
          end;
          if (cxtEndXval.Text = '') and (cxtEndYval.Text = '') and (Trim(meoEndArea.Text) = '') then
          begin
            Hide_Panel(lcsActiveEdit,1);
            if ( Assigned(Frm_JON31) ) And ( Frm_JON31 <> nil ) And ( Frm_JON31.Showing ) then
               Frm_JON31.EndPos('', '', '');
          end else
          begin
            if True or (BtnEdLock.Hint = 'F4)수정') then
  					begin
              if GS_MAP_AREA_AUTOSHOW and (not Frm_JON30.Visible) then
              begin
                if J30ShowE = False then
                begin
                  Frm_JON30.OnSelectedMap := SetEndAreaMap;
                  Hide_Panel(lcsActiveEdit,0);
                end;
              end else
              if GS_MAP_AREA_AUTOSHOW = False then
              begin
                if J30ShowE = False then
  							begin
                  Frm_JON30.OnSelectedMap := SetEndAreaMap;
                  Hide_Panel(lcsActiveEdit,0);
                end;
              end;

              if  J30ShowS = False then
              begin
                tmrWKSearch.Enabled := True;
              end;

              if ( Assigned(Frm_JON31) ) And ( Frm_JON31 <> nil ) And ( Frm_JON31.Showing ) then
              begin
                if J30ShowE = False then
                begin
                  Frm_JON31.OnSelectedMap := SetEndAreaMap;
                  Frm_JON31.EndPos(meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text);
                end;
              end;
            end;
          end;
        end;
      end;
      pCompareQRateInfo;
      if Assigned(Frm_Jon019) then Frm_JON019.Close;
  	finally
  		tmrDisAc.Enabled := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.pCompareQRateInfo;
Var lRow : Integer;
    sVia : String;
begin
//  BtnQRate.Enabled := False;
//  BtnQRate.Tag := 0;
//
//  if Trim(GQ_PRate[Self.Tag].sta) <> Trim(meoStartArea.Text) then
//  begin
//    BtnQRate.Tag := 0;
//    BtnQRate.Enabled := True;
//    Exit;
//  end;
//  if Trim(GQ_PRate[Self.Tag].staddr) <> Trim(lcsSta1 +','+ lcsSta2 +','+ lcsSta3) then
//  begin
//    BtnQRate.Tag := 0;
//    BtnQRate.Enabled := True;
//    Exit;
//  end;
//
//  lRow := 0;
//  sVia := '';
//  while lRow <= 4 do
//  begin
//    if GT_PASS_INFO[Self.Tag][lRow].AREA1 = '' then break;
//    if sVia = '' then
//      sVia := En_Coding(GT_PASS_INFO[Self.Tag][lRow].AREA4)
//    else
//      sVia := sVia + '/' + En_Coding(GT_PASS_INFO[Self.Tag][lRow].AREA4);
//    inc(lRow);
//  end;
//
//  if Trim(GQ_PRate[Self.Tag].via) <> Trim(sVia) then
//  begin
//    BtnQRate.Tag := 0;
//    BtnQRate.Enabled := True;
//    Exit;
//  end;
//  if Trim(GQ_PRate[Self.Tag].eda) <>  Trim(meoEndArea.Text) then
//  begin
//    BtnQRate.Tag := 0;
//    BtnQRate.Enabled := True;
//    Exit;
//  end;
//  if Trim(GQ_PRate[Self.Tag].edaddr) <>  Trim(lcsEnd1 +','+ lcsEnd2 +','+ lcsEnd3) then
//  begin
//    BtnQRate.Tag := 0;
//    BtnQRate.Enabled := True;
//    Exit;
//  end;
//  if Trim(GQ_PRate[Self.Tag].rate) <>  Trim(curRate.Value) then
//  begin
//    BtnQRate.Tag := 0;
//    BtnQRate.Enabled := True;
//    Exit;
//  end;
//
//  // 요금문의 답변 리스트가 있을경우 버튼 클릭 가능
//  if ( RQAListView.DataController.RecordCount > 0 ) And
//     ( Not gbRQAList.Visible ) then
//  begin
//    BtnQRate.Tag := 1;
//    BtnQRate.Enabled := True;
//  end;
end;

procedure TFrm_JON01N.pFormActive;
Var iSel : Integer;
begin
  // --------------------------------------------------------------- 접수창 선택 및 과거이용내역 자동 선택 처리
  try
    for iSel := 0 to JON_MAX_CNT - 1 do
    begin
      if iSel = Self.Tag then gbJON01Click[iSel] := True
                         else gbJON01Click[iSel] := False;
    end;

    if (Not gbJON012Click[Self.Tag]) And Assigned(Frm_Main.Frm_JON012[Self.Tag]) And ( Frm_Main.JON012MNG[Self.Tag].CreateYN ) then
    begin
      if Frm_Main.JON012MNG[Self.Tag].Use then
      begin
        for iSel := 0 to JON_MAX_CNT - 1 do
        begin
          if iSel = Self.Tag then gbJON012Click[iSel] := True
                             else gbJON012Click[iSel] := False;
        end;

        Frm_Main.Frm_JON012[Self.Tag].BringToFront;
        Frm_Main.Frm_JON012[Self.Tag].bChkTime := True;
        if GS_JON01_GROUPMOVE then
          Frm_Main.Frm_JON012[Self.Tag].Enabled := True;
      end;

      if Assigned(Frm_JON011) And (Frm_JON011.Showing) then Frm_JON011.BringToFront;
      if Assigned(Frm_JON05) And (Frm_JON05.Showing) then Frm_JON05.BringToFront;

      Self.Show;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.tmUpsoPnlTimer(Sender: TObject);
begin
	SetDebugeWrite('JON01N.tmUpsoPnl');
	// 지사별 상담 멘트를 닫는다.
	tmUpsoPnl.Enabled := False;
	if tmUpsoPnl.Interval = 3000 then
	begin
		pnlCallBellAll.Visible := False; // 업소안내 판넬
	end;
end;

procedure TFrm_JON01N.trmBubinStateTimer(Sender: TObject);
begin
  try
    if lbBubinStateName.Style.Font.Color = clAqua then
    begin
      lbBubinStateName.Style.Font.Color := clRed;
      shpBubinState.Pen.Color := clRed;
    end else
    if lbBubinStateName.Style.Font.Color = clRed then
    begin
      lbBubinStateName.Style.Font.Color := clRed;
      shpBubinState.Pen.Color := clBlack;
    end;

    if trmBubinState.Tag > 5 then
    begin
      grpBubinState.Left := 295;
      grpBubinState.Top := 78;
      grpBubinState.Width := 289;
      grpBubinState.Height := 134;

      lbBubinStateName.Style.Font.Color := clRed;
      shpBubinState.Pen.Color := clRed;

      trmBubinState.Enabled := False;
      trmBubinState.Tag := 0;
    end;
    trmBubinState.Tag := trmBubinState.Tag + 1;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.tmrTitleInvertTimer(Sender: TObject);
begin
  tmrTitleInvert.Enabled := False;
  if ( shpTitle.Pen.Color = GS_BasicColor ) then Exit;

	try
  	if shpTitle.Pen.Color = StringToColor(shpTitle.Hint) then
    begin
      shpTitle.Pen.Color := clBlack;
    end else
    begin
      shpTitle.Pen.Color := StringToColor(shpTitle.Hint);
    end;
    tmrTitleInvert.Tag := tmrTitleInvert.Tag + 1;

    if tmrTitleInvert.Tag > 5 then
    begin
      tmrTitleInvert.Tag := 0;
      tmrTitleInvert.Enabled := False;
    end else
    begin
      tmrTitleInvert.Enabled := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.tmr_CustInvertTimer(Sender: TObject);
begin
  tmr_CustInvert.Enabled := False;
  if ( Pos('일반', lblLevel.Caption) > 0 ) Or ( Pos('기본', lblLevel.Caption) > 0 ) then Exit;

	try
  	if shpTop2.Brush.Color = StringToColor(shpTop2.Hint) then
    begin
      shpTop2.Brush.Color := clBlack;
    end else
    begin
      shpTop2.Brush.Color := StringToColor(shpTop2.Hint);
    end;
    shpTop2.Pen.Color := shpTop2.Brush.Color;
    shpTitle.Brush.Color := shpTop2.Brush.Color;
    shpTop1.Pen.Color := shpTop2.Brush.Color;
    shpTop1.Brush.Color := shpTop2.Brush.Color;
    shpGrpTop1.Brush.Color := shpTop2.Brush.Color;

    shpCustLeft.Brush.Color := shpTop2.Brush.Color;
    shpCustLeft.Pen.Color := shpTop2.Brush.Color;

    tmr_CustInvert.Tag := tmr_CustInvert.Tag + 1;

    if tmr_CustInvert.Tag > 5 then
    begin
      tmr_CustInvert.Tag := 0;
      tmr_CustInvert.Enabled := False;
    end else
    begin
      tmr_CustInvert.Enabled := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.TT3_1Timer(Sender: TObject);
begin
	SetDebugeWrite('Frm_JON01N.TT3_1Timer');
  try
    TT3_1.Enabled := False;

    if ( GS_Grid_DEP = 'C' ) And ( Trim(meoStartArea.Text) <> '' ) then Exit;  // 고객정보에 출도착지 우선 적용

		proc_Wisenut_GetTelPOILast(GS_WiseNutPOIResult, GS_WiseNutPOIWord);
  except
    on e: exception do
    begin
      Log('TT3_1Timer Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'TT3_1Timer Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.SetEndAreaMap(const ASido, AGugun, ADong, ADetail, AX,
  AY: string);
begin
  SetDebugeWrite('JON01N.SetEndAreaMap');
  try
  	if BtnEdLock.Hint = 'F4)수정' then
  	begin
  		gJONEndChkXY.X := AX;
  		gJONEndChkXY.Y := AY;
  		gJONEndChkXY.GUIDE_X := AX;
  		gJONEndChkXY.GUIDE_Y := AY;

      cxtEndXval.Text := AX;
  		cxtEndYval.Text := AY;
      gsEndGUIDEXval := AX;
  		gsEndGUIDEYval := AY;

  		BtnEdLock.Hint := 'F4)잠금';
      BtnEdLock.Tag  := 0;
      BtnEdLock.ImageIndex := 1;
      BtnEdLock.Down := True;
      lblEdLock.Style.TextColor := clRed;
      lblEdLock.Style.Font.Style := [fsBold,fsUnderline];

  		frm_JON30.N2.Enabled := False;
  		frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
      Frm_JON30.btnEPoiMove.Enabled := False;
  		frm_JON30.N7.Enabled := False;
  		frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
      Frm_JON30.btnEPoiAMove.Enabled := False;

			if meoEndArea.CanFocus then meoEndArea.SetFocus;
      meoEndArea.SelStart := Length(meoEndArea.Text);
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.SetEndAreaMapNew(const ASido, AGugun, ADong, ADetail, AX, AY: string);
begin
  SetDebugeWrite('JON01N.SetEndAreaMapNew');
  try
    if BtnEdLock.Hint = 'F4)수정' then
    begin
      lcsEnd1 := ASido;
      lcsEnd2 := AGugun;
      lcsEnd3 := ADong;
      if ASido <> '' then
      begin
        lblEndAreaName.Caption := ASido + ' ' + AGugun + ' ' + ADong;
        cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
        SetDebugeWrite('JON01N.cxReEndArea.Text 20474 : ' + cxReEndArea.Text);
        MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);
      end;

  		gJONEndChkXY.X := AX;
  		gJONEndChkXY.Y := AY;
  		gJONEndChkXY.GUIDE_X := AX;
  		gJONEndChkXY.GUIDE_Y := AY;

      cxtEndXval.Text := AX;
  		cxtEndYval.Text := AY;
      gsEndGUIDEXval := AX;
  		gsEndGUIDEYval := AY;

      BtnEdLock.Hint := 'F4)잠금';
      BtnEdLock.Tag  := 0;
      BtnEdLock.ImageIndex := 1;
      BtnEdLock.Down := True;
      lblEdLock.Style.TextColor := clRed;
      lblEdLock.Style.Font.Style := [fsBold,fsUnderline];
      frm_JON30.N2.Enabled := False;
      frm_JON30.N2.Caption := '도착지선택(좌표만이동)-잠금상태';
      Frm_JON30.btnEPoiMove.Enabled := False;
      frm_JON30.N7.Enabled := False;
      frm_JON30.N7.Caption := '도착지선택(주소+좌표이동)-잠금상태';
      Frm_JON30.btnEPoiAMove.Enabled := False;

			if meoEndArea.CanFocus then meoEndArea.SetFocus;
      meoEndArea.SelStart := Length(meoEndArea.Text);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.AppendPostDesc;
  function _GetPayStr(APay: Integer): string;
  begin
    if APay mod 1000 = 0 then
      Result := IntToStr(APay div 1000) + 'K'
    else
      Result := FormatFloat('#,##0', APay)
    ;
  end;

  procedure _AddPostDesc(AMemo: TcxMemo; APay, APostPay: Integer; APostTime: string);
  var
    OrgStr, AddStr: string;
  begin
    OrgStr := AMemo.Lines.Text;
		// 기사지급수수료0원 후불은 후불시점을 적요에 가져올필요없음
    // 기사지급수수료가 0원이여도 입금방식 적용해줘라  2020.12.07  정회귀팀장
//		if APostPay = 0 then
//		begin
//			AddStr := '후불]자동입금없음';
//			AddSpop('후불',98);
//		end else
		begin
      if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

			AddStr := '';
			if APay > APostPay then
			begin
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
					AddStr := '현금' + _GetPayStr(APay) + ']'
				else
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
					AddStr := '현금' + _GetPayStr(APay) + ']'
				else
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
					AddStr := '현금' + _GetPayStr(APay) + ']'
				else
					AddStr := '현금' + _GetPayStr(APay - APostPay) + ']';
			end;

      if APostPay = 0 then
  			AddStr := AddStr + '후불]'
      else
	  		AddStr := AddStr + '후불' + _GetPayStr(APostPay) + ']';

			AddStr := AddStr + APostTime;
			if (cbbPostTime.ItemIndex = 0) or (cbbPostTime.ItemIndex = 1) or (cbbPostTime.ItemIndex = 3)then
			begin
				AddSpop('후불',98);
			end else
      if (cbbPostTime.ItemIndex = 2) then
			begin
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
					AddSpop('♥]',99)
				else
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
					AddSpop('♥♥]',99)
				else
				if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
					AddSpop('♥♥♥]',99)
				else
					AddSpop('즉후',99);
			end;
		end;
    AMemo.Lines.Text := '{' + AddStr + '}' + OrgStr;
  end;
begin
  try
    RemovePostDesc;

    if IsPayMethodPost then
    begin
      // 후불카드일 경우 적요표시안함 옵션일 경우 적요 표시 안함
      if ( cbbPayMethod.Text = PAY_METHOD_CARD_KCP ) And ( gsJON01CardBigoUse ) then Exit;
      // 후불일 경우 적요표시안함 옵션일 경우 적요 표시 안함
      if ( cbbPayMethod.Text = PAY_METHOD_POST_NML ) And ( gsJON01PostBigoUse ) then Exit;
      if PAY_METHOD_BUSAN_YN then
        _AddPostDesc(meoBigo, curRate.Value, StrToIntDef(StringReplace(cxLblWkJAmt.Caption, ',', '', [rfReplaceAll]), 0), cbbPostTime.Text)
      else
        _AddPostDesc(meoBigo, curRate.Value, edtPostPay.Value, cbbPostTime.Text);
    end;

		if cbbPayMethod.Text = PAY_METHOD_CARD then meoBigo.Lines.Text := '{카드현장결제}' + meoBigo.Lines.Text;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.btnAddBigoClick(Sender: TObject);
begin
  pFormActive;
  pmBigo.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
end;

procedure TFrm_JON01N.btnAddBigoMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  if GB_JON01_MENU_OVER then
    pmBigo.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
end;

procedure TFrm_JON01N.RemovePostDesc;
var
  OrgStr, AddStr: string;
  PosS, PosE: Integer;
begin
//-  SetDebugeWrite('JON01N.RemovePostDesc');
  OrgStr := meoBigo.Lines.Text;

  PosS := Pos('{', OrgStr);
  PosE := Pos('}', OrgStr);

  if (PosS = 0) or (PosE = 0) or (PosE < PosS) then
  begin
    Exit;
  end;

  AddStr := Copy(OrgStr, 1, PosS-1);
  AddStr := AddStr + Copy(OrgStr, PosE+1, Length(OrgStr));

  meoBigo.Lines.Text := AddStr;
end;

// 접수 전에 조회 조건 관련 전역변수 초기화..
procedure TFrm_JON01N.SetPrivateVariable;
begin
  SetDebugeWrite('JON01N.SetPrivateVariable');
	locsCuTel := '';
  locsCuTel2 := '';
	lcsCu_seq := ''; // 현재 선택된 고객seq
	pCompareCustInfo;
  locHDNO := '';
  locBRNO := '';
	locKNum := ''; // 조회 고객 본사, 지사코드, 대표번호 임시저장.
	if Pos('콜링', Self.Caption) = 0 then
		locDNIS := '';
  locWkSabun := '';
  locSndTime := '';
  locWkBrNo := ''; // 조회기사 사번, 기사지사코드 저장.
end;

procedure TFrm_JON01N.Proc_CIDEventAutoSearch(sCID, sKeyNumber, sDNIS, sSndTime, sBrNo, sAutoCall : string);
begin
	SetDebugeWrite('JON01N.Proc_CIDEventAutoSearch');
  try
		SetPrivateVariable; // 접수 전에 조회 조건 관련 전역변수 초기화..
    if locCustHP_MainNum_Search = '' then
    begin // JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
      cxLblCIDUseFlg.Hint := 'CID'; // CID 조회인지 설정을 한다.
    end;
    locHDNO := '';
		locBRNO := sBrNo; // 조회 고객 본사, 지사코드, 대표번호 임시저장.
		locKNum := sKeyNumber; // CID에서 들어온 대표번호 설정.
		locDNIS := sDNIS;
		locSndTime := sSndTime;

    sCID := StringReplace(sCID, '-', '', [rfReplaceAll]);
    cxtCallTelNum.Text := sCID; // CID 설정.
		cxtCuTel.Text := sCID;
		cxtCuTel.Hint := sCID;  //콜링 시 들어온 전화번호를 저장하여 추후 고객번호 keypress 시 변경된 사항이 있다면 DNIS 초기화

		SetDebugeWrite_CID('Proc_CIDEventAutoSearch : No['+IntToStr(Self.Tag)+'] ' + sCid + ',' + sKeyNumber + ',' + sDNIS + ',' + sBrNo);

		if not GS_CIDINFO_OUR_KEYNUMBER then
		begin
			cboBranch.ItemIndex := -1;
			//콜마트 파일콜링의 경우 메세지를 제일 마지막에 표기
			if not gbCallMartFileJON01 then
			begin
				GMessagebox('존재하지 않는 대표번호(' + sKeyNumber + ') 입니다. 확인후 검색 하세요!' + #13#10 +
					'[콜센터에 이관된 지사 또는 본인 소속 지사만 검색 가능]', CDMSE);
			end;
			GS_CIDINFO_OUR_KEYNUMBER := True;
			try
				// CID 조회 일때는 발신전화없음 멘트 감춤..
				if (locCustHP_MainNum_Search = '') and (cxLblCIDUseFlg.Hint <> 'CID') then
				begin
					cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
					cxtCallTelNum.Text := cxtCuTel.Text; // 발신전화번호
					locsCuTel := cxtCuTel.Text;
				end else
				begin
					locsCuTel := cxtCallTelNum.Text;
				end;

				cxBtnSpSave.Enabled := True;
				miCuUpdate.Enabled := True;
				miCuNew.Enabled := True;
				btnMile.Enabled := True;

				// 지사변경 제한.[이유:고객조회 후 지사변경시 조회한 고객정보 일부유실 경고메시지 띄우기 위함임]
//				cboBranch.Properties.ReadOnly := True;

				if lcsCu_seq <> '' then
				begin
					// 존재 : $0070FEF3, 미존재 : $00FAEDE2
				end	else
				begin
					// 존재 : $0070FEF3, 미존재 : $00FAEDE2
					if ((cxLblCIDUseFlg.Hint = 'CID') Or ( GB_CallLine )) and (locWkSabun = '') then
					begin // CID 조회인지 설정을 한다.
						tmMent.Enabled := True;
            grpNewCustYN.BringToFront;
						grpNewCustYN.Visible := True; // 신규고객여부의 정보를 보여준다.
					end;
				end;

        if Assigned(Frm_Main.Frm_Jon012[Self.Tag]) then
        begin
  				Frm_Main.Frm_Jon012[Self.Tag].cxlbSlip.Caption    := cxtJoinNum.Text; // 오더접수번호
  				Frm_Main.Frm_Jon012[Self.Tag].cxlbCustTel.Caption := locsCuTel; // 고객전화번호 읽기.
  				Frm_Main.Frm_Jon012[Self.Tag].cxlbKeyNum.Caption  := Proc_MainKeyNumberSearch; // 대표번호 읽기.
        end;

				grpBtm.Enabled := True;   // 접수창 잠긴걸 해제함. 2011-11-08.

				if Self.Visible = True then
        begin
     			if meoStartArea.CanFocus then	meoStartArea.SetFocus;
        end;
			except
				on e: exception do
				begin
					Assert(False, E.Message);
				end;
			end;
			//콜마트 파일콜링의 경우
			if gbCallMartFileJON01 then
			begin
				Try
          Application.ProcessMessages;
					proc_CallMartJon01(gCALLMART);
					GMessagebox('존재하지 않는 대표번호(' + sKeyNumber + ') 입니다. 확인후 검색 하세요!' + #13#10 +
						'[콜센터에 이관된 지사 또는 본인 소속 지사만 검색 가능]', CDMSE);
				Except
					gbCallMartFileJON01 := False;
				End;
			end;
			Exit;
		end;

    // CID정보로 고객정보를 조회한다.
    Proc_KeyNumberSearch(sKeyNumber, True);
	except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

function TFrm_JON01N.func_StartAreaFunc(AStartArea: string):string;
var
	sTmp, sTmp2: string;
begin
	SetDebugeWrite('JON01N.func_StartAreaFunc');
	Try
		result := '';
		///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
		///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
		sTmp := AStartArea;
		sTmp2 := '탁송)';
		if pos(sTmp2, sTmp) > 0 then
		begin
			if lblTakAlly.Visible then
			begin
				if lblTakAlly.Tag = 0 then begin lblTakAlly.Tag := 1; lblTakAllyClick(lblTakAlly); pSetLabelClick(lblTakAlly); end;
			end else
			if lbl_00.Visible then
			begin
				if lbl_00.Tag = 0 then begin lbl_00.Tag := 1; plbl_00Click(lbl_00); pSetLabelClick(lbl_00); end;
			end;
		end else
		begin
			if lblTakAlly.Visible then
			begin
				if lblTakAlly.Tag = 1 then begin lblTakAlly.Tag := 0; lblTakAllyClick(lblTakAlly); pSetLabelClick(lblTakAlly); end;
			end else
			if lbl_00.Visible then
			begin
				if lbl_00.Tag = 1 then begin lbl_00.Tag := 0; plbl_00Click(lbl_00); pSetLabelClick(lbl_00); end;
			end;
		end;

		sTmp2 := '정장)';
		if pos(sTmp2, sTmp) > 0 then
		begin
			if lbl_01.Tag = 0 then begin lbl_01.Tag := 1; plbl_00Click(lbl_01); pSetLabelClick(lbl_01); end;
		end else
		begin
			if lbl_01.Tag = 1 then begin lbl_01.Tag := 0; plbl_00Click(lbl_01); pSetLabelClick(lbl_01); end;
		end;
		sTmp2 := '경유)';
		if pos(sTmp2, sTmp) > 0 then
		begin
			if lbl_02.Tag = 0 then begin lbl_02.Tag := 1; plbl_00Click(lbl_02); pSetLabelClick(lbl_02); end;
		end else
		begin
			if lbl_02.Tag = 1 then begin lbl_02.Tag := 0; plbl_00Click(lbl_02); pSetLabelClick(lbl_02); end;
		end;
		sTmp2 := '적요)';
		if pos(sTmp2, sTmp) > 0 then
		begin
			if lbl_03.Tag = 0 then begin lbl_03.Tag := 1; plbl_00Click(lbl_03); pSetLabelClick(lbl_03); end;
		end else
		begin
			if lbl_03.Tag = 1 then begin lbl_03.Tag := 0; plbl_00Click(lbl_03); pSetLabelClick(lbl_03); end;
		end;
		sTmp2 := '스틱)';
		if pos(sTmp2, sTmp) > 0 then
		begin
			if lbl_04.Tag = 0 then begin lbl_04.Tag := 1; plbl_00Click(lbl_04); pSetLabelClick(lbl_04); end;
		end else
		begin
			if lbl_04.Tag = 1 then begin lbl_04.Tag := 0; plbl_00Click(lbl_04); pSetLabelClick(lbl_04); end;
		end;
		sTmp2 := '탁확)';
		if pos(sTmp2, sTmp) > 0 then
		begin
			if lbl_06.Tag = 0 then begin lbl_06.Tag := 1; plbl_00Click(lbl_06); pSetLabelClick(lbl_06); end;
		end else
		begin
			if lbl_06.Tag = 1 then begin lbl_06.Tag := 0; plbl_00Click(lbl_06); pSetLabelClick(lbl_06); end;
		end;
		sTmp2 := '뷕보드x)';
		if pos(sTmp2, sTmp) > 0 then
		begin
			if lblQuickX.Tag = 0 then begin lblQuickX.Tag := 1; plbl_00Click(lblQuickX); pSetLabelClick(lblQuickX); end;
		end else
		begin
			if lblQuickX.Tag = 1 then begin lblQuickX.Tag := 0; plbl_00Click(lblQuickX); pSetLabelClick(lblQuickX); end;
		end;
		sTmp2 := '비흡연)';
		if pos(sTmp2, sTmp) > 0 then
		begin
			if lblNoSmoking.Tag = 0 then begin lblNoSmoking.Tag := 1; plbl_00Click(lblNoSmoking); pSetLabelClick(lblNoSmoking); end;
		end else
		begin
			if lblNoSmoking.Tag = 1 then begin lblNoSmoking.Tag := 0; plbl_00Click(lblNoSmoking); pSetLabelClick(lblNoSmoking); end;
		end;
{		sTmp2 := '콜무)';
		if pos(sTmp2, sTmp) > 0 then
		begin
			if not BtnOptionCallMu.Down then begin BtnOptionCallMu.Down := True; BtnOptionCallMuClick(BtnOptionCallMu); end;
		end else
		begin
			if BtnOptionCallMu.Down then begin BtnOptionCallMu.Down := False end;
		end; }

//		결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
		sTmp := StringReplace(sTmp,'♥♥♥]','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'♥♥]','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'♥]','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'후불)','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'즉후)','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'법후)','',[rfReplaceAll]);
		sTmp := StringReplace(sTmp,'콜무)','',[rfReplaceAll]);
		result := sTmp;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_JON01N.LocNewSocketSend(lsSendText: string; bOrderInsGB: boolean =
  False);
var
  slRcvList: TStringList;
  // 전문 결과 처리 위해 사용 변수. 2009.01.09
  rv_str, ls_rxxml: string;
  ErrCode: integer;
begin
	SetDebugeWrite('JON01N.LocNewSocketSend');
	try
    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, bOrderInsGB);

      if dm.SendSockAccept(lsSendText, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
					proc_recieve(ls_rxxml);
//          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, bOrderInsGB);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.lst_BRListDblClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.lst_BRListDblClick');
	//이미 선택돤 인덱스이기 때문에 갱신이 안되는 오류개선하기 위해서 사용 2018.09.11 KHS
	cboBranch.Tag := 20;
	cboBranch.ItemIndex := -1;
	cboBranch.Tag := 0;

	cboBranch.ItemIndex := StrToIntDef(searchBRlist[lst_BRList.ItemIndex], 0);
	LoadCustLevel;
	LoadPayMethod;
	lst_BRList.Visible := False;
  cxtCuTel.SetFocus;
end;

procedure TFrm_JON01N.lst_BRListExit(Sender: TObject);
begin
  SetDebugeWrite('JON01N.lst_BRListExit');
	lst_BRList.Visible := False;
end;

procedure TFrm_JON01N.lst_BRListKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  SetDebugeWrite('JON01N.lst_BRListKeyDown');
	if key = vk_Return then
	begin
		cboBranch.ItemIndex := StrToIntDef(searchBRlist[lst_BRList.ItemIndex], 0);
		lst_BRList.Visible := False;
    cxtCuTel.SetFocus;
	end else
  if Key = VK_UP then
  begin
    if lst_BRlist.Selected[0] then cxTSearchMainTel.SetFocus;
  end;
end;

procedure TFrm_JON01N.Proc_JobAfterProc(bFormLock: boolean; bOrderInsGB: boolean =
  False);
begin
	try
    if bFormLock then
    begin
      SetDebugeWrite('JON01N.Proc_JobAfterProc True');

      //------> 화면에 Lock을 건다. <--------
      grpBtm.Enabled := False;
      // 요청한 업무처리가 왼료 될때까지 접수화면의 모든 기능을 일시 정지 시킨다.
      Frm_Main.Frm_Jon012[Self.Tag].Enabled := False;
      //-------------------------------------
    end else
    begin
			SetDebugeWrite('JON01N.Proc_JobAfterProc False');
			//------> 화면의 Lock을 풀어준다. <--------
			grpBtm.Enabled := True;
			// 요청한 업무처리가 왼료 될때까지 접수화면의 모든 기능을 일시 정지 시킨다.
			Frm_Main.Frm_Jon012[Self.Tag].Enabled := True;
			//-------------------------------------

			Screen.Cursor := crDefault;

			Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
			GB_JON03SELECT_GB := True;

			// 서버요청후 지연 디버그 정보를 저장한다.
      if GS_DEBUG_MSG_J01 <> '' then
      begin
        GS_DEBUG_MSG_J01 := StringReplace(GS_DEBUG_MSG_J01, '!!$초과시간$!!', shaPrcMsg.Hint, [rfReplaceAll]);
        Assert(False, GS_DEBUG_MSG_J01);
      end;
		end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 고객 이용내역을 그리드에 보여준다.
procedure TFrm_JON01N.Proc_CustOrderListView;
var
	I, iStatus, iSlip, iSlipDt, iSLatX, iSLatY, iELatX, iELatY, iJGubun, iRow : integer;
  TodayDate, sError: string;

  slCom : TStringList;
  elCom : TStringList;
	iCnt, sCnt, eCnt, idx, iMax, ssRow, eeRow, iETC2, iETC : Integer;
  sArea1, sArea2, sArea3, sArea4, sArea5, sArea6, sArea7, sArea8  : string;
  isArea1, isArea4, isArea5, isArea6, isArea7, isArea8  : Integer;
  eArea1, eArea2, eArea3, eArea4, eArea5, eArea6, eArea7, eArea8  : string;
  ieArea1, ieArea4, ieArea5, ieArea6, ieArea7, ieArea8  : Integer;
	sSlip, eSlip, etmpSlip, sETC2, sETC, sTmp, sStatus, sInDate : String;

	StartXY, EndXY, sNowDTM : string;
	dNowDate, dOrderDate : TDateTime;

  bCustAppOK : Boolean;    // 3분이내문의건이 여러건 있을경우 첫번째 자료 적용위해
	bCustAILBSOK : Boolean;    // 3분이내문의건이 여러건 있을경우 첫번째 자료 적용위해    AI-LBS
begin
	SetDebugeWrite('JON01N.Proc_CustOrderListView');
  try
		TodayDate := StartDateTime('yyyy-mm-dd hh:nn:ss'); // 오늘 영업일자 얻기..
		iCnt := 0;
    sCnt := 0;
		eCnt := 0;

    slCom := TStringList.Create;
    slCom.Sorted := True;
		elCom := TStringList.Create;
    elCom.Sorted := True;

   	sNowDTM := frm_Main.func_sysdate;

		try
      try
				iStatus := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('상태').Index;
				iSlip   := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('접수번호').Index;
				iSlipDt := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('접수일시').Index;

        iSLatX  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('출좌표X').Index;
        iSLatY  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('출좌표Y').Index;

        isArea1 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('출발지').Index;
      	isArea4 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('출1').Index;
      	isArea5 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('출2').Index;
      	isArea6 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('출3').Index;
      	isArea7 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('출4').Index;
      	isArea8 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('출5').Index;

        iELatX  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('도좌표X').Index;
        iELatY  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('도좌표Y').Index;

        iEArea1 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('도착지').Index;
      	iEArea4 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('도1').Index;
      	iEArea5 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('도2').Index;
      	iEArea6 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('도3').Index;
      	iEArea7 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('도4').Index;
      	iEArea8 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('도5').Index;

      	iJGubun := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('접수구분').Index;
				iETC2   := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('적요2').Index;
				iETC    := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.GetColumnByFieldName('적요').Index;
      Except
        on e: exception do
        begin
					Log('Set_OrderLiast Error 1 : ' + E.Message, LOGDATAPATHFILE);
        end;
      end;

      try
				bCustAppOK := False;
				bCustAILBSOK := False;
				bAppOrder := False;
        bAppOrderOpen := False;
        giBtnIndex := -1;

				for I := 0 to Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.DataController.RecordCount - 1 do
        begin
      	  if (Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatX] <> '') and
             (Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatY] <> '') then
          begin
            try
              if sRet <> 1 then
              begin
                if Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip] <> '' then Inc(sCnt);
                StartXY := '';
                iCnt := slCom.Count;
                StartXY := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatX] +
                           Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatY];
                idx := slCom.Add(StartXY);

                if slCom.Count <= CHECK_MAX_LIST then   // 동일좌표 체크 최대개수 넘으면 Pass
                begin
                  if iCnt = slCom.Count then
                  begin
                    sSSlip[idx]  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                    iSCount[idx] := iSCount[idx] + 1;
                    iSRow[idx]   := i;
                  end else
                  begin
                    if slCom.Count = 0 then
                    begin
                      sSSlip[slCom.Count]  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                      iSCount[slCom.Count] := 1;
                      iSRow[slCom.Count]   := i;
                    end else
                    begin
                      sSSlip[slCom.Count-1]  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                      iSCount[slCom.Count-1] := 1;
                      iSRow[slCom.Count-1]   := i;
                    end;
                  end;
                end;
        	  	end;
            Except
              on e: exception do
              begin
                Log('Set_OrderLiast Error 2 : ' + E.Message, LOGDATAPATHFILE);
              end;
            end;

            try
              etmpSlip := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip];
              if eRet <> 1 then
              begin
                if (Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iELatX] <> '') and
                   (Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iELatY] <> '') then
                begin
                  EndXY := '';
                  if Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip] <> '' then Inc(eCnt);
                  iCnt := elCom.Count;
                  EndXY := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iELatX] +
                           Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iELatY];
                  idx := elCom.Add(Endxy);

                  if elCom.Count <= CHECK_MAX_LIST then  // 동일좌표 체크 최대개수 넘으면 pass
                  begin
                    if iCnt = elCom.Count then
                    begin
                      sESlip[idx]  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                      iECount[idx] := iECount[idx] + 1;
                      iERow[idx]   := i;
                    end else
                    begin
                      if elCom.Count = 0 then
                      begin
                        sESlip[elCom.Count]  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                        iECount[elCom.Count] := 1;
                        iERow[elCom.Count]   := i;
                      end else
                      begin
                        sESlip[elCom.Count-1]  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                        iECount[elCom.Count-1] := 1;
                        iERow[elCom.Count-1]   := i;
                      end;
                    end;
                  end;
                end;
              end;
            Except
              on e: exception do
              begin
                Log('Set_OrderLiast Error 3 : ' + etmpSlip + ', ' + E.Message, LOGDATAPATHFILE);
//-                Assert(False, 'Set_OrderLiast Error 3 : ' + etmpSlip + ', ' + E.Message);
              end;
            end;
          end;

					dOrderDate := StrToDateTime(Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlipDt]);
					dNowDate := StrToDateTime(copy(sNowDTM,1,4) + '-' + copy(sNowDTM,5,2) + '-' + copy(sNowDTM,7,2) + ' '
																	+ copy(sNowDTM,9,2) + ':' + copy(sNowDTM,11,2) + ':' + copy(sNowDTM,13,2) );
					 // 접수구분이 고객용 어플일 경우 3분이내에 전화가 올경우 출발지 자동 선택
      	  if ( Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iJGubun] <> '' ) And
             ( Not pbISStartEndXY ) then
      	  begin
            if Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlipDt] = Null then Break;
						sStatus  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iStatus];

						// 'A' : 고객앱, 'U' : 유한소프트, 'T' : AI배차지연콜
						if ( Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iJGubun] = 'T' ) then
						begin
							sETC2  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iETC2];
							sETC  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iETC];
							if (Pos('[Ai콜센터^]', sETC2) > 0) and (sStatus = '4') then
              begin
                if ( MinutesBetween(dNowDate,dOrderDate) < 3 ) And ( Not bCustAILBSOK ) then
                begin
									lblAiMent.Caption := ' LBS기반 휴대폰 위치추적으로 출발지 위치가 입력 되었습니다.';
                  grpAiMent.Top := grpStartArea.Top - grpAiMent.Height;
                  grpAiMent.Left := 7;
                  grpAiMent.BringToFront;
                  grpAiMent.Visible := True;

                  tmLockMent.Interval := 6000;
                  tmLockMent.Enabled := True;

                  sArea1 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea1];
                  sArea2 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatX ];
                  sArea3 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatY ];
                  sArea4 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea4];
                  sArea5 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea5];
                  sArea6 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea6];
                  sArea7 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea7];
                  sArea8 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea8];

                  sETC2  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iETC2];
                  meoBigo2.Text := Enc_Control(sETC2);

                  // 20120805 좌표 오류 체크 LYB
                  gJONStaChkXY.Area1 := sArea4;
                  gJONStaChkXY.Area2 := sArea5;
                  gJONStaChkXY.Area3 := sArea6;
                  gJONStaChkXY.Area4 := sArea7;
                  gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  gJONStaChkXY.X := sArea2;
                  gJONStaChkXY.Y := sArea3;
                  gJONStaChkXY.Gubun := 'E';

                  cxtStartXval.Text := sArea2;
                  cxtStartYval.Text := sArea3;
                  lcsSta1 := sArea4;
                  lcsSta2 := sArea5;
                  lcsSta3 := sArea6;
                  lcsSta4 := sArea7;
                  lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  cxtStartAreaDetail.Text := lcsSta4;
                  lcsConfAREA4            := lcsSta4;
    //							meoStartArea.Text := sArea1;
                  sTmp := func_StartAreaFunc(sArea1);
                  meoStartArea.Text := sTmp;
                  MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                  MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

									bCustAILBSOK := True;
                  GS_Grid_DEP := 'E'; //AI LBS
                end;
              end else
							if (Pos('[AiOB^]', sETC2) > 0) and (sStatus = '4') then
              begin
                if ( MinutesBetween(dNowDate,dOrderDate) < 1 ) And ( Not bCustAILBSOK ) then
								begin
									lblAiMent.Caption := sETC;
                  grpAiMent.Top := grpStartArea.Top - grpAiMent.Height;
                  grpAiMent.Left := 7;
                  grpAiMent.BringToFront;
                  grpAiMent.Visible := True;

                  tmLockMent.Interval := 6000;
                  tmLockMent.Enabled := True;

                  sArea1 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea1];
                  sArea2 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatX ];
                  sArea3 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatY ];
                  sArea4 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea4];
                  sArea5 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea5];
                  sArea6 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea6];
                  sArea7 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea7];
                  sArea8 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea8];

                  sETC2  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iETC2];
									meoBigo2.Text := Enc_Control(sETC2);

                  // 20120805 좌표 오류 체크 LYB
                  gJONStaChkXY.Area1 := sArea4;
                  gJONStaChkXY.Area2 := sArea5;
                  gJONStaChkXY.Area3 := sArea6;
                  gJONStaChkXY.Area4 := sArea7;
                  gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  gJONStaChkXY.X := sArea2;
                  gJONStaChkXY.Y := sArea3;
                  gJONStaChkXY.Gubun := 'E';

                  cxtStartXval.Text := sArea2;
                  cxtStartYval.Text := sArea3;
                  lcsSta1 := sArea4;
                  lcsSta2 := sArea5;
                  lcsSta3 := sArea6;
                  lcsSta4 := sArea7;
                  lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  cxtStartAreaDetail.Text := lcsSta4;
                  lcsConfAREA4            := lcsSta4;
    //							meoStartArea.Text := sArea1;
                  sTmp := func_StartAreaFunc(sArea1);
                  meoStartArea.Text := sTmp;
                  MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                  MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                  bCustAILBSOK := True;
                  GS_Grid_DEP := 'E'; //AI LBS

                  try
                    if Pos('-', sETC2) > 0 then
                    begin
                      sTmp := Copy(sETC2, Pos('-', sETC2)+1, 8);
                      if Trim(sTmp) <> '' then
                      begin
                        if ( Not Assigned(Frm_JON08) ) Or ( Frm_JON08 = Nil ) then Frm_JON08 := TFrm_JON08.Create(Nil);
                        Frm_JON08.Jon03Tag := Jon03Tag;
                        Frm_Main.proc_AiRecHis(sTmp, Jon03Tag);
                      end;
                    end;
                  except
                  end;
                end;
              end;
            end else
						if ( MinutesBetween(dNowDate,dOrderDate) < 3 ) And ( Not bCustAppOK ) then
      	  	begin
      	  		sArea1 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea1];
      	  		sArea2 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatX ];
      	  		sArea3 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSLatY ];
      	  		sArea4 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea4];
      	  		sArea5 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea5];
      	  		sArea6 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea6];
      	  		sArea7 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea7];
      	  		sArea8 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[isArea8];

							sETC2  := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iETC2];
							meoBigo2.Text := Enc_Control(sETC2);

							// 20120805 좌표 오류 체크 LYB
              gJONStaChkXY.Area1 := sArea4;
              gJONStaChkXY.Area2 := sArea5;
              gJONStaChkXY.Area3 := sArea6;
              gJONStaChkXY.Area4 := sArea7;
              gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
              gJONStaChkXY.X := sArea2;
              gJONStaChkXY.Y := sArea3;
              gJONStaChkXY.Gubun := 'A';

      	  		cxtStartXval.Text := sArea2;
      	  		cxtStartYval.Text := sArea3;
      	  		lcsSta1 := sArea4;
      	  		lcsSta2 := sArea5;
      	  		lcsSta3 := sArea6;
      	  		lcsSta4 := sArea7;
              lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
							SetDebugeWrite('JON01N.lblStartAreaName.Text 23184 : ' + lblStartAreaName.Text);
							cxtStartAreaDetail.Text := lcsSta4;
							lcsConfAREA4            := lcsSta4;
							sTmp := func_StartAreaFunc(sArea1);
							meoStartArea.Text := sTmp;
//              meoStartArea.Text := sArea1;
							MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
              MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

							bCustAppOK := True;
							GS_Grid_DEP := 'A'; //고객용 어플 일때
              if (sStatus = '5') or ((sStatus = '4') and GB_JON01_APPORDER) then //어플접수 대기, (문의+앱접수창 팝업선택시)
							begin
                sSlip := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlip];
                sInDate := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.ViewData.Records[i].Values[iSlipDt];

								bAppOrder := True;
								gAppSlip := sSlip;
								gAppInDate := sInDate;
								Exit;
							end;
						end;
      	  end;
				end;
      Except
        on e: exception do
				begin
					Log('Set_OrderLiast Error : ' + IntToStr(i) + ' ' + E.Message, LOGDATAPATHFILE);
//          Assert(False, 'Set_OrderLiast Error : ' +  IntToStr(i) + ' ' + E.Message);
        end;
      end;

			if ( not GS_AREA_AUTO_SET ) And  ( Not pbISStartEndXY )  And (not bOther) then      //과거이용내역기준 자동설정 사용안함 2013.05.23 KHS
			begin                                                                                      //타업체에 등록된 오더가 있을경우
        try
          if GS_Grid_DEP = 'A' then
          else
          if sRet <> 1 then
          begin
            for i := 0 to Length(iScount) - 1 do
            begin
              if i = 0 then
              begin
                iMax := iScount[i];
                ssRow := iSRow[i];
                sSlip := sSSlip[i];
              end else
              if  iMax < iScount[i] then
              begin
                iMax := iScount[i];
                ssRow := iSRow[i];
                sSlip := sSSlip[i];
              end;
            end;

            // 출발지 건수가 최소 4건이상 /  최대건수대비 출발지 건수 50% 이상
            if sCnt > 0 then
            begin
              if (iMax > 4) and (iMax / sCnt * 100 >= 50) then
              begin
                iRow := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.FindRecordIndexByText(0, iSlip, sSlip, False, True, True);

      	  	  	sArea1 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, isArea1];
      	  	  	sArea2 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, iSLatX ];
      	  	  	sArea3 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, iSLatY ];
      	  	  	sArea4 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, isArea4];
      	  	  	sArea5 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, isArea5];
      	  	  	sArea6 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, isArea6];
      	  	  	sArea7 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, isArea7];
      	  	  	sArea8 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, isArea8];

								if (sArea4 <> '') and (sArea5 <> '') and (sArea6 <> '') and (sArea7 <> '') and (sArea8 <> '') and
									 (sArea2 <> '') and (sArea3 <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
								begin
                  // 20120805 좌표 오류 체크 LYB
                  gJONStaChkXY.Area1 := sArea4;
                  gJONStaChkXY.Area2 := sArea5;
                  gJONStaChkXY.Area3 := sArea6;
                  gJONStaChkXY.Area4 := sArea7;
                  gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  gJONStaChkXY.X := sArea2;
                  gJONStaChkXY.Y := sArea3;
                  gJONStaChkXY.Gubun := 'H';

                  cxtStartXval.Text := sArea2;
                  cxtStartYval.Text := sArea3;
                  gsStartGUIDEXval := sArea2;
                  gsStartGUIDEYval := sArea3;

                  lcsSta1 := sArea4;
                  lcsSta2 := sArea5;
                  lcsSta3 := sArea6;
                  lcsSta4 := sArea7;
                  lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                  SetDebugeWrite('JON01N.lblStartAreaName.Text 23261 : ' + lblStartAreaName.Text);
                  if lcsSta4 <> '☆' then
                    cxtStartAreaDetail.Text := lcsSta4
                  else
                    cxtStartAreaDetail.Text := '';
                  lcsConfAREA4            := lcsSta4;
                  sTmp := func_StartAreaFunc(sArea1);
                  meoStartArea.Text := sTmp;
  //								meoStartArea.Text := sArea1;
                  MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                  MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                  lcsStaCellSel := '';
                  lcsStaDocId := '';
                  GS_Grid_DEP := 'H'; //과거이용내역일때
								end;
              end;
            end;
          end;

          if eRet <> 1 then
          begin
            for i := 0 to Length(iEcount) - 1 do
            begin
              if i = 0 then
              begin
                iMax := iEcount[i];
                eeRow := iERow[i];
                eSlip := sESlip[i];
              end else
              if  iMax < iEcount[i] then
              begin
                iMax := iEcount[i];
                eeRow := iERow[i];
                eSlip := sESlip[i];
              end;
            end;

            if eCnt > 0 then
            begin
              if (iMax > 4) and (iMax / eCnt * 100 >= 50) then
              begin
                iRow := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.FindRecordIndexByText(0, iSlip, eSlip, False, True, True);

      	  	  	eArea1 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, ieArea1];
      	  	  	eArea2 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, iELatX ];
      	  	  	eArea3 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, iELatY ];
      	  	  	eArea4 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, ieArea4];
      	  	  	eArea5 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, ieArea5];
      	  	  	eArea6 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, ieArea6];
      	  	  	eArea7 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, ieArea7];
      	  	  	eArea8 := Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Values[iRow, ieArea8];

								if (eArea4 <> '') and (eArea5 <> '') and (eArea6 <> '') {and (eArea7 <> '')} and (eArea8 <> '') and
									 (eArea2 <> '') and (eArea3 <> '') then  //도착지 모든 데이터(Area4제외)가 있어야 자동 셋팅 2017.06.25 KHS
								begin
                  cxtEndXval.Text := eArea2;
                  cxtEndYval.Text := eArea3;
                  gsEndGUIDEXval := eArea2;
                  gsEndGUIDEYval := eArea3;

                  lcsEnd1 := eArea4;
                  lcsEnd2 := eArea5;
                  lcsEnd3 := eArea6;
                  lcsEnd4 := eArea7;
                  lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;
                  cxtEndAreaDetail.Caption := lcsEnd4;
                  meoEndArea.Text := eArea1;
                  cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                  SetDebugeWrite('JON01N.cxReEndArea.Text 23324 : ' + cxReEndArea.Text);
                  MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                  lcsEndCellSel := '';
                  lcsEndDocId := '';

                  GS_Grid_DES := 'H'; //과거이용내역일때
								end;
              end;
            end;
          end;
        except
          on e: exception do
          begin
            sError := '당일오더 건 Error '  + E.Message;
            Assert(False, sError);
          end;
        end;
      end;
    finally
      for i := 0 to Length(iScount) - 1 do
      begin
        sSSlip[i]  := '';
        iSCount[i] := 0;
        iSRow[i]   := 0;
        sESlip[i]  := '';
        iECount[i] := 0;
        iERow[i]   := 0;
      end;

      slCom.Free;
      elCom.Free;
    end;
  Except
  end;
end;

procedure TFrm_JON01N.Proc_Cust_History(sCuSeq: string);
var
	ls_TxLoad : string;
begin
	SetDebugeWrite('JON01N.Proc_Cust_History');
  try

		Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.SetRecordCount(0);
		Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Clear;
		Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Active := False;
		Frm_Main.Frm_Jon012[Self.Tag].cxlbSlip.Caption := cxtJoinNum.Text;
		Frm_Main.Frm_Jon012[Self.Tag].cxlbCustTel.Caption := cxtCuTel.Text;
		Frm_Main.Frm_Jon012[Self.Tag].cxlbKeyNum.Caption := Proc_MainKeyNumberSearch;
		Frm_Main.Frm_Jon012[Self.Tag].cxBtnOldSelect.Tag := 0; //고객변경 후 과거이용내역 버튼 눌렀는지 값 초기화   2016.08.11 KHS

		if lcsCu_seq = '' then exit;

		// 전문 정보를 작성한다.
		ls_TxLoad := GTx_UnitXmlLoad('C037N4.XML');
		ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'CUOD0010', [rfReplaceAll]); // 고객이용내역을 조회 한다.
		ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', En_Coding('0'), [rfReplaceAll]); // 오더접수번호
		ls_TxLoad := StringReplace(ls_TxLoad, 'CustSeqString', sCuSeq, [rfReplaceAll]);   //고객이용내용 조회용 고객 seq
		ls_TxLoad := StringReplace(ls_TxLoad, 'TodayYnString', 'y', [rfReplaceAll]);   //고객이용내용 조회용 고객 seq
    Application.ProcessMessages;

		Screen.Cursor := crHourGlass;

		LocNewSocketSend(ls_TxLoad); // 전문을 요청한다.
	except on e: exception do
    begin
      Log('Proc_CustOldSelect Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_CustOldSelect Error :' + E.Message);
    end;
  end;
end;

// 버튼 활성/비활성 처리.
procedure TFrm_JON01N.Proc_BtnEnabled(bTF: boolean = True);
begin
  SetDebugeWrite('JON01N.Proc_BtnEnabled');
  try
    if (Pos('조회', Self.Caption) > 0) then
    begin
      btnCmdJoin.Enabled := False; // 접수버튼
      btnCmdWait.Enabled := False; // 대기버튼
      btnCmdQuestion.Enabled := False; // 문의버튼
      btnCmdJoinCopy.Enabled := False; // 접수후복사
      btnCmdWaitCopy.Enabled := False; // 대기후복사
      btnCmdUpdSave.Enabled := bTF; // 수정
      btnCmdQuestionCopy.Enabled := False; // 문의후복사
    end else
    begin
      btnCmdJoin.Enabled := bTF; // 접수버튼
      btnCmdWait.Enabled := bTF; // 대기버튼
      btnCmdQuestion.Enabled := bTF; // 문의버튼
      btnCmdJoinCopy.Enabled := bTF; // 접수후복사
      btnCmdWaitCopy.Enabled := bTF; // 대기후복사
      btnCmdUpdSave.Enabled := bTF; // 수정
      btnCmdQuestionCopy.Enabled := bTF; // 문의후복사
    end;

    if cbbPayMethod.Text = PAY_METHOD_CARD_KCP then
    begin
      if btnCmdUpdSave.Visible then
      begin
        btnCmdJoin.Enabled := False;
        btnCmdWait.Enabled := False;
        btnCmdJoinCopy.Enabled := False;
        btnCmdWaitCopy.Enabled := False;
        btnCmdQuestionCopy.Enabled := False;
      end else
      begin
        btnCmdJoin.Enabled := bTF;
        btnCmdWait.Enabled := bTF;
        btnCmdJoinCopy.Enabled := bTF;
        btnCmdWaitCopy.Enabled := bTF;
        btnCmdQuestionCopy.Enabled := bTF;
      end;
    end;
  Except
    on e: exception do
    begin
      Log('Proc_BtnEnabled Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_BtnEnabled Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.SetPayMethod(const Value: string);
begin
  SetDebugeWrite('JON01N.SetPayMethod');
  try
		if (Value = '0') or (Value = PAY_METHOD_MONEY)     then _SetItem(cbbPayMethod, PAY_METHOD_MONEY) else
    if (Value = '2') or (Value = PAY_METHOD_POST_NML)  then _SetItem(cbbPayMethod, PAY_METHOD_POST_NML) else
    if (Value = '8') or (Value = PAY_METHOD_POST_MILE) then _SetItem(cbbPayMethod, PAY_METHOD_POST_MILE) else
    if (Value = '9') or (Value = PAY_METHOD_MULTI)     then _SetItem(cbbPayMethod, PAY_METHOD_MULTI) else
    if (Value = '4') or (Value = PAY_METHOD_TRUST)     then _SetItem(cbbPayMethod, PAY_METHOD_TRUST) else
    if (Value = '5') or (Value = PAY_METHOD_CARD)      then _SetItem(cbbPayMethod, PAY_METHOD_CARD) else
    if (Value = '7') or (Value = PAY_METHOD_CARD_KCP)  then _SetItem(cbbPayMethod, PAY_METHOD_CARD_KCP) else
    if (Value = '2') or (Value = PAY_METHOD_BUSAN)     then _SetItem(cbbPayMethod, PAY_METHOD_BUSAN) else
    if (Value = '2') or (Value = PAY_METHOD_BUSAN2K)   then _SetItem(cbbPayMethod, PAY_METHOD_BUSAN2K) else
    if (Value = '2') or (Value = PAY_METHOD_BUSAN3K)   then _SetItem(cbbPayMethod, PAY_METHOD_BUSAN3K);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N._SetItem(Combo : TcxComboBox; AValue: string);
var
  I: Integer;
begin
	try
    Combo.ItemIndex := -1;

    for I := 0 to Combo.Properties.Items.Count - 1 do
    begin
      if Combo.Properties.Items[I] = AValue then
      begin
        Combo.ItemIndex := I;
        Break;
      end;
    end;
  except
    Combo.ItemIndex := -1;
  end;
end;

function TFrm_JON01N.GetPayMethod: string;
var
  Str: string;
begin
  SetDebugeWrite('JON01N.GetPayMethod');
  try
    Str := cbbPayMethod.Text;

    if (Str = PAY_METHOD_MONEY)     then Result := '0' else
    if (Str = PAY_METHOD_POST_NML)  then Result := '2' else
    if (Str = PAY_METHOD_POST_MILE) then Result := '8' else
    if (Str = PAY_METHOD_MULTI)     then Result := '9' else
    if (Str = PAY_METHOD_TRUST)     then Result := '4' else
    if (Str = PAY_METHOD_CARD)      then Result := '5' else
    if (Str = PAY_METHOD_CARD_KCP)  then Result := '7' else
    if (Str = PAY_METHOD_BUSAN)     then Result := '2' else
    if (Str = PAY_METHOD_BUSAN2K)   then Result := '2' else
    if (Str = PAY_METHOD_BUSAN3K)   then Result := '2'
                                    else Result := '0';
  except
    Result := '0';
  end;
end;

// 플러스콜 표준요금을 비교한다.
function TFrm_JON01N.proc_PlusCall_RateYN: Boolean;
var iHighRate : Integer;
    sTmp : string;
begin
  SetDebugeWrite('JON01N.proc_PlusCall_RateYN');
  Result := True;

  // 플러스콜 표준요금 참조 안하도록 수정함.(이유:플러스콜을 법인콜로 변경하고 플러스콜을 사용 안함) 2011-09-06.
  Exit;

  Result := False;

  {================= 플러스콜 접수위해 고가요금 조회 비교 함.  ================}
  // 플러스콜 여부(수도권만 사용함)
  if GS_PRJ_AREA = 'S' then begin
    // 복수콜 폼 로딩 여부.
    if not GB_FRMJON015_LOADING_YN then begin

    // 25천원 제한조건 제외 2011.01.10
      // 요금이 25,000원 이상일 경우 무조건 콜플러스 반영(2010.11.25)
    //  if curRate.value<25000 then
    //  begin
        iHighRate := func_search_charge_high;
        if (iHighRate > 100) and (lblPlusYN.Tag = 1) then
        begin
          if curRate.Value < iHighRate then begin
            sTmp := IntToStr(iHighRate);
            sTmp := Copy(sTmp, 1, Length(sTmp) -3) + ',' + RightStr(sTmp, 3);

            lblPlusYN.Tag := 0;
            pSetLabelClick(lblPlusYN);
          end;
        end else
        begin
          // 접수창의 "플러스콜" 상태 체크 해제 한다.
          lblPlusYN.Tag := 0;
          pSetLabelClick(lblPlusYN);

          // 플러스콜 자동 해제에 대한 메시지 처리여부.
					sTmp := proc_PlusCall_YN_Cont;
					if ((copy(sTmp,1,4) <> 'yyyy') and (copy(sTmp,1,4) <> 'fyyy')) then
          begin
						if lblPlusYN.Tag = 1 then
            begin
							GMessagebox('요금이 0 원 이므로 플러스콜로 등록 할 수 없습니다.' + #13#10 + #13#10
                        + '플러스콜은 자동 해제되어 일반콜로 접수 됩니다.', CDMSE);
            end;
          end;
        end;
    //  end;
    end else begin
      // 접수창의 "플러스콜" 상태 체크 해제 한다.
      lblPlusYN.Tag := 0;
      pSetLabelClick(lblPlusYN);
    end;
  end;
  {============================================================================}
  Result := True;
end;

function TFrm_JON01N.func_ecukrCheck: Boolean;
var i : Integer;
begin
	result := False;
	try
		for i := 0 to ComponentCount - 1 do
		begin
			if Components[i] is TcxTextEdit then
			begin
				if not func_EucKr_Check((Components[i] as TcxTextEdit), 0) then
        begin
          Result := True;
          Break;
        end;
			end else
			if Components[i] is TcxMemo then
			begin
				if not func_EucKr_Check((Components[i] as TcxMemo), 0) then
        begin
          Result := True;
          Break;
        end;
			end;
		end;
	except
	end;
end;

// 고객전화번호 마킹처리.. (지호 2008-08-19)
function TFrm_JON01N.Func_Cust_Tel(sCall, sBrch, sCallCenter, sAccCenter: string; ATodayOrder: Boolean): string;
var
  iRow, iLevel: Integer;
begin
  SetDebugeWrite('JON01N.Func_Cust_Tel');
  try
    iLevel := StrToIntDef(GT_USERIF.LV, 10);
    iRow := scb_BranchCode.IndexOf(sBrch);

    Result := '***-****-****';

    if iRow < 0 then
      Exit;

    if TCK_USER_PER.JON_CustTelOpen = '1' then
    begin // 고객번호 자사콜 오픈
      case iLevel of
        10:
          begin
            if ( GT_USERIF.BR = sCallCenter ) Or ( GT_USERIF.BR = sAccCenter ) then
              Result := StrToCall(sCall);
          end;
        40:
          begin
            if GT_USERIF.BR = sBrch then
              Result := StrToCall(sCall);
          end;
        60:
          begin
            Result := StrToCall(sCall)
          end;
      end;
    end else
    if TCK_USER_PER.JON_CustTelDayOpen = '1' then  // 고객번호 자사콜 당일만 오픈
    begin
      case iLevel of
        10:
          begin
            if ( GT_USERIF.BR = sCallCenter ) Or ( GT_USERIF.BR = sAccCenter ) then
              Result := IfThen(ATodayOrder, StrToCall(sCall), '***-****-****');
          end;
        40:
          begin
            if GT_USERIF.BR = sBrch then
              Result := IfThen(ATodayOrder, StrToCall(sCall), '***-****-****');
          end;
        60:
          begin
            Result := IfThen(ATodayOrder, StrToCall(sCall), '***-****-****');
          end;
      end;
    end;

    if (not ATodayOrder) and (TCK_USER_PER.JON_CustMaking2 = '1') then
      Result := Copy(Result, 1, Length(Result) - 2) + '**';
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01N.Func_Cust_Tel(sCall, sBrch, sCallCenter, sAccCenter, sDatetime: string): string;
var
  StartDate: string;
begin
  sDatetime := StringReplace(sDatetime, ' ', '', [rfReplaceAll]);
  StartDate := StartDateTime('yyyy-mm-dd hh:nn:ss');
  StartDate := StringReplace(StartDate, ' ', '', [rfReplaceAll]);

  Result:= Func_Cust_Tel(sCall, sBrch, sCallCenter, sAccCenter, sDatetime >= StartDate);
end;

procedure TFrm_JON01N.N3Click(Sender: TObject);
begin
  SetDebugeWrite('JON01N.N3Click');
  try
    if ( not Assigned(Frm_JON016) ) Or ( Frm_JON016 = Nil ) then
      Frm_JON016 := TFrm_JON016.Create(Nil);

    if ( TPopupMenu(Sender).Name = 'N3' ) Or
       ( TPopupMenu(Sender).Name = 'N4' ) then
    begin
      Frm_JON016.Tag := 1;
      Frm_JON016.pnlTitle.Caption := '   [접수창] 출발지/도착지 상용구 설정';
      Frm_JON016.pnlTitle.Color := $008FEBFE;
    end else
    begin
      Frm_JON016.Tag := 2;
      Frm_JON016.pnlTitle.Caption := '   [접수창] 적요 상용구 설정';
      Frm_JON016.pnlTitle.Color := $00CEEADF;
    end;

    Frm_JON016.Show;
    Frm_JON016.LoadData;
    Frm_JON016.BringToFront;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.N5Click(Sender: TObject);
var
  EnvFile: TIniFile;
  iLeft : Integer;
begin
  SetDebugeWrite('JON01N.N5Click');
  EnvFile := TIniFile.Create(ENVPATHFILE);
  try
    if GB_JON_FIXMODE then
    begin
      EnvFile.WriteInteger('WinPos', 'Jon01Left', Self.Left);
      EnvFile.WriteInteger('WinPos', 'Jon01Top' , Self.Top );
      EnvFile.WriteInteger('WinPos', 'Jon01Monitor', Monitor.MonitorNum );
    end else
    begin
      try
        if Screen.MonitorCount = 1 then iLeft := Self.Left else
        begin
          if Monitor.MonitorNum = 0 then
            iLeft := Self.Left
          else
          begin
            // 모니터2를 왼쪽으로 사용하는  사용자로 인해 마이너스값 처리
            if Self.Left <= 0 then
            begin
              iLeft := ( Screen.Monitors[1].Width + Self.Left );
            end else
              iLeft := Self.Left
          end;
        end;
      except
        iLeft := Self.Left
      end;

      EnvFile.WriteInteger('WinPos', 'Jon01Left', iLeft);
      EnvFile.WriteInteger('WinPos', 'Jon01Top' , Self.Top );
    end;

    Frm_Main.iJonLeft := Self.Left;
    Frm_Main.iJonTop  := Self.Top;

    GMessagebox('설정 완료', CDMSI);
  finally
    EnvFile.Free;
  end;
end;

procedure TFrm_JON01N.N6Click(Sender: TObject);
begin
  try
    if ( not Assigned(Frm_JON013) ) Or ( Frm_JON013 = Nil ) then Frm_JON013 := TFrm_JON013.Create(nil);
    Frm_JON013.Show;
    Frm_JON013.BringToFront;
  except

  end;
end;

function TFrm_JON01N.NotNullCheck(b24HourCheck: boolean = False): Boolean;
var
  UserMile: Integer;
  sErrLine : String;
begin
  SetDebugeWrite('JON01N.NotNullCheck');
  try
    Result := False;
    // DNIS 대표번호 찾기 정보창을 감춘다.  2011.05.17
    shrDNIS_DSP.Visible := False;
    locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    if Length(locHdNo) < 3 then
    begin
      GMessagebox('지사정보를 선택하지 않았습니다. 지사를 선택 한 후에 오더접수를 하세요!', CDMSE);
      Exit;
    end;

    try
      if (cxtCuTel.Text = '') and ((cxtCallTelNum.Text = '발신정보없음') or (cxtCallTelNum.Text = '')) then
      begin
        GMessagebox('고객번호는 ' + MDXCI_0005, CDMSE);
        if (Self.Showing) And (cxtCuTel.CanFocus) then cxtCuTel.SetFocus;
        Exit;
      end;
    except
      on e: exception do begin
        Result := False;
        Assert(False, 'NotNullCheck Error 3 :' + sErrLine + ':' + E.Message);
      end;
    end;

    if Trim(meoStartArea.Text) = '' then
    begin
      if lg_Save <> '1' then
      begin
        GMessagebox('출발지는 필수 입력 항목 입니다.', CDMSE);
        if (Self.Showing) And (meoStartArea.CanFocus) then meoStartArea.SetFocus;
        Exit;
      end;
    end;

    if Length(cxtCuTel.Text) > 1 then
    begin
      if not NumericCheck(STANDFUNCPATHFILE, '고객번호는 숫자만 입력하세요', cxtCuTel.Text) then
      begin
        if (Self.Showing) And (cxtCuTel.CanFocus) then cxtCuTel.SetFocus;
        Exit;
      end;
    end;
    locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.
    if not NumericCheck(STANDFUNCPATHFILE, '대표번호는 숫자만 입력하세요', locKNum) then
    begin
      if (Self.Showing) And (cboBranch.CanFocus) then cboBranch.SetFocus;
      Exit;
    end;
    // 24시간이 지난오더 수정 모드로 들어와 신규접수,대기 등록할때, 오늘접수등록 알림 메시지 보여준다.
    if (b24HourCheck = True) and (btnCmdUpdSave.Tag = 99) then
    begin
      GMessagebox('[신규접수알림] 수정모드에서 당일(오늘) 신규오더로 접수 합니다.', CDMSE);
      //Exit;   // 접수는 가능하게 되어야 함.
    end;

    if (cbbPayMethod.Text = PAY_METHOD_POST_MILE) then
    begin
      if locCardPaySeq = '' then     //20130613  LYB 후불마일리지 사용시 쿠폰사용하면 마일리지 체크 않함
			begin
				//(-)마일 금액일 경우 접수안되도록 막음 20160826 KHS
				if StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0) < 0 then
				begin
					GMessagebox('마일리지 금액이 (-)금액입니다. '+ #13#10 + '후불(마일)을 사용할 수 없습니다.', CDMSE);
					cbbPayMethod.ItemIndex := 0;
					Exit;
				end	else
				begin
					UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0)
										+ StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);
					if edtPostPay.Value > UserMile then
					begin
						GMessageBox(Format('고객의 보유 마일리지(%s)를 초과하여 마일리지를 입력하셨습니다.', [FormatFloat('#,##0', UserMile)]), CDMSE);
						edtPostPay.Value := UserMile;
						if (Self.Showing) And (edtPostPay.CanFocus) then edtPostPay.SetFocus;
						Exit;
					end;
				end;
			end;
    end;

    if (cbbPayMethod.Text = PAY_METHOD_MULTI) And ( curMileCharge.Value > 0 ) then
    begin
      if locCardPaySeq = '' then     //20130613  LYB 후불마일리지 사용시 쿠폰사용하면 마일리지 체크 않함
			begin
				//(-)마일 금액일 경우 접수안되도록 막음 20160826 KHS
				if ( StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0) < 0 ) And
           ( curMileCharge.Value > 0 ) then
				begin
					GMessagebox('마일리지 금액이 (-)금액입니다. '+ #13#10 + '마일리지를 사용할 수 없습니다.', CDMSE);
					curMileCharge.Value := 0;
					Exit;
				end	else
				begin
					UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0)
										+ StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);
					if curMileCharge.Value > UserMile then
					begin
						GMessageBox(Format('고객의 보유 마일리지(%s)를 초과하여 마일리지를 입력하셨습니다.', [FormatFloat('#,##0', UserMile)]), CDMSE);
						curMileCharge.Value := UserMile;
//						if (Self.Showing) And (edtPostPay.CanFocus) then edtPostPay.SetFocus;
						Exit;
					end;
				end;
			end;
    end;
    Result := True;
  except
    on e: exception do
    begin
      Result := False;
      Log('NotNullCheck Error :' + sErrLine + ':' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'NotNullCheck Error :' + sErrLine + ':' + E.Message);
    end;
  end;
end;

function TFrm_JON01N.IsPayMethodPost: Boolean;
begin
  Result := ( Pos('후불', cbbPayMethod.Text) > 0 ) Or ( Pos('복합', cbbPayMethod.Text) > 0 );
end;

function TFrm_JON01N.IsUseCoupon(ABrNo: string): Boolean;
var
	Idx: Integer;
begin
	Result := False;

	Idx := scb_BranchCode.IndexOf(ABrNo);
	if Idx < 0 then
		Exit;

	Result := (scb_BranchCoupon[Idx] = 'y');
end;

procedure TFrm_JON01N.Label2MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  if shpMile.Brush.Color = $00FF8000 then TcxLabel(Sender).ShowHint := True
                                     else TcxLabel(Sender).ShowHint := False;
end;

procedure TFrm_JON01N.Label6MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  if shpOCC.Brush.Color = $0080FFFF then TcxLabel(Sender).ShowHint := True
                                    else TcxLabel(Sender).ShowHint := False;
end;

procedure TFrm_JON01N.LbDriverChargeClick(Sender: TObject);
begin
  if cxDriverCharge.Enabled then cxDriverCharge.SetFocus;
end;

// 선택된 지사정보에서 지사명을 추출 한다.
function TFrm_JON01N.Proc_BrNameReadSearch: string;
var
  iPos2: Integer;
  sBrName, sTmp : string;
begin
  SetDebugeWrite('JON01N.Proc_BrNameReadSearch');
  Result := '';
  sBrName := '';
  sTmp := cboBranch.Text;
  if sTmp = '' then Exit;

  // 예시: "NS법인[15889999] A100 .B100 "   2011.05.17  CDS.
  iPos2 := Pos('[', sTmp);
  if iPos2 > 0 then
  begin
    sTmp := Copy(sTmp, 1, iPos2-1);
    sBrName := sTmp;
  end;

  Result := sBrName;
end;

// 고객 전화번호로 고객 기본정보 조회
procedure TFrm_JON01N.Proc_KeyNumberSearch(ss_KeyNumber: string; bCid: Boolean = False);
label
  Retry;
var
  bLeft : Boolean;
  ls_TxLoad: string;
  slRcvList: TStringList;
  CustTel, rv_str, ls_rxxml: string;
  ErrCode: integer;
  iHeight, iTop, iLeft : Integer;
  startTick, delta : DWord;
begin
	SetDebugeWrite('JON01N.Proc_KeyNumberSearch');
  if Self.Tag < 0 then Exit;

	startTick := GetTickCount;
	SetDebugeWrite_CID('Proc_KeyNumberSearch : No['+IntToStr(Self.Tag)+'] ' + cxtCallTelNum.Text + ',' + ss_KeyNumber);

	if Trim(ss_KeyNumber) = '' then
	begin
		if not gbCallMartFileJON01 then
		begin
			GMessagebox('지사 + 대표번호를 선택 하세요~', CDMSE);
			if cboBranch.CanFocus then cboBranch.SetFocus;
		end else
		//콜마트 파일콜링의 경우
		if gbCallMartFileJON01 then
		begin
			Try
        Application.ProcessMessages;
				proc_CallMartJon01(gCALLMART);
				GMessagebox('지사 + 대표번호를 선택 하세요~', CDMSE);
				if cboBranch.CanFocus then cboBranch.SetFocus;
			Except
				gbCallMartFileJON01 := False;
			End;
		end;
		Exit;
	end;

	if Trim(cxtCuTel.Text) = '' then
  begin
		if Trim(cxtCallTelNum.Text) = '' then
    begin
			if not gbCallMartFileJON01 then
			begin
				GMessagebox('고객전화번호를 입력 하세요~', CDMSE);
				if cxtCuTel.CanFocus then cxtCuTel.SetFocus;
			end else
			//콜마트 파일콜링의 경우
			if gbCallMartFileJON01 then
			begin
				Try
          Application.ProcessMessages;
					proc_CallMartJon01(gCALLMART);
					GMessagebox('고객전화번호를 입력 하세요~', CDMSE);
					if cxtCuTel.CanFocus then cxtCuTel.SetFocus;
				Except
					gbCallMartFileJON01 := False;
				End;
			end;
			Exit;
    end;
  end;

  // 출발지/도착지에 자료가 있는지 여부 체크 후 없으면 표시  20130724  LYB
  if ( cxtStartXval.Text <> '' ) Or ( cxtStartYval.Text <> '' ) Or
     ( cxtEndXval  .Text <> '' ) Or ( cxtEndYval  .Text <> '' ) then
    pbISStartEndXY := True
  else
    pbISStartEndXY := False;  // 초기화 부분에 문제가 있어서 사용 중지

  try
    cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);

    // ------------------ 발신번호 정보를 보여준다.------------------------
		if (cxLblCIDUseFlg.Hint <> 'CID') Or ( gbCallRouteBrChange ) then
    begin
      if locCustHP_MainNum_Search = '' then
      begin // JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
        locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
        locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.
        cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
        cxtCallTelNum.Text := cxtCuTel.Text;
      end;
    end else
    begin
      cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
      cxtCallTelNum.Text := cxtCuTel.Text;
    end;

		CustTel := cxtCallTelNum.Text;
    if locbWkToCust then
      CustTel := CustTel + '+';

		ls_TxLoad := GTx_UnitXmlLoad('JON03010.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString',        GT_USERIF.ID,   [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString',     VERSIONINFO,    [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString',     'KYNM0001',     [rfReplaceAll]);

		if (cxLblCIDUseFlg.Hint <> 'CID') Or ( gbCallRouteBrChange ) then
		begin
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsYnString',        'n'                    , [rfReplaceAll]); // CID서버로 부터 생성된 창인지 여부 (y,n)
{      * 콜링로그 정리
       ㄴ CID구버전 : 상담원클라에서 신규접수창 팝업될때 고객조회시 콜링로그 기록
          => CDMS_CID_CALLING_LOG
       ㄴ CID신버전 : 중앙CID서버에서 콜링 로그 기록
           => CDMS_CIDS_CALL_TODAY (일마감이관 CDMS_CIDS_CALL)
       콜링로그를CDMS_CID_CALLING_LOG로 찍기위해 버전을 '0'으로 호출   2021.08.05 . 최도순팀장님 요청
}
      if gsCidVersion = 'CXE' then
        ls_TxLoad := StringReplace(ls_TxLoad, 'CidsVersionString',   '1', [rfReplaceAll]) // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      else
        ls_TxLoad := StringReplace(ls_TxLoad, 'CidsVersionString',   '0', [rfReplaceAll]); // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsInlineString',    ''                     , [rfReplaceAll]); // 내선번호  (CID서버에서 수신한값)
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsDnisString',      ''                     , [rfReplaceAll]); // DNIS번호  (CID서버에서 수신한값)
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsKeyNumberString', ''                     , [rfReplaceAll]); // 대표번호  (CID서버에서 수신한값
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsCidNumString',    ''                     , [rfReplaceAll]); // 고객번호  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsCidKeyString',    ''                     , [rfReplaceAll]); // 고객번호별고유키값  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsBrNoString',      ''                     , [rfReplaceAll]); // 지사코드 (CID서버에서 수신한값)
		end else
    begin
      // 콜링후에 콜링전문전송 시점 로그 남김
      Log(Format('CALL [%s, %s]',[gsInternalNumber, System.StrUtils.Rightstr(CustTel, 4)]), HEARTLOGPATHFILE);
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsYnString',        'y'                    , [rfReplaceAll]); // CID서버로 부터 생성된 창인지 여부 (y,n)
      if gsCidVersion = 'CXE' then
				ls_TxLoad := StringReplace(ls_TxLoad, 'CidsVersionString',   '1', [rfReplaceAll]) // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      else
        ls_TxLoad := StringReplace(ls_TxLoad, 'CidsVersionString',   '0', [rfReplaceAll]); // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsInlineString',    gsInternalNumber       , [rfReplaceAll]); // 내선번호  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsDnisString',      En_Coding(locDNIS)     , [rfReplaceAll]); // DNIS번호  (CID서버에서 수신한값)
      ls_TxLoad := StringReplace(ls_TxLoad, 'CidsKeyNumberString', En_Coding(ss_KeyNumber), [rfReplaceAll]); // 대표번호  (CID서버에서 수신한값
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsCidNumString',    CustTel                , [rfReplaceAll]); // 고객번호  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsCidKeyString',    locSndTime             , [rfReplaceAll]); // 고객번호별고유키값  (CID서버에서 수신한값)
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsBrNoString',      En_Coding(locBRNO)     , [rfReplaceAll]); // 지사코드 (CID서버에서 수신한값)
		end;

		ls_TxLoad := StringReplace(ls_TxLoad, 'ManTelString',        cxtCuTel.Text     , [rfReplaceAll]); // 고객번호   (상담원의 임의로 고객번호입력)
		ls_TxLoad := StringReplace(ls_TxLoad, 'ManKeyNumberString',  En_Coding(locKNum), [rfReplaceAll]); // 대표번호   (상담원이 임의로 지사/대표번호 선택)
		ls_TxLoad := StringReplace(ls_TxLoad, 'ManBrNoString',       En_Coding(locBRNO), [rfReplaceAll]); // 지사코드   (상담원이 임의로 지사/대표번호 선택)

    // 사용자별 오더통계를 계산하기 위한 속성값(CID : 0(일반), 1(CID))
    if bCid then
    begin
      if locCustHP_MainNum_Search = '' then
				// JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
				ls_TxLoad := StringReplace(ls_TxLoad, 'CidsAutoString', '1', [rfReplaceAll])   // CID서버로부터 생성되어 최초 전문요청시 (1)
			else
				ls_TxLoad := StringReplace(ls_TxLoad, 'CidsAutoString', '0', [rfReplaceAll]);
		end else
    begin
			ls_TxLoad := StringReplace(ls_TxLoad, 'CidsAutoString', '0', [rfReplaceAll]);
		end;

		// 접수화면의 기본 컨트롤을 초기화 한다.
		gsCuTelHint := cxtCuTel.Text;
    meoBigo.Hint := 'NOCLEAR';
    if ( Not pbISStartEndXY ) then
    begin
			if Not Frm_Main.JON01MNG[Self.Tag].bInit then
        FControlInitial(False, False); // 폼컨트롤 초기화.
    end;
		meoBigo.Hint := '';

    ControlClear(True);
		cxtCuTel.Text := gsCuTelHint;
    locsCuTel := cxtCuTel.Text;

    Frm_Main.Frm_Jon012[Self.Tag].cxBtnOldSelect.Tag := 0;
    Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.SetRecordCount(0);
    Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Clear;
    Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Active := False;

Retry:
    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      GS_HINT_NO := True;
      Proc_JobAfterProc(True, False);
      rv_str := '';
      grpTitle.Tag := -1;
      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          delta := GetTickCount - startTick;
          if delta > 3000 then
          begin
            Assert(False, Format('JON01N.Proc_KeyNumberSearch Over = %d - %s,%s,%s', [delta, cxtCuTel.Text, En_Coding(locKNum), En_Coding(locBrNo)]));
          end;

          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end else
        gsCuTelHint := '';  // 20130701  LYB  네트워크 오류시 재 조회 하게끔 변수 처리
    finally
      Proc_JobAfterProc(False, False);
      // 사이즈를 한번만 조정하기 위해 ( 속도 ) -----------------------------
      grpTitle.Tag := 0;
      SetPnlCustMemoSize(meoCuCCMemo);
      SetPnlCustMemoSize(meoCuWorMemo);
      SetPnlCustMemoSize(edt_CardMemo);
      SetPnlCustMemoSize(mmoCbMemo);
      iHeight := pFormJon01Size(gJon01Size[Self.Tag]);
      pSetFormScroll(1, iHeight);

      if ( GB_JON_FIXEDPIN ) And ( Frm_Main.Frm_Jon012[Self.Tag].Showing ) then
      begin
        bLeft := GS_EnvFile.ReadBool('AcceptWin', 'Jon012Pos' , True);
        if Not bLeft then
        begin
          iTop  := GS_EnvFile.ReadInteger('AcceptWin', 'Jon012Top', 200);
          iLeft := GS_EnvFile.ReadInteger('AcceptWin', 'Jon012Left', 0);

          if Frm_Main.JON01MNG[Self.Tag].Dock then
          begin
            Frm_Main.Frm_Jon012[Self.Tag].Left := Frm_JON00.Left + iLeft;
            Frm_Main.Frm_Jon012[Self.Tag].Top  := Frm_JON00.Top + (Frm_JON00.Height + 1);
          end else
          begin
            Frm_Main.Frm_Jon012[Self.Tag].Left := Self.Left + iLeft;
            Frm_Main.Frm_Jon012[Self.Tag].Top  := Self.Top + (Self.Height + 1);
          end;
        end;
      end;
      // -------------------------------------------------------------------
      GS_HINT_NO := False;
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
    end;

    Frm_Main.JON01MNG[Self.Tag].bInit := False;

    // 플러스콜 사용여부 체크
		proc_PlusCall_CtrlYN;

		// 탁송연합콜 사용
		proc_TakCall_CtrlYN;

		//AI 아웃바운드 옵션 배차지연콜 사용여부
		proc_AIOB_CtrlYN;

		//건당보럼료 부료 사용 여부 체크
		if GetBranchYN(scb_JON03CallByInsureFree, Proc_BRNOSearch) = 'y' then 
		begin
			lblCallByInsureFree.Visible := True;
			lblCallByInsureFree.Tag := 0;     // 기본값 사용안함
			pSetLabelClick(lblCallByInsureFree);
		end else
		begin
			lblCallByInsureFree.Visible := False;
			lblCallByInsureFree.Tag := 0;
			pSetLabelClick(lblCallByInsureFree);
		end;
//    if (cxLblCIDUseFlg.Hint = 'CID') then
		begin
      if Frm_Main.JON01MNG[Self.Tag].rKey = '' then
      begin
        Frm_Main.JON01MNG[Self.Tag].rKey := GT_USERIF.ID + FormatDateTime('yyyymmddhhmmss', Now);
        Frm_Main.JON01MNG[Self.Tag].rTime := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);  // 콜링시간(yyyy-mm-dd hh:mm:ss)
        Frm_Main.JON01MNG[Self.Tag].rOriginal := True;
      end;

      BtnQRate.Enabled := True;
			BtnQRate.Tag := 0;
    end;

    tmrTitleInvert.Enabled := True;
    tmr_CustInvert.Enabled := True;

//		if bAppOrder = True then pnlJonMain.Enabled := False; //앱오더면 앱판넬 보여주고 접수창 컨트롤 잠금 20191217 KHS
		pSet701CShareValue(Self.Tag, Frm_Main.Frm_JON01N[Self.Tag]);
		SetDebugeWrite('JON01N.Proc_KeyNumberSearch End');
  except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.proc_KMAiRate(AGubun : integer);
Var SRIp : String;
		SRPort : Integer;
		slDepArr : TStringList;
		sResvTime, sTmp, sLat, sLng, sVia, sRoute, sKMTime : String;
		i, iTmp : integer;
begin
	SetDebugeWrite('JON01N.proc_KMAiRate');
	Try
		if (cxtStartXval.Text = '') or (cxtStartYval.Text = '') or
			 (cxtEndXval  .Text = '') or (cxtEndYval  .Text = '') then
		begin
			Exit;
		end;

		slDepArr := TStringList.Create;
		Try
			sTmp := cxtStartXval.Text;
			sLat := SetWGS84(sTmp);
			sTmp := cxtStartYval.Text;
			sLng := SetWGS84(sTmp);
			slDepArr.Add(sLat + '-' + sLng); //출발지

			sRoute := sLat + '-' + sLng;
			sTmp := cxtEndXval.Text;
			sLat := SetWGS84(sTmp);
			sTmp := cxtEndYval.Text;
			sLng := SetWGS84(sTmp);
			slDepArr.Add(sLat + '-' + sLng); //도착지
			sRoute := sRoute + ' ' + sLat + '-' + sLng;
			i := 0; sVia := '';
			while i <= 4 do
			begin
				sTmp := GT_PASS_INFO[Self.Tag][i].MAP_X;
				if sTmp = '' then Break;
				
				sLat := SetWGS84(sTmp);
				sTmp := GT_PASS_INFO[Self.Tag][i].MAP_Y;
				sLng := SetWGS84(sTmp);
				if sVia = '' then
					sVia :=              sLat + '-' + sLng else
					sVia := sVia + ',' + sLat + '-' + sLng;
					
				inc(i);
			end;
			slDepArr.Add(sVia); //경유지
			sRoute := sRoute + ' ' + sVia;
			
			sResvTime := '';
			if (BtnResJ.Tag = 1) or (BtnResD.Tag = 1) then
				sResvTime := formatdatetime('yyyy-mm-dd', dtpResvDateJ.Date) + 'T' + formatdatetime('hh:mm', dtpResvTimeJ.Time) + ':00';
			
			sRoute := sRoute + ' ' + sResvTime;
			if not Assigned(frm_Jon021) then frm_Jon021 := Tfrm_Jon021.Create(Nil);
			frm_Jon021.bChkTime := True;
			{if frm_Jon021.Tag <> Self.Tag then} frm_Jon021.Hide;
			frm_Jon021.Tag  := Self.Tag;
			if GB_KMAiRateMode then frm_Jon021.btn_Auto.LookAndFeel.SkinName := 'Office2010Silver'
												 else frm_Jon021.btn_Auto.LookAndFeel.SkinName := 'Sharp';
			if GB_KMAiRateMode then frm_Jon021.btn_Auto.Caption := '수동모드' else frm_Jon021.btn_Auto.Caption := '자동모드';

				 //자동적용사용       AI요금창 자동모드        버튼클릭
			if (    GB_KMAiRateUSE) and (not GB_KMAiRateMode) then frm_Jon021.Show else
			if (not GB_KMAiRateUSE) and (not GB_KMAiRateMode) then frm_Jon021.Show else
			if (AGubun = 1)                                   then frm_Jon021.Show;
			

//			frm_Jon021.proc_init;
      sKMTime := '';
			if gsKMAiChargeStr <> sRoute then
			begin
				sKMTime := frm_JON021.func_KakaoTAICharge(slDepArr, sResvTime);
        Lbl_Distance.Caption := Lbl_Distance.Caption + ' 시간)' + sKMTime;
				gsKMAiChargeStr := sRoute;
			end;
			iTmp := 0;
//			proc_SmartCharge(sTmp, sTmp, iTmp);

			if gsKakaoAiActieEdit = 'meoStartArea' then
			begin
				if meoStartArea.Hint <> 'STOPFOCUS' then
				begin // 포커스 더이상 넘어가지 않도록 한다.
					if ViaADDTag > 0 then meoViaArea1.SetFocus
													 else meoEndArea.SetFocus;
	//-        meoEndArea.SetFocus;
					gmap_forword := '';
        end else
        begin
          meoStartArea.Hint := ''; // 포커스 더이상 넘어가지 않도록 한다.
        end;
//				meoEndArea.SetFocus;
			end else
			if gsKakaoAiActieEdit = 'meoViaArea' then
			begin
				meoEndArea.Tag := 99;
				meoEndArea.SetFocus;
				meoEndArea.Tag := 0;
			end else
			if gsKakaoAiActieEdit = 'meoEndArea' then
			begin
				Hide_Panel(lcsActiveEdit,1);
				if (Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['2', '4', '8']) then
				begin
					if meoBigo.Visible = True then
						meoBigo.SetFocus
					else
						meoBigo2.SetFocus;
				end else
				begin
					if curRate.CanFocus then curRate.SetFocus;
				end;
			end;  
		Finally
			slDepArr.Free;
		End;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

// 일반전화번호 인입시 전화번호로 POI검색 후 정보 표시
procedure TFrm_JON01N.Proc_GetTelPOISearch( vTelNo : String );
var
  sHttp : String;
  sYesNo, sViewCnt, sCenterLat, sCenterLon, sFixParam, sOrFixParam : String;

  JON01WNTh : TJON01WNThread;
begin
  SetDebugeWrite('JON01N.Proc_GetTelPOISearch');

  sTelRanDom := 'abcd' + IntToStr(RandomRange(10000, 20000));
  SetDebugeWrite('WiseNutTel A : ' + Trim(vTelNo) + ' --- ' + sTelRanDom);

  if GS_SEARCH_POISVR_SPOIUSE then sYesNo := '0' else sYesNo := '1';
  if GS_PRJ_AREA = 'S' then sViewCnt := '40' else sViewCnt := '100';

  sFixParam := '&region=' + UrlEncode(UTF8Encode(GS_SEARCH_POI_ADDR)) + '&recRegion=' + UrlEncode(UTF8Encode(GS_SEARCH_POI_SCH));
  sOrFixParam := '&region=' + GS_SEARCH_POI_ADDR + '&recRegion=' + GS_SEARCH_POI_SCH;

  sCenterLat := Area_CenterLat;
  sCenterLon := Area_CenterLon;

  try
    sHttp := 'http://' + GS_PoiServerIP + ':8080/jway/search_crypto.jsp?query='+ UrlEncode(UTF8Encode(trim(vTelNo))) +'&lat=' + Frm_JON30.SetWGS84(sCenterLat) + '&lon=' + Frm_JON30.SetWGS84(sCenterLon) + '&startCount=0&viewCount=' + sViewCnt + '&session=' + sTelRanDom + '&ignoreSPOI=' + sYesNo + sFixParam;

    if GS_SEARCH_NO_RI then
    begin
      sHttp := sHttp + '&ignoreAddressDetail=1';
    end else
    begin
      sHttp := sHttp + '&ignoreAddressDetail=0';
    end;

    sHttp := sHttp + '&base64=S';

    try
      JON01WNTh := TJON01WNThread.Create(Self.Tag, 6, sHttp, vTelNo, sTelRanDom);
      JON01WNTh.FreeOnTerminate := False;
    except

    end;
  except
    on E: Exception do
    begin
      Log('Proc_GetTelPOISearch Error:'+E.Message + E.UnitName + E.ClassName, LOGDATAPATHFILE);
    end;
  end;
end;

// 고객 등급별 폼 칼라를 변경해 준다.
procedure TFrm_JON01N.Proc_SetFormColor(bCheck : Boolean);
begin
  SetDebugeWrite('JON01N.Proc_SetFormColor');
	if cboCuLevel.itemindex >= 0 then
	begin
		Try
      cboCuLevel.Style.Font.Color := GetCustLevelColor(Proc_MainKeyNumberSearch, SCboLevelSeq[cboCuLevel.itemindex] );
      SetCustControlColor(bCheck, False);
		except
			Log('고객등급 : Proc_SetFormColor ', LOGDATAPATHFILE);
		end;
		SetMileColorChange;
	end;
end;

procedure TFrm_JON01N.SetMileColorChange;
var
  CurMile,
  UseMile: Integer;
  FontColor: TColor;
begin
	SetDebugeWrite('JON01N.SetMileColorChange');
  try
    CurMile := StrToIntDef(RemoveComma(lblCuMile.Caption), -1);
    UseMile := StrToIntDef(RemoveComma(lblCuMileUnit.Caption), 0);
		AUseMileage := False;

  	if ( CurMile >= UseMile) And (( CurMile <> 0 ) And ( UseMile <> 0 )) then
  	begin
  		FontColor := clWhite;
  		shpMile.Brush.Color := $00FF8000;
{  		if (GS_PRJ_AREA = 'O') and ((Proc_MainKeyNumberSearch = '0519999999')
															 or (Proc_MainKeyNumberSearch = '025231793')) then    //부산오천콜 3박4일 2013.12.11 KHS
			begin                                                                         //삭제요청 2019.03.04 KHS 신성현차장요청
  			AUseMileage := True;
			end; }
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// frm_Jon03.frmJON011 폼의 CU_LEVEL_TYPE : 0 : 고객 자동등급별 라벨 칼라를 변경해 준다.
procedure TFrm_JON01N.Proc_SetFormColor_2(iType: integer);
begin
  SetDebugeWrite('JON01N.Proc_SetFormColor_2');
  try
    if iType = 0 then
    begin
      // 최우수고객
      shpCuLevel.Brush.Color := $0000F2F2;
      cxLblCuLevel.Caption := '최우수';
    end else
    if iType = 1 then
    begin
      // 우수고객
      shpCuLevel.Brush.Color := $00E2FBC8;
      cxLblCuLevel.Caption := '우수';
    end else
    if iType = 2 then
    begin
      // 일반고객  $00EEEEEC;
      shpCuLevel.Brush.Color := $00FFFFE6;
      cxLblCuLevel.Caption := '일반';
    end else
    if iType = 9 then
    begin
      // 기사일때,,
      shpCuLevel.Brush.Color := $00EEEEEC;
      cxLblCuLevel.Caption := '기사';
    end else
   if iType = 10 then
    begin
      // 기본칼라,,
      shpCuLevel.Brush.Color := $00FAEDE2;
      cxLblCuLevel.Caption := '일반';
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.Proc_SetFormColor_3(iType: integer);
begin
  SetDebugeWrite('JON01N.Proc_SetFormColor_3');
  try
//    if iType = 0 then
//    begin
//      // 0.개인, 2.불량[신버전에선 미사용]
//      shpTitle.Pen.Color := GS_BasicColor; // GC_CULEVEL_COLOR.cGeneral;
//    end else
    if iType = 1 then
    begin
      // 1.업소
      shpTitle.Pen.Color := GC_CULEVEL_COLOR.cSTORE;
    end else
    if iType = 3 then
    begin
      // 4.법인
      shpTitle.Pen.Color := $00FE8769;   // 파란색 GC_CULEVEL_COLOR.cCompanyColor;
//    end else
//    if iType = 9 then
//    begin
//      // 9.기사일때,,
//      shpTitle.Pen.Color := GC_CULEVEL_COLOR.cWorkerColor;
//    end else
//    if iType = 10 then
//    begin
//      // 10.기본칼라,,
//      shpTitle.Pen.Color := GS_BasicColor;
    end;
    shpTitle.Hint := ColorToString(shpTitle.Pen.Color);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 고객 당일 오더 구분 : 폼의 라벨 컨트롤 칼라를 설정 한다.
procedure TFrm_JON01N.SetCustControlColor(bCheck, bType : Boolean);
Var FontColor : TColor;
begin
  // 컨트 칼라 설정..
  if bType = True then
  begin
    shpOCC.Brush.Color := $0080FFFF;
    FontColor := clBlack;
  end else
  begin
    shpOCC.Brush.Color := $00585C5C;
    FontColor := clWhite;
  end;

  Label6.Style.TextColor := FontColor;
	lblCuCntTotal.Style.TextColor := FontColor;
  Label10.Style.TextColor := FontColor;
  lblCoCntTotal.Style.TextColor := FontColor;
  Label8.Style.TextColor := FontColor;
	LblCuCancelR.Style.TextColor := FontColor;

  if bCheck then
  begin
    shpTop1.Pen.Color := cboCuLevel.Style.Font.Color;
    shpTop1.Brush.Color := cboCuLevel.Style.Font.Color;
    shpTitle.Brush.Color := cboCuLevel.Style.Font.Color;
    shpGrpTop1.Brush.Color := cboCuLevel.Style.Font.Color;
  end else
  begin
    cboCuLevel.Style.Font.Color := GS_BasicColor;
    shpTop1.Pen.Color := $006C7882;
    shpTop1.Brush.Color := $006C7882;
    shpTitle.Brush.Color := GS_BasicColor;
    shpGrpTop1.Brush.Color := GS_BasicColor;
  end;

  shpLevel.Brush.Color := cboCuLevel.Style.Font.Color;
  shpTop2.Brush.Color := cboCuLevel.Style.Font.Color;
  shpTop2.Pen.Color   := cboCuLevel.Style.Font.Color;

  shpCustLeft.Brush.Color := cboCuLevel.Style.Font.Color;
  shpCustLeft.Pen.Color := cboCuLevel.Style.Font.Color;

  shpTop2.Hint := ColorToString(shpTop2.Brush.Color);

  lblLevel.Caption := Trim(Copy(StringReplace(cboCuLevel.Text, '등급', '', [rfReplaceAll]), 1, 3));
end;

// 플러스콜 사용여부 체크
function TFrm_JON01N.proc_PlusCall_CtrlYN : string;
var sTmp : string;
begin
  SetDebugeWrite('JON01N.proc_PlusCall_CtrlYN');
  try
    sTmp := '';
    // 플러스콜 여부(수도권만 사용함)
    if GS_PRJ_AREA = 'S' then
    begin
      sTmp := Proc_BRNOSearch;
      // 플러스콜 사용 [접수창체크옵션,지사,본사,연합] 조회
  		sTmp := GetPlusCallYN(sTmp);
      lblPlusYN.Enabled := True;
  		if copy(sTmp,1,4) = 'yyyy' then
      begin
        lblPlusYN.Tag := 1;
  		end else
      if copy(sTmp,1,4) = 'fyyy' then
      begin
        lblPlusYN.Tag := 1;
//        lblPlusYN.Enabled := False;
  		end else
      if copy(sTmp,1,4) = 'nyyy' then    // 미설정. 모드
      begin
  //      cxcPlusYN.Checked := False;
  		end else
      if copy(sTmp,1,4) = 'xyyy' then
      begin
        lblPlusYN.Tag := 0;
        lblPlusYN.Enabled := False;
      end else
      begin
        lblPlusYN.Tag := 0;
        lblPlusYN.Enabled := False;
      end;
      pSetLabelClick(lblPlusYN);
    end;
    Result := sTmp;
  except
    Result := '';
  end;
end;

procedure TFrm_JON01N.proc_dis_alculation_Via(bSearchFlag: boolean);
var
  i : Integer;
  fdis: double;
  XLposVia, YLposVia : String;
begin
  SetDebugeWrite('JON01N.proc_dis_alculation_Via');
  try
  	XLposVia := '';
  	YLposVia := '';

  	if XposVia[1] = '' then
    begin
  		fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			cxtEndXval.Text,
  			cxtEndYval.Text) *
        StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

      fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			cxtEndXval.Text,
  			cxtEndYval.Text), ffNumber, 3, 1), 0.0);
  	end else
  	if (XposVia[1] <> '') and (XposVia[2]  = '') then
    begin
  		fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			XposVia[1],
  			YposVia[1]) *
  			StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0)
  			+ StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			XposVia[1],
  			YposVia[1],
  			cxtEndXval.Text,
  			cxtEndYval.Text) *
  			StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

  		fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			XposVia[1],
  			YposVia[1]), ffNumber, 3, 1), 0.0)
  			+ StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			XposVia[1],
  			YposVia[1],
  			cxtEndXval.Text,
  			cxtEndYval.Text), ffNumber, 3, 1), 0.0);
  	end else
    if XposVia[2] <> '' then
  	begin
      // 출발지 --> 경유지1
  		fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			XposVia[1],
  			YposVia[1]) * StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

  		fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text,
  			cxtStartYval.Text,
  			XposVia[1],
  			YposVia[1]), ffNumber, 3, 1), 0.0);

      // 경유지1 --> 경유지 최종 까지..
  		for i := 2 to 5 do
  		begin
        if XposVia[i] <> '' then
        begin
    			fDis := fDis +
    				StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
    				XposVia[i-1],
    				YposVia[i-1],
    				XposVia[i],
    				YposVia[i]) * StrToFloatDef(CHARGE_DIS, 1.0),
            ffNumber, 3, 1), 0.0);

    			fDirKm := fDirKm +
    				StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
    				XposVia[i-1],
    				YposVia[i-1],
    				XposVia[i],
    				YposVia[i]),
            ffNumber, 3, 1), 0.0);

          XLposVia := XposVia[i];
          YLposVia := YposVia[i];
        end;
      end;

      // 경유지 최종 --> 도착지 까지..
  		if cxtEndXval.Text <> '' then
  		begin
  			if bSearchFlag <> True then
        begin
  				// 최종 확인 버튼 누를때,, 즉 종료전에 마지막것은 Km를 재계산하지 않는다.
          fDis := fDis +
  					StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  					XLposVia,
  					YLposVia,
  					cxtEndXval.Text,
  					cxtEndYval.Text) * StrToFloatDef(CHARGE_DIS, 1.0),
  					ffNumber, 3, 1), 0.0);

          fDirKm := fDirKm +
  					StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  					XLposVia,
  					YLposVia,
  					cxtEndXval.Text,
  					cxtEndYval.Text),
  					ffNumber, 3, 1), 0.0);
  			end;
  		end;
    end;

    if ( GT_DISTANCE_ST = 0 ) then
    begin
    	curKm.Text := FloatToStr(fDis) + 'Km';
      fCruKm := fDis;
      fTotalTime := 0;   // 직선거리이면 소요시간 0
    end else
    begin
      fChgKm := fDis;
      Lbl_Distance.Caption := Format(' 직선)%s', [FloatToStr(fDis) + 'Km']);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01N.func_search_charge: Integer;
type
  TPREM_TIMES = record
    ST_TIME:string;
    ED_TIME:string;
    AMT: integer;
    mYn: Boolean;
  end;
var
  AreaType, AType : Integer;
  sType, sType2, sFirstCD, sPassCode, sPassViewCode, sPassGubun, sOrgDis, sKeyNumber, sNewDistYn, sNewDistDesc, sPeakDesc : string;
  PassPrice, TotalDis, PassDis, ipasscnt, iPassValue, i, iRate, iPeakRate : Integer;
  fOrgDis, dTotalDis : Double;
	dStrLon, dStrLat, dEndLon, dEndLat : Double;
  PriceInfo, PricePassInfo, PriceDesc: string;
  PREM_TIMES : array of TPREM_TIMES;
  PREM_DESC : string;  // pnl_charge.caption 에 요금정보를 추가하기 위한 문자열
  bOpen, bPeak, bStrPoly, bEndPoly : Boolean;
  iStrPoly, iEndPoly : Integer;

  oOderWorker, oWeather, iType, oType : String;
  iSmartRate : Integer;
  SSLat, SSLon, SELat, SELon  : string;
  chnSDong, chnEDong, sQuery : string;
  AMsg : String;

  function Get_Prem_Price(base_amt: Integer; sKeyNum: string): integer;
   var
      base_time: string;
   //  base_time2: string;
      tm_Amt: integer;
      sQuery: string;
      n1: integer;
      function GET_PREM_TIMES: integer;
      var
         n2: integer;
         cInt1: integer;
      begin
         try
            cInt1:=-1;
            if Length(PREM_TIMES)<=0 then
            begin
               result:=0
            end else
            begin
               for n2 :=0 to Length(PREM_TIMES) -1 do
               begin
                  if PREM_TIMES[n2].ST_TIME<=PREM_TIMES[n2].ED_TIME then
                  begin
                     if (PREM_TIMES[n2].ST_TIME<=base_time) and (PREM_TIMES[n2].ED_TIME>=base_time) then
                     begin
                        PREM_TIMES[n2].mYn:=true;
                        cInt1:=n2;
                     end;
                  end else
                  begin
                     if not((PREM_TIMES[n2].ED_TIME<base_time) and (PREM_TIMES[n2].ST_TIME>base_time)) then
                     begin
                        PREM_TIMES[n2].mYn:=true;
                        cInt1:=n2;
                     end;
                  end;
               end;
               if cInt1=-1 then
                  result:=0
               else
               begin
                  PREM_DESC := ' (+심야할증요금 : '+FormatFloat('#,##0',PREM_TIMES[cInt1].AMT)+'원)';
                  result:=PREM_TIMES[cInt1].AMT;
               end;
            end;

            ZeroMemory(@PREM_TIMES, Length(PREM_TIMES));
         except
            result:=0;
         end;
      end;
   begin
      try
         base_time := frm_Main.func_sysdate;
         base_time := Copy(base_time,9,2)+':'+copy(base_time,11,2);

         tm_amt := 0;
         if CHARGE_GUBUN = 'P' then
         begin
            // 20110601 LYB 추가  법인 할증 요금제 조회 후 없으면 기본 할증 요금제 조회
            sQuery := 'select A1.PREM_STTIME,A1.PREM_EDTIME,A3.RESULT_AMT from CDMS_BGROUP_CHARGE_TYPE A1, CDMS_PREM_MAST A2, CDMS_PREM_DETAIL A3 WHERE A1.CT_KEY_NUM = ''' + sKeyNumber + '''  AND A1.CT_CB_CODE  = ''' + cxtCuBubin.Hint + ''' AND TRIM(A1.PREM_STTIME)<>'''' AND TRIM(A1.PREM_EDTIME)<>'''' AND A1.prem_nseq=A2.nseq and A2.nseq=A3.nseq and A3.ST_AMT <= ' + IntToStr(base_amt) + ' and A3.ED_AMT >= ' + IntToStr(base_amt) ;
            dmCharge.proc_SQLite_init;
            dmCharge.FDQuery_SQLite.close;
            dmCharge.FDQuery_SQLite.SQL.Text := sQuery;
            dmCharge.FDQuery_SQLite.open;

            if dmCharge.FDQuery_SQLite.RecordCount = 0 then
            begin
                tm_Amt:=0;
            end else
            begin
               SetLength(PREM_TIMES, dmCharge.FDQuery_SQLite.RecordCount);
               dmCharge.FDQuery_SQLite.FindFirst;
               for n1:=0 to dmCharge.FDQuery_SQLite.RecordCount - 1 do
               begin
                  PREM_TIMES[n1].ST_TIME := dmCharge.FDQuery1.Fields[0].AsString;
                  PREM_TIMES[n1].ED_TIME := dmCharge.FDQuery1.Fields[1].AsString;
                  PREM_TIMES[n1].AMT := dmCharge.FDQuery1.Fields[2].AsInteger;
                  PREM_TIMES[n1].mYn := false;
                  dmCharge.FDQuery_SQLite.FindNext;
               end;
            end;

            if tm_Amt = 0 then
            begin
               sQuery := 'select A1.PREM_STTIME,A1.PREM_EDTIME,A3.RESULT_AMT from CDMS_CHARGE_TYPE A1, CDMS_PREM_MAST A2, CDMS_PREM_DETAIL A3 WHERE A1.CT_KEY_NUM = ''' + sKeyNumber + ''' AND TRIM(A1.PREM_STTIME)<>'''' AND TRIM(A1.PREM_EDTIME)<>'''' AND A1.prem_nseq=A2.nseq and A2.nseq=A3.nseq and A3.ST_AMT <= ' + IntToStr(base_amt) + ' and A3.ED_AMT >= ' + IntToStr(base_amt) ;
               dmCharge.proc_SQLite_init;
               dmCharge.FDQuery_SQLite.close;
               dmCharge.FDQuery_SQLite.SQL.Text := sQuery;
               dmCharge.FDQuery_SQLite.open;

               if dmCharge.FDQuery_SQLite.RecordCount = 0 then
               begin
                  tm_Amt:=0;
               end else
               begin
                  SetLength(PREM_TIMES, dmCharge.FDQuery_SQLite.RecordCount);
                  dmCharge.FDQuery_SQLite.FindFirst;
                  for n1:=0 to dmCharge.FDQuery_SQLite.RecordCount - 1 do
                  begin
                     PREM_TIMES[n1].ST_TIME := dmCharge.FDQuery1.Fields[0].AsString;
                     PREM_TIMES[n1].ED_TIME := dmCharge.FDQuery1.Fields[1].AsString;
                     PREM_TIMES[n1].AMT := dmCharge.FDQuery1.Fields[2].AsInteger;
                     PREM_TIMES[n1].mYn := false;
                     dmCharge.FDQuery_SQLite.FindNext;
                  end;
               end;
            end;
         end else
         if (CHARGE_GUBUN = 'S') or (CHARGE_GUBUN = 'O') then
         begin
            sQuery := 'select A1.PREM_STTIME,A1.PREM_EDTIME,A3.RESULT_AMT from CDMS_BGROUP_TYPE A1, CDMS_SVPREM_MAST A2, CDMS_SVPREM_DETAIL A3 WHERE A1.CT_KEY_NUM = ''' + sKeyNumber + '''  AND A1.CT_CB_CODE  = ''' + cxtCuBubin.Hint + ''' AND TRIM(A1.PREM_STTIME)<>'''' AND TRIM(A1.PREM_EDTIME)<>'''' AND A1.prem_nseq=A2.nseq and A2.nseq=A3.nseq and A3.ST_AMT <= ' + IntToStr(base_amt) + ' and A3.ED_AMT >= ' + IntToStr(base_amt) ;
            dmCharge.proc_mysql_init;
            dmCharge.FDQuery1.Close;
            dmCharge.FDQuery1.SQL.Text := sQuery;
            dmCharge.FDQuery1.OPEN;
            if dmCharge.FDQuery1.recordcount=0 then
            begin
               tm_Amt:=0;
            end else
            begin
               SetLength(PREM_TIMES,dmCharge.FDQuery1.recordcount);
               dmCharge.FDQuery1.FindFirst;
               for n1:=0 to dmCharge.FDQuery1.recordcount-1 do
               begin
                  PREM_TIMES[n1].ST_TIME:=dmCharge.FDQuery1.Fields[0].AsString;
                  PREM_TIMES[n1].ED_TIME:=dmCharge.FDQuery1.Fields[1].AsString;
                  PREM_TIMES[n1].AMT:=dmCharge.FDQuery1.Fields[2].AsInteger;
                  PREM_TIMES[n1].mYn:=false;
                  dmCharge.FDQuery1.FindNext;
               end;
            end;

            if tm_Amt = 0 then
            begin
               sQuery := 'select A1.PREM_STTIME,A1.PREM_EDTIME,A3.RESULT_AMT from CDMS_TYPE A1, CDMS_SVPREM_MAST A2, CDMS_SVPREM_DETAIL A3 WHERE A1.CT_KEY_NUM = ''' + sKeyNumber + ''' AND TRIM(A1.PREM_STTIME)<>'''' AND TRIM(A1.PREM_EDTIME)<>'''' AND A1.prem_nseq=A2.nseq and A2.nseq=A3.nseq and A3.ST_AMT <= ' + IntToStr(base_amt) + ' and A3.ED_AMT >= ' + IntToStr(base_amt) ;
               dmCharge.proc_mysql_init;
               dmCharge.FDQuery1.Close;
               dmCharge.FDQuery1.SQL.Text := sQuery;
               dmCharge.FDQuery1.OPEN;
               if dmCharge.FDQuery1.recordcount=0 then
               begin
                  tm_Amt:=0;
               end else
               begin
                  SetLength(PREM_TIMES,dmCharge.FDQuery1.recordcount);
                  dmCharge.FDQuery1.FindFirst;
                  for n1:=0 to dmCharge.FDQuery1.recordcount-1 do
                  begin
                     PREM_TIMES[n1].ST_TIME:=dmCharge.FDQuery1.Fields[0].AsString;
                     PREM_TIMES[n1].ED_TIME:=dmCharge.FDQuery1.Fields[1].AsString;
                     PREM_TIMES[n1].AMT:=dmCharge.FDQuery1.Fields[2].AsInteger;
                     PREM_TIMES[n1].mYn:=false;
                     dmCharge.FDQuery1.FindNext;
                  end;
               end;
            end;
         end;
         tm_Amt:=GET_PREM_TIMES;
         result:=base_amt+tm_amt;

         OutputDebugString(PChar('기본요금:'+IntToStr(base_amt)));
         OutputDebugString(PChar('할증요금:'+IntToStr(tm_Amt)));
      except
          result:=base_amt;
      end;
   end;
begin
   SetDebugeWrite('JON01N.func_search_charge');
   try
    Result := 0;
    PREM_DESC:='';
    if (CHARGE_GUBUN = 'P') and (GS_EXEC_GUBUN = 0) then
    begin
      Exit;
    end;

		if (gsMyMainTelUse = 'TRUE') and (not GSMyMainTelOrderChargeCheck) then
    begin
			Lbl_Charge.Caption := '대표번호 기본요금 강제 적용';

      if FPlusDongCHK = 2 then pnl_Charge.height := 36
                          else pnl_Charge.height := 21;

      if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                          else lbl_PlusAreaNotice.Visible := False;

      SetPosLblDistance;
      pnl_Charge.Visible := True;
      if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Top := pnl_charge.Top + pnl_Charge.height;
      Exit;
    end;

    PriceInfo := ''; // 요금정보
    PriceDesc := ''; // 적요표시
    PassPrice := 0; // 경유요금

    // 총거리(경유있을 경우 경유거리 포함)
    if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
    begin
      if fStEdKm > 0 then
      begin
        TotalDis := Ceil(fStEdKm);      // 경유지요금 계산시 경유지 추가 거리 제외 계산 - 문지현대리 요청 2015.01.26
        dTotalDis := fStEdKm;
      end else
      begin
        TotalDis := Ceil(fCruKm);      // 총거리(경유있을 경우 경유거리 포함)
        dTotalDis := fCruKm;
      end;
    end else
    begin
      TotalDis := Ceil(fCruKm);
      dTotalDis := fCruKm;
    end;

    Lbl_Charge.Caption := '';
    //  Lbl_Distance.Caption := '';

    // 선택된 지사정보에서 대표번호를 추출 한다.
    sKeyNumber := Proc_MainKeyNumberSearch;

    if (lcsSta1 = '') or (lcsEnd1 = '') then
    begin
      Result := dmCharge.func_base_charge(sKeyNumber);
      Exit;
    end;

    // 경유횟수 찾기..
    if GT_PASS_INFO[Self.Tag][0].AREA1 = '' then ipasscnt := 0
    else
    begin
      i := 0;
      while i <= 4 do
      begin
        if GT_PASS_INFO[Self.Tag][i].AREA1 = '' then break;
        inc(i);
      end;
      iPassCnt := i;
    end;

    // 20120604 법인 요금 설정 관련 부분 추가  LYB
    if (CHARGE_GUBUN = 'P') then
    begin
      ///////////////////////////////////////////////////////////////
      // (#1) 법인 별 요금계산
      ///////////////////////////////////////////////////////////////
      sQuery := 'SELECT * FROM CDMS_BGROUP_CHARGE_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' AND CT_CB_CODE  = ''' + cxtCuBubin.Hint + ''' ';
      try
        dmCharge.proc_SQLite_init;
        dmCharge.FDQuery_SQLite.close;
        dmCharge.FDQuery_SQLite.SQL.Text := sQuery;
        dmCharge.FDQuery_SQLite.open;
      except on E: Exception do
        begin
          GMessagebox('로컬요금설정이 잘못되어있어 요금이 계산되지 않았습니다.' + #13#10 +
          '[요금파일 확인 바랍니다.]', CDMSE);
          Exit;
        end;
      end;

      // 법인요금에 등록된 요금제가 없으면 대표번호요금 사용
      if not dmCharge.FDQuery_SQLite.EOF then
      begin
        sType         := dmCharge.FDQuery_SQLite.Fields[5].AsString;  // 경유요금 종류
        sFirstCD      := dmCharge.FDQuery_SQLite.Fields[8].AsString;  // 우선요금제 코드
        iPassValue    := StrToIntDef(dmCharge.FDQuery_SQLite.Fields[7].AsString, 0);
        sPassGubun    := dmCharge.FDQuery_SQLite.Fields[9].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
        sPassCode     := dmCharge.FDQuery_SQLite.Fields[10].AsString;  // 경유요금 코드
        sPassViewCode := dmCharge.FDQuery_SQLite.Fields[11].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
      end;
    end else
    if (CHARGE_GUBUN = 'S') or (CHARGE_GUBUN = 'O') then
    begin
      dmCharge.proc_mysql_init;
      dmCharge.FDQuery1.Close;
      dmCharge.FDQuery1.SQL.Text := 'SELECT * FROM CDMS_BGROUP_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' AND CT_CB_CODE  = ''' + cxtCuBubin.Hint + ''' ';
      try
        dmCharge.FDQuery1.open;
      except on E: Exception do
        begin
          GMessagebox('요금DB설정이 잘못되어있어 요금이 계산되지 않았습니다.'+ #13#10 +
          '[환경설정] - [요금DB연결] 부분 설정을 다시 하세요', CDMSE);
          Exit;
        end;
      end;

      // 법인요금에 등록된 요금제가 없으면 대표번호요금 사용
      if not dmCharge.FDQuery1.IsEmpty then
      begin
        sType         := dmCharge.FDQuery1.Fields[5].AsString;  // 경유요금 종류
        sFirstCD      := dmCharge.FDQuery1.Fields[8].AsString;  // 우선요금제 코드
        iPassValue    := StrToIntDef(dmCharge.FDQuery1.Fields[7].AsString, 0);
        sPassGubun    := dmCharge.FDQuery1.Fields[9].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
        sPassCode     := dmCharge.FDQuery1.Fields[10].AsString;  // 경유요금 코드
        sPassViewCode := dmCharge.FDQuery1.Fields[11].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
      end;
    end;
    if sType = '' then
    begin
      // P : DB 로컬연결        GS_EXEC_GUBUN ==> 1:소켓메인 동작됨, 0:소켓메인 사용할 수 없음.[구버전, 신버전 동시사용가능하도록 위함]
      // 현재 버전, 이미 실행된 신규버전이 있을경우 파라독스 연결 처리 (2008.08.01 KJH)
      if (CHARGE_GUBUN = 'P') then
      begin
        ///////////////////////////////////////////////////////////////
        // (#1) 대표번호 별 요금계산
        ///////////////////////////////////////////////////////////////
        sQuery := 'SELECT * FROM CDMS_CHARGE_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' ';
        try
          dmCharge.proc_SQLite_init;
          dmCharge.FDQuery_SQLite.close;
          dmCharge.FDQuery_SQLite.SQL.Text := sQuery;
          dmCharge.FDQuery_SQLite.open;
        except on E: Exception do
          begin
            GMessagebox('로컬요금설정이 잘못되어있어 요금이 계산되지 않았습니다.'+ #13#10 +
            '[요금파일 확인 바랍니다.]', CDMSE);
                  Exit;
          end;
        end;

        // 대표요금에 등록된 요금제가 없으면 기본표준요금 사용
        if not dmCharge.FDQuery_SQLite.IsEmpty then
        begin
          sType         := dmCharge.FDQuery_SQLite.Fields[4].AsString;  // 경유요금 종류
          sType2        := dmCharge.FDQuery_SQLite.Fields[15].AsString;  // 경유요금 종류
          sFirstCD      := dmCharge.FDQuery_SQLite.Fields[7].AsString;  // 우선요금제 코드
          iPassValue    := StrToIntDef(dmCharge.FDQuery_SQLite.Fields[6].AsString, 0);
          sPassGubun    := dmCharge.FDQuery_SQLite.Fields[8].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
          sPassCode     := dmCharge.FDQuery_SQLite.Fields[9].AsString;  // 경유요금 코드
          sPassViewCode := dmCharge.FDQuery_SQLite.Fields[10].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
        end;
      end else
      if (CHARGE_GUBUN = 'S') or (CHARGE_GUBUN = 'O') then
      begin
        dmCharge.proc_mysql_init;
        dmCharge.FDQuery1.Close;
        dmCharge.FDQuery1.SQL.Text := 'SELECT CT_NO, CT_BR_NO, CT_KEY_NUM, CT_GUBUN, CT_CD, CT_GUBUN2, CT_CD2, IN_DATE, CT_PASSVALUE, CT_FIRST_CD, CT_PASS_GUBUN, CT_PASS_CD, CT_PASS_VIEW, PREM_NSEQ, PREM_STTIME, PREM_EDTIME, CT_NEWDIST_YN FROM CDMS_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' ';
        try
          dmCharge.FDQuery1.open;
        except on E: Exception do
          begin
            GMessagebox('요금DB설정이 잘못되어있어 요금이 계산되지 않았습니다.'+ #13#10 +
                  '[환경설정] - [요금DB연결] 부분 설정을 다시 하세요', CDMSE);
            Exit;
          end;
        end;

        // 대표요금에 등록된 요금제가 없으면 기본표준요금 사용
        if not dmCharge.FDQuery1.IsEmpty then
        begin
          sType         := dmCharge.FDQuery1.Fields[4].AsString;   // 요금 종류1
          sType2        := dmCharge.FDQuery1.Fields[6].AsString;   // 요금 종류2
          sFirstCD      := dmCharge.FDQuery1.Fields[9].AsString;   // 우선요금제 코드
          iPassValue    := StrToIntDef(dmCharge.FDQuery1.Fields[8].AsString, 0);
          sPassGubun    := dmCharge.FDQuery1.Fields[10].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
          sPassCode     := dmCharge.FDQuery1.Fields[11].AsString;  // 경유요금 코드
          sPassViewCode := dmCharge.FDQuery1.Fields[12].AsString;  // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
          try
            sNewDistYn  := dmCharge.FDQuery1.Fields[16].AsString;  // 신)거리요금 사용유무
          except
            sNewDistYn := 'n';
          end;
        end;
      end;
    end;

    if sType = '' then
    begin
      sType         := 'CC001';
      sFirstCD      := '';
      iPassValue    := 0;
      sPassGubun    := '0';
      sPassCode     := '';
      sPassViewCode := '';
    end;

    if sType2 = '' then
    begin
      sType2        := 'CC001';
    end;

    // 우선요금 미사용 경우(경유지가 있는 경우, [거리요금]체크&거리/요금표)
    if ((iPassCnt  > 0) and (((sPassGubun = '0') and (iPassValue > 0)) or
       ((sPassGubun = '0') and (sPassCode <> ''))) or
       (( lblRangeRate.Tag = 1 ) and ((Copy(sType, 1, 2) = 'CD') or (Copy(sType, 1, 2) = 'CA')))) then
    begin
      sFirstCD := '';
    end;

    FcnhDongCHK := 0; //추가요금제외체크
    FPlusDongCHK := 0; //추가요금포함체크
    FPlusDongName := ''; //적용된 추가요금제명

    pnl_charge.Color := $008000FF;

    if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
    begin
      chnSDong := lcsSta3;
      chnEDong := lcsEnd3;

      try
        SSLat := getDEGREE(cxtStartXval.Text);
        SSLon := getDEGREE(cxtStartYval.Text);

        SELat := getDEGREE(cxtEndXval.Text);
        SELon := getDEGREE(cxtEndYval.Text);

        for i := 0 to Length(FAREAROUND_XY) -1 do
        begin
          if PtInPolygon(StrToFloatDef(SSLon, 0)
                       , StrToFloatDef(SSLat, 0)
                       , FAREAROUND_XY[i].LonArr
                       , FAREAROUND_XY[i].LatArr
                       , FAREAROUND_XY[i].ArrCnt) then
          begin
            chnSDong := FAREAROUND_XY[i].DONG;
                 if FAREAROUND_XY[i].GUBUN = 'M' then FcnhDongCHK := 1
            else if FAREAROUND_XY[i].GUBUN = 'P' then
            begin
              FPlusDongCHK := 2;
            end;
          end;
          if PtInPolygon(StrToFloatDef(SELon, 0)
                       , StrToFloatDef(SELat, 0)
                       , FAREAROUND_XY[i].LonArr
                       , FAREAROUND_XY[i].LatArr
                       , FAREAROUND_XY[i].ArrCnt) then
          begin
            chnEDong := FAREAROUND_XY[i].DONG;
                 if FAREAROUND_XY[i].GUBUN = 'M' then FcnhDongCHK := 1
            else if FAREAROUND_XY[i].GUBUN = 'P' then
            begin
              FPlusDongCHK := 2;
            end;
          end;
        end;
      except
        chnSDong := lcsSta3;
        chnEDong := lcsEnd3;
      end;

      if (GS_Grid_DEP = 'D') or (GS_Grid_DES = 'D') then
      begin
        if (GS_Grid_DEP = 'D')  and (GS_Grid_DES <> 'D') then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, chnSDong, '', lcsEnd1, lcsEnd2, chnEDong, cxtEndAreaDetail.Caption,
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType)
        else
        if (GS_Grid_DEP <> 'D') and (GS_Grid_DES = 'D') then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, chnSDong, cxtStartAreaDetail.Text, lcsEnd1, lcsEnd2, chnEDong, '',
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType)
        else
        if (GS_Grid_DEP = 'D')  and (GS_Grid_DES = 'D')  then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, chnSDong, '', lcsEnd1, lcsEnd2, chnEDong, '',
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType);
      end
      else
        Result := dmCharge.func_charge(lcsSta1, lcsSta2, chnSDong, cxtStartAreaDetail.Text, lcsEnd1, lcsEnd2, chnEDong, cxtEndAreaDetail.Caption,
          TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType);
    end else
    begin
      if (GS_Grid_DEP = 'D') or (GS_Grid_DES = 'D') then
      begin
        if (GS_Grid_DEP = 'D')  and (GS_Grid_DES <> 'D') then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, lcsSta3, '', lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption,
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType)
        else
        if (GS_Grid_DEP <> 'D') and (GS_Grid_DES = 'D') then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, lcsEnd1, lcsEnd2, lcsEnd3, '',
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType)
        else
        if (GS_Grid_DEP = 'D')  and (GS_Grid_DES = 'D')  then
          Result := dmCharge.func_charge(lcsSta1, lcsSta2, lcsSta3, '', lcsEnd1, lcsEnd2, lcsEnd3, '',
            TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType);
      end
      else
        Result := dmCharge.func_charge(lcsSta1, lcsSta2, lcsSta3, cxtStartAreaDetail.Text, lcsEnd1, lcsEnd2, lcsEnd3, cxtEndAreaDetail.Caption,
          TotalDis, sType, sType2, sFirstCD, iPassCnt, iPassValue, PriceInfo, AreaType, AType);
    end;

    if Trim(FPlusDongName) = '' then lbl_PlusAreaNotice.Tag := 0
                                else lbl_PlusAreaNotice.Tag := 1;

    lbl_PlusAreaNotice.Caption := '추가요금 적용' + '[' + FPlusDongName + ']';

    ///////////////////////////////////////////////////////////////
    // (#2) 스마트요금제 계산
    ///////////////////////////////////////////////////////////////

    if (copy(sType, 1, 2) = 'SM') or (copy(sType2, 1, 2) = 'SM') then //대표번호별 스마트요금제 선택 시 20150331 KHS
    else
    begin
      if GT_RealTimeWorker then oOderWorker := ''
                           else oOderWorker := '0';

      if GT_RealTimeWeather then oWeather := ''
                            else oWeather := '0';

      iType := '';//검색타입 '동-동' 접수창에서는 무조건 동-동으로 조회

      if GB_DEBUG_USE then Log(oOderWorker + oWeather +
                                       lcsSta1 + lcsSta2 + lcsSta3 + meoStartArea.Text + cxtStartXval.Text + cxtStartYval.Text +
                                       lcsEnd1 + lcsEnd2 + lcsEnd3 + meoEndArea.Text + cxtEndXval.Text + cxtEndYval.Text + iType, LOGDATAPATHFILE);

      iSmartRate := fJON01_SmartCharge(oOderWorker, oWeather,
                                       lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text,
                                       lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, iType, oType);

      if oType = 'DD' then oType := '동->동' else
      if oType = 'DG' then oType := '동->구' else
      if oType = 'GD' then oType := '구->동' else
      if oType = 'GG' then oType := '구->구' else
      if oType = 'GS' then oType := '구->시';

      bOpen := False;
      if GT_AutoSmartCharge then // 0원이거나 요금이 다를경우 스마트요금 접수창요금 자동적용
      begin
        if ( Result = 0 ) Or ( Result <> iSmartRate ) then
        begin
          if GT_PopUpSmartCharge then // 0원이거나 요금이 다를경우 스마트요금창 자동팝업
          begin
            if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
                         (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
                 (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
            begin
            end else
            begin
              bOpen := True;
              BtnSmartRate.Click;
              if curRate.CanFocus then curRate.SetFocus;
            end;
          end;
          PriceInfo := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
          Result := iSmartRate;
        end;
      end;

      if GB_JON_SMARTRATEUSE then
      begin
        PriceInfo := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
        Result := iSmartRate;
      end;

      if ( GT_AllPopUpSmartCharge ) And ( Not bOpen )  then // 스마트요금창 자동팝업
      begin
        if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
             (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
             (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
        begin
        end else
        begin
          BtnSmartRate.Click;
          if curRate.CanFocus then curRate.SetFocus;
        end;
      end;
    end;
    ///////////////////////////////////////////////////////////////
    // (#3) 요금제에 요금이 없으면 표준요금 참조 ,  요금제1 사용안함, 요금제2 사용안함이면 0원 2021.06.21
    ///////////////////////////////////////////////////////////////
    if (Result = 0) and (GT_DEFAULT_ST = 0) and (sType <> '00000') and (sType2 <> '00000') then
    begin
      Result := dmCharge.func_charge(lcsSta1, lcsSta2, '', '', lcsEnd1, lcsEnd2, '', '',
        0, 'CC001', 'CC001', '', 0, 0, PriceInfo, AreaType, AType);
    end;
     FType := AType;
    ///////////////////////////////////////////////////////////////
    // (#4) 경유요금 계산
    ///////////////////////////////////////////////////////////////
    if (Result > 0) and (ipasscnt > 0) then
    begin
      if (sPassGubun = '0') then
      begin
        PassPrice := dmCharge.func_Pass_charge('0', '', iPassValue, iPassCnt, 0, PricePassInfo);
        Result := Result + PassPrice;
      end else
      if (sPassGubun = '1') then
      begin
        // 출도착지 거리
        if ( GT_DISTANCE_ST = 1 ) And ( giKmComPletG = 'OK' ) then
        begin
          PassDis := Ceil(fViaKm);
        end else
        begin
          sOrgDis := FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
            cxtStartXval.Text, cxtStartYval.Text, cxtEndXval.Text,
            cxtEndYval.Text) * StrToFloatDef(CHARGE_DIS, 1.0),
            ffNumber, 3, 1);
          fOrgDis := StrToFloatDef(sOrgDis, 0);
          PassDis := TotalDis - Ceil(fOrgDis);
        end;

        PassPrice := dmCharge.func_Pass_charge(sPassCode, sPassViewCode, iPassValue, iPassCnt, PassDis, PricePassInfo);

        if (sPassViewCode = '0') and (PassPrice > 0) then
        // 거리요금, 요금 미포함인경우 경유요금 미포함
          PriceDesc := '＜경유요금:' + IntToStr(PassPrice) + '＞'
        else
          Result := Result + PassPrice;
      end;
    end;

		 if (gsMyMainTelUse = 'TRUE') and (GSMyMainTelOrderChargeCheck) and (Result = 0)then
     begin
			 Lbl_Charge.Caption := Format('대표번호 기본요금(%s) 강제 적용', [StrToMoney(sNowRate)]);

       if FPlusDongCHK = 2 then pnl_Charge.height := 36
                           else pnl_Charge.height := 21;

       if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                           else lbl_PlusAreaNotice.Visible := False;

       SetPosLblDistance;
       pnl_charge.BringToFront;
       pnl_Charge.Visible := True;
       if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Top := pnl_charge.Top + pnl_Charge.height;
       Result := StrToIntDef(sNowRate, 0);
       Exit;
     end;

    // 신)거리요금제 값이 있으면  적용
    if (sNewDistYn = 'y') then
    begin
      // 신)거리요금 사용시 요금 즉시계산안되게 수정
      if GT_CHARGE_CAL = 0 then
      begin
    		GT_CHARGE_CAL := 1;
	    	GS_EnvFile.WriteString('CHARGE', 'CAL', IntToStr(GT_CHARGE_CAL));
      end;

      iPeakRate := func_distance_charge(dTotalDis, bPeak, sPeakDesc, 'y');
      bPeak := False;
      iRate := func_distance_charge(dTotalDis, bPeak, sNewDistDesc);
      if ( iRate > 0 ) Or ( iPeakRate > 0 ) then
      begin
        if Not bPeak then
        begin
          // 피크타임 요금+금액이 있으면 합산
          if iPeakRate > 0 then
          begin
            sNewDistDesc := sNewDistDesc + ' + ' + sPeakDesc;
            iRate := iRate + iPeakRate;
          end;

          if Trim(PriceInfo) <> '' then
          begin
            FPlusDongCHK := 2;
            if lbl_PlusAreaNotice.Tag = 1 then lbl_PlusAreaNotice.Caption := lbl_PlusAreaNotice.Caption+ '+' + sNewDistDesc
                                          else lbl_PlusAreaNotice.Caption := '+ ' + sNewDistDesc;
          end else
          begin
            PriceInfo := sNewDistDesc;
          end;
          Result := Result + iRate;
        end else
        begin
          PriceInfo := sNewDistDesc;
          Result := iRate;
        end;
      end;

      // 경계요금조회
      dmCharge.pLoadPolygonArea(Proc_BRNOSearch);
      dStrLon := StrToFloatDef(SetWGS84(cxtStartYval.Text), 0);
      dStrLat := StrToFloatDef(SetWGS84(cxtStartXval.Text), 0);
      dEndLon := StrToFloatDef(SetWGS84(cxtEndYval.Text), 0);
      dEndLat := StrToFloatDef(SetWGS84(cxtEndXval.Text), 0);
      iStrPoly := 0;
      iEndPoly := 0;
      for i := 1 to 100 do
      begin
        if Not Assigned(FPOLYGONAREA_XY[i].Lon) then Break;

        if Not bStrPoly then
        begin
     			bStrPoly := PtInPolygon(dStrLon, dStrLat, FPOLYGONAREA_XY[i].Lon, FPOLYGONAREA_XY[i].Lat, FPOLYGONAREA_XY[i].Lon.count);
          if bStrPoly then iStrPoly := i;
        end;

        if Not bEndPoly then
        begin
          bEndPoly := PtInPolygon(dEndLon, dEndLat, FPOLYGONAREA_XY[i].Lon, FPOLYGONAREA_XY[i].Lat, FPOLYGONAREA_XY[i].Lon.count);
          if bEndPoly then iEndPoly := i;
        end;
      end;

      if (iStrPoly <> 0) Or (iEndPoly <> 0) then
      begin
        // 출/도 동일경계적용여부 처리
        if ( iStrPoly <> 0 ) And ( Not FPOLYGONAREA_XY[iStrPoly].SameYn ) And ( iStrPoly = iEndPoly ) then bStrPoly := False;
        if ( iEndPoly <> 0 ) And ( Not FPOLYGONAREA_XY[iEndPoly].SameYn ) And ( iStrPoly = iEndPoly ) then bEndPoly := False;
        // 출/도 모두 경계에 들어올때
        if ( bStrPoly ) And ( bEndPoly ) then
        begin
          AMsg := '출발지/도착지에 경계요금이 등록되어 있습니다.' + CRLF + CRLF +
           Format('  출발지경계요금제명 : %s', [FPOLYGONAREA_XY[iStrPoly].Name]) + CRLF +
           Format('  도착지경계요금제명 : %s', [FPOLYGONAREA_XY[iEndPoly].Name]) + CRLF +
           Format('  기본요금               : %s', [FormatFloat('#,', StrToFloat(IntToStr(Result)))]) + CRLF +
           Format('  출발지경계요금       : %s', [FormatFloat('#,', StrToFloat(IntToStr(FPOLYGONAREA_XY[iStrPoly].strValue)))]) + CRLF +
           Format('  도착지경계요금       : %s', [FormatFloat('#,', StrToFloat(IntToStr(FPOLYGONAREA_XY[iEndPoly].endValue)))]) + CRLF +
           Format('  총합계                  : %s', [FormatFloat('#,', StrToFloat(IntToStr(Result + FPOLYGONAREA_XY[iStrPoly].strValue + FPOLYGONAREA_XY[iEndPoly].endValue)))]) + CRLF + CRLF +
                  ' 경계요금을 적용하시겠습니까? ';

           if Application.MessageBox(PWideChar(AMsg), '[경계요금확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDOK then
           begin
             Result := Result + FPOLYGONAREA_XY[iStrPoly].strValue + FPOLYGONAREA_XY[iEndPoly].endValue;
           end;
        end else
        // 출발지만 들어올때
        if ( bStrPoly ) then
        begin
          AMsg := '출발지에 경계요금이 등록되어 있습니다.' + CRLF + CRLF +
           Format('  경계요금제명          : %s', [FPOLYGONAREA_XY[iStrPoly].Name]) + CRLF +
           Format('  기본요금               : %s', [FormatFloat('#,', StrToFloat(IntToStr(Result)))]) + CRLF +
           Format('  출발지경계요금       : %s'  , [FormatFloat('#,', StrToFloat(IntToStr(FPOLYGONAREA_XY[iStrPoly].strValue)))]) + CRLF +
           Format('  총합계                  : %s', [FormatFloat('#,', StrToFloat(IntToStr(Result + FPOLYGONAREA_XY[iStrPoly].strValue)))]) + CRLF + CRLF +
                  ' 경계요금을 적용하시겠습니까? ';

           if Application.MessageBox(PWideChar(AMsg), '[경계요금확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDOK then
           begin
             Result := Result + FPOLYGONAREA_XY[iStrPoly].strValue;
           end;
        end else
        // 도착지만 들어올때
        if ( bEndPoly ) then
        begin
          AMsg := '도착지에 경계요금이 등록되어 있습니다.' + CRLF + CRLF +
           Format('  경계요금제명          : %s', [FPOLYGONAREA_XY[iEndPoly].Name]) + CRLF +
           Format('  기본요금                : %s', [FormatFloat('#,', StrToFloat(IntToStr(Result)))]) + CRLF +
           Format('  도착지경계요금       : %s', [FormatFloat('#,', StrToFloat(IntToStr(FPOLYGONAREA_XY[iEndPoly].endValue)))]) + CRLF +
           Format('  총합계                   : %s', [FormatFloat('#,', StrToFloat(IntToStr(Result + FPOLYGONAREA_XY[iEndPoly].endValue)))]) + CRLF + CRLF +
                  ' 경계요금을 적용하시겠습니까? ';

           if Application.MessageBox(PWideChar(AMsg), '[경계요금확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDOK then
           begin
             Result := Result + FPOLYGONAREA_XY[iEndPoly].endValue;
           end;
        end;
      end;
    end;

    // 요금정보 표시
    if Trim(PriceInfo) <> '' then
      Lbl_Charge.Caption := PriceInfo + PricePassInfo
    else
      Lbl_Charge.Caption := '요금정보가 없습니다.';

    if FPlusDongCHK = 2 then pnl_Charge.height := 36
                        else pnl_Charge.height := 21;

    if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                        else lbl_PlusAreaNotice.Visible := False;

    SetPosLblDistance;
    pnl_charge.BringToFront;
    pnl_Charge.Visible := True;
    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Top := pnl_charge.Top + pnl_Charge.height;

    // 적요 내용 표시
    if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) then
    begin
      RemovePriceDesc;
      if PriceDesc <> '' then
      begin
        meoBigo.Text := PriceDesc + meoBigo.Text; // 수정모드 일때는 적요를 수정하지 않는다.
        SetPnlWorkMemoSize;
      end;
    end;
      // 2011.02.16 심야할증요금 추가
    result:=Get_Prem_Price(Result,sKeyNumber);

    if PREM_DESC <> '' then
    begin
      Lbl_Charge.Caption := Lbl_Charge.Caption + PREM_DESC; // 할증요금 있을시 추가(레코드카운트<>0)
    end;

    cxCurPathRate.Value := PassPrice;
  except
    on e: exception do
    begin
      Log('func_search_charge Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'func_search_charge Error :' + E.Message);
    end;
  end;
end;

function TFrm_JON01N.func_distance_charge(vTotalDis : Real; Var bPeak : Boolean; Var sDesc : String; sPeakPlus : String) : Integer;
Var sHdNo, sBRNO, sType, sGubun, sDong, sSta3, sEnd3 : String;
    idx : Integer;
begin
  try
    if vTotalDis = 0 then Exit;

    sHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    sBRNO := Proc_BRNOSearch; // 지사코드 정보를 읽는다.

    // 주소에 리정보가 있을경우 읍/면까지만 조회처리 위해
    sSta3 := lcsSta3;
    idx := GT_MAPOrigi.slStre_RI.IndexOf(sSta3);
    if idx > 0 then sSta3 := GT_MAPOrigi.slStre[idx];

    sEnd3 := lcsEnd3;
    idx := GT_MAPOrigi.slStre_RI.IndexOf(sEnd3);
    if idx > 0 then sEnd3 := GT_MAPOrigi.slStre[idx];

    dmCharge.proc_mysql_init;
    dmCharge.FDQuery1.Close;
    dmCharge.FDQuery1.SQL.Text := ''
          + 'SELECT GUBUN '
          + '     , IFNULL(CASE WHEN DD.DT_VALUE IS NULL THEN (CASE WHEN DN.DN_TYPE4 <> '' '' AND LEFT(DN.DN_TYPE4, 1) <> ''D'' THEN DN.DN_TYPE4 '
          + '                                               WHEN DN.DN_TYPE3 <> '' '' AND LEFT(DN.DN_TYPE3, 1) <> ''D'' THEN DN.DN_TYPE3 '
          + '                                               WHEN DN.DN_TYPE2 <> '' '' AND LEFT(DN.DN_TYPE2, 1) <> ''D'' THEN DN.DN_TYPE2 '
          + '                                               WHEN DN.DN_TYPE1 <> '' '' AND LEFT(DN.DN_TYPE1, 1) <> ''D'' THEN DN.DN_TYPE1 '
          + '                                               WHEN DN.DN_DEFAULT <> '' '' AND LEFT(DN.DN_DEFAULT, 1) <> ''D'' THEN DN.DN_DEFAULT '
          + '                                           END) ELSE DD.DT_VALUE END, 0) DT_VALUE '
          + '     , DN.DN_DEFAULT, DN.DN_TYPE1, DN.DN_TYPE2, DN.DN_TYPE3, DN.DN_TYPE4, DD.TYPE_NO '
          + '	    , (SELECT TYPE_NAME FROM CDMS_DIST_TYPE_M WHERE DD.HD_NO = HD_NO AND BR_NO = DD.BR_NO AND TYPE_NO = DD.TYPE_NO) TYPE_NM '
          + '     , PEAK1, DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '  FROM (SELECT GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '             , PEAK1, PEAK2, PEAK3, PEAK4 '
          + '          FROM (SELECT GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                     , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '                     , CASE WHEN '
          + '                       (SELECT DP_1_USE_YN '
          + '                          FROM CDMS_DIST_PEAK '
          + '                         WHERE BR_NO = ''' + sBRNO + ''' AND DP_USE_YN = ''y'' AND DP_1_ADD_YN = ''' + sPeakPlus + ''' AND CASE WHEN WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 5 THEN DP_SATURDAY_YN ELSE ''y'' END = ''y'' AND CASE WHEN ( WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 6 ) OR ( 1 = 6 ) THEN DP_HOLIDAY_YN ELSE ''y'' END = ''y'' '
          + '                           AND NOW() BETWEEN CONCAT(CONVERT(CASE WHEN DP_1_SNEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_1_STIME, '':00'') '
          + '                                         AND CONCAT(CONVERT(CASE WHEN DP_1_ENEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_1_ETIME, '':00'')) = ''y'' '
          + '                           AND A.DN_TYPE1 <> '' '' then DN_TYPE1 ELSE '''' END PEAK1 '
          + '                     , CASE WHEN '
          + '                       (SELECT DP_2_USE_YN '
          + '                          FROM CDMS_DIST_PEAK '
          + '                         WHERE BR_NO = ''' + sBRNO + ''' AND DP_USE_YN = ''y'' AND DP_2_ADD_YN = ''' + sPeakPlus + ''' AND CASE WHEN WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 5 THEN DP_SATURDAY_YN ELSE ''y'' END = ''y'' AND CASE WHEN ( WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 6 ) OR ( 1 = 6 ) THEN DP_HOLIDAY_YN ELSE ''y'' END = ''y'' '
          + '                           AND NOW() BETWEEN CONCAT(CONVERT(CASE WHEN DP_2_SNEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_2_STIME, '':00'') '
          + '                                         AND CONCAT(CONVERT(CASE WHEN DP_2_ENEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_2_ETIME, '':00'')) = ''y'' '
          + '                           AND A.DN_TYPE2 <> '' '' then DN_TYPE2 ELSE '''' END PEAK2 '
          + '                     , CASE WHEN '
          + '                       (SELECT DP_3_USE_YN '
          + '                          FROM CDMS_DIST_PEAK '
          + '                         WHERE BR_NO = ''' + sBRNO + ''' AND DP_USE_YN = ''y'' AND DP_3_ADD_YN = ''' + sPeakPlus + ''' AND CASE WHEN WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 5 THEN DP_SATURDAY_YN ELSE ''y'' END = ''y'' AND CASE WHEN ( WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 6 ) OR ( 1 = 6 ) THEN DP_HOLIDAY_YN ELSE ''y'' END = ''y'' '
          + '                           AND NOW() BETWEEN CONCAT(CONVERT(CASE WHEN DP_3_SNEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_3_STIME, '':00'') '
          + '                                         AND CONCAT(CONVERT(CASE WHEN DP_3_ENEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_3_ETIME, '':00'')) = ''y'' '
          + '                           AND A.DN_TYPE3 <> '' '' then DN_TYPE3 ELSE '''' END PEAK3 '
          + '                     , CASE WHEN '
          + '                       (SELECT DP_4_USE_YN '
          + '                          FROM CDMS_DIST_PEAK '
          + '                         WHERE BR_NO = ''' + sBRNO + ''' AND DP_USE_YN = ''y'' AND DP_4_ADD_YN = ''' + sPeakPlus + ''' AND CASE WHEN WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 5 THEN DP_SATURDAY_YN ELSE ''y'' END = ''y'' AND CASE WHEN ( WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 6 ) OR ( 1 = 6 ) THEN DP_HOLIDAY_YN ELSE ''y'' END = ''y'' '
          + '                           AND NOW() BETWEEN CONCAT(CONVERT(CASE WHEN DP_4_SNEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_4_STIME, '':00'') '
          + '                                         AND CONCAT(CONVERT(CASE WHEN DP_4_ENEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_4_ETIME, '':00'')) = ''y'' '
          + '                           AND A.DN_TYPE4 <> '' '' then DN_TYPE4 ELSE '''' END PEAK4 '
          + '         				 FROM (SELECT ''1'' GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '         	     		  	   FROM CDMS_DIST_NEW '
          + '         	     		      WHERE BR_NO = ''' + sBRNO + ''' '
          + '         	     				    AND DN_STCITY = ''' + lcsSta1 + ''' AND DN_STWARD = ''' + lcsSta2 + ''' AND DN_STDONG = ''' + sSta3 + ''' '
          + '         	     				    AND DN_EDCITY = ''' + lcsEnd1 + ''' AND DN_EDWARD = ''' + lcsEnd2 + ''' AND DN_EDDONG = ''' + sEnd3 + ''' '
          + '                           AND ( DN_DEFAULT <> '''' OR DN_TYPE1 <> '''' OR DN_TYPE2 <> '''' OR DN_TYPE3 <> '''' OR DN_TYPE4 <> '''' ) '
          + '         	     				 UNION ALL '
          + '         	     				 SELECT ''2'' GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '         	     				   FROM CDMS_DIST_NEW '
          + '         	     				  WHERE BR_NO = ''' + sBRNO + ''' '
          + '         	     				    AND DN_STCITY = ''' + lcsSta1 + ''' AND DN_STWARD = ''' + lcsSta2 + ''' AND DN_STDONG = ''' + sSta3 + ''' '
          + '         	     				    AND DN_EDCITY = ''' + lcsEnd1 + ''' AND DN_EDWARD = ''' + lcsEnd2 + ''' AND DN_EDDONG = '''' '
          + '                           AND ( DN_DEFAULT <> '''' OR DN_TYPE1 <> '''' OR DN_TYPE2 <> '''' OR DN_TYPE3 <> '''' OR DN_TYPE4 <> '''' ) '
          + '         	     				 UNION ALL '
          + '         	     				 SELECT ''3'' GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '         	     				   FROM CDMS_DIST_NEW '
          + '         	     				  WHERE BR_NO = ''' + sBRNO + ''' '
          + '         	     				    AND DN_STCITY = ''' + lcsSta1 + ''' AND DN_STWARD = ''' + lcsSta2 + ''' AND DN_STDONG = ''' + sSta3 + ''' '
          + '         	     				    AND DN_EDCITY = ''' + lcsEnd1 + ''' AND DN_EDWARD = '''' AND DN_EDDONG = '''' '
          + '                           AND ( DN_DEFAULT <> '''' OR DN_TYPE1 <> '''' OR DN_TYPE2 <> '''' OR DN_TYPE3 <> '''' OR DN_TYPE4 <> '''' ) '
          + '         	     				 UNION ALL '
          + '         	     				 SELECT ''4'' GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '         	     				   FROM CDMS_DIST_NEW '
          + '         	     				  WHERE BR_NO = ''' + sBRNO + ''' '
          + '         	     				    AND DN_STCITY = ''' + lcsSta1 + ''' AND DN_STWARD = ''' + lcsSta2 + ''' AND DN_STDONG = '''' '
          + '         	     					  AND DN_EDCITY = ''' + lcsEnd1 + ''' AND DN_EDWARD = ''' + lcsEnd2 + ''' AND DN_EDDONG = ''' + sEnd3 + ''' '
          + '                           AND ( DN_DEFAULT <> '''' OR DN_TYPE1 <> '''' OR DN_TYPE2 <> '''' OR DN_TYPE3 <> '''' OR DN_TYPE4 <> '''' ) '
          + '         	     				 UNION ALL '
          + '         	     				 SELECT ''5'' GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '         	     				   FROM CDMS_DIST_NEW '
          + '         	     				  WHERE BR_NO = ''' + sBRNO + ''' '
          + '         	     				    AND DN_STCITY = ''' + lcsSta1 + ''' AND DN_STWARD = ''' + lcsSta2 + ''' AND DN_STDONG = '''' '
          + '         	     				    AND DN_EDCITY = ''' + lcsEnd1 + ''' AND DN_EDWARD = ''' + lcsEnd2 + ''' AND DN_EDDONG = '''' '
          + '                           AND ( DN_DEFAULT <> '''' OR DN_TYPE1 <> '''' OR DN_TYPE2 <> '''' OR DN_TYPE3 <> '''' OR DN_TYPE4 <> '''' ) '
          + '         	     				 UNION ALL '
          + '         	     				 SELECT ''6'' GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '         	     				   FROM CDMS_DIST_NEW '
          + '         	     				  WHERE BR_NO = ''' + sBRNO + ''' '
          + '         	     				    AND DN_STCITY = ''' + lcsSta1 + ''' AND DN_STWARD = ''' + lcsSta2 + ''' AND DN_STDONG = '''' '
          + '         	     				    AND DN_EDCITY = ''' + lcsEnd1 + ''' AND DN_EDWARD = '''' AND DN_EDDONG = '''' '
          + '                           AND ( DN_DEFAULT <> '''' OR DN_TYPE1 <> '''' OR DN_TYPE2 <> '''' OR DN_TYPE3 <> '''' OR DN_TYPE4 <> '''' ) '
          + '         	     				 UNION ALL '
          + '         	     				 SELECT ''7'' GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '         	     				   FROM CDMS_DIST_NEW '
          + '         	     				  WHERE BR_NO = ''' + sBRNO + ''' '
          + '         	     				    AND DN_STCITY = ''' + lcsSta1 + ''' AND DN_STWARD = '''' AND DN_STDONG = '''' '
          + '         	     				    AND DN_EDCITY = ''' + lcsEnd1 + ''' AND DN_EDWARD = ''' + lcsEnd2 + ''' AND DN_EDDONG = ''' + sEnd3 + ''' '
          + '                           AND ( DN_DEFAULT <> '''' OR DN_TYPE1 <> '''' OR DN_TYPE2 <> '''' OR DN_TYPE3 <> '''' OR DN_TYPE4 <> '''' ) '
          + '         	     				 UNION ALL '
          + '         	     				 SELECT ''8'' GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '         	     				   FROM CDMS_DIST_NEW '
          + '         	     				  WHERE BR_NO = ''' + sBRNO + ''' '
          + '         	     				    AND DN_STCITY = ''' + lcsSta1 + ''' AND DN_STWARD = '''' AND DN_STDONG = '''' '
          + '         	     				    AND DN_EDCITY = ''' + lcsEnd1 + ''' AND DN_EDWARD = ''' + lcsEnd2 + ''' AND DN_EDDONG = '''' '
          + '                           AND ( DN_DEFAULT <> '''' OR DN_TYPE1 <> '''' OR DN_TYPE2 <> '''' OR DN_TYPE3 <> '''' OR DN_TYPE4 <> '''' ) '
          + '         	     				 UNION ALL '
          + '         	     				 SELECT ''9'' GUBUN, BR_NO, DN_DEFAULT, DN_TYPE1, DN_TYPE2, DN_TYPE3, DN_TYPE4 '
          + '                             , DN_STCITY, DN_STWARD, DN_STDONG, DN_EDCITY, DN_EDWARD, DN_EDDONG '
          + '         	     				   FROM CDMS_DIST_NEW '
          + '         	     				  WHERE BR_NO = ''' + sBRNO + ''' '
          + '         	     				    AND DN_STCITY = ''' + lcsSta1 + ''' AND DN_STWARD = '''' AND DN_STDONG = '''' '
          + '         	     				    AND DN_EDCITY = ''' + lcsEnd1 + ''' AND DN_EDWARD = '''' AND DN_EDDONG = '''' '
          + '                           AND ( DN_DEFAULT <> '''' OR DN_TYPE1 <> '''' OR DN_TYPE2 <> '''' OR DN_TYPE3 <> '''' OR DN_TYPE4 <> '''' )) A '
          + '               ) A '
          + '         WHERE ((DN_TYPE1 = PEAK1) AND (PEAK1 <> '''')) '
          + '            OR ((DN_TYPE2 = PEAK2) AND (PEAK2 <> '''')) '
          + '            OR ((DN_TYPE3 = PEAK3) AND (PEAK3 <> '''')) '
          + '            OR ((DN_TYPE4 = PEAK4) AND (PEAK4 <> '''')) '
          + '            OR (DN_DEFAULT <> '''') OR (DN_TYPE1 <> '''') LIMIT 1 '
          + '       ) DN '
          + '       LEFT OUTER JOIN '
          + '       CDMS_DIST_TYPE_D DD '
          + '    ON (( DN.BR_NO = DD.BR_NO) OR ( DD.HD_NO = ''' + sHdNo + ''' AND DD.BR_NO = ''00000'')) '
          + '   AND (CASE WHEN '
          + '        (SELECT DP_4_USE_YN '
          + '           FROM CDMS_DIST_PEAK '
          + '          WHERE BR_NO = DN.BR_NO AND DP_USE_YN = ''y'' AND DP_4_ADD_YN = ''' + sPeakPlus + ''' '
          + '             AND CASE WHEN WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 5 THEN DP_SATURDAY_YN ELSE ''y'' END = ''y'' AND CASE WHEN ( WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 6 ) OR ( 1 = 6 ) THEN DP_HOLIDAY_YN ELSE ''y'' END = ''y'' '
          + '            AND NOW() BETWEEN CONCAT(CONVERT(CASE WHEN DP_4_SNEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_4_STIME, '':00'') '
          + '                          AND CONCAT(CONVERT(CASE WHEN DP_4_ENEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_4_ETIME, '':00'') '
          + '        ) = ''y'' AND DN.DN_TYPE4 <> '' '' then DN_TYPE4 '
          + '             WHEN '
          + '        (SELECT DP_3_USE_YN '
          + '           FROM CDMS_DIST_PEAK '
          + '          WHERE BR_NO = DN.BR_NO AND DP_USE_YN = ''y'' AND DP_3_ADD_YN = ''' + sPeakPlus + ''' '
          + '            AND CASE WHEN WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 5 THEN DP_SATURDAY_YN ELSE ''y'' END = ''y'' AND CASE WHEN ( WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 6 ) OR ( 1 = 6 ) THEN DP_HOLIDAY_YN ELSE ''y'' END = ''y'' '
          + '            AND NOW() BETWEEN CONCAT(CONVERT(CASE WHEN DP_3_SNEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_3_STIME, '':00'') '
          + '                          AND CONCAT(CONVERT(CASE WHEN DP_3_ENEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_3_ETIME, '':00'') '
          + '        ) = ''y'' AND DN.DN_TYPE3 <> '' '' then DN_TYPE3 '
          + '             WHEN '
          + '        (SELECT DP_2_USE_YN '
          + '           FROM CDMS_DIST_PEAK '
          + '          WHERE BR_NO = DN.BR_NO AND DP_USE_YN = ''y'' AND DP_2_ADD_YN = ''' + sPeakPlus + ''' '
          + '            AND CASE WHEN WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 5 THEN DP_SATURDAY_YN ELSE ''y'' END = ''y'' AND CASE WHEN ( WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 6 ) OR ( 1 = 6 ) THEN DP_HOLIDAY_YN ELSE ''y'' END = ''y'' '
          + '            AND NOW() BETWEEN CONCAT(CONVERT(CASE WHEN DP_2_SNEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_2_STIME, '':00'') '
          + '                          AND CONCAT(CONVERT(CASE WHEN DP_2_ENEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_2_ETIME, '':00'') '
          + '        ) = ''y'' AND DN.DN_TYPE2 <> '' '' then DN_TYPE2 '
          + '             WHEN '
          + '        (SELECT DP_1_USE_YN '
          + '           FROM CDMS_DIST_PEAK '
          + '          WHERE BR_NO = DN.BR_NO AND DP_USE_YN = ''y'' AND DP_1_ADD_YN = ''' + sPeakPlus + ''' '
          + '            AND CASE WHEN WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 5 THEN DP_SATURDAY_YN ELSE ''y'' END = ''y'' AND CASE WHEN ( WEEKDAY(SUBTIME(NOW(), ''9:00:00'')) = 6 ) OR ( 1 = 6 ) THEN DP_HOLIDAY_YN ELSE ''y'' END = ''y'' '
          + '            AND NOW() BETWEEN CONCAT(CONVERT(CASE WHEN DP_1_SNEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_1_STIME, '':00'') '
          + '                          AND CONCAT(CONVERT(CASE WHEN DP_1_ENEXTDAY = ''y'' THEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), ''%Y-%m-%d'') ELSE DATE_FORMAT(NOW(), ''%Y-%m-%d'') END USING UTF8), '' '', DP_1_ETIME, '':00'') '
          + '        ) = ''y'' AND DN.DN_TYPE1 <> '' '' then DN_TYPE1 '
          + '            WHEN DN.DN_DEFAULT = '' '' THEN DN_TYPE1 ELSE DN_DEFAULT END) = DD.TYPE_NO '
          + '   AND ' + FloatToStr(vTotalDis) + ' BETWEEN DT_STKM AND DT_EDKM '
          + '       LEFT OUTER JOIN '
          + '       CDMS_DIST_PEAK DP '
          + '   ON (DN.BR_NO = DP.BR_NO) ';

    dmCharge.FDQuery1.Open;
    if Not dmCharge.FDQuery1.IsEmpty then
    begin
      if dmCharge.FDQuery1.Fields[7].AsString = dmCharge.FDQuery1.Fields[2].AsString then
      begin
        sGubun := '기본';
        bPeak := False;
      end else
      if dmCharge.FDQuery1.Fields[7].AsString = dmCharge.FDQuery1.Fields[3].AsString then
      begin
        sGubun := '1-타입';
        if (dmCharge.FDQuery1.Fields[7].AsString = dmCharge.FDQuery1.Fields[9].AsString) then bPeak := True
                                                                                         else bPeak := False;
      end else
      if dmCharge.FDQuery1.Fields[7].AsString = dmCharge.FDQuery1.Fields[4].AsString then
      begin
        sGubun := '2-타입';
        bPeak := True;
      end else
      if dmCharge.FDQuery1.Fields[7].AsString = dmCharge.FDQuery1.Fields[5].AsString then
      begin
        sGubun := '3-타입';
        bPeak := True;
      end else
      if dmCharge.FDQuery1.Fields[7].AsString = dmCharge.FDQuery1.Fields[6].AsString then
      begin
        sGubun := '4-타입';
        bPeak := True;
      end;

      // 피크타임 요금+
      if ( sPeakPlus = 'y' ) then
      begin
        if ( dmCharge.FDQuery1.Fields[1].AsInteger > 0 ) And bPeak then
        begin
          Result := dmCharge.FDQuery1.Fields[1].AsInteger;
          sDesc := Format('%s [%s]', [sGubun, FormatFloat('#,', dmCharge.FDQuery1.Fields[1].AsFloat)]);
        end;
      end else
      // 거리요금
      begin
        Result := dmCharge.FDQuery1.Fields[1].AsInteger;

        // 10.출발시, 11.출발시군구, 12.출발동, 13.도착시, 14.도착시군구, 15.도착동
        if (dmCharge.FDQuery1.Fields[11].AsString =  '') And (dmCharge.FDQuery1.Fields[12].AsString  = '') then sType := '시->' else
        if (dmCharge.FDQuery1.Fields[11].AsString <> '') And (dmCharge.FDQuery1.Fields[12].AsString  = '') then sType := '구->' else
        if (dmCharge.FDQuery1.Fields[11].AsString <> '') And (dmCharge.FDQuery1.Fields[12].AsString <> '') then sType := '동->';

        if (dmCharge.FDQuery1.Fields[14].AsString =  '') And (dmCharge.FDQuery1.Fields[15].AsString  = '') then sType := sType + '시' else
        if (dmCharge.FDQuery1.Fields[14].AsString <> '') And (dmCharge.FDQuery1.Fields[15].AsString  = '') then sType := sType + '구' else
        if (dmCharge.FDQuery1.Fields[14].AsString <> '') And (dmCharge.FDQuery1.Fields[15].AsString <> '') then sType := sType + '동';

        sDesc := Format('신)거리-%s[%s, %s, %s]', [dmCharge.FDQuery1.Fields[8].AsString, sGubun, sType, FormatFloat('#,', dmCharge.FDQuery1.Fields[1].AsFloat)]);
      end;
    end;
  except
    on e: exception do
    begin
      Log('func_distance_charge Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'func_distance_charge Error :' + E.Message);
    end;
  end;
end;

function TFrm_JON01N.func_search_A7charge(ASTPoi, AEDPoi : string): Integer;
type
  TPREM_TIMES = record
		ST_TIME:string;
    ED_TIME:string;
    AMT: integer;
    mYn: Boolean;
  end;
var
	sTmp, sSTPOI, sEDPOI, sA7Charge : string;
	i, iTmp, iTmpL, iPos : Integer;
  sType, sType2, sFirstCD, sPassCode, sPassViewCode, sPassGubun, sKeyNumber: string;
  PassPrice, iPassValue: Integer;
  PriceInfo, PricePassInfo, PriceDesc: string;
  PREM_DESC: string;  // pnl_charge.caption 에 요금정보를 추가하기 위한 문자열
  bOpen : Boolean;

  oOderWorker, oWeather, iType, oType : String;
  iSmartRate : Integer;
  SSLat, SSLon, SELat, SELon  : string;
  chnSDong, chnEDong : string;

begin
	SetDebugeWrite('JON01B.func_search_A7charge');
  try
		Result := 0;
    PREM_DESC:='';
    if (CHARGE_GUBUN = 'P') and (GS_EXEC_GUBUN = 0) then
		begin
      Exit;
    end;

  	if (gsMyMainTelUse = 'TRUE') and (not GSMyMainTelOrderChargeCheck) then
    begin
      Lbl_Charge.Caption := '대표번호 기본요금 강제 적용';

      if FPlusDongCHK = 2 then pnl_Charge.height := 36
                          else pnl_Charge.height := 21;

      if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                          else lbl_PlusAreaNotice.Visible := False;

      SetPosLblDistance;
      pnl_Charge.Visible := True;
      if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Top := pnl_charge.Top + pnl_Charge.height;
      Exit;
    end;

		PriceInfo := ''; // 요금정보
		PriceDesc := ''; // 적요표시
		PassPrice := 0; // 경유요금

		Lbl_Charge.Caption := '';
	//  Lbl_Distance.Caption := '';

		// 선택된 지사정보에서 대표번호를 추출 한다.
		sKeyNumber := Proc_MainKeyNumberSearch;

		// 20120604 법인 요금 설정 관련 부분 추가  LYB
    if (CHARGE_GUBUN = 'P') then
    begin
      ///////////////////////////////////////////////////////////////
      // (#1) 법인 별 요금계산
  		///////////////////////////////////////////////////////////////
      dmCharge.proc_mysql_init;
      dmCharge.FDQuery1.Close;
  		dmCharge.FDQuery1.SQL.Text := 'SELECT * FROM CDMS_BGROUP_CHARGE_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' AND CT_CB_CODE  = ''' + cxtCuBubin.Hint + ''' ';
      try
        dmCharge.FDQuery1.open;
      except on E: Exception do
				begin
          GMessagebox('로컬요금설정이 잘못되어있어 요금이 계산되지 않았습니다.' + CRLF +
          '[요금파일 확인 바랍니다.]', CDMSI);
					Exit;
        end;
      end;

      // 법인요금에 등록된 요금제가 없으면 대표번호요금 사용
			if not dmCharge.FDQuery1.IsEmpty then
      begin
        sType         := dmCharge.FDQuery1.Fields[5].AsString;  // 경유요금 종류
        sFirstCD      := dmCharge.FDQuery1.Fields[8].AsString;  // 우선요금제 코드
				iPassValue    := StrToIntDef(dmCharge.FDQuery1.Fields[7].AsString, 0);
				sPassGubun    := dmCharge.FDQuery1.Fields[9].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
        sPassCode     := dmCharge.FDQuery1.Fields[10].AsString;  // 경유요금 코드
				sPassViewCode := dmCharge.FDQuery1.Fields[11].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
      end;
    end else
		if (CHARGE_GUBUN = 'S') or (CHARGE_GUBUN = 'O') then
		begin
			try
				if (ASTPoi = '') or (AEDPoi = '')  then exit;
				//후불)스틱)적요)현대오일뱅크(3공단주유소)
				sTmp := ASTPoi;
				iPos := Pos('(', ASTPoi);   //'(' 위치

				if iPos > 0 then sTmp := Copy(ASTPoi, 1, iPos-1); //후불)스틱)적요)현대오일뱅크
				iTmpL := LastDelimiter(')', sTmp);   //'요)현' 위치    마지막 ')'위치
				ASTPoi := Copy(sTmp, iTmpL + 1, 2);
				AEDPoi := Copy(AEDPoi, 1, 2);
//				iTmp := LastDelimiter(')', ASTPoi);
//				ASTPoi := Copy(ASTPoi, iTmp + 1, 2);
//				AEDPoi := Copy(AEDPoi, 1, 2);
//				iTmp := LastDelimiter(')', AEDPoi);
//				AEDPoi := Copy(AEDPoi, iTmp + 1, 2);

				dmCharge.proc_mysql_init;
				dmCharge.FDQuery1.Close;
				sTmp := 'SELECT A7_STPOI, A7_EDPOI, A7_CHARGE FROM CDMS_A7_CHARGE '
							+ ' WHERE (A7_STPOI Like ''' + ASTPoi + '%'') '
							+ '   AND (A7_EDPOI Like ''' + AEDPoi + '%'') '
							+ 'ORDER BY A7_STPOI, A7_EDPOI, A7_CHARGE ';

				dmCharge.FDQuery1.SQL.Text := sTmp;
				i := 0;
				dmCharge.FDQuery1.open;

				if not dmCharge.FDQuery1.IsEmpty then
				begin

					sSTPOI    := dmCharge.FDQuery1.Fields[0].AsString;  // 출발지
					sEDPOI    := dmCharge.FDQuery1.Fields[1].AsString;  // 경유요금 종류
					sA7Charge := dmCharge.FDQuery1.Fields[2].AsString;  // 우선요금제 코드
					iTmp := Pos('K', sA7Charge);
					sTmp := Copy(sA7Charge, 1, iTmp-1);
					Result := StrToIntDef(sTmp, 0) * 1000;
				end;
{
				if Not Assigned(Frm_JON63)  then Frm_JON63 := TFrm_JON63.Create(Nil);
				Frm_JON63.Hide;
				Frm_JON63.proc_Init;
				Frm_JON63.Tag := Self.Tag;
				Frm_JON63.bChkTime := True;
				Frm_JON63.Show;
				Frm_JON63.edt_StPoi.Text := ASTPoi;
				Frm_JON63.edt_EdPoi.Text := AEDPoi;
//				Frm_JON63.edt_StPoi.SetFocus;
				Frm_JON63.btnSearch.Click;
}
			except on E: Exception do
				begin
					GMessagebox('요금DB설정이 잘못되어있어 요금이 계산되지 않았습니다.'+ CRLF +
          '[환경설정] - [요금DB연결] 부분 설정을 다시 하세요', CDMSI);
          Exit;
        end;
			end;
		end;

		if sType = '' then
		begin
			// P : DB 로컬연결        GS_EXEC_GUBUN ==> 1:소켓메인 동작됨, 0:소켓메인 사용할 수 없음.[구버전, 신버전 동시사용가능하도록 위함]
			// 현재 버전, 이미 실행된 신규버전이 있을경우 파라독스 연결 처리 (2008.08.01 KJH)
			if (CHARGE_GUBUN = 'P') then
			begin
				///////////////////////////////////////////////////////////////
				// (#1) 대표번호 별 요금계산
				///////////////////////////////////////////////////////////////
        dmCharge.proc_mysql_init;
        dmCharge.FDQuery1.Close;
				dmCharge.FDQuery1.Close;
				dmCharge.FDQuery1.SQL.Text := 'SELECT * FROM CDMS_CHARGE_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' ';
				try
					dmCharge.FDQuery1.open;
				except on E: Exception do
					begin
            GMessagebox('로컬요금설정이 잘못되어있어 요금이 계산되지 않았습니다.' + CRLF +
            '[요금파일 확인 바랍니다.]', CDMSI);
            Exit;
          end;
        end;

				// 대표요금에 등록된 요금제가 없으면 기본표준요금 사용
				if not dmCharge.FDQuery1.IsEmpty then
				begin
					sType         := dmCharge.FDQuery1.Fields[4].AsString;  // 경유요금 종류
					sType2        := dmCharge.FDQuery1.Fields[15].AsString;  // 경유요금 종류
					sFirstCD      := dmCharge.FDQuery1.Fields[7].AsString;  // 우선요금제 코드
					iPassValue    := StrToIntDef(dmCharge.FDQuery1.Fields[6].AsString, 0);
					sPassGubun    := dmCharge.FDQuery1.Fields[8].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
					sPassCode     := dmCharge.FDQuery1.Fields[9].AsString;  // 경유요금 코드
					sPassViewCode := dmCharge.FDQuery1.Fields[10].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
				end;
			end;
    end;

		if (gsMyMainTelUse = 'TRUE') and (GSMyMainTelOrderChargeCheck) and (Result = 0)then
  	begin
			Lbl_Charge.Caption := Format('대표번호 기본요금(%s) 강제 적용', [StrToMoney(sNowRate)]);

			if FPlusDongCHK = 2 then pnl_Charge.height := 36
                          else pnl_Charge.height := 21;

      if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                          else lbl_PlusAreaNotice.Visible := False;

      SetPosLblDistance;
			pnl_Charge.Visible := True;
      if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Top := pnl_charge.Top + pnl_Charge.height;
			result := strtointDef(sNowRate,0);
  		Exit;
  	end;
    // 요금정보 표시
    if Trim(PriceInfo) <> '' then
      Lbl_Charge.Caption := PriceInfo + PricePassInfo
    else
      Lbl_Charge.Caption := '요금정보가 없습니다.';

    if FPlusDongCHK = 2 then pnl_Charge.height := 36
                        else pnl_Charge.height := 21;

    if FPlusDongCHK = 2 then lbl_PlusAreaNotice.Visible := True
                        else lbl_PlusAreaNotice.Visible := False;

    SetPosLblDistance;
    pnl_Charge.Visible := True;
    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Top := pnl_charge.Top + pnl_Charge.height;

    // 적요 내용 표시
		if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) then
    begin
      RemovePriceDesc;
      if PriceDesc <> '' then
      begin
        meoBigo.Text := PriceDesc + meoBigo.Text; // 수정모드 일때는 적요를 수정하지 않는다.
        SetPnlWorkMemoSize;
			end;
    end;

    if PREM_DESC <> '' then
    begin
      Lbl_Charge.Caption := Lbl_Charge.Caption + PREM_DESC; // 할증요금 있을시 추가(레코드카운트<>0)
    end;

    cxCurPathRate.Value := PassPrice;
  except
    on e: exception do
    begin
      Log('func_search_charge Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'func_search_charge Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.RemovePriceDesc;
var
  OrgStr, AddStr: string;
  PosS, PosE: Integer;
begin
  SetDebugeWrite('JON01N.RemovePriceDesc');
  try
    OrgStr := meoBigo.Lines.Text;

    PosS := Pos('＜', OrgStr);
    PosE := Pos('＞', OrgStr);

    if (PosS = 0) or (PosE = 0) or (PosE < PosS) then
    begin
      Exit;
    end;

    AddStr := Copy(OrgStr, 1, PosS-1);
    AddStr := AddStr + Copy(OrgStr, PosE+1, Length(OrgStr));

    meoBigo.Lines.Text := AddStr;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.RQAListViewCellDblClick(Sender: TcxCustomGridTableView; ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
var
  iRcIdx: Integer;
begin
  SetDebugeWrite('JON01N.RQAListViewCellDblClick');
  try
    iRcIdx := RQAListView.DataController.FocusedRecordIndex;
    // 현재 선택된 레코드 index 읽기.

    // 답변요금 그리드에서 그리드 선택시에 요금 정보를 입력 컨트롤에 Display~
    if iRcIdx > -1 then
    begin
      if BtnRaLock.Hint <> 'F4)잠금' then
      begin
        curRate.Text := RQAListView.DataController.GetValue(iRcIdx, 1);
        pSet606QRateSave( Self.Tag, iRcIdx, Frm_Main.Frm_JON01N[Self.Tag]);

        Lbl_Charge.Caption := Format('%s님의 답변요금 선택, 설명: %s', [RQAListView.DataController.GetValue(iRcIdx, 2),
                                                                        RQAListView.DataController.GetValue(iRcIdx, 3)]);
        Lbl_Distance.Caption := '';
        pnl_Charge.height := 21;
        pnl_charge.BringToFront;
        pnl_Charge.Visible := True;

        btnRQALExit.Click;
      end;
    end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.RQAListViewColumn10GetProperties(Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  var AProperties: TcxCustomEditProperties);
begin
  if (RQAListView.DataController.GetValue(ARecord.RecordIndex, 2) <> 'System(자동답변)') then
    AProperties := Frm_Main.gLblProperties;
end;

procedure TFrm_JON01N.RQAListViewColumn10PropertiesButtonClick(Sender: TObject; AButtonIndex: Integer);
begin
  try
    pSet607QRateDel( Self.Tag, AButtonIndex, Frm_Main.Frm_JON01N[Self.Tag]);
    try
      RQAListView.BeginUpdate;
  		RQAListView.DataController.DeleteRecord(AButtonIndex);
    finally
      RQAListView.EndUpdate;
    end;
  except

  end;
end;

procedure TFrm_JON01N.RQAListViewEditKeyPress(Sender: TcxCustomGridTableView; AItem: TcxCustomGridTableItem; AEdit: TcxCustomEdit; var Key: Char);
var
  iRcIdx: integer;
begin
  SetDebugeWrite('JON01N.cxCustViewEditKeyPress');
  if Ord(Key) = VK_RETURN then
  begin
    // 현재 선택된 레코드 index 읽기.
    iRcIdx := cxCustView.DataController.FocusedRecordIndex;
    // 답변요금 그리드에서 그리드 선택시에 요금 정보를 입력 컨트롤에 Display~
    if iRcIdx > -1 then
    begin
      if BtnRaLock.Hint <> 'F4)잠금' then
      begin
        curRate.Text := RQAListView.DataController.Values[iRcIdx, 1];
        btnRQALExit.Click;
      end;
    end;
  end;
end;

procedure TFrm_JON01N.SetPosLblDistance;
begin
  Lbl_Distance.Left := Pnl_Charge.Width  - ( Lbl_Distance.Width  + 7);
  Lbl_Distance.Top  := Pnl_Charge.Height - ( Lbl_Distance.Height + 6);
end;

function TFrm_JON01N.func_search_charge_high: Integer;
var
  AreaType: Integer;
  sType, sFirstCD, sPassCode, sPassViewCode, sPassGubun, sOrgDis : string;
  PassPrice, TotalDis, PassDis, ipasscnt, iPassValue, i: Integer;
  fOrgDis: Double;
  PriceInfo, PricePassInfo, PriceDesc: string;
begin
  SetDebugeWrite('JON01N.func_search_charge_high');
  try
    Result := 0;

    PriceInfo := ''; // 요금정보
    PriceDesc := ''; // 적요표시
    PassPrice := 0; // 경유요금

    // 총거리(경유있을 경우 경유거리 포함)
    TotalDis := ceil(fCruKm);

    // 선택된 지사정보에서 대표번호를 추출 한다.
    //sKeyNumber := Proc_MainKeyNumberSearch;

    if (lcsSta1 = '') or (lcsEnd1 = '') then
    begin
      Exit;
    end;

    // 경유횟수 찾기..
    if GT_PASS_INFO[Self.Tag][0].AREA1 = '' then
      ipasscnt := 0
    else
    begin
      i := 0;
      while i <= 4 do
      begin
        if GT_PASS_INFO[Self.Tag][i].AREA1 = '' then
          break;
        inc(i);
      end;
      iPassCnt := i;
    end;

    // P : DB 로컬연결        GS_EXEC_GUBUN ==> 1:소켓메인 동작됨, 0:소켓메인 사용할 수 없음.[구버전, 신버전 동시사용가능하도록 위함]
    // 현재 버전, 이미 실행된 신규버전이 있을경우 파라독스 연결 처리 (2008.08.01 KJH)
    //if (CHARGE_GUBUN = 'P') then
    //begin
      ///////////////////////////////////////////////////////////////
      // (#1) 대표번호 별 요금계산
      ///////////////////////////////////////////////////////////////
    {  dmCharge.Qry_Charge.Close;
      dmCharge.Qry_Charge.SQL.Text := 'SELECT * FROM CDMS_CHARGE_TYPE WHERE CT_KEY_NUM = ''' + sKeyNumber + ''' ';
      try
        dmCharge.Qry_Charge.open;
      except on E: Exception do
        begin
          GMessagebox('로컬요금설정이 잘못되어있어 요금이 계산되지 않았습니다.'#13#10 +
          '[요금파일 확인 바랍니다.]', CDMSE);
          Exit;
        end;
      end;

      // 대표요금에 등록된 요금제가 없으면 기본표준요금 사용
      if not dmCharge.Qry_Charge.IsEmpty then
      begin
        sType         := dmCharge.Qry_Charge.Fields[4].AsString;  // 경유요금 종류
        sFirstCD      := dmCharge.Qry_Charge.Fields[7].AsString;  // 우선요금제 코드
        iPassValue    := StrToIntDef(dmCharge.Qry_Charge.Fields[6].AsString, 0);
        sPassGubun    := dmCharge.Qry_Charge.Fields[8].AsString;  // 경유요금종류 [0: 건당요금, 1: 거리요금]
        sPassCode     := dmCharge.Qry_Charge.Fields[9].AsString;  // 경유요금 코드
        sPassViewCode := dmCharge.Qry_Charge.Fields[10].AsString; // 경유구분 [0: 요금에 경유요금미포함, 1: 요금에 경유요금포함]
      end; }
    //end

    if sType = '' then
    begin
      sType         := 'CC005';  // 'CC001' : 표준,   'CC002' : 고가,   'CC003' : 저가,   'CC005' : 플러스콜요금
      sFirstCD      := '';
      iPassValue    := 0;
      sPassGubun    := '0';
      sPassCode     := '';
      sPassViewCode := '';
    end;

    ///////////////////////////////////////////////////////////////
    // (#2) 요금제에 요금이 없으면 표준요금 참조
    ///////////////////////////////////////////////////////////////
    //if (Result = 0) and (GT_DEFAULT_ST = 0) then
    //begin
      { 플러스요금표 참조 }
  		Result := dmCharge.func_charge_plus(lcsSta1, lcsSta2, '', lcsEnd1, lcsEnd2, '', 0, 'CC005', '', 0, 0, PriceInfo, AreaType);
    //end;

    ///////////////////////////////////////////////////////////////
    // 경유요금 계산
    ///////////////////////////////////////////////////////////////
    if (Result > 0) and (ipasscnt > 0) then
    begin
      if (sPassGubun = '0') then
      begin
        PassPrice := dmCharge.func_Pass_charge('0', '', iPassValue, iPassCnt, 0, PricePassInfo);
        Result := Result + PassPrice;
      end
      else if (sPassGubun = '1') then
      begin
        // 출도착지 거리
        sOrgDis := FloatToStrF(GetRoadLength(STANDFUNCPATHFILE, cxtStartXval.Text, cxtStartYval.Text,
                                             cxtEndXval.Text, cxtEndYval.Text)
                               * StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1);
        fOrgDis := StrToFloatDef(sOrgDis, 0);
        PassDis := TotalDis - Ceil(fOrgDis);

        PassPrice := dmCharge.func_Pass_charge(sPassCode, sPassViewCode, iPassValue, iPassCnt, PassDis, PricePassInfo);

        if (sPassViewCode = '0') and (PassPrice > 0) then
          // 거리요금, 요금 미포함인경우 경유요금 미포함
          //PriceDesc := '＜경유요금:' + IntToStr(PassPrice) + '＞'
        else
          Result := Result + PassPrice;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 선택 오더에 대해 Lock 을 설정한다.
procedure TFrm_JON01N.Proc_AcceptLock(ss_Gubun: string);
var
  ls_TxLoad: string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  ErrCode: integer;
begin
  SetDebugeWrite('JON01N.Proc_AcceptLock');
  if (ss_Gubun = '') then
    Exit;

  try
    ls_TxLoad := GTx_UnitXmlLoad('C009.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString',   VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString',   'LOCK000' + ss_Gubun);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfSlipString',    En_Coding(cxtJoinNum.Text));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfStatusString',  En_Coding(cxtJoinNum.Hint));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'InSabunString',     En_Coding(GT_USERIF.ID));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'GubunCodeString',   ss_Gubun);

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;

    btnCmdExit.Tag := 0;
    // 수정모드에서 프로그램 닫을때, Lock 해제설정 초기화 한다.

  except
    on e: exception do
    begin
      ls_TxLoad := 'JON01N[Proc_AcceptLock]:' + e.Message;

//      btnBubinReq.Enabled := True;
      Screen.Cursor := crDefault;
    end;
  end;
end;

function TFrm_JON01N.fJON01_SmartCharge(AOderWorker, AWeather, ASta1, ASta2,
  ASta3, ASPOI, ASX, ASY, AEnd1, AEnd2, AEnd3, AEPOI, AEX, AEY, AType: string; Var OType : String) : Integer;
var
  ls_TxLoad: string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  I, ErrCode, iRCnt : Integer;
  ls_MSG_Err : string;
  ls_Rcrd: TStringList;
  sSmart, sRank1, sRank2 : string;
begin
  SetDebugeWrite('JON01N.fJON01_SmartCharge');
  Result := 0;
  //////////////////////////////////////////////////////////////////////////////////
  //  접수 전문
  //////////////////////////////////////////////////////////////////////////////////

  cxLblSmartRate.Caption := '';
  cxLblRate1.Caption := '';
  cxLblRate2.Caption := '';
  Try
    sRank1 := ''; sRank2 := ''; sSmart := '';

    if ( Trim(ASX) = '' ) Or ( Trim(ASY) = '' ) Or
       ( Trim(AEX) = '' ) Or ( Trim(AEY) = '' ) then Exit;

    ls_TxLoad := GTx_UnitXmlLoad('JON03060N2.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'JON03060N2');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strNowOrderWorker', AOderWorker);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strNowWeather', AWeather);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strType', AType);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strDeparture', En_Coding(ASta1 + '│' + ASta2 + '│' + ASta3 + '│' + ASPOI + '│' + ASX + '│' + ASY));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strArrive'   , En_Coding(AEnd1 + '│' + AEnd2 + '│' + AEnd3 + '│' + AEPOI + '│' + AEX + '│' + AEY));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'strtestDateTime', GB_JON_SMARTTESTDATE);

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          xdom := ComsDomDocument.Create;
          try
            xdom.loadXML(ls_rxxml);

            ls_MSG_Err := GetXmlErrorCode(ls_rxxml);
            if ('0000' <> ls_MSG_Err) then Exit;

            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Now');
            sSmart := lst_Result.item[0].attributes.getNamedItem('smartPrice').Text;
            Result := StrToIntDef(sSmart, 0);

            sSmart := FormatFloat('#,##0', StrToFloatDef(sSmart, 0.0)) + '원' ;
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Past');
            iRCnt := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('rowCount').Text, 0) ;
            OType := lst_Result.item[0].attributes.getNamedItem('searchType').Text;

            for i := 0 to iRCnt -1 do
            begin
              lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Past/Row');

              if lst_Result.item[i].attributes.getNamedItem('rank').Text = '1' then
              begin
                if sRank1 = '' then
                  sRank1 := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[i].attributes.getNamedItem('price').Text, 0.0)) + '원'
                else if sRank2 = '' then
                  sRank2 := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[i].attributes.getNamedItem('price').Text, 0.0)) + '원';
              end else
              if lst_Result.item[i].attributes.getNamedItem('rank').Text = '2' then
              begin
                sRank2 := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[i].attributes.getNamedItem('price').Text, 0.0)) + '원';
              end;
            end;
            cxLblSmartRate.Caption := ' 스마트:' + sSmart;
            cxLblRate1.Caption := '①' + sRank1;
            cxLblRate2.Caption := '②' + sRank2;
          finally
            xdom := nil;
          end;
        end;
      end;
    finally
      FreeAndNil(ls_Rcrd);
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
    end;
  except
    on e: Exception do
    begin
      Screen.Cursor := crDefault;
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.Proc_recieve(ls_rxxml: String);
var
  ls_ClientKey, ls_Msg_Err, sMsg, sConfSlip : string;
begin
	SetDebugeWrite('JON01N.Proc_recieve');
  try
    if not loc_Ud_xdom.loadXML(ls_rxxml) then
    begin
      Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
			GMessagebox('[Proc_Recieve]XML전문 형식이 맞지 않습니다.' + #13#10 + '다시한번 조회 하세요', CDMSE);
      GB_JON03SELECT_GB := True;
      // 접수현황에서 수정전문 요청시 결과받았는지의 여부.
      Exit;
    end;

    sConfslip := cxtJoinNum.Text;

    //-------------------------- Client Key Read -----------------------------
    ls_ClientKey := GetXmlClientKey(ls_rxxml);
    //------------------------------------------------------------------------
		if ls_ClientKey = 'KEYN0001' then
			Proc_NumberInsert(ls_rxxml) // 대표번호 검색하기..
		else
		if ls_ClientKey = 'KYNM0001' then
    begin
			loc_RateNOT := True; // 요금 계산을 막음.
      try
				Proc_KeyNumberInsert(ls_rxxml); // [고객전화번호] 로 검색 후 결과를 처리한다.
				//콜마트 파일콜링의 경우
				if gbCallMartFileJON01 then
				begin
					Try
            Application.ProcessMessages;
						proc_CallMartJon01(gCALLMART);
					Except
						gbCallMartFileJON01 := False;
          End;
        end;
      finally
        loc_RateNOT := False; // 요금 계산을 막음.
      end;
    end else
    if ls_ClientKey = 'VIA00001' then
    begin
      proc_ViaInfo_insert(ls_rxxml); // 받아온 경유지 정보를 저장 한다.
    end else
    if Copy(ls_ClientKey, 1, 7) = 'SAVE000' then
    begin
			if ls_ClientKey = 'SAVE000S' then   // SMS거부 수정 결과 처리
			begin
				ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
				if ('0000' = ls_Msg_Err) then
				begin
					GMessagebox('SMS거부 설정 완료 하였습니다.', CDMSI)
				end else
				begin
					GMessagebox('SMS거부 설정중 에러가 발생 하였습니다.' + #10#13 + ls_Msg_Err, CDMSE);
				end;
			end;
      Proc_SaveReturn(ls_rxxml); // 접수 등록 결과 처리 한다.
    end else
    if ls_ClientKey = 'CUSV0032' then
    begin
      Proc_CustBasicSave_Result(ls_rxxml); // 고객기본정보 수정 작업후 결과 처리..
    end else
    if ls_ClientKey = 'JON03020' then   // SMS거부 수정 결과 처리
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      if ('0000' = ls_Msg_Err) then
      begin
				if ChkCuSmsNo.Tag <> 99 then
				begin
					if ChkCuSmsNo.Checked then
						GMessagebox('SMS거부 설정 수정 완료 하였습니다.', CDMSI)
					else
						GMessagebox('SMS거부 해제 수정 완료 하였습니다.', CDMSI)
				end;
			end else
      begin
        GMessagebox('SMS거부 수정도중 에러가 발생 하였습니다.' + #10#13 + ls_Msg_Err, CDMSE);
      end;
    end else
    if (ls_ClientKey = 'CUSE0001') or
       (ls_ClientKey = 'CUSE0011') or
       (ls_ClientKey = 'CUSE0012') then
    begin
      Proc_RequestResult(ls_rxxml, ls_ClientKey);  // 고객 SEQUENCE조회, 출/도착지, 저장 후 결과 처리.
    end else
		if ls_ClientKey = 'ORDE0011' then
    begin
      // [수정화면 띄우기..](오더일련번호)접수번호로 조회 후 그 결과 처리를 한다.  // 타임 로그를 찍는다.
			loc_RateNOT := True; // 요금 계산을 막음.
      loc_Modify := True;
      try
  			Proc_ConfSlipSelectResult(ls_rxxml);
      finally
        // [오더 일련번호:접수번호] 로 검색 후 결과를 처리한다.[수정화면 띄우기..]
        loc_RateNOT := False; // 요금 계산을 막음.
        loc_Modify := False;
      end;
    end else
		if ls_ClientKey = 'MODI0001' then
    begin
			ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
			if ('0000' = ls_Msg_Err) then
      begin // 오더 수정모드에서 요청후 결과 처리..

        // 노쇼완료일경우 노쇼완료전문 처리
				if bNoShowSave then
        begin
          pNoShowSave;
        end else
        begin
          // 수정시에는 기존 상태값을 그대로 두고 수정후에 상태변경하는 걸로 처리 - 마일리지적용 및 다른 오류로 인해 수정 2021.09.10  LYB
          if (Pos('앱접수', Self.Caption) > 0) and (bAppOrderOpen) then
          begin
            if (cxtJoinNum.Hint = '5') then
            begin
              if not func_ResToJoin('6', cxtJoinNum.Text, cxtJoinNum.Hint) then //6 대기해제처리 -> 변경될 상태정보(대기 => 해제)
              begin
                GMessagebox('오류로 인하여 대기해제상태로 변경에 실패하였습니다. ' + #13#10
                          + '직접 대기해제 해주십시오.', CDMSE);
              end else
                if GB_JON_FINISHMSG then GMessagebox(MDXCI_0006, CDMSI);
            end else
            if (cxtJoinNum.Hint = '4') then
            begin
               if giBtnIndex = 0 then
               begin
                 if not func_ReaToJoin(cxtJoinNum.Text, cxtJoinNum.Hint) then // 변경될 상태정보(문의 => 접수)
                 begin
                   GMessagebox('오류로 인하여 접수상태로 변경에 실패하였습니다. ' + #13#10
                             + '직접 재접수 해주십시오.', CDMSE);
                 end else
                  if GB_JON_FINISHMSG then GMessagebox(MDXCI_0006, CDMSI);
               end else
               if giBtnIndex = 5 then
               begin
                 if not func_ResToJoin('5', cxtJoinNum.Text, cxtJoinNum.Hint) then //5 대기처리 -> 변경될 상태정보(문의 => 대기)
                 begin
                   GMessagebox('오류로 인하여 대기상태로 변경에 실패하였습니다. ' + #13#10
                             + '직접 대기 해주십시오.', CDMSE);
                 end else
                   if GB_JON_FINISHMSG then GMessagebox(MDXCI_0006, CDMSI);
               end;
            end;
          end else
          // 원주365는 대기상태 콜 수정시 대기해제 처리(대기 => 해제)  20201208. 정회귀팀장
          if ( btnCmdWaitR.Tag = 1 ) And (cxtJoinNum.Hint = '5') then
          begin
            if not func_ResToJoin('6', cxtJoinNum.Text, cxtJoinNum.Hint) then //6 대기해제처리 -> 변경될 상태정보(대기 => 해제)
            begin
              GMessagebox('오류로 인하여 대기해제상태로 변경에 실패하였습니다. ' + #13#10
                        + '직접 대기해제 해주십시오.', CDMSE);
            end else
              if GB_JON_FINISHMSG then GMessagebox(MDXCI_0006, CDMSI);
					end else
					begin
						if GB_JON_FINISHMSG then GMessagebox(MDXCI_0006, CDMSI);
					end;
				end;

				Application.ProcessMessages;

				if (cxtJoinNum.Hint = '5') and ( GB_ResToJoin_USE ) and (bJoinBtn) then  //대기오더 수정시 접수로 변경 사용시 20190618 KHS
				begin
					if not func_ResToJoin('6',cxtJoinNum.Text, '5') then //6 대기해제, 5 대기
					begin
						GMessagebox('오류로 인하여 접수상태로 변경에 실패하였습니다. ' + #13#10
											+ '직접 대기해제 하여 주십시오.', CDMSE);
					end;
				end;

        if Trim(sConfSlip) = '' then sConfSlip := gsJON01LastConfSlip;
				Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(1, sConfslip, 'JON01-1');
				tmFormClose.Tag := 77; // 화면 닫기 설정값.
				loc_TmClose := 'CLOSE'; // 화면 종료 타이머 변수. CDS. 080830.
				tmFormClose.Enabled := True; // 화면을 닫는다.
			end	else
      if ('3002' = Copy(ls_Msg_Err, 1, 4)) then
			begin
				GMessagebox('상태가 변경 되었습니다.' + CRLF + ls_Msg_Err, CDMSI);
			end else
			begin
				GMessagebox('처리 실패 하였습니다' + CRLF + ls_Msg_Err, CDMSE);
			end;
		end else
		if ls_ClientKey = 'ResToJoin' then
		begin
			bResToJoin := False;
			ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
			if ('0000' = ls_Msg_Err) then bResToJoin := True;
		end else
		if ls_ClientKey = 'CUOD0010' then
		begin
			Frm_Main.Frm_Jon012[Self.Tag].Proc_CustOldSelectResult(ls_rxxml, 0);
			// 고객과거 이용내역 불러오기..
		end else
    if ls_ClientKey = 'CardDown' then
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      if ls_Msg_Err = '0000' then
        GMessagebox('카드모듈 다운로드 요청 하였습니다.', CDMSI)
      else
        GMessagebox('카드모듈 다운로드 요청에 실패했습니다.'+ #13#10 + GetXmlErrorMsg(ls_rxxml), CDMSE);
    end else
    if ls_ClientKey = 'URLR0001' then
    begin
//      btnBubinReq.Enabled := True;
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      if ('0000' = ls_Msg_Err) then
      begin
        GMessagebox('법인 인증을 요청하였습니다.', CDMSI);
      end else
      begin
        GMessagebox(ls_Msg_Err, CDMSE);
      end;
		end else
    if ls_ClientKey = 'LOCK0001' then
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      // 오더 수정화면 띄울때,, Lock을 [설정] 한다.
      if ('0000' = ls_Msg_Err) then
      begin
        loc_bUpdateLock := True;
        // 수정화면 Lock 설정 여부.[True:설정, False:미설정]
		    //proc_Cust_info(ed_MaddBrch.Text,ed_Cust_Tel_Hidden.Text);
      end else
      begin
        // system 수정은 상담원에게 알리지 않음 LYB 20200626, 최팀장님 지시
        if ls_Msg_Err <> '0001 : 현재 다른 사용자[system(System)]에 의해 수정중입니다.' then
          pJON01ShowMessage(Self.Tag, 'C', ls_Msg_Err);
//        GMessagebox(ls_Msg_Err, CDMSE);
      end;
    end else
    if ls_ClientKey = 'LOCK0002' then
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      // 오더 수정화면 닫을때,, Lock을 [해제] 한다.
      loc_bUpdateLock := False;
      // 수정화면 Lock 설정 여부.[True:설정, False:미설정]
      if btnCmdExit.Tag = 999 then btnCmdExit.Tag := 0;
			// 수정모드에서 프로그램 닫을때, Lock 해제설정 초기화 한다.
      if ('0000' <> ls_Msg_Err) then
      begin
        GMessagebox(ls_Msg_Err, CDMSE);
      end;
    end else
    if ls_ClientKey = 'DELETECUST' then
    begin
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      sMsg := GetXmlErrorMsg(ls_rxxml);
      if ('0000' = ls_Msg_Err) and ('1' = sMsg) then
      begin
        GMessagebox('성공하였습니다.', CDMSI);
				tmFormClose.Tag := 77; // 화면 닫기 설정값.
        loc_TmClose := 'CLOSE'; // 화면 종료 타이머 변수. CDS. 080830.
        tmFormClose.Enabled := True; // 화면을 닫는다.
        //btnCmdExitClick(btnCmdExit);
      end else
      begin
        GMessagebox('실패하였습니다.' + #13#10 + '다시 한번 시도해 보세요', CDMSE);
      end;
    end else
    begin
      sMsg := GetXmlErrorMsg(ls_rxxml);
      GMessagebox('통신 중 오류가 발생했습니다.[' + sMsg + ']', CDMSE);
      Assert(False, '통신 중 오류가 발생했습니다.[' + ls_rxxml + ']');
      Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
      grpBtm.Enabled := True;
      GB_JON03SELECT_GB := True;
      // 접수현황에서 수정전문 요청시 결과받았는지의 여부.
    end;
  except
    on e: exception do
    begin
      ShowMessage('[Proc_recieve]예외처리:' + e.Message);
      Assert(False, 'Proc_recieve Error : ' + GT_OrderInfo[Self.Tag].Slip + '-' + ls_ClientKey + e.Message);
    end;
  end;
end;

// 대표번호로 조회 후 결과 처리를 한다.
procedure TFrm_JON01N.Proc_NumberInsert(rxxml: String);
var
  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  ls_Rcrd: TStringList;
begin
  SetDebugeWrite('JON01N.Proc_NumberInsert');
  try
    xdom := ComsDomDocument.Create;
    try
      if not xdom.loadXML(rxxml) then Exit;

      if (0 < GetXmlRecordCount(rxxml)) then
      begin
        lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
        ls_Rcrd := TStringList.Create;
        try
          GetTextSeperationEx('│', lst_Result.item[0].attributes.getNamedItem('Value').Text, ls_Rcrd);

          cboBranch.Tag := 10;
          // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
          cboBranch.Properties.Items.Clear;
          slCboBranch.Clear;

          // 본사코드   // 지사코드   // 지사명   // 대표번호
//          cboBranch.Properties.Items.Add(ls_Rcrd[1] + '[' + Trim(cxTSearchMainTel.Text) + '] ' + Copy(ls_Rcrd[3] + '     ', 1, 5) + Copy(ls_Rcrd[0] + '     ', 1, 5));

          cboBranch.Properties.Items.Add(ls_Rcrd[1] + '[' + Trim(cxTSearchMainTel.Text)+ ']');
          slCboBranch.Add(Copy(ls_Rcrd[3] + '     ', 1, 5) + '.' + Copy(ls_Rcrd[0] + '     ', 1, 5));

          cboBranch.ItemIndex := 0;
          cboBranch.Tag := 0;
          // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
          sNowRate := ls_Rcrd[2]; // 현재 지사의 기본요금 설정액.

          if BtnRaLock.Hint <> 'F4)잠금' then
          begin
						curRate.Value := StrToFloatDef(ls_Rcrd[2], 0){ + cxCurRevisionRate.value};
						OrgRate := curRate.Value{ - cxCurRevisionRate.value};
					end;
					// 대표번호를 정상 조회 했으므로 초기화 한다.
          cxTSearchMainTel.Text := '';
        finally
          FreeAndNil(ls_Rcrd);
        end;
      end else
      begin
        // 메시지 내용 : 등록되지 않은 대표번호 입니다.
        GMessagebox(MSG421, CDMSE);
      end;
    finally
      xdom := nil;
    end;
  except
    on e: exception do
    begin
      ShowMessage('[대표번호조회RESULT]예외처리:' + e.Message);
    end;
  end;
end;

// 받아온 경유지 정보를 배열에 저장한다.
procedure TFrm_JON01N.proc_ViaInfo_insert(rxxml: String);
var
  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  ls_Rcrd: TStringList;
  ls_Msg_Err: string;
  i, iFidx: Integer;
begin
  SetDebugeWrite('JON01N.proc_ViaInfo_insert');
  try
    xdom := ComsDomDocument.Create;
    try
      if not xdom.loadXML(rxxml) then Exit;

      iFidx := Self.Tag; // 폼의 인덱스를 가져온다.

      ls_Msg_Err := GetXmlErrorCode(rxxml);
      if ('0000' = ls_Msg_Err) then
      begin
        GT_PASS_INFO[iFidx][0].AREA1 := '';
        GT_PASS_INFO[iFidx][0].AREA2 := '';
        GT_PASS_INFO[iFidx][0].AREA3 := '';
        GT_PASS_INFO[iFidx][0].AREA4 := '';
        GT_PASS_INFO[iFidx][0].AREA5 := '';
        GT_PASS_INFO[iFidx][0].DOCID := '';
        GT_PASS_INFO[iFidx][0].CELLS := '';
        GT_PASS_INFO[iFidx][0].SWORD := '';
        GT_PASS_INFO[iFidx][0].MAP_X := '';
        GT_PASS_INFO[iFidx][0].MAP_Y := '';
        lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
        ls_Rcrd := TStringList.Create;
        try
          for i := 0 to lst_Result.length - 1 do
          begin
            if lst_Result.item[i].attributes.getNamedItem('Value').Text = '' then break;
            GetTextSeperationEx('│', lst_Result.item[i].attributes.getNamedItem('Value').Text, ls_Rcrd);
            GT_PASS_INFO[iFidx][i].AREA1 := ls_Rcrd[1];
            GT_PASS_INFO[iFidx][i].AREA2 := ls_Rcrd[2];
            GT_PASS_INFO[iFidx][i].AREA3 := ls_Rcrd[3];
            GT_PASS_INFO[iFidx][i].AREA4 := ls_Rcrd[4];
            GT_PASS_INFO[iFidx][i].AREA5 := ls_Rcrd[5];
            GT_PASS_INFO[iFidx][i].MAP_X := ls_Rcrd[6];
            GT_PASS_INFO[iFidx][i].MAP_Y := ls_Rcrd[7];
          end;
        finally
          FreeAndNil(ls_Rcrd);
        end;
      end else
      begin
        GMessagebox(MSG012 + CRLF + ls_Msg_Err, CDMSE);
      end;
    finally
      xdom := Nil;
    end;
  except
  end;
end;

// 접수등록 후 결과를 처리 한다.
procedure TFrm_JON01N.Proc_SaveReturn(ss_RxXml: String);
var
	ls_Msg_Err: string;
  iFidx, j: integer;
  sConfslip, sCallNum : String;
begin
  SetDebugeWrite('JON01N.Proc_SaveReturn');

  ls_Msg_Err := GetXmlErrorCode(ss_RxXml);
  if ('0000' = ls_Msg_Err) then
  begin
    sConfslip := cxtJoinNum.Text;
    sCallNum  := cxtCallTelNum.Text;
    try
      if (btnCmdJoinCopy.Hint <> 'JOINCOPY') and (btnCmdWaitCopy.Hint <> 'JOINCOPY') and (btnCmdQuestionCopy.Hint <> 'JOINCOPY') then
      begin // 접수후 복사 기능 설정.
        iFidx := Self.Tag;
        j := 0;
        for j := 0 to 4 do
        begin
          GT_PASS_INFO[iFidx][j].AREA1 := '';
          GT_PASS_INFO[iFidx][j].AREA2 := '';
          GT_PASS_INFO[iFidx][j].AREA3 := '';
          GT_PASS_INFO[iFidx][j].AREA4 := '';
          GT_PASS_INFO[iFidx][j].AREA5 := '';
          GT_PASS_INFO[iFidx][j].DOCID := '';
          GT_PASS_INFO[iFidx][j].CELLS := '';
          GT_PASS_INFO[iFidx][j].SWORD := '';
          GT_PASS_INFO[iFidx][j].MAP_X := '';
          GT_PASS_INFO[iFidx][j].MAP_Y := '';
        end;
      end;

      if lg_Save = '1' then
      begin
        // 오더정보 수정모드 설정을 한다.
        if (btnCmdExit.Hint = 'UPDATE_MODE') and ((Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 )) then
          Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(1, sConfslip, 'JON01-2')
        else
        begin
          //고객번호로 접수현황 조회 (2008.08.01 KJH)
          cxtCallTelNum.Text := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
          Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(5, sCallNum);
        end;
      end;

      // 이중등록일경우 종료 로직 제외;
      if bQuestionSave then Exit;
    except
      on e: exception do
      begin
        Log('Proc_SaveReturn Error 0 :' + E.Message, LOGDATAPATHFILE);
        Assert(False, 'Proc_SaveReturn Error 0 :' + E.Message);
      end;
    end;

    try
      if (btnCmdJoinCopy.Hint <> 'JOINCOPY') and (btnCmdWaitCopy.Hint <> 'JOINCOPY') and (btnCmdQuestionCopy.Hint <> 'JOINCOPY') then
      begin // 접수후 복사 기능 설정.
        // 화면을 닫는다.
        tmFormClose.Tag := 77; // 화면 닫기 설정값.
        loc_TmClose := 'CLOSE'; // 화면 종료 타이머 변수. CDS. 080830.
        tmFormClose.Enabled := True; // 화면을 닫는다.
      end else
      begin
        lcsCu_seq := GetXmlErrorMsg(ss_RxXml);   // 20130727  LYB  대기후복사/접수후복사 로 인한 신규고객 고객번호 적용
        pCompareCustInfo;
        if (Pos('수정', Self.Caption) > 0 ) or (Pos('앱접수', Self.Caption) > 0 ) then
        begin
          if btnCmdExit.Hint = 'UPDATE_MODE' then
          begin // 오더정보 수정모드 설정을 한다.
            if loc_bUpdateLock = True then
            begin // 수정화면 Lock 설정 여부.[True:설정, False:미설정]
              //Proc_AcceptLock('2');          // 해당오더의 Lock을 해제 한다.
              tmFormClose.Tag := 88; // 화면 닫기 설정값.
              loc_TmClose := 'UNLOCK';
              // 화면 종료 타이머 변수. CDS. 080830.
              tmFormClose.Enabled := True; // LOCK을 해제한다.
            end;
          end;
        end;

        if (btnCmdJoinCopy.Hint = 'JOINCOPY') Or (btnCmdQuestionCopy.Hint = 'JOINCOPY') then
        begin
          Frm_Main.Frm_Jon012[Self.Tag].Proc_JoinCopyCustHis; //접수후복사시 과거이용내역 갱신 20191105KHS 신성현차장요청
        end;
      end;
    except
      on e: exception do
      begin
        Log('Proc_SaveReturn Error 1 :' + E.Message, LOGDATAPATHFILE);
        Assert(False, 'Proc_SaveReturn Error 1 :' + E.Message);
      end;
    end;
  end else
  begin
    Only_Exit := True;   //종료버튼 힌트 초기화 변경됨   20130808  LYB
    GMessagebox(MSG431 + CRLF + ls_Msg_Err, CDMSE);
    Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
  end;
end;

// 고객전화번호 조회 후 결과 처리를 한다.
procedure TFrm_JON01N.Proc_KeyNumberInsert(rxxml: String);
var
  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  nodeGet : IXMLDomNode;

	wk_br_Name, wk_Name, ls_Msg_Err, o_status, o_keyNumber, sCharge, o_InDate, ls_msg, sBr_Name, sStatus, sTemp, ls_TxLoad: string;
	iBarIndex, i, j, jj, iBidx, iFIdx, jCnt, jjCnt, iCarType : Integer;
  itotal, iEnd, iCancel, iH : Integer;
  iGrade1, iGrade2, ACount: Integer;
  fcancelRate: double;
	sCustTel, sBrNo, sSel_KeyNumber, sSel_BrNo : string;
  sBGroup : string;
	ls_Rcrd : TStringList;
	ia, UserMile : integer;
	// 전화번호2유무
	sTelse, sContent, sCurMileage, sMileage: string;

  sDate, sTodayDate, sInDate : string;
  iCnt : Integer;
  DataValue: String;
	sWkFAge, sWkTAge : string;
	sTmp, sHdNo, sTaSaHdno : string;
	sTime, dTime: TDateTime;

	sStaTmp1, sStaTmp2, sStaTmp3, sStaTmp4, sStaTmp5, sStaX, sStaY : string; // 타업체 등록 출발지 정보
	sEndTmp1, sEndTmp2, sEndTmp3, sEndTmp4, sEndTmp5, sEndX, sEndY : string; // 타업체 등록 도착지 정보

	sKDInsCor, sKDInsNum, sKDInsShareYn, sKDName, sKDWkHp, sAIOB : string;
  bLimitUseYn, bMemoDisplay, bTimeChk, bMsgView : Boolean;
  startTick, delta : DWord;
//  SL: TStringList;
begin
	SetDebugeWrite('JON01N.Proc_KeyNumberInsert');
	if (lcsActiveEdit = 'meoStartAreaCUT') or (lcsActiveEdit = 'meoEndAreaCUT') then
	begin
		lcsActiveEdit := 'meoStartArea';
		sActieEdit := 'meoStartArea';
	end;
	FHasTodayData := False;
  iFidx := Self.Tag; // 폼의 index를 읽는다.

	sHdNo := Proc_HdNOSearch;

//  SL := TStringList.Create;
//  try
//    SL.LoadFromFile('D:\abc1.txt');
//    rxxml := SL.Text;
//  finally
//    SL.Free;
//  end;

  xdom := ComsDomDocument.Create;
  try
    if not xdom.loadXML(rxxml) then
    begin
      GMessagebox('[고객전화번호조회결과]XML전문 형식이 맞지 않습니다.' + #13#10
                + '다시한번 조회 하세요', CDMSE);
      Exit;
    end;

    ls_Msg_Err := GetXmlErrorCode(rxxml);

    FWk_sabun := '';
    bOther := False; //타업체 접수건 여부 f:없음. T:있음
    sStaTmp1 := ''; sStaTmp2 := ''; sStaTmp3 := ''; sStaTmp4 := ''; sStaTmp5 := ''; sStaX := ''; sStaY := ''; // 타업체 등록 출발지 정보
    sEndTmp1 := ''; sEndTmp2 := ''; sEndTmp3 := ''; sEndTmp4 := ''; sEndTmp5 := ''; sEndX := ''; sEndY := ''; // 타업체 등록 도착지 정보

    Try
      if ('0000' = ls_Msg_Err) then
      begin
        try
          grpCustView.Visible := False;
					lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/OtherInfo');
          ls_msg := '';
          if (Pos('수정', Self.Caption) < 1 ) then
          begin
            if lst_Result.length > 0 then
            begin
              if (GS_PRJ_AREA = 'O') and (GT_USERIF.ShareNo = 'G41') then //지방권 G41연합은 팝업제외   정회귀팀장 요청 20190719 KHS
              else
              begin
                for i := 0 to lst_Result.length - 1 do
                begin
                  //Status="" KeyNumber="" InDate="" BrName="" Charge=""
                  o_status := lst_Result.item[i].attributes.getNamedItem('Status').Text;
                  if Trim(o_status) = '' then
                  begin
                    ls_msg := '';
                    Continue;
                  end;
                  bOther := True;
                  o_keyNumber := lst_Result.item[i].attributes.getNamedItem('KeyNumber').Text;
                  o_InDate    := lst_Result.item[i].attributes.getNamedItem('InDate').Text;
                  sBr_Name    := lst_Result.item[i].attributes.getNamedItem('BrName').Text;
                  sCharge     := lst_Result.item[i].attributes.getNamedItem('Charge').Text;
                  sCustTel    := StrToCall(cxtCuTel.Text);
                  if i = 0 then
                  begin
                    sStaTmp1 := lst_Result.item[i].attributes.getNamedItem('Area').Text;
                    sStaTmp2 := lst_Result.item[i].attributes.getNamedItem('Area2').Text;
                    sStaTmp3 := lst_Result.item[i].attributes.getNamedItem('Area3').Text;
                    sStaTmp4 := lst_Result.item[i].attributes.getNamedItem('Area4').Text;
                    sStaTmp5 := lst_Result.item[i].attributes.getNamedItem('Area5').Text;
                    sStaX    := lst_Result.item[i].attributes.getNamedItem('MapX').Text;
                    sStaY    := lst_Result.item[i].attributes.getNamedItem('MapY').Text;

                    sEndTmp1 := lst_Result.item[i].attributes.getNamedItem('EdArea').Text;
                    sEndTmp2 := lst_Result.item[i].attributes.getNamedItem('EdArea2').Text;
                    sEndTmp3 := lst_Result.item[i].attributes.getNamedItem('EdArea3').Text;
                    sEndTmp4 := lst_Result.item[i].attributes.getNamedItem('EdArea4').Text;
                    sEndTmp5 := lst_Result.item[i].attributes.getNamedItem('EdArea5').Text;
                    sEndX    := lst_Result.item[i].attributes.getNamedItem('DestX').Text;
                    sEndY    := lst_Result.item[i].attributes.getNamedItem('DestY').Text;
                  end;
                  if not IsUseKeyNumber(o_keyNumber) then
                    sCharge := '****';

                  sDate := GetStrToLongDateTimeStr(Frm_Main.func_sysdate);        //'2016-07-04 18:01:59'
                  sTime := StrToDateTime(sDate);

                  dTime := 0;
                  if o_InDate <> '' then
                  begin
                    sTmp := copy(o_InDate,1,4) + '-' + copy(o_InDate,5,2) + '-' + copy(o_InDate,7,2) + ' '
                          + copy(o_InDate, 9, 2) + ':' + copy(o_InDate, 11, 2) + ':' + copy(o_InDate, 13, 2);
                    dTime := StrToDateTime(sTmp);

                    o_InDate := copy(o_InDate, 9, 2) + ':' + copy(o_InDate, 11, 2) + ':' + copy(o_InDate, 13, 2);
                  end;

                  sTmp := FormatDateTime('hhmmss', sTime - dTime);
                  if (StrToIntDef(copy(sTmp, 1, 2), 0) = 0) then
                    sTmp := IntToStr(StrToIntDef(copy(sTmp, 3, 2), 0)) + '분'
                  else
                    sTmp := IntToStr(StrToIntDef(copy(sTmp, 1, 2), 0)) + '시간' +
                             IntToStr(StrToIntDef(copy(sTmp, 3, 2), 0)) + '분';

                  if o_status = 'B' then
                    o_status := '1';
                  case StrToIntDef(o_status, 99) of
                    0: sStatus := '접수';
                    1: sStatus := '배차';
                    2: sStatus := '완료';
                    3: sStatus := '강제';
                    4: sStatus := '문의';
                    5: sStatus := '대기';
                    8: sStatus := '취소';
                  end;
                  sTemp := '요금:[' + sCharge + ']';
                  ls_msg := ls_msg + #13#10 + '전화하신 고객님은 ' + sTmp + ' 전에 다른회원사에 콜접수함-현재상태[' + sStatus + ']';
                end;
              end;

              if Trim(ls_msg) <> '' then
              begin
                ls_msg := '**** 타 업체 중복 콜 등록 정보 표기 건 *****' + #13#10 + ls_msg;
								pJON01ShowMessage(Self.Tag, 'A', ls_msg);
//                Application.MessageBox(PChar(ls_msg), GS_APPNAME, MB_OK);
              end;
            end;
					end;

          bTimeChk := True;
          bMsgView := False;
        	startTick := GetTickCount;

          // 100510 - CID로그(메인/부 업체구분) 위해 LogSeq 저장 후 접수시 전달
					lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/CidInfo');
	  			if lst_Result.length > 0 then
						locLogSeq := lst_Result.item[0].attributes.getNamedItem('LogSeq').Text;

					lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Branch');
					locHDNO   := lst_Result.item[0].attributes.getNamedItem('HdNo').Text;
					locBRNO   := lst_Result.item[0].attributes.getNamedItem('BrNo').Text;
					sBr_Name  := lst_Result.item[0].attributes.getNamedItem('BrName').Text;
					// 2011.05.11 추가. CDS. 서버에서 받음.
	  			lsBr_KeyNumber := lst_Result.item[0].attributes.getNamedItem('KeyNumber').Text;

          if Assigned(lst_Result.item[0].attributes.getNamedItem('CallingBrNo')) then     // 콜링지사
            locCallingBrNo := Trim(lst_Result.item[0].attributes.getNamedItem('CallingBrNo').Text);
          if Assigned(lst_Result.item[0].attributes.getNamedItem('CallingBrName')) then     // 콜링지사명
            locCallingBrName := Trim(lst_Result.item[0].attributes.getNamedItem('CallingBrName').Text);
          if Assigned(lst_Result.item[0].attributes.getNamedItem('CallingKeyNumber')) then     // 콜링대표번호
            locCallingKeyNumber := Trim(lst_Result.item[0].attributes.getNamedItem('CallingKeyNumber').Text);

          if ( ( locCallingBrNo <> '' ) And ( locCallingKeyNumber <> '' ) ) And
//             ( ( locBRNO <> '' ) And ( lsBr_KeyNumber <> '' ) ) And
             ( ( locCallingBrNo <> locBRNO ) Or ( locCallingKeyNumber <> lsBr_KeyNumber ) ) then
          begin
            pnlCallingBoard.Caption := Format('★ 콜링지사:%s, 콜링대표번호:%s ★', [locCallingBrName, StrToCall(locCallingKeyNumber)]);
            pnlCallingBoard.Visible := True;
          end else pnlCallingBoard.Visible := False;

          // [hjf-하드코딩] 2009.03.06 코리아(카드고객) 색상구분
          if (GS_PRJ_AREA = 'S') and (locBRNO = 'H849') then
          begin
            shpTitle.Pen.Color := clRed;       // 붉은색
          end else
          // [cds-하드코딩] 2011.10.11 코리아(카드고객) 색상구분 추가. 1577-5000.  신용카드 (1577-9482)
          if (GS_PRJ_AREA = 'S') and ( (locBRNO = 'G908') Or (locBRNO = 'G902') )  then
          begin
            shpTitle.Pen.Color := $00FE8769;   // 파란색
          end else
          // [cds-하드코딩] 2012.10.09 코리아(02-2000-0000) 색상구분 추가. KHS
          if (GS_PRJ_AREA = 'S') and (locBRNO = 'Q908') then
          begin
            shpTitle.Pen.Color := clGreen;   // 녹색
          end else
          // [cds-하드코딩] 2012.10.09 법인콜 색상구분 추가.
          if (GS_PRJ_AREA = 'S') and (locBRNO = 'G898') then
          begin
            shpTitle.Pen.Color := $0014AACF;   // 골드
          end else
          begin
            shpTitle.Pen.Color := GS_BasicColor;;   // 기본색
          end;
          shpTitle.Hint := ColorToString(shpTitle.Pen.Color);

          if (locCustHP_MainNum_Search = '') and ((cxLblCIDUseFlg.Hint <> 'CID') Or (gbCallRouteBrChange)) then
          begin // CID 조회인지 설정을 한다.
            if Proc_BrNoListIdxFind(locBRNO, lsBr_KeyNumber) = False then
            begin
              ls_msg := '조회 한 지사코드가 콜센터에 이관되지 않았거나 없는지사 또는 대표번호 입니다.' + #13#10 +
                        '[ 지사코드:' + locBRNO + ', 대표번호:' + lsBr_KeyNumber + ' ] 확인 하세요!';
              pJON01ShowMessage(Self.Tag, 'B', ls_msg);
//              ShowMessage(ls_msg);
              Exit;
            end;
          end else
          begin
            // CID 조회 임.
            // 지사리스트에서 대표번호, 지사코드 index 찾기 및 설정.
            if Proc_BrNoListIdxFind(locBRNO, lsBr_KeyNumber) = False then
            begin
              cboBranch.Tag := 10;
              // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
              cboBranch.Properties.Items.Clear; // 지사리스트 초기화.
              slCboBranch.Clear;

//              cboBranch.Properties.Items.Add(sBr_Name + '[' + lsBr_KeyNumber + '] ' + Copy(locHDNO + '     ', 1, 5) + '.' + Copy(locBRNO + '     ', 1, 5));
                  // 본사코드   // 지사코드   // 지사명   // 대표번호
              cboBranch.Properties.Items.Add(sBr_Name + '[' + lsBr_KeyNumber + ']');
              slCboBranch.Add(Copy(locHDNO + '     ', 1, 5) + '.' + Copy(locBRNO + '     ', 1, 5));

              cboBranch.ItemIndex := 0;
              cboBranch.Tag := 0;
              // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
            end;
          end;
          // 대표번호 별 기본 설정요금을 적용 한다.
          if Not pbISStartEndXY then
          begin
            if BtnRaLock.Hint <> 'F4)잠금' then
            begin
      				sNowRate := lst_Result.item[0].attributes.getNamedItem('BaseCharge').Text;

							curRate.Value := StrToFloatDef(sNowRate, 0){ + cxCurRevisionRate.value};
							OrgRate := curRate.Value{ - cxCurRevisionRate.value};
							Lbl_Charge.Caption := Format('대표번호 기본요금(%s) 강제 적용', [StrToMoney(sNowRate)]);

							if pnlCallingBoard.Visible then pBaseCharge(locBrNo, lsBr_KeyNumber);
            end;
          end;

          Try
            // 고객 조회 전화번호 저장.
            // DNIS 또는 고객으로만 조회 일때,,  전화번호만 남도록 수정함. 2011.05.13 CDS. 추가.
            if Pos('*',cxtCuTel.Text) > 0 then
            begin
              sCustTel := Copy(cxtCuTel.Text, Pos('*',cxtCuTel.Text) +1 , length(cxtCuTel.Text));
              sCustTel := StringReplace(sCustTel, '+', '', [rfReplaceAll]);
              gsCuTelHint   := Copy(cxtCuTel.Text, 1, Pos('*',cxtCuTel.Text) -1);
							cxtCuTel.Text := gsCuTelHint;
              if Pos('+',cxtCuTel.Text) > 0 then
              begin
                gsCuTelHint   := StringReplace(cxtCuTel.Text, '+', '', [rfReplaceAll]);
                cxtCuTel.Text := gsCuTelHint;
              end;
              // DNIS 대표번호 찾기 정보창.
              shrDNIS_DSP.BringToFront;
              shrDNIS_DSP.Visible := True;
              lblDNISInfo.Caption := '***** DNIS 대표번호 / 지사 찾기 *****' + #13#10 +
                                     'DNIS      : ' + sCustTel + #13#10 +
                                     '대표번호 : ' + lsBr_KeyNumber + ' (' + locBRNO + '.' + sBr_Name + ')' + #13#10 +
                                     '고객전화 : ' + gsCuTelHint;
            end else
            if Pos('+',cxtCuTel.Text) > 0 then
            begin
              gsCuTelHint   := StringReplace(cxtCuTel.Text, '+', '', [rfReplaceAll]);
							cxtCuTel.Text := gsCuTelHint;
              if Pos('*',cxtCuTel.Text) > 0 then
              begin
                gsCuTelHint   := Copy(cxtCuTel.Text, 1, Pos('*',cxtCuTel.Text) -1);
                cxtCuTel.Text := gsCuTelHint;
                // DNIS 대표번호 찾기 정보창.
                shrDNIS_DSP.BringToFront;
                shrDNIS_DSP.Visible := True;
                lblDNISInfo.Caption := '***** DNIS 대표번호 / 지사 찾기 *****' + #13#10 +
                                       'DNIS      : ' + sCustTel + #13#10 +
                                       '대표번호 : ' + lsBr_KeyNumber + ' (' + locBRNO + '.' + sBr_Name + ')' + #13#10 +
                                       '고객전화 : ' + gsCuTelHint;
              end;
            end else
            begin
              gsCuTelHint := cxtCuTel.Text;
            end;
          except
            on e: exception do
            begin
              bTimeChk := False;
              ls_TxLoad := 'Jon01N[고객 조회 전화번호 조회오류]:' + e.Message;
              Assert(False, E.Message);
              GMessagebox(PChar(ls_TxLoad), CDMSE);
              Screen.Cursor := crDefault;
            end;
          end;

          sSel_KeyNumber := Proc_MainKeyNumberSearch;
          if ( sSel_KeyNumber <> lsBr_KeyNumber ) And ( GT_USERIF.HD = 'A1531' ) then
          begin
            ls_msg := '접수창 대표번호[' + sSel_KeyNumber + ']와 조회 대표번호['+ lsBr_KeyNumber +']가 다릅니다' + #13#10 +
                      '고객번호에서 다시 엔터를 치세요';
            pJON01ShowMessage(Self.Tag, 'A', ls_msg);
//            Application.MessageBox(PChar(ls_msg), GS_APPNAME, MB_OK);
            Assert(False, 'JON01N.Proc_KeyNumberInsert - 대표번호상이.' + cxtCuTel.Text + ' : ' + ls_msg);
            Exit;
          end;

          // 지사별 멘트 구하기..
          if ( cxLblCIDUseFlg.Hint = 'CID' ) Or ( GB_CallLine )  then
          begin // CID 조회인지 설정을 한다.
            lblBrNoMent.Caption := Func_brtel_memo(locBRNO, lsBr_KeyNumber);
            if lblBrNoMent.Caption <> '' then
            begin
              grpBrNoMent.BringToFront;
              grpBrNoMent.Visible := True;
              tmMent.Interval := 5000;
              tmMent.Enabled := True;
            end	else
            begin
              tmMent.Enabled := False;
              grpBrNoMent.Visible := False;
            end;
          end;

          //-------------------------------------------------------------------------------------------
          //      KD Drive 기사정보   20181016 KHS
          //      <KdDriver InsCor="DB" InsNum="123324235434" InsShareYn="n" Name="정경석" WkHp="01089701784"
          //-------------------------------------------------------------------------------------------
          gsKDWkHp := '';
          sKDInsCor := ''; sKDInsNum := ''; sKDInsShareYn := ''; sKDName := ''; sKDWkHp := '';
					if ((GS_PRJ_AREA = 'S') or (GT_KAKAOUse)) then //수도권만 사용 또는 GT_KAKAOUse True 20190328KHS
					begin
						lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/KdDriver');
						sKDWkHp := Trim(lst_Result.item[0].attributes.getNamedItem('WkHp').Text);
						if sKDWkHp <> '' then  //전화번호가 빈값이면 KD기사아님
						begin
							frm_Main.Proc_CidLog(98, 'KMdrive'); // 로그 기록.
							Frm_Main.Frm_JON03[Jon03Tag].pnlBubin.Visible := False;

							sKDInsCor := Trim(lst_Result.item[0].attributes.getNamedItem('InsCor').Text);
							sKDInsNum := Trim(lst_Result.item[0].attributes.getNamedItem('InsNum').Text);
							sKDInsShareYn := Trim(lst_Result.item[0].attributes.getNamedItem('InsShareYn').Text);
							sKDName := Trim(lst_Result.item[0].attributes.getNamedItem('Name').Text);
							gsKDWkHp := sKDInsShareYn + '|' + sKDName + '|' + sKDWkHp + '|' + sKDInsCor + '|' + sKDInsNum
						end;
					end;

          //-------------------------------------------------------------------------------------------
          //      전화번호로 고객, 기사 체크( 1 : 기사, 2 : 고객 )
          //-------------------------------------------------------------------------------------------
					lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Branch');
					sCust_Gubun := IntToStr(StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Gubun').Text, 2));
					if StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Gubun').Text, 2) = 2 then
          begin
            Try
              frm_Main.Proc_CidLog(98, '고객'); // 로그 기록.
              Frm_Main.Frm_JON03[Jon03Tag].pnlBubin.Visible := False;
	  					lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Customer');
              //AI 아웃바운드 옵션 배차지연콜 사용여부 20190716 KHS
              sAIOB := lst_Result.item[0].attributes.getNamedItem('AiOutOption').Text;
              if (sAIOB = 'y') or (sAIOB = '') then
              begin
                sTmp := Proc_MainKeyNumberSearch;
                if not GetAIOBKeyNumberYN(sTmp) then   //고객이 선택되어 있어도 지사의 대표번호에서 사용안하면 체크해제
                begin
                  chk_AIReCall.Properties.ReadOnly := True;
                  chk_AIReCall.checked := False;
                end else chk_AIReCall.checked := True;
              end else chk_AIReCall.checked := False;
              //AI 아웃바운드 옵션 배차지연콜 사용여부 20190716 KHS

              iCarType := StrtoIntDef(lst_Result.item[0].attributes.getNamedItem('CarType').Text, 2);
              if iCarType = 1 then cb_CarType.ItemIndex := 0 else cb_CarType.ItemIndex := 1;

              if Assigned(lst_Result.item[0].attributes.getNamedItem('CustInDate')) then
              begin
                sTemp := lst_Result.item[0].attributes.getNamedItem('CustInDate').Text;
								lblCustInDate.Caption := Copy(sTemp, 3, Length(sTemp)-2);
              end;

							iBarIndex := StrtoIntDef(lst_Result.item[0].attributes.getNamedItem('CuType').Text, 0);
              /////////////////콜벨 20161231 KHS////////////////////////////////
              if lst_Result.item[0].attributes.getNamedItem('CallBellStatus').Text = '1' then  //콜벨상태(1:정상, 2:해지, null: 콜벨 업소 설정 없음)
              begin
                pnlCallBell.BringToFront;
                pnlCallBell.Visible := True;
                pnlCallBell.Top  := CbCuGb.Top - 4;
                pnlCallBell.Left := cxtCuBubin.Left;
                pnlCallBell.Color := $00804000;

                pnlCallBellAll.Color := pnlCallBell.Color;
                pnlCallBellAll.Top := 0;
                pnlCallBellAll.Left := 0;
                pnlCallBellAll.Width := 312;
                pnlCallBellAll.Height := grpTop2.Height;
                pnlCallBellAll.BringToFront;
                pnlCallBellAll.Visible := True;
                if cxLblCIDUseFlg.Hint = 'CID' then
                begin
                  lbUpsoPee.Caption := '콜벨 업소 - 콜링';
                  pnlCallBell.Caption := '+++++콜벨 업소 - 콜링+++++';
                end else
                begin
                  lbUpsoPee.Caption := '콜벨 업소';
                  pnlCallBell.Caption := '+++++++콜벨 업소+++++++';
                end;
                tmUpsoPnl.Interval := 3000;
                tmUpsoPnl.Enabled := True;

                lbUpsoName.Caption := lst_Result.item[0].attributes.getNamedItem('Name').Text;
              end	else
              begin
                if (iBarIndex = 1) and (lst_Result.item[0].attributes.getNamedItem('CuMileValue').Text <> '0')
																	 and (lst_Result.item[0].attributes.getNamedItem('CuMileValue').Text <> '')   //업소일경우
																	 and (lst_Result.item[0].attributes.getNamedItem('CallBellStatus').Text = '1') then  //콜벨상태(1:정상
                begin
                  pnlCallBell.BringToFront;
                  pnlCallBell.Visible := True;
                  pnlCallBell.Top  := CbCuGb.Top - 4;
                  pnlCallBell.Left := cxtCuBubin.Left;
                  pnlCallBell.Color := $000B5AFF;

                  pnlCallBellAll.Color := pnlCallBell.Color;
                  pnlCallBellAll.Top := 0;
                  pnlCallBellAll.Left := 0;
                  pnlCallBellAll.Width := 308;
                  pnlCallBellAll.Height := grpTop2.Height;
                  pnlCallBellAll.BringToFront;
                  pnlCallBellAll.Visible := True;

                  tmUpsoPnl.Interval := 3000;
                  tmUpsoPnl.Enabled := True;

                  lbUpsoName.Caption := lst_Result.item[0].attributes.getNamedItem('Name').Text;

                  if lst_Result.item[0].attributes.getNamedItem('CuMileType').Text = '1' then
                    lbUpsoPee.Caption := '+++일정금액 / ' + StrToMoney(lst_Result.item[0].attributes.getNamedItem('CuMileValue').Text) + '원+++'
                  else if lst_Result.item[0].attributes.getNamedItem('CuMileType').Text = '2' then
                    lbUpsoPee.Caption := '+++매출비율 / ' + lst_Result.item[0].attributes.getNamedItem('CuMileValue').Text + '%+++'
                  else
                    lbUpsoPee.Caption := '';
                  pnlCallBell.Caption := lbUpsoPee.Caption;
								end else
                begin
                  pnlCallBell.Visible := False;
                  pnlCallBellAll.Visible := False;
                  tmUpsoPnl.Enabled := False;
                end;
              end;
              lbUpsoName.Caption := lst_Result.item[0].attributes.getNamedItem('Name').Text;
							pnlCallBell.Hint := lst_Result.item[0].attributes.getNamedItem('CallBellStatus').Text;
							/////////////////콜벨 20161231 KHS////////////////////////////////

              if GB_JON_VIEWWKIFNO then
              begin
								chkViewLevel.Checked := False;
              end else
              begin
								if lst_Result.item[0].attributes.getNamedItem('ViewLevel').Text = '1' then chkViewLevel.Checked := True
                                                                                      else chkViewLevel.Checked := False;
              end;

              if lst_Result.item[0].attributes.getNamedItem('CuOrderOption').Text = 'y' then
              begin
                lcsActiveEdit := 'meoStartArea';
                sActieEdit := 'meoStartArea';
                lbl_04.Tag := 1;
                pSetLabelClick(lbl_04);
                plbl_00Click(lbl_04);
              end;

              sWkFAge := lst_Result.item[0].attributes.getNamedItem('WkFromAge').Text;
              sWkTAge := lst_Result.item[0].attributes.getNamedItem('WkToAge').Text;
              if StrToIntDef(sWkFAge,0) > 0 then
              begin
                lblWkAge.Tag := 1;
                pSetLabelClick(lblWkAge);

                edtWkFAge.Text := sWkFAge;
                if StrToIntDef(sWkTAge,0) > 0 then
                  edtWkTAge.Text := sWkTAge
                else
                  edtWkTAge.Text := '99';
              end else
              if StrToIntDef(sWkTAge,0) > 0 then
							begin
                lblWkAge.Tag := 1;
                pSetLabelClick(lblWkAge);
                edtWkFAge.Text := '19';
                edtWkTAge.Text := sWkTAge;
              end else
              begin
                lblWkAge.Tag := 0;
                pSetLabelClick(lblWkAge);
              end;

              if lblWkAge.Tag = 1 then lblWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하'
                                  else lblWkAge.Hint := '';

							edtCuName.Text := lst_Result.item[0].attributes.getNamedItem('Name').Text;
              FChkCCI.Name := edtCuName.Text;

							sContent := StringReplace(lst_Result.item[0].attributes.getNamedItem('Info').Text, '|', '¶',  [rfReplaceAll]);
							if Trim(sContent) <> '' then
							begin
								ls_Rcrd := TStringList.Create;
								try
									GetTextSeperationEx2('¶', sContent, ls_Rcrd);
									meoCuCCMemo.Tag := 1;
									for ia := 0 to ls_Rcrd.Count - 1 do
									begin
                    if ia = ls_Rcrd.Count - 1 then meoCuCCMemo.Tag := 0;

										if ia = 0 then
											meoCuCCMemo.Text := ls_Rcrd[ia]
                    else
                      meoCuCCMemo.Text := meoCuCCMemo.Text + #13#10 + ls_Rcrd[ia];
                  end;
                finally
                  FreeAndNil(ls_Rcrd);
                end;
              end;
              FChkCCI.meoCuCCMemo  := meoCuCCMemo.Text;

              sTemp := lst_Result.item[0].attributes.getNamedItem('CbCuMemo').Text;
              if sTemp <> '' then
              begin
                if GB_365System then iH := 60
                                else iH := 0;

                edt_CardMemo.Width := 281 - iH;
                shpSimpleMemo.Width := 288 - iH;
                mmoCbMemo.Visible := True;
                mmoCbMemo.Text := sTemp;
                shpCBMemo.Visible := True;
              end;
              FChkCCI.meoCBMemo := mmoCbMemo.Text;

							sContent := StringReplace(lst_Result.item[0].attributes.getNamedItem('PdaInfo').Text, '|', '¶',  [rfReplaceAll]);
              if Trim(sContent) <> '' then
              begin
                ls_Rcrd := TStringList.Create;
                try
                  GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                  meoCuWorMemo.Tag := 1;
                  for ia := 0 to ls_Rcrd.Count - 1 do
                  begin
                    if ia = ls_Rcrd.Count - 1 then meoCuWorMemo.Tag := 0;
                    if ia = 0 then
											meoCuWorMemo.Text := ls_Rcrd[ia]
                    else
                      meoCuWorMemo.Text := meoCuWorMemo.Text + #13#10 + ls_Rcrd[ia];
                  end;
                finally
                  FreeAndNil(ls_Rcrd);
								end;
              end;
              FChkCCI.meoCuWorMemo := meoCuWorMemo.Text;

							sContent := StringReplace(lst_Result.item[0].attributes.getNamedItem('Memo').Text, '|', '¶',  [rfReplaceAll]);
							if Trim(sContent) <> '' then
							begin
								ls_Rcrd := TStringList.Create;
								try
									GetTextSeperationEx2('¶', sContent, ls_Rcrd);
									edt_CardMemo.Tag := 1;
									for ia := 0 to ls_Rcrd.Count - 1 do
									begin
										if ia = ls_Rcrd.Count - 1 then edt_CardMemo.Tag := 0;
										if ia = 0 then
											edt_CardMemo.Text := ls_Rcrd[ia]
										else
											edt_CardMemo.Text := edt_CardMemo.Text + #13#10 + ls_Rcrd[ia];
									end;
								finally
									FreeAndNil(ls_Rcrd);
								end;
							end;
							FChkCCI.edt_CardMemo := edt_CardMemo.Text;

              iBarIndex := StrtoIntDef(lst_Result.item[0].attributes.getNamedItem('CuType').Text, 0);
              FChkCCI.CbCuGb  := iBarIndex;

              ChkCuSmsNo.Tag := 1;
							if lst_Result.item[0].attributes.getNamedItem('SMS').Text = 'n' then ChkCuSmsNo.Checked := True else
							if lst_Result.item[0].attributes.getNamedItem('SMS').Text = 'y' then ChkCuSmsNo.Checked := False;
							ChkCuSmsNo.Tag := 0;

              lblCuMile.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CurMlg').Text, 0));
              if StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CurMlg').Text, 0) > 999999 then lblCuMile.Style.Font.Style := []
                                                                                                      else lblCuMile.Style.Font.Style := [fsBold];
              lblCuMileUnit.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('PrizeMlg').Text, 0));
              //지사설정 지금 단위
              lblCuMileCnt.Caption   := lst_Result.item[0].attributes.getNamedItem('PrizeCnt').Text;
              lblCuMileLost.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CuExpireMileage').Text, 0));

              sProdName := lst_Result.item[0].attributes.getNamedItem('Prize').Text;
              SetMileColorChange;

              // hjf-고객상황실설정(접수정보 조회)
              if Assigned(lst_Result.item[0].attributes.getNamedItem('BrTelYN')) then
                CustBrTelYN := lst_Result.item[0].attributes.getNamedItem('BrTelYN').Text;

              if (CustBrTelYN = 'y') then lblCenterMng.Tag := 1 else
              if (CustBrTelYN = '') and (iBarIndex = 1) and (GB_SHOPTYPE_CALLCENTER = 1) then lblCenterMng.Tag := 1 else
              if (CustBrTelYN = 'n') then lblCenterMng.Tag := 0;
              pSetLabelClick(lblCenterMng);

              SetPayMethod(PAY_METHOD_MONEY); // 현금

              // 법인코드
							cxtCuBubin.Hint := TRim(lst_Result.item[0].attributes.getNamedItem('BGroup').Text);
              FChkCCI.BuCode  := cxtCuBubin.Hint;

              sBGroup := TRim(lst_Result.item[0].attributes.getNamedItem('BGroup').Text);
              if (GS_PRJ_AREA = 'S') and (sBGroup <> '') and (locBRNO <> 'G898') and (locBRNO <> 'Q908') and (locBRNO <> 'H849') then
              begin
                shpTitle.Pen.Color := $00FE8769;   // 파란색
                shpTitle.Hint := ColorToString(shpTitle.Pen.Color);
              end;

							// + ',' + ed_MaddBrch.Text;
							if cxtCuBubin.Hint <> '' then
							begin
								sSel_BrNo := Proc_BRNOSearch;
                if ( sSel_BrNo <> locBRNO ) And ( GT_USERIF.HD = 'A1531' ) then
                begin
                  bTimeChk := False;
                  ls_msg := '접수창 지사[' + sSel_BrNo + ']와 조회 지사['+ locBRNO +']가 다릅니다' + #13#10 +
                            '고객번호에서 다시 엔터를 치세요';
                  Assert(False, 'JON01N.Proc_KeyNumberInsert - 법인명상이.' + cxtCuTel.Text + ' : '  + ls_msg);
                end;

                iBidx := GT_BUBIN_INFO.cbcode.IndexOf(Trim(cxtCuBubin.Hint) + ',' + locBRNO);
                if iBidx > -1 then
                begin
                  // 법인정보[법인명 + 부서명]
                  cxtCuBubin.Text := Trim(GT_BUBIN_INFO.cbCorpNm[iBidx]) + ' | ' + Trim(GT_BUBIN_INFO.cbDeptNm[iBidx]);
                  gsShortCoprNm[Self.Tag] := Trim(GT_BUBIN_INFO.cbSCorpNm[iBidx]) + ' | ' + Trim(GT_BUBIN_INFO.cbSDeptNm[iBidx]);  // 단축법인명/단축부서명
                  lblCuBubinName.Caption := '법인고객 [ ' + Trim(cxtCuBubin.Text) + ' ]';
                  iEnd := StrToIntDef(GT_BUBIN_INFO.cbPayMethod[iBidx], 1);

									if iBarIndex = 3 then
									begin
										if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '1' then
										begin
											ABubinStateIndex := 1;
										end else
										if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '2' then
										begin
											ABubinStateIndex := 2;
										end else
										begin
											ABubinStateIndex := 0;
										end;
									end else
									begin
										ABubinStateIndex := 0;
									end;

								{  if (GT_SEL_BRNO.HDNO = 'A1531') then
                  begin
										//코리아드라이브 외상, 카드 결제수단 제외 2015.07.27 KHS(김계명과장 요청)
									end else }   //예외처리 제거 20210721 KHS 팀장님 지시
									if ABubinStateIndex = 0 then  //법인 계약상태가 정상일 경우에만 결제수단 설정 20210721 KHS 팀장님지시
									begin
										if (iend = 0) and ((IsCardUseBranch_KCP(locBRNO) = '03') or (IsCardUseBranch_KCP(locBRNO) = '06')) then
                      SetPayMethod(PAY_METHOD_CARD_KCP)  // 외상에서 후불(카드)로변경 2021.05.21
                    else if (iend = 2) then
                      SetPayMethod(PAY_METHOD_POST_NML)  // 후불
                    else
                      SetPayMethod(PAY_METHOD_MONEY); // 현금
                  end;
                end else
                begin
                  if Length(Trim(cxtCuTel.Text)) < 3 then
                  begin
                    cxtCallTelNum.Text := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
                    cxtCuTel.Text      := cxtCallTelNum.Text;
                  end;
                  if tmHoTranRlt.Tag = 0 then
                  begin
                    pJON01Show(Self.Tag);
                    bTimeChk := False;
                    ls_msg := '조회된 고객의 법인정보[' + cxtCuBubin.Hint + ']가 없습니다.' + #13#10 + '(법인정보를 다시 조회합니다.)';
                    ShowMessage(ls_msg);
                    tmHoTranRlt.Tag := 1;
                    tmHoTranRlt.Interval := 100;
                    tmHoTranRlt.Enabled := True; // 자동조회 호출.
										Exit;
                  end	else
                  begin
                    bTimeChk := False;
                    ls_msg := '법인정보[' + cxtCuBubin.Hint + ']를 찾을 수 없습니다.'+ #13#10 +
                              '(대표번호와 법인정보를 확인 바랍니다.'+ #13#10 +
                              '법인정보 없이 오더를 등록합니다.';
                    pJON01ShowMessage(Self.Tag, 'B', ls_msg);
//                    ShowMessage(ls_msg);
                  end;
                end;
                tmHoTranRlt.Tag := 0;
              end;

              if Assigned(lst_Result.item[0].attributes.getNamedItem('MemoDisplayYn')) then     // 상담메모 자동 확장
                bMemoDisplay := lst_Result.item[0].attributes.getNamedItem('MemoDisplayYn').Text = 'y';

              if Assigned(lst_Result.item[0].attributes.getNamedItem('LimitUseYn')) then     // 법인개인이용한도사용여부
                bLimitUseYn := lst_Result.item[0].attributes.getNamedItem('LimitUseYn').Text = 'y';

              if Assigned(lst_Result.item[0].attributes.getNamedItem('CardPayFeeType')) then        // 카드결제수수료 타입{1:대리요금,2:기사입금액,3:카드결제금액}
                GS_CardPayFeeType[Self.Tag] := lst_Result.item[0].attributes.getNamedItem('CardPayFeeType').Text;

              if Assigned(lst_Result.item[0].attributes.getNamedItem('CardPayFeeValue')) then        // 카드결제수수료값
                GS_CardPayFeeValue[Self.Tag] := lst_Result.item[0].attributes.getNamedItem('CardPayFeeValue').Text;

              if bLimitUseYn then
              begin
                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbLimitDateNum')) then     // 법인기준일
                begin
                  lblLimitDateNum.Caption := Format('기준일 : %s일', [lst_Result.item[0].attributes.getNamedItem('CbLimitDateNum').Text]);
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbLimitCharge')) then  // 법인개인이용한도 금액
                begin
                  lblLimitCharge.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbLimitCharge').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbLimitCnt')) then    // 법인개인이용한도 횟수
                begin
                  lblLimitCnt.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbLimitCnt').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbUseCharge')) then  // 법인사용한도금액
                begin
                  lblUseCharge.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbUseCharge').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbUseCnt')) then     // 법인사용횟수
                begin
                  lblUseCnt.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbUseCnt').Text, 0));
                end;

//                if ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) > 0 ) Or ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) > 0 ) then
                begin
                  if ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblUseCnt.Caption), 0) > 0 ) And
                     ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) >= 0 ) And
                     ( StrToIntDef(RemoveComma(lblUseCnt.Caption)  , 0) >= 0 ) then
                    lblRemainCnt.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblUseCnt.Caption), 0))
                  else
                    lblRemainCnt.Caption := '0';

                  if ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblUseCharge.Caption), 0) > 0 ) And
                     ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) >= 0 ) And
                     ( StrToIntDef(RemoveComma(lblUseCharge.Caption  ), 0) >= 0 ) then
                    lblRemainCharge.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblUseCharge.Caption), 0))
                  else
                    lblRemainCharge.Caption := '0';

                  grpUseLimitV.Left := 295;
                  grpUseLimitV.Top  := 78;
                  grpUseLimitV.BringToFront;

                  grpUseLimitV.BringToFront;
                  grpUseLimitV.Visible := True;

                  btnUseLimitV.Visible := True;

                  if Assigned(lst_Result.item[0].attributes.getNamedItem('LimitOverYn')) then
                    gbLimitOverYn := lst_Result.item[0].attributes.getNamedItem('LimitOverYn').Text = 'y';

                  if ( (StrToIntDef(RemoveComma(lblLimitCnt.Caption ), 0) > 0) And
                       (StrToIntDef(RemoveComma(lblRemainCnt.Caption), 0) <= 0) )  Or
                     ( (StrToIntDef(RemoveComma(lblLimitCharge.Caption ), 0) > 0 ) And
                       (StrToIntDef(RemoveComma(lblRemainCharge.Caption), 0) <= 0 ) ) then
                  begin
                    bTimeChk := False;
                    bMsgView := True;
                    if gbLimitOverYn then
                    begin
                      GMessagebox(edtCuName.Text + '고객님은 법인 개인잔여한도를 모두 소진하였습니다.' + #13#10 +
                                  '[후불사용가능]', CDMSI)
                    end else
                      GMessagebox(edtCuName.Text + '고객님은 법인 개인잔여한도를 모두 소진하였습니다.' + #13#10 +
                                  '[후불사용불가]현금으로만 결제 됩니다.', CDMSI);
//                                  '[후불사용불가]현금 또는 카드로만 결제 됩니다.', CDMSI);
                  end else
                  if StrToIntDef(RemoveComma(lblRemainCnt.Caption), 0) = 1 then
                  begin
                    bTimeChk := False;
                    bMsgView := True;
                    GMessagebox(edtCuName.Text + '고객님의 법인 개인잔여한도는 이번이 마지막 이용 회자입니다.', CDMSI);
                  end else
                  if ( StrToIntDef(RemoveComma(lblRemainCharge.Caption), 0) < 10000 ) And
                     ( StrToIntDef(RemoveComma(lblRemainCharge.Caption), 0) > 0     ) then
                  begin
                    bTimeChk := False;
                    bMsgView := True;
                    if Application.MessageBox(PChar(Format('%s고객님의 법인 개인잔여한도 잔액이 %s원남았습니다.', [edtCuName.Text, lblRemainCharge.Caption]) + #13#10 +
                                              '현금 또는 카드로 복합결제 하시겠습니까?'), PChar(GS_APPNAME), MB_ICONQUESTION + MB_OKCANCEL) = IDOK then
                    begin
                      SetPayMethod(PAY_METHOD_MULTI); // 복합결제 강제 셋팅
                    end;
                  end;
                end;
                //------------------------------------------------ 부서이용한도
                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbDeptLimitCharge')) then  // 부서이용한도 금액
                begin
                  lblDLimitCharge.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbDeptLimitCharge').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbDeptLimitCnt')) then    // 부서이용한도 횟수
                begin
                  lblDLimitCnt.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbDeptLimitCnt').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbDeptUseCharge')) then  // 부서사용한도금액
                begin
                  lblDUseCharge.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbDeptUseCharge').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbDeptUseCnt')) then     // 부서사용횟수
                begin
                  lblDUseCnt.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbDeptUseCnt').Text, 0));
                end;

//                if ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) > 0 ) Or ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) > 0 ) then
                begin
                  if ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCnt.Caption), 0) > 0 ) And
                     ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) >= 0 ) And
                     ( StrToIntDef(RemoveComma(lblDUseCnt.Caption)  , 0) >= 0 ) then
                    lblDRemainCnt.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCnt.Caption), 0))
                  else
                    lblDRemainCnt.Caption := '0';

                  if ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCharge.Caption), 0) > 0 ) And
                     ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) >= 0 ) And
                     ( StrToIntDef(RemoveComma(lblDUseCharge.Caption  ), 0) >= 0 ) then
                    lblDRemainCharge.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCharge.Caption), 0))
                  else
                    lblDRemainCharge.Caption := '0';

                  grpUseLimitV.Left := 295;
                  grpUseLimitV.Top  := 78;
                  grpUseLimitV.BringToFront;

                  grpUseLimitV.BringToFront;
                  grpUseLimitV.Visible := True;

                  btnUseLimitV.Visible := True;

                  // 개인이용한도에서 메시지 표시했으면 부서이용한도는 표시 하지 않음
                  if Not bMsgView then
                  begin
                    if ( (StrToIntDef(RemoveComma(lblDLimitCnt.Caption ), 0) > 0) And
                         (StrToIntDef(RemoveComma(lblDRemainCnt.Caption), 0) <= 0) )  Or
                       ( (StrToIntDef(RemoveComma(lblDLimitCharge.Caption ), 0) > 0 ) And
                         (StrToIntDef(RemoveComma(lblDRemainCharge.Caption), 0) <= 0 ) ) then
                    begin
                      bTimeChk := False;
                      GMessagebox(edtCuName.Text + '고객님은 법인 부서잔여한도를 모두 소진하였습니다.' + #13#10 +
                                                   '[후불사용불가]현금으로만 결제 됩니다.', CDMSI);
                    end else
                    if StrToIntDef(RemoveComma(lblDRemainCnt.Caption), 0) = 1 then
                    begin
                      bTimeChk := False;
                      GMessagebox(edtCuName.Text + '고객님의 법인 부서잔여한도는 이번이 마지막 이용 회자입니다.', CDMSI);
                    end else
                    if ( StrToIntDef(RemoveComma(lblDRemainCharge.Caption), 0) < 10000 ) And
                       ( StrToIntDef(RemoveComma(lblDRemainCharge.Caption), 0) > 0     ) then
                    begin
                      bTimeChk := False;
                      if Application.MessageBox(PChar(Format('%s고객님의 법인 부서잔여한도 잔액이 %s원남았습니다.', [edtCuName.Text, lblDRemainCharge.Caption]) + #13#10 +
                                                '현금 또는 카드로 복합결제 하시겠습니까?'), PChar(GS_APPNAME), MB_ICONQUESTION + MB_OKCANCEL) = IDOK then
                      begin
                        SetPayMethod(PAY_METHOD_MULTI); // 복합결제 강제 셋팅
                      end;
                    end;
                  end;
                end;
              end else
              begin
                grpUseLimitV.Visible := False;
                btnUseLimitV.Visible := False;
              end;

              if AUseMileage then
              begin
                SetPayMethod(PAY_METHOD_POST_MILE); // 부산5천콜 후불마일 강제셋팅
                if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
                begin
                  UserMile := StrToIntDef(RemoveComma(lblCuMile.Caption), 0)
                            + StrToIntDef(RemoveComma(lblMoCuMile.Caption), 0);
                  edtPostPay.Value := IfThen(UserMile >= curRate.Value, curRate.Value, 10000);
                end	else
                begin
                  if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;

                  if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
                  begin
                    edtPostPay.Value := 0;
                    cxLblWkJAmt.Caption := '1,000';
                    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
                  end else
                  if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
                  begin
                    edtPostPay.Value := 0;
                    cxLblWkJAmt.Caption := '2,000';
                    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
                  end else
                  if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
                  begin
                    edtPostPay.Value := 0;
                    cxLblWkJAmt.Caption := '3,000';
                    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
                  end	else
                    edtPostPay.Value := curRate.Value;
                end;

                cbbPostTime.ItemIndex := 1;
                AppendPostDesc;
              end;

              CBCuGB.Hint := 'Clear';
              if (iBarIndex = 0) or (iBarIndex = 4) then
              begin
								CbCuGb.ItemIndex := 0;
								CbCuGb.Hint := '1';
                // 0:개인, 4:불량 둘다 일반으로 처리(불량코드는 사용안함)
              end	else
							if iBarIndex = 1 then
              begin
                CbCuGb.ItemIndex := 1;
                CbCuGb.Hint := '2';
              end else
              if iBarIndex = 3 then
              begin
                CbCuGb.ItemIndex := 2;
                CbCuGb.Hint := '3';
              end	else
							begin
                CbCuGb.ItemIndex := 0;
                CbCuGb.Hint := '1';
              end;
              CBCuGB.Hint := '';
              FChkCCI.CbCuGb  := CbCuGb.ItemIndex;

              // 고객수정 버튼 활성화.
							lcsCu_seq := lst_Result.item[0].attributes.getNamedItem('CuSeq').Text;
              pCompareCustInfo;
              if lcsCu_seq <> '' then
              begin
                miCuUpdate.Enabled := True;
              end else
              begin
                miCuUpdate.Enabled := False;

                edtCuName.Text 			 := FCustChangeInfo.name;

								if ( GBJON01_AUTO_UPSO_YN ) And ( Not isHandPhone(gsCuTelHint) ) then CbCuGb.ItemIndex := 1
                                                                                 else CbCuGb.ItemIndex := 0;
                CbCuGb.Hint          := '';
                meoCuCCMemo.Text 		 := FCustChangeInfo.meoCuCCMemo;
                meoCuWorMemo.Text    := FCustChangeInfo.meoCuWorMemo;
                edt_CardMemo.Text    := FCustChangeInfo.edt_CardMemo;
              end;
              sRet := 0; //고객정보에 출발지 내용이 있는지에대한 구분값
              eRet := 0; //고객정보에 도착지 내용이 있는지에대한 구분값

              if ( Not pbISStartEndXY ) then
              begin
                Try
                  if bOther then    //타업체에 등록된 오더가 있을경우
                  begin
                    if (sStaTmp1 <> '') and (sStaTmp2 <> '') and (sStaTmp3 <> '') and (sStaTmp4 <> '') and (sStaTmp5 <> '') and
                       (sStaX <> '') and (sStaY <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
                    begin
                      // 출발지 정보
                      lcsSta1 := sStaTmp1;
                      lcsSta2 := sStaTmp2;
                      lcsSta3 := sStaTmp3;
                      if sStaTmp4 <> '☆' then
                        cxtStartAreaDetail.Text := sStaTmp4
                      else
                        cxtStartAreaDetail.Text := '';
                      lcsConfAREA4 := sStaTmp4;

                      ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                      ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                      sTmp := func_StartAreaFunc(sStaTmp5);
                      cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
  //											cxtStartAreaDetail.Hint := sStaTmp5;

                      gJONStaChkXY.X := sStaX;
                      gJONStaChkXY.Y := sStaY;
                      gJONStaChkXY.GUIDE_X := sStaX;
                      gJONStaChkXY.GUIDE_Y := sStaY;

                      if (copy(sStaX,1,1) <> '0') and
                         (sStaX <> '')            then
                        cxtStartXval.Text := '0' + sStaX
                      else
                        cxtStartXval.Text := sStaX;
                      cxtStartYval.Text := sStaY;

                      gsStartGUIDEXval := cxtStartXval.Text;
                      gsStartGUIDEYval := cxtStartYval.Text;

                      lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                      SetDebugeWrite('JON01N.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                      // 출발지 세부지명
                      if Trim(cxtStartAreaDetail.Hint) <> '' then
                        meoStartArea.Text := cxtStartAreaDetail.Hint
                      else if Trim(cxtStartAreaDetail.Text) <> '' then
                        meoStartArea.Text := cxtStartAreaDetail.Text
                      else if Trim(lcsSta3) <> '' then
                        meoStartArea.Text := lcsSta3;

                      MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                      MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                      //고객정보에 출발지 내용이 있는지에대한 구분값
                      if Trim(meoStartArea.Text) = '' then
                      begin
                        sRet := 0;
                      end	else
                      begin
                        sRet := 1;
                        GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
    //-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX'] + ':' + lst_Result.item[0].attributes.getNamedItem('MapY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                      end;
                    end;

                    if (sEndTmp1 <> '') and (sEndTmp2 <> '') and (sEndTmp3 <> '') and {(sEndTmp4 <> '') and} (sEndTmp5 <> '') and
                       (sEndX <> '') and (sEndY <> '') then
                    begin
                      // 도착지 정보
                      lcsEnd1 := sEndTmp1;
                      lcsEnd2 := sEndTmp2;
                      lcsEnd3 := sEndTmp3;
                      cxtEndAreaDetail.Caption := sEndTmp4;
                      cxtEndAreaDetail.Hint := sEndTmp5;

                      gJONEndChkXY.X := sEndX;
                      gJONEndChkXY.Y := sEndY;
                      gJONEndChkXY.GUIDE_X := sEndX;
                      gJONEndChkXY.GUIDE_Y := sEndY;

                      if (copy(sEndX,1,1) <> '0') and
                         (sEndX <> '')            then
                        cxtEndXval.Text := '0' + sEndX
                      else
                        cxtEndXval.Text := sEndX;
                      cxtEndYval.Text := sEndY;

                      gsEndGUIDEXval :=	cxtEndXval.Text;
                      gsEndGUIDEYval := cxtEndYval.Text;

                      lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                      cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                      SetDebugeWrite('JON01N.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                      // 도착지 세부지명
                      if Trim(cxtEndAreaDetail.Hint) <> '' then
                        meoEndArea.Text := cxtEndAreaDetail.Hint
                      else
                      if Trim(lcsEnd3) <> '' then
                        meoEndArea.Text := lcsEnd3;

                      MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                      //고객정보에 도착지 내용이 있는지에대한 구분값
                      if Trim(meoEndArea.Text) = '' then
                      begin
                        eRet := 0;
                      end else
                      begin
                        eRet := 1;
                        GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
    //-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX'] + ':' + lst_Result.item[0].attributes.getNamedItem('DestY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                      end;
                    end;
                  end	else
                  begin
                    // 20120805 좌표 오류 체크 LYB
										if (Trim(lst_Result.item[0].attributes.getNamedItem('Area').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area2').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area3').Text) <> '') and
//											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area4').Text) <> '') and    //신성현차장님 요청 2019.01.30
											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area5').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('MapX').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('MapY').Text) <> '') then
										begin
											gJONStaChkXY.Area1 := lst_Result.item[0].attributes.getNamedItem('Area').Text;
											gJONStaChkXY.Area2 := lst_Result.item[0].attributes.getNamedItem('Area2').Text;
											gJONStaChkXY.Area3 := lst_Result.item[0].attributes.getNamedItem('Area3').Text;
											gJONStaChkXY.Area4 := lst_Result.item[0].attributes.getNamedItem('Area4').Text;
											gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
											gJONStaChkXY.X := lst_Result.item[0].attributes.getNamedItem('MapX').Text;
											gJONStaChkXY.Y := lst_Result.item[0].attributes.getNamedItem('MapY').Text;
											gJONStaChkXY.GUIDE_X := lst_Result.item[0].attributes.getNamedItem('MapX').Text;
											gJONStaChkXY.GUIDE_Y := lst_Result.item[0].attributes.getNamedItem('MapY').Text;
											gJONStaChkXY.Gubun := 'C';

                      // 출발지 정보
											lcsSta1 := lst_Result.item[0].attributes.getNamedItem('Area').Text;
											lcsSta2 := lst_Result.item[0].attributes.getNamedItem('Area2').Text;
											lcsSta3 := lst_Result.item[0].attributes.getNamedItem('Area3').Text;
											cxtStartAreaDetail.Text := lst_Result.item[0].attributes.getNamedItem('Area4').Text;
											lcsConfAREA4 := lst_Result.item[0].attributes.getNamedItem('Area4').Text;

											///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
											///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
											sTmp := func_StartAreaFunc(lst_Result.item[0].attributes.getNamedItem('Area5').Text);
                      cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
  //											cxtStartAreaDetail.Hint := lst_Result.item[0].attributes.getNamedItem('Area5'];

											gJONStaChkXY.X := lst_Result.item[0].attributes.getNamedItem('MapX').Text;
											gJONStaChkXY.Y := lst_Result.item[0].attributes.getNamedItem('MapY').Text;

											gJONStaChkXY.GUIDE_X := lst_Result.item[0].attributes.getNamedItem('MapX').Text;
											gJONStaChkXY.GUIDE_Y := lst_Result.item[0].attributes.getNamedItem('MapY').Text;

											if (copy(lst_Result.item[0].attributes.getNamedItem('MapX').Text,1,1) <> '0') and
												 (lst_Result.item[0].attributes.getNamedItem('MapX').Text <> '')            then
												cxtStartXval.Text := '0' + lst_Result.item[0].attributes.getNamedItem('MapX').Text
											else
												cxtStartXval.Text := lst_Result.item[0].attributes.getNamedItem('MapX').Text;
											cxtStartYval.Text := lst_Result.item[0].attributes.getNamedItem('MapY').Text;

                      gsStartGUIDEXval := cxtStartXval.Text;
                      gsStartGUIDEYval := cxtStartYval.Text;

                      lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                      SetDebugeWrite('JON01N.lblStartAreaName.Text 13779 : ' + lblStartAreaName.Text);

                      // 출발지 세부지명
                      if Trim(cxtStartAreaDetail.Hint) <> '' then
                        meoStartArea.Text := cxtStartAreaDetail.Hint
                      else if Trim(cxtStartAreaDetail.Text) <> '' then
                        meoStartArea.Text := cxtStartAreaDetail.Text
                      else if Trim(lcsSta3) <> '' then
                        meoStartArea.Text := lcsSta3;

                      MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                      MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                      //고객정보에 출발지 내용이 있는지에대한 구분값
                      if Trim(meoStartArea.Text) = '' then
                      begin
                        sRet := 0;
                      end	else
                      begin
                        sRet := 1;
                        GS_Grid_DEP := 'C'; //고객정보에 출발지 내용
  //-    						  		changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX'] + ':' + lst_Result.item[0].attributes.getNamedItem('MapY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                      end;
                    end;
                    // 도착지 정보
										if (Trim(lst_Result.item[0].attributes.getNamedItem('EdArea').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('EdArea2').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('EdArea3').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('EdArea5').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('DestX').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('DestY').Text) <> '') then
										begin
											lcsEnd1 := lst_Result.item[0].attributes.getNamedItem('EdArea').Text;
											lcsEnd2 := lst_Result.item[0].attributes.getNamedItem('EdArea2').Text;
											lcsEnd3 := lst_Result.item[0].attributes.getNamedItem('EdArea3').Text;
											cxtEndAreaDetail.Caption := lst_Result.item[0].attributes.getNamedItem('EdArea4').Text;
											cxtEndAreaDetail.Hint := lst_Result.item[0].attributes.getNamedItem('EdArea5').Text;

											gJONEndChkXY.X := lst_Result.item[0].attributes.getNamedItem('DestX').Text;
											gJONEndChkXY.Y := lst_Result.item[0].attributes.getNamedItem('DestY').Text;

											gJONEndChkXY.GUIDE_X := lst_Result.item[0].attributes.getNamedItem('DestX').Text;
											gJONEndChkXY.GUIDE_Y := lst_Result.item[0].attributes.getNamedItem('DestY').Text;

											if (copy(lst_Result.item[0].attributes.getNamedItem('DestX').Text,1,1) <> '0') and
												 (lst_Result.item[0].attributes.getNamedItem('DestX').Text <> '')            then
												cxtEndXval.Text := '0' + lst_Result.item[0].attributes.getNamedItem('DestX').Text
											else
												cxtEndXval.Text := lst_Result.item[0].attributes.getNamedItem('DestX').Text;
											cxtEndYval.Text := lst_Result.item[0].attributes.getNamedItem('DestY').Text;

                      gsEndGUIDEXval :=	cxtEndXval.Text;
                      gsEndGUIDEYval := cxtEndYval.Text;

                      lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                      cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                      SetDebugeWrite('JON01N.cxReEndArea.Text 13828 : ' + cxReEndArea.Text);

                      // 도착지 세부지명
                      if Trim(cxtEndAreaDetail.Hint) <> '' then
                        meoEndArea.Text := cxtEndAreaDetail.Hint
                      else
                        if Trim(lcsEnd3) <> '' then
                        meoEndArea.Text := lcsEnd3;

                      MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                      //고객정보에 도착지 내용이 있는지에대한 구분값
                      if Trim(meoEndArea.Text) = '' then
                      begin
                        eRet := 0;
                      end	else
                      begin
                        eRet := 1;
                        GS_Grid_DES := 'C'; //고객정보에 도착지 내용
    //-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX'] + ':' + lst_Result.item[0].attributes.getNamedItem('DestY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                      end;
                    end;
                  end;
                except
                  on e: exception do
                  begin
                    bTimeChk := False;
                    ls_TxLoad := 'Jon01N[출발지 정보 조회오류]:' + e.Message;
                    Assert(False, E.Message);
                    GMessagebox(PChar(ls_TxLoad), CDMSE);
                    Screen.Cursor := crDefault;
                  end;
                end;
              end	else
              begin
                if bOther then    //타업체에 등록된 오더가 있을경우
                begin
                  if (sStaTmp1 <> '') and (sStaTmp2 <> '') and (sStaTmp3 <> '') and (sStaTmp4 <> '') and (sStaTmp5 <> '') and
                     (sStaX <> '') and (sStaY <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
                  begin
                    // 출발지 정보
                    lcsSta1 := sStaTmp1;
                    lcsSta2 := sStaTmp2;
                    lcsSta3 := sStaTmp3;
                    if sStaTmp4 <> '☆' then
                      cxtStartAreaDetail.Text := sStaTmp4
                    else
                      cxtStartAreaDetail.Text := '';
                    lcsConfAREA4            := sStaTmp4;

                    ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                    ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                    sTmp := func_StartAreaFunc(sStaTmp5);
                    cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
  //										cxtStartAreaDetail.Hint := sStaTmp5;

                    gJONStaChkXY.X := sStaX;
                    gJONStaChkXY.Y := sStaY;
                    gJONStaChkXY.GUIDE_X := sStaX;
                    gJONStaChkXY.GUIDE_Y := sStaY;

                    if (copy(sStaX,1,1) <> '0') and
                       (sStaX <> '')            then
                      cxtStartXval.Text := '0' + sStaX
                    else
                      cxtStartXval.Text := sStaX;
                    cxtStartYval.Text := sStaY;

                    gsStartGUIDEXval := cxtStartXval.Text;
                    gsStartGUIDEYval := cxtStartYval.Text;

                    lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                    SetDebugeWrite('JON01N.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                    // 출발지 세부지명
                    if Trim(cxtStartAreaDetail.Hint) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Hint
                    else if Trim(cxtStartAreaDetail.Text) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Text
                    else if Trim(lcsSta3) <> '' then
                      meoStartArea.Text := lcsSta3;

                    MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                    MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                    //고객정보에 출발지 내용이 있는지에대한 구분값
                    if Trim(meoStartArea.Text) = '' then
                    begin
                      sRet := 0;
                    end	else
                    begin
                      sRet := 1;
                      GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
  //-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX'] + ':' + lst_Result.item[0].attributes.getNamedItem('MapY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;

                  if (sEndTmp1 <> '') and (sEndTmp2 <> '') and (sEndTmp3 <> '') and {(sEndTmp4 <> '') and} (sEndTmp5 <> '') and
                     (sEndX <> '') and (sEndY <> '') then
                  begin
                    // 도착지 정보
                    lcsEnd1 := sEndTmp1;
                    lcsEnd2 := sEndTmp2;
                    lcsEnd3 := sEndTmp3;
                    cxtEndAreaDetail.Caption := sEndTmp4;
                    cxtEndAreaDetail.Hint := sEndTmp5;

                    gJONEndChkXY.X := sEndX;
                    gJONEndChkXY.Y := sEndY;
                    gJONEndChkXY.GUIDE_X := sEndX;
                    gJONEndChkXY.GUIDE_Y := sEndY;

                    if (copy(sEndX,1,1) <> '0') and
                       (sEndX <> '')            then
                      cxtEndXval.Text := '0' + sEndX
                    else
                      cxtEndXval.Text := sEndX;
                    cxtEndYval.Text := sEndY;

                    gsEndGUIDEXval :=	cxtEndXval.Text;
                    gsEndGUIDEYval := cxtEndYval.Text;

                    lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                    cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                    SetDebugeWrite('JON01N.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                    // 도착지 세부지명
                    if Trim(cxtEndAreaDetail.Hint) <> '' then
                      meoEndArea.Text := cxtEndAreaDetail.Hint
                    else
                    if Trim(lcsEnd3) <> '' then
                      meoEndArea.Text := lcsEnd3;

                    MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                    //고객정보에 도착지 내용이 있는지에대한 구분값
                    if Trim(meoEndArea.Text) = '' then eRet := 0
                    else eRet := 1;
                    if Trim(meoEndArea.Text) = '' then
                    begin
                      eRet := 0;
                    end else
                    begin
                      eRet := 1;
                      GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
  //-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX'] + ':' + lst_Result.item[0].attributes.getNamedItem('DestY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;
                end
              end;
              //-------------------------------------------------------------------------------------------
              //      과거내역을 가지고 취소율, 지사별 설정값에 의한 고객등급 결정
              //-------------------------------------------------------------------------------------------
              Try
	  						iend := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('EndCnt').Text, 0);
	  						iCancel := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('CancelCnt').Text, 0);
                iTotal := iEnd + iCancel;
                lblCuCntTotal.Caption := IntToStr(iTotal);
                lblCoCntTotal.Caption := IntToStr(iend);
                if (iTotal) > 0 then
                begin
                  fcancelRate := ((iCancel / (iend + iCancel)) * 100);
                  lblCuCancelR.Caption := IntToStr(Round(fCancelRate)) + '%';
                end	else
                begin
                  lblCuCancelR.Caption := '0%';
                end;
              except
                on e: exception do
                begin
                  bTimeChk := False;
                  ls_TxLoad := 'Jon01N[과거내역]:' + e.Message;
                  Assert(False, E.Message);
                  GMessagebox(PChar(ls_TxLoad), CDMSE);
                  Screen.Cursor := crDefault;
                end;
              end;

              // 고객등급사용구분[0:자동등급, 1:직접설정]
	  					iGrade1 := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Grade1').Text, 5);
	  					iGrade2 := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Grade2').Text, 15);

              if iEnd >= iGrade1 then
              begin
                // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
                Proc_SetFormColor_2(0);
              end else
              if iEnd >= iGrade2 then
              begin
                // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
                Proc_SetFormColor_2(1);
              end else
              begin
                // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
                Proc_SetFormColor_2(2);
              end;

							SetCustLevelSeq(True, lst_Result.item[0].attributes.getNamedItem('LevelCD').Text);
							FChkCCI.CbLevel := cboCuLevel.ItemIndex;

              // 고객 구분에 따른 색상 표시
              if (iBarIndex = 0) or (iBarIndex = 2) then
                Proc_SetFormColor_3(0)
              else if iBarIndex = 1 then
                Proc_SetFormColor_3(1)
              else if iBarIndex = 3 then
                Proc_SetFormColor_3(3);

              //2013.03.30 khs
	  					sAppCode        := lst_Result.item[0].attributes.getNamedItem('AppCode').Text;
	  					sAppLastRegDate := lst_Result.item[0].attributes.getNamedItem('AppLastRegDate').Text;
	  					sAppLastDelDate := lst_Result.item[0].attributes.getNamedItem('AppLastDelDate').Text;
	  					sAppLastFinishDate := lst_Result.item[0].attributes.getNamedItem('AppLastFinishDate').Text;
	  					sAppCuArea      := lst_Result.item[0].attributes.getNamedItem('AppCuArea').Text;
	  					sAppTermModel   := lst_Result.item[0].attributes.getNamedItem('AppGroup').Text + '/'
                               + lst_Result.item[0].attributes.getNamedItem('AppTermOS').Text + '/'
                               + lst_Result.item[0].attributes.getNamedItem('AppTermModel').Text;
	  					sAppTermOS      := lst_Result.item[0].attributes.getNamedItem('AppVersion').Text;
	  					if lst_Result.item[0].attributes.getNamedItem('AppDelYn').Text = 'y' then sAppDelYn := '어플삭제'
	  					                                                                     else sAppDelYn := '어플사용';

	  					if sAppCode = '' then btnCustAppinfo.Enabled := False
                               else btnCustAppinfo.Enabled := True;

              SetCustAppInfo(
                  sAppCode
                , sAppLastRegDate
                , sAppLastDelDate
                , sAppLastFinishDate
                , sAppCuArea
                , sAppTermModel
                , sAppTermOS
                , sAppDelYn
              );

							grpBubinState.Visible := False;
							trmBubinState.Enabled := False;
							if iBarIndex = 3 then
							begin
								if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '1' then
								begin
									lbBubinStateName.Caption := '법인계약 해지되어';
									lbBubinStateName2.Visible := True;
									lbBubinStateMemo.Caption := lst_Result.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
									grpBubinState.BringToFront;
									grpBubinState.Visible := True;
									trmBubinState.Enabled := True;
									ABubinStateIndex := 1;
								end else
								if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '2' then
								begin
									lbBubinStateName.Caption := '법인계약 해지되어';
									lbBubinStateName2.Visible := True;
									lbBubinStateMemo.Caption := lst_Result.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
									grpBubinState.BringToFront;
									grpBubinState.Visible := True;
									ABubinStateIndex := 2;
								end else
  //                if lst_Result.item[0].attributes.getNamedItem('TaxType'] = '0' then
                begin
									lbBubinStateName.Caption := '정상이용';
									lbBubinStateName2.Visible := False;
                  lbBubinStateMemo.Caption := lst_Result.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
                  grpBubinState.Visible := False;
									trmBubinState.Enabled := False;
									ABubinStateIndex := 0;
                end;
							end else
              begin
								lbBubinStateName.Caption := '정상이용';
								lbBubinStateName2.Visible := False;
                lbBubinStateMemo.Caption := lst_Result.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
								grpBubinState.Visible := False;
                trmBubinState.Enabled := False;
								ABubinStateIndex := 0;
							end;

              //================================= 고객정보 Display End. =====================================
            except
              on e: exception do
              begin
                bTimeChk := False;
                ls_TxLoad := 'Jon01N[고객 조회오류]:' + e.Message;
                Assert(False, E.Message);
                GMessagebox(PChar(ls_TxLoad), CDMSE);
                Screen.Cursor := crDefault;
              end;
            end;
          end	else
					if StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Gubun').Text, 2) = 1 then     //기사로 검색
	  			begin
						chk_AIReCall.Properties.ReadOnly := True;  //기사는 제외
						chk_AIReCall.checked := False;

						frm_Main.Proc_CidLog(98, '기사'); // 로그 기록.

            gsSvrWkHp := '';
	  				lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Driver');
 						gsSvrWkHp := Trim(lst_Result.item[0].attributes.getNamedItem('WkHp').Text);
	  				wk_br_Name := lst_Result.item[0].attributes.getNamedItem('BrName').Text
							+ '(' + lst_Result.item[0].attributes.getNamedItem('BrNo').Text + ')';
						FWk_sabun := lst_Result.item[0].attributes.getNamedItem('Sabun').Text;
						wk_Name := lst_Result.item[0].attributes.getNamedItem('Name').Text;

						Frm_Main.Frm_Jon012[Self.Tag].sFinishCnt := lst_Result.item[0].attributes.getNamedItem('FinishCnt').text;
	  				Frm_Main.Frm_Jon012[Self.Tag].sCancelCnt := lst_Result.item[0].attributes.getNamedItem('CancelCnt').text;
	  				Frm_Main.Frm_Jon012[Self.Tag].sPhone_info := lst_Result.item[0].attributes.getNamedItem('TermInfo').text;

	  				// 조회기사 사번, 기사지사코드 저장.
						locWkSabun := FWk_sabun; // 기사사번
	  				locWkBrNo := lst_Result.item[0].attributes.getNamedItem('BrNo').Text;
              // 지사코드
//  -					cxLblSeaWkSabun.Hint := wk_sabun; // 기사사번
            cxtWorkerNm.Text := wk_Name;

            Proc_SetFormColor_3(9); // 기사 지정칼라로 바 세팅한다.
            if bOther then    //타업체에 등록된 오더가 있을경우
            begin
              // 출발지 정보
              lcsSta1 := sStaTmp1;
              lcsSta2 := sStaTmp2;
              lcsSta3 := sStaTmp3;
              if sStaTmp4 <> '☆' then
                cxtStartAreaDetail.Text := sStaTmp4
              else
                cxtStartAreaDetail.Text := '';
              lcsConfAREA4            := sStaTmp4;

              ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
              ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
              sTmp := func_StartAreaFunc(sStaTmp5);
              cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
  //							cxtStartAreaDetail.Hint := sStaTmp5;

              gJONStaChkXY.X := sStaX;
              gJONStaChkXY.Y := sStaY;
              gJONStaChkXY.GUIDE_X := sStaX;
              gJONStaChkXY.GUIDE_Y := sStaY;

              if (copy(sStaX,1,1) <> '0') and
                 (sStaX <> '')            then
                cxtStartXval.Text := '0' + sStaX
              else
                cxtStartXval.Text := sStaX;
              cxtStartYval.Text := sStaY;

              gsStartGUIDEXval := cxtStartXval.Text;
              gsStartGUIDEYval := cxtStartYval.Text;

              lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
              SetDebugeWrite('JON01N.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

              // 출발지 세부지명
              if Trim(cxtStartAreaDetail.Hint) <> '' then
                meoStartArea.Text := cxtStartAreaDetail.Hint
              else if Trim(cxtStartAreaDetail.Text) <> '' then
                meoStartArea.Text := cxtStartAreaDetail.Text
              else if Trim(lcsSta3) <> '' then
                meoStartArea.Text := lcsSta3;

              MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
              MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

              //고객정보에 출발지 내용이 있는지에대한 구분값
              if Trim(meoStartArea.Text) = '' then
              begin
                sRet := 0;
              end	else
              begin
                sRet := 1;
                GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
  //-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX'] + ':' + lst_Result.item[0].attributes.getNamedItem('MapY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
              end;

              // 도착지 정보
              lcsEnd1 := sEndTmp1;
              lcsEnd2 := sEndTmp2;
              lcsEnd3 := sEndTmp3;
              cxtEndAreaDetail.Caption := sEndTmp4;
              cxtEndAreaDetail.Hint := sEndTmp5;

              gJONEndChkXY.X := sEndX;
              gJONEndChkXY.Y := sEndY;
              gJONEndChkXY.GUIDE_X := sEndX;
              gJONEndChkXY.GUIDE_Y := sEndY;

              if (copy(sEndX,1,1) <> '0') and
                 (sEndX <> '')            then
                cxtEndXval.Text := '0' + sEndX
              else
                cxtEndXval.Text := sEndX;
              cxtEndYval.Text := sEndY;

              gsEndGUIDEXval :=	cxtEndXval.Text;
              gsEndGUIDEYval := cxtEndYval.Text;

              lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

              cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
              SetDebugeWrite('JON01N.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

              // 도착지 세부지명
              if Trim(cxtEndAreaDetail.Hint) <> '' then
                meoEndArea.Text := cxtEndAreaDetail.Hint
              else
                if Trim(lcsEnd3) <> '' then
                meoEndArea.Text := lcsEnd3;

              MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

              //고객정보에 도착지 내용이 있는지에대한 구분값
              if Trim(meoEndArea.Text) = '' then eRet := 0
              else eRet := 1;
              if Trim(meoEndArea.Text) = '' then
              begin
                eRet := 0;
              end else
              begin
                eRet := 1;
                GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
  //-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX'] + ':' + lst_Result.item[0].attributes.getNamedItem('DestY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
              end;
            end;
          end else
					if StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Gubun').Text, 2) = 0 then     //전체 20130519 KHS
          begin
            Try
              frm_Main.Proc_CidLog(98, '기사'); // 로그 기록.      0일때는 무조건 기사로 등록
              Frm_Main.Frm_JON03[Jon03Tag].pnlBubin.Visible := False;

	  					lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Customer');

              //AI 아웃바운드 옵션 배차지연콜 사용여부 20190716 KHS
              sAIOB := lst_Result.item[0].attributes.getNamedItem('AiOutOption').Text;
              if (sAIOB = 'y') or (sAIOB = '') then
              begin
                sTmp := Proc_MainKeyNumberSearch;
                if not GetAIOBKeyNumberYN(sTmp) then   //고객이 선택되어 있어도 지사의 대표번호에서 사용안하면 체크해제
                begin
                  chk_AIReCall.Properties.ReadOnly := True;
                  chk_AIReCall.checked := False;
                end else chk_AIReCall.checked := True;
              end else chk_AIReCall.checked := False;
              //AI 아웃바운드 옵션 배차지연콜 사용여부 20190716 KHS

              iCarType := StrtoIntDef(lst_Result.item[0].attributes.getNamedItem('CarType').Text, 2);
              if iCarType = 1 then cb_CarType.ItemIndex := 0 else cb_CarType.ItemIndex := 1;

              if Assigned(lst_Result.item[0].attributes.getNamedItem('CustInDate')) then
              begin
                sTemp := lst_Result.item[0].attributes.getNamedItem('CustInDate').Text;
								lblCustInDate .Caption := Copy(sTemp, 3, Length(sTemp)-2);
              end;

              /////////////////콜벨 20161231 KHS////////////////////////////////
              iBarIndex := StrtoIntDef(lst_Result.item[0].attributes.getNamedItem('CuType').Text, 0);
              if lst_Result.item[0].attributes.getNamedItem('CallBellStatus').Text = '1' then  //콜벨상태(1:정상, 2:해지, null: 콜벨 업소 설정 없음)
              begin
                pnlCallBell.BringToFront;
                pnlCallBell.Visible := True;
								pnlCallBell.Top  := CbCuGb.Top - 4;
                pnlCallBell.Left := cxtCuBubin.Left;
                pnlCallBell.Color := $00804000;

                pnlCallBellAll.Top := 0;
                pnlCallBellAll.Left := 0;
                pnlCallBellAll.Width := 312;
                pnlCallBellAll.Height := grpTop2.Height;
                pnlCallBellAll.BringToFront;
                pnlCallBellAll.Visible := True;
                if cxLblCIDUseFlg.Hint = 'CID' then
                begin
                  lbUpsoPee.Caption := '콜벨 업소 - 콜링';
                  pnlCallBell.Caption := '+++++콜벨 업소 - 콜링+++++';
                end	else
                begin
                  lbUpsoPee.Caption := '콜벨 업소';
                  pnlCallBell.Caption := '+++++++콜벨 업소+++++++';
                end;

                tmUpsoPnl.Interval := 3000;
                tmUpsoPnl.Enabled := True;
              end	else
              begin
                if (iBarIndex = 1) and (lst_Result.item[0].attributes.getNamedItem('CuMileValue').Text <> '0')
                                   and (lst_Result.item[0].attributes.getNamedItem('CuMileValue').Text <> '')   //업소일경우
																	 and (lst_Result.item[0].attributes.getNamedItem('CallBellStatus').Text = '1') then  //콜벨상태(1:정상
                begin
                  pnlCallBell.BringToFront;
                  pnlCallBell.Visible := True;
                  pnlCallBell.Top  := CbCuGb.Top - 4;
                  pnlCallBell.Left := cxtCuBubin.Left;
                  pnlCallBell.Color := $000B5AFF;

                  pnlCallBellAll.Top := 0;
                  pnlCallBellAll.Left := 0;
                  pnlCallBellAll.Width := 308;
                  pnlCallBellAll.Height := grpTop2.Height;
                  pnlCallBellAll.BringToFront;
                  pnlCallBellAll.Visible := True;

                  tmUpsoPnl.Interval := 3000;
                  tmUpsoPnl.Enabled := True;

                  lbUpsoName.Caption := lst_Result.item[0].attributes.getNamedItem('Name').Text;

                  if lst_Result.item[0].attributes.getNamedItem('CuMileType').Text = '1' then
                    lbUpsoPee.Caption := '+++일정금액 / ' + StrToMoney(lst_Result.item[0].attributes.getNamedItem('CuMileValue').Text) + '원+++'
                  else if lst_Result.item[0].attributes.getNamedItem('CuMileType').Text = '2' then
                    lbUpsoPee.Caption := '+++매출비율 / ' + lst_Result.item[0].attributes.getNamedItem('CuMileValue').Text + '%+++'
                  else
                    lbUpsoPee.Caption := '';

                  pnlCallBell.Caption := lbUpsoPee.Caption;
                end	else
                begin
                  pnlCallBell.Visible := False;
                  pnlCallBellAll.Visible := False;
                  tmUpsoPnl.Enabled := False;
                end;
              end;
              pnlCallBell.Hint := lst_Result.item[0].attributes.getNamedItem('CallBellStatus').Text;
              lbUpsoName.Caption := lst_Result.item[0].attributes.getNamedItem('Name').Text;
              /////////////////콜벨 20161231 KHS////////////////////////////////
              if GB_JON_VIEWWKIFNO then
              begin
                chkViewLevel.Checked := False;
              end else
              begin
                if lst_Result.item[0].attributes.getNamedItem('ViewLevel').Text = '1' then chkViewLevel.Checked := True
                                                                                      else chkViewLevel.Checked := False;
              end;

              if lst_Result.item[0].attributes.getNamedItem('CuOrderOption').Text = 'y' then
              begin
                lcsActiveEdit := 'meoStartArea';
                lbl_04.Tag := 1;
                pSetLabelClick(lbl_04);
                plbl_00Click(lbl_04);
              end;

              sWkFAge := lst_Result.item[0].attributes.getNamedItem('WkFromAge').Text;
              sWkTAge := lst_Result.item[0].attributes.getNamedItem('WkToAge').Text;
              if StrToIntDef(sWkFAge,0) > 0 then
              begin
                lblWkAge.Tag := 1;
                pSetLabelClick(lblWkAge);
                edtWkFAge.Text := sWkFAge;
                if StrToIntDef(sWkTAge,0) > 0 then
                  edtWkTAge.Text := sWkTAge
                else
                  edtWkTAge.Text := '99';
              end else
              if StrToIntDef(sWkTAge,0) > 0 then
              begin
                lblWkAge.Tag := 1;
                pSetLabelClick(lblWkAge);
                edtWkFAge.Text := '19';
                edtWkTAge.Text := sWkTAge;
              end else
              begin
                lblWkAge.Tag := 0;
                pSetLabelClick(lblWkAge);
              end;

              if lblWkAge.Tag = 1 then lblWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하'
                                  else lblWkAge.Hint := '';

              edtCuName.Text := lst_Result.item[0].attributes.getNamedItem('Name').Text;
              FChkCCI.Name := edtCuName.Text;

              sContent := StringReplace(lst_Result.item[0].attributes.getNamedItem('Info').Text, '|', '¶', [rfReplaceAll]);
              if Trim(sContent) <> '' then
              begin
                ls_Rcrd := TStringList.Create;
                try
                  GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                  meoCuCCMemo.Tag := 1;
                  for ia := 0 to ls_Rcrd.Count - 1 do
                  begin
                    if ia = ls_Rcrd.Count - 1 then meoCuCCMemo.Tag := 0;

                    if ia = 0 then
                      meoCuCCMemo.Text := ls_Rcrd[ia]
                    else
                      meoCuCCMemo.Text := meoCuCCMemo.Text + #13#10 + ls_Rcrd[ia];
                  end;
                finally
                  FreeAndNil(ls_Rcrd);
                end;
              end;
              FChkCCI.meoCuCCMemo  := meoCuCCMemo.Text;

              sTemp := lst_Result.item[0].attributes.getNamedItem('CbCuMemo').Text;
              if sTemp <> '' then
              begin
                edt_CardMemo.Width := 281;
                shpSimpleMemo.Width := 288;
                mmoCbMemo.Visible := True;
                mmoCbMemo.Text := sTemp;
                shpCBMemo.Visible := True;
              end;
              FChkCCI.meoCBMemo := mmoCbMemo.Text;

              sContent := StringReplace(lst_Result.item[0].attributes.getNamedItem('PdaInfo').Text, '|', '¶', [rfReplaceAll]);
              if Trim(sContent) <> '' then
              begin
                ls_Rcrd := TStringList.Create;
                try
                  GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                  meoCuWorMemo.Tag := 1;
                  for ia := 0 to ls_Rcrd.Count - 1 do
                  begin
                    if ia = ls_Rcrd.Count - 1 then meoCuWorMemo.Tag := 0;
                    if ia = 0 then
                      meoCuWorMemo.Text := ls_Rcrd[ia]
                    else
                      meoCuWorMemo.Text := meoCuWorMemo.Text + #13#10 + ls_Rcrd[ia];
                  end;
                finally
                  FreeAndNil(ls_Rcrd);
                end;
              end;
              FChkCCI.meoCuWorMemo := meoCuWorMemo.Text;

              sContent := StringReplace(lst_Result.item[0].attributes.getNamedItem('Memo').Text, '|', '¶', [rfReplaceAll]);
              if Trim(sContent) <> '' then
              begin
                ls_Rcrd := TStringList.Create;
                try
                  GetTextSeperationEx2('¶', sContent, ls_Rcrd);
                  edt_CardMemo.Tag := 1;
                  for ia := 0 to ls_Rcrd.Count - 1 do
                  begin
                    if ia = ls_Rcrd.Count - 1 then edt_CardMemo.Tag := 0;
                    if ia = 0 then
                      edt_CardMemo.Text := ls_Rcrd[ia]
                    else
                      edt_CardMemo.Text := edt_CardMemo.Text + #13#10 + ls_Rcrd[ia];
                  end;
                finally
                  FreeAndNil(ls_Rcrd);
                end;
              end;
              FChkCCI.edt_CardMemo := edt_CardMemo.Text;

							iBarIndex := StrtoIntDef(lst_Result.item[0].attributes.getNamedItem('CuType').Text, 0);
              FChkCCI.CbCuGb  := iBarIndex;

              ChkCuSmsNo.Tag := 1;
              if lst_Result.item[0].attributes.getNamedItem('SMS').Text = 'n' then ChkCuSmsNo.Checked := True else
              if lst_Result.item[0].attributes.getNamedItem('SMS').Text = 'y' then ChkCuSmsNo.Checked := False;
              ChkCuSmsNo.Tag := 0;

              lblCuMile.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CurMlg').Text, 0));
              if StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CurMlg').Text, 0) > 999999 then lblCuMile.Style.Font.Style := []
                                                                                                      else lblCuMile.Style.Font.Style := [fsBold];
              lblCuMileUnit.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('PrizeMlg').Text, 0));
              //지사설정 지금 단위
              lblCuMileCnt.Caption   := lst_Result.item[0].attributes.getNamedItem('PrizeCnt').Text;
              sProdName := lst_Result.item[0].attributes.getNamedItem('Prize').Text;
              SetMileColorChange;

              lblCuMileLost.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CuExpireMileage').Text, 0));

              // hjf-고객상황실설정(접수정보 조회)
	  						if Assigned(lst_Result.item[0].attributes.getNamedItem('BrTelYN')) then
                CustBrTelYN := lst_Result.item[0].attributes.getNamedItem('BrTelYN').Text;

              if (CustBrTelYN = 'y') then lblCenterMng.Tag := 1 else
              if (CustBrTelYN = '') and (iBarIndex = 1) and (GB_SHOPTYPE_CALLCENTER = 1) then lblCenterMng.Tag := 1;
              if (CustBrTelYN = 'n') then lblCenterMng.Tag := 0;
              pSetLabelClick(lblCenterMng);

              SetPayMethod(PAY_METHOD_MONEY); // 현금

              // 법인코드
              cxtCuBubin.Hint := TRim(lst_Result.item[0].attributes.getNamedItem('BGroup').Text);
              sBGroup := TRim(lst_Result.item[0].attributes.getNamedItem('BGroup').Text);
              if (GS_PRJ_AREA = 'S') and (sBGroup <> '') and (locBRNO <> 'G898') and (locBRNO <> 'Q908') and (locBRNO <> 'H849') then
              begin
                shpTitle.Pen.Color := $00FE8769;   // 파란색
                shpTitle.Hint := ColorToString(shpTitle.Pen.Color);
              end;

              // + ',' + ed_MaddBrch.Text;
              if cxtCuBubin.Hint <> '' then
              begin
                sSel_BrNo := Proc_BRNOSearch;
                if ( sSel_BrNo <> locBRNO ) And ( GT_USERIF.HD = 'A1531' ) then
                begin
                  bTimeChk := False;
                  ls_msg := '접수창 지사[' + sSel_BrNo + ']와 조회 지사['+ locBRNO +']가 다릅니다' + #13#10 +
                            '고객번호에서 다시 엔터를 치세요';
  //                    Application.MessageBox(PChar(ls_msg), GS_APPNAME, MB_OK);
                  Assert(False, 'JON01N.Proc_KeyNumberInsert - 법인명상이.' + cxtCuTel.Text + ' : '  + ls_msg);
  //                    Exit;
                end;
                iBidx := GT_BUBIN_INFO.cbcode.IndexOf(Trim(cxtCuBubin.Hint) + ',' + locBRNO);
                if iBidx > -1 then
                begin
                  // 법인정보[법인명 + 부서명]
                  cxtCuBubin.Text := Trim(GT_BUBIN_INFO.cbCorpNm[iBidx]) + ' | ' + Trim(GT_BUBIN_INFO.cbDeptNm[iBidx]);
                  gsShortCoprNm[Self.Tag] := Trim(GT_BUBIN_INFO.cbSCorpNm[iBidx]) + ' | ' + Trim(GT_BUBIN_INFO.cbSDeptNm[iBidx]);  // 단축법인명/단축부서명
                  lblCuBubinName.Caption := '법인고객 [ ' + Trim(cxtCuBubin.Text) + ' ]';
                  iEnd := StrToIntDef(GT_BUBIN_INFO.cbPayMethod[iBidx], 1);

									if iBarIndex = 3 then
									begin
										if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '1' then
										begin
											ABubinStateIndex := 1;
										end else
										if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '2' then
										begin
											ABubinStateIndex := 2;
										end else
										begin
											ABubinStateIndex := 0;
										end;
									end else
									begin
										ABubinStateIndex := 0;
									end;

								{  if (GT_SEL_BRNO.HDNO = 'A1531') then
									begin
										//코리아드라이브 외상, 카드 결제수단 제외 2015.07.27 KHS(김계명과장 요청)
									end else }   //예외처리 제거 20210721 KHS 팀장님 지시
									if ABubinStateIndex = 0 then  //법인 계약상태가 정상일 경우에만 결제수단 설정 20210721 KHS 팀장님지시
									begin
										if (iend = 0) and ((IsCardUseBranch_KCP(locBRNO) = '03') or (IsCardUseBranch_KCP(locBRNO) = '06')) then
											SetPayMethod(PAY_METHOD_CARD_KCP)  // 외상에서 후불(카드)로변경 2021.05.21
                    else if (iend = 2) then
											SetPayMethod(PAY_METHOD_POST_NML)  // 후불
                    else
											SetPayMethod(PAY_METHOD_MONEY); // 현금
                  end;
                end	else
                begin
                  if Length(Trim(cxtCuTel.Text)) < 3 then
                  begin
                    cxtCallTelNum.Text := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
                    cxtCuTel.Text      := cxtCallTelNum.Text;
                  end;
                  if tmHoTranRlt.Tag = 0 then
                  begin
                    pJON01Show(Self.Tag);
                    ls_msg := '조회된 고객의 법인정보[' + cxtCuBubin.Hint + ']가 없습니다.'+ #13#10 + '(법인정보를 다시 조회합니다.)';
                    ShowMessage(ls_msg);
                    tmHoTranRlt.Tag := 1;
                    tmHoTranRlt.Interval := 100;
                    tmHoTranRlt.Enabled := True; // 자동조회 호출.
                    Exit;
                  end	else
                  begin
                    bTimeChk := False;
                    ls_msg := '법인정보[' + cxtCuBubin.Hint + ']를 찾을 수 없습니다.'+ #13#10 +
                              '(대표번호와 법인정보를 확인 바랍니다.'+ #13#10 +
                              '법인정보 없이 오더를 등록합니다.';
                    pJON01ShowMessage(Self.Tag, 'B', ls_msg);
//                    ShowMessage(ls_msg);
                  end;
                end;
                tmHoTranRlt.Tag := 0;
              end;

              if Assigned(lst_Result.item[0].attributes.getNamedItem('MemoDisplayYn')) then     // 상담메모 자동 확장
                bMemoDisplay := lst_Result.item[0].attributes.getNamedItem('MemoDisplayYn').Text = 'y';

              if Assigned(lst_Result.item[0].attributes.getNamedItem('LimitUseYn')) then     // 법인개인이용한도사용여부
                bLimitUseYn := lst_Result.item[0].attributes.getNamedItem('LimitUseYn').Text = 'y';

              if Assigned(lst_Result.item[0].attributes.getNamedItem('CardPayFeeType')) then        // 카드결제수수료 타입{1:대리요금,2:기사입금액,3:카드결제금액}
                GS_CardPayFeeType[Self.Tag] := lst_Result.item[0].attributes.getNamedItem('CardPayFeeType').Text;

              if Assigned(lst_Result.item[0].attributes.getNamedItem('CardPayFeeValue')) then        // 카드결제수수료값
                GS_CardPayFeeValue[Self.Tag] := lst_Result.item[0].attributes.getNamedItem('CardPayFeeValue').Text;

              if bLimitUseYn then
              begin
                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbLimitDateNum')) then     // 법인기준일
                begin
                  lblLimitDateNum.Caption := Format('기준일 : %s일', [lst_Result.item[0].attributes.getNamedItem('CbLimitDateNum').Text]);
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbLimitCharge')) then  // 법인개인이용한도 금액
                begin
                  lblLimitCharge.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbLimitCharge').Text, 0));
//                  lblLimitCharge.Caption := '100000';
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbLimitCnt')) then    // 법인개인이용한도 횟수
                begin
                  lblLimitCnt.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbLimitCnt').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbUseCharge')) then  // 법인사용한도금액
                begin
                  lblUseCharge.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbUseCharge').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbUseCnt')) then     // 법인사용횟수
                begin
                  lblUseCnt.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbUseCnt').Text, 0));
                end;

//                if ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) > 0 ) Or ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) > 0 ) then
                begin
                  if ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblUseCnt.Caption), 0) > 0 ) And
                     ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) >= 0 ) And
                     ( StrToIntDef(RemoveComma(lblUseCnt.Caption)  , 0) >= 0 ) then
                    lblRemainCnt.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblUseCnt.Caption), 0))
                  else
                    lblRemainCnt.Caption := '0';

                  if ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblUseCharge.Caption), 0) > 0 ) And
                     ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) >= 0 ) And
                     ( StrToIntDef(RemoveComma(lblUseCharge.Caption  ), 0) >= 0 ) then
                    lblRemainCharge.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblUseCharge.Caption), 0))
                  else
                    lblRemainCharge.Caption := '0';

                  grpUseLimitV.Left := 295;
                  grpUseLimitV.Top  := 78;
                  grpUseLimitV.BringToFront;

                  grpUseLimitV.BringToFront;
                  grpUseLimitV.Visible := True;

                  btnUseLimitV.Visible := True;

                  if Assigned(lst_Result.item[0].attributes.getNamedItem('LimitOverYn')) then
                    gbLimitOverYn := lst_Result.item[0].attributes.getNamedItem('LimitOverYn').Text = 'y';

                  if ( (StrToIntDef(RemoveComma(lblLimitCnt.Caption ), 0) > 0) And
                       (StrToIntDef(RemoveComma(lblRemainCnt.Caption), 0) <= 0) )  Or
                     ( (StrToIntDef(RemoveComma(lblLimitCharge.Caption ), 0) > 0 ) And
                       (StrToIntDef(RemoveComma(lblRemainCharge.Caption), 0) <= 0 ) ) then
                  begin
                    bTimeChk := False;
                    bMsgView := True;
                    if gbLimitOverYn then
                    begin
                      GMessagebox(edtCuName.Text + '고객님은 법인 개인잔여한도를 모두 소진하였습니다.' + #13#10 +
                                  '[후불사용가능]', CDMSI);
                    end else
                      GMessagebox(edtCuName.Text + '고객님은 법인 개인잔여한도를 모두 소진하였습니다.' + #13#10 +
                                  '[후불사용불가]현금으로만 결제 됩니다.', CDMSI);
//                                  '[후불사용불가]현금 또는 카드로만 결제 됩니다.', CDMSI);
                  end else
                  if StrToIntDef(RemoveComma(lblRemainCnt.Caption), 0) = 1 then
                  begin
                    bTimeChk := False;
                    bMsgView := True;
                    GMessagebox(edtCuName.Text + '고객님의 법인 개인잔여한도는 이번이 마지막 이용 회자입니다.', CDMSI);
                  end else
                  if ( StrToIntDef(RemoveComma(lblRemainCharge.Caption), 0) < 10000 ) And
                     ( StrToIntDef(RemoveComma(lblRemainCharge.Caption), 0) > 0     ) then
                  begin
                    bTimeChk := False;
                    bMsgView := True;
                    if Application.MessageBox(PChar(Format('%s고객님의 법인 개인잔여한도 잔액이 %s원남았습니다.', [edtCuName.Text, lblRemainCharge.Caption]) + #13#10 +
                                              '현금 또는 카드로 복합결제 하시겠습니까?'), PChar(GS_APPNAME), MB_ICONQUESTION + MB_OKCANCEL) = IDOK then
                    begin
                      SetPayMethod(PAY_METHOD_MULTI); // 복합결제 강제 셋팅
                    end;
                  end;
                end;

                //------------------------------------------------ 부서이용한도
                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbDeptLimitCharge')) then  // 부서이용한도 금액
                begin
                  lblDLimitCharge.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbDeptLimitCharge').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbDeptLimitCnt')) then    // 부서이용한도 횟수
                begin
                  lblDLimitCnt.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbDeptLimitCnt').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbDeptUseCharge')) then  // 부서사용한도금액
                begin
                  lblDUseCharge.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbDeptUseCharge').Text, 0));
                end;

                if Assigned(lst_Result.item[0].attributes.getNamedItem('CbDeptUseCnt')) then     // 부서사용횟수
                begin
                  lblDUseCnt.Caption := FormatFloat('#,##0', StrToFloatDef(lst_Result.item[0].attributes.getNamedItem('CbDeptUseCnt').Text, 0));
                end;

//                if ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) > 0 ) Or ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) > 0 ) then
                begin
                  if ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCnt.Caption), 0) > 0 ) And
                     ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) >= 0 ) And
                     ( StrToIntDef(RemoveComma(lblDUseCnt.Caption)  , 0) >= 0 ) then
                    lblDRemainCnt.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCnt.Caption), 0))
                  else
                    lblDRemainCnt.Caption := '0';

                  if ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCharge.Caption), 0) > 0 ) And
                     ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) >= 0 ) And
                     ( StrToIntDef(RemoveComma(lblDUseCharge.Caption  ), 0) >= 0 ) then
                    lblDRemainCharge.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCharge.Caption), 0))
                  else
                    lblDRemainCharge.Caption := '0';

                  grpUseLimitV.Left := 295;
                  grpUseLimitV.Top  := 78;
                  grpUseLimitV.BringToFront;

                  grpUseLimitV.BringToFront;
                  grpUseLimitV.Visible := True;

                  btnUseLimitV.Visible := True;

                  // 개인이용한도에서 메시지 표시했으면 부서이용한도는 표시 하지 않음
                  if Not bMsgView then
                  begin
                    if ( (StrToIntDef(RemoveComma(lblDLimitCnt.Caption ), 0) > 0) And
                         (StrToIntDef(RemoveComma(lblDRemainCnt.Caption), 0) <= 0) )  Or
                       ( (StrToIntDef(RemoveComma(lblDLimitCharge.Caption ), 0) > 0 ) And
                         (StrToIntDef(RemoveComma(lblDRemainCharge.Caption), 0) <= 0 ) ) then
                    begin
                      bTimeChk := False;
                      GMessagebox(edtCuName.Text + '고객님은 법인 부서잔여한도를 모두 소진하였습니다.' + #13#10 +
                                                   '[후불사용불가]현금으로만 결제 됩니다.', CDMSI);
                    end else
                    if StrToIntDef(RemoveComma(lblDRemainCnt.Caption), 0) = 1 then
                    begin
                      bTimeChk := False;
                      GMessagebox(edtCuName.Text + '고객님의 법인 부서잔여한도는 이번이 마지막 이용 회자입니다.', CDMSI);
                    end else
                    if ( StrToIntDef(RemoveComma(lblDRemainCharge.Caption), 0) < 10000 ) And
                       ( StrToIntDef(RemoveComma(lblDRemainCharge.Caption), 0) > 0     ) then
                    begin
                      bTimeChk := False;
                      if Application.MessageBox(PChar(Format('%s고객님의 법인 부서잔여한도 잔액이 %s원남았습니다.', [edtCuName.Text, lblDRemainCharge.Caption]) + #13#10 +
                                                '현금 또는 카드로 복합결제 하시겠습니까?'), PChar(GS_APPNAME), MB_ICONQUESTION + MB_OKCANCEL) = IDOK then
                      begin
                        SetPayMethod(PAY_METHOD_MULTI); // 복합결제 강제 셋팅
                      end;
                    end;
                  end;
                end;
              end else
              begin
                grpUseLimitV.Visible := False;
                btnUseLimitV.Visible := False;
              end;

              if AUseMileage then
              begin
                SetPayMethod(PAY_METHOD_POST_MILE); // 부산5천콜 후불마일 강제셋팅
                if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
                begin
                  UserMile := StrToIntDef(StringReplace(lblCuMile.Caption,',','',[rfReplaceAll]), 0)
                            + StrToIntDef(StringReplace(lblMoCuMile.Caption,',','',[rfReplaceAll]), 0);
                  edtPostPay.Value := IfThen(UserMile >= curRate.Value, curRate.Value, 10000);
                end	else
                begin
                  if Not pJON01Dock.bUNDock then pJON01Dock.HDNO := GT_SEL_BRNO.HDNO;
                  if (cbbPayMethod.Text = PAY_METHOD_BUSAN) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트2K 20140221 KHS
                  begin
                    edtPostPay.Value := 0;
                    cxLblWkJAmt.Caption := '1,000';
                    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
                  end else
                  if (cbbPayMethod.Text = PAY_METHOD_BUSAN2K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
                  begin
                    edtPostPay.Value := 0;
                    cxLblWkJAmt.Caption := '2,000';
                    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
                  end else
                  if (cbbPayMethod.Text = PAY_METHOD_BUSAN3K) and (GS_PRJ_AREA = 'O') AND ((GT_USERIF.ShareNo = 'G03') or (pJON01Dock.HDNO = 'A100')) then //부산연합하트3K 20141007 KHS
                  begin
                    edtPostPay.Value := 0;
                    cxLblWkJAmt.Caption := '3,000';
                    if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;
                  end else
                    edtPostPay.Value := curRate.Value;
                end;
                cbbPostTime.ItemIndex := 1;
                AppendPostDesc;
              end;

							CBCuGB.Hint := 'Clear';
              if (iBarIndex = 0) or (iBarIndex = 4) then
              begin
                CbCuGb.ItemIndex := 0;
                CbCuGb.Hint := '1';
                // 0:개인, 4:불량 둘다 일반으로 처리(불량코드는 사용안함)
              end	else
              if iBarIndex = 1 then
              begin
                CbCuGb.ItemIndex := 1;
                CbCuGb.Hint := '2';
              end else
              if iBarIndex = 3 then
              begin
                CbCuGb.ItemIndex := 2;
								CbCuGb.Hint := '3';
              end	else
              begin
                CbCuGb.ItemIndex := 0;
                CbCuGb.Hint := '1';
              end;
              CBCuGB.Hint := '';
              FChkCCI.CbCuGb  := CbCuGb.ItemIndex;

              // 고객수정 버튼 활성화.
							lcsCu_seq := lst_Result.item[0].attributes.getNamedItem('CuSeq').Text;
              pCompareCustInfo;
              if lcsCu_seq <> '' then
              begin
                miCuUpdate.Enabled := True;
              end	else
              begin
                miCuUpdate.Enabled := False;

                edtCuName.Text 			 := FCustChangeInfo.name;
								CbCuGb.ItemIndex     := 0;
                CbCuGb.Hint          := '';
                meoCuCCMemo.Text 		 := FCustChangeInfo.meoCuCCMemo;
                meoCuWorMemo.Text    := FCustChangeInfo.meoCuWorMemo;
                edt_CardMemo.Text    := FCustChangeInfo.edt_CardMemo;
              end;
              sRet := 0; //고객정보에 출발지 내용이 있는지에대한 구분값
              eRet := 0; //고객정보에 도착지 내용이 있는지에대한 구분값

              if ( Not pbISStartEndXY ) then  // 출발지/도착지에 자료가 있는지 여부 체크 후 없으면 표시  20130724  LYB
              begin
                Try
                  if bOther then    //타업체에 등록된 오더가 있을경우
                  begin
                    if (sStaTmp1 <> '') and (sStaTmp2 <> '') and (sStaTmp3 <> '') and (sStaTmp4 <> '') and (sStaTmp5 <> '') and
                       (sStaX <> '') and (sStaY <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
                    begin
                      // 출발지 정보
                      lcsSta1 := sStaTmp1;
                      lcsSta2 := sStaTmp2;
                      lcsSta3 := sStaTmp3;
                      if sStaTmp4 <> '☆' then
                        cxtStartAreaDetail.Text := sStaTmp4
                      else
                        cxtStartAreaDetail.Text := '';
                      lcsConfAREA4            := sStaTmp4;

                      ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                      ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                      sTmp := func_StartAreaFunc(sStaTmp5);
                      cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
    //										cxtStartAreaDetail.Hint := sStaTmp5;

                      gJONStaChkXY.X := sStaX;
                      gJONStaChkXY.Y := sStaY;
                      gJONStaChkXY.GUIDE_X := sStaX;
                      gJONStaChkXY.GUIDE_Y := sStaY;

                      if (copy(sStaX,1,1) <> '0') and
                         (sStaX <> '')            then
                        cxtStartXval.Text := '0' + sStaX
                      else
                        cxtStartXval.Text := sStaX;
                      cxtStartYval.Text := sStaY;

                      gsStartGUIDEXval := cxtStartXval.Text;
                      gsStartGUIDEYval := cxtStartYval.Text;

                      lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                      SetDebugeWrite('JON01N.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                      // 출발지 세부지명
                      if Trim(cxtStartAreaDetail.Hint) <> '' then
                        meoStartArea.Text := cxtStartAreaDetail.Hint
                      else if Trim(cxtStartAreaDetail.Text) <> '' then
                        meoStartArea.Text := cxtStartAreaDetail.Text
                      else if Trim(lcsSta3) <> '' then
                        meoStartArea.Text := lcsSta3;

                      MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                      MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                      //고객정보에 출발지 내용이 있는지에대한 구분값
                      if Trim(meoStartArea.Text) = '' then
                      begin
                        sRet := 0;
                      end	else
                      begin
                        sRet := 1;
                        GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
    //-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX'] + ':' + lst_Result.item[0].attributes.getNamedItem('MapY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                        end;
                    end;

                    if (sEndTmp1 <> '') and (sEndTmp2 <> '') and (sEndTmp3 <> '') and {(sEndTmp4 <> '') and} (sEndTmp5 <> '') and
                       (sEndX <> '') and (sEndY <> '') then
                    begin
                      // 도착지 정보
                      lcsEnd1 := sEndTmp1;
                      lcsEnd2 := sEndTmp2;
                      lcsEnd3 := sEndTmp3;
                      cxtEndAreaDetail.Caption := sEndTmp4;
                      cxtEndAreaDetail.Hint := sEndTmp5;

                      gJONEndChkXY.X := sEndX;
                      gJONEndChkXY.Y := sEndY;
                      gJONEndChkXY.GUIDE_X := sEndX;
                      gJONEndChkXY.GUIDE_Y := sEndY;

                      if (copy(sEndX,1,1) <> '0') and
                         (sEndX <> '')            then
                        cxtEndXval.Text := '0' + sEndX
                      else
                        cxtEndXval.Text := sEndX;
                      cxtEndYval.Text := sEndY;

                      gsEndGUIDEXval :=	cxtEndXval.Text;
                      gsEndGUIDEYval := cxtEndYval.Text;

                      lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                      cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                      SetDebugeWrite('JON01N.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                      // 도착지 세부지명
                      if Trim(cxtEndAreaDetail.Hint) <> '' then
                        meoEndArea.Text := cxtEndAreaDetail.Hint
                      else
                        if Trim(lcsEnd3) <> '' then
                        meoEndArea.Text := lcsEnd3;

                      MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                      //고객정보에 도착지 내용이 있는지에대한 구분값
                      if Trim(meoEndArea.Text) = '' then eRet := 0
                      else eRet := 1;
                      if Trim(meoEndArea.Text) = '' then
                      begin
                        eRet := 0;
                      end else
                      begin
                        eRet := 1;
                        GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
    //-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX'] + ':' + lst_Result.item[0].attributes.getNamedItem('DestY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                      end;
                    end;
                  end	else
                  begin
										if (Trim(lst_Result.item[0].attributes.getNamedItem('Area').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area2').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area3').Text) <> '') and    //POI명 있어야 근배가능
//											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area4').Text) <> '') and //신성현차장님 요청 2019.01.30
											 (Trim(lst_Result.item[0].attributes.getNamedItem('Area5').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('MapX').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('MapY').Text) <> '') then
										begin
											// 20120805 좌표 오류 체크 LYB
											gJONStaChkXY.Area1 := lst_Result.item[0].attributes.getNamedItem('Area').Text;
											gJONStaChkXY.Area2 := lst_Result.item[0].attributes.getNamedItem('Area2').Text;
											gJONStaChkXY.Area3 := lst_Result.item[0].attributes.getNamedItem('Area3').Text;
											gJONStaChkXY.Area4 := lst_Result.item[0].attributes.getNamedItem('Area4').Text;
											gJONStaChkXY.Area5 := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
											gJONStaChkXY.X := lst_Result.item[0].attributes.getNamedItem('MapX').Text;
											gJONStaChkXY.Y := lst_Result.item[0].attributes.getNamedItem('MapY').Text;
											gJONStaChkXY.GUIDE_X := lst_Result.item[0].attributes.getNamedItem('MapX').Text;
											gJONStaChkXY.GUIDE_Y := lst_Result.item[0].attributes.getNamedItem('MapY').Text;
											gJONStaChkXY.Gubun := 'C';

                      lcsSta1 := lst_Result.item[0].attributes.getNamedItem('Area').Text;
                      lcsSta2 := lst_Result.item[0].attributes.getNamedItem('Area2').Text;
                      lcsSta3 := lst_Result.item[0].attributes.getNamedItem('Area3').Text;
                      cxtStartAreaDetail.Text := lst_Result.item[0].attributes.getNamedItem('Area4').Text;
                      lcsConfAREA4            := lst_Result.item[0].attributes.getNamedItem('Area4').Text;

                      ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                      ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                      sTmp := func_StartAreaFunc(lst_Result.item[0].attributes.getNamedItem('Area5').Text);
                      cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
  //										cxtStartAreaDetail.Hint := lst_Result.item[0].attributes.getNamedItem('Area5').Text;

                      if (copy(lst_Result.item[0].attributes.getNamedItem('MapX').Text,1,1) <> '0') and
                         (lst_Result.item[0].attributes.getNamedItem('MapX').Text <> '')            then
                        cxtStartXval.Text := '0' + lst_Result.item[0].attributes.getNamedItem('MapX').Text
                      else
                        cxtStartXval.Text := lst_Result.item[0].attributes.getNamedItem('MapX').Text;
                      cxtStartYval.Text := lst_Result.item[0].attributes.getNamedItem('MapY').Text;

                      gsStartGUIDEXval := cxtStartXval.Text;
                      gsStartGUIDEYval := cxtStartYval.Text;

                      lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                      SetDebugeWrite('JON01N.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                      // 출발지 세부지명
                      if Trim(cxtStartAreaDetail.Hint) <> '' then
                        meoStartArea.Text := cxtStartAreaDetail.Hint
                      else if Trim(cxtStartAreaDetail.Text) <> '' then
                        meoStartArea.Text := cxtStartAreaDetail.Text
                      else if Trim(lcsSta3) <> '' then
                        meoStartArea.Text := lcsSta3;

                      MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                      MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                      //고객정보에 출발지 내용이 있는지에대한 구분값
                      if Trim(meoStartArea.Text) = '' then
                      begin
                        sRet := 0;
                      end	else
                      begin
                        sRet := 1;
                        GS_Grid_DEP := 'C'; //고객정보에 출발지 내용
    //-    						  		changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX'] + ':' + lst_Result.item[0].attributes.getNamedItem('MapY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                      end;
                    end;
										if (Trim(lst_Result.item[0].attributes.getNamedItem('EdArea').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('EdArea2').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('EdArea3').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('EdArea5').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('DestX').Text) <> '') and
											 (Trim(lst_Result.item[0].attributes.getNamedItem('DestY').Text) <> '') then
										begin
                      // 도착지 정보
                      lcsEnd1 := lst_Result.item[0].attributes.getNamedItem('EdArea').Text;
                      lcsEnd2 := lst_Result.item[0].attributes.getNamedItem('EdArea2').Text;
                      lcsEnd3 := lst_Result.item[0].attributes.getNamedItem('EdArea3').Text;
                      cxtEndAreaDetail.Caption := lst_Result.item[0].attributes.getNamedItem('EdArea4').Text;
                      cxtEndAreaDetail.Hint := lst_Result.item[0].attributes.getNamedItem('EdArea5').Text;

                      gJONEndChkXY.X := lst_Result.item[0].attributes.getNamedItem('DestX').Text;
                      gJONEndChkXY.Y := lst_Result.item[0].attributes.getNamedItem('DestY').Text;

                      gJONEndChkXY.GUIDE_X := lst_Result.item[0].attributes.getNamedItem('DestX').Text;
                      gJONEndChkXY.GUIDE_Y := lst_Result.item[0].attributes.getNamedItem('DestY').Text;

                      if (copy(lst_Result.item[0].attributes.getNamedItem('DestX').Text,1,1) <> '0') and
                         (lst_Result.item[0].attributes.getNamedItem('DestX').Text <> '')            then
                        cxtEndXval.Text := '0' + lst_Result.item[0].attributes.getNamedItem('DestX').Text
                      else
                        cxtEndXval.Text := lst_Result.item[0].attributes.getNamedItem('DestX').Text;
                      cxtEndYval.Text := lst_Result.item[0].attributes.getNamedItem('DestY').Text;

                      gsEndGUIDEXval :=	cxtEndXval.Text;
                      gsEndGUIDEYval := cxtEndYval.Text;

                      lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                      cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                      SetDebugeWrite('JON01N.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                      // 도착지 세부지명
                      if Trim(cxtEndAreaDetail.Hint) <> '' then
                        meoEndArea.Text := cxtEndAreaDetail.Hint
                      else
                        if Trim(lcsEnd3) <> '' then
                        meoEndArea.Text := lcsEnd3;

                      MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                      //고객정보에 도착지 내용이 있는지에대한 구분값
                      if Trim(meoEndArea.Text) = '' then eRet := 0
                      else eRet := 1;
                      if Trim(meoEndArea.Text) = '' then
                      begin
                        eRet := 0;
                      end else
                      begin
                        eRet := 1;
                        GS_Grid_DES := 'C'; //고객정보에 도착지 내용
    //-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX'] + ':' + lst_Result.item[0].attributes.getNamedItem('DestY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                      end;
                    end;
                  end;
                except
                  on e: exception do
                  begin
                    bTimeChk := False;
                    ls_TxLoad := 'Jon01N[출발지 정보 조회오류]:' + e.Message;
                    Assert(False, E.Message);
                    GMessagebox(PChar(ls_TxLoad), CDMSE);
                    Screen.Cursor := crDefault;
                  end;
                end;
              end else
              begin
                if bOther then    //타업체에 등록된 오더가 있을경우
                begin
                  if (sStaTmp1 <> '') and (sStaTmp2 <> '') and (sStaTmp3 <> '') and (sStaTmp4 <> '') and (sStaTmp5 <> '') and
                     (sStaX <> '') and (sStaY <> '') then  //출발지 모든 데이터가 있어야 자동 셋팅 2017.06.25 KHS
                  begin
                    // 출발지 정보
                    lcsSta1 := sStaTmp1;
                    lcsSta2 := sStaTmp2;
                    lcsSta3 := sStaTmp3;
                    if sStaTmp4 <> '☆' then
                      cxtStartAreaDetail.Text := sStaTmp4
                    else
                      cxtStartAreaDetail.Text := '';
                    lcsConfAREA4            := sStaTmp4;

                    ///고객 저장된 출발지입력값에서 특성값 제거  후붛, 즉후, 탁송, 정장, 경유 20181126KHS  탁송)
                    ///탁확)스틱)적요)경유)정장) 콜무)   결제관련 제외 ♥]♥♥]♥♥♥] 후불)즉후)법후)
                    sTmp := func_StartAreaFunc(sStaTmp5);
                    cxtStartAreaDetail.Hint := sTmp;   //출발지 입력값
    //									cxtStartAreaDetail.Hint := sStaTmp5;

                    gJONStaChkXY.X := sStaX;
                    gJONStaChkXY.Y := sStaY;
                    gJONStaChkXY.GUIDE_X := sStaX;
                    gJONStaChkXY.GUIDE_Y := sStaY;

                    if (copy(sStaX,1,1) <> '0') and
                       (sStaX <> '')            then
                      cxtStartXval.Text := '0' + sStaX
                    else
                      cxtStartXval.Text := sStaX;
                    cxtStartYval.Text := sStaY;

                    gsStartGUIDEXval := cxtStartXval.Text;
                    gsStartGUIDEYval := cxtStartYval.Text;

                    lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                    SetDebugeWrite('JON01N.lblStartAreaName.Text 14322 : ' + lblStartAreaName.Text);

                    // 출발지 세부지명
                    if Trim(cxtStartAreaDetail.Hint) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Hint
                    else if Trim(cxtStartAreaDetail.Text) <> '' then
                      meoStartArea.Text := cxtStartAreaDetail.Text
                    else if Trim(lcsSta3) <> '' then
                      meoStartArea.Text := lcsSta3;

                    MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
                    MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

                    //고객정보에 출발지 내용이 있는지에대한 구분값
                    if Trim(meoStartArea.Text) = '' then
                    begin
                      sRet := 0;
                    end	else
                    begin
                      sRet := 1;
                      GS_Grid_DEP := 'T'; //타업체 등록정보에 출발지 내용
    //-    								changeLog('S'+ 'C' + lst_Result.item[0].attributes.getNamedItem('MapX'] + ':' + lst_Result.item[0].attributes.getNamedItem('MapY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;

                  if (sEndTmp1 <> '') and (sEndTmp2 <> '') and (sEndTmp3 <> '') and {(sEndTmp4 <> '') and} (sEndTmp5 <> '') and
                     (sEndX <> '') and (sEndY <> '') then
                  begin
                    // 도착지 정보
                    lcsEnd1 := sEndTmp1;
                    lcsEnd2 := sEndTmp2;
                    lcsEnd3 := sEndTmp3;
                    cxtEndAreaDetail.Caption := sEndTmp4;
                    cxtEndAreaDetail.Hint := sEndTmp5;

                    gJONEndChkXY.X := sEndX;
                    gJONEndChkXY.Y := sEndY;
                    gJONEndChkXY.GUIDE_X := sEndX;
                    gJONEndChkXY.GUIDE_Y := sEndY;

                    if (copy(sEndX,1,1) <> '0') and
                       (sEndX <> '')            then
                      cxtEndXval.Text := '0' + sEndX
                    else
                      cxtEndXval.Text := sEndX;
                    cxtEndYval.Text := sEndY;

                    gsEndGUIDEXval :=	cxtEndXval.Text;
                    gsEndGUIDEYval := cxtEndYval.Text;

                    lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;

                    cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
                    SetDebugeWrite('JON01N.cxReEndArea.Text 14372 : ' + cxReEndArea.Text);

                    // 도착지 세부지명
                    if Trim(cxtEndAreaDetail.Hint) <> '' then
                      meoEndArea.Text := cxtEndAreaDetail.Hint
                    else
                      if Trim(lcsEnd3) <> '' then
                      meoEndArea.Text := lcsEnd3;

                    MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);

                    //고객정보에 도착지 내용이 있는지에대한 구분값
                    if Trim(meoEndArea.Text) = '' then eRet := 0
                    else eRet := 1;
                    if Trim(meoEndArea.Text) = '' then
                    begin
                      eRet := 0;
                    end else
                    begin
                      eRet := 1;
                      GS_Grid_DES := 'T'; //타업체 등록정보에 도착지 내용
    //-    								changeLog('E'+ 'C' + lst_Result.item[0].attributes.getNamedItem('DestX'] + ':' + lst_Result.item[0].attributes.getNamedItem('DestY'], false);        //x,y좌표 변경시 로그생성 2012.08.08 KHS
                    end;
                  end;
                end
              end;
              //-------------------------------------------------------------------------------------------
              //      과거내역을 가지고 취소율, 지사별 설정값에 의한 고객등급 결정
              //-------------------------------------------------------------------------------------------
              Try
	  						iend := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('EndCnt').Text, 0);
	  						iCancel := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('CancelCnt').Text, 0);
                iTotal := iEnd + iCancel;
                lblCuCntTotal.Caption := IntToStr(iTotal);
                lblCoCntTotal.Caption := IntToStr(iend);
                if (iTotal) > 0 then
                begin
                  fcancelRate := ((iCancel / (iend + iCancel)) * 100);
                  lblCuCancelR.Caption := IntToStr(Round(fCancelRate)) + '%';
                end	else
                begin
                  lblCuCancelR.Caption := '0%';
                end;
              except
                on e: exception do
                begin
                  bTimeChk := False;
                  ls_TxLoad := 'Jon01N[과거내역]:' + e.Message;
                  Assert(False, E.Message);
                  GMessagebox(PChar(ls_TxLoad), CDMSE);
                  Screen.Cursor := crDefault;
                end;
              end;

              // 고객등급사용구분[0:자동등급, 1:직접설정]
	  					iGrade1 := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Grade1').Text, 5);
	  					iGrade2 := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Grade2').Text, 15);

              if iEnd >= iGrade1 then
              begin
                // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
                Proc_SetFormColor_2(0);
              end	else
              if iEnd >= iGrade2 then
              begin
                // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
                Proc_SetFormColor_2(1);
              end else
              begin
                // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
                Proc_SetFormColor_2(2);
              end;

	  					SetCustLevelSeq(True, lst_Result.item[0].attributes.getNamedItem('LevelCD').Text);
              FChkCCI.CbLevel := cboCuLevel.ItemIndex;

              // 고객 구분에 따른 색상 표시
              if (iBarIndex = 0) or (iBarIndex = 2) then
                Proc_SetFormColor_3(0)
              else if iBarIndex = 1 then
                Proc_SetFormColor_3(1)
              else if iBarIndex = 3 then
                Proc_SetFormColor_3(3);

              //2013.03.30 khs
	  					sAppCode        := lst_Result.item[0].attributes.getNamedItem('AppCode').Text;
	  					sAppLastRegDate := lst_Result.item[0].attributes.getNamedItem('AppLastRegDate').Text;
	  					sAppLastDelDate := lst_Result.item[0].attributes.getNamedItem('AppLastDelDate').Text;
	  					sAppLastFinishDate := lst_Result.item[0].attributes.getNamedItem('AppLastFinishDate').Text;
	  					sAppCuArea      := lst_Result.item[0].attributes.getNamedItem('AppCuArea').Text;
	  					sAppTermModel   := lst_Result.item[0].attributes.getNamedItem('AppGroup').Text + '/'
                               + lst_Result.item[0].attributes.getNamedItem('AppTermOS').Text + '/'
                               + lst_Result.item[0].attributes.getNamedItem('AppTermModel').Text;
	  					sAppTermOS      := lst_Result.item[0].attributes.getNamedItem('AppVersion').Text;

	  					if lst_Result.item[0].attributes.getNamedItem('AppDelYn').Text = 'y' then sAppDelYn := '어플삭제'
                                                                                   else sAppDelYn := '어플사용';

	  					if sAppCode = '' then btnCustAppinfo.Enabled := False
                               else btnCustAppinfo.Enabled := True;

              SetCustAppInfo(
                  sAppCode
                , sAppLastRegDate
                , sAppLastDelDate
                , sAppLastFinishDate
                , sAppCuArea
                , sAppTermModel
                , sAppTermOS
                , sAppDelYn
              );
							grpBubinState.Visible := False;
							trmBubinState.Enabled := False;
							if iBarIndex = 3 then
              begin
                if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '1' then
                begin
									lbBubinStateName.Caption := '법인계약 해지되어';
									lbBubinStateName2.Visible := True;
									lbBubinStateMemo.Caption := lst_Result.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
									grpBubinState.BringToFront;
									grpBubinState.Visible := True;
									trmBubinState.Enabled := True;
									ABubinStateIndex := 1;
								end else
								if lst_Result.item[0].attributes.getNamedItem('TaxType').Text = '2' then
								begin
									lbBubinStateName.Caption := '법인계약 해지되어';
									lbBubinStateName2.Visible := True;
									lbBubinStateMemo.Caption := lst_Result.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
                  grpBubinState.BringToFront;
                  grpBubinState.Visible := True;
                  trmBubinState.Enabled := True;
                  ABubinStateIndex := 2;
                end else
//								if lst_Result.item[0].attributes.getNamedItem('TaxType') = '0' then
								begin
									lbBubinStateName.Caption := '정상이용';
									lbBubinStateName2.Visible := False;
									lbBubinStateMemo.Caption := lst_Result.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
                  grpBubinState.Visible := False;
									trmBubinState.Enabled := False;
									ABubinStateIndex := 0;
                end;
              end else
              begin
								lbBubinStateName.Caption := '정상이용';
								lbBubinStateName2.Visible := False;
                lbBubinStateMemo.Caption := lst_Result.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
                grpBubinState.Visible := False;
                trmBubinState.Enabled := False;
                ABubinStateIndex := 0;
              end;

              gsSvrWkHp := '';
              //================================= 고객정보 Display End. =====================================
	  					lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Driver');
  						gsSvrWkHp := Trim(lst_Result.item[0].attributes.getNamedItem('WkHp').Text);
	  					wk_br_Name := lst_Result.item[0].attributes.getNamedItem('BrName').Text
	  						+ '(' + lst_Result.item[0].attributes.getNamedItem('BrNo').Text + ')';
							FWk_sabun := lst_Result.item[0].attributes.getNamedItem('Sabun').Text;
	  					wk_Name := lst_Result.item[0].attributes.getNamedItem('TermInfo').text;
	  					wk_Name := lst_Result.item[0].attributes.getNamedItem('Name').Text;

							Frm_Main.Frm_Jon012[Self.Tag].sFinishCnt := lst_Result.item[0].attributes.getNamedItem('FinishCnt').text;
	  					Frm_Main.Frm_Jon012[Self.Tag].sCancelCnt := lst_Result.item[0].attributes.getNamedItem('CancelCnt').text;
	  					Frm_Main.Frm_Jon012[Self.Tag].sPhone_info := lst_Result.item[0].attributes.getNamedItem('TermInfo').text;

	  					// 조회기사 사번, 기사지사코드 저장.
							locWkSabun := FWk_sabun; // 기사사번
	  					locWkBrNo := lst_Result.item[0].attributes.getNamedItem('BrNo').Text;
                // 지사코드
//  -						cxLblSeaWkSabun.Hint := wk_sabun; // 기사사번
              cxtWorkerNm.Text := wk_Name;

              Proc_SetFormColor_3(9); // 기사 지정칼라로 바 세팅한다.
              Proc_SetFormColor_2(9);
            except
              on e: exception do
              begin
                bTimeChk := False;
                ls_TxLoad := 'Jon01N[고객 조회오류]:' + e.Message;
                Assert(False, E.Message);
                GMessagebox(PChar(ls_TxLoad), CDMSE);
                Screen.Cursor := crDefault;
              end;
            end;
          end;

          // 상담메모/기사메모 표시
          if ( GS_AUTOMEMO_SHOW ) Or ( bMemoDisplay ) then BtnViewMemo.Click;

          Frm_Main.Frm_Jon012[Self.Tag].Tag := Self.Tag;
          Frm_Main.Frm_Jon012[Self.Tag].Jon03Tag := Self.Jon03Tag;
          Frm_Main.Frm_Jon012[Self.Tag].cxBtnOldSelect.Tag := 0;
          // 고객 이용내역을 띄워준다.
          Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.SetRecordCount(0);
          Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Active := False;
          Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Clear;

	  			lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/AcceptInfo');
          // 2011.03.07 전화2조회 추가
	  			sTelse := lst_Result.item[0].attributes.getNamedItem('Tel2Count').Text;
          if sTelse <> '0' then
          begin
            bTimeChk := False;
            pJON01ShowMessage(Self.Tag, 'B', '고객전화2에 등록된 오더가 있습니다.');
//            GMessagebox('고객전화2에 등록된 오더가 있습니다.',CDMSE);
          end;

          try
            // 과거 이용내역을 보여준다.
            Frm_Main.Frm_Jon012[Self.Tag].Proc_CustOldSelectResult(rxxml, 1);
          except
            on e: exception do
            begin
              Assert(False, E.Message);
            end;
          end;

          try
            Proc_CustOrderListView;
            if bAppOrder then
            begin
              btnCmdExit.Description := 'T';
              btnCmdExitClick(btnCmdExit); //앱접수일경우 접수창 자동종료
              Frm_Main.AcceptFromCreate(gAppSlip, gAppInDate, '앱접수', Jon03Tag);
              gAppSlip := ''; gAppInDate := '';
              Exit;
            end;

            Frm_Main.Frm_Jon012[Self.Tag].SetStatesViewCheck;
          except
            on e: exception do
            begin
              Assert(False, E.Message);
            end;
          end;

          try
            Proc_WorkListView(rxxml);
          except
            on e: exception do
            begin
              Assert(False, E.Message);
            end;
          end;

      		if Frm_Main.Frm_Jon01N[Self.Tag].Showing then
          begin
            Frm_Main.Frm_Jon012[Self.Tag].Show;
          end;

          cxCallTitle.Caption := cxCallTitle.Hint + StrToCall(gsCuTelHint);

          for i := 0 to JON_MAX_CNT - 1 do
          begin
            if Frm_Main.JON01MNG[i].Tag = Self.Tag then
            begin
              Frm_Main.JON01MNG[i].Caption := cxCallTitle.Caption;
              Frm_Main.JON01MNG[i].Hint := cxCallTitle.Caption;
              Break;
            end;
          end;

          if GS_JON01_TAB = 1 then
          begin
            Self.Caption := cxCallTitle.Caption;
            Frm_JON00.cxTabControl1.Tabs[Frm_JON00.cxTabControl1.TabIndex].Caption := cxCallTitle.Caption;
          end;

          delta := GetTickCount - startTick;
          if ( bTimeChk ) And ( delta > 4000 ) then
          begin
            Assert(False, Format('JON01N.Proc_KeyNumber Over = %d - %s,%s,%s', [delta, cxtCuTel.Text, En_Coding(locKNum), En_Coding(locBrNo)]));
          end;

          // [hjf] xml을 접수 목록으로 전달하고 접수목록에서 해당 xml로 접속 목록을 표시
        except
          on e: exception do
          begin
            sTemp := 'JON01N[Proc_KeyNumberInsert]1:' + e.Message;
            Log(sTemp, LOGDATAPATHFILE);
            Assert(False, sTemp);
          end;
        end;
      end else
      begin
        GMessagebox(MSG012 + CRLF + ls_Msg_Err, CDMSE);
      end;

      try
        // CID 조회 일때는 발신전화없음 멘트 감춤..
        if (locCustHP_MainNum_Search = '') and ((cxLblCIDUseFlg.Hint <> 'CID') Or (gbCallRouteBrChange)) then
        begin
          cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
          cxtCallTelNum.Text := cxtCuTel.Text; // 발신전화번호
          locsCuTel := cxtCuTel.Text;
        end	else
        begin
          locsCuTel := cxtCallTelNum.Text;
        end;

        miCuUpdate.Enabled := True;
        btnMile.Enabled := True;

        // 지사변경 제한.[이유:고객조회 후 지사변경시 조회한 고객정보 일부유실 경고메시지 띄우기 위함임]
  //	  		cboBranch.Properties.ReadOnly := True;   //콜링 후 지사대표번호 변경 가능하게 수정 .팀장님 지시사항 20160715 KHS

        if lcsCu_seq <> '' then
        begin

        end	else
        begin
          // 존재 : $0070FEF3, 미존재 : $00FAEDE2
          if ((cxLblCIDUseFlg.Hint = 'CID') Or ( GB_CallLine )) and (locWkSabun = '') then
          begin // CID 조회인지 설정을 한다.
            tmMent.Enabled := True;
            locKNum := Proc_MainKeyNumberSearch; // 대표번호 추출.
            lblNewCustYN.Caption := sBr_Name + ' / ' + locKNum + ' 의' + '-->>신규 고객<<-- 입니다.';
            grpNewCustYN.BringToFront;
            grpNewCustYN.Visible := True; // 신규고객여부의 정보를 보여준다.
          end;
        end;

        Frm_Main.Frm_Jon012[Self.Tag].cxlbSlip.Caption := cxtJoinNum.Text; // 오더접수번호
        Frm_Main.Frm_Jon012[Self.Tag].cxlbCustTel.Caption := locsCuTel; // 고객전화번호 읽기.
        Frm_Main.Frm_Jon012[Self.Tag].cxlbKeyNum.Caption := Proc_MainKeyNumberSearch; // 대표번호 읽기.

        if cxLblCIDUseFlg.Hint = 'CID' then
          // 프로그램 최소화시에 접수창 뜨면 POI검색창이 앞으로 표시 안됨
          SetWindowPos(Frm_JON30.handle, HWND_TOPMOST, Frm_JON30.Left, Frm_JON30.Top, Frm_JON30.Width, Frm_JON30.Height, 0);

        grpBtm.Enabled := True;   // 접수창 잠긴걸 해제함. 2011-11-08.

        if ( GT_OCX ='SSIT' ) then //CID내역 조회실행
        begin
          if frm_JON54.cxPageControl1.Pages[2].TabVisible then
            frm_JON54.btnCallingList.Click;
        end;

        if Self.Visible = True then
        begin
          if meoStartArea.CanFocus then	meoStartArea.SetFocus;
        end;
      except
        on e: exception do
        begin
          Assert(False, E.Message);
        end;
      end;
    finally
      xdom := Nil;
    end;
	except
		on e: exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

// [수정화면 띄우기..]오더일련번호:접수번호로 조회 후 그 결과 처리를 한다.
procedure TFrm_JON01N.Proc_ConfSlipSelectResult(rxxml: String);
var
	wk_br_Name, wk_Name, wk_Tel, ls_Msg_Err: string;
	sBr_Name, sTemp, sTemp2, sOrderUpInfo, CReason, StCd, sCPStatus: string;
	iBarIndex, iRCnt, i, j, iBidx, iFIdx: Integer;
	itotal, iEnd, iCancel, ij: Integer;
	iGrade1, iGrade2, ACount, iViaCNT, ia, iH : Integer;
	fcancelRate: double;
	sCustTel, sBrNo, sAccCenter, sCallCenter, sTodayDate, sDate, sInDate, OrderState, sMultiCallGB, sMemo, sContent: string;
	ls_Rcrd : TStringList;
  BitMap1 : TBitMap;
	sCurMileage, sMileage: string;

  bAutoWorkChk, bLimitUseYn, bMemoDisplay : Boolean;    // 시간별 기사 지원금 설정 오더 여부 체크
  sWorkChkTmp : String;

  sPayMeth : string;
  iSidx, iCnt, iStCd, iConfSlip, iNow, iRow: Integer;
  DataValue: String;
	sWkFAge, sWkTAge, msg, sOrderCallBellStatus, sCarType, sCashSave, sMlgSave, sKakaoYN, sTmp,
	sKMCallByInsureFree : string;
	iTmp : integer;

  sDT, eDt : TDateTime;
begin
	SetDebugeWrite('JON01N.Proc_ConfSlipSelectResult');
  if Self.Tag < 0 then Exit;

	iFidx := Self.Tag; // 폼의 index를 읽는다.

	grpWkLicType.Visible := False;
	bAutoWorkChk := False;
//-------------------------- Error Code Read -----------------------------
  loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Error');
	ls_Msg_Err := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Code').Text;
	if ls_Msg_Err <> '0000' then
    ls_Msg_Err := ls_Msg_Err + ' : ' + loc_Ud_lst_Node.item[0].attributes.getNamedItem('Message').Text;
  //------------------------------------------------------------------------
	ls_Msg_Err := GetXmlErrorCode(rxxml);
	//------------------------------------------------------------------------
  try
    if ('0000' = ls_Msg_Err) then
    begin
  	 //================================= 고객정보 Display End. =====================================
      grpCustView.Visible := False;

			loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Data/AcceptInfo');
			iRCnt := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('Count').Text, 0);

			loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Data/AcceptInfo/Accept');

      sAccCenter := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('AcceptCenter').text); // 등록콜센터
			sMlgSave := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MlgSaveYn').Text;    //마일리지 사용시 마일리지 적립
			sCashSave:= loc_Ud_lst_Node.item[0].attributes.getNamedItem('CashSaveYn').Text;    //현금 사용시 마일리지 적립
			sKakaoYN := loc_Ud_lst_Node.item[0].attributes.getNamedItem('KdShareCallYn').Text;    //카카오 오더 여부
			if sKakaoYN = 'y' then bKakaoOrder := True else bKakaoOrder := False;

			sKMCallByInsureFree := loc_Ud_lst_Node.item[0].attributes.getNamedItem('KmInsFeeFreeYn').Text;    //건당보혐료무료
			if sKMCallByInsureFree = 'y' then	lblCallByInsureFree.Tag := 1
																	 else lblCallByInsureFree.Tag := 0;
			pSetLabelClick(lblCallByInsureFree);

			sOrderCallBellStatus := '';
			sOrderCallBellStatus := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallBellStatus').Text;
			gsOrderCallBellID := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallBellMemId').Text;
			if iRcnt > 0 then
			begin // 과거 이용내역을 보여준다.
        sTodayDate := StartDateTime('yyyy-mm-dd hh:nn:ss');
				// 오늘 영업일자 얻기..
        sMultiCallGB := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MultiCallGB').Text; // 멀티콜
				if sMultiCallGB <> '' then
					GrpCReason.Caption := Trim(GrpCReason.Caption) + Format('   %s', [sMultiCallGB]);
				ACount := 0;

        try
          // 과거 이용내역을 보여준다.
          Frm_Main.Frm_Jon012[Self.Tag].Tag := Self.Tag;
          Frm_Main.Frm_Jon012[Self.Tag].Jon03Tag := Self.Jon03Tag;
          Frm_Main.Frm_Jon012[Self.Tag].cxBtnOldSelect.Tag := 0;
          Frm_Main.Frm_Jon012[Self.Tag].Proc_CustOldSelectResult(rxxml, 1);
        except
          on e: exception do
          begin
            Assert(False, E.Message);
          end;
        end;
      end;
      //----------------------------
      Application.ProcessMessages;

      loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Data/Branch');
			locHDNO := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('HdNo').Text);
			locBRNO := TRim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('BrNo').Text);

      if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallingBrNo')) then     // 콜링지사
				locCallingBrNo := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallingBrNo').Text);
      if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallingBrName')) then     // 콜링지사명
        locCallingBrName := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallingBrName').Text);
      if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallingKeyNumber')) then     // 콜링대표번호
				locCallingKeyNumber := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallingKeyNumber').Text);

      if ( ( locCallingBrNo <> '' ) And ( locCallingKeyNumber <> '' ) ) And
///         ( ( locBRNO <> '' ) And ( lsBr_KeyNumber <> '' ) ) And
         ( ( locCallingBrNo <> locBRNO ) Or ( locCallingKeyNumber <> lsBr_KeyNumber ) ) then
      begin
				pnlCallingBoard.Caption := Format('★ 콜링지사:%s, 콜링대표번호:%s ★', [locCallingBrName, StrToCall(locCallingKeyNumber)]);
        pnlCallingBoard.Visible := True;
      end else pnlCallingBoard.Visible := False;

			sOrgHDNO := locHDNO; //수정창 오픈시에만 사용 20160719 KHS
			sOrgBRNO := locBRNO; //수정창 오픈시에만 사용 20160719 KHS
      if scb_BranchCode.IndexOf(locBRNO) < 0 then
      begin
        pJON01Show(Self.Tag);
        GMessageBox('타사콜은 수정할 수 없습니다.', CDMSE);
        tmFormClose.Tag := 77; // 화면 닫기 설정값.
        loc_TmClose := 'CLOSE'; // 화면 종료 타이머 변수. CDS. 080830.
        tmFormClose.Enabled := True; // 화면을 닫는다.
        Exit;
      end;

      // [hjf-하드코딩] 2009.03.06 코리아(카드고객) 색상구분
			if (GS_PRJ_AREA = 'S') and (locBRNO = 'H849') then
      begin
        shpTitle.Pen.Color := clRed;       // 붉은색
			end else
			// [cds-하드코딩] 2011.10.11 코리아(카드고객) 색상구분 추가. 1577-5000.  신용카드 (1577-9482)
      if (GS_PRJ_AREA = 'S') and ( (locBRNO = 'G908') Or (locBRNO = 'G902') )  then
      begin
        shpTitle.Pen.Color := $00FE8769;   // 파란색
			end else
			// [cds-하드코딩] 2012.10.09 코리아(02-2000-0000) 색상구분 추가. KHS
      if (GS_PRJ_AREA = 'S') and (locBRNO = 'Q908') then
      begin
        shpTitle.Pen.Color := clGreen;   // 녹색
			end else
			// [cds-하드코딩] 2012.10.09 법인콜 색상구분 추가.
      if (GS_PRJ_AREA = 'S') and (locBRNO = 'G898') then
      begin
        shpTitle.Pen.Color := $0000C8FF;   // 골드
			end else
      begin
        shpTitle.Pen.Color := GS_BasicColor;   // 기본색
      end;
      shpTitle.Hint := ColorToString(shpTitle.Pen.Color);

			sBr_Name := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('BrName').Text); // 지사명 읽기.
			locKNum := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('KeyNumber').Text); // 대표번호 읽기.
			sOrgKNum := locKNum; //수정창 오픈시에만 사용 20160719 KHS

      sCallCenter := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallCenter').text); // 콜센터
      // 지사리스트에서 대표번호, 지사코드 index 찾기 및 설정.

			cboBranch.Hint := ''; // 수정창오픈시 지사+대표번호 인텍스값 저장을 위한 고유값  20200423 KHS
			if Proc_BrNoListIdxFind(locBRNO, locKNum) = False then
      begin
        cboBranch.Tag := 10;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
        cboBranch.Properties.Items.Clear; // 지사리스트 초기화.
        slCboBranch.Clear;

//        cboBranch.Properties.Items.Add(sBr_Name + '[' + locKNum + '] ' +  Copy(locHDNO + '     ', 1, 5) + '.' + Copy(locBRNO + '     ', 1, 5));
        // 본사코드   // 지사코드   // 지사명   // 대표번호
        cboBranch.Properties.Items.Add(sBr_Name + '[' + locKNum + ']');
        slCboBranch.Add(Copy(locHDNO + '     ', 1, 5) + '.' + Copy(locBRNO + '     ', 1, 5));

        cboBranch.ItemIndex := 0;
        cboBranch.Tag := 0;
        // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
      end;
			cboBranch.Hint := IntToStr(cboBranch.ItemIndex);

			// 탁송연합콜 사용에 따른 버튼 컨트롤
			// 수정창에서는 오더의 지사 선택 후 탁송연합콜 관련 수정 20210208KLHS
			sTmp := Proc_BRNOSearch;
			// 탁송연합콜 사용 [접수창체크옵션,지사,본사,연합] 조회  yyny 5번째는 탁송연합 기사 가입가능여부
			sTmp := GetTakAllyYN(sTmp);
			lblTakAlly.Visible := False;
			lblTakAlly.Enabled := True;
			if copy(sTmp,1,4) = 'yyyy' then
			begin
				lblTakAlly.Visible := True;
				lbl_00.Visible := False;
				lblTakAlly.Top := lbl_00.Top;
			end else
			if copy(sTmp,1,4) = 'fyyy' then
			begin
				lblTakAlly.Visible := True;
				lblTakAlly.Enabled := False;
				lbl_00.Visible := False;
				lblTakAlly.Top := lbl_00.Top;
			end else
			if copy(sTmp,1,4) = 'nyyy' then    // 미설정. 모드
			begin
				lblTakAlly.Visible := True;
				lbl_00.Visible := False;
				lblTakAlly.Top := lbl_00.Top;
			end else
			if copy(sTmp,1,4) = 'xyyy' then
			begin
				lblTakAlly.Visible := False;
				lblTakAlly.Enabled := False;
				lbl_00.Visible := True;
			end else
			begin
				lblTakAlly.Visible := False;
				lblTakAlly.Enabled := False;
				lbl_00.Visible := True;
			end;

			// 수정창에서는 오더의 지사 선택 후 탁송연합관련 설정 20210208KHS

			cxTxtBrNameCaption.Text := sBr_Name + '[' + locKNum + ']';
      // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.

      loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Data/Driver');

      wk_br_Name := loc_Ud_lst_Node.item[0].attributes.getNamedItem('WkBrName').Text + '(' + loc_Ud_lst_Node.item[0].attributes.getNamedItem('WkBrNo').Text + ')';
			FWk_sabun := loc_Ud_lst_Node.item[0].attributes.getNamedItem('WkSabun').Text;
      gsWkSubun_Up := FWk_sabun;
      wk_Name := loc_Ud_lst_Node.item[0].attributes.getNamedItem('WkName').Text;
      wk_Tel := Copy(wk_Name, Pos('|', wk_Name) + 1, 15); // 기사전화번호 추출
      wk_Name := Copy(wk_Name, 1, Pos('|', wk_Name) - 1);
      // 기사 사번, 기사지사코드 저장.
      locWkSabun := FWk_sabun; // 기사사번
      locWkBrNo := loc_Ud_lst_Node.item[0].attributes.getNamedItem('WkBrNo').Text;
      // 지사코드
//-      cxLblSeaWkSabun.Hint := wk_sabun; // 기사사번
			cxtWorkerNm.Text := wk_Name;
			//접수배차 사번이 있고 추가접수가 아닐경우에 표기 20210525 KHS
			if (Trim(wk_Name) <> '') and (btnCmdUpdSave.Hint <> '추가접수') then 
			begin
        lb_CompulWor.visible := true;
				lb_CompulWor.Caption := wk_Name;
			end;

			if TCK_USER_PER.JON_Recon = '1' then
			begin
				chkCompulWor.Enabled := False;
			end else
			begin
				if (Pos('수정', Self.Caption) = 0 ) then  //접수일때만 체크 가능
					chkCompulWor.Enabled := True      else
					chkCompulWor.Enabled := False;
			end;


			loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Data/Customer');

			sCarType := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CarType').Text;    //차종추가
			if sCarType = '1' then cb_CarType.ItemIndex := 0 else cb_CarType.ItemIndex := 1;

			if loc_Ud_lst_Node.item[0].attributes.getNamedItem('ViewLevel').Text = '1' then chkViewLevel.Checked := True
                                                                                 else chkViewLevel.Checked := False;

      sWkFAge := loc_Ud_lst_Node.item[0].attributes.getNamedItem('WkFromAge').Text;
      sWkTAge := loc_Ud_lst_Node.item[0].attributes.getNamedItem('WkToAge').Text;
      if StrToIntDef(sWkFAge,0) > 0 then
      begin
        lblWkAge.Tag := 1;
				pSetLabelClick(lblWkAge);
        edtWkFAge.Text := sWkFAge;
				if StrToIntDef(sWkTAge,0) > 0 then
          edtWkTAge.Text := sWkTAge
        else
          edtWkTAge.Text := '99';
      end else
      if StrToIntDef(sWkTAge,0) > 0 then
      begin
        lblWkAge.Tag := 1;
        pSetLabelClick(lblWkAge);
        edtWkFAge.Text := '19';
        edtWkTAge.Text := sWkTAge;
      end else
      begin
        lblWkAge.Tag := 0;
        pSetLabelClick(lblWkAge);
      end;

      if lblWkAge.Tag = 1 then lblWkAge.Hint := edtWkFAge.Text + '세이상' +  edtWkTAge.Text + '세이하'
                          else lblWkAge.Hint := '';

      // 고객수정 버튼 활성화.
			lcsCu_seq := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CuSeq').Text;
			pCompareCustInfo;
      if lcsCu_seq <> '' then
      begin
        miCuUpdate.Enabled := True;
        miCuDel.Enabled := True;
      end else
      begin
        miCuUpdate.Enabled := False;
        miCuDel.Enabled := False;
      end;

			OrderState := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConfSt').Text; // 오더 상태 읽기.

      // KCP 카드 결제 일련번호. 2011-10-19
      // "추가접수" 모드 일때는 카드 거래일련번호 를 읽지 않는다.
			try
				Pay_Gubun := loc_Ud_lst_Node.item[0].attributes.getNamedItem('PayMeth').Text;
        FModifyLoadInfo.Pay_Method := Pay_Gubun;
				locCardPaySeq := '';
				gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)

        if btnCmdUpdSave.Hint = '추가접수' then
				begin
					locCardPaySeq := '';
					gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)

          //  결제구분 : 0.현금, 입금방식 : 20.완료후20분입금, 출발지에 ']' 입력 여부
          if ( Pay_Gubun = '0' ) And ( loc_Ud_lst_Node.item[0].attributes.getNamedItem('PostTime').Text = '20') And
             ( Pos(']', loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area5').Text) > 1 ) then bAutoWorkChk := True;
        end else
        begin
					locCardPaySeq := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CardPaySeq').Text;
					gsUpdateCardPaySeq := locCardPaySeq; // 결제일련번호(수정창에서 사용)
					FModifyLoadInfo.Card_Pay_Seq := locCardPaySeq;
        end;
			finally
      end;

      sPayMeth := loc_Ud_lst_Node.item[0].attributes.getNamedItem('PayMeth').Text;        //위치 이동 2011.11.25 KHS 법인콜체크박스 초기화문제
      //---------------------------- 2011-11-11.
			gsPlusYNHint := 'NOCHANGE';

			PayMethod := sPayMeth;

			lblCashSave.Visible := (cbbPayMethod.Text = PAY_METHOD_POST_MILE);
  		lblMileSave.Visible := (cbbPayMethod.Text = PAY_METHOD_POST_MILE);

			if lblCashSave.Visible then
				lblCallByInsureFree.Left := 425 else
				lblCallByInsureFree.Left := 312;
			if sMlgSave = 'y' then lblMileSave.Tag := 1
												else lblMileSave.Tag := 0;
			pSetLabelClick(lblMileSave);

			if sCashSave = 'y' then	lblCashSave.Tag := 1
												 else lblCashSave.Tag := 0;
			pSetLabelClick(lblCashSave);

			gsPlusYNHint := '';

      //----------------------------
      Application.ProcessMessages;

      // 플러스콜 상태 설정. 2010.10.03
			// 플러스콜 여부(수도권만 사용함) --> 2011-11-10 법인콜로 용도변경 사용.
			if GS_PRJ_AREA = 'S' then
			begin
				sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('PlusYn').Text;
				lblPlusYN.Hint := '20';
				if sTemp = 'y' then lblPlusYN.Tag := 1
											 else	lblPlusYN.Tag := 0;
				pSetLabelClick(lblPlusYN);
				lblPlusYN.Hint := '';
			end;

			// 탁송연합콜 설정값 추가. 2019.05.15
			sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConsShareYn').Text;
			if sTemp = 'y' then lblTakAlly.Tag := 1
										 else	lblTakAlly.Tag := 0;
      pSetLabelClick(lblTakAlly);

			// AI 아웃바운드 배차지연콜 사용여부 추가. 2019.07.16 KHS
			sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AiOutOption').Text;
			if sTemp = 'n' then chk_AIReCall.Checked := False else
 			if sTemp = 'y' then chk_AIReCall.Checked := True  else
      begin
        if not GetAIOBKeyNumberYN(locKNum) then chk_AIReCall.Checked := False
                                           else chk_AIReCall.Checked := True;
      end;

			sTemp := Proc_MainKeyNumberSearch;
			if not GetAIOBKeyNumberYN(sTemp) then   //고객이 선택되어 있어도 지사의 대표번호에서 사용안하면 체크해제
			begin
				chk_AIReCall.Properties.ReadOnly := True;
				chk_AIReCall.checked := False;
			end else chk_AIReCall.Properties.ReadOnly := False;

			try
				sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('PostChargeSmsYN').Text;
      except
        sTemp := 'n';
      end;
			if sTemp = 'y' then lblWKJAmt.Tag := 1
                     else lblWKJAmt.Tag := 0;
      pSetLabelClick(lblWKJAmt);

      try
  			sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Call2YN').Text;
      except
        sTemp := 'n';
      end;

      // 소요시간
      try
  			sTemp := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('EstTime').Text);
        fTotalTime := StrToFloatDef(sTemp, 0);
      except
        fTotalTime := 0;
      end;

			//================================= 고객정보 Display Start. =====================================
      edtCuName.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CuName').Text;
      FChkCCI.Name := edtCuName.Text;

 			ls_Rcrd := TStringList.Create;
			sContent := StringReplace(loc_Ud_lst_Node.item[0].attributes.getNamedItem('Info').Text, '|', '¶',  [rfReplaceAll]);
      if Trim(sContent) <> '' then
      begin
  			GetTextSeperationEx2('¶', sContent, ls_Rcrd);
        meoCuCCMemo.Tag := 1;
  			for ia := 0 to ls_Rcrd.Count - 1 do
  			begin
          if ia = ls_Rcrd.Count - 1 then meoCuCCMemo.Tag := 0;
          if ia = 0 then
            meoCuCCMemo.Text := ls_Rcrd[ia]
          else
            meoCuCCMemo.Text := meoCuCCMemo.Text + #13#10 + ls_Rcrd[ia];
  			end;
      end;
			ls_Rcrd.Clear;
   		FChkCCI.meoCuCCMemo  := meoCuCCMemo.Text;

			// 문제의 고객상담 호출실패 2011.03.07
			sContent := StringReplace(loc_Ud_lst_Node.item[0].attributes.getNamedItem('PdaInfo').Text, '|', '¶', [rfReplaceAll]);
      if Trim(sContent) <> '' then
      begin
  			GetTextSeperationEx2('¶', sContent, ls_Rcrd);
        meoCuWorMemo.Tag := 1;
	  		for ia := 0 to ls_Rcrd.Count - 1 do
		  	begin
          if ia = ls_Rcrd.Count - 1 then meoCuWorMemo.Tag := 0;
          if ia = 0 then
            meoCuWorMemo.Text := ls_Rcrd[ia]
          else
            meoCuWorMemo.Text := meoCuWorMemo.Text + #13#10 + ls_Rcrd[ia];
  			end;
      end;
      FChkCCI.meoCuWorMemo := meoCuWorMemo.Text;

			iBarIndex := StrtoIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CuType').Text, 0);
			FChkCCI.CbCuGb  := iBarIndex;

      CBCuGB.Hint := 'Clear';
			if (iBarIndex = 0) or (iBarIndex = 4) then
			begin
				CbCuGb.ItemIndex := 0;
        CbCuGb.Hint := '1';
				// 0:개인, 4:불량 둘다 일반으로 처리(불량코드는 사용안함)
			end	else
      if iBarIndex = 1 then
			begin
				CbCuGb.ItemIndex := 1;
        CbCuGb.Hint := '2';
			end else
			if iBarIndex = 3 then
			begin
				CbCuGb.ItemIndex := 2;
        CbCuGb.Hint := '3';
			end	else
			begin
				CbCuGb.ItemIndex := 0;
        CbCuGb.Hint := '1';
			end;
      CBCuGB.Hint := '';
   		FChkCCI.CbCuGb  := CbCuGb.ItemIndex;

      // 고객 구분에 따른 색상 표시
      if (iBarIndex = 0) or (iBarIndex = 2) then
      begin
        Proc_SetFormColor_3(0);
      end else
      if iBarIndex = 1 then
      begin
        Proc_SetFormColor_3(1);
      end else
      if iBarIndex = 3 then
      begin
        Proc_SetFormColor_3(3);
      end;

//      if btnCmdUpdSave.Hint <> '추가접수' then
//      begin
//        shpTop2.Height := 20;
//        gJon01Size[Self.Tag].shpTop2H := shpTop2.Height;
//        pSetFormScroll(0, 15);
//
//        grpModifyTitle.BringToFront;
//        grpModifyTitle.Visible := True;
//      end;

      sTemp2 := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MemName').Text; // 상담원명
			StCd := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConfSt').Text; // 오더 상태 읽기.
      sCPStatus := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConfPreStatus').Text; // 예약오더 0.접수, 5대기


      CReason := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CReason').Text; // 취소사유
			// 오더 상태 코드를 문자열로 변경해준다.
      sTemp := Func_OrderStateConvert(StCd);
      GrpCReason.Caption := Format(' 오더상태 : %s', [sTemp]);
			lblCReason.Caption := CReason;

      if Trim(StCd) = 'D' then StCd := '1';  // 운행상태는 배차상태로 조회처맇야된다
			cxtJoinNum.Hint := Trim(StCd); // 오더 상태값을 저장한다.

//-      if ( cxtJoinNum.Hint[1] in ['4'] ) then // 수정[문의] 건 경우
//-        cbbPayMethod.Enabled := False;

      grpOrderInfoView.Caption := '상세 정보';

      if Trim(CReason) = '' then
      begin
        // 오더관련 정보 보이기..
        cxLblOrderUpInfo.Caption := '접수:' + cxtJoinNum.Text + ' 상태:' + sTemp + ' 상담원:' + sTemp2;
      end else
      begin
        // 오더관련 정보 보이기..
        cxLblOrderUpInfo.Caption := '접수:' + cxtJoinNum.Text + ' 상태:' + sTemp + ' 상담원:' + sTemp2 + ' [ '+CReason+' ]';
      end;
      cxLblOrderUpInfo.Hint := '수정시 마우스 클릭하면 좀더 많은 정보를 볼수 있음.';

      meoCuCCMemo.Hint := cxtJoinNum.Text;   // 임시로 저장해서 사용
      mmoCbMemo.Hint := cxLblOrderUpInfo.Caption;   // 임시로 저장해서 사용

      sOrderUpInfo :=                '접 수 번 호 : ' + cxtJoinNum.Text + #10;
      sOrderUpInfo := sOrderUpInfo + '접수 상담원 : ' + sTemp2 + #10;
      sOrderUpInfo := sOrderUpInfo + '오 더 상 태 : ' + sTemp + #10;
      sTemp2 := loc_Ud_lst_Node.item[0].attributes.getNamedItem('FinDate').Text; // 최초접수시간
      sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('InDate').Text; // 접수시간
      sOrderUpInfo := sOrderUpInfo + '최초접수시간 : ' + Copy(sTemp2, 1, 19) + #10;
      sOrderUpInfo := sOrderUpInfo + '접 수 시 간 : ' + Copy(sTemp, 1, 19) + #10;
			sOrderUpInfo := sOrderUpInfo + '배차기사이름 : [' + FWk_sabun + ']' +  wk_Name + #10;
      sOrderUpInfo := sOrderUpInfo + '배차기사핸폰 : ' + wk_Tel + #10;
      sOrderUpInfo := sOrderUpInfo + '배차기사소속 : ' + wk_br_Name;
      cxMeoOrderUpInfo.Text := sOrderUpInfo;

			ChkCuSmsNo.Tag := 1;
      if loc_Ud_lst_Node.item[0].attributes.getNamedItem('SMS').Text = 'n' then
        ChkCuSmsNo.Checked := True
      else
      if loc_Ud_lst_Node.item[0].attributes.getNamedItem('SMS').Text = 'y' then
        ChkCuSmsNo.Checked := False;
			ChkCuSmsNo.Tag := 0;

			//보정금
			cxCurRevisionRate.Value := StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('AddCharge').Text, 0);
			// 저장 요금을 적용 한다.
			sNowRate := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Charge').Text;
			FModifyLoadInfo.Conf_Charge := sNowRate;

			if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('MemoDisplayYn')) then     // 상담메모 자동 확장
				 bMemoDisplay := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MemoDisplayYn').Text = 'y';

			gRate_Update := StrToIntDef(sNowRate, 0); //수정창 오픈시 요금

  		if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbCharge')) then
				gCBCharge_Update := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbCharge').text, 0);

			if BtnRaLock.Hint <> 'F4)잠금' then
			begin
				curRate.Value := StrToIntDef(sNowRate, 0);
				OrgRate := curRate.Value{ - cxCurRevisionRate.value};
				curRate.Tag := OrgRate;
				if cbbPayMethod.Text = PAY_METHOD_MULTI then
				begin
					if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbCharge')) then
						curCbCharge.Value := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbCharge').text, 0);

					if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CardCharge')) then
						curCardCharge.Value := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CardCharge').text, 0);

					if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('MileCharge')) then
						curMileCharge.Value := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('MileCharge').text, 0);
				end;

				if ((gsMyMainTelUse = 'FALSE') or (GSMyMainTelOrderChargeCheck)) and (not IsMultiCallFixPrice) then
					OrgRate := curRate.Value{ - cxCurRevisionRate.value};
			end;

			lblCuMile.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CurMlg').Text, 0));
      if StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CurMlg').Text, 0) > 999999 then lblCuMile.Style.Font.Style := []
                                                                                                   else lblCuMile.Style.Font.Style := [fsBold];

			lblCuMileUnit.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('PrizeMlg').Text, 0)); //지사설정 지금 단위
			lblCuMileCnt.Caption := loc_Ud_lst_Node.item[0].attributes.getNamedItem('PrizeCnt').Text;
      sProdName := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Prize').Text;
      SetMileColorChange;

			lblCuMileLost.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CuExpireMileage').Text, 0)); //소멸예정금액
      if bAutoWorkChk then   // 추가접수인데 기사송금수수료자동설정오더이면 초기화
      begin
        PostTime := '0';
        edtPostPay.Value := 0;
        cxLblWkJAmt.Caption := '0';
			end else
			begin
				PostTime := loc_Ud_lst_Node.item[0].attributes.getNamedItem('PostTime').Text;
				edtPostPay.Value := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('PostCharge').Text, 0);
				edtPostPay.Hint := loc_Ud_lst_Node.item[0].attributes.getNamedItem('PostCharge').Text;
        FModifyLoadInfo.Post_Charge := edtPostPay.Hint;

        if ( ( edtPostPay.Value    > 0 ) And ( cbbPayMethod.Text = PAY_METHOD_POST_MILE ) ) Or
           ( ( curMileCharge.Value > 0 ) And ( cbbPayMethod.Text = PAY_METHOD_MULTI     ) ) then
				begin
          if cbbPayMethod.Text = PAY_METHOD_POST_MILE then
  					lblMoCuMile.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('PostCharge').Text, 0))
          else
  					lblMoCuMile.Caption := FormatFloat('#,##0', curMileCharge.Value);
					lblMoCuMile.Visible := True;
          Label9.Visible := True
        end;
        cxLblWkJAmt.Caption := FormatFloat('#,', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('WkCharge').Text, 0));
      end;
      if ( Trim(cxLblWkJAmt.Caption) <> '0' ) And ( Trim(cxLblWkJAmt.Caption) <> '' ) then grpWkJi.Visible := True;

      if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('LimitUseYn')) then     // 법인개인이용한도사용여부
        bLimitUseYn := loc_Ud_lst_Node.item[0].attributes.getNamedItem('LimitUseYn').Text = 'y';

      if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CardPayFeeType')) then        // 카드결제수수료 타입{1:대리요금,2:기사입금액,3:카드결제금액}
        GS_CardPayFeeType[Self.Tag] := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CardPayFeeType').Text;

      if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CardPayFeeValue')) then        // 카드결제수수료값
        GS_CardPayFeeValue[Self.Tag] := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CardPayFeeValue').Text;

      if bLimitUseYn then
      begin
        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbLimitDateNum')) then     // 법인기준일
        begin
          lblLimitDateNum.Caption := Format('기준일 : %s일', [loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbLimitDateNum').Text]);
        end;

        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbLimitCharge')) then  // 법인개인이용한도 금액
        begin
          lblLimitCharge.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbLimitCharge').Text, 0));
        end;

        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbLimitCnt')) then    // 법인개인이용한도 횟수
        begin
          lblLimitCnt.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbLimitCnt').Text, 0));
        end;

        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbUseCharge')) then  // 법인사용한도금액
        begin
          lblUseCharge.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbUseCharge').Text, 0));
        end;

        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbUseCnt')) then     // 법인사용횟수
        begin
          lblUseCnt.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbUseCnt').Text, 0));
        end;

        if ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) > 0 ) Or ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) > 0 ) then
        begin
          if ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblUseCnt.Caption), 0) > 0 ) And
             ( StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) >= 0 ) And
             ( StrToIntDef(RemoveComma(lblUseCnt.Caption)  , 0) >= 0 ) then
            lblRemainCnt.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblUseCnt.Caption), 0))
          else
            lblRemainCnt.Caption := '0';

          if ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblUseCharge.Caption), 0) > 0 ) And
             ( StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) >= 0 ) And
             ( StrToIntDef(RemoveComma(lblUseCharge.Caption  ), 0) >= 0 ) then
            lblRemainCharge.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblUseCharge.Caption), 0))
          else
            lblRemainCharge.Caption := '0';

          grpUseLimitV.Left := 295;
          grpUseLimitV.Top  := 78 + 15;
          grpUseLimitV.BringToFront;

          grpUseLimitV.BringToFront;
          grpUseLimitV.Visible := True;

          btnUseLimitV.Visible := True;

          if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('LimitOverYn')) then
            gbLimitOverYn := loc_Ud_lst_Node.item[0].attributes.getNamedItem('LimitOverYn').Text = 'y';
        end;

        //------------------------------------------------ 부서이용한도
        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbDeptLimitCharge')) then  // 부서이용한도 금액
        begin
          lblDLimitCharge.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbDeptLimitCharge').Text, 0));
        end;

        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbDeptLimitCnt')) then    // 부서이용한도 횟수
        begin
          lblDLimitCnt.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbDeptLimitCnt').Text, 0));
        end;

        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbDeptUseCharge')) then  // 부서사용한도금액
        begin
          lblDUseCharge.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbDeptUseCharge').Text, 0));
        end;

        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbDeptUseCnt')) then     // 부서사용횟수
        begin
          lblDUseCnt.Caption := FormatFloat('#,##0', StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbDeptUseCnt').Text, 0));
        end;

        if ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) > 0 ) Or ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) > 0 ) then
        begin
          if ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCnt.Caption), 0) > 0 ) And
             ( StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) >= 0 ) And
             ( StrToIntDef(RemoveComma(lblDUseCnt.Caption)  , 0) >= 0 ) then
            lblDRemainCnt.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblDLimitCnt.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCnt.Caption), 0))
          else
            lblDRemainCnt.Caption := '0';

          if ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCharge.Caption), 0) > 0 ) And
             ( StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) >= 0 ) And
             ( StrToIntDef(RemoveComma(lblDUseCharge.Caption  ), 0) >= 0 ) then
            lblDRemainCharge.Caption := FormatFloat('#,##0', StrToIntDef(RemoveComma(lblDLimitCharge.Caption), 0) - StrToIntDef(RemoveComma(lblDUseCharge.Caption), 0))
          else
            lblDRemainCharge.Caption := '0';

          grpUseLimitV.Left := 295;
          grpUseLimitV.Top  := 78 + 15;
          grpUseLimitV.BringToFront;

          grpUseLimitV.BringToFront;
          grpUseLimitV.Visible := True;

          btnUseLimitV.Visible := True;
        end;
      end;

      // 법인코드
      cxtCuBubin.Hint := TRim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('BGroup').Text);
      // + ',' + ed_MaddBrch.Text;
      if cxtCuBubin.Hint <> '' then
      begin
        sTemp := TRim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('BGName').Text); // 법인명
        sTemp2 := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('BGDName').Text); // 법인부서명
        cxtCuBubin.Text := sTemp + ' | ' + sTemp2;
				lblCuBubinName.Caption := '법인고객 [ ' + Trim(cxtCuBubin.Text) + ' ]';

				if (GS_PRJ_AREA = 'S') and (cxtCuBubin.Hint <> '') and (locBRNO <> 'G898') and (locBRNO <> 'Q908') and (locBRNO <> 'H849') then
				begin
					shpTitle.Pen.Color := $00FE8769;   // 파란색
          shpTitle.Hint := ColorToString(shpTitle.Pen.Color);
				end;
			end;

      // 출발지 정보
      // 20120805 좌표 오류 체크 LYB
      gJONStaChkXY.Area1   := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area').Text;
      gJONStaChkXY.Area2   := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area2').Text;
      gJONStaChkXY.Area3   := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area3').Text;
      gJONStaChkXY.Area4   := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area4').Text;
      gJONStaChkXY.Area5   := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
      gJONStaChkXY.X       := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapX').Text;
      gJONStaChkXY.Y       := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapY').Text;
      gJONStaChkXY.GUIDE_X := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapX').Text;
      gJONStaChkXY.GUIDE_Y := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapY').Text;

			if btnCmdUpdSave.Hint = '추가접수' then
			begin
				gJONStaChkXY.Gubun := 'B';
				GS_Grid_DEP := 'B';
        GS_Grid_DES := 'B';
			end else
			begin
				gJONStaChkXY.Gubun := 'U';
				GS_Grid_DEP := 'U';
        GS_Grid_DES := 'U';
			end;

      lcsSta1 := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area').Text;
      lcsSta2 := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area2').Text;
      lcsSta3 := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area3').Text;
      if loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area4').Text <> '☆' then
        cxtStartAreaDetail.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area4').Text
      else
		    cxtStartAreaDetail.Text := '';
			lcsConfAREA4            := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area4').Text;
			cxtStartAreaDetail.Hint := loc_Ud_lst_Node.item[0].attributes.getNamedItem('Area5').Text;

			cxtStartXval.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapX').Text;
      cxtStartXval.Hint := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapX').Text;
			cxtStartYval.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapY').Text;
      cxtStartYval.Hint := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapY').Text;

      FModifyLoadInfo.Conf_Area  := lcsSta1;
      FModifyLoadInfo.Conf_Area2 := lcsSta2;
      FModifyLoadInfo.Conf_Area3 := lcsSta3;
      FModifyLoadInfo.Conf_Area4 := lcsConfAREA4;
      FModifyLoadInfo.Conf_Area5 := cxtStartAreaDetail.Hint;
      FModifyLoadInfo.Conf_X     := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapX').Text;
      FModifyLoadInfo.Conf_Y     := loc_Ud_lst_Node.item[0].attributes.getNamedItem('MapY').Text;

      gsStartGUIDEXval := cxtStartXval.Text;
      gsStartGUIDEYval := cxtStartYval.Text;

      lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
      SetDebugeWrite('JON01N.lblStartAreaName.Text 16056 : ' + lblStartAreaName.Text);

      // 출발지 세부지명
      if Trim(cxtStartAreaDetail.Hint) <> '' then
      begin
        if bAutoWorkChk then   // 추가접수인데 기사송금수수료자동설정오더이면 초기화
          meoStartArea.Text := Copy(cxtStartAreaDetail.Hint, pos(']', cxtStartAreaDetail.Hint) + 1, Length(cxtStartAreaDetail.Hint) - pos(']', cxtStartAreaDetail.Hint))
        else
          meoStartArea.Text := cxtStartAreaDetail.Hint;
      end else
      if Trim(cxtStartAreaDetail.Text) <> '' then
        meoStartArea.Text := cxtStartAreaDetail.Text
      else
      if Trim(lcsSta3) <> '' then
        meoStartArea.Text := lcsSta3;

      MarkAllWords(lblStartAreaName, UpperCase(meoStartArea.Text), clRed, [fsBold]);
      MarkAllWords(cxtStartAreaDetail, UpperCase(meoStartArea.Text), clRed, [fsBold]);

      // 도착지 정보
      lcsEnd1 := loc_Ud_lst_Node.item[0].attributes.getNamedItem('EdArea').Text;
      lcsEnd2 := loc_Ud_lst_Node.item[0].attributes.getNamedItem('EdArea2').Text;
      lcsEnd3 := loc_Ud_lst_Node.item[0].attributes.getNamedItem('EdArea3').Text;
      cxtEndAreaDetail.Caption := loc_Ud_lst_Node.item[0].attributes.getNamedItem('EdArea4').Text;
      cxtEndAreaDetail.Hint := loc_Ud_lst_Node.item[0].attributes.getNamedItem('EdArea5').Text;

      gJONEndChkXY.X := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestX').Text;
      gJONEndChkXY.Y := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestY').Text;

      gJONEndChkXY.GUIDE_X := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestX').Text;
      gJONEndChkXY.GUIDE_Y := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestY').Text;

      cxtEndXval.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestX').Text;
      cxtEndYval.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestY').Text;
      cxtEndXval.Hint := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestX').Text;
      cxtEndYval.Hint := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestY').Text;

      FModifyLoadInfo.Conf_EdArea  := lcsEnd1;
      FModifyLoadInfo.Conf_EdArea2 := lcsEnd2;
      FModifyLoadInfo.Conf_EdArea3 := lcsEnd3;
      FModifyLoadInfo.Conf_EdArea4 := cxtEndAreaDetail.Caption;
      FModifyLoadInfo.Conf_EdArea5 := cxtEndAreaDetail.Hint;
      FModifyLoadInfo.Dest_X       := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestX').Text;
      FModifyLoadInfo.Dest_Y       := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DestY').Text;

			gsEndGUIDEXval :=	cxtEndXval.Text;
      gsEndGUIDEYval := cxtEndYval.Text;

      lblEndAreaName.Caption := lcsEnd1 + ' ' + lcsEnd2 + ' ' + lcsEnd3;
      cxReEndArea.Text := lblEndAreaName.Caption + ' ' + cxtEndAreaDetail.Caption;
      SetDebugeWrite('JON01N.cxReEndArea.Text 16100 : ' + cxReEndArea.Text);

      // 도착지 세부지명
      if Trim(cxtEndAreaDetail.Hint) <> '' then
        meoEndArea.Text := cxtEndAreaDetail.Hint
      else if Trim(cxtEndAreaDetail.Caption) <> '' then
        meoEndArea.Text := cxtEndAreaDetail.Caption
      else if Trim(lcsEnd3) <> '' then
        meoEndArea.Text := lcsEnd3;

      MarkAllWords(cxReEndArea, UpperCase(meoEndArea.Text), clRed, [fsBold]);
   //-------------------------------------------------------------------------------------------
   //      과거내역을 가지고 취소율, 지사별 설정값에 의한 고객등급 결정
   //-------------------------------------------------------------------------------------------
      iend := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('EndCnt').Text, 0);
      iCancel := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CancelCnt').Text, 0);
      iTotal := iEnd + iCancel;
      lblCuCntTotal.Caption := IntToStr(iTotal);
      lblCoCntTotal.Caption := IntToStr(iend);
      if (iTotal) > 0 then
      begin
        fcancelRate := ((iCancel / (iend + iCancel)) * 100);
        lblCuCancelR.Caption := IntToStr(Round(fCancelRate)) + '%';
      end else
      begin
        lblCuCancelR.Caption := '0%';
      end;

   // 고객등급사용구분[0:자동등급, 1:직접설정]
   //sTemp := lst_Result.Attributes['LevelType'];
   //if sTemp = '0' then begin
      //CU_LEVEL_TYPE : 0 : 고객 등급 자동계산
      iGrade1 := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('Grade1').Text, 5);
      iGrade2 := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('Grade2').Text, 15);
      Application.ProcessMessages;

      if iEnd >= iGrade1 then
      begin
        // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
        Proc_SetFormColor_2(0);
      end else
      if iEnd >= iGrade2 then
      begin
        // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
        Proc_SetFormColor_2(1);
      end else
      begin
        // frm_Jon03.frmJON011 폼의 고객 자동등급별 라벨 칼라를 변경해 준다.
        Proc_SetFormColor_2(2);
      end;

      //CU_LEVEL_TYPE : 1 : 고객 등급 직접입력 설정.
      SetCustLevelSeq(True, loc_Ud_lst_Node.item[0].attributes.getNamedItem('LevelCD').Text);
      FChkCCI.CbLevel := cboCuLevel.ItemIndex;

			loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Data/Customer/ViaInfo');
			iViaCNT := StrToIntDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('Count').Text, 0);
      ViaADDTag := iViaCNT;
      if iViaCNT > 0 then
      begin
				loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Data/Customer/ViaInfo/Via');
				for i := 0 to iViaCNT - 1 do
				begin
					if i = 0 then
					begin
						meoViaArea1.Text := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area5').Text;
						cxViaAreaName1.Caption := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area1').Text + ' '
																		+ loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area2').Text + ' '
																		+ loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area3').Text;
				    ViaSA1[1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area1').Text;
						ViaSA2[1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area2').Text;
						ViaSA3[1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area3').Text;
						ViaAreaDetail[1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area4').Text;
						ViaAreaName[1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area5').Text;
						XposVia[1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('MapX').Text;
						YposVia[1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('MapY').Text;
						DocId[1] := '';
            CellSel[1] := '';
            SchWord[1] := '';
					end else
					begin
						meoViaArea[i+1].Text := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area5').Text;
						cxViaAreaName[i+1].Caption := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area1').Text + ' '
																				+ loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area2').Text + ' '
																				+ loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area3').Text;
						ViaSA1[i+1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area1').Text;
						ViaSA2[i+1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area2').Text;
						ViaSA3[i+1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area3').Text;
						ViaAreaDetail[i+1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area4').Text;
						ViaAreaName[i+1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('Area5').Text;
						XposVia[i+1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('MapX').Text;
						YposVia[i+1] := loc_Ud_lst_Node.item[i].attributes.getNamedItem('MapY').Text;
            DocId[i+1] := '';
            CellSel[i+1] := '';
            SchWord[i+1] := '';
					end;
        end;

        grpViaArea.Enabled := True;
        grpViaArea.Height := grpViaArea.Height + ( 27 * iViaCNT );
        shpVia.Height := shpVia.Height + 5;

        gJon01Size[Self.Tag].grpViaAreaH := grpViaArea.Height;
        gJon01Size[Self.Tag].shpViaH := shpVia.Height;
        pSetFormScroll(0, ( iViaCNT * 27 ) + 5 );

        // 수정후 지도보기 클릭 시 좌표 사용하기 위해 처리
        for i := 0 to iViaCNT - 1 do
        begin
          if XposVia[i+1] <> '' then
          begin
            GT_PASS_INFO[Self.Tag][i].AREA1 := ViaSA1[i+1];
            GT_PASS_INFO[Self.Tag][i].AREA2 := ViaSA2[i+1];
            GT_PASS_INFO[Self.Tag][i].AREA3 := ViaSA3[i+1];
            GT_PASS_INFO[Self.Tag][i].AREA4 := ViaAreaDetail[i+1];
            if i = 0 then
              GT_PASS_INFO[Self.Tag][i].AREA5 := meoViaArea1.Text
            else
              GT_PASS_INFO[Self.Tag][i].AREA5 := meoViaArea[i+1].Text;
            GT_PASS_INFO[Self.Tag][i].DOCID := DocId[i+1];
            GT_PASS_INFO[Self.Tag][i].CELLS := CellSel[i+1];
            GT_PASS_INFO[Self.Tag][i].SWORD := ViaAreaDetail[i+1];
            GT_PASS_INFO[Self.Tag][i].MAP_X := XposVia[i+1];
            GT_PASS_INFO[Self.Tag][i].MAP_Y := YposVia[i+1];
          end;
        end;
        meoStartArea.Text := meoStartArea.Text + ' '; //수정창에서 경유지명 따로 분리하기위함  gsStArea[iRow]   20190123 KHS
        meoStartArea.Text := Trim(meoStartArea.Text);

        meoViaArea1.Enabled := True;
        cxViaAreaName1.Enabled := True;
        BtnViaAdd.Enabled := True;
        lbl_02.Tag := 1;
        pSetLabelClick(lbl_02);
      end;

			loc_Ud_lst_Node := loc_Ud_xdom.documentElement.selectNodes('/cdms/Service/Data/Customer');
			/////////////////콜벨 20161231 KHS////////////////////////////////
			if loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallBellStatus').Text = '1' then  //콜벨상태(1:정상, 2:해지, null: 콜벨 업소 설정 없음)
			begin
        pnlCallBell.BringToFront;
				pnlCallBell.Visible := True;
        pnlCallBell.Top  := CbCuGb.Top - 4;
				pnlCallBell.Left := cxtCuBubin.Left;
			end	else
			begin
				pnlCallBell.Visible := False;
			end;
			pnlCallBell.Caption := '+++++++콜벨 업소+++++++';
			pnlCallBellAll.Visible := False;
			pnlCallBell.Hint := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallBellStatus').Text;
			gsCuCallBellID := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CallBellMemId').Text;
			/////////////////콜벨 20161231 KHS////////////////////////////////

			if FHidePhoneNum then
			begin
        cxtCuTel.Text := '***********';
      end else
      begin
				sCustTel    := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CustTel').Text;
        if cxtJoinNum.Tag = 1 then  // 오더 구분값 cxtJoinNum.Tag --> 1:오늘(CDMS_A01_Today), 2:과거(CDMS_A01)
        begin
          cxtCuTel.Text := func_Cust_Tel(sCustTel, locBrNo, sCallCenter, sAccCenter, True);   // sBrNo
        end else
        begin
          cxtCuTel.Text := func_Cust_Tel(sCustTel, locBrNo, sCallCenter, sAccCenter, False);
        end;
      end;
			cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);

      // 조회당시 마킹된 또는 정상적인 전화번호 정보를 저장하고, 수정할때, 전화번호가 변경되었는지 비교자료로 사용함. cds. 090421.
			locsCuTelTxtBoxVal:= cxtCuTel.Text;

			//cxtCuTel.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CustTel').Text; // 전화1
			cxtCuTel2.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CustTel2').Text; // 전화2
      //locsCuTel := cxtCuTel.Text;
      locsCuTel := sCustTel;
      FModifyLoadInfo.Hp := sCustTel;
			// 전화번호 감출경우(권한없을때) 수정저장시 이값을 참조.
      locsCuTel2 := cxtCuTel2.Text;
      // 전화번호 감출경우(권한없을때) 수정저장시 이값을 참조.
			gsCuTelHint := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]); // 고객 조회 전화번호 저장.
      sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('PreTime').Text;
      
      // 예약시간
      if Length(Trim(sTemp)) > 17 then
      begin
        dtpResvDate.Text := Copy(sTemp, 1, 10); // 예약시간
        dtpResvTime.Text := Copy(sTemp, 12, 5);
        
//        dtpResvDate.Enabled := (OrderState = 'R');
//        dtpResvTime.Enabled := (OrderState = 'R');
        try
          sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConfPreRealTime').Text;
          dtpResvDateJ.Tag := 1;
          dtpResvTimeJ.Tag := 1;
          CbSecond.Tag := 1;
          try
            dtpResvDateJ.Text := Copy(sTemp, 1, 10); // 예약시간
            dtpResvTimeJ.Text := Copy(sTemp, 12, 5);
            dtpResvDateJ.Enabled := (OrderState = 'R');
            dtpResvTimeJ.Enabled := (OrderState = 'R');
            CbSecond.Enabled := (OrderState = 'R');

            sDT := StrToDateTime(FormatDateTime('YYYY-MM-DD', dtpResvDateJ.date) + ' ' +
                                 FormatDateTime('HH:NN:SS'  , dtpResvTimeJ.Time));

						eDT := StrToDateTime(FormatDateTime('YYYY-MM-DD', dtpResvDate.date) + ' ' +
                                 FormatDateTime('HH:NN:SS'  , dtpResvTime.Time));

            iTmp := MinutesBetween(sDt, eDt);

            CbSecond.ItemIndex := CbSecond.Properties.Items.IndexOf(IntToStr(iTmp));
          finally
            dtpResvDateJ.Tag := 0;
            dtpResvTimeJ.Tag := 0;
            CbSecond.Tag := 0;
          end;
        Except
        end;

        BtnResvView.ImageIndex := 3;

        try
          if sCPStatus = '0' then
          begin
            BtnResJ.Tag := 1;
            BtnResD.Tag := 0;
            pSetButtonClick(BtnResJ);
            pSetButtonClick(BtnResD);

            btnCmdJoin.Caption := '접수예약(F9)';
            cxlblResvG.Caption := '접수일시';
          end else
          if sCPStatus = '5' then
          begin
            BtnResJ.Tag := 0;
            BtnResD.Tag := 1;
            pSetButtonClick(BtnResJ);
            pSetButtonClick(BtnResD);

            btnCmdJoin.Caption := '대기예약(F9)';
            cxlblResvG.Caption := '대기일시';
          end;
        except
        end;

        sTemp := FormatDateTime('YYYY-MM-DD', dtpResvDate.Date) + ' ' + FormatDateTime('HH:NN:SS', dtpResvTime.Time);
        if BtnResJ.Tag = 1 then sTemp := sTemp + ' [접수] 상태로 예약' else
        if BtnResD.Tag = 1 then sTemp := sTemp + ' [대기] 상태로 예약';

				BtnResvView.Hint := sTemp;
				BtnResvView.ShowHint := True;
        if (Trim(wk_Name) <> '') and (btnCmdUpdSave.Hint <> '추가접수') then 
        begin
          lb_CompulWor2.Caption := lb_CompulWor.Caption;
          btn_FindWK.Tag := 1;
          pSetButtonClick(btn_FindWK);
        end;
        
      end;
      sTemp := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('PriceYN').Text);
      // 요금 미지정
      if sTemp = 'y' then lblNoSet.Tag := 1 // 요금 미지정
                     else lblNoSet.Tag := 0;
      pSetLabelClick(lblNoSet);

      // hjf-고객상황실설정(수정정보 조회)
      if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CuBrTelYN')) then
        CustBrTelYN := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CuBrTelYN').Text;

			sTemp := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CuCallingOption').Text);
			if sTemp = '1' then cbTelView.ItemIndex := 0 else
			if sTemp = '2' then
			begin
				if Trim(cxtCuTel2.Text) = '' then cbTelView.ItemIndex := 0
																		 else cbTelView.ItemIndex := 1;
			end else
			if sTemp = 'a' then  //둘다표시
			begin
				if Trim(cxtCuTel2.Text) = '' then cbTelView.ItemIndex := 0
																		 else cbTelView.ItemIndex := 2;
			end else
			if sTemp = 'c' then cbTelView.ItemIndex := 3;

		 // 'BrTelYN' 항목은 사용안함. 서버팀과 협의. 20211005 KHS
//			sTemp := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('BrTelYN').Text);
			// 상황실 번호 보기..
			if sTemp = 'c' then
			begin
				lblCenterMng.Tag := 1;
				lblCenterMng.Enabled := True;
			end else
			begin
				lblCenterMng.Tag := 0;
				lblCenterMng.Enabled := True;
			end;     
      pSetLabelClick(lblCenterMng);

      sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AuthUrl').Text;

      if bAutoWorkChk then   // 추가접수인데 기사송금수수료자동설정오더이면 초기화
				meoBigo.Text := ''
      else
        meoBigo.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConfInfo').Text;

      FModifyLoadInfo.Conf_Info := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConfInfo').Text;

			sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DriverOption').text;

			if Copy(sTemp,1,1) = 'M' then lblOptionSexM.Tag := 1 else
      if Copy(sTemp,1,1) = 'F' then lblOptionSexF.Tag := 1
      else
      begin
				lblOptionSexM.Tag := 0;
        lblOptionSexF.Tag := 0;
      end;
      pSetLabelClick(lblOptionSexM);
      pSetLabelClick(lblOptionSexF);

			sStickCall := Copy(sTemp,2,1);
			sTaksong   := Copy(sTemp,3,1);
			sTakHwak   := Copy(sTemp,4,1);
			sLicType   := Copy(sTemp,5,2);

			if sStickCall = 'y' then lbl_04.Tag := 1;
      pSetLabelClick(lbl_04);

			if sTaksong = 'y' then
			begin
				sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConsShareYn').Text;
				if sTemp <> 'y' then //탁송연합콜이 아닐경우에만
        begin
					lbl_00.Tag := 1;
          pSetLabelClick(lbl_00);
        end;
			end;
			if GS_PRJ_AREA = 'S' then
			begin
				if sTakHwak = 'y' then
				begin
					lbl_00.Tag := 0;
					pSetLabelClick(lbl_00);
					sTaksong := 'n';  //탁송연합콜 관련 수정 20210208KLHS
					
					lbl_06.Tag := 1;
					pSetLabelClick(lbl_06);

        	grpWkLicType.Left := 83;
      	  grpWkLicType.Top  := grpStartArea.Top + grpStartArea.Height;
					grpWkLicType.Visible := True;
					try
						cbbLicType.ItemIndex := cbbLicType.Properties.Items.IndexOf(GetLicTypeValue(sLicType));
					except
						cbbLicType.ItemIndex := 0;
          end;
				end;
			end;

      // 경유요금 :::::::: 신버전 추가 기능 개발..(법인기능요청으로,,개발,,)
			cxCurPathRate.Value := StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('ViaCharge').Text, 0);
			// 대기요금
			cxCurWaitTmRate.Value := StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('WaitCharge').Text, 0);
      // 대기요금
			sTemp := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('WaitTime').Text);
			// 대기시간
      if Length(sTemp) > 3 then
      begin
        cxTmWaitTime.Text := Copy(sTemp, 1, 5); // 대기시간
				curKm.Text := Copy(sTemp, 6, 7) + 'Km'; // 요금 Km 값
        fCruKm := StrToFloatDef(Copy(sTemp, 6, 7), 0);
      end else
        cxTmWaitTime.Text := '00:00';
			// 법인한줄메모
			cxTBubinMemo.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CbMemo').Text;
      // 고객 앱 메모  2022.03.02  LYB
      if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CustDisplayMemo')) then
        edtAppMemo.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('CustDisplayMemo').Text;
			// 지원금
      if btnCmdUpdSave.Hint = '추가접수' then  // 추가접수시 지원금은 초기화 2022.01.18  LYB K드라이브요청
      begin
        cxCurSupportRate.Value := 0;
      end else
      begin
        // 지원금
        if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('SupportCharge')) then
          cxCurSupportRate.Value := StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('SupportCharge').Text, 0);
      end;
			// 기타요금
      if Assigned(loc_Ud_lst_Node.item[0].attributes.getNamedItem('OtherCharge')) then
	  		cxCurOtherRate.Value := StrToFloatDef(loc_Ud_lst_Node.item[0].attributes.getNamedItem('OtherCharge').Text, 0);

			sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConfInfo2').Text; // 적요투(2)
			meoBigo2.Text := ReplaceAll(sTemp, '|', CRLF);

			sTemp := loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConfInfo3').Text; // 적요투(3)
			meoBigo3.Text := ReplaceAll(sTemp, '|', CRLF);

			cxDriverCharge.Text := loc_Ud_lst_Node.item[0].attributes.getNamedItem('DriverCharge').Text; // 기사수수료

			//2013.03.30 khs
      sAppCode        := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppCode').Text;
      sAppLastRegDate := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppLastRegDate').Text;
      sAppLastDelDate := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppLastDelDate').Text;
      sAppLastFinishDate := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppLastFinishDate').Text;
      sAppCuArea      := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppCuArea').Text;
      sAppTermModel   := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppGroup').Text + '/'
                       + loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppTermOS').Text + '/'
                       + loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppTermModel').Text;
      sAppTermOS      := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppVersion').Text;

			sAppDelYn       := loc_Ud_lst_Node.item[0].attributes.getNamedItem('AppDelYn').Text;
			if sAppDelYn = 'y' then sAppDelYn := '어플삭제'
			                   else sAppDelYn := '어플사용';
			if sAppCode = '' then btnCustAppinfo.Enabled := False
                  	   else btnCustAppinfo.Enabled := True;
			SetCustAppInfo(
					sAppCode
				, sAppLastRegDate
				, sAppLastDelDate
				, sAppLastFinishDate
				, sAppCuArea
				, sAppTermModel
				, sAppTermOS
				, sAppDelYn
			);
			grpBubinState.Visible := False;
			trmBubinState.Enabled := False;
			if iBarIndex = 3 then
			begin
				//수정창 일 경우 수정은 가능함
{        if loc_Ud_lst_Node.item[0].attributes.getNamedItem('TaxType').Text = '1' then
        begin
					lbBubinStateName.Caption := '법인계약 해지되어';
					lbBubinStateName2.Visible := True;
					lbBubinStateMemo.Caption := loc_Ud_lst_Node.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
					grpBubinState.BringToFront;
					grpBubinState.Visible := True;
					trmBubinState.Enabled := True;
					ABubinStateIndex := 1;
        end else
        if loc_Ud_lst_Node.item[0].attributes.getNamedItem('TaxType').Text = '2' then
        begin
					lbBubinStateName.Caption := '법인계약 해지되어';
					lbBubinStateName2.Visible := True;
					lbBubinStateMemo.Caption := loc_Ud_lst_Node.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
					grpBubinState.BringToFront;
          grpBubinState.Visible := True;
          trmBubinState.Enabled := True;
					ABubinStateIndex := 2;
				end else   }
//        if lst_Result.Attributes['TaxType'] = '0' then
        begin
          lbBubinStateName.Caption := '정상이용';
					lbBubinStateName2.Visible := False;
					lbBubinStateMemo.Caption := loc_Ud_lst_Node.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
          grpBubinState.Visible := False;
          trmBubinState.Enabled := False;
					ABubinStateIndex := 0;
        end;
      end else
      begin
				lbBubinStateName.Caption := '정상이용';
				lbBubinStateName2.Visible := False;
				lbBubinStateMemo.Caption := loc_Ud_lst_Node.item[0].attributes.getNamedItem('TaxTypeMemo').Text;
        grpBubinState.Visible := False;
				trmBubinState.Enabled := False;
        ABubinStateIndex := 0;
      end;

			sTemp := Trim(loc_Ud_lst_Node.item[0].attributes.getNamedItem('ConfOptions').Text);
      // 콜무 사용 여부
			if Copy(sTemp, 1, 1) = 'y' then lblOptionCallMu.Tag := 1 // 수수료 없음
                                 else lblOptionCallMu.Tag := 0;
      pSetLabelClick(lblOptionCallMu);

			sContent := StringReplace(loc_Ud_lst_Node.item[0].attributes.getNamedItem('CuMemo').Text, '|', '¶', [rfReplaceAll]);
      if Trim(sContent) <> '' then
      begin
				GetTextSeperationEx2('¶', sContent, ls_Rcrd);
        edt_CardMemo.Tag := 1;
	  		for ia := 0 to ls_Rcrd.Count - 1 do
		  	begin
          if ia = ls_Rcrd.Count - 1 then edt_CardMemo.Tag := 0;
          if ia = 0 then
            edt_CardMemo.Text := ls_Rcrd[ia]
          else
            edt_CardMemo.Text := edt_CardMemo.Text + #13#10 + ls_Rcrd[ia];
  			end;
      end;
      FChkCCI.edt_CardMemo := edt_CardMemo.Text;
      if ( TCK_USER_PER.JON_CUSTMEMO2 <> '1') then
      begin
//        if edt_CardMemo.Lines.Count = 1 then BtnSimMemo.Enabled := False
//                                        else BtnSimMemo.Enabled := True;
      end;

      // 상담메모/기사메모 표시
      if ( GS_AUTOMEMO_SHOW ) Or ( bMemoDisplay ) then BtnViewMemo.Click;

			FreeAndNil(ls_Rcrd);
    end else
    begin
      pJON01ShowMessage(Self.Tag, 'C', MSG012 + CRLF + ls_Msg_Err);
//      GMessagebox(MSG012 + CRLF + ls_Msg_Err, CDMSE);
    end;

    // CID 조회 일때는 발신전화없음 멘트 감춤..
    if Pos('*', cxtCuTel.Text) > 0 then
			cxtCallTelNum.Text := locsCuTel // 고객전화번호 읽기.
    else
			cxtCallTelNum.Text := cxtCuTel.Text; // 발신전화번호

//		cxtCallTelNum.StyleDisabled.TextColor := $00FAE1CD;
    // 진한 칼라 : $00555151,   // 옅은 칼라 : $00FAE1CD;

    // 당일오더에 대해서만 Lock을 걸어준다.
    if (btnCmdUpdSave.Enabled = True) and (cxtJoinNum.Tag = 1) then
      Proc_AcceptLock('1'); // 오더 수정 Lock을 설정.

    // 지사변경 제한.[이유:고객조회 후 지사변경시 조회한 고객정보 일부유실 경고메시지 띄우기 위함임]
//    cboBranch.Properties.ReadOnly := True;

    grpBtm.Enabled := True;
    if Self.Visible = True then
    begin
      try
//  			meoStartArea.SetFocus;
//	  		meoEndArea.SetFocus;
        if ( loc_Modify ) And ( GS_MODIFY_MAP_VIEW ) then
        begin
          if Assigned(Frm_JON30) then Hide_Panel(lcsActiveEdit,1);
          J30ShowS := False;         // 수정모드에서도 출발지/도착지 좌표를 보여주기 위해 POI검색창 표시  2020.07.07
          J30ShowE := False;

   		  	meoStartArea.SetFocus;
        end else
        begin
   		  	meoStartArea.SetFocus;

          J30ShowS := False;         // 수정모드에서도 출발지/도착지 좌표를 보여주기 위해 POI검색창 표시  2020.07.07
          J30ShowE := False;
        end;
      except
      end;
    end;

		BtnStLock.Down := GS_AUTO_LOCK_START; //수정창 오픈시 자동잠금 사용이면 자동잠금 자동설정 20171002 KHS
	  if GS_AUTO_LOCK_START then BtnStLockClick(BtnStLock);

  	BtnEdLock.Down := GS_AUTO_LOCK_END;  //수정창 오픈시 자동잠금 사용이면 자동잠금 자동설정 20171002 KHS
		if GS_AUTO_LOCK_END then BtnEdLockClick(BtnEdLock);

  	BtnRaLock.Down := GS_AUTO_LOCK_CHARGE; //수정창 오픈시 자동잠금 사용이면 자동잠금 자동설정 20171002 KHS
		if GS_AUTO_LOCK_CHARGE then BtnRaLockClick(BtnRaLock);

    GB_JON03SELECT_GB := True;
    // 접수현황에서 수정전문 요청시 결과받았는지의 여부.

    Frm_Main.Frm_Jon012[Self.Tag].cxlbSlip.Caption := cxtJoinNum.Text;
    // 오더접수번호
    cxtCallTelNum.Text := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
    Frm_Main.Frm_Jon012[Self.Tag].cxlbCustTel.Caption := locsCuTel; // 고객전화번호 읽기.
		Frm_Main.Frm_Jon012[Self.Tag].cxlbKeyNum.Caption := Proc_MainKeyNumberSearch; // 대표번호 읽기.

    cxCallTitle.Caption := cxCallTitle.Hint + StrToCall(cxtCuTel.Text);
    for i := 0 to JON_MAX_CNT - 1 do
    begin
      if Frm_Main.JON01MNG[i].Tag = Self.Tag then
      begin
        Frm_Main.JON01MNG[i].Caption := cxCallTitle.Caption;
        Frm_Main.JON01MNG[i].Hint := cxCallTitle.Caption;
        Break;
      end;
    end;
    if GS_JON01_TAB = 1 then
    begin
      Self.Caption := cxCallTitle.Caption;
      Frm_JON00.cxTabControl1.Tabs[Frm_JON00.cxTabControl1.TabIndex].Caption := cxCallTitle.Caption;
    end;

		gsUpdateCallBellID := '';
		gsUpdateCallBellStatus := '';
		if gs_CallBellUse then
		begin
			if (gsCuCallBellID = '') and (gsOrderCallBellID = '') then             //둘다 일반업소이면
			else
			if (sOrderCallBellStatus <> '1') and (pnlCallBell.Hint <> '1') then    //둘다 일반업소이면(상태가 1이 아니면 일반업소)
			else
			if (gsCuCallBellID <> gsOrderCallBellID) or (sOrderCallBellStatus <> pnlCallBell.Hint) then                          //둘중 하나가 콜벨업소
			begin
				if gsCuCallBellID = ''    then iTmp := 0 else
				if gsOrderCallBellID = '' then iTmp := 1 else
				if (gsCuCallBellID    <> '') and (pnlCallBell.Hint     <> '1') then iTmp := 0 else
				if (gsOrderCallBellID <> '') and (sOrderCallBellStatus <> '1') then iTmp := 1 else
				iTmp := 2;

				case iTmp of
					0 : msg := '콜벨업소가 일반업소로'; //콜벨업소 -> 일반업소로 변경
					1 : msg := '일반업소가 콜벨업소로'; //일반업소 -> 콜벨업소로 변경
					2 : msg := '콜벨업소의 정보가';     //콜벨업소ID 변경
				end;

        pJON01Show(Self.Tag);
				msg := msg + ' 변경되어있습니다.' + #13#10 + '변경된 업소정보로 오더를 수정하시려면 [예]를 선택하십시오'
									 + #13#10#13#10 + '***업소정보는 오더수정버튼을 눌러야 적용됩니다***';

				if Application.MessageBox(PChar(msg), CDMSI, MB_YESNO+MB_ICONQUESTION+MB_DEFBUTTON1) = IDYES then
				begin
					gsUpdateCallBellID := gsCuCallBellID;       //고객정보의 CallBellID로 오더정보변경
					gsUpdateCallBellStatus := pnlCallBell.Hint;
				end	else
				begin
					gsUpdateCallBellID := gsOrderCallBellID;    //오더정보의 CallBellID 유지
					gsUpdateCallBellStatus := sOrderCallBellStatus;
				end;
			end else
			begin
				gsUpdateCallBellID := gsOrderCallBellID; //오더정보의 CallBellID 유지
				gsUpdateCallBellStatus := sOrderCallBellStatus;
			end;

      // 7.후불(카드), 9.복합 결제 정보를 미리 보여주는 방식으로 변경해서 맨 아래로 이동  20171010  LYB
      if ((sPayMeth = '7') Or (sPayMeth = '9')) and (locCardPaySeq <> '') then  //후불(카드)일경우 결제정보를 미리 조회한다 . 20160823 KHS
      begin
        if Not Assigned(Frm_Main.Frm_JON34B[Self.Tag]) Or (Frm_Main.Frm_JON34B[Self.Tag] = Nil) then
        begin
          Frm_Main.Frm_JON34B[Self.Tag] := TFrm_JON34B.Create(Nil);
          Frm_Main.JON34MNG[Self.Tag].CreateYN := True;
          Frm_Main.JON34MNG[Self.Tag].Use := True;
        end;

        Frm_Main.Frm_JON34B[Self.Tag].Card_Gubun := 1;
        Frm_Main.Frm_JON34B[Self.Tag].lcJON_IDX := Self.Tag;   // 접수창의 index 값 저장.
        Frm_Main.Frm_JON34B[Self.Tag].ProCardInfoSelect(cxtJoinNum.Text);
        gUpdate_CardTranNo := Frm_Main.Frm_JON34B[Self.Tag].lblTranNo.Caption;
        gCardStatus := Frm_Main.Frm_JON34B[Self.Tag].lblCardStatus.Caption;

        bCardSanction := True;//      cbCardSanction.Click;
      end;
		end else
		begin
			gsUpdateCallBellID := gsOrderCallBellID; //오더정보의 CallBellID 유지
			gsUpdateCallBellStatus := sOrderCallBellStatus;
		end;
	except
		on e: exception do
    begin
      sTemp := '[수정 조회중 일시적 오류발생]다시 조회 해주세요.';
      ShowMessage(sTemp);
      GB_JON03SELECT_GB := True;  // 접수현황에서 수정전문 요청시 결과받았는지의 여부.
      Assert(False, sTemp + E.Message);
    end;
  end;
end;

// 고객기본정보를 저장 요청 후 결과 처리를 한다.
procedure TFrm_JON01N.Proc_CustBasicSave_Result(rxxml: String);
var
  ls_Msg_Err: string;
begin
  SetDebugeWrite('JON01N.Proc_CustBasicSave_Result');

  ls_Msg_Err := GetXmlErrorCode(rxxml);
  if ('0000' = ls_Msg_Err) then
  begin
    GMessagebox('고객정보를 수정 완료 하였습니다.', CDMSI);
  end else
  begin
    GMessagebox('고객정보 수정도중 에러가 발생 하였습니다.' + #10#13 + ls_Msg_Err, CDMSE);
  end;
end;

procedure TFrm_JON01N.SetCustBrTelYN(const Value: string);
begin
  SetDebugeWrite('JON01N.SetCustBrTelYN');
  FCustBrTelYN := LowerCase(Value);
  if GB_365System then chkCenterMng.Checked := False
                  else chkCenterMng.Checked := Value = 'y';
end;

procedure TFrm_JON01N.SetCustAppInfo(AAppCode, AAppLastRegDate,
	AAppLastDelDate, AAppLastFinishDate, AAppCuArea, AAppTermModel,
	AAppTermOS, AAppDelYn: string);
const
	__Cu_INF_STR = '앱코드 : %0:s' + #13#10 +
								 '앱설치 : %1:-12s' + #13#10+
                 '앱삭제 : %2:-12s' + #13#10 +
								 '최종 : %3:-10s' + #13#10 +
								 '앱지역 : %4:s' + #13#10 +
								 'OS/모델 : %5:-15s' + #13#10 +
								 '앱설치버전 : %6:-17s' + #13#10 +
								 '사용 : %7:-10s';
begin
  SetDebugeWrite('JON01N.SetCustAppInfo');
	mmoCuInfo.Text := Format(__Cu_INF_STR, [AAppCode, AAppLastRegDate, AAppLastDelDate, AAppLastFinishDate, AAppCuArea, AAppTermModel, AAppTermOS, AAppDelYn]);
end;

procedure TFrm_JON01N.Proc_WorkListView(rxxml: String);
var slTmp : TStringList;
	sTmp : string;
begin
	SetDebugeWrite('JON01N.Proc_WorkListView');
  if Self.Tag < 0 then Exit;

  try
    Frm_Main.Frm_Jon012[Self.Tag].Tag := Self.Tag;
    Frm_Main.Frm_Jon012[Self.Tag].Jon03Tag := Self.Jon03Tag;

		Frm_Main.Frm_Jon012[Self.Tag].Proc_Initialization;
		Frm_Main.Frm_Jon012[Self.Tag].lb_KDWorker.Caption := '';
		Frm_Main.Frm_Jon012[Self.Tag].cxGridKDDrive.DataController.SetRecordCount(0);

		if sCust_Gubun = '1' then                         //기사
		begin
			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[0].TabVisible := False;
			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[1].TabVisible := False;

			Frm_Main.Frm_Jon012[Self.Tag].BtnSheet1.Visible := False;
			Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Visible := True;

			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.ActivePageIndex := 1;
			Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Down := True;
			Frm_Main.Frm_Jon012[Self.Tag].sActivePage := 1;
			//////////////////////////기사정보탭 조회//////////////////////////////
			Frm_Main.Frm_Jon012[Self.Tag].sWk_sabun32 := FWk_sabun;
			//기사 상세 정보 초기화
			Frm_Main.Frm_Jon012[Self.Tag].Proc_Initialization;
			//기사 상세 정보 표시
			Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerInfo;
			//기사 당일 오더내역 조회프로시저
      if gsSvrWkHp = '' then Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerOrderToday(FWk_sabun, '', locsCuTel)
                        else Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerOrderToday(FWk_sabun, '', gsSvrWkHp);
			//기사 업무 현황 조회
			Frm_Main.Frm_Jon012[Self.Tag].btn5.Click;
			Frm_Main.Frm_Jon012[Self.Tag].lbl8.Visible := False;
			Frm_Main.Frm_Jon012[Self.Tag].cxBtnOldSelect.Visible := False;
			Frm_Main.Frm_Jon012[Self.Tag].cxBtnColorSet.Visible := False;
//			Frm_Main.Frm_Jon012[Self.Tag].cbStatesView.Visible := False;
			Frm_Main.Frm_JON012[Self.Tag].cxChkTitle.Visible := False;
			Frm_Main.Frm_JON012[Self.Tag].btn_SelStCd.Visible := False;
			Frm_Main.Frm_Jon012[Self.Tag].cxBtnFixPos.Visible := False;
			Frm_Main.Frm_Jon012[Self.Tag].cxBtnAccept.Visible := ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' );
			Frm_Main.Frm_Jon012[Self.Tag].lb_wkname_title.Visible := True;

			Frm_Main.Frm_Jon012[Self.Tag].pnlCallDrive.Visible := True;
			Frm_Main.Frm_Jon012[Self.Tag].pnl_CallTOT.Visible := True;
		end else
		if sCust_Gubun = '2' then                        //고객
			begin
			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[0].TabVisible := False;
			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[1].TabVisible := False;

			Frm_Main.Frm_Jon012[Self.Tag].BtnSheet1.Visible := True;
			Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Visible := False;

			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.ActivePageIndex := 0;
      Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1Click(Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1);

			Frm_Main.Frm_Jon012[Self.Tag].pnlCallDrive.Visible := False;
			Frm_Main.Frm_Jon012[Self.Tag].pnl_CallTOT.Visible := False;
		end else
    if ( sCust_Gubun = '0' ) And ( Not FHasTodayData ) then                        //기사+고객
    begin
      Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[0].TabVisible := False;
      Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[1].TabVisible := False;

      Frm_Main.Frm_Jon012[Self.Tag].BtnSheet1.Visible := True;
			Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Visible := True;

      Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.ActivePageIndex := 1;
      Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1Click(Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1);

      //////////////////////////기사정보탭 조회//////////////////////////////
			Frm_Main.Frm_Jon012[Self.Tag].sWk_sabun32 := FWk_sabun;
			//기사 상세 정보 초기화
      Frm_Main.Frm_Jon012[Self.Tag].Proc_Initialization;
			//기사 상세 정보 표시
			Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerInfo;
      //기사 당일 오더내역 조회프로시저
      if gsSvrWkHp = '' then Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerOrderToday(FWk_sabun, '', locsCuTel)
                        else Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerOrderToday(FWk_sabun, '', gsSvrWkHp);
			//기사 업무 현황 조회
      Frm_Main.Frm_Jon012[Self.Tag].btn5.Click;

			Frm_Main.Frm_Jon012[Self.Tag].pnlCallDrive.Visible := True;
			Frm_Main.Frm_Jon012[Self.Tag].pnl_CallTOT.Visible := True;
		end;

		Frm_Main.Frm_Jon012[Self.Tag].SetcxPageControl;
		if FHasTodayData then
    begin
      if Frm_Main.Frm_JON03[Jon03Tag].cb_All.Down then Frm_Main.Frm_JON03[Jon03Tag].cb_All.Hint := 'Y'
                                                  else Frm_Main.Frm_JON03[Jon03Tag].cb_All.Hint := 'N';

			Frm_Main.Frm_JON03[Jon03Tag].DisplayTodayOrders(rxxml);          //당일오더   TodayData

			if sCust_Gubun = '0' then                        //기사+고객   당일접수내용있을경우 2013.05.28 KHS
			begin
				Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[0].TabVisible := False;
				Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[1].TabVisible := False;

				Frm_Main.Frm_Jon012[Self.Tag].BtnSheet1.Visible := True;
				Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Visible := True;

				Frm_Main.Frm_Jon012[Self.Tag].pnlCallDrive.Visible := True;
				Frm_Main.Frm_Jon012[Self.Tag].pnl_CallTOT.Visible := True;

				Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.ActivePageIndex := 0;
        Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1Click(Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1);

				//////////////////////////기사정보탭 조회//////////////////////////////
				Frm_Main.Frm_Jon012[Self.Tag].sWk_sabun32 := FWk_sabun;
				//기사 상세 정보 초기화
				Frm_Main.Frm_Jon012[Self.Tag].Proc_Initialization;
				//기사 상세 정보 표시
				Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerInfo;
				//기사 당일 오더내역 조회프로시저
        if gsSvrWkHp = '' then Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerOrderToday(FWk_sabun, '', locsCuTel)
                          else Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerOrderToday(FWk_sabun, '', gsSvrWkHp);
				//기사 업무 현황 조회
				Frm_Main.Frm_Jon012[Self.Tag].btn5.Click;
      end;
		end else
		begin
			Frm_Main.Frm_JON03[Jon03Tag].DisplayTodayOrders('');   //당일오더는 없지만 cxViewCounselToday Gird선택위해 넣어줌. 이부분을제거하면 sg_counsel로 조회가 되서 자동검색중 초기화검색이 이루어짐

			if sCust_Gubun = '1' then                         //기사
			begin
				Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(9, FWk_sabun); // 기사사번으로 조회     [기사전화일때,,]
			end else
{			if sCust_Gubun = '2' then                         //고객
			begin
				Frm_Main.Frm_JON03[Jon03Tag].DisplayTodayOrders(rxxml);          //당일오더   TodayData
			end else}
			if sCust_Gubun = '0' then                         //기사 + 고객
			begin
				Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(9, FWk_sabun); // 기사사번으로 조회     [기사전화일때,,]
			end;
		end;

		if (gsKDWkHp <> '')  and ((GS_PRJ_AREA = 'S') or (GT_KAKAOUse)) then //수도권만 사용 또는 GT_KAKAOUse True 20190328KHS
		begin
			//기사 당일 오더내역 조회프로시저
			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[0].TabVisible := False;
			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[1].TabVisible := False;

			Frm_Main.Frm_Jon012[Self.Tag].BtnSheet1.Visible := False;
			Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Visible := True;

			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.ActivePageIndex := 1;
      Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1Click(Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1);

			slTmp := TStringList.Create;
			Try
				slTmp.Delimiter := '|';
				slTmp.DelimitedText := gsKDWkHp;

				Frm_Main.Frm_Jon012[Self.Tag].Proc_WorkerOrderToday('M00001', '', slTmp[2]);

				if slTmp[0] = 'y' then sTmp := '단순보험공유기사' else sTmp := '공유기사아님';
				Frm_Main.Frm_Jon012[Self.Tag].lb_KDWorker.Caption := '기사정보조회 [' + sTmp + '] ' + slTmp[1] + ', ' + StrToCall(slTmp[2]) + ', ' + slTmp[3] + ', ' + slTmp[4];
			Finally
				slTmp.Free;
			End;
		end;

		if Frm_Main.Frm_Jon01N[Self.Tag].Showing then Proc_Jon012Show;
  Except
    on e: exception do
    begin
			Log('Proc_WorkListView Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'Proc_WorkListView Error :' + E.Message);
    end;
  end;
end;

// 고객 이용내역을 띄워준다.
procedure TFrm_JON01N.Proc_Jon012Show;
Var
   ln_Env : TIniFile;
	slTmp : TStringList;
	sTmp : string;
begin
	SetDebugeWrite('JON01N.Proc_Jon012Show');
  if Self.Tag < 0 then Exit;
  
  try
    try
			if GI_JON_WKCALLPOPUP >= 0 then
			begin
        Frm_Main.Frm_JON01N[GI_JON_WKCALLPOPUP].btnCmdExit.Description := 'T';
				Frm_Main.Frm_JON01N[GI_JON_WKCALLPOPUP].btnCmdExit.Click;
			end;
		except
		end;

    ln_Env := TIniFile.Create(ENVPATHFILE);
		try
    	Frm_Main.Frm_Jon012[Self.Tag].iOpen_Gubun := 0;
      Frm_Main.Frm_Jon012[Self.Tag].Hint := Self.Caption;
      Frm_Main.Frm_Jon012[Self.Tag].Tag := Self.Tag;
      Frm_Main.Frm_Jon012[Self.Tag].bChkTime := True;
      Frm_Main.Frm_Jon012[Self.Tag].Jon03Tag := Self.Jon03Tag;
			Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[0].TabVisible := False;
      Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.Pages[1].TabVisible := False;
			if (sCust_Gubun = '2') or (sCust_Gubun = '') then
      begin
				Frm_Main.Frm_Jon012[Self.Tag].FResize := True;
				Frm_Main.Frm_Jon012[Self.Tag].Width  := StrToIntDef(ln_Env.ReadString('UserHisForm', 'Width', '562'), 562);
				Frm_Main.Frm_Jon012[Self.Tag].FResize := True;
        Frm_Main.Frm_Jon012[Self.Tag].Height := StrToIntDef(ln_Env.ReadString('UserHisForm', 'Height', '277'), 277);
        Frm_Main.Frm_Jon012[Self.Tag].BtnSheet1.Visible := True;
				Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Visible := False;

				Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.ActivePageIndex := 0;
        Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1Click(Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1);

        GI_JON_WKCALLPOPUP := -1;
			end else
			begin
				Frm_Main.Frm_Jon012[Self.Tag].FResize := True;
        Frm_Main.Frm_Jon012[Self.Tag].Width  := StrToIntDef(ln_Env.ReadString('UserHisForm_WK', 'Width_WK', '700'), 700);
        Frm_Main.Frm_Jon012[Self.Tag].FResize := True;
				Frm_Main.Frm_Jon012[Self.Tag].Height := StrToIntDef(ln_Env.ReadString('UserHisForm_WK', 'Height_WK', '476'), 476);

        if sCust_Gubun = '0' then
        begin
					Frm_Main.Frm_Jon012[Self.Tag].BtnSheet1.Visible := True;
					Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Visible := True;
        end else
        if sCust_Gubun = '1' then
        begin
          Frm_Main.Frm_Jon012[Self.Tag].BtnSheet1.Visible := False;
					Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Visible := True;
        end;
				Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.ActivePageIndex := 1;
        Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1Click(Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1);

				if ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' ) then
        begin
          // 기사가 연속으로 전화가 왔을경우 기존접수창 Clear를 위해 변수 저장
          GI_JON_WKCALLPOPUP := Self.Tag;
					Hide_Panel(lcsActiveEdit,1);
          Self.Hide;
        end else
          GI_JON_WKCALLPOPUP := -1;
			end;
			Frm_Main.Frm_Jon012[Self.Tag].pnlKDGrid.Visible := False;
			if (gsKDWkHp <> '')  and ((GS_PRJ_AREA = 'S') or (GT_KAKAOUse)) then //수도권만 사용 또는 GT_KAKAOUse True 20190328KHS
			begin
				if Frm_Main.Frm_Jon012[Self.Tag].pnlCallDrive.Visible then
				begin
					Frm_Main.Frm_Jon012[Self.Tag].pnlKDGrid.Align := alBottom;
					Frm_Main.Frm_Jon012[Self.Tag].splAccept.Visible := True;
				end else
				begin
					slTmp := TStringList.Create;
					Try
						slTmp.Delimiter := '|';
						slTmp.DelimitedText := gsKDWkHp;

						if slTmp[0] = 'y' then sTmp := '단순보험공유기사' else sTmp := '공유기사아님';
						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.Lines.Clear;
						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.Lines.Add(sTmp);
						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.Lines.Add('기사명 : ' + slTmp[1]);
						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.Lines.Add('단말기 : ' + StrToCall(slTmp[2]));
						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.Lines.Add('보험사 : ' + slTmp[3]);
						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.Lines.Add('증권번호 : ' + slTmp[4]);

						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.SelStart := 0;
						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.SelLength := Pos('증권번호', Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.Text) + 20;
						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.SelAttributes.Color := clBlue;
						Frm_Main.Frm_Jon012[Self.Tag].Memo_WorkerInfo.SelAttributes.Style := [fsBold];

						Frm_Main.Frm_Jon012[Self.Tag].pnlKDGrid.Align := alClient;
						Frm_Main.Frm_Jon012[Self.Tag].splAccept.Visible := False;

						Frm_Main.Frm_Jon012[Self.Tag].btn_KDCall.Description := slTmp[2];
					Finally
						slTmp.Free;
					End;
				end;

				if (Frm_Main.Frm_Jon012[Self.Tag].cxGridKDDrive.DataController.RecordCount > 0) and ((GS_PRJ_AREA = 'S') or (GT_KAKAOUse)) then//수도권만 적용
				begin
					Frm_Main.Frm_Jon012[Self.Tag].pnlKDGrid.Visible := True;
					Frm_Main.Frm_Jon012[Self.Tag].pnlKDGrid.height := (Frm_Main.Frm_Jon012[Self.Tag].cxGridKDDrive.DataController.RecordCount * 20) + 100;
				end else Frm_Main.Frm_Jon012[Self.Tag].pnlKDGrid.Visible := False;

				Frm_Main.Frm_Jon012[Self.Tag].FResize := True;
        Frm_Main.Frm_Jon012[Self.Tag].Width  := StrToIntDef(ln_Env.ReadString('UserHisForm_WK', 'Width_WK', '700'), 700);
        Frm_Main.Frm_Jon012[Self.Tag].FResize := True;
				Frm_Main.Frm_Jon012[Self.Tag].Height := StrToIntDef(ln_Env.ReadString('UserHisForm_WK', 'Height_WK', '476'), 476);

				Frm_Main.Frm_Jon012[Self.Tag].BtnSheet2.Visible := True;

				Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1.ActivePageIndex := 1;
        Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1Click(Frm_Main.Frm_Jon012[Self.Tag].cxPageControl1);

				if ( GB_JON_WKCALLPOPUP ) And ( cxLblCIDUseFlg.Hint = 'CID' ) then
        begin
          // 기사가 연속으로 전화가 왔을경우 기존접수창 Clear를 위해 변수 저장
          GI_JON_WKCALLPOPUP := Self.Tag;
          Hide_Panel(lcsActiveEdit,1);
          Self.Hide;
        end else
					GI_JON_WKCALLPOPUP := -1;
			end;
			// 현재 할당된 폼 배열값을 저장.(현재 조회한 고객 데이터가 있는지 여부를 체킹)
      Frm_Main.Frm_Jon012[Self.Tag].SetcxPageControl;
      Frm_Main.Frm_Jon012[Self.Tag].pJON012Dock.bUnDock := pJON01Dock.bUNDock;
      Frm_Main.Frm_Jon012[Self.Tag].pJON012Dock.HDNO    := pJON01Dock.HDNO;
      Frm_Main.Frm_Jon012[Self.Tag].pJON012Dock.BrNo    := pJON01Dock.BrNo;
      Frm_Main.Frm_Jon012[Self.Tag].pJON012Dock.BrName  := pJON01Dock.BrName;
      Frm_Main.Frm_Jon012[Self.Tag].pJON012Dock.Gubun   := pJON01Dock.Gubun;
      Frm_Main.Frm_Jon012[Self.Tag].pJON012Dock.Idx     := pJON01Dock.Idx;

      Frm_Main.Frm_Jon012[Self.Tag].cxLblActive.Visible := False;

      if Frm_Main.Frm_Jon012[Self.Tag].Showing then Frm_Main.Frm_Jon012[Self.Tag].FormShow(Frm_Main.Frm_Jon012[Self.Tag]);
      Frm_Main.Frm_Jon012[Self.Tag].Show;
      Frm_Main.JON012MNG[Self.Tag].Use := True;
    finally
			FreeAndNil(ln_Env);
    end;
  Except
    on e: exception do
    begin
      Log('Proc_Jon012Show Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_Jon012Show Error :' + E.Message);
    end;
  end;
end;

function TFrm_JON01N.func_ResToJoin(AGubun, ASlip, AStatus: string): Boolean;
var
	ls_TxLoad : string;
	rv_str: string;
	ls_rxxml: String;
	slReceive: TStringList;
	ErrCode: integer;
begin
	try
		Result := False;
		ls_TxLoad := GTx_UnitXmlLoad('C007.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'ResToJoin', [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', ASlip, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'CurStatusString', AStatus, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID), [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'GubunCodeString', AGubun, [rfReplaceAll]); //6 = 대기해제

		slReceive := TStringList.Create;
    try
			if Dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
				begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
					proc_recieve(ls_rxxml);
					Result := bResToJoin;
				end;
      end;
    finally
      FreeAndNil(slReceive);
    end;
	except
    on E: Exception do
    begin
      Assert(False, E.Message);
      ls_TxLoad := 'Jon03[pm_CanReResClick]Error : ' + e.Message;
      GMessagebox(PChar(ls_TxLoad), CDMSE);
    end;
  end;
end;

function TFrm_JON01N.func_ReaToJoin(ASlip, AStatus: string): Boolean;
var
	ls_TxLoad : string;
	rv_str: string;
	ls_rxxml: String;
	slReceive: TStringList;
	ErrCode: integer;
begin
	try
		Result := False;
		ls_TxLoad := GTx_UnitXmlLoad('C008.XML');
  	ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'ResToJoin', [rfReplaceAll]);     // ResToJoin 공통사용위해명칭변경안함..

		ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', ASlip, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID), [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'CurStatusString', AStatus, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'BaechaYnString', 'y', [rfReplaceAll]);  // 재접수시 근배 여부 (y/n)

		slReceive := TStringList.Create;
    try
			if Dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
				begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
					proc_recieve(ls_rxxml);
					Result := bResToJoin;
				end;
      end;
    finally
      FreeAndNil(slReceive);
    end;
	except
    on E: Exception do
    begin
      Assert(False, E.Message);
      ls_TxLoad := 'Jon03[pm_CanReResClick]Error : ' + e.Message;
      GMessagebox(PChar(ls_TxLoad), CDMSE);
    end;
  end;
end;

// 오더 일련번호를 받아 오더 수정창을 열어 준다.  sTodayGb:1(당일오더), 2:(과거오더); sInsGubun:"수정", "추가접수"
procedure TFrm_JON01N.Proc_OrderUpdate_Select(sConfSlip, sTodayGb, sInsGubun: string);
begin
  SetDebugeWrite('JON01N.Proc_OrderUpdate_Select');
  Proc_OrderUpdate_Select_New(sConfSlip, sTodayGb, sInsGubun);
end;

// 오더 일련번호를 받아 오더 수정창을 열어 준다.  sTodayGb:1(당일오더), 2:(과거오더); sInsGubun:"수정", "추가접수"
procedure TFrm_JON01N.Proc_OrderUpdate_Select_New(sConfSlip, sTodayGb, sInsGubun: string);
begin
	SetDebugeWrite('JON01N.Proc_OrderUpdate_Select_New');
  if Self.Tag < 0 then Exit;

  loc_Up_Recv_YN := False; // 수정전문 요청후 화면 초기화 완료여부

  try
    SetPrivateVariable; // 접수 전에 조회 조건 관련 전역변수 초기화..
		cxLblCIDUseFlg.Hint := ''; // CID 조회인지 설정을 한다.
		cxtCuTel.Hint := '';

//    locHDNO := '';
//    locBRNO := ''; // 조회 고객 본사, 지사코드, 대표번호 임시저장.
//    locKNum := ''; // CID에서 들어온 대표번호 설정.
    locDNIS := '';
//    locSndTime := '';
		cxtCallTelNum.Text := ''; // CID 설정.
    cxLblConfSlipUseFlg.Hint := 'CONFSLIP'; // 접수번호 조회인지 설정.
		if (Pos('추가접수', sInsGubun) > 0 ) then
			cxtJoinNum.Text := '' //20170530 KHS 추가접수일 경우 접수번호 초기화.백두산대리 요청
		else
			cxtJoinNum.Text := sConfSlip; // 접수번호 저장.

    cxtJoinNum.Tag := StrToIntDef(sTodayGb, 2);
    // sTodayGb:1(당일오더), 2:(과거오더)
    btnCmdUpdSave.Hint := sInsGubun; // "추가접수" 또는 "수정" 구분값 저장.
    if (Pos('수정', sInsGubun) > 0 ) then
    begin
      cxTxtBrNameCaption.Hint := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
			btnCmdExit.Hint := 'UPDATE_MODE' // 오더정보 수정모드 설정을 한다.
		end else
		if (Pos('앱접수', sInsGubun) > 0 ) then
		begin
			cxTxtBrNameCaption.Hint := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
			btnCmdExit.Hint := 'UPDATE_MODE' // 오더정보 앱접수 설정을 한다.
		end else
		if (Pos('조회', sInsGubun) > 0 ) then
		begin
			cxTxtBrNameCaption.Hint := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
			btnCmdExit.Hint := 'UPDATE_MODE' // 오더정보 수정모드 설정을 한다.
		end else
    begin
      cxTxtBrNameCaption.Hint := '';
      btnCmdExit.Hint := '';
    end;

    if btnCmdUpdSave.Tag = 99 then
    begin // 24시간 지난오더는 수정 할 수 없음.
      btnCmdUpdSave.Enabled := False;
    end;

    Frm_Main.Frm_Jon012[Self.Tag].cxBtnOldSelect.Tag := 0;
    Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.SetRecordCount(0);
    Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Clear;
    Frm_Main.Frm_Jon012[Self.Tag].cxGVeOrderList.DataController.Filter.Active := False;
    Application.ProcessMessages;

    if Frm_Main.Frm_Jon01N[Self.Tag].Showing then
      Proc_Jon012Show; // 고객 이용내역을 미리 띄워준다.

    // 접수창 폼 사이즈 변경 안되게 처리 ( 수정할때 )
    grpTitle.Tag := -1;
    // 접수화면의 기본 컨트롤을 초기화 한다.
    if Not Frm_Main.JON01MNG[Self.Tag].bInit then
  		FControlInitial(False, True); // 폼컨트롤 초기화.
		ControlClear(False);

    if btnCmdUpdSave.Hint = '추가접수' then
    begin
      btnCmdUpdSave.Enabled := False;
      btnCmdUpdSave.Visible := False;
    end;

//    cxTxtBrNameCaption.Text := '오더정보 읽는중...';
    // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.
//    cxTxtBrNameCaption.BringToFront;
//    cxTxtBrNameCaption.Visible := True;
    // 지사명, 대표번호 정보를 눈에 확~ 뜨이게, 크게 보여준다.

    loc_Up_Recv_YN := True; // 수정전문 요청후 화면 초기화 완료여부

    pClearModifyInfo;

    // 오더 일련번호를 받아 오더 수정정보를 조회 한다.
		Proc_ConfSlip_Select_New(sConfSlip, sTodayGb);
    // sTodayGb:1(당일오더), 2:(과거오더)

    if ( GB_365System )  then
    begin
      btnCmdJoin.Enabled := False;   // 수정모드에서 접수버튼 비활성화
      if (cxtJoinNum.Hint = '5') then
      begin
        btnCmdWaitR.Visible  := True;
        btnCmdUpdSave.Left   := btnCmdMultiCall.Left;
        btnCmdUpdSave.Top    := btnCmdMultiCall.Top;
        btnCmdUpdSave.Width  := btnCmdMultiCall.Width;
        btnCmdUpdSave.Height := btnCmdMultiCall.Height;
      end;
    end;

    if btnCmdUpdSave.Hint = '추가접수' then
    begin
      btnCmdJoin.Enabled := True;
      dtpResvDateJ.Enabled := True;
      dtpResvTimeJ.Enabled := True;
    end;

    //법인라벨 활성화, 대기,문의일때 클릭이벤트 허용. 그외 허용안함. 엔젤요청 KHS 20211206
{		if (Pos('수정', sInsGubun) > 0 ) or (Pos('엡접수', sInsGubun) > 0 ) then
		begin
			  lblPlusYN.Enabled := False;            //플러스콜 : 수정창에서는 enabled = false
		end; }

    BtnQRate.Enabled := False;
    BtnQRate.Tag := 0;

    Frm_Main.JON01MNG[Self.Tag].bInit := False;
  except
    on e: exception do
    begin
      loc_Up_Recv_YN := True; // 수정전문 요청후 화면 초기화 완료여부
      Assert(False, E.Message);
    end;
  end;
end;

// 오더 일련번호를 받아 오더 수정정보를 조회 한다.  sTodayGubun:1(당일오더), 2:(과거오더)
procedure TFrm_JON01N.Proc_ConfSlip_Select_New(sConfSlip, sTodayGubun: string);
var
  ls_TxLoad: string;
  slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  ErrCode, iHeight : integer;
  sErrorTxt : String;
  startTick, delta : DWord;
begin
	SetDebugeWrite('JON01N.Proc_ConfSlip_Select_New');
  if Self.Tag < 0 then Exit;

  try
    ls_TxLoad := GTx_UnitXmlLoad('C033N4.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'ORDE0011');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfSlipString', En_Coding(sConfSlip)); // 오더일련번호
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'TodayGubunString', En_Coding(sTodayGubun)); // 1:A01_Today, 2:A01 여부

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);
      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False, 15000, sConfSlip) then
      begin
      	startTick := GetTickCount;
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end else
      begin
        sErrorTxt := 'Proc_ConfSlip_Select_New Error : 접수번호 : ' + sConfSlip +
                      ' - Heart Bit Count : ' + IntToStr(gsSEndSockAcceptHb) +
                      ' - PreMsgCode : ' + gsPreMsgCode +
                      ' - ConnectYN : ' + gsSendSockAcceptCon +
                      ' - XML전문 : ' + En_Coding(gsSendSockAcceptData);
        Assert(False,  sErrorTxt);
        pJON01ShowMessage(Self.Tag, 'C', Format('오더 정보 조회 중 오류가 발생하였습니다.' + #13#10 + '수정 창을 닫고 다시시도 바랍니다.(%s)', [FormatDateTime('YYYY-MM-DD HH:NN:SS', Now)]));
//				GMessagebox(Format('오더 정보 조회 중 오류가 발생하였습니다.' + #13#10 + '수정 창을 닫고 다시시도 바랍니다.(%s)', [FormatDateTime('YYYY-MM-DD HH:NN:SS', Now)]), CDMSE);
      end;
    finally
      // 사이즈를 한번만 조정하기 위해 ( 속도 )-----------------
      grpTitle.Tag := 0;
      if btnCmdUpdSave.Hint <> '추가접수' then
      begin
        shpTop2.Height := 20;
        gJon01Size[Self.Tag].shpTop2H := shpTop2.Height;
        pSetFormScroll(0, 15);

        grpModifyTitle.BringToFront;
        grpModifyTitle.Visible := True;
      end;
      SetPnlCustMemoSize(meoCuCCMemo);
      SetPnlCustMemoSize(meoCuWorMemo);
      SetPnlCustMemoSize(edt_CardMemo);
      SetPnlCustMemoSize(mmoCbMemo);
      SetPnlWorkMemoSize;
      iHeight := pFormJon01Size(gJon01Size[Self.Tag]);
      pSetFormScroll(1, iHeight);
      if bCardSanction then cbCardSanction.Click;
       bCardSanction := False;
      // --------------------------------------------------------
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;

    delta := GetTickCount - startTick;
    if GT_USERIF.ID = 'sntest' then cxTBubinMemo.Text := Format('%d', [delta]);
  except
    on e: exception do
    begin
			GMessagebox(Format('오더 정보 조회 중 오류가 발생하였습니다.' + #13#10 + '수정 창을 닫고 다시시도 바랍니다.(E: %s)', [E.Message]), CDMSE);
      grpBtm.Enabled := True;
      Screen.Cursor := crDefault;
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.LoadBigoList;
var
  I: Integer;
  Menu: TMenuItem;
begin
  SetDebugeWrite('JON01N.LoadBigoList');
  try
    FBigoList.Clear;

    FBigoList.Add('전화요망=전화요망');
    FBigoList.Add('독촉전화=독촉전화');
    FBigoList.Add('우수고객=우수고객');
    FBigoList.Add('리콜=리콜');

    FBigoList.AddStrings(GS_UserBigoList1);

    while pmBigo.Items.Count > 2 do
    begin
      if pmBigo.Items[0].Caption = '-' then
        Break;

      Menu := pmBigo.Items[0];
      pmBigo.Items.Delete(0);
      Menu.Free;
    end;

    for I := 0 to FBigoList.Count - 1 do
    begin
      try
        Menu := TMenuItem.Create(pmBigo);
        Menu.Caption := FBigoList.Names[I];
        Menu.Enabled := True;
        Menu.Visible := True;
        Menu.OnClick := mniUserClick;
        Menu.Tag     := i;
        pmBigo.Items.Insert(I, Menu);
      except on E: Exception do
        ShowMessage(E.Message);
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.LoadSpopList;
var
  I: Integer;
  Menu: TMenuItem;
begin
  SetDebugeWrite('JON01N.LoadSpopList');
  try
    FSpopList.Clear;

		FSpopList.Add('출발지 지도보기=출발지 지도보기');
		FSpopList.Add('출발지 로드맵=출발지 로드맵');
		FSpopList.Add('출발지 전화번호검색=출발지 전화번호검색');
		FSpopList.Add('출발지 좌표=출발지 좌표');
		FSpopList.Add('-=-');
		FSpopList.Add('고객출발지로 저장=고객출발지로 저장');
		FSpopList.Add('고객도착지로 저장=고객도착지로 저장');
		FSpopList.Add('-=-');
		FSpopList.Add('출발지POI추가요청=출발지POI추가요청');
		FSpopList.Add('출발지POI오류신고=출발지POI오류신고');
		FSpopList.Add('-=-');
		FSpopList.Add('탁송기사만=탁송기사만');
		FSpopList.Add('정장기사만=정장기사만');
		FSpopList.Add('경유있음=경유있음');
		FSpopList.Add('적요있음=적요있음');
		FSpopList.Add('스틱기사만=스틱기사만');
		FSpopList.Add('킥보드x=킥보드x');
		FSpopList.Add('비흡연=비흡연');
		FSpopList.Add('탁송확대기사만=탁송확대기사만');

		FSpopList.Add(Trim(GS_USERSELECT1) + '=' + Trim(GS_USERSELECT1));

    FSpopList.AddStrings(GS_UserBigoList);

    while pmSpop.Items.Count > 2 do
    begin
      if pmSpop.Items[0].Caption = '설정' then
        Break;

      Menu := pmSpop.Items[0];
      pmSpop.Items.Delete(0);
      Menu.Free;
    end;

    for I := 0 to FSpopList.Count - 1 do
    begin
      try
        Menu := TMenuItem.Create(pmSpop);
        Menu.Caption := FSpopList.Names[I];
        Menu.Enabled := True;
        if i = 2 then menu.Visible := False  // 출발지 전화번호검색제거
                 else Menu.Visible := True;
        Menu.OnClick := mniSpopClick;
        Menu.Tag     := i;

        if ( lbl_00.Tag = 1 ) And (Menu.Caption = '탁송기사만') then Menu.Checked := True;
        if ( lbl_01.Tag = 1 ) And (Menu.Caption = '정장기사만') then Menu.Checked := True;
        if ( lbl_02.Tag = 1 ) And (Menu.Caption = '경유있음'  ) then Menu.Checked := True;
        if ( lbl_03.Tag = 1 ) And (Menu.Caption = '적요있음'  ) then Menu.Checked := True;
				if ( lbl_04.Tag = 1 ) And (Menu.Caption = '스틱기사만') then Menu.Checked := True;
				if ( lbl_06.Tag = 1 ) And (Menu.Caption = '탁송확대기사만') then Menu.Checked := True;
				if ( lblQuickX.Tag = 1 ) And (Menu.Caption = '킥보드x') then Menu.Checked := True;
				if ( lblNoSmoking.Tag = 1 ) And (Menu.Caption = '비흡연') then Menu.Checked := True;
				if ( lbl_05.Tag = 1 ) And (Menu.Caption = GS_USERSELECT1) then Menu.Checked := True;

        // 설정메뉴에서 삭제 처리 ( 숨김처리, 20201123 정회귀팀장요청) LYB
        if (Menu.Caption = '탁송기사만') Or
           (Menu.Caption = '정장기사만') Or
           (Menu.Caption = '경유있음'  ) Or
           (Menu.Caption = '적요있음'  ) Or
           (Menu.Caption = '스틱기사만') Or
           (Menu.Caption = '탁송확대기사만') Or
           (Menu.Caption = '킥보드x') Or
           (Menu.Caption = '비흡연') Or
           (Trim(Menu.Caption) = '') then Menu.Visible := False;

        pmSpop.Items.Insert(I, Menu);
      except on E: Exception do
        ShowMessage(E.Message);
      end;
    end;

    if Trim(GS_USERSELECT) <> '' then
    begin
      lbl_05.Visible := True;
      lbl_05.Hint    := Trim(GS_USERSELECT);
      lbl_05.Caption := Copy(Trim(GS_USERSELECT), 1, 1);
    end else
    begin
      lbl_05.Visible := False;
      lbl_05.Hint    := '';
      lbl_05.Caption := '';
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.LoadEpopList;
var
  I: Integer;
  Menu: TMenuItem;
begin
  SetDebugeWrite('JON01N.LoadEpopList');
  try
    FEpopList.Clear;

    FEpopList.Add('도착지 좌표=도착지 좌표');
    FEpopList.Add('도착지 로드맵=도착지 로드맵');
    FEpopList.Add('-=-');
    FEpopList.Add('고객출발지로 저장=고객출발지로 저장');
    FEpopList.Add('고객도착지로 저장=고객도착지로 저장');
    FEpopList.Add('-=-');
    FEpopList.Add('도착지POI오류신고=도착지POI오류신고');
    FEpopList.Add('-=-');

    FEpopList.AddStrings(GS_UserBigoList);

    while pmEpop.Items.Count > 2 do
    begin
      if pmEpop.Items[0].Caption = '설정' then
        Break;

      Menu := pmEpop.Items[0];
      pmEpop.Items.Delete(0);
      Menu.Free;
    end;

    for I := 0 to FEpopList.Count - 1 do
    begin
      try
        Menu := TMenuItem.Create(pmEpop);
        Menu.Caption := FEpopList.Names[I];
        Menu.Enabled := True;
        Menu.Visible := True;
        Menu.OnClick := mniEpopClick;
        Menu.Tag     := i;
        pmEpop.Items.Insert(I, Menu);
      except on E: Exception do
        ShowMessage(E.Message);
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.mniUserClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.mniUserClick');
  AddBigo(TMenuItem(Sender).Caption, TMenuItem(Sender).Tag);
end;

procedure TFrm_JON01N.mniSpopClick(Sender: TObject);
begin
	SetDebugeWrite('JON01N.mniSpopClick');
	try
		if TMenuItem(Sender).Tag = 11 then
		begin
			if lblTakAlly.Visible then
			begin
				if lblTakAlly.Tag = 1 then lblTakAlly.Tag := 0
															else lblTakAlly.Tag := 1;
				lblTakAllyClick(lblTakAlly);
				pSetLabelClick(lblTakAlly);
				TMenuItem(Sender).Checked := lblTakAlly.Tag = 1;
			end else
			if lbl_00.Visible then
			begin
				if lbl_00.Tag = 1 then lbl_00.Tag := 0
													else lbl_00.Tag := 1;
				plbl_00Click(lbl_00);
				TMenuItem(Sender).Checked := lbl_00.Tag = 1;
			end;

		end else
    if TMenuItem(Sender).Tag = 12 then
    begin
			if lbl_01.Tag = 1 then lbl_01.Tag := 0
                        else lbl_01.Tag := 1;
      plbl_00Click(lbl_01);
      TMenuItem(Sender).Checked := lbl_01.Tag = 1;
    end else
    if TMenuItem(Sender).Tag = 13 then
    begin
      if lbl_02.Tag = 1 then lbl_02.Tag := 0
                        else lbl_02.Tag := 1;
      plbl_00Click(lbl_02);
      TMenuItem(Sender).Checked := lbl_02.Tag = 1;
    end else
    if TMenuItem(Sender).Tag = 14 then
    begin
      if lbl_03.Tag = 1 then lbl_03.Tag := 0
                        else lbl_03.Tag := 1;
      plbl_00Click(lbl_03);
      TMenuItem(Sender).Checked := lbl_03.Tag = 1;
    end else
    if TMenuItem(Sender).Tag = 15 then
    begin
      if lbl_04.Tag = 1 then lbl_04.Tag := 0
                        else lbl_04.Tag := 1;
      plbl_00Click(lbl_04);
      TMenuItem(Sender).Checked := lbl_04.Tag = 1;
    end else
    if TMenuItem(Sender).Tag = 16 then
    begin
      if lblQuickX.Tag = 1 then lblQuickX.Tag := 0
                           else lblQuickX.Tag := 1;
      plbl_00Click(lblQuickX);
      TMenuItem(Sender).Checked := lblQuickX.Tag = 1;
		end else
    if TMenuItem(Sender).Tag = 17 then
    begin
      if lblNOSmoking.Tag = 1 then lblNOSmoking.Tag := 0
                              else lblNOSmoking.Tag := 1;
      plbl_00Click(lblNOSmoking);
      TMenuItem(Sender).Checked := lblNOSmoking.Tag = 1;
		end else
		begin
			if GS_PRJ_AREA = 'S' then
			begin
				if TMenuItem(Sender).Tag = 18 then
				begin
					if lbl_06.Tag = 1 then lbl_06.Tag := 0
     								        else lbl_06.Tag := 1;
					plbl_00Click(lbl_06);
					TMenuItem(Sender).Checked := lbl_06.Tag = 1;
				end else
				if TMenuItem(Sender).Tag = 19 then
				begin
					if lbl_05.Tag = 1 then lbl_05.Tag := 0
												    else lbl_05.Tag := 1;
					plbl_00Click(lbl_05);
					TMenuItem(Sender).Checked := lbl_05.Tag = 1;
				end else
					AddSpop(TMenuItem(Sender).Caption, TMenuItem(Sender).Tag);
			end	else
			begin
				if TMenuItem(Sender).Tag = 18 then
				begin
					if lbl_05.Tag = 1 then lbl_05.Tag := 0
												    else lbl_05.Tag := 1;
					plbl_00Click(lbl_05);
					TMenuItem(Sender).Checked := lbl_05.Tag = 1;
				end
				else AddSpop(TMenuItem(Sender).Caption, TMenuItem(Sender).Tag);
			end;
		end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.mniEpopClick(Sender: TObject);
begin
  SetDebugeWrite('JON01N.mniEpopClick');
  AddEpop(TMenuItem(Sender).Caption, TMenuItem(Sender).Tag);
end;

procedure TFrm_JON01N.Proc_CustSMSSave;
var
  ls_TxLoad: string;
  iFidx: Integer;
  slRcvList: TStringList;
  rv_str, ls_rxxml : string;
	ErrCode: integer;
begin
  SetDebugeWrite('JON01N.Proc_CustSMSSave');
	try
    if cxtCallTelNum.Text = '' then
    begin
      GMessagebox('고객 전화번호가 없습니다. 고객정보를 재조회 한 다음 [SMS거부] 하세요!', CDMSE);
      Exit;
    end;

    if cxtCallTelNum.Text <> cxtCuTel.Text then
    begin
      GMessagebox('수정 할 고객 전화번호가 조회한 전화번호와 다릅니다. 고객정보를 재조회 한 다음 [SMS거부] 하세요!', CDMSE);
      Exit;
    end;

    iFidx := Self.Tag; // 폼의 index를 저장.
    locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
    locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

    if cxtCallTelNum.Text = '' then
    begin
      cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
      cxtCallTelNum.Text := cxtCuTel.Text;
    end;

    //////////////////////////////////////////////////////////////////////////////////
    //  SMS거부 수정 전문
    //////////////////////////////////////////////////////////////////////////////////
    ls_TxLoad := GTx_UnitXmlLoad('JON03020.XML');

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'JON03020');

    if ChkCuSmsNo.Checked then // SMS수신거부
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', 'n')
		else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', 'y');

    if (0 >= Pos('*', cxtCuTel.Text)) then
      //[수정시에]고객전화번호 마킹처리된것 일때,, [locsCuTel, locsCuTel2]
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(cxtCallTelNum.Text))
    else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(locsCuTel));

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuSeqString', lcsCu_seq);

    Screen.Cursor := crHourGlass;
		slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, True);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, True);
    end;
  except
    on e: Exception do
    begin
      ls_TxLoad := 'JON01N[Proc_CustBasicSave]:' + e.message;
      Log(ls_TxLoad, LOGDATADIRECTORY + 'Accept_Err.log');

      // 에러 정보를 서버에 저장한다.
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.Proc_CustMileDeduct(ATag: integer; AMsg: string);
var
	Param : string;
	locHdNo, locBrNo, sMileMny: string;
	XmlData, ErrMsg: string;
	ErrCode: integer;
	CurMlg, PrizeCnt, PrizeMlg: Integer;
	sResult : string;
begin
	try
		if lcsCu_seq = '' then
		begin
			ShowMessage('고객 일련번호가 없습니다. 고객정보를 조회 한 다음 ['+AMsg+'] 하세요!');
			Exit;
    end;
		if cxtCallTelNum.Text = '' then
		begin
			ShowMessage('고객 전화번호가 없습니다. 고객정보를 조회 한 다음 ['+AMsg+'] 하세요!');
			Exit;
		end;
		if cxtCallTelNum.Text <> cxtCuTel.Text then
    begin
			ShowMessage('마일리지 ['+AMsg+']할 고객 전화번호가 조회한 전화번호와 다릅니다. 고객정보를 재조회 한 다음 ['+AMsg+'] 처리 하세요!');
      Exit;
    end;
    if curOutMileMny.Value < 1 then
    begin
			ShowMessage(''+AMsg+'할 마일리지 금액을 입력 하세요!');
      curOutMileMny.SetFocus;
      Exit;
    end;

		if not func_EucKr_Check(edtMileMemo, 0) then
		begin
			GMessagebox(Format('         [%s] <<< 문자오류' + #13#10 + #13#10 + '이 문자는 올바른 표기가 아닙니다. '  + #13#10
				+ '정확히 입력하여 주십시오.', [sResult]), CDMSE);

			edtMileMemo.SetFocus;
			Exit;
		end;

		sMileMny := FloatToStr(curOutMileMny.Value);

		locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
		locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.

		Param := En_Coding(lcsCu_seq);
		Param := Param + '│' + En_Coding(cxtCuTel.Text);
		Param := Param + '│' + locHdNo;
    Param := Param + '│' + locBrNo;
    Param := Param + '│' + En_Coding(edtMileMemo.Text);
		Param := Param + '│' + En_Coding(sMileMny);
		Param := Param + '│' + IntToStr(ATag) +'│0';   // 0.차감,1.충전 || 0.마일리지,1.이벤트횟수
    Param := Param + '│' + En_Coding(cbbCuProduct.Text);

    if not RequestBase(GetCallable05('SET_CUST_MILEAGE', 'MNG_CUST.SET_CUST_MILEAGE', Param), XmlData, ErrCode, ErrMsg) then
		begin
			GMessageBox(Format('[%d] %s', [ErrCode, ErrMsg]), CDMSE);
			Exit;
    end;
		prizeMlg := StrToIntDef(ReplaceAll(lblCuMile.Caption, ',', ''), 0);
		if ATag = 0 then
			CurMlg := prizeMlg - StrToIntDef(ReplaceAll(curOutMileMny.Text, ',', ''), 0)
		else
			CurMlg := prizeMlg + StrToIntDef(ReplaceAll(curOutMileMny.Text, ',', ''), 0);
		PrizeCnt := StrToIntDef(lblCuMileCnt.Caption, 0) + 1;

		lblCuMile.Caption := FormatFloat('#,##0', CurMlg);
    if CurMlg > 999999 then lblCuMile.Style.Font.Style := []
                       else lblCuMile.Style.Font.Style := [fsBold];
		lblCuMileCnt.Caption := IntToStr(PrizeCnt);
		SetMileColorChange;

		curOutMileMny.Value := 0;
		edtMileMemo.Clear;

		btn_MileOut_Close.Click;

		ShowMessage('마일리지가 ['+AMsg+'] 되었습니다.');
	except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.SetCuProduct(AProdName: string; AProdPrice: Integer);
var
	Item: TStrings;
begin
	cbbCuProduct.Clear;

	if IsUseCoupon(locBRNO) then
	begin
		cbbCuProduct.Properties.Items.Text := _PROD_LIST;
		lbMileCaption.Style.TextColor := clRed;
  end else
  begin
		cbbCuProduct.Properties.Items.Text := _PROD_BASE;
		lbMileCaption.Style.TextColor := clBlue;
  end;

	if AProdName <> '' then
	begin
    Item := cbbCuProduct.Properties.Items;
    Item.Insert(1, AProdName);
    if cbbCuProduct.Properties.Items.Count > 1 then
    begin
      cbbCuProduct.ItemIndex := 2;
      AProdPrice := GetPriceFromProduct(cbbCuProduct.Text);
    end
    else if cbbCuProduct.Properties.Items.Count = 2 then
      cbbCuProduct.ItemIndex := 1
    else
      cbbCuProduct.ItemIndex := -1;
  end else
  begin
    if cbbCuProduct.Properties.Items.Count > 1 then
    begin
      cbbCuProduct.ItemIndex := 1;
      AProdPrice := GetPriceFromProduct(cbbCuProduct.Text);
    end else
      cbbCuProduct.ItemIndex := -1;
  end;

  curOutMileMny.Value := AProdPrice;
end;

function TFrm_JON01N.GetPriceFromProduct(AStr: string): Integer;
var
	Str: string;
begin
	Str := Copy(AStr, 1, Pos('원', AStr) - 1);
	Str := RemoveComma(Str);

	Result := StrToIntDef(Str, 0);
end;

// 고객 기본정보를 저장 한다.
procedure TFrm_JON01N.Proc_CustBasicSave;
var
  ls_TxLoad: string;
  iFidx: Integer;
  slRcvList: TStringList;
  rv_str, ls_rxxml, sContent: string;
	ErrCode: integer;
begin
  SetDebugeWrite('JON01N.Proc_CustBasicSave');
	try
    if lcsCu_seq = '' then
    begin
      GMessagebox('고객 일련번호가 없습니다. 고객정보를 재조회 한 다음 [수정] 하세요!', CDMSE);
      Exit;
    end;

    if cxtCallTelNum.Text = '' then
    begin
      GMessagebox('고객 전화번호가 없습니다. 고객정보를 재조회 한 다음 [수정] 하세요!', CDMSE);
      Exit;
    end;

    if cxtCallTelNum.Text <> cxtCuTel.Text then
    begin
      GMessagebox('수정 할 고객 전화번호가 조회한 전화번호와 다릅니다. 고객정보를 재조회 한 다음 [수정] 하세요!', CDMSE);
      Exit;
    end;

    iFidx := Self.Tag; // 폼의 index를 저장.
    locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
    locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

    if cxtCallTelNum.Text = '' then
    begin
      cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
      cxtCallTelNum.Text := cxtCuTel.Text;
    end;

    //////////////////////////////////////////////////////////////////////////////////
    //  고객정보 수정 전문
    //////////////////////////////////////////////////////////////////////////////////
    ls_TxLoad := GTx_UnitXmlLoad('C032N2.XML');

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'CUSV0032');

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfSlipString', cxtJoinNum.Text);
    if ChkCuSmsNo.Checked then // SMS수신거부
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', 'n')
		else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', 'y');

    if (0 >= Pos('*', cxtCuTel.Text)) then
      //[수정시에]고객전화번호 마킹처리된것 일때,, [locsCuTel, locsCuTel2]
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(cxtCallTelNum.Text))
    else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(locsCuTel));

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuCCMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfMemoString', En_Coding(sContent));

		sContent := '';
		sContent := ReplaceAll(Trim(edt_CardMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuMemoString', En_Coding(sContent));

		// 고객구분-0(일반), 1(업소), 3(법인)
		if CBCuGb.ItemIndex = 2 then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '3')
    else
    if CBCuGb.ItemIndex = 1 then
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '1')
    else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '0');

    // 고객등급 추가 : 0.불량:빨강, 1.주의:주황, 2.일반:하늘, 3.우수:동색, 4.최우수:은색, 5.VIP:황금색
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'LevelCdString', GetCustLevelSeq);
		// 법인일 경우 세팅..
		if (CBCuGb.ItemIndex = 2) and (cxtCuBubin.Hint <> '') then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', En_Coding(cxtCuBubin.Hint));
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', '');
    end;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuSeqString', lcsCu_seq);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustNameString', En_Coding(edtCuName.Text));

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuWorMemo.Text), #$D#$A, '|');
		sContent := ReplaceAll(sContent, #13#10, '|');
		sContent := ReplaceAll(sContent, #10#13, '|');
		sContent := StringReplace(sContent, '│', '|', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarInfoString', En_Coding(sContent));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'BrTelYNString', CustBrTelYN);

    Screen.Cursor := crHourGlass;
		slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, True);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, True);
    end;
  except
    on e: Exception do
    begin
      ls_TxLoad := 'JON01N[Proc_CustBasicSave]:' + e.message;
      Log(ls_TxLoad, LOGDATADIRECTORY + 'Accept_Err.log');

      // 에러 정보를 서버에 저장한다.
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.proc_delete_customer;
const
  ls_Param = '<param>ParamString</param>';
var
  rv_str, ls_TxLoad, sBrNo, sHdNo:
  string;
  sParam, sTemp, sKeynum, sCustTel: string;
  slRcvList: TStringList;
  ls_rxxml: string;
  ErrCode: integer;
begin
  SetDebugeWrite('JON01N.proc_delete_customer');
  if lcsCu_seq = '' then
  begin
    GMessagebox('고객이 없습니다!', CDMSE);
    Exit;
  end;

  try
    sHdNo := Proc_HDNOSearch;
    sBrNo := Proc_BRNOSearch;
    sKeynum := Proc_MainKeyNumberSearch;
    sCustTel := ReplaceAll(cxtCuTel.Text, '-', '');
    if GMessagebox('삭제고객번호 : ' + StrToCall(sCustTel) + #13#10 +
      '삭제시 고객정보와 이용횟수, 마일리지가 삭제됩니다.' + #13#10 +
      '[단, 고객 이용내역은 삭제되지 않습니다.]' + #13#10 +
      '[또한, 현재 등록된 오더가 있을 경우에도 삭제 안됨]' + #13#10 +
      '삭제하시겠습니까?', CDMSQ) <> idok then
      Exit;

    sKeynum := ReplaceAll(sKeynum, '-', '');
    sCustTel := ReplaceAll(sCustTel, '-', '');

    ls_TxLoad := GTx_UnitXmlLoad('CALLABLE.xml');

    sTemp := 'PROC_DELETE_CUSTOMER_NEW1(?,?,?,?,?,?)';
    sParam := ReplaceAll(ls_Param, 'ParamString', sHdNo);
    sParam := sParam + ReplaceAll(ls_Param, 'ParamString', sBrNo);
    sParam := sParam + ReplaceAll(ls_Param, 'ParamString', sKeynum);
    sParam := sParam + ReplaceAll(ls_Param, 'ParamString', sCustTel);
    sParam := sParam + ReplaceAll(ls_Param, 'ParamString', lcsCu_seq);

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', En_Coding(GT_USERIF.ID));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'DELETECUST');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallString', sTemp);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CountString', IntToStr(5));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ParamString', sParam);

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, False);

      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, False);
    end;

  except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.SetCmdOrderUpdate;
begin
	SetDebugeWrite('JON01N.SetCmdOrderUpdate');
  try
    StartListN := '0';  //출발지 리스트선택값 초기화
    EndListN := '0';    //도착지 리스트선택값 초기화
    btnCmdWaitR.Visible := False;
    if Pos('조회', Self.Caption) > 0 then
    begin
      btnCmdMultiCall.Enabled := False;
      btnCmdQuestion.Enabled := False;
//      btnCmdUpdSave.Visible := True; // 수정버튼
      btnCmdUpdSave.Enabled := True;
//      btnCustomSMS.Visible := True;  // 수정창에서 고객SMS
//      btnCmdQuestionCopy.Visible := True;  // 수정창에서 문의후복사
    end else
		if (Pos('수정', Self.Caption) = 0 ) and (Pos('앱접수', Self.Caption) = 0 ) then
		begin
      btnCmdQuestion.Enabled := True;
      btnCmdUpdSave.Enabled := False;
//      btnCmdUpdSave.Visible := False; // 수정버튼
      btnCmdMultiCall.Enabled := True;
//      btnCustomSMS.Visible := False;  // 고객SMS
//      btnCmdQuestionCopy.Visible := False;  // 문의후복사
      J30ShowS := False;
      J30ShowE := False;
      if btnCmdUpdSave.Hint = '추가접수' then
      begin
        J30ShowS := True;
        J30ShowE := True;
      end;
    end else
    begin
      btnCmdMultiCall.Enabled := False;
      btnCmdQuestion.Enabled := False;
//      btnCmdUpdSave.Visible := True; // 수정버튼
//      btnCustomSMS.Visible  := True;  // 수정창에서 고객SMS
//      btnCmdQuestionCopy.Visible := True;  // 수정창에서 문의후복사
      btnCmdUpdSave.Enabled := not (btnCmdUpdSave.Tag = 99);
      J30ShowS := True;
      J30ShowE := True;
    end;

    // 수정화면과 접수화면 버튼 위치
    if Frm_Main.JON01MNG[Self.Tag].bModify then
    begin
      btnCmdUpdSave.Visible := True; // 수정버튼

      btnCmdJoin.Left := 6;
      btnCmdJoin.Width := 86;
      btnCmdWait.Left := 94;
      btnCmdWait.Width := 86;

      btnCmdJoinCopy.Left  := 6;
      btnCmdJoinCopy.Width := 86;
      btnCmdWaitCopy.Left  := 94;
      btnCmdWaitCopy.Width := 86;

      btnCmdQuestionCopy.Visible := True;

      btnCmdExit.Left  := 487;
      btnCmdExit.Width := 91;
      btnCmdNoSMS.Width := 85;
      btnPickupInsert.Width := 85;

      btnCustomSMS.Visible := True;
    end else
    // 접수화면시
    begin
      btnCmdUpdSave.Visible := False;

      btnCmdJoin.Left := 6;
      btnCmdJoin.Width := 112;
      btnCmdWait.Left := 121;
      btnCmdWait.Width := 112;

      btnCmdJoinCopy.Left  := 6;
      btnCmdJoinCopy.Width := 112;
      btnCmdWaitCopy.Left  := 121;
      btnCmdWaitCopy.Width := 112;

      btnCmdQuestionCopy.Visible := False;

      btnCmdExit.Left := 466;
      btnCmdExit.Width := 112;

      btnCmdNoSMS.Width := 112;
      btnPickupInsert.Width := 112;

      btnCustomSMS.Visible := False;
    end;
  except
    on e: exception do
    begin
      Log('SetCmdOrderUpdate Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'SetCmdOrderUpdate Error :' + E.Message);
    end;
  end;
end;

// 지사별 멘트 구하기..
function TFrm_JON01N.Func_brtel_memo(sBrNo, sKeyNum: string): string;
var
  i: Integer;
  wMemo, wResult: String;
begin
  SetDebugeWrite('JON01N.Func_brtel_memo');
  wResult := '';
  i := 0;
  // 0지사코드, 1지사명, 2대표번호, 3기본요금, 4콜센터코드, 5본사코드, 6멘트, 7상황실번호
  try
    while True do
    begin
      if GSL_HD_LIST[i, 0] = '' then break;
      if (GSL_HD_LIST[i, 0] = sBrNo) and (GSL_HD_LIST[i, 2] = sKeyNum) then
      begin
        if GSL_HD_LIST[i, 6] <> '' then
        begin
          wMemo := GSL_HD_LIST[i, 6];
          wResult := wMemo;
        end
        else
          wResult := '';
        Break;
      end;
      Inc(i);
    end;
  except
  end;
  Result := wResult;
end;

procedure TFrm_JON01N.Proc_GridCustChoice(iRcIdx: Integer);
begin
  SetDebugeWrite('JON01N.Proc_GridCustChoice');
  try
    cxtCuTel.Text := cxCustView.DataController.Values[iRcIdx, 1]; // 고객전화번호
    cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
    gsCuTelHint := cxtCuTel.Text;
    cxtCallTelNum.Text := cxtCuTel.Text;
		locsCuTel  := cxtCuTel.Text;
    locsCuTel2 := '';

    cxGBSearch.Visible := False;
    SearchCuTel(False);
  Except
    on e: exception do
    begin
      Log('Proc_GridCustChoice Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_GridCustChoice Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.Proc_Driver_Charge;
var
  slAreaList, slResult: TStringList;
  strSearch, strData: string;
  I, iPer : Integer;
  tmBsArea, tmBsNum: string;  // 2010.12.13 =검색-> 이상값 겁색
  tmLpArea, tmLpNum: string;
  tmCost: string;
begin
	SetDebugeWrite('JON01N.Proc_Driver_Charge');
  try
    if GS_JON_DRIVERCHARGELOCAL = 'n' then
    begin
      slAreaList := TStringList.Create;
      slResult := TStringList.Create;
      tmCost:='';
      try
        GetTextSeperationEx2(' ', lblStartAreaName.Text, slAreaList);
        if slAreaList.count > 1 then
        begin
          if Length(slAreaList[1]) > 0 then
          begin
            // 기사 수수료 검색어 구성..
            strSearch := slAreaList[0] + slAreaList[1] + IntToStr(curRate.Value);
            tmBsArea := slAreaList[0]+slAreaList[1];
            tmBsNum := IntToStr(curRate.Value);

            // 2010.12.13 ( = 조회 -> <= 조회)
            // 기사 수수료 검색
            //Area_Charge_List.Sorted := True;
            try
              for I := 0 to Area_Charge_List.Count - 1 do
              begin
                GetTextSeperationEx('│', Area_Charge_List.Strings[I], slResult);
                strData := slResult[0];
                tmLpArea:= str2string(slResult[0]);
                tmLpNum := IntToStr(str2integer(slResult[0]));
                if (tmBsArea=tmLpArea) and (StrToIntDef(tmBsNum,0)>=StrToIntDef(tmLpNum,0)) then
                  tmCost:=slResult[1];
              end;

              // 2011.01.19 (기사수수료율 추가 100이하시 currate 에서 해당율 승산후 100을 제산
              if (strtointdef(tmCost,0)<=100) and (strtointdef(tmCost,0)>0) and (Trim(tmCost)<>'') then
              begin
                tmCost:= IntToStr(Round(strtointdef(tmBsNum,0)*strtointdef(tmCost,0)/100));
                cxDriverCharge.text:= tmCost;
              end else
              if (strtointdef(tmCost,0)>100) and (Trim(tmCost)<>'') then
              begin
                cxDriverCharge.Text:= tmCost;
              end else
              begin
                cxDriverCharge.Text:= '';
              end;
            finally
              FreeAndNil(slResult);
            end;
          end else
          begin
            cxDriverCharge.Text := '';
          end;
        end else begin
          cxDriverCharge.Text := '';
        end;
      finally
        FreeAndNil(slAreaList);
      end;
    end else
    begin
      if curRate.Value <> 0 then
      begin
        if ( Pos('%', cbDriverChargeLocalValue.Text) > 0 ) then
        begin
          iPer := StrToIntDef(StringReplace(cbDriverChargeLocalValue.Text, '%', '', [rfReplaceAll]), 0);
          cxDriverCharge.Value := Trunc(curRate.Value * ( iPer / 100 ));
        end else
        if ( Pos('원', cbDriverChargeLocalValue.Text) > 0 ) then
        begin
          cxDriverCharge.Value := StrToIntDef(StringReplace(cbDriverChargeLocalValue.Text, '원', '', [rfReplaceAll]), 0);
        end;
      end;
    end;
  Except
    on e: exception do
    begin
			Log('Proc_Driver_Charge Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'Proc_Driver_Charge Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.lb_ResJ_MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var sTmp, sGubun : string;
  AOrderLabel, AResvLabel : TcxLabel;
begin
{  if TcxLabel(Sender).Name = 'lb_ResJ' then
  begin
    AOrderLabel := lb_ResJ;
    AResvLabel := lb_ResD;
    lb_ResJ.Tag := 1;
    lb_ResD.Tag := 0;
    sGubun := '접수';
  end else
  if TcxLabel(Sender).Name = 'lb_ResD' then
  begin
    lb_ResJ.Tag := 0;
    lb_ResD.Tag := 1;
    sGubun := '대기';
  end;
  
  //예약접수 처리
//  lb_ResJ.Tag := 0;
  pSetLabelClick(lb_ResJ);
//  lb_ResD.Tag := 0;
  pSetLabelClick(lb_ResD);


  fGetDiffDay( FormatDateTime('YYYYMMDD', dtpResvDate.Date) + FormatDateTime('HHNN00', dtpResvTime.Time) );
  //카카오T AI요금표사용
  if TcxLabel(Sender).Tag = 1 then
  begin
    if ( dtpResvDate.Text + ' ' + dtpResvTime.Text )  < FormatDateTime('YYYY-MM-DD HH:NN:SS', Now) then
    begin
			GMessagebox('과거날짜로는 예약할 수 없습니다', CDMSE);
      TcxLabel(Sender).Tag := 0;
			BtnResv.Tag := 0;
      Exit;
    end;

		sTmp := FormatDateTime('YYYY-MM-DD', dtpResvDate.Date) + ' ' + FormatDateTime('HH:NN:SS', dtpResvTime.Time);
    sTmp := sTmp + ' [' + sGubun + '] 상태로 예약';
    btnCmdJoin.Caption := sGubun + '예약(F9)';

		BtnResvView.ImageIndex := 3;
    BtnResvView.Hint := sTmp;
    BtnResvView.ShowHint := True;

		BtnResv.Tag := 1;

    if GT_Kakao_KMAiRate then img_KakaoTAiChargeClick(img_KakaoTAiCharge); //경유요금을 계산하기 위함
  end; }
end;

procedure TFrm_JON01N.lcs_Clear(Panel: string);
begin
  SetDebugeWrite('JON01N.lcs_Clear');
  try
    if Panel = 'meoStartArea' then
    begin
      if BtnStLock.Hint <> 'F4)잠금' then    //  20130703  LYB  잠금상태에서는 초기화하지 않는다.
      begin
        // 20120805 좌표 오류 체크 LYB
        gJONStaChkXY.Area1 := '';
        gJONStaChkXY.Area2 := '';
        gJONStaChkXY.Area3 := '';
        gJONStaChkXY.Area4 := '';
        gJONStaChkXY.Area5 := '';
        gJONStaChkXY.X := '';
        gJONStaChkXY.Y := '';
        gJONStaChkXY.GUIDE_X := '';
        gJONStaChkXY.GUIDE_Y := '';

				lcsSta1 := '';
        lcsSta2 := '';
				lcsSta3 := '';
        lcsSta4 := '';
        lcsStaDocId := '';
        lcsStaCellSel := '';
				lcsStaSchWord := '';
//-        lcsStaUrl := '';
        lcsStaDebug := '';
        lblStartAreaName.Text := '';
        cxtStartAreaDetail.Text := '';
        lcsConfAREA4            := '';
        cxtStartXval.Text := '';
        cxtStartYval.Text := '';
        gsStartGUIDEXval := '';
        gsStartGUIDEYval := '';
      end;
    end else
    if Panel = 'meoEndArea' then
    begin
      if BtnEdLock.Hint <> 'F4)잠금' then    //  20130703  LYB  잠금상태에서는 초기화하지 않는다.
      begin
        lcsEnd1 := '';
        lcsEnd2 := '';
        lcsEnd3 := '';
        lcsEnd4 := '';
        lcsEndDocId := '';
        lcsEndCellSel := '';
        lcsEndSchWord := '';
//-        lcsEndUrl := '';
        lcsEndDebug := '';
        lblEndAreaName.Caption := '';
        cxtEndAreaDetail.Caption := '';
        cxReEndArea.Text := '';

        gJONEndChkXY.X := '';
        gJONEndChkXY.Y := '';
        gJONEndChkXY.GUIDE_X := '';
        gJONEndChkXY.GUIDE_Y := '';

        cxtEndXval.Text := '';
        cxtEndYval.Text := '';
        gsEndGUIDEXval := '';
        gsEndGUIDEYval := '';
      end;
    end else
    if Panel = 'meoViaArea' then
  	begin

    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.AllClear;
begin
  try
    SetDebugeWrite('JON01N.AllClear');
    Frm_JON30.Grid_Init('meoStartArea',1);
    Frm_JON30.Grid_Init('meoStartArea',2);
    Frm_JON30.Grid_Init('meoStartArea',3);
    Frm_JON30.Grid_Init('meoStartArea',4);
    Frm_JON30.Grid_Init('meoEndArea'  ,1);
    Frm_JON30.Grid_Init('meoEndArea'  ,2);
    Frm_JON30.Grid_Init('meoEndArea'  ,3);
    Frm_JON30.Grid_Init('meoEndArea'  ,4);
    Frm_JON30.Grid_Init('meoViaArea'  ,1);
    Frm_JON30.Grid_Init('meoViaArea'  ,2);
    Frm_JON30.Grid_Init('meoViaArea'  ,3);
    Frm_JON30.Grid_Init('meoViaArea'  ,4);
    frm_JON30.ClearWkIcon;
    frm_JON30.ClearPOI;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01N.IsNotModifyPrice: Boolean;
begin
  // 수정[완료/문의/취소] 건 경우 요금항목에 포커스시에만 요금 계산
  Result := ((Pos('수정', Self.Caption) > 0 ) and (cxtJoinNum.Hint[1] in ['2', '4', '8']));
end;

//--------------------------------------------------------------------------------------------------
//  사용자 추가 지역 저장
//--------------------------------------------------------------------------------------------------
procedure TFrm_JON01N.proc_Save_Area(iGubun: Integer);
var
  st_List : TStringList;
  sTemp, sTemp1, sPOI: string;
begin
	SetDebugeWrite('JON01N.proc_Save_Area');
	st_List := TStringList.Create;
  try
    st_List.Clear;
    if iGubun = 0 then
    begin // 출발지 저장.
      if Trim(cxtStartAreaDetail.Text) = '' then Exit;

      sTemp := StringReplace(cxtStartAreaDetail.Text, ' ', '', [rfReplaceAll]);  // 공백제거후 저장  20130514 LYB

      // 원주365는 해당사항 없음 2021.01.14 정회귀팀장요청
      if Not GB_365System then
      begin
        if pos('#', sTemp) > 0 then
          sTemp := copy(sTemp, pos('#', sTemp) + 1, length(sTemp) - pos('#', sTemp));
        if pos(']', sTemp) > 0 then
          sTemp := copy(sTemp, pos(']', sTemp) + 1, length(sTemp) - pos(']', sTemp));
        if pos('$', sTemp) > 0 then
          sTemp := copy(sTemp, pos('$', sTemp) + 1, length(sTemp) - pos('$', sTemp));
        if pos('-', sTemp) > 0 then
          sTemp := copy(sTemp, pos('-', sTemp) + 1, length(sTemp) - pos('-', sTemp));
      end;

      lcsSta4 := '';
      sTemp1 := lcsSta1 + '|' + lcsSta2 + '|' + lcsSta3 + '|' + sTemp + '|' + lcsSta4 + '|' + cxtStartXval.Text + '|' + cxtStartYval.Text;
    end else
    if iGubun = 1 then
    begin // 도착지 저장.
      if Trim(cxtEndAreaDetail.Caption) = '' then Exit;

      sTemp := StringReplace(cxtEndAreaDetail.Caption, ' ', '', [rfReplaceAll]);  // 공백제거후 저장  20130514 LYB

      // 원주365는 해당사항 없음 2021.01.14 정회귀팀장요청
      if Not GB_365System then
      begin
        if pos('#', sTemp) > 0 then
          sTemp := copy(sTemp, pos('#', sTemp) + 1, length(sTemp) - pos('#', sTemp));
        if pos(']', sTemp) > 0 then
          sTemp := copy(sTemp, pos(']', sTemp) + 1, length(sTemp) - pos(']', sTemp));
        if pos('$', sTemp) > 0 then
          sTemp := copy(sTemp, pos('$', sTemp) + 1, length(sTemp) - pos('$', sTemp));
        if pos('-', sTemp) > 0 then
          sTemp := copy(sTemp, pos('-', sTemp) + 1, length(sTemp) - pos('-', sTemp));
      end;

      lcsEnd4 := '';
			sTemp1 := lcsEnd1 + '|' + lcsEnd2 + '|' + lcsEnd3 + '|' + sTemp + '|' + lcsEnd4 + '|' + cxtEndXval.Text + '|' + cxtEndYval.Text;
		end;

		if FileExists(DBDIRECTORY + 'LOCAL_MAP_NEW.DAT') then
			st_List.LoadFromFile(DBDIRECTORY + 'LOCAL_MAP_NEW.DAT');

		sPOI := sTemp1 + '|' + '999';    // 20130508  LYB 수정  로컬 저장 후 mySQL변환시 저장 안되는 문제 해결

    if st_List.IndexOf(sPOI) < 0 then
    begin
      st_List.Add(sPOI);
      // 사용자 직접입력 정보 저장. CDS.
      if iGubun = 0 then
      begin // 출발지 저장.
        GT_MAPLocal.slCity.Add(lcsSta1); // 시도
        GT_MAPLocal.slWard.Add(lcsSta2); // 시군구
        GT_MAPLocal.slStre.Add(lcsSta3); // 읍면동
        GT_MAPLocal.slSSub.Add(sTemp); // 세부지명
        GT_MAPLocal.slSPOI.Add(''); // 인근POI
        GT_MAPLocal.slMapX.Add(cxtStartXval.Text); // X 좌표
        GT_MAPLocal.slMapY.Add(cxtStartYval.Text); // Y 좌표
      end else
      if iGubun = 1 then
      begin // 도착지 저장.
        GT_MAPLocal.slCity.Add(lcsEnd1); // 시도
        GT_MAPLocal.slWard.Add(lcsEnd2); // 시군구
        GT_MAPLocal.slStre.Add(lcsEnd3); // 읍면동
        GT_MAPLocal.slSSub.Add(sTemp); // 세부지명
        GT_MAPLocal.slSPOI.Add(''); // 인근POI
        GT_MAPLocal.slMapX.Add(cxtEndXval.Text); // X 좌표
        GT_MAPLocal.slMapY.Add(cxtEndYval.Text); // Y 좌표
      end;
    end else
    begin
      st_list.Delete(st_List.IndexOf(sPOI));
      st_List.Add(sPOI);
    end;
		st_List.SaveToFile(DBDIRECTORY + 'LOCAL_MAP_NEW.DAT');
	finally
		FreeAndNil(st_List);
	end;
	if iGubun = 0 then
		GMessagebox('출발지 세부지역정보가 저장 되었습니다.', CDMSI)
  else
    GMessagebox('도착지 세부지역정보가 저장 되었습니다.', CDMSI);
end;

// 경유지 포함 거리 계산
procedure TFrm_JON01N.proc_dis_alculation(iLow: Integer; bDisp : Boolean);
var
  i: Integer;
  fdis: double;
begin
  SetDebugeWrite('JON01N.proc_dis_alculation');
  try
    if (cxtStartXval.Text = '') or (cxtStartYval.Text = '') or
  		 (cxtEndXval  .Text = '') or (cxtEndYval  .Text = '') then Exit;

  	if GT_PASS_INFO[iLow][0].AREA1 = '' then
    begin
      fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
        cxtStartXval.Text, cxtStartYval.Text, cxtEndXval.Text, cxtEndYval.Text)
        * StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

      if GT_DISTANCE_ST = 1 then
        fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
          cxtStartXval.Text, cxtStartYval.Text, cxtEndXval.Text, cxtEndYval.Text), ffNumber, 3, 1), 0.0);  // 배수 없는 직선거리 임시 저장
    end else
    if GT_PASS_INFO[iLow][1].AREA1 = '' then
    begin
  		fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			cxtStartXval.Text, cxtStartYval.Text, GT_PASS_INFO[iLow][0].MAP_X,
        GT_PASS_INFO[iLow][0].MAP_Y) * StrToFloatDef(CHARGE_DIS, 1.0),
        ffNumber, 3, 1), 0.0)
  			+ StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
  			GT_PASS_INFO[iLow][0].MAP_X, GT_PASS_INFO[iLow][0].MAP_Y,
        cxtEndXval.Text, cxtEndYval.Text) * StrToFloatDef(CHARGE_DIS, 1.0),
        ffNumber, 3, 1), 0.0);

      if GT_DISTANCE_ST = 1 then
        fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
    			cxtStartXval.Text, cxtStartYval.Text, GT_PASS_INFO[iLow][0].MAP_X,
          GT_PASS_INFO[iLow][0].MAP_Y), ffNumber, 3, 1), 0.0)
    			+ StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
    			GT_PASS_INFO[iLow][0].MAP_X, GT_PASS_INFO[iLow][0].MAP_Y,
          cxtEndXval.Text, cxtEndYval.Text), ffNumber, 3, 1), 0.0);  // 배수 없는 직선거리 임시 저장
    end else
    begin
      i := 1;
      fDis := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
        cxtStartXval.Text, cxtStartYval.Text, GT_PASS_INFO[iLow][0].MAP_X,
        GT_PASS_INFO[iLow][0].MAP_Y) * StrToFloatDef(CHARGE_DIS, 1.0),
        ffNumber, 3, 1), 0.0);

      if GT_DISTANCE_ST = 1 then
        fDirKm := StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
          cxtStartXval.Text, cxtStartYval.Text, GT_PASS_INFO[iLow][0].MAP_X,
          GT_PASS_INFO[iLow][0].MAP_Y), ffNumber, 3, 1), 0.0);  // 배수 없는 직선거리 임시 저장
      while i <= 4 do
      begin
        if GT_PASS_INFO[iLow][i].AREA1 = '' then break;

  			fDis := fDis +
  				StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
          GT_PASS_INFO[iLow][i - 1].MAP_X, GT_PASS_INFO[iLow][i - 1].MAP_Y,
  				GT_PASS_INFO[iLow][i].MAP_X, GT_PASS_INFO[iLow][i].MAP_Y) *
  				StrToFloatDef(CHARGE_DIS, 1.0), ffNumber, 3, 1), 0.0);

        if GT_DISTANCE_ST = 1 then
          fDirKm := fDirKm +
    				StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
            GT_PASS_INFO[iLow][i - 1].MAP_X, GT_PASS_INFO[iLow][i - 1].MAP_Y,
    				GT_PASS_INFO[iLow][i].MAP_X, GT_PASS_INFO[iLow][i].MAP_Y), ffNumber, 3, 1), 0.0); // 배수 없는 직선거리 임시 저장

        inc(i);
      end;
      fDis := fDis + StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
        GT_PASS_INFO[iLow][i - 1].MAP_X, GT_PASS_INFO[iLow][i - 1].MAP_Y,
        cxtEndXval.Text, cxtEndYval.Text) * StrToFloatDef(CHARGE_DIS, 1.0),
        ffNumber, 3, 1), 0.0);

      if GT_DISTANCE_ST = 1 then
        fDirKm := fDirKm + StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
          GT_PASS_INFO[iLow][i - 1].MAP_X, GT_PASS_INFO[iLow][i - 1].MAP_Y,
          cxtEndXval.Text, cxtEndYval.Text), ffNumber, 3, 1), 0.0);
    end;

    if Not bDisp then Exit;

    if ( GT_DISTANCE_ST = 0 ) then
    begin
      curKm.Text := FloatToStr(fDis) + 'Km';
      fCruKm := fDis;
      fTotalTime := 0;   // 직선거리이면 소요시간 0
      Lbl_Distance.Caption := Format(' 직선)%s', [FloatToStr(fDis) + 'Km']);
      SetPosLblDistance;
    end else
    if ( GT_DISTANCE_ST = 1 ) then
    begin
      fChgKm := fDis;
      Lbl_Distance.Caption := Format(' 직선)%s', [FloatToStr(fDis) + 'Km']);
    end;
    Application.ProcessMessages;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01N.proc_SmartCharge(var outPriceInfo, outAreaType: string;
  var outType: Integer): Integer;
var oOderWorker, oWeather, iType, oType : String;
  iSmartRate : Integer;
begin
  if GT_RealTimeWorker then oOderWorker := ''
                       else oOderWorker := '0';

  if GT_RealTimeWeather then oWeather := ''
                        else oWeather := '0';

  iType := '';//검색타입 '동-동' zz 무조건 동-동으로 조회

  if GB_DEBUG_USE then Log(oOderWorker + oWeather +
                                   lcsSta1 + lcsSta2 + lcsSta3 + meoStartArea.Text + cxtStartXval.Text + cxtStartYval.Text +
                                   lcsEnd1 + lcsEnd2 + lcsEnd3 + meoEndArea.Text + cxtEndXval.Text + cxtEndYval.Text + iType, LOGDATAPATHFILE);

  iSmartRate := fJON01_SmartCharge(oOderWorker, oWeather,
                                   lcsSta1, lcsSta2, lcsSta3, meoStartArea.Text, cxtStartXval.Text, cxtStartYval.Text,
                                   lcsEnd1, lcsEnd2, lcsEnd3, meoEndArea.Text, cxtEndXval.Text, cxtEndYval.Text, iType, oType);
//  outType := StrToInt(oType);
  outType := StrToIntDef(oType, 0);

  if oType = 'DD' then oType := '동->동' else
  if oType = 'DG' then oType := '동->구' else
  if oType = 'GD' then oType := '구->동' else
  if oType = 'GG' then oType := '구->구' else
  if oType = 'GS' then oType := '구->시';
  outAreaType := oType;

  if GT_AutoSmartCharge then // 0원이거나 요금이 다를경우 스마트요금 접수창요금 자동적용
  begin
    if ( Result = 0 ) Or ( Result <> iSmartRate ) then
    begin
      if GT_PopUpSmartCharge then // 0원이거나 요금이 다를경우 스마트요금창 자동팝업
      begin
        if ( (meoStartArea.Focused) Or (meoEndArea.Focused) Or
             (meoViaArea1.Focused) Or  (meoViaArea[2].Focused) Or (meoViaArea[3].Focused) Or
             (meoViaArea[4].Focused) Or  (meoViaArea[5].Focused) ) then      //  출발지/도착지 포커스가 있을때에는 팝업창 표시 않함
        begin
        end else
        begin
          BtnSmartRate.Click;
          if curRate.CanFocus then curRate.SetFocus;
        end;
      end;
      outPriceInfo := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
      Result := iSmartRate;
    end;
  end;

  outPriceInfo := '스마트요금 (' + oType + ') ] ' + FormatFloat('#,', iSmartRate);
  Result := iSmartRate;
end;

procedure TFrm_JON01N.proc_Realdis_Mng;
Var SRIp : String;
		SRPort : Integer;
		slDepArr : TStringList;
		sResvTime, sTmp, sLat, sLng, sVia, sRoute : String;
		i, iTmp : integer;
begin
	SetDebugeWrite('JON01N.proc_Realdis_Mng');
	Try
		if (cxtStartXval.Text = '') or (cxtStartYval.Text = '') or
			 (cxtEndXval  .Text = '') or (cxtEndYval  .Text = '') then
		begin
			 if ( Trim(lblStartAreaName.Text) <> '' ) And ( Trim(lblEndAreaName.Caption) <> '' ) then
			 begin
				 Lbl_Distance.Caption := '';
				 tmrCharge.Enabled := True;
				 Exit;
			 end else
				 Exit;
		end;

	
		if ( ( Not fnc_RealKmThread_End ) And ( GT_DISTANCE_ST = 1 ) )  Or  ( giViaKmComplet )  then
		begin
			GMessagebox('경로탐색거리 계산중입니다' + #13 +
									'잠시후에 다시 거리계산 바랍니다.', CDMSE);
			Exit;
		end;

		fViaKm := 0;
		fStEdKm := 0;
		bViaKm := False;
		giRealKmCnt := 0;
		giRealKmIdx := 1;
		giKmComplet := False;
		giKmComPletG := '';
		try
			if Not Assigned(SmartSR) then
				SmartSR := TSmartSRXCtrl.Create(nil);
		except on E: Exception do
			Assert(False, E.Message);
		end;

		try
			if RouteMan = nil then
				RouteMan := SmartSR.GetRouteMan();

			GetSearchRouteIpPort(SRIp, SRPort);

			SetDebugeWrite('0. SmartSR Open : IP - ' + SRIp + ',' + ' Port - ' + IntToStr(SRPort));

			if RouteMan.Open(SRIp, SRPort) then
				RouteMan.Clear()
			else
			begin
				if GS_SmartServerIP = SearchRoute1[0].IP then Inc(SR1ErrCnt)
																								 else Inc(SR2ErrCnt);

				GetSearchRouteIpPort(SRIp, SRPort);

				SetDebugeWrite('1. SmartSR Open : IP - ' + SRIp + ',' + ' Port - ' + IntToStr(SRPort));

				if RouteMan.Open(SRIp, SRPort) then
					RouteMan.Clear()
				else
				begin
					if GS_SmartServerIP = SearchRoute1[0].IP then Inc(SR1ErrCnt)
																									 else Inc(SR2ErrCnt);
					Exit;
				end;
			end;

			if ( SR1ErrCnt > 4 ) And ( SR2ErrCnt > 4 ) then
			begin
				GMessagebox('현재 경로탐색 서버를 사용 할 수 없습니다.' + #13#10 +
										'직선거리만 사용하거나 경탐서버 체크 해제후 사용하세요!', cdmsE);

				GT_DISTANCE_ST := 0;
				GS_EnvFile.WriteString('CHARGE', 'GT_DISTANCE_ST', IntToStr(GT_DISTANCE_ST));

				Assert(False, 'proc_Realdis_Mng Error : 거리계산방법 직선거리계산 으로 변경');
				Exit;
			end;

			proc_RealKmPtr_Init;

			RealKmPtr_th1[Self.Tag].CaActive := True;
			gbViaError := False; //경유있는 경탐 에러여부용. 초기화 False;
			tmrThRealDis.Interval := 1;
			tmrThRealDis.Enabled := True;

		except

		end;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

function TFrm_JON01N.fnc_RealKmThread_End: Boolean;
begin
  try
    if ( Not RealKmPtr_th1[Self.Tag].CaActive ) And ( Not RealKmPtr_th2[Self.Tag].CaActive ) And
       ( Not RealKmPtr_th3[Self.Tag].CaActive ) And ( Not RealKmPtr_th4[Self.Tag].CaActive ) then Result := True
                                                                                             else Result := False;
  except
  end;
end;

procedure TFrm_JON01N.proc_RealKmPtr_Init;
  procedure ClearRealKmPtr( Var RealKmPtr : TRealKmRecord );
  Var j : Integer;
  begin
    RealKmPtr.Tag := 0;
    RealKmPtr.thId := 0;
    RealKmPtr.CaActive := False;
    RealKmPtr.UseYn := False;
    RealKmPtr.StartAreaName := '';
    RealKmPtr.StartXVal := '';
    RealKmPtr.StartYVal := '';
    RealKmPtr.EndAreaName := '';
    RealKmPtr.EndXVal := '';
    RealKmPtr.EndYVal := '';
    for j := 0 to 4 do
    begin
  		RealKmPtr.ViaXVal[j] := '';
     	RealKmPtr.ViaYVal[j] := '';
    end;
    RealKmPtr.info := Nil;
  end;
begin
  SetDebugeWrite('JON01N.proc_RealKmPtr_Init');
  try
    ClearRealKmPtr(RealKmPtr_th1[Self.Tag]);
    ClearRealKmPtr(RealKmPtr_th2[Self.Tag]);
    ClearRealKmPtr(RealKmPtr_th3[Self.Tag]);
    ClearRealKmPtr(RealKmPtr_th4[Self.Tag]);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_JON01N.ptmrThRealDisTimer( Var RealKmPtr : TRealKmRecord);
Var sStartX, sStartY, sEndX, sEndY : String;
		JON01SPTh : TJON01SPThread;
    i : Integer;
begin
	try
    EnterCriticalSection(CS);
    try
      RealKmPtr.UseYn := False;
      RealKmPtr.CaActive := True;

      RealKmPtr.Tag := Self.Tag;
      RealKmPtr.thId := 1;

      RealKmPtr.StartAreaName := meoStartArea.Text;
      RealKmPtr.EndAreaName := meoEndArea.Text;

      if giRealKmIdx = 1 then
      begin
        if (gsStartGUIDEYval = '') or (copy(gsStartGUIDEYval,1,3) = '000') then
        begin
          sStartX := cxtStartXval.Text;
          sStartY := cxtStartYval.Text;
        end  else
        begin
          sStartX := gsStartGUIDEXval;
          sStartY := gsStartGUIDEYval;
        end;

        for i := 0 to 4 do
        begin
          if ( XposVia[i+1] <> '' ) And ( YposVia[i+1] <> '' ) then
          begin
            RealKmPtr.ViaYVal[i] := YposVia[i+1];
            RealKmPtr.ViaXVal[i] := XposVia[i+1];
          end;
        end;

        if (gsEndGUIDEYval = '') or (copy(gsEndGUIDEYval,1,3) = '000') then
        begin
          sEndX := cxtEndXval.Text;
          sEndY := cxtEndYval.Text;
				end else
        begin
          sEndX := gsEndGUIDEXval;
          sEndY := gsEndGUIDEYval;
        end;
      end else
      begin
        if (gsStartGUIDEYval = '') or (copy(gsStartGUIDEYval,1,3) = '000') then
        begin
          sStartX := '0' + IntToStr(StrToIntDef(cxtStartXval.Text, 0) + ( (giRealKmIdx-1) * 400));
          sStartY := IntToStr(StrToIntDef(cxtStartYval.Text, 0) + ( (giRealKmIdx-1) * 400));
        end else
        begin
          sStartX := '0' + IntToStr(StrToIntDef(gsStartGUIDEXval, 0) + ( (giRealKmIdx-1) * 400));
          sStartY := IntToStr(StrToIntDef(gsStartGUIDEYval, 0) + ( (giRealKmIdx-1) * 400));
        end;

        for i := 0 to 4 do
        begin
          if ( XposVia[i+1] <> '' ) And ( YposVia[i+1] <> '' ) then
          begin
            RealKmPtr.ViaXVal[i] := '0' + IntToStr(StrToIntDef(XposVia[i+1], 0) + ( (giRealKmIdx-1) * 400));
            RealKmPtr.ViaYVal[i] := IntToStr(StrToIntDef(YposVia[i+1], 0) + ( (giRealKmIdx-1) * 400));
          end;
        end;

        if (gsEndGUIDEYval = '') or (copy(gsEndGUIDEYval,1,3) = '000') then
        begin
          sEndX := '0' + IntToStr(StrToIntDef(cxtEndXval.Text, 0) + ( (giRealKmIdx-1) * 400));
          sEndY := IntToStr(StrToIntDef(cxtEndYval.Text, 0) + ( (giRealKmIdx-1) * 400));
        end else
        begin
          sEndX := '0' + IntToStr(StrToIntDef(gsEndGUIDEXval, 0) + ( (giRealKmIdx-1) * 400));
          sEndY := IntToStr(StrToIntDef(gsEndGUIDEYval, 0) + ( (giRealKmIdx-1) * 400));
        end;
      end;

      RealKmPtr.StartXVal := sStartX;
      RealKmPtr.StartYVal := sStartY;

      RealKmPtr.EndXVal := sEndX;
			RealKmPtr.EndYVal := sEndY;

      if tmrThRealDis.Tag = 0 then
      begin
        if giRealKmIdx = 1 then curKm.Text := '검색중..'
                           else curKm.Text := '검색' + IntToStr(giRealKmIdx) + '..';
      end;

      try
        JON01SPTh := TJON01SPThread.Create(Self.Tag, giRealKmIdx);
				JON01SPTh.FreeOnTerminate := False;
      except

      end;
      //=========================
     finally
      LeaveCriticalSection(CS);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 오더를 접수등록을 한다.
procedure TFrm_JON01N.Proc_OrderJoinIns;
var
  bOk : Boolean;
	sHdNo, sBrNo: string;
	iBrCharge, iBrSumCharge : Double;
	sTmp : String;
begin
	SetDebugeWrite('JON01N.Proc_OrderJoinIns');

	if func_ecukrCheck then
	begin
		Proc_BtnEnabled(True);
		Exit;
	end;

  if Not fBubinLimitCheck then
  begin
		Proc_BtnEnabled(True);
    Exit;
  end;

  if IsPayMethodPost then // 후불오더 캐쉬부족 체크..
  begin
		sHdNo := Proc_HDNOSearch;
    sBrNo := Proc_BRNOSearch;
		//--------------------------------------------------------------------------------------------------
		// 접수시 지사캐쉬 체크(캐쉬가 없어도 후불로 접수할수 있음)
		// 접수시 지사캐쉬 -50만원까지만 가능    20150424  LYB
//    if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.ShareNo = 'G91') or (GT_USERIF.ShareNo = 'G58') or (GT_USERIF.BR = 'B100') ) then
		// 접수시 지사캐쉬 본사별 설정 금액까지만 가능    20160616 KHS
		// 접수시 지사캐쉬와 이미 접수된오더(접수, 배차, 운행, 예약등)의 후불 입금액까지 확인하여 처리 20180131 KHS
		//--------------------------------------------------------------------------------------------------
		sTmp := '';

		if (GS_PRJ_AREA <> 'S') and (sHdNo = 'A1747') and (sBrNo = 'S954') then
		begin
			if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), 0, iBrCharge, iBrSumCharge) then
			begin
				GMessagebox('지사캐쉬(0원미만)가 부족하여 후불로 접수할 수 없습니다.', CDMSE);
				Proc_BtnEnabled(True);
				Exit;
			end;
		end	else
		if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.ShareNo = 'G91') or (GT_USERIF.ShareNo = 'G58') or (GT_USERIF.BR = 'B100') ) then
		begin
			if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.HD = 'A1891') or (GT_USERIF.HD = 'A1897') or (GT_USERIF.HD = 'A1756') or
																	 (GT_USERIF.HD = 'A1763') or (GT_USERIF.HD = 'A1768') or (GT_USERIF.HD = 'A1757') or
																	 (GT_USERIF.HD = 'A1844') or (GT_USERIF.HD = 'A1752') or (GT_USERIF.HD = 'A1853') or
																	 (GT_USERIF.HD = 'A1771') or (GT_USERIF.HD = 'A1822') or (GT_USERIF.HD = 'A1753') or
																	 (GT_USERIF.HD = 'A1866') or (GT_USERIF.HD = 'A2014') or (GT_USERIF.HD = 'A2010') or
																	 (GT_USERIF.HD = 'A1769') or (GT_USERIF.HD = 'A1772') or (GT_USERIF.HD = 'A1905') or
																	 (GT_USERIF.HD = 'A1946') or (GT_USERIF.HD = 'A1764') or (GT_USERIF.HD = 'A1879') or
																	 (GT_USERIF.HD = 'A1948') or (GT_USERIF.BR = 'B100') ) then
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), -50000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-50,000원까지)가 부족하여 후불로 접수할 수 없습니다.', CDMSE);
					Proc_BtnEnabled(True);
					Exit;
				end;
			end else
			if (GS_PRJ_AREA <> 'S') and (GT_USERIF.HD = 'A1745') then
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), -100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-100,000원까지)가 부족하여 후불로 접수할 수 없습니다.', CDMSE);
					Proc_BtnEnabled(True);
					Exit;
				end;
			end else
			if (GS_PRJ_AREA <> 'S') and (sHdNo = 'A2195') and (sBrNo = 'U589') then       //20170323 이명재대리요청
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), 100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬가 100,000원 이하일 경우 후불로 접수할 수 없습니다.', CDMSE);
					Proc_BtnEnabled(True);
					Exit;
				end;
			end	else
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), -100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-100,000원까지)가 부족하여 후불로 접수할 수 없습니다.', CDMSE);
					Proc_BtnEnabled(True);
					Exit;
				end;
			end;
		end else
		begin
			if not frm_main.func_BrCash_V2(sHdNo, sBrNo, '', StrToIntDef(FloatToStr(edtPostPay.Value), 0), 0, iBrCharge, iBrSumCharge) then
			begin
				sTmp := '해당지사의 캐쉬가 [%s]원으로 후불접수가 불가합니다';
				GMessagebox(Format(sTmp, [StrToMoney(FloatToStr(iBrCharge))]), CDMSE);
				Proc_BtnEnabled(True);
				Exit;
			end;
		end;
	end;

  try
    if (cxLblCIDUseFlg.Hint <> 'CID') and (gsCuTelHint <> cxtCuTel.Text) then
    begin // CID 조회인지 설정을 한다., 고객전화번호 변경여부를 체크하기 위해 저장한다.
      GMessagebox(
        Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10
        + Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
        + '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요',
        CDMSE);
			if cxtCuTel.CanFocus then cxtCuTel.SetFocus;
			Proc_BtnEnabled(True);
			Exit;
    end;

    if not NotNullCheck(True) then
    begin
			Proc_BtnEnabled(True);
      Exit;
    end;

    if Not pLocalRoutingCheck then
    begin
	    Proc_BtnEnabled(True);
      Exit;
    end;

    // 접수
//    if btnCmdJoin.Enabled then
		begin
      btnCmdJoin.Enabled := False;
      lg_Save := '1';
			if (BtnResJ.Tag <> 1) and (BtnResD.Tag <> 1) then
      begin
				if not GS_JON_AutoStandBy then    // True := 접수->대기로 강제적용 2014.03.25 khs
					bOk := Proc_Save('0')  // 즉시 접수
				else
					bOk := Proc_Save('5');  //대기
			end else
				bOk := Proc_Save('R'); // 예약 접수

      if bOk then pQuestionSave;  // 대전연합 이중문의 등록 처리        

      if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
      begin
        btnCmdExit.Tag := -1;
      end;
//			Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
    end;
	except
		Proc_BtnEnabled(True);
		btnCmdJoin.Enabled := True;
    Log('Accept_Error1', LOGDATADIRECTORY + 'Accept_Err.log');
  end;
end;

// 오더를 대기로 접수 한다.
procedure TFrm_JON01N.Proc_OrderWaitJoinIns;
Var bOk : Boolean;
begin
	SetDebugeWrite('JON01N.Proc_OrderWaitJoinIns');
  try
		if not NotNullCheck(True) then
		begin
			Proc_BtnEnabled(True);
			Exit;
		end;

		if func_ecukrCheck then
		begin
			Proc_BtnEnabled(True);
			Exit;
		end;

    if Not fBubinLimitCheck then
    begin
      Proc_BtnEnabled(True);
      Exit;
    end;

		if cxLblCIDUseFlg.Hint <> 'CID' then
    begin // CID 조회인지 설정을 한다.
      if gsCuTelHint <> cxtCuTel.Text then
        // 고객전화번호 변경여부를 체크하기 위해 저장한다.
      begin
        GMessagebox(Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10 +
          Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
          + '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요', CDMSE);
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    if Not pLocalRoutingCheck then
    begin
	    Proc_BtnEnabled(True);
      Exit;
    end;

    lg_Save := '1';
		bOk := Proc_Save('5'); // 대기로 접수..
    if bOk then pQuestionSave;  // 대전연합 이중문의 등록 처리

    if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
    begin
      btnCmdExit.Tag := -1;
    end;
//  	Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
  except
    on e: exception do
    begin
			Proc_BtnEnabled(True);
			Log('Proc_OrderWaitJoinIns Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'Proc_OrderWaitJoinIns Error :' + E.Message);
    end;
  end;
end;

// 오더를 문의로 접수 한다.
procedure TFrm_JON01N.Proc_OrderQuesJoinIns;
Var bOk : Boolean;
begin
	SetDebugeWrite('JON01N.Proc_OrderQuesJoinIns');
  try
		if not NotNullCheck then
		begin
			Proc_BtnEnabled(True);
			Exit;
		end;

		if func_ecukrCheck then
		begin
			Proc_BtnEnabled(True);
			Exit;
		end;

		if cxLblCIDUseFlg.Hint <> 'CID' then
    begin // CID 조회인지 설정을 한다.
      if gsCuTelHint <> cxtCuTel.Text then
        // 고객전화번호 변경여부를 체크하기 위해 저장한다.
      begin
        GMessagebox(Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10 +
          Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
          + '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요', CDMSE);
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    if Not pLocalRoutingCheck then
    begin
	    Proc_BtnEnabled(True);
      Exit;
    end;

    lg_Save := '1';
		bOk := Proc_Save('4'); // 문의로 접수..
    if bOk then pQuestionSave;  // 대전연합 이중문의 등록 처리

    if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
    begin
      btnCmdExit.Tag := -1;
    end;
//		Proc_BtnEnabled(True);
	except
    on e: exception do
    begin
			Proc_BtnEnabled(True);
			Log('Proc_OrderQuesJoinIns Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_OrderQuesJoinIns Error :' + E.Message);
    end;
  end;
end;

// 오더 수신거부 등록을 한다.
procedure TFrm_JON01N.Proc_OrderSMSRecvNo;
begin
  SetDebugeWrite('JON01N.Proc_OrderSMSRecvNo');
  try
    if not NotNullCheck then Exit;
		if func_ecukrCheck then exit;

    if cxLblCIDUseFlg.Hint <> 'CID' then
    begin // CID 조회인지 설정을 한다.
      if gsCuTelHint <> cxtCuTel.Text then
        // 고객전화번호 변경여부를 체크하기 위해 저장한다.
      begin
        GMessagebox(Format('검색된 [%s]전화번호와 현재 입력된 전화번호[%s]가 다릅니다.', [gsCuTelHint, cxtCuTel.Text]) + #13#10 +
          Format('변경한 전화번호로 등록하려면 [%s]전화번호로 조회(엔터) 후에 접수하세요', [cxtCuTel.Text]) + #13#10
          + '[팁]기존 전화번호에 신규번호를 추가(수정)할려면 고객수정 버튼을 클릭 후 신규번호를 추가(수정)하고 저장하세요', CDMSE);
        Exit;
      end;
    end;

		lg_Save := '1';
    Proc_Save('S');

    if (not btnCmdUpdSave.Visible) and (btnCmdExit.Tag <> -1) then
    begin
      btnCmdExit.Tag := -1;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 조회 한 오더 정보를 수정 한다. : DB Update~~
procedure TFrm_JON01N.Proc_OrderUpdateSave(AStatus: string);
const
  lc_ViaInfoString =
    '<Via Area1="Area1String" Area2="Area2String" Area3="Area3String" Area4="Area4String" Area5="Area5String" '+
    ' MapX="MapXString" MapY="MapYString" AreaOpt="AreaVOPTString" AreaDebug="AreaVDebugString" AreaUp="AreaUPV" AreaSetType="AreaSetTypeString" AreaKeyword="AreaKeywordString" AreaId="AreaIdString" />';
var
  ls_TxLoad: string;
  ls_ViaInto, sCbCode, sCbNm, sCbDp, sBrNo, sHdNo, sTemp, sErrMsg, sMsg : string;
  lRow, iRow, iFidx, i : Integer;
	slRcvList: TStringList;
  rv_str, ls_rxxml, StrValue: string;
  ErrCode, UserMile: integer;
	iX, iY, sContent : string;
  chkFlag : Boolean;
	sTmpLon, sTmpLat : string;
	dTmpLon, dTmpLat : Double;
	bLonLat : Boolean;
	iBrCharge, iBrSumCharge : Double;
	sTmp : String;
begin
	SetDebugeWrite('JON01N.Proc_OrderUpdateSave');
	if func_ecukrCheck then Exit;

  if StrToIntDef(edtWkFAge.Text, 0) > StrToIntDef(edtWkTAge.Text, 0) then
  begin
    ShowMessage('제한나이 설정이 잘못되었습니다.');
    edtWkFAge.SetFocus;
    Exit;
	end;

//	if (IsPayMethodPost) and ((cxtJoinNum.Hint = '0') or (cxtJoinNum.Hint = '1') or
//														(cxtJoinNum.Hint = '3') or (cxtJoinNum.Hint = 'R')) then // 후불-접수, 강제, 배차, 예약 오더만 후불체크

  if (IsPayMethodPost) and ((cxtJoinNum.Hint = '0') or (cxtJoinNum.Hint = '1') or
                            (cxtJoinNum.Hint = '3') or (cxtJoinNum.Hint = 'R') or                 // 후불-접수, 강제, 배차, 예약 오더만 후불체크
                            (bAppOrderOpen and (Pos('앱접수', Self.Caption) > 0) and (cxtJoinNum.Hint = '4')) or  // 앱접수-문의오더일때만 후불체크
                            (GB_365System And (cxtJoinNum.Hint = '5')) ) then  // 원주 365 대기콜은 대기해제하므로 체크
	begin
		sHdNo := Proc_HDNOSearch;
		sBrNo := Proc_BRNOSearch;
		//--------------------------------------------------------------------------------------------------
		// 접수시 지사캐쉬 체크(캐쉬가 없어도 후불로 접수할수 있음)
		// 접수시 지사캐쉬 -50만원까지만 가능    20150424  LYB
//    if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.ShareNo = 'G91') or (GT_USERIF.ShareNo = 'G58') or (GT_USERIF.BR = 'B100') ) then
		// 접수시 지사캐쉬 본사별 설정 금액까지만 가능    20160616 KHS
		//--------------------------------------------------------------------------------------------------
		sTmp := '';

		if (GS_PRJ_AREA <> 'S') and (sHdNo = 'A1747') and (sBrNo = 'S954') then
		begin
			if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), 0, iBrCharge, iBrSumCharge) then
			begin
				GMessagebox('지사캐쉬(0원미만)가 부족하여 후불로 수정할 수 없습니다.', CDMSE);
				Exit;
			end;
		end	else
		if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.ShareNo = 'G91') or (GT_USERIF.ShareNo = 'G58') or (GT_USERIF.BR = 'B100') ) then
		begin
			if (GS_PRJ_AREA <> 'S') and ((GT_USERIF.HD = 'A1891') or (GT_USERIF.HD = 'A1897') or (GT_USERIF.HD = 'A1756') or
																	 (GT_USERIF.HD = 'A1763') or (GT_USERIF.HD = 'A1768') or (GT_USERIF.HD = 'A1757') or
																	 (GT_USERIF.HD = 'A1844') or (GT_USERIF.HD = 'A1752') or (GT_USERIF.HD = 'A1853') or
																	 (GT_USERIF.HD = 'A1771') or (GT_USERIF.HD = 'A1822') or (GT_USERIF.HD = 'A1753') or
																	 (GT_USERIF.HD = 'A1866') or (GT_USERIF.HD = 'A2014') or (GT_USERIF.HD = 'A2010') or
																	 (GT_USERIF.HD = 'A1769') or (GT_USERIF.HD = 'A1772') or (GT_USERIF.HD = 'A1905') or
																	 (GT_USERIF.HD = 'A1946') or (GT_USERIF.HD = 'A1764') or (GT_USERIF.HD = 'A1879') or
																	 (GT_USERIF.HD = 'A1948') or (GT_USERIF.BR = 'B100') ) then
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), -50000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-50,000원까지)가 부족하여 후불로 수정할 수 없습니다.', CDMSE);
					Exit;
				end;
			end else
			if (GS_PRJ_AREA <> 'S') and (GT_USERIF.HD = 'A1745') then
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), -100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-100,000원까지)가 부족하여 후불로 수정할 수 없습니다.', CDMSE);
					Exit;
				end;
			end	else
			if (GS_PRJ_AREA <> 'S') and (sHdNo = 'A2195') and (sBrNo = 'U589') then       //20170323 이명재대리요청
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), 100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬가 100,000원 이하일 경우 후불로 수정할 수 없습니다.', CDMSE);
					Exit;
				end;
			end else
			begin
				if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), -100000, iBrCharge, iBrSumCharge) then
				begin
					GMessagebox('지사캐쉬(-100,000원까지)가 부족하여 후불로 수정할 수 없습니다.', CDMSE);
					Exit;
				end;
			end;
		end else
		begin
			if not frm_main.func_BrCash_V2(sHdNo, sBrNo, cxtJoinNum.Text, StrToIntDef(FloatToStr(edtPostPay.Value), 0), 0, iBrCharge, iBrSumCharge) then
			begin
{				sTmp := '해당지사의 캐시가 [%s]원으로 후불접수가 불가합니다' + #13#10 + #13#10
							+ '* 후불접수예정금액 : %s원' + #13#10
							+ '* 지사보유금액 : %s원' + #13#10
							+ '* 현재 후불접수합계 : %s원' + #13#10
				;
				GMessagebox(Format(sTmp, [StrToMoney(FloatToStr(iBrCharge))
															 ,  StrToMoney(FloatToStr(edtPostPay.Value))
															 ,  StrToMoney(FloatToStr(iBrCharge))
															 ,  StrToMoney(FloatToStr(iBrSumCharge))]), CDMSE);
}				sTmp := '해당지사의 캐쉬가 [%s]원으로 후불접수가 불가합니다';
				GMessagebox(Format(sTmp, [StrToMoney(FloatToStr(iBrCharge))]), CDMSE);
				Exit;
			end;
		end;
	end;

	if GS_SEARCH_DEST_NOPOI_FALSE then
	begin
		if (cxtJoinNum.Hint = '0') then
		begin
			if Trim(meoEndArea.Text) = '' then
			begin
				GMessagebox('[접수] 도착지명이 없으면 수정이 불가능합니다.' + #13#10
									+ '도착지를 입력하세요.' + #13#10
									+ '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSE);
				meoEndArea.SetFocus;
//        meoEndArea.SelStart := Length(meoEndArea.Text);
				Exit;
			end;
		end;
		if (cxtJoinNum.Hint = '5') then
		begin
			if Trim(meoEndArea.Text) = '' then
			begin
				GMessagebox('[대기] 도착지명이 없으면 수정이 불가능합니다.' + #13#10
									+ '도착지를 입력하세요.' + #13#10
									+ '[관련옵션-검색설정] 도착지 미입력시 접수/대기안됨', CDMSE);
				meoEndArea.SetFocus;
//        meoEndArea.SelStart := Length(meoEndArea.Text);
				Exit;
			end;
		end;
	end;
	if (cxtJoinNum.Hint = 'B') then
	begin
		GMessagebox('[배차중] 상태이므로 수정이 불가능합니다.', CDMSE);
		Exit;
	end;
	if (cxtJoinNum.Hint = 'C') then
	begin
		GMessagebox('[근배] 상태이므로 수정이 불가능합니다.', CDMSE);
		Exit;
	end;

  iFidx := Self.Tag; // 폼의 index를 저장.
  locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
  locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
	locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

  if Trim(LocKNum) = '' then
  begin
		GMessagebox('대표번호가 없으므로 수정이 불가능합니다.', CDMSE);
		Exit;
  end;

  Proc_BtnEnabled(False); // 버튼 활성/비활성 처리.

  gsJON01LastConfSlip := cxtJoinNum.Text;
	try
		ls_TxLoad := GTx_UnitXmlLoad('JON03081.XML');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'MODI0001');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfSlipString', En_Coding(cxtJoinNum.Text)); // 접수번호
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID)); // 등록자 ID
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfStatusString', cxtJoinNum.Hint); // 오더 상태값을 저장한다.
		// 수정시에는 기존 상태값을 그대로 두고 수정후에 상태변경하는 걸로 처리 - 마일리지적용 및 다른 오류로 인해 수정 2021.09.10  LYB
//		if (Pos('앱접수', Self.Caption) > 0) and (bAppOrderOpen) then
//    begin
//      if (cxtJoinNum.Hint = '5') then
//         ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChangeStatusString', '6') // 변경될 상태정보(대기 => 해제)
//      else if (cxtJoinNum.Hint = '4') then
//      begin
//         if giBtnIndex = 0 then
//            ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChangeStatusString', '0') // 변경될 상태정보(문의 => 접수)
//         else if giBtnIndex = 5 then
//            ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChangeStatusString', '5') // 변경될 상태정보(문의 => 대기)
//      end;
//    end else
//    if ( btnCmdWaitR.Tag = 1 ) And (cxtJoinNum.Hint = '5') then
//    begin
//      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChangeStatusString', '6') // 원주365는 대기상태 콜 수정시 대기해제 처리(대기 => 해제)  20201208. 정회귀팀장
//    end else
		 ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChangeStatusString', AStatus); // 변경될 상태정보

    fNoShwState := AStatus;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostTimeString', PostTime); // 입금시간코드
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostChargeString', IntToStr(edtPostPay.Value)); // 자동입금금액
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkChargeString', ReplaceAll(cxLblWkJAmt.Caption, ',', '')); // 기사지원금

    if cxtCuBubin.Hint <> '' then
    begin // 법인코드 체크.
      sCbCode := cxtCuBubin.Hint;
      iRow := GT_BUBIN_INFO.cbcode.IndexOf(sCbCode + ',' + locBrNo);
      if iRow >= 0 then
      begin
        sCbNm := GT_BUBIN_INFO.cbSCorpNm.Strings[iRow];  // 단축법인명
        sCbDp := GT_BUBIN_INFO.cbSDeptNm.Strings[iRow];  // 단축법인부서명

        try
          if Trim(sCBNm) = '' then
          begin
            Assert(False, En_Coding('수정)법인코드검색오류1 - 검색명 : ' + sCbCode + ',' + locBrNo + ' 검색어 : ' + AnsiString(GT_BUBIN_INFO.cbEtc.Strings[iRow])));
          end;
        except
          on e: Exception do Assert(False, E.Message);
        end;
      end else
      begin
        sCbNm := '';
        sCbDp := '';

        Assert(False, En_Coding('수정)법인코드검색오류2 - 검색명 : ' + sCbCode + ',' + locBrNo + ' 검색갯수 : ' + IntToStr(GT_BUBIN_INFO.cbcode.Count)));
      end;
    end else
    begin
      sCbCode := '';
      sCbNm := '';
      sCbDp := '';
    end;

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallBellStatusString', gsUpdateCallBellStatus);   //콜벨오더 상태
//		gsCuCallBellID, gsOrderCallBellID
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallBellMemIdString', gsUpdateCallBellID);   //콜벨영업사원 ID

		// 법인일 경우 세팅..
    if (CbCuGb.ItemIndex = 2) and (cxtCuBubin.Hint <> '') then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', En_Coding(sCbCode));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BNameString', En_Coding(sCbNm));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BName2String', En_Coding(sCbDp));
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BNameString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BName2String', '');
    end;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuSeqString', En_Coding(lcsCu_seq)); // 고객일련번호
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ModeString', '');
    // 미사용.
    if pos('*', cxtCuTel.Text) > 0 then
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(locsCuTel))
    else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', ReplaceAll(En_Coding(cxtCuTel.Text), '-', ''));
    if pos('*', cxtCuTel2.Text) > 0 then
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTel2String', En_Coding(locsCuTel2))
    else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTel2String', ReplaceAll(En_Coding(cxtCuTel2.Text), '-', ''));

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustNameString', En_Coding(edtCuName.Text));

		// --------------------------------------------------------------------------------------------
		// 2018.10.16 추가(차종타입 1종/2종)
		if cb_CarType.ItemIndex = 1 then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarTypeString', En_Coding('2')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarTypeString', En_Coding('1')) ;

		// --------------------------------------------------------------------------------------------
		// 2019.04.11 마일리지사용시 마일리지 적립
		if ( (cbbPayMethod.Text = PAY_METHOD_POST_MILE) and (lblCashSave.Tag = 1) ) Or
			 ( (cbbPayMethod.Text = PAY_METHOD_MULTI) and (curMileCharge.Value > 0) and (lblCashSave.Tag = 1) )  then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CashSaveYnString', En_Coding('y'))
    else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CashSaveYnString', En_Coding('n')) ;

		if ( (cbbPayMethod.Text = PAY_METHOD_POST_MILE) and (lblMileSave.Tag = 1) ) Or
       ( (cbbPayMethod.Text = PAY_METHOD_MULTI) and (curMileCharge.Value > 0) and (lblMileSave.Tag = 1) )  then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'MlgSaveYnString', En_Coding('y'))
    else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'MlgSaveYnString', En_Coding('n')) ;

		if chkViewLevel.Checked then
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViewLevelString', En_Coding('1'))
    else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViewLevelString', En_Coding('0'));

		if (lblCallByInsureFree.Tag = 1)  then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'KmInsFeeFreeYnString', En_Coding('y'))
		else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'KmInsFeeFreeYnString', En_Coding('n')) ;    
		StrValue := '';
{		if ( ( blCompulWor ) and (Trim(gWkSabun) <> '') ) then
		begin
			StrValue := Trim(gWkSabun);
		end else  }  //불필요 주석처리 20210515 KHS

    //예약시 기사배차를 on/off형태로 변경되어 넣고빼고 가능하게 변경. 20111125 KHS 정회귀팀장 확인
		if ( (AStatus = 'R') {And (Trim(FWk_sabun) <> '')}) then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkToAge="WkToAgeString"', 'WkToAge="WkToAgeString" WkSabun="WkSabunString"'); // 기사사번 읽기.
			StrValue := Trim(gsWkSubun_Up);
    end;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkSabunString', StrValue); // 기사사번 읽기.

    if lblWkAge.Tag = 1 then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkFromAgeString', En_Coding(edtWkFAge.Text));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkToAgeString', En_Coding(edtWkTAge.Text));
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkFromAgeString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkToAgeString', '');
    end;

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuWorMemo.Text), #$D#$A, '|');
		sContent := ReplaceAll(sContent, #13#10, '|');
		sContent := ReplaceAll(sContent, #10#13, '|');
		sContent := StringReplace(sContent, '│', '|', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarInfoString', En_Coding(sContent));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PayGubunString', PayMethod);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'TranNoString', gUpdate_CardTranNo);
		//수정창에서 후불(카드) 취소 후 재 승인 시 요금변경 가능하게 하기위하여 원 거래번호 추가 2016.08.24 KHS

    // 기사 수수료 설정값 추가. 2010-11-03
    cxDriverCharge.Text := StringReplace(cxDriverCharge.Text,',','',[rfReplaceAll]);

		//탁송, 스틱 옵션
    if lblOptionSexM.Tag = 1 then StrValue := 'M' else
    if lblOptionSexF.Tag = 1 then StrValue := 'F'
                             else StrValue := 'A';

		if lbl_04.Tag = 1 then sStickCall := 'y' else sStickCall := 'n';
		if sTakHwak = 'y' then sLicType := GetLicTypeCode(cbbLicType.Text); //면허명에 대한 코드

		StrValue := StrValue + sStickCall + sTaksong + sTakHwak + sLicType;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'DriverOptionString', StrValue);
		//탁송, 스틱 옵션

    // KCP 카드결제 "결제일련번호" 추가.  2011-10-26
    StrValue  := cxDriverCharge.Text + '" CardPaySeq="' + locCardPaySeq;
		ls_TxLoad := StringReplace(ls_TxLoad,'DriverChargeString', StrValue, [rfReplaceAll]);
    // 법인인증 여부
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'URLReqString'    , '');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'MChargeString'   , '');
    // 모바일결제 : 미사용.
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfoString'  , En_Coding(meoBigo.Text));

    StrValue := PayMethod;
    if StrValue = '9' then  // 9.복합
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CbChargeString'  , ReplaceAll(curCbCharge.Text, ',', ''));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CardChargeString', ReplaceAll(curCardCharge.Text, ',', ''));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'MileChargeString', ReplaceAll(curMileCharge.Text, ',', ''));
    end else
    if StrValue = '2' then  // 2.후불
    begin
  		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CbChargeString'  , ReplaceAll(curRate.Text, ',', ''));   // 법인누적금액 사용위해 수정
//      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CbChargeString'  , IntToStr(edtPostPay.Value));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CardChargeString', '0');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'MileChargeString', '0');
    end else
    if StrValue = '7' then  // 7.후불(카드)
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CbChargeString'  , '0');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CardChargeString', IntToStr(edtPostPay.Value));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'MileChargeString', '0');
    end else
    if StrValue = '8' then  // 8.후불(마일)
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CbChargeString'  , '0');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CardChargeString', '0');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'MileChargeString', IntToStr(edtPostPay.Value));
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CbChargeString'  , '0');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'CardChargeString', '0');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'MileChargeString', '0');
    end;

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'SLIPChargeString'    , ReplaceAll(curRate.Text, ',', ''));

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuCCMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfMemoString', En_Coding(sContent));

    if cbTelView.ItemIndex = 0 then StrValue := '1' else
    if cbTelView.ItemIndex = 1 then StrValue := '2' else
		if cbTelView.ItemIndex = 2 then StrValue := 'a' else    // 둘다표시
    if cbTelView.ItemIndex = 3 then StrValue := 'c';
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuCallingOptionString', StrValue);

    //brTelYN 사용안함  20211006
//		StrValue := IfThen(lblCenterMng.Tag = 1, 'y', 'n');     // 상황실 체크박스
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'BrTelYnString', 'n');

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuTelYnString', CustBrTelYN);

    // SMS 수신여부
		StrValue := IfThen(ChkCuSmsNo.Checked, 'n', 'y');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', StrValue);
		// 기사종류
		if lblOptionSexM.Tag = 1 then StrValue := 'M' else
    if lblOptionSexF.Tag = 1 then StrValue := 'F'
                             else StrValue := 'A';

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'OptionString', StrValue);

    // 예약시간
//CONF_PRETIME	DATE	Yes	NULL	23	예약시간         : 상태(예약) 변경 시간 지정
//CONF_PREREALTIME	DATE	Yes		158	실제예약배차시간 : 예약시간을 보여주기 위한 설정값일뿐 다른 의미 없음
		if ((BtnResJ.Tag = 1) or (BtnResD.Tag = 1)) then
		begin
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPretimeString', formatdatetime('yyyymmdd', dtpResvDate.Date) + formatdatetime('hhmm', dtpResvTime.Time) + '00');
			if ( formatdatetime('yyyymmdd', dtpResvDateJ.Date) = '00000000' ) And
         ( formatdatetime('hhmm', dtpResvTimeJ.Time) <> '0000' ) then
      begin
				Assert(False, Format('[예약시간오류]접수번호-%s, Input 값-%s', [En_Coding(cxtJoinNum.Text), formatdatetime('yyyymmdd', dtpResvDateJ.Date) + formatdatetime('hhmm', dtpResvTimeJ.Time) + '00']));
        ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreRealTimeString',  '00000000000000');
      end else
      begin
        ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreRealTimeString', formatdatetime('yyyymmdd', dtpResvDateJ.Date) + formatdatetime('hhmm', dtpResvTimeJ.Time) + '00');
      end;
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPretimeString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreRealTimeString', '');
		end;

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'BrNoString', En_Coding(locBrNo));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'KeyNumberString', En_Coding(locKNum));
    // 고객구분-0(일반), 1(업소), 3(법인)
    if CbCuGb.ItemIndex = 2 then ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '3') else
    if CbCuGb.ItemIndex = 1 then ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '1')
                            else ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', '0');

    // 고객등급 추가 : 0.불량:빨강, 1.주의:주황, 2.일반:하늘, 3.우수:동색, 4.최우수:은색, 5.VIP:황금색
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'LevelCdString', GetCustLevelSeq);

    if AStatus = 'R' then
    begin
      if BtnResJ.Tag = 1 then
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '0')
      else
      if BtnResD.Tag = 1 then
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '5')
      else
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '');
    end else
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '');

		lg_Save := '2';
		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
		begin
			if (cxtJoinNum.Hint <> '4') then //문의
			begin
				//(/경유|경유/|(경유|경유)| 경유|경유 )
				if func_ViaCheck(meoStartArea.Text) and (GT_PASS_INFO[iFidx][0].AREA1 = '') then // 경유관련 문구 있음 and 경유지좌표 없음
				begin
					if pnl_ViaAlert_Title.Hint <> 'Skip' then
					begin
						grpBtm.Enabled := False; //다른입력 막음
						pnl_ViaAlert.Width := 410;
						pnl_ViaAlert_Title.Hint := ''; //Check, Skip 구분값
						pnl_ViaAlert.Hint := '';
						pnl_ViaAlert.Top := grpBtm.Top - pnl_ViaAlert.Height - 2;
						pnl_ViaAlert.Left := 1;
						pnl_ViaAlert.Hint := cxtJoinNum.Hint;
						pnl_ViaAlert.BringToFront;
						pnl_ViaAlert.Visible := True;
						exit;
					end;
				end;
			end;
		end;

		if (gRate_Update > 0) and (curRate.Value = 0) and (Not lblOptionCallMu.Tag = 1) and //최초 요금이 0원이상인데 수정시 요금이 0원일이고 콜무선택 안했을경우
			 ((cxtJoinNum.Hint = '0') or (cxtJoinNum.Hint = '1') or (cxtJoinNum.Hint = '2')) then //접수,배차,완료일 경우 콜무 자동체크 여부 확인
		begin
		//Yes 콜무로 자동변경, No : 그냥 수정
			if (GS_PRJ_AREA = 'O') and (GT_USERIF.CT = 'H227') then
				Log('콜무처리 : gRate_Update[' + IntToStr(gRate_Update) + '] curRate[' + IntToStr(curRate.Value) +']', LOGDATAPATHFILE);

			sTmp := '콜무처리 하시겠습니까?' + #13#10
						+ '**수정창에서 요금을 0원으로 변경하시면 콜무로 변경됩니다.'  + #13#10 + #13#10
						+ '      [YES]콜무로 수정            [NO]계속진행';

			if Application.MessageBox(PChar(sTmp), CDMSI, MB_YESNO + MB_ICONINFORMATION) = IDYES then
			begin
				if lblOptionCallMu.Tag = 0 then	lblOptionCallMu.Tag := 1;
				lblOptionCallMuClick(lblOptionCallMu);
			end;
		end;
		if lblOptionCallMu.Tag = 1 then
  		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfOptionsString', 'y')
		else
  		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfOptionsString', 'n');


		sContent := '';
		sContent := ReplaceAll(Trim(edt_CardMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuMemoString', En_Coding(sContent));

    try
      if Trim(lcsSta1) = '' then
        lcsSta1 := fGetCity('S', lcsSta1, lcsSta2, lcsSta3, GS_Grid_DEP);

      lcsSta1 := fGetSiDo(Self.Tag, 'S', lcsSta1, lcsSta2, lcsSta3, cxtJoinNum.Text, GS_Grid_DEP,
                          Trim(cxtStartAreaDetail.Text), Trim(meoStartArea.Text),
                          cxtStartXval.Text, cxtStartYval.Text,
                          locHdNo, locBrNo, locKNum);
    except
      on e: Exception do
        Assert(False, 'Proc_OrderUpdateSave lcsSta1 - ' + E.Message);
    end;

    try
      if (Trim(lcsEnd1) = '') and (GS_SEARCH_ENDNOSEARCH = False) then //도착지 검색 옵션적용 2012.05.30
      begin
        lcsEnd1 := fGetCity('E', lcsEnd1, lcsEnd2, lcsEnd3, GS_Grid_DES);
        if GS_LocalMapSET then meoEndArea.Text := lcsEnd1;
      end;

      lcsEnd1 := fGetSiDo(Self.Tag, 'E', lcsEnd1, lcsEnd2, lcsEnd3, cxtJoinNum.Text, GS_Grid_DES,
                           Trim(cxtEndAreaDetail.Caption), Trim(meoEndArea.Text),
                           cxtEndXval.Text, cxtEndYval.Text,
                           locHdNo, locBrNo, locKNum);
    except
      on e: Exception do
        Assert(False, 'Proc_OrderUpdateSave lcsEnd1 - ' + E.Message);
    end;

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea1String', En_Coding(lcsSta1));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea2String', En_Coding(lcsSta2));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea3String', En_Coding(lcsSta3));

    lcsSta4 := En_Coding(cxtStartAreaDetail.Text);
  	if (Trim(cxtStartAreaDetail.Text) <> Trim(lcsConfAREA4)) then
    begin
  		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
      begin
        if ( Trim(lcsConfAREA4) <> '' ) And (Trim(cxtStartAreaDetail.Text)= '') then lcsSta4 := '☆';
			end;
      Assert(False, '[상세지명변경] : ' + cxtJoinNum.Text + '¶ 발주(본사-' + locHdNo + ' 지사-' + locBrNo + ' 대표번호-' + locKNum +
                  '¶' + lcsConfAREA4 + '¶' + cxtStartAreaDetail.Text + '¶' + lcsSta1 + ' ' + lcsSta2+ ' ' + lcsSta3 + '¶' + lcsSta4 +
                  '¶'+ En_Coding(meoStartArea.Text)+'¶'+ cxtStartXval.Text + ' ' + cxtStartYval.Text+'¶'+ GS_Grid_DEP );
    end;

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea4String', En_Coding(lcsSta4));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stArea5String', En_Coding(meoStartArea.Text));

    if Not ( (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') ) then
    begin
      if (cxtStartAreaDetail.Text <> '') and ((lcsSta1 = '') or (lcsSta2 = '') or (lcsSta3 = '')) then
      begin
				GMessagebox('출발지 정보가 올바르지 않습니다. 출발지를 다시 조회하시기 바랍니다.', CDMSE);
        Assert(False, '출발지정보 : ' + lcsStaDocId + '/' + lcsSta1 + '/' + lcsSta2 + '/' + lcsSta3 + '/' + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + meoStartArea.text + '/' + GS_Grid_DEP);
        btnCmdUpdSave.Enabled := True;
				Exit;
      end;
    end;

		// 2006.06.06 맵번호 대신 좌표로 수정한다.
    if StrToFloatDef(cxtStartXval.Text, -1) = -1 then
    begin
      gJONStaChkXY.X := '';
      gJONStaChkXY.GUIDE_X := '';
      cxtStartXval.Text := '';
      gsStartGUIDEXval := '';
    end;

    if StrToFloatDef(cxtStartYval.Text, -1) = -1 then
    begin
      gJONStaChkXY.Y := '';
      gJONStaChkXY.GUIDE_Y := '';
      cxtStartYval.Text := '';
      gsStartGUIDEYval := '';
    end;

    if ((gJONStaChkXY.X) <> '') and (gJONStaChkXY.X[1] <> '0') then
      gJONStaChkXY.X := '0' + gJONStaChkXY.X;

    if ((cxtStartXval.Text) <> '') and (cxtStartXval.Text[1] <> '0') then
			cxtStartXval.Text := '0' + cxtStartXval.Text;

    if Not ( (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') ) then
    begin
      // 출발지 좌표 중 X/Y가 동일하거나, X좌표가 비어있는 경우 발생하여 예외처리 지시(최도순)
			if ((cxtStartXval.Text <> '') or (cxtStartYval.Text <> '')) and ((cxtStartXval.Text = cxtStartYval.Text) or
				(cxtStartXval.Text = '')) then
      begin
        GMessagebox('출발지 좌표 정보가 올바르지 않습니다. 출발지를 다시 조회 하시고 수정 바랍니다.', CDMSE);
        btnCmdUpdSave.Enabled := True;
        Exit;
      end;
    end;

		sTmpLon := SetWGS84(cxtStartYval.Text);
		sTmpLat := SetWGS84(cxtStartXval.Text);      //037XXXXX -> 37.XXXXXXX로 변환
		dTmpLon := StrToFloatDef(sTmpLon, 0);                        //더블형으로 변환
		dTmpLat := StrToFloatDef(sTmpLat, 0);
		try
			if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
			begin
				if (cxtJoinNum.Hint <> '4') and (cxtJoinNum.Hint <> '5') then
				begin
					bLonLat := PtInPolygon(dTmpLon, dTmpLat, FKOREAAREA_XY.Lon, FKOREAAREA_XY.Lat, FKOREAAREA_XY.Lon.count);
					if Not bLonLat then  //유효한 좌표가 아니면
					begin
						GMessagebox('[출발지 좌표오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
											+ '좌표(' + cxtStartYval.Text + '/' + cxtStartXval.Text + ')' + #13#10
											+ '출발지를 다시 조회하시기 바랍니다.', CDMSE);
						Assert(False, '출발지좌표 : ' + lcsStaDocId + '/'
												 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + meoStartArea.text + '/' + GS_Grid_DEP + '/' + cxtJoinNum.Hint);
						btnCmdUpdSave.Enabled := True;
						if (Self.Showing) And (meoStartArea.CanFocus) then meoStartArea.SetFocus;
						Exit;
					end;
					if (cxtStartAreaDetail.Text <> '') and ((lcsSta1 = '') or (lcsSta2 = '') or (lcsSta3 = '')) then
					begin
						GMessagebox('[출발지 정보오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
											+ '시도 : ' + lcsSta1 + ', 시군구 : ' + lcsSta2 + ', 읍면동 : ' + lcsSta3 + #13#10
											+ '출발지를 다시 조회하시기 바랍니다.', CDMSE);
						Assert(False, '출발지정보 : ' + lcsStaDocId + '/' + lcsSta1 + '/' + lcsSta2 + '/' + lcsSta3 + '/'
												 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + cxtStartAreaDetail.text + '/' + GS_Grid_DEP + '/' + cxtJoinNum.Hint);
						btnCmdUpdSave.Enabled := True;
						if (Self.Showing) And (meoStartArea.CanFocus) then meoStartArea.SetFocus;
						Exit;
					end;
				end;

				if ((cxtEndXval.Text <> cxtEndXval.Hint) and (cxtEndXval.Text = '')) or
					 ((cxtEndYval.Text <> cxtEndYval.Hint) and (cxtEndYval.Text = '')) then   //원본도 빈값인데 현재도 빈값이면 OK, 원본과 빈값이 다르면 좌표체크
				begin
					if (lcsEnd1 <> '') and ((lcsEnd2 <> '') or (lcsEnd3 <> '')) and ((cxtEndYval.Text = '') or (cxtEndXval.Text = '')) then
					begin
						GMessagebox('[도착지 좌표오류]' + #13#10 + '도착지좌표가 올바르지 않습니다.' + #13#10
											+ '좌표(' + cxtEndYval.Text + '/' + cxtEndXval.Text + ')' + #13#10
											+ '도착지를 다시 조회하시기 바랍니다.', CDMSE);
						Assert(False, '도착지좌표 : ' + lcsStaDocId + '/'
												 + cxtEndYval.Text + '/' + cxtEndXval.Text + '/' + meoEndArea.text + '/' + GS_Grid_DES + '/' + cxtJoinNum.Hint);
						btnCmdUpdSave.Enabled := True;
						if (Self.Showing) And (meoEndArea.CanFocus) then meoEndArea.SetFocus;
						Exit;
					end;
				end;
			end;
		except
			on e: Exception do
				Assert(False, 'Proc_OrderUpdateSave PtInPolygon - ' + E.Message);
    end;

			// 20120808 LYB 수정
    iX := cxtStartXval.Text;
    iY := cxtStartYval.Text;

    if ( gJONStaChkXY.X <> cxtStartXval.Text ) Or ( gJONStaChkXY.Y <> cxtStartYval.Text ) then
    begin
      if ( gJONStaChkXY.X <> '' ) And ( gJONStaChkXY.Y <> '' ) And ( gJONStaChkXY.Area1 <> '') then
      begin
        sMsg := ' ** 출발지 선택원본과 접수정보가 일치하지 않습니다. ** ' + #13 +
                '   - 출발지 선택원본                                     ' + #13 +
                '   ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + #13 +
                '   - 출발지 접수정보                                     ' + #13 +
                '   ' + lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3 + ' ' + cxtStartAreaDetail.Text + ' ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + #13#10#13#10 +
                '   출발지 선택원본으로 접수 처리 하시겠습니까?           ' + #13 +
                '   (아니오 선택시 출발지 명칭 검색을 다시 해주시기바랍니다.) ';
        begin
          sErrMsg := '[수-출좌 Y] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + ' ' + gJONStaChkXY.Gubun;
          Assert(False, sErrMsg);
        end;

        iX := gJONStaChkXY.X;
        iY := gJONStaChkXY.Y;
      end else
      begin
				sErrMsg := '[수-출좌 O] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + ' ' + gJONStaChkXY.Gubun;
        Assert(False, sErrMsg);
      end;
    end;

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stMapXString', iX);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stMapYString', iY);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'AreaUPS', GS_Grid_DEP);  // 출발지선택값

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'WaitTimeString', cxTmWaitTime.Text + FloatToStr(fCruKm));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ChargeTypeString' , '22');

		if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  	  ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaSOPTString', '8')
    else
	    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaSOPTString', '9');

  	ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaSDebugString', En_Coding(lcsStaDebug));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaSetTypeString', lcsStaCellSel);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaKeywordString', En_Coding(lcsStaSchWord));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'stAreaIdString'     , lcsStaDocId);

		//카카오 오더의 경우 동정보까지 입력해야함. 20190604 KHS
		if bKakaoOrder then
		begin
			if Trim(lcsEnd3) = '' then
			begin
				GMessagebox('[카카오기사 배차입니다]' + #13#10 + '도착지 "동정보" 까지 정확히 입력하셔야 수정됩니다' , CDMSE);

				btnCmdUpdSave.Enabled := True;
				if (Self.Showing) And (meoEndArea.CanFocus) then meoEndArea.SetFocus;
				Exit;
			end;
		end;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea1String', En_Coding(lcsEnd1));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea2String', En_Coding(lcsEnd2));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea3String', En_Coding(lcsEnd3));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea4String', En_Coding(cxtEndAreaDetail.Caption));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edArea5String', En_Coding(meoEndArea.Text));

    // 2006.07.24 도착지좌표 추가한다.
		if StrToFloatDef(cxtEndXval.Text, -1) = -1 then cxtEndXval.Text := '';
    if StrToFloatDef(cxtEndYval.Text, -1) = -1 then cxtEndYval.Text := '';
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edMapXString', cxtEndXval.Text);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edMapYString', cxtEndYval.Text);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'AreaUPE', GS_Grid_DES); // 도착지선택값

    if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  	  ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaEOPTString', '8')
    else
	    ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaEOPTString', '9');
//-    Log('lcsEndDebug 수 : ' + En_Coding(lcsEndDebug), LOGDATAPATHFILE);
  	ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaEDebugString', En_Coding(lcsEndDebug));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaSetTypeString', lcsEndCellSel);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaKeywordString', En_Coding(lcsEndSchWord));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'edAreaIdString'     , lcsEndDocId);

    // 경유요금 :::::::: 신버전 추가 기능 개발..(법인기능요청으로,,개발,,)
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaChargeViaString', ReplaceAll(cxCurPathRate.Text, ',', ''));
    // 대기요금
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'WChargeWCString', ReplaceAll(cxCurWaitTmRate.Text, ',', ''));
		// 대기시간
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WTimeWTString', cxTmWaitTime.Text + FloatToStr(fCruKm));
    // 보정금액
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'AChargeACString', ReplaceAll(cxCurRevisionRate.Text, ',', ''));
		// 법인한줄메모
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CbMemoString', Trim(cxTBubinMemo.Text));
    // 고객 앱 메모  2022.03.02  LYB
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustDisplayMemoString', Trim(edtAppMemo.Text));
  	// 지원금
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'SupportChargeString', ReplaceAll(cxCurSupportRate.Text, ',', ''));
		// 기타요금
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'OtherChargeString', ReplaceAll(cxCurOtherRate.Text, ',', ''));

		// 적요투(2)
		sTemp := ReplaceAll(meoBigo2.Text, CRLF, '|');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfo2String', En_Coding(sTemp));

    // 적요투(3)
    sTemp := ReplaceAll(meoBigo3.Text, CRLF, '|');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfo3String', En_Coding(sTemp));

    // 플러스콜 설정값 추가. 2010.10.03
    StrValue := IfThen(lblPlusYN.Tag = 1, 'y', 'n'); // 플러스콜 체크박스
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PlusYnString', StrValue);

		// 탁송연합콜 설정값 추가. 2019.05.15
		StrValue := IfThen(lblTakAlly.Tag = 1, 'y', 'n');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConsShareYnString', StrValue);

		// AI 아웃바운드 배차지연콜 사용여부 추가. 2019.07.16 KHS
		StrValue := IfThen(chk_AIReCall.Checked, 'y', 'n');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'AiOutString', StrValue);

		StrValue := IfThen(lblWKJAmt.Tag = 1, 'y', 'n'); // 지원금 체크박스
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostChargeSmsYNString', StrValue);

		StrValue := '';
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'Call2YNString', StrValue);

    // 소요시간이 있을경우에만 전송
    if fTotalTime > 0 then   // 일반요금선택시 경탐거리는 사용안함 20211122 KHS 정경석차장 요청;
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'EstTimeString', FloatToStr(fTotalTime));  // 소요시간
    end else
    begin
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'EstTimeString', '0');  // 소요시간
//      ls_TxLoad := ReplaceAll(ls_TxLoad, 'EstDistString', '0');  // 거리
    end;
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'EstDistString', FloatToStr(fCruKm));      // 거리

		//--------------------------------------------------------------------------------------------
    //  경유지 추가
    //--------------------------------------------------------------------------------------------
		if GT_PASS_INFO[iFidx][0].AREA1 = '' then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoCountString', '0');
      ls_ViaInto := lc_ViaInfoString;
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area1String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area2String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area3String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area4String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area5String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapXString', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapYString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaUPV', '');  // 경유지선택값

      if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '8')
      else
    		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '9');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVDebugString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaSetTypeString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaKeywordString', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaIdString'     , '');
    end else
    begin
      lRow := 0;
      ls_ViaInto := '';
			while lRow <= 4 do
			begin
				if GT_PASS_INFO[iFidx][lRow].AREA1 = '' then break;
				ls_ViaInto := ls_ViaInto + lc_ViaInfoString;
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area1String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA1));
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area2String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA2));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area3String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA3));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area4String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA4));
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area5String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA5));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapXString', GT_PASS_INFO[iFidx][lRow].MAP_X);
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapYString', GT_PASS_INFO[iFidx][lRow].MAP_Y);
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaUPV', GS_Grid_VIA);  // 경유지선택값

        if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
    			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '8')
        else
    			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '9');
	  		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVDebugString', '');
		  	ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaSetTypeString', GT_PASS_INFO[iFidx][lRow].CELLS);
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaKeywordString', En_Coding(GT_PASS_INFO[iFidx][lRow].SWORD));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaIdString'     , GT_PASS_INFO[iFidx][lRow].DOCID);
        inc(lRow);
      end;
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoCountString', IntToStr(lRow));
    end;
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoString', ls_ViaInto);

    // - 와이즈넛 검색어 실패/성공 여부 전송
    if ( GS_Grid_DEP <> 'C' ) And ( Trim(lcsStaSchWord) <> '' ) then
    begin
      if GS_Grid_DEP = 'W' then sRespSParam1 := meoStartArea.Text
                           else sRespSParam1 := GS_Grid_DEP + '/' + meoStartArea.Text + '/' + cxtStartXval.Text + '/' + cxtStartYval.Text;

      sRespSParam2 := GS_Grid_DEP;
      sRespSParam3 := lcsStaCellSel;
    end;

		if ( GS_Grid_DES <> 'D' ) And ( GS_Grid_DES <> 'C' ) And ( Trim(lcsEndSchWord) <> '' ) then
    begin
      if GS_Grid_DES = 'W' then sRespEParam1 := meoEndArea.Text
													 else sRespEParam1 := GS_Grid_DES + '/' + meoEndArea.Text + '/' + cxtEndXval.Text + '/' + cxtEndYval.Text;

      sRespEParam2 := GS_Grid_DES;
      sRespEParam3 := lcsEndCellSel;
    end;

		Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
			Proc_JobAfterProc(True, True);
      if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False) then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);

          tmFormClose.Tag := 99; // 화면 닫기 설정값.
				end;
      end;
		finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
      Proc_JobAfterProc(False, True);
			bAppOrderOpen := False;
      giBtnIndex := -1;
			if cxtJoinNum.Hint <> '4' then
				tmrResponse.Enabled := True;  // 문의는 제외하고 처리
		end;
  except
    on e: Exception do
    begin
      ls_TxLoad := 'JON01N[Proc_OrderUpdateSave]:' + e.Message;
      Log(ls_TxLoad, LOGDATADIRECTORY + 'Accept_Err.log');
      Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
      Assert(False, E.Message);
    end;
  end;
end;

function TFrm_JON01N.func_ViaCheck(AStart: String): Boolean;
var
	sTmp, sTmp2: string;
begin
//(/경유|경유/|(경유|경유)| 경유|경유 )
	SetDebugeWrite('JON01N.func_ViaCheck');
	Try
		result := False;
		if (GS_PRJ_AREA = 'S') then
		begin
			sTmp := AStart;
			sTmp2 := '/경유';  if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := '경유/';  if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := '(경유';  if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := '경유)';  if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := ' 경유'; if pos(sTmp2, sTmp) > 0 then result := True;
			sTmp2 := '경유 '; if pos(sTmp2, sTmp) > 0 then result := True;
		end;

	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

// 주문 접수를 처리 한다.
function TFrm_JON01N.Proc_Save(ss_Mode: string) : Boolean;
const
  lc_stCid  = '<CidInfo CidsYn="CidsYnString" CidsVersion="CidsVersionString" CidsAuto="CidsAutoString" CidsInline="CidsInlineString" CidsDnis="CidsDnisString" '
                    + 'CidsKeyNumber="CidsKeyNumberString" CidsCidNum="CidsCidNumString" CidsCidKey="CidsCidKeyString" CidsBrNo="CidsBrNoString" ManTel="ManTelString"  '
                    + 'ManKeyNumber="ManKeyNumberString" ManBrNo="ManBrNoString" />';

  lc_stArea = '<Depart Area1="stArea1String" Area2="stArea2String" Area3="stArea3String" Area4="stArea4String" Area5="stArea5String" '
										+ 'Charge="SLIPChargeString" CbCharge="CbChargeString" CardCharge="CardChargeString" MileCharge="MileChargeString" '
										+ 'ConfInfo="ConfInfoString" MapX="stMapXString" MapY="stMapYString" PayGubun="PayGubunString" '
                    + 'Unpriced="UnpricedString" MCharge="MChargeString" MPayer="MPayerString" URLReq="URLReqString" WaitTime="WaitTimeString" '
                    + 'ChargeType="ChargeTypeString" AreaOpt="AreaSOPTString" AreaDebug="AreaSDebugString" AreaUp="AreaUPS" AreaSetType="AreaSetTypeString" '
										+ 'AreaKeyword="AreaKeywordString" AreaId="AreaIdString" Call2YN = "Call2YNString" EstTime="EstTimeString" EstDist="EstDistString" '
										+ 'DriverCharge="DriverChString" />';

  lc_edArea = '<Dest Area1="edArea1String" Area2="edArea2String" Area3="edArea3String" Area4="edArea4String" Area5="edArea5String" '
                  + 'MapX="edMapXString" MapY="edMapYString" AreaOpt="AreaEOPTString" AreaDebug="AreaEDebugString" AreaUp="AreaUPE" AreaSetType="AreaSetTypeString" AreaKeyword="AreaKeywordString" AreaId="AreaIdString" />';

	lc_ViaInfoString = '<Via Area1="Area1String" Area2="Area2String" Area3="Area3String" Area4="Area4String" Area5="Area5String" '
                        + 'MapX="MapXString" MapY="MapYString" AreaOpt="AreaVOPTString" AreaDebug="AreaVDebugString" AreaUp="AreaUPV" AreaSetType="AreaSetTypeString" AreaKeyword="AreaKeywordString" AreaId="AreaIdString" />';
var
  ls_TxLoad: string;
  lRow, iRow, iFidx: Integer;
  ls_stCid, ls_stArea, ls_stArea_Tot, ls_edArea, ls_edArea_Tot, ls_ViaInto: string;
  sCbCode, sCbNm, sCbDp, sErrMsg, sMsg, ls_msg, sTmp : string;
  sBaechSMS: string;
	slRcvList: TStringList;
  rv_str, ls_rxxml: string;
  I, ErrCode: integer;

  iX, iY : String;

	chkFlag : Boolean;
	StrValue, sContent: string;
  MCData: TMultiCallData;
  startTick, delta : DWord;
 	sTmpLon, sTmpLat : string;
	dTmpLon, dTmpLat : Double;
	bLonLat : Boolean; //좌표유효성 검사
begin
	SetDebugeWrite('JON01N.Proc_Save');
  Result := False;
  startTick := GetTickCount;
	try
		bLonLat := True;
		sTmpLon := SetWGS84(cxtStartYval.Text);
		sTmpLat := SetWGS84(cxtStartXval.Text);      //037XXXXX -> 37.XXXXXXX로 변환
		dTmpLon := StrToFloatDef(sTmpLon, 0);                        //더블형으로 변환
		dTmpLat := StrToFloatDef(sTmpLat, 0);

		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
		begin
			if (ss_Mode <> '4') and (ss_Mode <> '5') and (ss_Mode <> 'Q') then
			begin
				bLonLat := PtInPolygon(dTmpLon, dTmpLat, FKOREAAREA_XY.Lon, FKOREAAREA_XY.Lat, FKOREAAREA_XY.Lon.count);
				if Not bLonLat then  //유효한 좌표가 아니면
				begin
					GMessagebox('[출발지 좌표오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
										+ '좌표(' + cxtStartYval.Text + '/' + cxtStartXval.Text + ')' + #13#10
										+ '출발지를 다시 조회하시기 바랍니다.', CDMSE);
					Assert(False, '출발지좌표 : ' + lcsStaDocId + '/'
											 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + meoStartArea.text + '/' + GS_Grid_DEP + '/' + ss_Mode);
					if meoStartArea.CanFocus then meoStartArea.SetFocus;
					Proc_BtnEnabled(True);
					Exit;
				end;
			end;

      if (IsAngelPlusHead(GS_PRJ_AREA = 'S', GT_UserIF.HD)) And               // 엔젤플러스이면서
         ( (ss_Mode = '0') Or (ss_Mode = '5') Or (ss_Mode = 'R') ) then       // 접수, 대기, 예약일 경우
      begin
        if ((cxtEndYval.Text = '') or (cxtEndXval.Text = '')) then
        begin
          GMessagebox('[도착지 좌표오류]' + #13#10 + '도착지좌표가 올바르지 않습니다.' + #13#10
                    + '도착지를 다시 입력하시기 바랍니다.', CDMSE);
          Assert(False, '엔젤도착지좌표오류 : ' + lcsStaDocId + '/' + cxtEndYval.Text + '/' + cxtEndXval.Text + '/' + meoEndArea.text + '/' + GS_Grid_DES + '/' + '복수콜등록');
          if meoEndArea.CanFocus then meoEndArea.SetFocus;
          Proc_BtnEnabled(True);
          Exit;
        end;
      end;

			if (lcsEnd1 <> '') and ((lcsEnd2 <> '') or (lcsEnd3 <> '')) and ((cxtEndYval.Text = '') or (cxtEndXval.Text = '')) then
			begin
				GMessagebox('[도착지 좌표오류]' + #13#10 + '도착지좌표가 올바르지 않습니다.' + #13#10
									+ '좌표(' + cxtEndYval.Text + '/' + cxtEndXval.Text + ')' + #13#10
									+ '도착지를 다시 조회하시기 바랍니다.', CDMSE);
				Assert(False, '도착지좌표 : ' + lcsStaDocId + '/'
										 + cxtEndYval.Text + '/' + cxtEndXval.Text + '/' + meoEndArea.text + '/' + GS_Grid_DES + '/' + '복수콜등록');
				if meoEndArea.CanFocus then meoEndArea.SetFocus;
				Proc_BtnEnabled(True);
				Exit;
			end;
		end;

		if StrToIntDef(edtWkFAge.Text, 0) > StrToIntDef(edtWkTAge.Text, 0) then
		begin
      ShowMessage('제한나이 설정이 잘못되었습니다.');
      edtWkFAge.SetFocus;
			Proc_BtnEnabled(True);
			Exit;
    end;

    iFidx := Self.Tag;          // 폼의 index를 저장.

		//접수 시작
		ls_stArea := '';
		ls_edArea := '';
		ls_stArea_Tot := '';
		ls_edArea_Tot := '';
		Proc_BtnEnabled(False);     // 버튼 활성/비활성 처리.
		locHdNo := Proc_HDNOSearch; // 본사코드 정보를 읽는다.
    locBrNo := Proc_BRNOSearch; // 지사코드 정보를 읽는다.
    locKNum := Proc_MainKeyNumberSearch; // 대표번호 정보를 읽는다.

    if ( locKNum <> lsBr_KeyNumber ) and ( Trim(lsBr_KeyNumber) <> '' ) then
    begin
			ls_msg := '저장 대표번호[' + locKNum + ']와 조회 대표번호['+ lsBr_KeyNumber +']가 다릅니다' + #13#10 +
                '고객번호에서 다시 엔터를 치세요';
      Assert(False, 'JON01N.Proc_Save - 대표번호상이.' + cxtCuTel.Text + ' : '  + ls_msg);
      Application.MessageBox(PChar(ls_msg), PChar(GS_APPNAME), MB_OK);
			Proc_BtnEnabled(True);
			Exit;
    end;

    if ( locLogSeq <> '' ) and ( gsCidVersion = 'CXE' )then
    begin
      if Pos(cxtCuTel.Text, locLogSeq) <= 0 then
      begin
				ls_msg := '조회전화번호[' + cxtCuTel.Text + ']와 CID전화번호['+ Copy(locLogSeq, 5, 11) +']가 다릅니다' + #13#10 +
                  '고객번호에서 다시 엔터를 치세요';
        Assert(False, 'JON01N.Proc_Save - 전화번호상이.' + ls_msg);
        Application.MessageBox(PChar(ls_msg), PChar(GS_APPNAME), MB_OK);
				Proc_BtnEnabled(True);
				Exit;
      end;
    end;

    if ( ( Not fnc_RealKmThread_End ) And ( GT_DISTANCE_ST = 1 ) )  Or  ( giViaKmComplet )  then
    begin
      GMessagebox('경로탐색거리 계산중입니다' + #13 +
                  '완료 후 종료 바랍니다.', CDMSE);
			Proc_BtnEnabled(True);
			Exit;
    end;

    if cxtCallTelNum.Text = '' then
    begin
      cxtCuTel.Text := StringReplace(cxtCuTel.Text, '-', '', [rfReplaceAll]);
      cxtCallTelNum.Text := cxtCuTel.Text;
		end;

		//////////////////////////////////////////////////////////////////////////////////
		//  접수 전문
		//////////////////////////////////////////////////////////////////////////////////
		ls_TxLoad := GTx_UnitXmlLoad('JON03080.XML');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
		sBaechSMS := '';
		StrValue := '';

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallBellStatusString', pnlCallBell.Hint); // 콜벨업소여부(1:정상, 2:해지, null: 콜벨 업소 설정 없음)

		// 접수창에서 기사 강제 배차는 없어졌지만..접수 조회 화면에서 강제 배차가 있기 때문에 처리
{		if ( blCompulWor ) and (Trim(gWkSabun) <> '') then
		begin
			sBaechSMS := IfThen(blChkCuSMS, '0', '1');  // 고객에게 문자를 전송할지의 여부,,
			if ss_Mode <> 'R' then
				ss_Mode := '0';
			StrValue := Trim(gWkSabun);
		end; }  // 불필요 주석처리 20210525 KHS

		if (chkCompulWor.Checked) and (Trim(gWkSabun) <> '') then
		begin
			sBaechSMS := IfThen(blChkCuSMS, '0', '1');  // 고객에게 문자를 전송할지의 여부,,
			if ss_Mode <> 'R' then
				ss_Mode   := '0';
			StrValue := Trim(gWkSabun);
		end;

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkSabunString', StrValue); // 기사사번 읽기.
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'BaechaSMSString', sBaechSMS);

		StrValue := IfThen(ChkCuSmsNo.Checked, 'n', 'y');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'SMSString', StrValue);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'SAVE000' + ss_Mode);
		if ss_Mode = 'Q' then ls_TxLoad := ReplaceAll(ls_TxLoad, 'StatusString', '4')    // 문의로 등록
                     else ls_TxLoad := ReplaceAll(ls_TxLoad, 'StatusString', ss_Mode);

		StrValue := IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTelString', En_Coding(StrValue));

    StrValue := IfThen(0 >= Pos('*', cxtCuTel2.Text), cxtCuTel2.Text, locsCuTel2);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustTel2String', En_Coding(StrValue));

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CIDString', '');
    // 당일중에 제일 첫건에 대해서만 주장치에서 받았는지.. 직접접수했는지 체크함.[요는 콜마너를 사용하고있는지 체크하기 위함임]

    ls_TxLoad := StringReplace(ls_TxLoad, 'CallingBrNoString',       En_Coding(locCallingBrNo), [rfReplaceAll]); //  콜링지사코드
    ls_TxLoad := StringReplace(ls_TxLoad, 'CallingKeyNumberString',  En_Coding(locCallingKeyNumber), [rfReplaceAll]); // 콜링대표번호

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CallCenterString', En_Coding(GT_USERIF.CT));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'MaddBrchString', En_Coding(locBrNo));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'KeyNumberString', En_Coding(locKNum));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CidLogSeqString', En_Coding(locLogSeq));
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'DNISString', locDNIS);

		sContent := '';
		sContent := ReplaceAll(Trim(meoCuCCMemo.Text), #$D#$A, '¶');
		sContent := ReplaceAll(sContent, #13#10, '¶');
		sContent := ReplaceAll(sContent, #10#13, '¶');
		sContent := StringReplace(sContent, '|', '¶', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfMemoString', En_Coding(sContent));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBrchString', '');

    // 고객구분-0(일반), 1(업소), 3(법인)
		if CbCuGb.ItemIndex = 2 then StrValue := '3' else
    if CbCuGb.ItemIndex = 1 then StrValue := '1'
                            else StrValue := '0';

    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfBarString', StrValue);

    // 고객등급 추가 : 0.불량:빨강, 1.주의:주황, 2.일반:하늘, 3.우수:동색, 4.최우수:은색, 5.VIP:황금색
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'LevelCdString', GetCustLevelSeq);

    // 경유요금 :::::::: 신버전 추가 기능 개발..(법인기능요청으로,,개발,,)
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaChargeViaString', ReplaceAll(cxCurPathRate.Text, ',', ''));
    // 대기요금
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WChargeWCString', ReplaceAll(cxCurWaitTmRate.Text, ',', ''));
    // 대기시간
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WTimeWTString', cxTmWaitTime.Text + FloatToStr(fCruKm));
    // 보정금액
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'AChargeACString', ReplaceAll(cxCurRevisionRate.Text, ',', ''));
		// 법인한줄메모
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CbMemoString', Trim(cxTBubinMemo.Text));
    // 고객 앱 메모  2022.03.02  LYB
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustDisplayMemoString', Trim(edtAppMemo.Text));
		// 지원금
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'SupportChargeString', ReplaceAll(cxCurSupportRate.Text, ',', ''));
		// 기타요금
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'OtherChargeString', ReplaceAll(cxCurOtherRate.Text, ',', ''));
		// 적요투(2)
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfo2String', En_Coding(ReplaceAll(meoBigo2.Text, #10#13, '|')));
    // 적요투(3)
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfInfo3String', En_Coding(ReplaceAll(meoBigo3.Text, #10#13, '|')));
    // 기사종류

    if lblOptionSexM.Tag = 1 then StrValue := 'M' else
    if lblOptionSexF.Tag = 1 then StrValue := 'F'
                             else StrValue := 'A';
    //신규일때는 신버전 수도권만 탁확 사용하기때문에 선택한 보험으로 적용 2017.04.12 KHS
		if sTakHwak = 'y' then sLicType := GetLicTypeCode(cbbLicType.Text)
                   		else sLicType := '00';
		if lbl_04.Tag = 1 then sStickCall := 'y' else sStickCall := 'n';
		StrValue := StrValue + sStickCall + sTaksong + sTakHwak + sLicType;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'DriverString', StrValue);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostTimeString', PostTime); // 입금시간코드
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostChargeString', IntToStr(edtPostPay.Value)); // 자동입금금액
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkChargeString', ReplaceAll(cxLblWkJAmt.Caption, ',', '')); // 기사지원금

    sCbCode := '';
    sCbNm   := '';
    sCbDp   := '';
    if cxtCuBubin.Hint <> '' then
    begin // 법인코드 체크.
      sCbCode := cxtCuBubin.Hint;
      iRow := GT_BUBIN_INFO.cbcode.IndexOf(sCbCode + ',' + locBrNo);
      if iRow >= 0 then
      begin
        sCbNm := GT_BUBIN_INFO.cbSCorpNm.Strings[iRow];  // 단축법인명
        sCbDp := GT_BUBIN_INFO.cbSDeptNm.Strings[iRow];  // 단축법인부서명

        try
          if Trim(sCBNm) = '' then
          begin
            Assert(False, En_Coding('저장)법인코드검색오류1 - 검색명 : ' + sCbCode + ',' + locBrNo + ' 검색어 : ' + AnsiString(GT_BUBIN_INFO.cbEtc.Strings[iRow])));
          end;
        except
          on e: Exception do
             Assert(False, E.Message);
        end;
      end else
      begin
        Assert(False, En_Coding('저장)법인코드검색오류2 - 검색명 : ' + sCbCode + ',' + locBrNo + ' 검색갯수 : ' + IntToStr(GT_BUBIN_INFO.cbcode.Count)));
			end;
    end;

    // 법인일 경우 세팅..
    if (CBCuGb.ItemIndex = 2) and (cxtCuBubin.Hint <> '') then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', En_Coding(sCbCode));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BNameString', En_Coding(sCbNm));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BName2String', En_Coding(sCbDp));
    end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BGroupString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BNameString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'BName2String', '');
    end;
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuSeqString', lcsCu_seq);
		// 예약시간 //if chkResv.Checked = True then
		StrValue := IfThen(ss_Mode = 'R', formatdatetime('yyyymmdd', dtpResvDate.Date) + formatdatetime('hhmm', dtpResvTime.Time) + '00', '');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPretimeString', StrValue);

		StrValue := IfThen(ss_Mode = 'R', formatdatetime('yyyymmdd', dtpResvDateJ.Date) + formatdatetime('hhmm', dtpResvTimeJ.Time) + '00', '');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreRealTimeString', StrValue);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'GroupNoString', En_Coding(locHdNo));

    if cbTelView.ItemIndex = 0 then StrValue := '1' else
    if cbTelView.ItemIndex = 1 then StrValue := '2' else
		if cbTelView.ItemIndex = 2 then StrValue := 'a' else    // 둘다표시
		if cbTelView.ItemIndex = 3 then StrValue := 'c';
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuCallingOptionString', StrValue);

//		if cbTelView.ItemIndex = 3 then
//		  StrValue := 'y'              // 위쪽이 상황실이면 아랫쪽도 무조건 상황실 체크
//    else
//		  StrValue := IfThen(lblCenterMng.Tag = 1, 'y', 'n');     // 상황실 체크박스
//  brTelYn 사용안함
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'BrTelYnString', 'n');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuTelYnString', CustBrTelYN);

    // 기사종류
		if lblOptionSexM.Tag = 1 then StrValue := 'M' else
		if lblOptionSexF.Tag = 1 then StrValue := 'F'
                             else StrValue := 'A';
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'OptionString', StrValue);

    // 플러스콜 설정값 추가. 2010.10.03 --> 플러스콜을 법인콜로 변경함. 110906.
    // 플러스콜 여부(수도권만 사용함)
    if GS_PRJ_AREA = 'S' then
    begin
      StrValue := IfThen(lblPlusYN.Tag = 1, 'y', 'n'); // 플러스콜 체크박스 --> 플러스콜을 법인콜로 변경함. 110906.
    end else
    begin
      StrValue := 'n';    // 지방권은 무조건 법인콜 사용안함. 2011-11-10.
    end;
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PlusYnString', StrValue);

		// 탁송연합콜 설정값 추가. 2019.05.15
		StrValue := IfThen(lblTakAlly.Tag = 1, 'y', 'n');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConsShareYnString', StrValue);

		// AI 아웃바운드 배차지연콜 사용여부 추가. 2019.07.16 KHS
		StrValue := IfThen(chk_AIReCall.Checked, 'y', 'n');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'AiOutString', StrValue);

		StrValue := IfThen(lblWKJAmt.Tag = 1, 'y', 'n'); // 지원금 체크박스

		// KCP 카드결제 "결제일련번호" 추가.  2011-10-19
    if btnCmdExit.Hint = 'QUESTINSERTCOPY_MODE' then    // 수정창에서 문의 후 복사시 결제정보는 저장안되게 수정  2022.01.25 LYB
  		StrValue  := StrValue + '" CardPaySeq="' + ''
    else
	  	StrValue  := StrValue + '" CardPaySeq="' + locCardPaySeq;

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'PostChargeSmsYNString', StrValue);

    try
			if (btnCmdJoinCopy.Hint = 'JOINCOPY') or (btnCmdWaitCopy.Hint = 'JOINCOPY') then
			begin
        if Assigned(Frm_Main.Frm_JON34B[Self.Tag]) then Frm_Main.Frm_JON34B[Self.Tag].proc_init;
        locCardPaySeq  := '';
        locCardTranNo  := '';
        locCardPayInfo := '';
      end;
		except
			on e: Exception do
        Assert(False, e.Message);
    end;

		//PUSH 발송용 2013.03.30 khs
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'AppCodeString', sAppCode);

		// --------------------------------------------------------------------------------------------
		// 2018.10.16 추가(차종타입 0:1종/1:2종)
		if cb_CarType.ItemIndex = 1 then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarTypeString', En_Coding('2')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarTypeString', En_Coding('1')) ;
		// --------------------------------------------------------------------------------------------
		// 2019.04.11 마일리지사용시 마일리지 적립
		if ( (cbbPayMethod.Text = PAY_METHOD_POST_MILE) and (lblCashSave.Tag = 1) ) Or
       ( (cbbPayMethod.Text = PAY_METHOD_MULTI) and (curMileCharge.Value > 0) and (lblCashSave.Tag = 1) )  then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CashSaveYnString', En_Coding('y')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'CashSaveYnString', En_Coding('n')) ;

		if ( (cbbPayMethod.Text = PAY_METHOD_POST_MILE) and (lblMileSave.Tag = 1) ) Or
       ( (cbbPayMethod.Text = PAY_METHOD_MULTI) and (curMileCharge.Value > 0) and (lblMileSave.Tag = 1) )  then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'MlgSaveYnString', En_Coding('y')) else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'MlgSaveYnString', En_Coding('n')) ;

		if (lblCallByInsureFree.Tag = 1)  then
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'KmInsFeeFreeYnString', En_Coding('y'))
		else
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'KmInsFeeFreeYnString', En_Coding('n')) ;    

		// --------------------------------------------------------------------------------------------

		// --------------------------------------------------------------------------------------------
    // 2006.06.06 추가(고객명, 차량정보, 후불, 맵번호에서 좌표로 변경)
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CustNameString', En_Coding(edtCuName.Text));

		if chkViewLevel.Checked then
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViewLevelString', En_Coding('1'))
    else
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViewLevelString', En_Coding('0'));

    if lblWkAge.Tag = 1 then
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkFromAgeString', En_Coding(edtWkFAge.Text));
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkToAgeString', En_Coding(edtWkTAge.Text));
		end else
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkFromAgeString', '');
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'WkToAgeString', '');
    end;


		sContent := '';
		sContent := ReplaceAll(Trim(meoCuWorMemo.Text), #$D#$A, '|');
		sContent := ReplaceAll(sContent, #13#10, '|');
		sContent := ReplaceAll(sContent, #10#13, '|');
		sContent := StringReplace(sContent, '│', '|', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CarInfoString', En_Coding(sContent));

    if ss_Mode = 'R' then
    begin
      if BtnResJ.Tag = 1 then
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '0')
      else
      if BtnResD.Tag = 1 then
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '5')
      else
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '');
    end else
    		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfPreStatus1String', '');

    if lblOptionCallMu.Tag = 1 then
  		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfOptionsString', 'y')
    else
  		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ConfOptionsString', 'n');

		sContent := '';
		sContent := ReplaceAll(Trim(edt_CardMemo.Text), #$D#$A, '|');
		sContent := ReplaceAll(sContent, #13#10, '|');
		sContent := ReplaceAll(sContent, #10#13, '|');
		sContent := StringReplace(sContent, '│', '|', [rfReplaceAll]);

		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CuMemoString', En_Coding(sContent));

		// CID 정보 전송
    ls_stCid := lc_stCid;

    if cxLblCIDUseFlg.Hint <> 'CID' then
    begin
      ls_stCid := StringReplace(ls_stCid, 'CidsYnString',        'n', [rfReplaceAll]); // CID서버로 부터 생성된 창인지 여부 (y,n)
      if gsCidVersion = 'CXE' then
        ls_stCid := StringReplace(ls_stCid, 'CidsVersionString',   '1', [rfReplaceAll]) // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      else
       ls_stCid := StringReplace(ls_stCid, 'CidsVersionString',   '0', [rfReplaceAll]); // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      ls_stCid := StringReplace(ls_stCid, 'CidsInlineString',    ''                     , [rfReplaceAll]); // 내선번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsDnisString',      ''                     , [rfReplaceAll]); // DNIS번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsKeyNumberString', ''                     , [rfReplaceAll]); // 대표번호  (CID서버에서 수신한값
      ls_stCid := StringReplace(ls_stCid, 'CidsCidNumString',    ''                     , [rfReplaceAll]); // 고객번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsCidKeyString',    ''                     , [rfReplaceAll]); // 고객번호별고유키값  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsBrNoString',      ''                     , [rfReplaceAll]); // 지사코드 (CID서버에서 수신한값)
    end else
    begin
      ls_stCid := StringReplace(ls_stCid, 'CidsYnString',        'y'                    , [rfReplaceAll]); // CID서버로 부터 생성된 창인지 여부 (y,n)
      if gsCidVersion = 'CXE' then
        ls_stCid := StringReplace(ls_stCid, 'CidsVersionString',   '1', [rfReplaceAll]) // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      else
        ls_stCid := StringReplace(ls_stCid, 'CidsVersionString',   '0', [rfReplaceAll]); // CID서버프로토콜버전 (0:구버전, 1:CIDXE버전)
      ls_stCid := StringReplace(ls_stCid, 'CidsInlineString',    gsInternalNumber       , [rfReplaceAll]); // 내선번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsDnisString',      En_Coding(locDNIS)     , [rfReplaceAll]); // DNIS번호  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsKeyNumberString', En_Coding(locKNum)     , [rfReplaceAll]); // 대표번호  (CID서버에서 수신한값
      ls_stCid := StringReplace(ls_stCid, 'CidsCidNumString',    cxtCallTelNum.Text     , [rfReplaceAll]); // 고객번호  (CID서버에서 수신한값)
			ls_stCid := StringReplace(ls_stCid, 'CidsCidKeyString',    locSndTime             , [rfReplaceAll]); // 고객번호별고유키값  (CID서버에서 수신한값)
      ls_stCid := StringReplace(ls_stCid, 'CidsBrNoString',      En_Coding(locBRNO)     , [rfReplaceAll]); // 지사코드 (CID서버에서 수신한값)
    end;

    ls_stCid := StringReplace(ls_stCid, 'ManTelString',        cxtCuTel.Text     , [rfReplaceAll]); // 고객번호   (상담원의 임의로 고객번호입력)
    ls_stCid := StringReplace(ls_stCid, 'ManKeyNumberString',  En_Coding(locKNum), [rfReplaceAll]); // 대표번호   (상담원이 임의로 지사/대표번호 선택)
    ls_stCid := StringReplace(ls_stCid, 'ManBrNoString',       En_Coding(locBRNO), [rfReplaceAll]); // 지사코드   (상담원이 임의로 지사/대표번호 선택)

    // 사용자별 오더통계를 계산하기 위한 속성값(CID : 0(일반), 1(CID))
    if cxLblCIDUseFlg.Hint = 'CID' then
		begin
      if locCustHP_MainNum_Search = '' then
        // JON03에서 고객 전화번호로  조회시 사용함. 구분값:'CUSTHP'
        ls_stCid := StringReplace(ls_stCid, 'CidsAutoString', '1', [rfReplaceAll])   // CID서버로부터 생성되어 최초 전문요청시 (1)
      else
        ls_stCid := StringReplace(ls_stCid, 'CidsAutoString', '0', [rfReplaceAll]);
    end else
    begin
      ls_stCid := StringReplace(ls_stCid, 'CidsAutoString', '0', [rfReplaceAll]);
    end;

    // //////////////////////////////////////////////////
    // 복수콜 처리[신버전에선 제외: 다른방식 채용]
		// //////////////////////////////////////////////////
		if (Assigned(Frm_JON015) and Frm_JON015.HandleAllocated) and
       (Frm_JON015.Count > 0) and (Frm_JON015.OrderHandle = Self.Handle) then
    begin
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'AddressCountString', IntToStr(Frm_JON015.Count));

			for I := 0 to Frm_JON015.Count - 1 do
      begin
				ls_stArea := lc_stArea;
				ls_edArea := lc_edArea;

				Frm_JON015.GetMultiCallData(I, MCData);

        // 출발지 좌표 중 X/Y가 동일하거나, X좌표가 비어있는 경우 발생하여 예외처리 지시(최도순)
        if ((MCData.StPosX <> '') or (MCData.StPosY <> '')) and ((MCData.StPosX = MCData.StPosY) or
					(MCData.StPosX = '')) then
				begin
					GMessagebox('출발지 좌표 정보가 올바르지 않습니다. 출발지를 다시 조회하시기 바랍니다.', CDMSE);
					Proc_BtnEnabled(True);
					Exit;
				end;

        // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함   수도권 토성대리-A876 상담지사12-D615
				if ( (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') ) then
        begin
          ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', '');
          ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', '');
          ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', '');
        end else
        if ss_Mode = 'Q' then
        begin
          ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', En_Coding(lcsStaQ1));
          ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', En_Coding(lcsStaQ2));
          ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', En_Coding(lcsStaQ3));
        end else
        begin
          ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', En_Coding(Copy(MCData.StArea1, 1, 2)));
          ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', En_Coding(MCData.StArea2));
          ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', En_Coding(MCData.StArea3));
        end;
				ls_stArea := ReplaceAll(ls_stArea, 'stArea4String', En_Coding(MCData.StArea4));
        ls_stArea := ReplaceAll(ls_stArea, 'stArea5String', En_Coding(MCData.StArea5));

        ls_stArea := ReplaceAll(ls_stArea, 'stMapXString', MCData.StPosX);
        ls_stArea := ReplaceAll(ls_stArea, 'stMapYString', MCData.StPosY);
        ls_stArea := ReplaceAll(ls_stArea, 'AreaUPS', GS_Grid_DEP);  // 출발지선택값

        if MCData.PayType = '후불' then StrValue := '2' else
				if MCData.PayType = '외상' then StrValue := '4'
                                   else StrValue := '0'; // 현금

        ls_stArea := ReplaceAll(ls_stArea, 'PayGubunString', StrValue);
        ls_stArea := ReplaceAll(ls_stArea, 'UnpricedString', IfThen(MCData.PriceYN, 'y', 'n'));
        ls_stArea := ReplaceAll(ls_stArea, 'URLReqString', IfThen(MCData.CorpYN, '1', ''));
        ls_stArea := ReplaceAll(ls_stArea, 'ConfInfoString', En_Coding(MCData.Summary));

        ls_stArea := ReplaceAll(ls_stArea, 'CbChargeString'  , '0');   // 복수콜은 후불 등록 안됨
        ls_stArea := ReplaceAll(ls_stArea, 'CardChargeString', '0');
        ls_stArea := ReplaceAll(ls_stArea, 'MileChargeString', '0');
				ls_stArea := ReplaceAll(ls_stArea, 'SLIPChargeString', IntToStr(MCData.Price));

     		// 대기시간
				ls_stArea := ReplaceAll(ls_stArea, 'WaitTimeString', cxTmWaitTime.Text + FloatToStr(MCData.Km));
				ls_stArea := ReplaceAll(ls_stArea, 'ChargeTypeString' , '22');

				ls_stArea := ReplaceAll(ls_stArea, 'AreaSOPTString', '');
				ls_stArea := ReplaceAll(ls_stArea, 'AreaSDebugString', '');
				ls_stArea := ReplaceAll(ls_stArea, 'AreaSetTypeString', '');
				ls_stArea := ReplaceAll(ls_stArea, 'AreaKeywordString', '');
				ls_stArea := ReplaceAll(ls_stArea, 'AreaIdString'     , '');

				ls_stArea := ReplaceAll(ls_stArea, 'Call2YNString', MCData.Call2YN);

				MCData.DriverCharge := StringReplace(MCData.DriverCharge,',','',[rfReplaceAll]);
				ls_stArea := ReplaceAll(ls_stArea, 'DriverChString', MCData.DriverCharge);

				cxDriverCharge.Text := StringReplace(cxDriverCharge.Text,',','',[rfReplaceAll]);
				if cxDriverCharge.Text = '0' then StrValue := ''
																		 else	StrValue  := cxDriverCharge.Text;

				// 소요시간이 있을경우에만 전송
        if MCData.TotalTime > 0 then
				begin
          ls_stArea := ReplaceAll(ls_stArea, 'EstTimeString', FloatToStr(MCData.TotalTime));  // 소요시간
          ls_stArea := ReplaceAll(ls_stArea, 'EstDistString', FloatToStr(MCData.Km));      // 거리
        end else
        begin
          ls_stArea := ReplaceAll(ls_stArea, 'EstTimeString', '0');  // 소요시간
          ls_stArea := ReplaceAll(ls_stArea, 'EstDistString', '0');      // 거리
        end;

        // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함 수도권 토성대리-A876 상담지사12-D615
        if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then
        begin
          ls_edArea := ReplaceAll(ls_edArea, 'edArea1String', '');
          ls_edArea := ReplaceAll(ls_edArea, 'edArea2String', '');
          ls_edArea := ReplaceAll(ls_edArea, 'edArea3String', '');
				end else
        begin
          ls_edArea := ReplaceAll(ls_edArea, 'edArea1String', En_Coding(Copy(MCData.EdArea1, 1, 2)));
          ls_edArea := ReplaceAll(ls_edArea, 'edArea2String', En_Coding(MCData.EdArea2));
					ls_edArea := ReplaceAll(ls_edArea, 'edArea3String', En_Coding(MCData.EdArea3));
        end;
				ls_edArea := ReplaceAll(ls_edArea, 'edArea4String', En_Coding(MCData.EdArea4));
        ls_edArea := ReplaceAll(ls_edArea, 'edArea5String', En_Coding(MCData.EdArea5));

        ls_edArea := ReplaceAll(ls_edArea, 'edMapXString', MCData.EdPosX);
        ls_edArea := ReplaceAll(ls_edArea, 'edMapYString', MCData.EdPosY);
        ls_edArea := ReplaceAll(ls_edArea, 'AreaUPE', GS_Grid_DES); // 도착지선택값

				ls_edArea := ReplaceAll(ls_edArea, 'AreaEOPTString', '');
				ls_edArea := ReplaceAll(ls_edArea, 'AreaEDebugString', '');
				ls_edArea := ReplaceAll(ls_edArea, 'AreaSetTypeString', '');
				ls_edArea := ReplaceAll(ls_edArea, 'AreaKeywordString', '');
				ls_edArea := ReplaceAll(ls_edArea, 'AreaIdString'     , '');

        ls_stArea_Tot := ls_stArea_Tot + ls_stArea;
        ls_edArea_Tot := ls_edArea_Tot + ls_edArea;

        if ss_Mode = 'Q' then Break;    // 이중문의등록일경우 복수콜은 1건만 문의 처리
      end;
    end  else// 복수콜 처리 완료
    // 단일콜 처리..[복수콜 개념으로 처리함.]
    begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'AddressCountString', '1');

      ls_stArea := lc_stArea;
      ls_edArea := lc_edArea;

      if Trim(lcsSta1) = '' then
        lcsSta1 := fGetCity('S', lcsSta1, lcsSta2, lcsSta3, GS_Grid_DEP);

      // 이중등록일경우에는 시도/시군구/읍면동 체크 안함 lyb 20210112
      if ( ss_Mode <> 'Q' ) then
        lcsSta1 := fGetSiDo(Self.Tag, 'S', lcsSta1, lcsSta2, lcsSta3, cxtCuTel.Text, GS_Grid_DEP,
                            Trim(cxtStartAreaDetail.Text), Trim(meoStartArea.Text),
                            cxtStartXval.Text, cxtStartYval.Text,
                            locHdNo, locBrNo, locKNum);

      if (Trim(lcsEnd1) = '') and (GS_SEARCH_ENDNOSEARCH = False) then //도착지 검색 옵션적용 2012.05.30
      begin
        lcsEnd1 := fGetCity('E',lcsEnd1, lcsEnd2, lcsEnd3, GS_Grid_DES);
        if GS_LocalMapSET then meoEndArea.Text := lcsEnd1;
      end;

      lcsEnd1 := fGetSiDo(Self.Tag, 'E', lcsEnd1, lcsEnd2, lcsEnd3, cxtCuTel.Text, GS_Grid_DES,
													Trim(cxtEndAreaDetail.Caption), Trim(meoEndArea.Text),
                           cxtEndXval.Text, cxtEndYval.Text,
                           locHdNo, locBrNo, locKNum);

      // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함 수도권 토성대리-A876 상담지사12-D615
			if ( (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') ) then
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', '');
        ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', '');
        ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', '');
      end else
      if ss_Mode = 'Q' then
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', En_Coding(Copy(lcsStaQ1, 1, 2)));
        ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', En_Coding(lcsStaQ2));
        ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', En_Coding(lcsStaQ3));
      end else
      begin
				ls_stArea := ReplaceAll(ls_stArea, 'stArea1String', En_Coding(Copy(lcsSta1, 1, 2)));
				ls_stArea := ReplaceAll(ls_stArea, 'stArea2String', En_Coding(lcsSta2));
				ls_stArea := ReplaceAll(ls_stArea, 'stArea3String', En_Coding(lcsSta3));

				if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) And ( ss_Mode <> 'Q' ) then
				begin
					if (cxtStartAreaDetail.Text <> '') and ((lcsSta1 = '') or (lcsSta2 = '') or (lcsSta3 = '')) then
					begin
						GMessagebox('[출발지 정보오류]' + #13#10 + '출발지좌표가 올바르지 않습니다.' + #13#10
											+ '시도 : ' + lcsSta1 + ', 시군구 : ' + lcsSta2 + ', 읍면동 : ' + lcsSta3 + #13#10
											+ '출발지를 다시 조회하시기 바랍니다.', CDMSE);
						Assert(False, '출발지정보 : ' + lcsStaDocId + '/' + lcsSta1 + '/' + lcsSta2 + '/' + lcsSta3 + '/'
												 + cxtStartYval.Text + '/' + cxtStartXval.Text + '/' + cxtStartAreaDetail.text + '/' + GS_Grid_DEP + '/' + ss_Mode);
						if meoStartArea.CanFocus then meoStartArea.SetFocus;
						Proc_BtnEnabled(True);
						Exit;
					end;
				end;
			end;

      lcsSta4 := En_Coding(cxtStartAreaDetail.Text);
			if (Trim(cxtStartAreaDetail.Text) <> Trim(lcsConfAREA4)) then
      begin
    		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
        begin
					if ( Trim(lcsConfAREA4) <> '' ) And (Trim(cxtStartAreaDetail.Text)= '') then lcsSta4 := '☆';
        end;
				Assert(False, '[상세지명변경] : ' + cxtCuTel.Text + '¶ 발주(본사-' + locHdNo + ' 지사-' + locBrNo + ' 대표번호-' + locKNum +
                    '¶' + lcsConfAREA4 + '¶' + cxtStartAreaDetail.Text + '¶' + lcsSta1 + ' ' + lcsSta2+ ' ' + lcsSta3 +
                    '¶'+ En_Coding(meoStartArea.Text)+'¶'+ cxtStartXval.Text + ' ' + cxtStartYval.Text+'¶'+ GS_Grid_DEP );
      end;

      sTmp := '';
      //엔젤 4개 본사 상세POI 뒤에 본사별 마크 추가 천사 : ★천사, 엔에스 : ☆엔에스, 인스타 : ◎스타, 바른차 : ♥바차
      //2021.11.02 KHS 
      if IsAngelPlusHead(GS_PRJ_AREA = 'S', Proc_HDNOSearch) then
      begin
        sTmp := ' ' + func_AngelPlusMarker(Proc_HDNOSearch);
      end;

      //sie.lee 요청사항 알파환경에서 확인하기 위함 20211102 KHS
      if (Proc_HDNOSearch = 'A100') and (Proc_BrNOSearch = 'B100') then
        sTmp := ' ' + '★천사';

      //추가접수시 중복적용 방지
      if pos(sTmp, lcsSta4) < 1 then
  			ls_stArea := ReplaceAll(ls_stArea, 'stArea4String', lcsSta4 + sTmp) else
  			ls_stArea := ReplaceAll(ls_stArea, 'stArea4String', lcsSta4);
        
      ls_stArea := ReplaceAll(ls_stArea, 'stArea5String', En_Coding(meoStartArea.Text));

			// 2006.06.06 맵번호 대신 좌표로 수정한다.
      if StrToFloatDef(cxtStartXval.Text, -1) = -1 then
      begin
        gJONStaChkXY.X := '';
        gJONStaChkXY.GUIDE_X := '';
        cxtStartXval.Text := '';
        gsStartGUIDEXval := '';
      end;

      if StrToFloatDef(cxtStartYval.Text, -1) = -1 then
      begin
        gJONStaChkXY.Y := '';
        gJONStaChkXY.GUIDE_Y := '';
        cxtStartYval.Text := '';
        gsStartGUIDEYval := '';
      end;

      if ((gJONStaChkXY.X) <> '') and (gJONStaChkXY.X[1] <> '0') then
        gJONStaChkXY.X := '0' + gJONStaChkXY.X;

      if ((cxtStartXval.Text) <> '') and (cxtStartXval.Text[1] <> '0') then
        cxtStartXval.Text := '0' + cxtStartXval.Text;

      // 출발지 좌표 중 X/Y가 동일하거나, X좌표가 비어있는 경우 발생하여 예외처리 지시(최도순)
      if ((cxtStartXval.Text <> '') or (cxtStartYval.Text <> '')) and ((cxtStartXval.Text = cxtStartYval.Text) or
        (cxtStartXval.Text = '')) then
      begin
				GMessagebox('출발지 좌표 정보가 올바르지 않습니다. 출발지를 다시 조회하시기 바랍니다.', CDMSE);
				Proc_BtnEnabled(True);
				Exit;
      end;

      // 20120808 LYB 수정
      iX := cxtStartXval.Text;
      iY := cxtStartYval.Text;

      if ( gJONStaChkXY.X <> cxtStartXval.Text ) Or ( gJONStaChkXY.Y <> cxtStartYval.Text ) then
      begin
        if ( gJONStaChkXY.X <> '' ) And ( gJONStaChkXY.Y <> '' ) And ( gJONStaChkXY.Area1 <> '') then
        begin
          sMsg := ' ** 출발지 선택원본과 접수정보가 일치하지 않습니다. ** ' + #13 +
                  '   - 출발지 선택원본                                     ' + #13 +
                  '   ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + #13 +
                  '   - 출발지 접수정보                                     ' + #13 +
                  '   ' + lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3 + ' ' + cxtStartAreaDetail.Text + ' ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + #13#10#13#10 +
                  '   출발지 선택원본으로 접수 처리 하시겠습니까?           ' + #13 +
                  '   (아니오 선택시 출발지 명칭 검색을 다시 해주시기바랍니다.) ';
          begin
            sErrMsg := '[접-출좌 Y] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + ' ' + gJONStaChkXY.Gubun;
//            Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
            Assert(False, sErrMsg);
          end;

          iX := gJONStaChkXY.X;
          iY := gJONStaChkXY.Y;
        end else
        begin
					sErrMsg := '[접-출좌 O] : (' + GS_Grid_DEP + ') '+ IfThen(0 >= Pos('*', cxtCuTel.Text), cxtCallTelNum.Text, locsCuTel) + ' - ' + gJONStaChkXY.Area1 + ' ' + gJONStaChkXY.Area2 + ' ' + gJONStaChkXY.Area3 + ' ' + gJONStaChkXY.Area4 + ' ' + gJONStaChkXY.Area5 + ' ' + meoStartArea.Text + ' ' + gJONStaChkXY.X + ' ' + gJONStaChkXY.Y + ' = ' + cxtStartXval.Text+ ' ' + cxtStartYval.Text + ' Tab:' + IntToStr(Self.Tag) + ' ' + gJONStaChkXY.Gubun;
//          Assert(False, RightStr(GS_CHNAGE_STR, 1000) + '[변-출좌]');
          Assert(False, sErrMsg);
        end;
      end;

			ls_stArea := ReplaceAll(ls_stArea, 'stMapXString', iX);
			ls_stArea := ReplaceAll(ls_stArea, 'stMapYString', iY);
      ls_stArea := ReplaceAll(ls_stArea, 'AreaUPS', GS_Grid_DEP);  // 출발지선택값

      // 결제방식.[0현금, 2후불, 4외상, 3모바일(미사용), 7후불(카드), 8후불(마일), 9복합 ]
      StrValue := PayMethod;
      ls_stArea := ReplaceAll(ls_stArea, 'PayGubunString', StrValue);

      // 미지정[요금 미지정을 한다.]
      StrValue := IfThen(lblNoSet.Tag = 1, 'y', 'n');
      ls_stArea := ReplaceAll(ls_stArea, 'UnpricedString', StrValue);

      // 법인인증(URL인증) 여부
      StrValue := '';
      ls_stArea := ReplaceAll(ls_stArea, 'URLReqString', StrValue);

      ls_stArea := ReplaceAll(ls_stArea, 'ConfInfoString', En_Coding(meoBigo.Text));

      StrValue := PayMethod;
      if StrValue = '9' then  // 9.복합
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'CbChargeString'  , ReplaceAll(curCbCharge.Text, ',', ''));
        ls_stArea := ReplaceAll(ls_stArea, 'CardChargeString', ReplaceAll(curCardCharge.Text, ',', ''));
        ls_stArea := ReplaceAll(ls_stArea, 'MileChargeString', ReplaceAll(curMileCharge.Text, ',', ''));
      end else
      if StrValue = '2' then  // 2.후불
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'CbChargeString'  , ReplaceAll(curRate.Text, ',', ''));   // 법인누적금액 사용위해 수정
//        ls_stArea := ReplaceAll(ls_stArea, 'CbChargeString'  , IntToStr(edtPostPay.Value));
        ls_stArea := ReplaceAll(ls_stArea, 'CardChargeString', '0');
        ls_stArea := ReplaceAll(ls_stArea, 'MileChargeString', '0');
      end else
      if StrValue = '7' then  // 7.후불(카드)
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'CbChargeString'  , '0');
        ls_stArea := ReplaceAll(ls_stArea, 'CardChargeString', IntToStr(edtPostPay.Value));
        ls_stArea := ReplaceAll(ls_stArea, 'MileChargeString', '0');
      end else
      if StrValue = '8' then  // 8.후불(마일)
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'CbChargeString'  , '0');
        ls_stArea := ReplaceAll(ls_stArea, 'CardChargeString', '0');
        ls_stArea := ReplaceAll(ls_stArea, 'MileChargeString', IntToStr(edtPostPay.Value));
      end else
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'CbChargeString'  , '0');
        ls_stArea := ReplaceAll(ls_stArea, 'CardChargeString', '0');
        ls_stArea := ReplaceAll(ls_stArea, 'MileChargeString', '0');
      end;

			ls_stArea := ReplaceAll(ls_stArea, 'SLIPChargeString', ReplaceAll(curRate.Text, ',', ''));    // 위치 변경하면 안됨  cbChargeString 아래에 있어야됨

     	// 대기시간
			ls_stArea := ReplaceAll(ls_stArea, 'WaitTimeString', cxTmWaitTime.Text + FloatToStr(fCruKm));
			ls_stArea := ReplaceAll(ls_stArea, 'ChargeTypeString' , '22');

			if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  		  ls_stArea := ReplaceAll(ls_stArea, 'AreaSOPTString', '8')
      else
  		  ls_stArea := ReplaceAll(ls_stArea, 'AreaSOPTString', '9');
			ls_stArea := ReplaceAll(ls_stArea, 'AreaSDebugString', En_Coding(lcsStaDebug));
			ls_stArea := ReplaceAll(ls_stArea, 'AreaSetTypeString', lcsStaCellSel);
			ls_stArea := ReplaceAll(ls_stArea, 'AreaKeywordString', En_Coding(lcsStaSchWord));
		  ls_stArea := ReplaceAll(ls_stArea, 'AreaIdString'     , lcsStaDocId);

			StrValue := '';
			ls_stArea := ReplaceAll(ls_stArea, 'Call2YNString', StrValue);

			// 기사 수수료 설정값 추가. 2010-11-03
			cxDriverCharge.Text := StringReplace(cxDriverCharge.Text,',','',[rfReplaceAll]);
			ls_stArea := StringReplace(ls_stArea,'DriverChString', cxDriverCharge.Text, [rfReplaceAll]);

			// 소요시간이 있을경우에만 전송
      if fTotalTime > 0 then   // 일반요금선택시 경탐거리는 사용안함 20211122 KHS 정경석차장 요청;
      begin
				ls_stArea := ReplaceAll(ls_stArea, 'EstTimeString', FloatToStr(fTotalTime));  // 소요시간
      end else
      begin
        ls_stArea := ReplaceAll(ls_stArea, 'EstTimeString', '0');  // 소요시간
      end;
      ls_stArea := ReplaceAll(ls_stArea, 'EstDistString', FloatToStr(fCruKm));      // 거리

      // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함 수도권 토성대리-A876 상담지사12-D615
      if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then
			begin
				ls_edArea := ReplaceAll(ls_edArea, 'edArea1String', '');
				ls_edArea := ReplaceAll(ls_edArea, 'edArea2String', '');
				ls_edArea := ReplaceAll(ls_edArea, 'edArea3String', '');
      end else
			begin
        ls_edArea := ReplaceAll(ls_edArea, 'edArea1String', En_Coding(Copy(lcsEnd1, 1, 2)));
        ls_edArea := ReplaceAll(ls_edArea, 'edArea2String', En_Coding(lcsEnd2));
        ls_edArea := ReplaceAll(ls_edArea, 'edArea3String', En_Coding(lcsEnd3));
			end;
			ls_edArea := ReplaceAll(ls_edArea, 'edArea4String', En_Coding(cxtEndAreaDetail.Caption));
      ls_edArea := ReplaceAll(ls_edArea, 'edArea5String', En_Coding(meoEndArea.Text));

      // 2006.07.24 도착지좌표 추가한다.
      if StrToFloatDef(cxtEndXval.Text, -1) = -1 then
      begin
        cxtEndXval.Text := '';
        gsEndGUIDEXval := '';
      end;
			if StrToFloatDef(cxtEndYval.Text, -1) = -1 then
      begin
        cxtEndYval.Text := '';
        gsEndGUIDEYval := '';
			end;

      ls_edArea := ReplaceAll(ls_edArea, 'edMapXString', cxtEndXval.Text);
      ls_edArea := ReplaceAll(ls_edArea, 'edMapYString', cxtEndYval.Text);
      ls_edArea := ReplaceAll(ls_edArea, 'AreaUPE', GS_Grid_DES); // 도착지선택값

      if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  		  ls_edArea := ReplaceAll(ls_edArea, 'AreaEOPTString', '8')
      else
	  	  ls_edArea := ReplaceAll(ls_edArea, 'AreaEOPTString', '9');
//-      Log('lcsEndDebug : ' + En_Coding(lcsEndDebug), LOGDATAPATHFILE);
			ls_edArea := ReplaceAll(ls_edArea, 'AreaEDebugString', En_Coding(lcsEndDebug));
			ls_edArea := ReplaceAll(ls_edArea, 'AreaSetTypeString', lcsEndCellSel);
			ls_edArea := ReplaceAll(ls_edArea, 'AreaKeywordString', En_Coding(lcsEndSchWord));
      ls_edArea := ReplaceAll(ls_edArea, 'AreaIdString'     , lcsEndDocId);

      ls_stArea_Tot := ls_stArea_Tot + ls_stArea;
      ls_edArea_Tot := ls_edArea_Tot + ls_edArea;
    end; // 단일 콜 완료

		lg_Save := '1';
		if (not IsGyeongNamShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)) then
		begin
			if (ss_Mode <> '4') and (ss_Mode <> 'S') and (ss_Mode <> 'Q') then //문의 , SMS수신거부
			begin
				//(/경유|경유/|(경유|경유)| 경유|경유 )
				if func_ViaCheck(meoStartArea.Text) and (GT_PASS_INFO[iFidx][0].AREA1 = '') then // 경유관련 문구 있음 and 경유지좌표 없음
				begin
					if pnl_ViaAlert_Title.Hint <> 'Skip' then
					begin
						grpBtm.Enabled := False; //다른입력 막음
						pnl_ViaAlert.Width := 410;
						pnl_ViaAlert_Title.Hint := ''; //Check, Skip 구분값
						pnl_ViaAlert.Hint := '';
						pnl_ViaAlert.Top := grpBtm.Top - pnl_ViaAlert.Height - 2;
						pnl_ViaAlert.Left := 1;
						pnl_ViaAlert.Hint := ss_Mode;
						pnl_ViaAlert.Visible := True;
						Proc_BtnEnabled(True);
						exit;
					end;
				end;
			end;
		end;

//--------------------------------------------------------------------------------------------
//  경유지 추가
//--------------------------------------------------------------------------------------------
		if GT_PASS_INFO[iFidx][0].AREA1 = '' then
		begin
      ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoCountString', '0');
			ls_ViaInto := lc_ViaInfoString;
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area1String', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area2String', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area3String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area4String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area5String', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapXString', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapYString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaUPV', '');  // 경유지선택값

      if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '8')
      else
		  	ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '9');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVDebugString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaSetTypeString', '');
			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaKeywordString', '');
      ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaIdString'     , '');
		end else
		begin
			lRow := 0;
			ls_ViaInto := '';
			while lRow <= 4 do
			begin
				if GT_PASS_INFO[iFidx][lRow].AREA1 = '' then
					break;
        ls_ViaInto := ls_ViaInto + lc_ViaInfoString;
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area1String', En_Coding(Copy(GT_PASS_INFO[iFidx][lRow].AREA1, 1, 2)));
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area2String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA2));
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area3String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA3));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area4String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA4));
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'Area5String', En_Coding(GT_PASS_INFO[iFidx][lRow].AREA5));
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapXString', GT_PASS_INFO[iFidx][lRow].MAP_X);
				ls_ViaInto := ReplaceAll(ls_ViaInto, 'MapYString', GT_PASS_INFO[iFidx][lRow].MAP_Y);
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaUPV', GS_Grid_VIA);  // 경유지선택값

        if GS_SEARCH_WISE_NAVER_COMPARE then  // POI통합 선택 8, 분리선택 9   2017.12.01 lyb
  	  		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '8')
        else
	    		ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVOPTString', '9');
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaVDebugString', '');
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaSetTypeString', GT_PASS_INFO[iFidx][lRow].CELLS);
  			ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaKeywordString', En_Coding(GT_PASS_INFO[iFidx][lRow].SWORD));
        ls_ViaInto := ReplaceAll(ls_ViaInto, 'AreaIdString'     , GT_PASS_INFO[iFidx][lRow].DOCID);
				inc(lRow);
      end;
			ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoCountString', IntToStr(lRow));
    end;

    // ------------------------------------------------------------------------
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'CidInfoString', ls_stCid);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ViaInfoString', ls_ViaInto);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'DepartInfoString', ls_stArea_Tot);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'DestInfoString', ls_edArea_Tot);

		// - 와이즈넛 검색어 실패/성공 여부 전송
    if GS_Grid_DEP <> 'C' then
    begin
      if GS_Grid_DEP = 'W' then sRespSParam1 := meoStartArea.Text
                           else sRespSParam1 := GS_Grid_DEP + '/' + meoStartArea.Text + '/' + cxtStartXval.Text + '/' + cxtStartYval.Text;

      sRespSParam2 := GS_Grid_DEP;
			sRespSParam3 := lcsStaCellSel;
    end;

    if ( GS_Grid_DES <> 'D' ) And ( GS_Grid_DES <> 'C' ) then
    begin
      if GS_Grid_DES = 'W' then sRespEParam1 := meoEndArea.Text
                           else sRespEParam1 := GS_Grid_DES + '/' + meoEndArea.Text + '/' + cxtEndXval.Text + '/' + cxtEndYval.Text;

      sRespEParam2 := GS_Grid_DES;
      sRespEParam3 := lcsEndCellSel;
    end;

    if ( ss_Mode = 'Q' ) then bQuestionSave := False;

    Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
    try
      Proc_JobAfterProc(True, True);

			if dm.SendSockAccept(ls_TxLoad, slRcvList, ErrCode, False, 15000, '접수') then
      begin
        rv_str := slRcvList[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
					proc_recieve(ls_rxxml);   // [hjf]
          if ('0000' = GetXmlErrorCode(ls_rxxml)) then Result := True;
          tmFormClose.Tag := 99; // 화면 닫기 설정값.
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
			if (btnCmdJoinCopy.Hint = 'JOINCOPY') or (btnCmdWaitCopy.Hint = 'JOINCOPY') Or (btnCmdQuestionCopy.Hint = 'JOINCOPY') then
				Proc_JobAfterProc(False, True)
			else
			begin
				//------> 화면의 Lock을 풀어준다. <--------
				grpBtm.Enabled := True;
				// 요청한 업무처리가 왼료 될때까지 접수화면의 모든 기능을 일시 정지 시킨다.
				Frm_Main.Frm_Jon012[Self.Tag].Enabled := True;
				//-------------------------------------

				GB_JON03SELECT_GB := True;

				// 서버요청후 지연 디버그 정보를 저장한다.
				if GS_DEBUG_MSG_J01 <> '' then
				begin
					GS_DEBUG_MSG_J01 := StringReplace(GS_DEBUG_MSG_J01, '!!$초과시간$!!', shaPrcMsg.Hint, [rfReplaceAll]);
					Assert(False, GS_DEBUG_MSG_J01);
				end;
			end;
			if (ss_Mode <> '4') And (ss_Mode <> 'Q') then
        tmrResponse.Enabled := True;  // 문의는 제외하고 처리
    end;

    delta := GetTickCount - startTick;
    if Delta > 300 then
    begin
      SetDebugeWrite(Format('JON01N[Proc_Save] Over = %d', [delta]));
    end;
  except
    on e: Exception do
    begin
      ls_ViaInto := 'JON01N[Proc_Save]오더저장:' + e.message;
      Log(ls_ViaInto, LOGDATADIRECTORY + 'Accept_Err.log');

      Assert(False, ls_ViaInto);

      Proc_BtnEnabled(True); // 버튼 활성/비활성 처리.
    end;
  end;
end;

function TFrm_JON01N.fGetCity(sGubun, sCity, sWard, sStree, sDep : String) : String;
Var i : Integer;
begin
	SetDebugeWrite('JON01N.fGetCity');
	Try
    if ( Trim(sCity) = '' ) And ( Trim(sWard) = '' ) And ( Trim(sStree) = '' ) then
    begin
      if sGubun = 'S' then Result := slstLocalMapOrder[0] else
      if sGubun = 'E' then
      begin
        if GS_LocalMapSET then Result := slstLocalMapOrder[0]
                          else Result := lcsSta1;
			end;
		end else
    if ( Trim(sCity) = '' ) And ( Trim(sWard) <> '' ) And ( Trim(sStree) <> '' ) then
    begin
      if GT_MAPOrigi.slStre.Count < 22000 then
      begin
        if sGubun = 'S' then Result := slstLocalMapOrder[0] else
        if sGubun = 'E' then
        begin
          if GS_LocalMapSET then Result := slstLocalMapOrder[0]
                            else Result := lcsSta1;
        end;
        Exit;
      end;

			for i := 0 to GT_MAPOrigi.slStre.Count - 1 do
			begin
				if (Copy(GT_MAPOrigi.slStre[i], 1, 3) = Copy(sStree, 1, 3)) and
           (Copy(GT_MAPOrigi.slWard[i], 1, 3) = Copy(sWard , 1, 3)) then
				begin
          if slstLocalMapOrder.IndexOf(GT_MAPOrigi.slCity[i]) < 0 then Continue;
					Result := GT_MAPOrigi.slCity[i];
					Assert(False, '[시도자동입력] 시도 :' + sCity + ' / 시군구 :' + sWard + ' / 읍면동 :' + sStree +
                        '[선택구분] : ' + GT_MAPOrigi.slCity[i] + '-' + GS_Grid_DEP + ' Count : ' + IntToStr(GT_MAPOrigi.slStre.Count));
					Break;
				end;
			end;
      if Result = '' then
      begin
        if sGubun = 'S' then Result := slstLocalMapOrder[0] else
        if sGubun = 'E' then
        begin
          if GS_LocalMapSET then Result := slstLocalMapOrder[0]
                            else Result := lcsSta1;
        end;
      end;
    end;
	except
    if sGubun = 'S' then Result := slstLocalMapOrder[0] else
    if sGubun = 'E' then
    begin
      if GS_LocalMapSET then Result := slstLocalMapOrder[0]
                        else Result := lcsSta1;
    end;
		Assert(False, '시도 조회 오류');
	end;
end;

function TFrm_JON01N.proc_Wisenut_GetTelPOILast(wURL, word: String): Boolean;
begin
	SetDebugeWrite('JON01N.proc_Wisenut_GetTelPOILast');
  Result := True;
  try
    try
      // 결과값이 없을 수도 있음
      if Trim(wURL) <> '' then
      begin
        if (Pos('"SearchQueryResult": "0"', wURL) = 0 ) And
           (Pos('"Collection"'            , wURL) > 0 ) And
           (Pos('"Error":{'               , wURL) = 0 ) then
        begin
					proc_Wisenut_GetTelPOI_Proc(wURL, word);
        end;
      end;
    except
      on E: Exception do
      begin
        Result := False;
      end;
    end;
  finally
  end;
end;

function TFrm_JON01N.proc_Wisenut_GetTelPOI_Proc(wURL, word: string): Boolean;
var
  js : TlkJSONobject;
  ja, jCnt  : TlkJSONlist;

  j, i : Integer;
  str, sx, sy, sGX, sGY, sPOI, sKm, sRCity : string;
  AGugun, ADong, sCnt, AName, ARi, ADocId, AStreet, AStreetNm, AStreetType : string;
  slTmp : TStringList;
begin
  SetDebugeWrite('JON01N.proc_Wisenut_GetTelPOI_Proc');
  Result := False;
  try
    slTmp := TStringList.Create;
    try
      js := TlkJSON.ParseText(wURL) as TlkJSONobject;

      if js.Field['Session'].Value = sTelRanDom then
      begin
        Result := True;
        sTelRanDom := '';
        jCnt := js.Field['SearchQueryResult'].Field['Collection'] as TlkJSONlist;

        for j := 0 to jCnt.Count - 1 do
        begin
          sCnt := jCnt.Child[j].Field['DocumentSet'].Field['Count'].Value;

          if strToIntDef(sCnt, 0) > 0 then
          begin
            ja := jCnt.Child[j].Field['DocumentSet'].Field['Document'] as TlkJSONlist;

            if ja.Count <= 0 then Exit;

            for i := 0 to ja.Count - 1 do
            begin
              slTmp.Delimiter     := ' ';
              slTmp.DelimitedText := Frm_JON30.D_HightlightTXT(ja.Child[i].Field['Field'].Field['ADDRESS'].Value);
              sy      := '';
              sx      := '';
              sGY     := '';
              sGX     := '';
              sPOI    := '';
              sRCity  := '';
              AGugun  := '';
              ADong   := '';
              AStreet := '';
              AStreetNm := '';
              AStreetType  := '';
              AName   := '';
              ADocId  := '';
              if slTmp.Count >= 1 then
              begin
                try
                  sy  := getWGS84(FormatFloat('0.000000', ja.Child[i].Field['Field'].Field['LON'].Value));  // x 좌표
                  sx  := '0'+ getWGS84(FormatFloat('0.000000', ja.Child[i].Field['Field'].Field['LAT'].Value));  // y 좌표
                  try
                    sGY := getWGS84(FormatFloat('0.000000', ja.Child[i].Field['Field'].Field['GUIDE_LON'].Value));  // x 좌표
                  except
                    sGY := '';
                  end;

                  Try
                    sGX := '0'+ getWGS84(FormatFloat('0.000000', ja.Child[i].Field['Field'].Field['GUIDE_LAT'].Value));  // y 좌표
                  except
                    sGX := '';
                  End;

                  lcsStaDocId := ja.Child[i].Field['Field'].Field['DOCID'].Value;

                  if jCnt.Child[j].Field['Id'].Value = 'phones' then
                  begin
                    AName := ja.Child[i].Field['Field'].Field['POI'].Value;
                  end else
                  begin
                    Exit;
                  end;

                  Frm_JON30.proc_WGSToBessel(False, slTmp[0], sx, sy, sRCity, sKm);
                Except
                  sy := '';
                  sx := '';
                  sGY := '';
                  sGX := '';
                  AName := '';
                  sPoi := '';
                end;
              end;

              gJONStaChkXY.Area1 := sRCity;
              lcsSta1 := sRCity;

              if fSejongCheck(slTmp[0]) then  // 20121206 LYB 추가
              begin
                if ((copy(Frm_JON30.D_HightlightTXT(slTmp[1]),length(Frm_JON30.D_HightlightTXT(slTmp[1])), 1) = '면')
                 or (copy(Frm_JON30.D_HightlightTXT(slTmp[1]),length(Frm_JON30.D_HightlightTXT(slTmp[1])), 1) = '읍')) then
                begin
                  gJONStaChkXY.Area2 := '세종시';// 세종시 읍면
                  gJONStaChkXY.Area3 := slTmp[1] + slTmp[2];// 리

                  lcsSta2 := '세종시';
                  lcsSta3 := slTmp[1] + slTmp[2];// 리
                end else
                begin
                  gJONStaChkXY.Area2 := '세종시';
                  gJONStaChkXY.Area3 := slTmp[1]; //동

                  lcsSta2 := '세종시';
                  lcsSta3 := slTmp[1]; //동
                end;
              end else
              begin
                gJONStaChkXY.Area2 := slTmp[1];//시군고
                gJONStaChkXY.Area3 := slTmp[2];//읍면동

                lcsSta2 := slTmp[1];//시군고
                lcsSta3 := slTmp[2];//읍면동
              end;

              if slTmp.Count > 3 then
              begin
                if ((copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '구')
                 or (copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '시')
                 or (copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '군')) then
                begin
                  gJONStaChkXY.Area2 := slTmp[1]+slTmp[2];//시군고
                  gJONStaChkXY.Area3 := slTmp[3];//읍면동

                  lcsSta2 := slTmp[1]+slTmp[2];//시군고
                  lcsSta3 := slTmp[3];//읍면동
                end else
                if ((copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '읍')
                 or (copy(Frm_JON30.D_HightlightTXT(slTmp[2]),length(Frm_JON30.D_HightlightTXT(slTmp[2])), 1) = '면')) then
                begin
                  gJONStaChkXY.Area2:= slTmp[1];
                  gJONStaChkXY.Area3 := slTmp[2] + slTmp[3];

                  lcsSta2:= slTmp[1];
                  lcsSta3 := slTmp[2] + slTmp[3];
                end;

                if slTmp.Count = 5 then
                begin
                  gJONStaChkXY.Area3 := gJONStaChkXY.Area3 + slTmp[4];
                  lcsSta3 := lcsSta3 + slTmp[4];
                end;
              end;

              if ( GS_Grid_DEP = 'A' ) Or ( GS_Grid_DEP = 'H' ) then
              begin
                PnlKTPOIYN.BringToFront;
                PnlKTPOIYN.Visible := True;

                TmplcsSta1 := lcsSta1;
                TmplcsSta2 := lcsSta2;
                TmplcsSta3 := lcsSta3;
                TmplcsSta4 := AName;
                TmplcsSta5 := AName;
                TmplcsX := sx;
                tmplcsY := sy;
                TmpDef := 'K';
              end else
              begin
                gJONStaChkXY.Area4 := AName;
                gJONStaChkXY.Area5 := AName;
                gJONStaChkXY.X := sx;
                gJONStaChkXY.Y := sy;
                gJONStaChkXY.GUIDE_X := sGx;
                gJONStaChkXY.GUIDE_Y := sGy;

                lcsSta4 := AName;

                lblStartAreaName.Text := lcsSta1 + ' ' + lcsSta2 + ' ' + lcsSta3;
                SetDebugeWrite('JON01N.lblStartAreaName.Text 11044 : ' + lblStartAreaName.Text);
                meoStartArea.Text := AName;
                cxtStartAreaDetail.Text := AName;
                lcsConfAREA4            := AName;
                cxtStartXval.Text := sx;
                cxtStartYval.Text := sy;
                gsStartGUIDEXval := sGx;
                gsStartGUIDEYval := sGy;

                gJONStaChkXY.Gubun := 'K';
                GS_Grid_DEP := 'K';   //KT전화번호 선택
              end;
             end;
          end;
        end;
      end;
    except
      on e: exception do
      begin
        Log('proc_Wisenut_GetTelPOI_Proc Error :' + wURL, LOGDATAPATHFILE);
        Assert(False, 'proc_Wisenut_GetTelPOI_Proc Error :' + wURL);
      end;
    end;
  finally
    js.Free;
    FreeAndNil(slTmp);
  end;
end;

procedure TFrm_JON01N.proc_WiseNut_Response( sPoiName, sGubun, sNo : String );
var
  sHttp : String;
  sYesNo, sViewCnt, sCenterLat, sCenterLon, sSAPoiName, sFixParam, sRanDom, sSF : String;
  JON01WNTh : TJON01WNThread;
begin
  SetDebugeWrite('JON01N.proc_WiseNut_Response');
  try
    sRanDom := 'bcde' + IntToStr(RandomRange(10000, 20000));

    if GS_SEARCH_POISVR_SPOIUSE then sYesNo := '0' else sYesNo := '1';
    if GS_PRJ_AREA = 'S' then sViewCnt := '40' else sViewCnt := '100';

    sFixParam := '&region=' + UrlEncode(UTF8Encode(GS_SEARCH_POI_ADDR)) + '&recRegion=' + UrlEncode(UTF8Encode(GS_SEARCH_POI_SCH));

    sSAPoiName := UrlEncode(UTF8Encode(trim(sPoiName)));

    sFixParam := sFixParam + '&fixAddress=SKIP&fixSPOI=SKIP&fixLAT=&fixLON=';

    sCenterLat := Area_CenterLat;
    sCenterLon := Area_CenterLon;

    if sGubun = 'W' then sSF := 'S'
                    else sSF := 'F';

    if sNo = 'A' then sNo := '1';

    sHttp := 'http://' + GS_PoiServerIP + ':8080/jway/search.jsp?query='+ UrlEncode(UTF8Encode(trim(sPoiName))) +'&lat=' + Frm_JON30.SetWGS84(sCenterLat) + '&lon=' + Frm_JON30.SetWGS84(sCenterLon) + '&startCount=0&viewCount=' + sViewCnt + '&session=' + sRanDom + '&ignoreSPOI=' + sYesNo + sFixParam;

    sHttp := sHttp + '&noresp=' + sSF + '&usedId=' + UrlEncode(UTF8Encode(trim(sPoiName))) + '&usedRank=' + sNo;

    if GS_SEARCH_NO_RI then sHttp := sHttp + '&ignoreAddressDetail=1'
                       else sHttp := sHttp + '&ignoreAddressDetail=0';

    try
      JON01WNTh := TJON01WNThread.Create(Self.Tag, 2, sHttp, '', sRanDom);
      JON01WNTh.FreeOnTerminate := False;
    except
    end
  except on E: Exception do
    begin
      Assert(False, 'proc_WiseNut_Response Error : ' + E.Message);
    end;
  end;
end;

procedure TFrm_JON01N.proc_CaActiveComplete;
begin
  try
    RealKmPtr_th1[Self.Tag].CaActive := False;
    RealKmPtr_th2[Self.Tag].CaActive := False;
    RealKmPtr_th3[Self.Tag].CaActive := False;
    RealKmPtr_th4[Self.Tag].CaActive := False;
  except
  end;
end;

procedure TFrm_JON01N.proc_CallMartJon01(ACALLMART: TCALLMART);
var aKey : word;
	iCnt : Integer;
begin
	SetDebugeWrite('JON01N.proc_CallMartJon01');
	Try
		if Assigned(Frm_JON30) then
		begin
			Frm_JON30.Tag := Self.Tag;
		end; 
		aKey := Ord('V');
		//출발지 붙혀넣기
		gbSCtrlV := True; 
		lcsActiveEdit := 'meoStartArea';  
		sActieEdit := 'meoStartArea';
		meoStartArea.Text := ACALLMART.c1;
		gbPasteEnd := False;
		meoStartAreaKeyUp(meoStartArea, aKey, [ssCtrl]);
		iCnt := 0;
		while not gbPasteEnd do
		begin
			if iCnt > 5 then Break;
			sleep(1000);
			Application.ProcessMessages;
			inc(iCnt);
		end;
		gbSCtrlV := False;
	
		//도착지 붙혀넣기
		gbECtrlV := True; 
		lcsActiveEdit := 'meoEndArea';  
		sActieEdit := 'meoEndArea';
		gbPasteEnd := False;
		meoEndArea.Text := ACALLMART.d1;
		meoEndAreaKeyUp(meoEndArea, aKey, [ssCtrl]);   
		iCnt := 0;
		while not gbPasteEnd do
		begin
			if iCnt > 5 then Break;
			sleep(1000);
			Application.ProcessMessages;
			inc(iCnt);
		end;
		gbECtrlV := False; 

		//경유지1
		if ACALLMART.e1 <> '' then
		begin
			lcsActiveEdit := 'meoViaArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
			BtnViaAddClick(cxLabel19);
			gbVCtrlV := True;
			gbPasteEnd := False;
			meoViaArea1.Text := ACALLMART.e1;
			meoViaArea1KeyUp(meoViaArea1, aKey, [ssCtrl]);

			iCnt := 0;
			while not gbPasteEnd do
			begin
				if iCnt > 5 then Break;
				sleep(1000);
				Application.ProcessMessages;
				inc(iCnt);
			end;
			gbVCtrlV := False;
		end;
	
		//경유지2
		if ACALLMART.f1 <> '' then
		begin
			lcsActiveEdit := 'meoViaArea'; // 활성화 된 출발지, 도착지 Edit 구분을 저장.
			BtnViaAddClick(cxLabel19);
			gbVCtrlV := True;
			gbPasteEnd := False;
			if ACALLMART.e1 = '' then
			begin
				meoViaArea1.Text := ACALLMART.f1;
				meoViaArea1KeyUp(meoViaArea1, aKey, [ssCtrl]);
			end else
			begin
				meoViaArea[ViaADDTag].Text := ACALLMART.f1;
				meoViaArea1KeyUp(meoViaArea[ViaADDTag], aKey, [ssCtrl]);
			end;
			iCnt := 0;
			while not gbPasteEnd do
			begin
				if iCnt > 5 then Break;
				sleep(1000);
				Application.ProcessMessages;
				inc(iCnt);
			end;
			gbVCtrlV := False;
		end;
		img_SpeechBubble.Visible := False;
		curRate.SetFocus;
		curRate.Text := gCALLMART.g1;
		SetPayMethod(Trim(gCALLMART.g2));
		meoBigo.SetFocus;
		meoBigo.Text  := gCALLMART.h1;
		meoBigo2.SetFocus;
		meoBigo2.Text := gCALLMART.h2;
		meoBigo3.SetFocus;
		meoBigo3.Text := gCALLMART.h3;
		//내용복사 완료
		gbCallMartFileJON01 := False;
//		gCALLMARTClear;
	except
		gbCallMartFileJON01 := False;
  End;
end;

procedure TFrm_JON01N.CheckResvDateTime( bView : Boolean );
Var TimeGap : Int64;
begin
  SetDebugeWrite('JON01N.CheckResvDateTime');

  if grpReserv.Visible then
  begin
    TimeGap := GetTimeGap(FormatDateTime('YYYYMMDDHHNN00', Now), StringReplace(dtpResvDate.Text, '-', '', [rfReplaceAll]) + StringReplace(dtpResvTime.Text, ':', '', [rfReplaceAll])+ '00');

    if TimeGap < 0 then
    begin
      if bView then
        GMessagebox('과거날짜로는 예약할 수 없습니다.', CDMSE);

      dtpResvDate.Text := FormatDateTime('YYYY-MM-DD', Date); // 예약일자
      dtpResvTime.Text := FormatDateTime('AM/PM hh:mm:ss', Now + ((1 / 24 / 60) * 10)); // 예약시간

      dtpResvDateJ.Text := dtpResvDate.Text;
      dtpResvTimeJ.Text := dtpResvTime.Text;

      CbSecond.ItemIndex := 0;
    end;
    fGetDiffDay( StringReplace(dtpResvDate.Text, '-', '', [rfReplaceAll]) + StringReplace(dtpResvTime.Text, ':', '', [rfReplaceAll])+ '00' );
  end;
end;

function TFrm_JON01N.GetTimeGap(StrStartDate, StrEndDate: string): Int64;
    function StrDateTime2SystemTime(StrDateTime : string) : TSystemTime;
    var SystemTime : TSystemTime;
    begin
        ZeroMemory(@SystemTime, sizeof(SystemTime));
        SystemTime.wYear := StrToInt(Copy(StrDateTime, 1, 4));
        SystemTime.wMonth := StrToInt(Copy(StrDateTime, 5, 2));
        SystemTime.wDay := StrToInt(Copy(StrDateTime, 7, 2));
        SystemTime.wHour := StrToInt(Copy(StrDateTime, 9, 2));
        SystemTime.wMinute := StrToInt(Copy(StrDateTime, 11, 2));
        SystemTime.wSecond := StrToInt(Copy(StrDateTime, 13, 2));
        SystemTime.wMilliseconds := 0;
        Result := SystemTime;
    end;
var StartSysTime : TSystemTime;
    EndSysTime : TSystemTime;

    TimeGap : Int64;
begin
	try
		SetDebugeWrite('JON01N.GetTimeGap');

		if ( Trim(StrStartDate) <> '' ) And ( Trim(StrEndDate) <> '' ) then
		begin
      StartSysTime := StrDateTime2SystemTime(StrStartDate);
      EndSysTime := StrDateTime2SystemTime(StrEndDate);

      TimeGap := DateTimeToUnix(SystemTimeToDateTime(EndSysTime)) -
                 DateTimeToUnix(SystemTimeToDateTime(StartSysTime));

			Result := TimeGap;
		end else
    begin
      Result := 0;
    end;
  except on E: Exception do
    Assert(False, Format('GetTimeGap Error - %s - %s :', [Trim(StrStartDate), Trim(StrEndDate)]) + E.Message);
  end;
end;

function TFrm_JON01N.fGetDiffDay( sEndDate : String ) : String;
Var TimeGap : Int64;
    sDate, sStat : String;
begin
  SetDebugeWrite('JON01N.fGetDiffDay');
  try
    TimeGap := GetTimeGap(FormatDateTime('YYYYMMDDHHNN00', Now), sEndDate);

    if Trunc(TimeGap / 86400) <> 0 then
      sDate := Format('%d일 %d시간 %d분',[
               Trunc(TimeGap / 86400),
               Trunc(( TimeGap mod 86400 ) / 3600),
               Trunc((( TimeGap mod 86400 ) mod 3600) / 60)
       ])
    else
    begin
      if Trunc(( TimeGap mod 86400 ) / 3600) <> 0 then
        sDate := Format('%d시간 %d분',[
                 Trunc(( TimeGap mod 86400 ) / 3600),
                 Trunc((( TimeGap mod 86400 ) mod 3600) / 60)
         ])
      else
        sDate := Format('%d분',[
                 Trunc((( TimeGap mod 86400 ) mod 3600) / 60)
         ])
    end;

    if BtnResJ.Tag = 1 then
    begin
      sStat := '접수';
      cxlblResvG.Caption := '접수일시';
    end else
    if BtnResD.Tag = 1 then
    begin
      sStat := '대기';
      cxlblResvG.Caption := '대기일시';
    end;

    cxlblState.Caption := Format('[%s] 후에 [%s] 상태로 예약.', [sDate, sStat]);

    Result := '';
  Except
    Result := '';
  end;
end;

procedure TFrm_JON01N.pSetLockMent( gubun : Integer );
begin
	tmLockMent.Enabled := False;

  if gubun = 1 then  // 출발지
  begin
		lb_LockMent.Caption := '출발지가 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
		imgLockMent.Visible := True;
		lb_LockMent.Font.Color := clWhite;
		imgLockMent.left := 298;
		pnl_LockMent.Top := grpStartArea.Top - pnl_LockMent.Height;
		pnl_LockMent.Left := 37;
    pnl_LockMent.Width := 532;
		pnl_LockMent.Color := clRed;
  end else
  if gubun = 2 then  // 도착지
  begin
    lb_LockMent.Caption := '도착지가 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
    imgLockMent.Visible := True;
    lb_LockMent.Font.Color := clWhite;
    imgLockMent.left := 298;
    pnl_LockMent.Top := pnlBody.Top - pnl_LockMent.Height;
    pnl_LockMent.Left := 37;
    pnl_LockMent.Width := 532;
    pnl_LockMent.Color := clRed;
  end else
  if gubun = 3 then  // 요금
  begin
    lb_LockMent.Caption := '요금항목이 잠겨있습니다. 잠금(   )을 풀고 입력하세요';
    imgLockMent.Visible := True;
    lb_LockMent.Font.Color := clYellow;
    imgLockMent.left := 329;
    pnl_LockMent.Top := pnlBody.Top + grpEndArea.Height + shpTop5.Height + 80;
    pnl_LockMent.Left := 2;
    pnl_LockMent.Width := 567;
    pnl_LockMent.Color := clBlack;
  end;
  pnl_LockMent.BringToFront;
  if not pnl_LockMent.Visible then pnl_LockMent.Visible := True;

  tmLockMent.Interval := 2000;
  tmLockMent.Enabled := True;
  BtnRaLock.Tag := 99; //한번 알림 뜨면 다시는 안뜨게 함.
end;

procedure TFrm_JON01N.pClearModifyInfo;
begin
  FModifyLoadInfo.Hp           := '';
  FModifyLoadInfo.Conf_Area    := '';
  FModifyLoadInfo.Conf_Area2   := '';
  FModifyLoadInfo.Conf_Area3   := '';
  FModifyLoadInfo.Conf_Area4   := '';
  FModifyLoadInfo.Conf_Area5   := '';
  FModifyLoadInfo.Conf_X       := '';
  FModifyLoadInfo.Conf_Y       := '';

  FModifyLoadInfo.Conf_EdArea  := '';
  FModifyLoadInfo.Conf_EdArea2 := '';
  FModifyLoadInfo.Conf_EdArea3 := '';
  FModifyLoadInfo.Conf_EdArea4 := '';
  FModifyLoadInfo.Conf_EdArea5 := '';
  FModifyLoadInfo.Dest_X       := '';
  FModifyLoadInfo.Dest_Y       := '';

  FModifyLoadInfo.Conf_Charge  := '';

  FModifyLoadInfo.Conf_Info    := '';
  FModifyLoadInfo.Pay_Method   := '';
  FModifyLoadInfo.Post_Charge  := '';
  FModifyLoadInfo.Card_Pay_Seq := '';
  FModifyLoadInfo.Up_Id        := '';
  FModifyLoadInfo.Status       := '';
end;

function TFrm_JON01N.pCheck_Modify(iType : Integer; sSlip : String) : Boolean;
var
	ls_TxLoad, ls_TxQry, ls_Msg_Err, sQueryTemp, ls_rxxml, sAlert : string;
  slReceive: TStringList;
  ErrCode: integer;
  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  ls_Rcrd: TStringList;
  bCheck : Boolean;
begin
	Result := False;
  bCheck := False;

  ls_TxLoad := GTx_UnitXmlLoad('SEL01.XML');
  fGet_BlowFish_Query(GSQ_COMPARE_MODIFY, sQueryTemp);
  ls_TxQry := Format(sQueryTemp, [sSlip]);
  ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
  ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
  ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'MODIFYCHECK', [rfReplaceAll]);
  ls_TxLoad := StringReplace(ls_TxLoad, 'QueryString', ls_TxQry, [rfReplaceAll]);

  slReceive := TStringList.Create;
  try
    if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
    begin
      ls_rxxml := slReceive[0];
      if ls_rxxml <> '' then
      begin
        xdom := ComsDomDocument.Create;
        try
          if not xdom.loadXML(ls_rxxml) then Exit;
          ls_MSG_Err := GetXmlErrorCode(ls_rxxml);
          if ('0000' = ls_MSG_Err) then
          begin
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
            ls_Rcrd := TStringList.Create;
            try
              if Trim(lst_Result.item[0].attributes.getNamedItem('Value').Text) = '' then
              begin
                Result := True;
                Exit;
              end;
              GetTextSeperationEx2('│', lst_Result.item[0].attributes.getNamedItem('Value').Text, ls_Rcrd);

              if iType = 1 then
              begin
                if ls_Rcrd[00] <> FModifyLoadInfo.Hp then
                begin
                  bCheck := True;
                  sAlert := Format('▶전화번호 : (본인)%s -> (현재)%s', [FModifyLoadInfo.Hp, ls_Rcrd[00]]);
                end;

                if (Trim(ls_Rcrd[01]) <> Trim(FModifyLoadInfo.Conf_Area )) Or
                   (Trim(ls_Rcrd[02]) <> Trim(FModifyLoadInfo.Conf_Area2)) Or
                   (Trim(ls_Rcrd[03]) <> Trim(FModifyLoadInfo.Conf_Area3)) Or
                   (Trim(ls_Rcrd[04]) <> Trim(FModifyLoadInfo.Conf_Area4)) Or
                   (Trim(ls_Rcrd[05]) <> Trim(FModifyLoadInfo.Conf_Area5)) Or
                   (Trim(ls_Rcrd[06]) <> Trim(FModifyLoadInfo.Conf_X    )) Or
                   (Trim(ls_Rcrd[07]) <> Trim(FModifyLoadInfo.Conf_Y    )) then
                begin
                  if Trim(sAlert) <> '' then sAlert := sAlert + CRLF+CRLF;
                  bCheck := True;
                  sAlert := sAlert + Format('▶출발지: (본인)%s %s %s %s ' + CRLF +
                                            '        -> (현재)%s %s %s %s'
                                         , [FModifyLoadInfo.Conf_Area
                                          , FModifyLoadInfo.Conf_Area2
                                          , FModifyLoadInfo.Conf_Area3
                                          , FModifyLoadInfo.Conf_Area5
                                          , ls_Rcrd[01], ls_Rcrd[02], ls_Rcrd[03], ls_Rcrd[05]]);
                end;

                if (Trim(ls_Rcrd[08]) <> Trim(FModifyLoadInfo.Conf_EdArea )) Or
                   (Trim(ls_Rcrd[09]) <> Trim(FModifyLoadInfo.Conf_EdArea2)) Or
                   (Trim(ls_Rcrd[10]) <> Trim(FModifyLoadInfo.Conf_EdArea3)) Or
                   (Trim(ls_Rcrd[11]) <> Trim(FModifyLoadInfo.Conf_EdArea4)) Or
                   (Trim(ls_Rcrd[12]) <> Trim(FModifyLoadInfo.Conf_EdArea5)) Or
                   (Trim(ls_Rcrd[13]) <> Trim(FModifyLoadInfo.Dest_X      )) Or
                   (Trim(ls_Rcrd[14]) <> Trim(FModifyLoadInfo.Dest_Y      )) then
                begin
                  if Trim(sAlert) <> '' then sAlert := sAlert + CRLF+CRLF;
                  bCheck := True;
                  sAlert := sAlert + Format('▶도착지 : (본인)%s %s %s %s ' + CRLF +
                                            '         -> (현재)%s %s %s %s'
                                          , [FModifyLoadInfo.Conf_EdArea
                                          , FModifyLoadInfo.Conf_EdArea2
                                          , FModifyLoadInfo.Conf_EdArea3
                                          , FModifyLoadInfo.Conf_EdArea5
                                          , ls_Rcrd[08], ls_Rcrd[09], ls_Rcrd[10], ls_Rcrd[12]]);
                end;

                if ( ls_Rcrd[15] <> FModifyLoadInfo.Conf_Charge  ) then
                begin
                  if Trim(sAlert) <> '' then sAlert := sAlert + CRLF+CRLF;
                  bCheck := True;

                  sAlert := sAlert + Format('▶요금 : (본인)%s -> (현재)%s ', [FModifyLoadInfo.Conf_Charge, ls_Rcrd[15]]);
                end;

                if ( ls_Rcrd[17] <> FModifyLoadInfo.Pay_Method   ) then
                begin
                  if Trim(sAlert) <> '' then sAlert := sAlert + CRLF+CRLF;
                  bCheck := True;

                  sAlert := sAlert + Format('▶결제구분 : (본인)%s -> (현재)%s '
                                          , [getPaymethodName(FModifyLoadInfo.Pay_Method)
                                          , getPaymethodName(ls_Rcrd[17])]);
                end;

//                if ( ls_Rcrd[18] <> FModifyLoadInfo.Post_Charge  ) then
//                begin
//                  if Trim(sAlert) <> '' then sAlert := sAlert + CRLF+CRLF;
//                  bCheck := True;
//
//                  sAlert := sAlert + Format('▶후불금액 : %s -> %s ', [FModifyLoadInfo.Conf_Charge, ls_Rcrd[15]]);
//                end;

                if Trim(ls_Rcrd[16]) <> Trim(FModifyLoadInfo.Conf_Info) then
                begin
                  if Trim(sAlert) <> '' then sAlert := sAlert + CRLF+CRLF;
                  bCheck := True;

                  sAlert := sAlert + Format('▶적요 : (본인)%s ' + CRLF +
                                            '       -> (현재)%s ', [FModifyLoadInfo.Conf_Info, ls_Rcrd[16]]);
                end;

                if bCheck then
                begin
                  sAlert := '다른 사람이 수정한 내역이 있습니다.' + CRLF
                          + '그래도 수정하시겠습니까?' + CRLF + CRLF
                          + sAlert;

                  if Application.MessageBox(PChar(sAlert), PChar(GS_APPNAME), MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
                  begin
                    Exit;
                  end;
                end;
              end else
              if iType = 2 then     // 카드 승인 여부 확인
              begin
                // 19.TRAN_NO, 20.APPR_NO, 21.CHARGE, 22.STATUS, 23.IN_ID, 24.승인일시, 25.일련번호
                if ( ls_Rcrd[19] <> '' ) And ( ls_Rcrd[22] = 'P8' ) then
                begin
                  sAlert := '접수 내역에 카드 선결제 내역이 있습니다.' + CRLF + CRLF
                          + Format('  결제일련번호 : %s ', [ls_Rcrd[25]]) + CRLF
                          + Format('  결제거래번호 : %s ', [ls_Rcrd[19]]) + CRLF
//                          + Format('  카드승인번호 : %s ', [ls_Rcrd[20]]) + CRLF
                          + Format('  결제승인요금 : %s ', [ls_Rcrd[21]]) + CRLF
                          + Format('  결제승인일시 : %s ', [ls_Rcrd[24]]) + CRLF
                          + Format('  결제승인ID : %s ', [ls_Rcrd[23]]) + CRLF + CRLF
                          + '수정창 종료후 다시 조회 바랍니다.';
                  GMessagebox(PChar(sAlert), CDMSE);
                  Exit;
                end;
              end;
            finally
              ls_Rcrd.Free;
            end;
          end;
        finally
          xdom := Nil;
        end;
      end;
    end;
  finally
    FreeAndNil(slReceive);
  end;
  Result := True;
end;

procedure TFrm_JON01N.proc_AutoSetEtc1;
var sTmp, sBigo, sFix : string;
begin
	SetDebugeWrite('JON01N.proc_AutoSetEtc1');
	try
		if (Pos('수정', Self.Caption) > 0 ) then exit;

		if gJONAcceptMemo.Use then
			sBigo := gJONAcceptMemo.Memo + ' ';

		sTmp := Proc_BRNOSearch;
		if sTmp <> '' then
		begin
  		sFix := '전구간 2,000원 무조건 할인한 요금을 받으세요....^^';
      if (GS_PRJ_AREA = 'O') and ((sTmp = 'Z892') or (sTmp = 'Z894') or (sTmp = 'Z721') or (sTmp = 'Z714') or
                                  (sTmp = 'Z723') or (sTmp = 'Z861') or (sTmp = 'Z720') or (sTmp = 'Z878') Or
																	(sTmp = 'Z724') or (sTmp = 'Z781') or (sTmp = 'Z774') or (sTmp = 'K172')) then
			begin
				if Trim(sBigo) <> '' then meoBigo.text := sBigo + sFix else meoBigo.text := sFix;
			end else

      meoBigo.text := sBigo;
		end;
	except
	end;
end;

procedure TFrm_JON01N.plbl_00Click(Sender: TObject);
var wStr : string;
    i : Integer;
begin
	SetDebugeWrite('JON01N.cb_00Click');
  try
  	wStr := meoStartArea.Text;
    if TcxLabel(Sender).Tag = 1 then
    begin
			if TcxLabel(Sender).Caption = '탁송' then
			begin
				if lbl_06.Tag = 1 then
				begin
					lbl_06.Tag := 0;
          pSetLabelClick(lbl_06);
					i := Pos('탁확)', wStr);
					if i = 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁확)'), Length(widestring(wStr)) - Length(widestring('탁확)')));
						sTakHwak := 'n';
					end else
					if i > 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁확)') , Length(widestring(wStr)) - i);
						sTakHwak := 'n';
					end else
						sTakHwak := 'n';

					SetMunuChecked('탁확', False);
				end;

				grpWkLicType.Visible := False;
				if Pos('탁송)', wStr) < 1 then
					AddSpop('탁송기사만', 11);
				sTaksong := 'y';
				SetMunuChecked('탁', True);
			end else
			if TcxLabel(Sender).Caption = '탁송확장' then
			begin
				if lbl_00.Tag = 1 then
				begin
					lbl_00.Tag := 0;
					sTaksong := 'n';//탁송연합콜 관련 수정 20210208KLHS
          pSetLabelClick(lbl_00);
					i := Pos('탁송)', wStr);
					if i = 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁송)'), Length(widestring(wStr)) - Length(widestring('탁송)')));
					end else
					if i > 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁송)') , Length(widestring(wStr)) - i);
					end;

					SetMunuChecked('탁', False);
				end else
				if lblTakAlly.Tag = 1 then
				begin
					lblTakAlly.Tag := 0;
					sTaksong := 'n';
					pSetLabelClick(lblTakAlly);
					i := Pos('탁송)', wStr);
					if i = 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁송)'), Length(widestring(wStr)) - Length(widestring('탁송)')));
					end else
					if i > 1 then
					begin
						meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁송)') , Length(widestring(wStr)) - i);
					end;

					SetMunuChecked('탁', False);
				end;
				if Pos('수정', Self.Caption) > 0 then
				begin
					Try
						cbbLicType.ItemIndex := cbbLicType.Properties.Items.IndexOf(GetLicTypeValue(sLicType));
					Except
						cbbLicType.ItemIndex := -1;
          End;
				end
				else
					if cbbLicType.ItemIndex = 3 then cbbLicType.ItemIndex := 0;

      	grpWkLicType.Left := 83;
    	  grpWkLicType.Top  := grpStartArea.Top + grpStartArea.Height;
        grpWkLicType.BringToFront;
				grpWkLicType.Visible := True;
				if Pos('탁확)', wStr) < 1 then
					AddSpop('탁송확대기사만', 18);
				sTakHwak := 'y';
				SetMunuChecked('탁확', True);
			end else
			if TcxLabel(Sender).Caption = '정장' then
      begin
        if Pos('정장)', wStr) < 1 then
          AddSpop('정장기사만', 12);
        SetMunuChecked('정', True);
      end else
      if TcxLabel(Sender).Caption = '경유' then
      begin
        if Pos('경유)', wStr) < 1 then
          AddSpop('경유있음', 13);
        SetMunuChecked('경', True);
      end else
      if TcxLabel(Sender).Caption = '적요' then
      begin
        if Pos('적요)', wStr) < 1 then
          AddSpop('적요있음', 14);
        SetMunuChecked('적', True);
      end else
      if TcxLabel(Sender).Caption = '스틱' then
      begin
        if Pos('스틱)', wStr) < 1 then
          AddSpop('스틱기사만', 15);
  			sStickCall := 'y';
        SetMunuChecked('스', True);
      end else
      if TcxLabel(Sender).Caption = '킥보드x' then
      begin
        if Pos('킥보드x)', wStr) < 1 then
          AddSpop('킥보드x', 16);
        SetMunuChecked('킥', True);
      end else
      if TcxLabel(Sender).Caption = '비흡연' then
      begin
        if Pos('비흡연)', wStr) < 1 then
          AddSpop('비흡연', 17);
        SetMunuChecked('비', True);
      end else
      if TcxLabel(Sender).Caption = Copy(Trim(GS_USERSELECT), 1, 1) then
      begin
        if Pos(Trim(GS_USERSELECT) + ')', wStr) < 1 then
					AddSpop(Trim(GS_USERSELECT1), 19);
				SetMunuChecked(Copy(Trim(GS_USERSELECT), 1, 1), True);
      end;
    end else
    begin
			if TcxLabel(Sender).Caption = '탁송' then
			begin
				grpWkLicType.Visible := False;
				i := Pos('탁송)', wStr);
				if i = 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁송)'), Length(widestring(wStr)) - Length(widestring('탁송)')));
					sTaksong := 'n';
				end else
				if i > 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁송)') , Length(widestring(wStr)) - i);
					sTaksong := 'n';
				end else
					sTaksong := 'n';

				SetMunuChecked('탁', False);
			end else
			if TcxLabel(Sender).Caption = '탁송확장' then
			begin
				sLicType := '00';
				grpWkLicType.Visible := False;
				i := Pos('탁확)', wStr);
				if i = 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1 + Length('탁확)'), Length(widestring(wStr)) - Length(widestring('탁확)')));
					sTakHwak := 'n';
				end else
				if i > 1 then
				begin
					meoStartArea.text := Copy(widestring(wStr), 1, i-1) + Copy(widestring(wStr), i + Length('탁확)') , Length(widestring(wStr)) - i);
					sTakHwak := 'n';
				end else
					sTakHwak := 'n';

				SetMunuChecked('탁확', False);

				if lblTakAlly.Tag = 1 then
				begin
					if Pos('탁송)', wStr) < 1 then
						AddSpop('탁송기사만', 19);
				end;
			end else
			if TcxLabel(Sender).Caption = '정장' then
      begin
        i := Pos('정장)', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length('정장)'), Length(wStr) - Length('정장)'));
        end else
        if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('정장)') , Length(wStr) - i);
        end;
        SetMunuChecked('정', False);
      end else
      if TcxLabel(Sender).Caption = '경유' then
      begin
        i := Pos('경유)', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length('경유)'), Length(wStr) - Length('경유)'));
        end else
        if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('경유)') , Length(wStr) - i);
        end;
        SetMunuChecked('경', False);
      end else
      if TcxLabel(Sender).Caption = '적요' then
      begin
        i := Pos('적요)', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length('적요)'), Length(wStr) - Length('적요)'));
        end else
        if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('적요)') , Length(wStr) - i);
        end;
        SetMunuChecked('적', False);
      end else
      if TcxLabel(Sender).Caption = '스틱' then
      begin
        i := Pos('스틱)', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length('스틱)'), Length(wStr) - Length('스틱)'));
          sStickCall := 'n';
        end else
        if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('스틱)') , Length(wStr) - i);
          sStickCall := 'n';
        end;
        SetMunuChecked('스', False);
      end else
      if TcxLabel(Sender).Caption = '킥보드x' then
      begin
        i := Pos('킥보드x)', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length('킥보드x)'), Length(wStr) - Length('킥보드x)'));
        end else
        if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('킥보드x)') , Length(wStr) - i);
        end;
        SetMunuChecked('킥', False);
      end else
      if TcxLabel(Sender).Caption = '비흡연' then
      begin
        i := Pos('비흡연)', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length('비흡연)'), Length(wStr) - Length('비흡연)'));
        end else
        if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length('비흡연)') , Length(wStr) - i);
        end;
        SetMunuChecked('비', False);
      end else
      if TcxLabel(Sender).Caption = Copy(Trim(GS_USERSELECT), 1, 1) then
      begin
        i := Pos(Trim(GS_USERSELECT) + ')', wStr);
        if i = 1 then
        begin
          meoStartArea.text := Copy(wStr, 1 + Length(Trim(GS_USERSELECT) + ')'), Length(wStr) - Length(Trim(GS_USERSELECT) + ')'));
        end else
        if i > 1 then
        begin
          meoStartArea.text := Copy(wStr, 1, i-1) + Copy(wStr, i + Length(Trim(GS_USERSELECT) + ')') , Length(wStr) - i);
        end;
        SetMunuChecked(Copy(Trim(GS_USERSELECT), 1, 1), False);
  		end;
  	end;

    // 이부분을 안해주면 출발지에 포커스가 안감
    try
      if Frm_Main.Frm_JON01N[Self.Tag].Showing then
      begin
        if (lcsActiveEdit = 'meoStartArea') then
          if ( meoStartArea.CanFocus ) then meoStartArea.SetFocus;
        if (lcsActiveEdit = 'meoEndArea') then
          if ( meoEndArea.CanFocus ) then meoEndArea.SetFocus;
        if (lcsActiveEdit = 'meoViaArea') then
        begin
          if ViaNowTag = 1 then
            if ( meoViaArea1.CanFocus ) then meoViaArea1.SetFocus
          else
            if ( meoViaArea[ViaNowTag].CanFocus ) then meoViaArea[ViaNowTag].SetFocus;
        end;
      end;
    except
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_JON01N.pLocalRoutingCheck : Boolean;
Var i : Integer;
    sKeyNumber, sBrNo, sArea1, sArea2, sArea3, sTel, sAllBrNo, sAllKeyNumber : String;
    MCData: TMultiCallData;
begin
  Result := True;
  if (GB_365System) Or ( GB_CallLine) Or ( GS_PRJ_AREA = 'S' ) then Exit;
//  if ( scb_KeyNumber.Strings[0] = '' ) And ( Trim(scb_Area1.Strings[0]) = ''  ) And ( Trim(scb_Area2.Strings[0]) = ''  ) And ( Trim(scb_Area3.Strings[0]) = ''  ) then Exit;
  try
    sKeyNumber := Proc_MainKeyNumberSearch;
    sBrNo      := Proc_BRNOSearch;
    if scb_KeyNumber.IndexOf(sKeyNumber) < 0 then Exit;

    // 콜받은 지사의  관리 지역 여부 확인
    for i := 0 to scb_KeyNumber.Count - 1 do
    begin
      if ( scb_KeyNumber.Strings[i] = sKeyNumber ) And ( scb_DsBranchCode.Strings[i] = sBrNo ) then
      begin
        if ( ( scb_Area1.Strings[i] = 'ALL'  ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
           ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
           ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
           ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = sArea3 ) ) then
        begin
          Exit;
        end;
      end;
    end;

    if (Assigned(Frm_JON015) and Frm_JON015.HandleAllocated) and
       (Frm_JON015.Count > 0) and (Frm_JON015.OrderHandle = Self.Handle) then
    begin
      Frm_JON015.GetMultiCallData(0, MCData);

      sArea1 := En_Coding(Copy(MCData.StArea1, 1, 2));
      sArea2 := En_Coding(MCData.StArea2);
      sArea3 := En_Coding(MCData.StArea3);
    end else
    begin
      sArea1 := lcsSta1;
      sArea2 := lcsSta2;
      sArea3 := lcsSta3;
    end;

    for i := 0 to scb_KeyNumber.Count - 1 do
    begin
      if IsDaeJeonShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo) then
      begin
        if ( scb_KeyNumber.Strings[i] = sKeyNumber ) And
           ( IsDaeJeonShare(GS_PRJ_AREA = 'O', scb_ShareNo.Strings[i]) ) then
        begin
          if ( ( scb_Area1.Strings[i] = 'ALL'  ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = sArea3 ) ) then
          begin
            sAllBrNo := scb_DsBranchCode.Strings[i];
            sAllKeyNumber := scb_KeyNumber.Strings[i];

            break;
          end;
        end;
      end else
      begin
        if ( scb_KeyNumber.Strings[i] = sKeyNumber ) then
        begin
          if ( ( scb_Area1.Strings[i] = 'ALL'  ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = sArea3 ) ) then
          begin
            sAllBrNo := scb_DsBranchCode.Strings[i];
            sAllKeyNumber := scb_KeyNumber.Strings[i];

            break;
          end;
        end;
      end;
    end;

    if ( Trim(sAllBrNo) = sBrNo ) And ( Trim(sAllKeyNumber) = sKeyNumber ) then
    begin
      Exit;
    end else
    if ( Trim(sAllBrNo) = '' ) Or ( Trim(sAllKeyNumber) = '' ) then
    begin
      Assert(False, '콜라우팅체크 : 고객정보변경문의=고객번호-' + cxtCallTelNum.Text + ',지사코드-' + sBrNo + ',대표번호-' + sKeyNumber);
      if Application.MessageBox('해당고객의 출발지역정보가 로컬 라우팅 이외의 지역이므로' + #13#10
                              + '고객정보가 변경될수 있습니다.' + #13#10
                              + '(현재고객정보 -> 저장지사 고객정보로 변경됨 )' + #13#10#13#10
                              + '계속 진행하시겠습니까?', '[확인]', MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
   		begin
        Result := False;
				Exit;
			end;
      bQuestionSave := True;
    end else
    begin
      Assert(False, '콜라우팅체크 : 대표지사자동변경=고객번호-' + cxtCallTelNum.Text + ',지사코드-' + sBrNo + ',대표번호-' + sKeyNumber +
                                                                                       ',변경지사코드-' + sAllBrNo);
      GMessageBox('출발지 지역정보가 로컬 라우팅 되는 지역정보의 대표지사로 자동 변경됩니다.' + #13#10#13#10
                + '다시 접수해 주세요', CDMSI);
      Proc_BrNoListIdxFind(sAllBrNo, sAllKeyNumber);
      try
        gbCallRouteBrChange := True;
        SearchCuTel(False);
      finally
        gbCallRouteBrChange := False;
      end;
      Result := False;
    end;
  except
    Result := True;
  end;
end;

procedure TFrm_JON01N.pNoShowSave;
var
  ls_TxLoad, ls_rxxml : String;
  rv_str, sMsg : string;
  slReceive: TStringList;
  ErrCode: integer;
begin
  SetDebugeWrite('JON01N.pNoShowSave');

  try
		ls_TxLoad := GTx_UnitXmlLoad('C010.XML');
		ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'JON03' + 'CANC0006', [rfReplaceAll]);

    ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', En_Coding(cxtJoinNum.Text), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID), [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'CurStatusString', fNoShwState, [rfReplaceAll]);   // 노쇼완료일경우 상태값 사용 안함
		ls_TxLoad := StringReplace(ls_TxLoad, 'ConfChargeString', ReplaceAll(curRate.Text, ',', ''), [rfReplaceAll]);

    slReceive := TStringList.Create;
    try
      if Dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          Frm_Main.Frm_JON03[Jon03Tag].proc_recieve(ls_rxxml);
        end;
      end;
    finally
      FreeAndNil(slReceive);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;

end;
procedure TFrm_JON01N.pQuestionSave;
Var bSave : Boolean;
    i : Integer;
    sKeyNumber, sBrNo, sArea1, sArea2, sArea3, sTel : String;
    MCData: TMultiCallData;
begin
  if (GB_365System) Or ( GB_CallLine) Or ( GS_PRJ_AREA = 'S' ) then Exit;
//  if ( scb_KeyNumber.Strings[0] = '' ) And ( Trim(scb_Area1.Strings[0]) = ''  ) And ( Trim(scb_Area2.Strings[0]) = ''  ) And ( Trim(scb_Area3.Strings[0]) = ''  ) then Exit;

  try
    if IsDaeJeonShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo) Or (GT_USERIF.ID = 'sntest') then
    begin
      sKeyNumber := Proc_MainKeyNumberSearch;
      sBrNo      := Proc_BRNOSearch;
      if scb_KeyNumber.IndexOf(sKeyNumber) < 0 then Exit;
      // 콜받은 지사의  관리 지역 여부 확인
      for i := 0 to scb_KeyNumber.Count - 1 do
      begin
        if ( scb_KeyNumber.Strings[i] = sKeyNumber ) And ( scb_DsBranchCode.Strings[i] = sBrNo ) then
        begin
          if ( ( scb_Area1.Strings[i] = 'ALL'  ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = sArea3 ) ) then
          begin
            Exit;
          end;
        end;
      end;

      bSave := True;
      if (Assigned(Frm_JON015) and Frm_JON015.HandleAllocated) and
         (Frm_JON015.Count > 0) and (Frm_JON015.OrderHandle = Self.Handle) then
      begin
        Frm_JON015.GetMultiCallData(0, MCData);

        sArea1 := En_Coding(Copy(MCData.StArea1, 1, 2));
        sArea2 := En_Coding(MCData.StArea2);
        sArea3 := En_Coding(MCData.StArea3);
      end else
      begin
        sArea1 := lcsSta1;
        sArea2 := lcsSta2;
        sArea3 := lcsSta3;
      end;

      for i := 0 to scb_KeyNumber.Count - 1 do
      begin
        // 이중 등록건에 대해서는 시도/시군구/읍면동 해당 지사 지역처리   20210107  LYB
        if ( scb_KeyNumber.Strings[i] = sKeyNumber ) And ( scb_DsBranchCode.Strings[i] = sBrNo ) then
        begin
          lcsStaQ1 := StringReplace(scb_Area1.Strings[i], 'ALL', '', [rfReplaceAll]);
          lcsStaQ2 := StringReplace(scb_Area2.Strings[i], 'ALL', '', [rfReplaceAll]);
          lcsStaQ3 := StringReplace(scb_Area3.Strings[i], 'ALL', '', [rfReplaceAll]);
        end;

        if ( scb_KeyNumber.Strings[i] = sKeyNumber ) And
           ( IsDaeJeonShare(GS_PRJ_AREA = 'O', scb_ShareNo.Strings[i]) Or (GT_USERIF.ID = 'sntest') ) then
        begin
          if ( ( scb_Area1.Strings[i] = ''     ) And ( scb_Area2.Strings[i] = ''     ) And ( scb_Area3.Strings[i] = ''     ) ) Or
             ( ( scb_Area1.Strings[i] = 'ALL'  ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = 'ALL'  ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = 'ALL'  ) ) Or
             ( ( scb_Area1.Strings[i] = sArea1 ) And ( scb_Area2.Strings[i] = sArea2 ) And ( scb_Area3.Strings[i] = sArea3 ) ) then
          begin
            bSave := False;
            break;
          end;
        end;
      end;

      if bSave then
      begin
        Assert(False, '콜라우팅이중문의등록 : 고객번호-' + cxtCallTelNum.Text + ',지사코드-' + sBrNo + ',대표번호-' + sKeyNumber);
        sTel := StringReplace(cxtCallTelNum.Text, '-', '', [rfReplaceAll]);
        Proc_Save('Q');  // 문의로 저장
        Frm_Main.Frm_JON03[Jon03Tag].proc_Acc_Search(5, sTel);
      end;
    end;
  except

  end;
end;

procedure TFrm_JON01N.pBaseCharge( sBrNo, sKeyNumber : String );
Var ls_Rcrd : TStringList;
    idx : Integer;
begin
  try
    ls_Rcrd := TStringList.Create;
    try
      idx := scb_KeyNumber.IndexOf(sKeyNumber);
      if idx > 0 then
       begin
         GetTextSeperationEx('|', scb_RateMent.Strings[idx], ls_Rcrd);

         if BtnRaLock.Hint <> 'F4)잠금' then
         begin
					 curRate.Value := StrToFloatDef(ls_Rcrd[0], 0){ + cxCurRevisionRate.value};
					 OrgRate := curRate.Value{ - cxCurRevisionRate.value};
				 end;
       end;
		finally
      FreeAndNil(ls_Rcrd);
    end;
  except
  end;
end;

end.
