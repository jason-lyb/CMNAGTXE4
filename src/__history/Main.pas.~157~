unit Main;

interface

uses
  Winapi.Windows, cxGraphics, cxLookAndFeels, cxLookAndFeelPainters, Vcl.Menus, dxSkinsCore, cxControls, cxContainer,
	cxEdit, cxCustomData, cxStyles, cxTL, cxTextEdit, cxLabel, cxTLdxBarBuiltInMenu, cxFilter, cxData, cxDataStorage, cxNavigator, dxDateRanges,
  Data.DB, cxDBData, cxCurrencyEdit, Vcl.ComCtrls, dxCore, cxDateUtils, dxBarBuiltInMenu, dxRibbonSkins, dxRibbonCustomizationForm, IdUDPServer,
  IdGlobal, IdSocketHandle, dxSkinsForm, dxBar, IdCoder, IdCoder3to4, IdCoder00E, IdCoderUUE, IdUDPBase, cxImageList, cxGridTableView, cxClasses,
	System.ImageList, Vcl.ImgList, Vcl.Controls, System.Win.ScktComp, Vcl.Dialogs, IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient,
	Vcl.ExtCtrls, Vcl.Graphics, dxGDIPlusClasses, cxImage, dxRibbon, dxStatusBar, cxProgressBar, Vcl.StdCtrls, cxRadioGroup, cxSpinEdit,
  dxCustomTileControl, dxTileControl, Vcl.OleCtrls, SHDocVw, Vcl.Buttons, cxPC, cxGridBandedTableView, cxGridDBBandedTableView, cxDropDownEdit,
  cxCalendar, cxGridChartView, AdvGlowButton, cxMaskEdit, cxGroupBox, GradientLabel, cxGridLevel, cxGridCustomTableView, cxGridDBTableView,
  cxGridCustomView, cxGrid, cxCustomListBox, cxListBox, cxInplaceContainer, cxCheckBox, cxTrackBar, cxButtons, ToolPanels, AdvSplitter, System.Classes,
  //------------
	xe_structure, xe_JON03, xe_JON01N, xe_JON34B, xe_WORA1, xe_Media_1, xe_Media_2,  xe_JON52, xe_gnl, xe_COM50, System.Threading,
	Winapi.Messages, System.SysUtils, Hash, System.Variants,  ComObj, cxCalc,  System.JSON, cxTLExportLink, IniFiles, TlHelp32, ShellAPI, Vcl.Clipbrd,
  MSXML2_TLB, ActiveX, system.Math, System.StrUtils, System.UITypes, Vcl.Forms, mshtml, DateUtils, dxRibbonForm, System.AnsiStrings,
  dxSkinOffice2010Silver, dxScreenTip, dxCustomHint, cxHint, dxSkinSharp, xe_JON012, xe_JON17, IdThreadComponent, dxAlertWindow, dxSkinMetropolisDark,
	IdUDPClient, dxSkinSilver, dxSkinOffice2007Silver, cxSplitter, System.Win.Registry,
  dxScrollbarAnnotations, cxMemo, Vcl.OleServer, VLP_PBXComLib_TLB;

{
0 : 콜마너XE
1 : NKT소프트-4BS소프트폰
2 : KLCns
3 : 시사일오-마술피리
4 : LG센트릭스 
5 : 콜마너IPCC
6 : 콜마너XE-맑은하늘
}	
type
  PTreeRec = ^TTreeRec;
  TTreeRec = record
    HDName: string;
    HDCode: string;
    BRName: string;
    BRCode: string;
    KeyNumber: string;
    HINT: string;
    FIndex: integer;
  end;
Type
  TOrderTotal = record
    BrNO, BrNM, BrTel, BrTOT, BrOrder, BrRun, Br_Complete, Br_CompletePer, BrStandby, BrINQUIRE,
    BrBooking, BrCancel, BrCancelPer : string;
  end;

type
  TcxGridSiteAccess = class (TcxGridSite);
  TcxControlScrollBarsAccess = class (TcxControlWindowedScrollBars);
	
type
  TFrm_Main = class(TdxRibbonForm)
    AdvTPTab: TAdvToolPanelTab;
    advTPTPna1: TAdvToolPanel;
    advTPTPna2: TAdvToolPanel;
    pm_Worker: TPopupMenu;
    N2: TMenuItem;
    N1: TMenuItem;
    SMS1: TMenuItem;
		enablefalse1: TMenuItem;
    N3: TMenuItem;
    mniN4: TMenuItem;
    mniSMSAll: TMenuItem;
    tmr_Initialization: TTimer;
    tmrKilling: TTimer;
    tm_AppClose: TTimer;
    TCPClient: TIdTCPClient;
    Server_CID: TServerSocket;
    server_mdrive: TServerSocket;
    server_speed: TServerSocket;
    ColorDialog1: TColorDialog;
    SaveDialog1: TSaveDialog;
    cxPageControl1: TcxPageControl;
    cxTabMain: TcxTabSheet;
    grpSetExcel: TcxGroupBox;
    Label32: TLabel;
    Edit1: TcxCurrencyEdit;
    btn_sms_con: TcxButton;
    cxButton1: TcxButton;
    grpSetBrch_select: TcxGroupBox;
    cb_brName: TcxComboBox;
    btn2: TcxButton;
    btn3: TcxButton;
    cxLabel3: TcxLabel;
    Lbl_SmsCash: TcxLabel;
    advTPTPna3: TAdvToolPanel;
    Panel3: TPanel;
    cxGroupBox3: TcxGroupBox;
    Label1: TLabel;
    dtBrCallSt: TcxDateEdit;
    cxButton2: TcxButton;
    lbl1: TcxLabel;
    btnBrExcelDown: TcxButton;
    chkBrCallFinAndRun: TcxCheckBox;
    dtBrCallEd: TcxDateEdit;
    cxButton17: TcxButton;
    pop_date: TPopupMenu;
    MenuItem6: TMenuItem;
    MenuItem7: TMenuItem;
    N6: TMenuItem;
    N7: TMenuItem;
    N11: TMenuItem;
    advTPTPna4: TAdvToolPanel;
    Panel4: TPanel;
    cxGroupBox4: TcxGroupBox;
    cxButton7: TcxButton;
    cbbShareCall: TcxComboBox;
    lblShareCallTime: TcxLabel;
    cbbSido: TcxComboBox;
    cbbGugun: TcxComboBox;
    cxGrid2: TcxGrid;
    cxShareCall: TcxGridDBTableView;
    cxShareCallColumn1: TcxGridDBColumn;
    cxShareCallColumn2: TcxGridDBColumn;
    cxShareCallColumn3: TcxGridDBColumn;
    cxGridLevel2: TcxGridLevel;
    advTPTPna5: TAdvToolPanel;
    Panel5: TPanel;
		cxGroupBox5: TcxGroupBox;
    cxLabel9: TcxLabel;
    edGroupSearch: TcxTextEdit;
    cxBtnBrHdNameSearch: TcxButton;
    bGroupSearch: TcxButton;
    cxGrid3: TcxGrid;
    cxGroup: TcxGridDBBandedTableView;
    cxGroupColumn12: TcxGridDBBandedColumn;
    cxGroupColumn11: TcxGridDBBandedColumn;
    cxGroupColumn1: TcxGridDBBandedColumn;
    cxGroupColumn2: TcxGridDBBandedColumn;
    cxGroupColumn4: TcxGridDBBandedColumn;
    cxGroupColumn5: TcxGridDBBandedColumn;
    cxGroupColumn6: TcxGridDBBandedColumn;
    cxGroupColumn7: TcxGridDBBandedColumn;
    cxGroupColumn8: TcxGridDBBandedColumn;
    cxGroupColumn9: TcxGridDBBandedColumn;
    cxGroupColumn10: TcxGridDBBandedColumn;
    cxGroupColumn3: TcxGridDBBandedColumn;
    glItems: TcxGridLevel;
    advTPTPna6: TAdvToolPanel;
    Panel6: TPanel;
    cxGroupBox6: TcxGroupBox;
    cxButton3: TcxButton;
    Grid1: TcxGrid;
    cxSgBrWk: TcxGridDBTableView;
    cxSgBrWkColumn1: TcxGridDBColumn;
    cxSgBrWkColumn2: TcxGridDBColumn;
    cxSgBrWkColumn3: TcxGridDBColumn;
    cxSgBrWkColumn4: TcxGridDBColumn;
    cxSgBrWkColumn5: TcxGridDBColumn;
    cxSgBrWkColumn6: TcxGridDBColumn;
    cxSgBrWkColumn7: TcxGridDBColumn;
    cxSgBrWkColumn8: TcxGridDBColumn;
    Grid1Level1: TcxGridLevel;
    tmrShareCall: TTimer;
    pnl_TapiCallingStatus: TcxGroupBox;
    cxButton8: TcxButton;
    lb_TapiCallingStatus: TcxLabel;
    bNKT_4BS: TClientSocket;
		tmr_AliveSend: TTimer;
    TimerOCX: TTimer;
    Tapi_CTI: TClientSocket;
    trm_CTI: TTimer;
    bCTI_CTI: TClientSocket;
    IdClient: TIdTCPClient;
    grpSetFavorite: TcxGroupBox;
    cxGrid4: TcxGrid;
    cxGridFavoriteList: TcxGridDBTableView;
    cxGridLevel5: TcxGridLevel;
    cxButton9: TcxButton;
    cxButton10: TcxButton;
    cxGridFavoriteListColumn1: TcxGridDBColumn;
    cxGridFavoriteListColumn2: TcxGridDBColumn;
    cxGridFavoriteListColumn3: TcxGridDBColumn;
    tmrbCTIConnect: TTimer;
    PnlMain: TPanel;
    cxLabel6: TcxLabel;
    lblShareCallCnt: TcxLabel;
    cxLabel2: TcxLabel;
    cxLabel12: TcxLabel;
    lbl_MainGubun: TcxLabel;
    lbl_MainYn: TcxLabel;
    cxLabel14: TcxLabel;
    cxLabel19: TcxLabel;
    cxPageControl2: TcxPageControl;
    cxTabSheet1: TcxTabSheet;
    Panel8: TPanel;
    tsBtmMenu2: TcxTabSheet;
    tsBtmMenu7: TcxTabSheet;
    tsBtmMenu4: TcxTabSheet;
    tsBtmMenu5: TcxTabSheet;
    tsBtmMenu6: TcxTabSheet;
    tsBtmMenu3: TcxTabSheet;
    tsBtmMenu9: TcxTabSheet;
    cxLabel4: TcxLabel;
    ed_FavoriteNum: TcxTextEdit;
    cxLabel7: TcxLabel;
    ed_FavoriteMemo: TcxTextEdit;
    cxButton5: TcxButton;
    Panel9: TPanel;
    Panel10: TPanel;
    cxgrpQRHead: TcxGroupBox;
    btnRateAnswer: TcxButton;
    lblRateE: TcxLabel;
    edtMemo: TcxTextEdit;
    lblRateA: TcxLabel;
    cxGrid6: TcxGrid;
    cxGridQRate: TcxGridDBTableView;
    cxGridLevel7: TcxGridLevel;
    cxGridQRateColumn1: TcxGridDBColumn;
    cxGridQRateColumn2: TcxGridDBColumn;
    cxGridQRateColumn3: TcxGridDBColumn;
    cxGridQRateColumn4: TcxGridDBColumn;
    cxGridQRateColumn5: TcxGridDBColumn;
    cxGridQRateColumn6: TcxGridDBColumn;
    cxGridQRateColumn7: TcxGridDBColumn;
    cxGridQRateColumn8: TcxGridDBColumn;
		cxGridQRateColumn9: TcxGridDBColumn;
    cxGridQRateColumn10: TcxGridDBColumn;
    cxGridQRateColumn11: TcxGridDBColumn;
    cxGridQRateColumn12: TcxGridDBColumn;
    cxGridQRateColumn13: TcxGridDBColumn;
    cxGridQRateColumn14: TcxGridDBColumn;
    cxGridQRateColumn15: TcxGridDBColumn;
    Panel12: TPanel;
    cxGroupBox15: TcxGroupBox;
    cxGrid8: TcxGrid;
    cxGridCShare: TcxGridDBTableView;
    cxGridLevel9: TcxGridLevel;
    cxGridCShareColumn1: TcxGridDBColumn;
    cxGridCShareColumn2: TcxGridDBColumn;
    cxGridCShareColumn3: TcxGridDBColumn;
    cxGridCShareColumn4: TcxGridDBColumn;
    cxGridCShareColumn5: TcxGridDBColumn;
    cxGridCShareColumn6: TcxGridDBColumn;
    cxGridCShareColumn7: TcxGridDBColumn;
    cxGridCShareColumn8: TcxGridDBColumn;
    cxGridCShareColumn9: TcxGridDBColumn;
    cxGridCShareColumn10: TcxGridDBColumn;
    cxGridCShareColumn11: TcxGridDBColumn;
    cxGroupBox16: TcxGroupBox;
    cxButton23: TcxButton;
    cxLabel31: TcxLabel;
    tmr_CidInfo: TTimer;
    tmr_CID_check: TTimer;
    ipwCID: TClientSocket;
    tmr_JoinView: TTimer;
    Time_per: TTimer;
    trmAUTOSMS: TTimer;
    trmAUTOSMSSEND: TTimer;
    sc_wk_tr: TClientSocket;
    sbar_Message: TdxStatusBar;
    PnlClient: TPanel;
    BtnFix: TcxButton;
		IdTCPClient1: TIdTCPClient;
		ipMsn: TClientSocket;
    acAwayTimer1: TTimer;
    BtnAdvPnl2F: TcxButton;
    BtnAdvPnl2E: TcxButton;
    BtnAdvPnl3E: TcxButton;
    BtnAdvPnl3F: TcxButton;
    BtnAdvPnl1E: TcxButton;
    BtnAdvPnl1F: TcxButton;
    BtnAdvPnl6E: TcxButton;
    BtnAdvPnl6F: TcxButton;
    BtnAdvPnl5E: TcxButton;
    BtnAdvPnl5F: TcxButton;
    BtnAdvPnl4E: TcxButton;
    BtnAdvPnl4F: TcxButton;
    chkOrderActiveBMenu: TcxCheckBox;
    tsBtmMenu8: TcxTabSheet;
    tmrDiffSosok: TTimer;
    Shape28: TShape;
    Shape29: TShape;
    Shape30: TShape;
    Shape32: TShape;
    cxGroupBox19: TcxGroupBox;
    cxbGongji: TcxButton;
    cxLabel1: TcxLabel;
    cxGrid9: TcxGrid;
    cxGridGongJi: TcxGridDBTableView;
    cxGridLevel10: TcxGridLevel;
    cxGridGongJiColumn1: TcxGridDBColumn;
    Shape34: TShape;
    cxGridGongJiColumn2: TcxGridDBColumn;
    cxGridGongJiColumn3: TcxGridDBColumn;
    tmr_LOCAL_SYNC: TTimer;
    AdvSplitter1: TAdvSplitter;
    tmrDiffJSosok: TTimer;
    cxButton24: TcxButton;
		pmBrOrder: TPopupMenu;
    mniBrOrderColReset: TMenuItem;
    cxSAutoHideMin: TcxSpinEdit;
    BtncxPage3E: TcxButton;
    BtncxPage4E: TcxButton;
    BtncxPage7E: TcxButton;
    BtncxPage9E: TcxButton;
    tmrBtmMenu: TTimer;
    pmRemoteMenu: TPopupMenu;
    N4: TMenuItem;
    N5: TMenuItem;
    N8: TMenuItem;
    N9: TMenuItem;
    pmMainMenu2: TPopupMenu;
    Menu301: TMenuItem;
    Menu302: TMenuItem;
    Menu303: TMenuItem;
    Menu304: TMenuItem;
    Menu305: TMenuItem;
    Menu306: TMenuItem;
    Menu307: TMenuItem;
    N14: TMenuItem;
    Menu310: TMenuItem;
    Menu311: TMenuItem;
    pmMainMenu3: TPopupMenu;
    Menu401: TMenuItem;
    Menu402: TMenuItem;
    Menu403: TMenuItem;
    Menu404: TMenuItem;
    Menu405: TMenuItem;
    Menu406: TMenuItem;
    Menu407: TMenuItem;
    MenuItem10: TMenuItem;
		Menu408: TMenuItem;
    Menu409: TMenuItem;
    Menu410: TMenuItem;
    Menu411: TMenuItem;
    pmMainMenu5: TPopupMenu;
    Menu601: TMenuItem;
    Menu602: TMenuItem;
    Menu603: TMenuItem;
    Menu604: TMenuItem;
    Menu605: TMenuItem;
    pmMainMenu7: TPopupMenu;
    Menu801: TMenuItem;
    Menu802: TMenuItem;
    Menu803: TMenuItem;
    MenuItem17: TMenuItem;
    Menu811: TMenuItem;
    Menu606: TMenuItem;
    Menu607: TMenuItem;
    Menu608: TMenuItem;
    Menu609: TMenuItem;
    Menu610: TMenuItem;
    Menu611: TMenuItem;
    Menu612: TMenuItem;
    Menu613: TMenuItem;
    Menu614: TMenuItem;
    Menu615: TMenuItem;
    Menu616: TMenuItem;
    Menu617: TMenuItem;
    pmMainMenu8: TPopupMenu;
    Menu901: TMenuItem;
    Menu902: TMenuItem;
    Menu903: TMenuItem;
    Menu904: TMenuItem;
		Menu905: TMenuItem;
    pmMainMenu9: TPopupMenu;
    Menu1001: TMenuItem;
    Menu1002: TMenuItem;
    Menu1003: TMenuItem;
    Menu1004: TMenuItem;
    Menu1005: TMenuItem;
    pmMainMenu10: TPopupMenu;
    Menu1401: TMenuItem;
    Menu1402: TMenuItem;
    Menu1403: TMenuItem;
    Menu1404: TMenuItem;
    Menu1405: TMenuItem;
    Menu812: TMenuItem;
    Menu813: TMenuItem;
    Menu814: TMenuItem;
    Menu815: TMenuItem;
    Menu816: TMenuItem;
    Menu817: TMenuItem;
    Menu906: TMenuItem;
    Menu907: TMenuItem;
    Menu908: TMenuItem;
    Menu909: TMenuItem;
    Menu910: TMenuItem;
    Menu1406: TMenuItem;
    Menu1407: TMenuItem;
    Menu1408: TMenuItem;
    N12: TMenuItem;
    Menu1409: TMenuItem;
    N15: TMenuItem;
    Menu1410: TMenuItem;
    Menu1411: TMenuItem;
    Menu1412: TMenuItem;
    Menu1413: TMenuItem;
    N10: TMenuItem;
    Menu501: TMenuItem;
    Menu502: TMenuItem;
    Menu503: TMenuItem;
    Menu504: TMenuItem;
    Menu505: TMenuItem;
		N13: TMenuItem;
    Menu1300: TMenuItem;
    Menu1100: TMenuItem;
    Menu1200: TMenuItem;
    Menu1500: TMenuItem;
    Menu804: TMenuItem;
    tmrPageChnage: TTimer;
    grpSetBadCancel: TcxGroupBox;
    Shape17: TShape;
    cxButton18: TcxButton;
    cxLabel27: TcxLabel;
    cxTextEdit6: TcxTextEdit;
    cxButton22: TcxButton;
    cxRadioButton1: TcxRadioButton;
    cxRadioButton2: TcxRadioButton;
    cxRadioButton3: TcxRadioButton;
    cxRadioButton4: TcxRadioButton;
    cxRadioButton5: TcxRadioButton;
    xCTI_CTI: TClientSocket;
    tmrxCTIConnect: TTimer;
    xeCID: TClientSocket;
    tmr_xeCID_check: TTimer;
    cxStyleRepository1: TcxStyleRepository;
    cxStyle1: TcxStyle;
    cxStyle2: TcxStyle;
    cxStyle3: TcxStyle;
    cxStyle4: TcxStyle;
    cxStyle5: TcxStyle;
    cxStyle6: TcxStyle;
    cxStyle7: TcxStyle;
    cxStyle8: TcxStyle;
    cxStyle9: TcxStyle;
    cxStyle10: TcxStyle;
    cxStyle11: TcxStyle;
    cxStyle12: TcxStyle;
    cxStyle13: TcxStyle;
    cxStyle14: TcxStyle;
    cxStyle15: TcxStyle;
    cxStyle_JON012: TcxStyle;
    cxstWkConnect: TcxStyle;
		cxStyle16: TcxStyle;
    cxStyle17: TcxStyle;
    cxStyle18: TcxStyle;
    cxStyleBold : TcxStyle;
    cxStyleError: TcxStyle;
    cxStyleWarning: TcxStyle;
    cxStyleNotice: TcxStyle;
    cxStyle19: TcxStyle;
    cxStyle20: TcxStyle;
    cxStyle21: TcxStyle;
    cxStyleFSize10: TcxStyle;
    cxStyle22: TcxStyle;
    cxStyleSmartAlarm: TcxStyle;
    cxStyleSmartBasic: TcxStyle;
    cxStyleSmartPeek1: TcxStyle;
    cxStyleSmartPeek2: TcxStyle;
    cxStyleSmartPeek3: TcxStyle;
    GridTableViewStyleSheetDevExpress: TcxGridTableViewStyleSheet;
    cximgOrderStatus: TcxImageList;
    Lbl_PnlTop: TLabel;
    IdUDPCidRecvServer: TIdUDPServer;
    Menu1414: TMenuItem;
    chkActiveBMenu: TcxCheckBox;
    cxGroupBox7: TcxGroupBox;
    rb_Time: TcxRadioButton;
    rb_Date_Time: TcxRadioButton;
    acAwayTimer2: TTimer;
    cxTabControl1: TcxTabControl;
    PnlMainGongJi: TPanel;
    cxGroupBox9: TcxGroupBox;
    PnlManual: TPanel;
    tmr_Alive: TTimer;
    cxCIDImgList: TcxImageList;
		CID_Encode: TIdEncoderUUE;
    CID_Decode: TIdDecoderUUE;
    dxBarManager1: TdxBarManager;
    dxRibbon1: TdxRibbon;
    dxRibbon1Tab1: TdxRibbonTab;
    btnMainMenu1: TcxButton;
    btnMainMenu13: TcxButton;
    btnMainMenu2: TcxButton;
    btnMainMenu3: TcxButton;
    btnMainMenu9: TcxButton;
    btnRemoteMenu: TcxButton;
    WebBrowser2: TWebBrowser;
    Menu618: TMenuItem;
    Pnl_Pay: TPanel;
    Shape12: TShape;
    grpSetBox11: TcxGroupBox;
    cxButton14: TcxButton;
    cxButton15: TcxButton;
    cxButton16: TcxButton;
    Edt_PW: TcxTextEdit;
    cxLabel10: TcxLabel;
    grpSetBox13: TcxGroupBox;
    btnAll1: TcxButton;
    btnAll2: TcxButton;
    Edt_APw: TcxTextEdit;
    Edt_BPw: TcxTextEdit;
    Edt_PPw: TcxTextEdit;
    cxLabel15: TcxLabel;
    cxLabel16: TcxLabel;
    cxLabel21: TcxLabel;
    Menu506: TMenuItem;
    dxSkinController1: TdxSkinController;
		cxLookAndFeelController1: TcxLookAndFeelController;
    cxChkExpand: TcxCheckBox;
    Menu805: TMenuItem;
    Tree_List: TcxTreeList;
    cxTLCChkBox: TcxTreeListColumn;
    cxTLCHDName: TcxTreeListColumn;
    cxTLCHDCode: TcxTreeListColumn;
    cxTLCBRName: TcxTreeListColumn;
    cxTLCBRCode: TcxTreeListColumn;
    cxTLCKeyNumber: TcxTreeListColumn;
    cxTLCHint: TcxTreeListColumn;
    cxTLCFIndex: TcxTreeListColumn;
    cxTLCCaption: TcxTreeListColumn;
    bSSIO_CTI: TClientSocket;
    tmr_SSIO_check: TTimer;
    Menu412: TMenuItem;
    Menu806: TMenuItem;
    N16: TMenuItem;
    Menu1150: TMenuItem;
    pnlWeb: TPanel;
    cxStyleSaturday: TcxStyle;
    pnlTop: TPanel;
    WebBrowser1: TWebBrowser;
    cxStyleSunDay: TcxStyle;
    lblMainTitle: TcxLabel;
    imgCID: TcxImage;
    cxGridQRateColumn16: TcxGridDBColumn;
    cxGridQRateColumn17: TcxGridDBColumn;
    cxGridQRateColumn18: TcxGridDBColumn;
    curRate: TcxSpinEdit;
    cxStyleQRate: TcxStyle;
    LbmeoBigo: TcxLabel;
    cxGridQRateColumn19: TcxGridDBColumn;
    cxGridCShareColumn12: TcxGridDBColumn;
    chkCS30SOver: TcxCheckBox;
    cxGridCShareColumn13: TcxGridDBColumn;
    cxGridCShareColumn14: TcxGridDBColumn;
    cxGridCShareColumn15: TcxGridDBColumn;
    cxGridCShareColumn16: TcxGridDBColumn;
    cxGridCShareColumn17: TcxGridDBColumn;
    cxGridCShareColumn18: TcxGridDBColumn;
    cxGridQRateColumn20: TcxGridDBColumn;
    cxGroupBox17: TcxGroupBox;
    chkRQ_AutoActive: TcxCheckBox;
    chkRQ_ClosePopup: TcxCheckBox;
    cxStyleCShare: TcxStyle;
    cxGridQRateColumn21: TcxGridDBColumn;
    Menu1415: TMenuItem;
    Menu1416: TMenuItem;
    pmCallBell: TPopupMenu;
    Menu1601: TMenuItem;
		Menu1602: TMenuItem;
    Menu1603: TMenuItem;
    Menu1604: TMenuItem;
    Menu1605: TMenuItem;
    Menu1606: TMenuItem;
    trm_NoticeInvert: TTimer;
    chkNoChangNS: TcxCheckBox;
    cxStyleHeader: TcxStyle;
    btnWide: TcxButton;
    BtnPrePage: TcxButton;
    BtnNexPage: TcxButton;
    cxStyleQRList: TcxStyle;
    cbApplyRate: TcxCheckBox;
    pmShare: TPopupMenu;
    pmSMI1: TMenuItem;
    cxGridQRateColumn22: TcxGridDBColumn;
    cxGridCShareColumn19: TcxGridDBColumn;
    cxGridQRateColumn23: TcxGridDBColumn;
    pmSMI0: TMenuItem;
    mniPUSHAll: TMenuItem;
    N17: TMenuItem;
    N18: TMenuItem;
    cxGridQRateColumn24: TcxGridDBColumn;
    cxGridQRateColumn25: TcxGridDBColumn;
    cxGridQRateColumn26: TcxGridDBColumn;
    cxGridQRateColumn27: TcxGridDBColumn;
    cxGridQRateColumn28: TcxGridDBColumn;
    cxGridQRateColumn29: TcxGridDBColumn;
    cxGridQRateColumn30: TcxGridDBColumn;
    pmSMI2: TMenuItem;
    pnl_BrSearch: TPanel;
    cxLabel39: TcxLabel;
		edt_BrName: TcxTextEdit;
    lst_BRList: TcxListBox;
    N21: TMenuItem;
    AdvSplitter5: TAdvSplitter;
    cxSTTChart: TcxStyle;
    cxSTT_Field1: TcxStyle;
    cxSTT_Field2: TcxStyle;
    cxSTT_Field3: TcxStyle;
    cxSTT_Field4: TcxStyle;
    cxSTT_Field5: TcxStyle;
    cxSTT_Field6: TcxStyle;
    cxSTT_Field7: TcxStyle;
    cxStyleBasic: TcxStyle;
    cxSTTChartGridLine: TcxStyle;
    AdvSplitter4: TAdvSplitter;
    pnl_ChartBrCall: TPanel;
    Panel14: TPanel;
    Shape35: TShape;
    cbKindA23: TcxComboBox;
    cbChartKindA2: TcxComboBox;
    cxLabel41: TcxLabel;
    cxButton27: TcxButton;
    cbKindA21: TcxComboBox;
		btnChartA2: TcxButton;
    cbKindA24: TcxComboBox;
    cbKindA22: TcxComboBox;
    btn_PlayBack: TcxButton;
    btn_Play: TcxButton;
    lbPage: TcxLabel;
    cbKindA25: TcxComboBox;
    cxGridA2C2: TcxGrid;
    cxGridA2C2ChartALL: TcxGridChartView;
    cxGridChartSeries1: TcxGridChartSeries;
    cxGridChartSeries2: TcxGridChartSeries;
    cxGridChartSeries3: TcxGridChartSeries;
    cxGridChartSeries4: TcxGridChartSeries;
    cxGridLevel8: TcxGridLevel;
    btnChartShow2: TcxButton;
    pnl_GridBrCall: TPanel;
    cxGridBrOrder: TcxGrid;
    cxSgBrOrder: TcxGridDBTableView;
    cxSgBrOrderColumn1: TcxGridDBColumn;
    cxSgBrOrderColumn2: TcxGridDBColumn;
    cxSgBrOrderColumn3: TcxGridDBColumn;
    cxSgBrOrderColumn4: TcxGridDBColumn;
    cxSgBrOrderColumn5: TcxGridDBColumn;
    cxSgBrOrderColumn6: TcxGridDBColumn;
    cxSgBrOrderColumn12: TcxGridDBColumn;
    cxSgBrOrderColumn7: TcxGridDBColumn;
    cxSgBrOrderColumn10: TcxGridDBColumn;
    cxSgBrOrderColumn11: TcxGridDBColumn;
    cxSgBrOrderColumn13: TcxGridDBColumn;
    cxSgBrOrderColumn8: TcxGridDBColumn;
    cxSgBrOrderColumn9: TcxGridDBColumn;
    cxGridLevel1: TcxGridLevel;
    cxGrid1: TcxGrid;
    cxGridSetG1: TcxGridDBTableView;
    cxGridDBColumn1: TcxGridDBColumn;
    cxGridDBColumn2: TcxGridDBColumn;
    cxGridDBColumn3: TcxGridDBColumn;
    cxGridDBColumn4: TcxGridDBColumn;
    cxGridDBColumn5: TcxGridDBColumn;
    cxGridSetG1Column1: TcxGridDBColumn;
		cxGridSetG1Column2: TcxGridDBColumn;
    cxGridSetG1Column3: TcxGridDBColumn;
    cxGridLevel11: TcxGridLevel;
    cxGrid5: TcxGrid;
    cxGridSetG2: TcxGridDBTableView;
    cxGridSetG2Column1: TcxGridDBColumn;
    cxGridSetG2Column2: TcxGridDBColumn;
    cxGridSetG2Column3: TcxGridDBColumn;
    cxGridSetG2Column4: TcxGridDBColumn;
    cxGridSetG2Column5: TcxGridDBColumn;
    cxGridSetG2Column6: TcxGridDBColumn;
    cxGridSetG2Column7: TcxGridDBColumn;
    cxGridSetG2Column8: TcxGridDBColumn;
    cxGridSetG2Column9: TcxGridDBColumn;
    cxGridLevel12: TcxGridLevel;
    cxGrid7: TcxGrid;
    cxGridSetG3: TcxGridDBTableView;
    cxGridSetG3Column1: TcxGridDBColumn;
    cxGridSetG3Column2: TcxGridDBColumn;
    cxGridSetG3Column3: TcxGridDBColumn;
    cxGridSetG3Column4: TcxGridDBColumn;
    cxGridSetG3Column5: TcxGridDBColumn;
    cxGridSetG3Column6: TcxGridDBColumn;
    cxGridSetG3Column7: TcxGridDBColumn;
    cxGridLevel13: TcxGridLevel;
    cxGrid10: TcxGrid;
    cxGridSetK1: TcxGridDBTableView;
    cxGridDBColumn6: TcxGridDBColumn;
    cxGridDBColumn7: TcxGridDBColumn;
    cxGridDBColumn8: TcxGridDBColumn;
    cxGridDBColumn9: TcxGridDBColumn;
    cxGridDBColumn10: TcxGridDBColumn;
    cxGridDBColumn11: TcxGridDBColumn;
    cxGridSetK1Column1: TcxGridDBColumn;
    cxGridSetK1Column2: TcxGridDBColumn;
    cxGridLevel14: TcxGridLevel;
    cxGrid11: TcxGrid;
    cxGridSetK2: TcxGridDBTableView;
    cxGridDBColumn12: TcxGridDBColumn;
    cxGridDBColumn13: TcxGridDBColumn;
		cxGridDBColumn14: TcxGridDBColumn;
    cxGridDBColumn15: TcxGridDBColumn;
    cxGridDBColumn16: TcxGridDBColumn;
    cxGridDBColumn17: TcxGridDBColumn;
    cxGridDBColumn18: TcxGridDBColumn;
    cxGridSetK2Column1: TcxGridDBColumn;
    cxGridSetK2Column2: TcxGridDBColumn;
    cxGridLevel15: TcxGridLevel;
    cxGrid12: TcxGrid;
    cxGridSetK3: TcxGridDBTableView;
    cxGridDBColumn19: TcxGridDBColumn;
    cxGridDBColumn20: TcxGridDBColumn;
    cxGridDBColumn21: TcxGridDBColumn;
    cxGridDBColumn22: TcxGridDBColumn;
    cxGridDBColumn23: TcxGridDBColumn;
    cxGridDBColumn24: TcxGridDBColumn;
    cxGridSetK3Column1: TcxGridDBColumn;
    cxGridLevel16: TcxGridLevel;
    AdvSplitter3: TAdvSplitter;
    pnl_Chart: TPanel;
    Panel11: TPanel;
    Shape31: TShape;
    cbChartKindA1: TcxComboBox;
    cxLabel40: TcxLabel;
    btnChartA7: TcxButton;
    cbKindA11: TcxComboBox;
    btnChartA1: TcxButton;
    cbKindA12: TcxComboBox;
    cxGridA1C1: TcxGrid;
    cxGridA1C1ChartView1: TcxGridChartView;
    cxGridA1C1ChartSeries1: TcxGridChartSeries;
    cxGridLevel6: TcxGridLevel;
    cxGridA1C2: TcxGrid;
    cxGridA1C2ChartALL: TcxGridChartView;
    cxGridA1C2ChartSeries1: TcxGridChartSeries;
    cxGridA1C2ChartSeries2: TcxGridChartSeries;
    cxGridA1C2ChartSeries3: TcxGridChartSeries;
    cxGridA1C2ChartSeries4: TcxGridChartSeries;
    cxGridA1C2ChartSeries5: TcxGridChartSeries;
    cxGridLevel3: TcxGridLevel;
		btnChartShow1: TcxButton;
		Menu1160: TMenuItem;
    Menu308: TMenuItem;
    Menu309: TMenuItem;
		bSI415: TClientSocket;
    bSI415_A: TClientSocket;
    tmr_SI415check: TTimer;
    pnlCTISetting: TPanel;
    btnCTISettingClose: TcxButton;
    grpSetCTISetting1: TcxGroupBox;
    grpGbCID: TcxGroupBox;
    cxLabel33: TcxLabel;
    ed_Number: TcxTextEdit;
    RB_SvrUse1: TcxRadioButton;
    RB_SvrUse2: TcxRadioButton;
    ed_CID_Ip2: TcxTextEdit;
    ed_CID_Ip1: TcxTextEdit;
    cxLabel5: TcxLabel;
    CbCidSvrIP: TcxComboBox;
    cxChkCidSvrIPUse: TcxCheckBox;
    xcEdtCidSvrIP: TcxLabel;
    PnlAcdSvr: TPanel;
    Shape11: TShape;
    ed_ACDServerIP: TcxTextEdit;
    cxAcdSvrUse: TcxCheckBox;
    cxButton13: TcxButton;
    cxCIDListView: TcxComboBox;
    btnSvrDisConn: TcxButton;
    btnSvrConn: TcxButton;
    grpLGUCT: TcxGroupBox;
    cxEdtLGUCTID: TcxTextEdit;
    cxLabel24: TcxLabel;
    cxEdtLGUCTPW: TcxTextEdit;
    cxLabel29: TcxLabel;
		btnLGUCTSave: TcxButton;
    cxLabel23: TcxLabel;
    pnl7: TPanel;
    img2: TImage;
    PnlHelp: TcxGroupBox;
    lbl3: TcxLabel;
    cxButton19: TcxButton;
    grpPBXSetting: TcxGroupBox;
    btn_SI415PBX: TcxButton;
    edt_PBXID: TcxTextEdit;
    cxLabel43: TcxLabel;
    edt_PBXPW: TcxTextEdit;
    cxLabel44: TcxLabel;
    btn_PBXLogIn: TcxButton;
    cxLabel45: TcxLabel;
    cxLabel46: TcxLabel;
    edt_PBXEXT: TcxTextEdit;
    edt_PBXIP: TcxTextEdit;
    cxLabel47: TcxLabel;
    cxLabel50: TcxLabel;
    cxLabel51: TcxLabel;
    rdo_Phone_Use: TcxRadioButton;
    rdo_Phone_NOUse: TcxRadioButton;
    edt_AdminID: TcxTextEdit;
    cxLabel52: TcxLabel;
    edt_AdminPW: TcxTextEdit;
    cxLabel53: TcxLabel;
    grpGbCTI: TcxGroupBox;
    Shape21: TShape;
		btnCTISave: TcxButton;
    cxLabel17: TcxLabel;
    cxLabel20: TcxLabel;
    cxLabel22: TcxLabel;
    ed_CTIIP: TcxTextEdit;
    ed_ExTensionNumber: TcxTextEdit;
    rb_HeadSet: TcxRadioButton;
    rb_Receiver: TcxRadioButton;
    chkUseSet02: TcxCheckBox;
    chkJON54AutoRun: TcxCheckBox;
    rchk_Use: TcxCheckBox;
    lb_SI415Notice: TcxLabel;
    btnCidExit: TcxButton;
    grpSetPBXLogin: TcxGroupBox;
    edtPBXPw: TcxTextEdit;
    cxLabel48: TcxLabel;
    btnPBXLogin: TcxButton;
    btnPBXLoginExit: TcxButton;
    edtPBXId: TcxTextEdit;
    cxLabel49: TcxLabel;
    cxSmallImages: TcxImageList;
    cb_PBXLevel: TcxComboBox;
		trm_IPCCSetting: TTimer;
    pmPBX: TPopupMenu;
		Menu1701: TMenuItem;
    Menu1702: TMenuItem;
    N19: TMenuItem;
    Menu1703: TMenuItem;
    Menu1704: TMenuItem;
    Menu1705: TMenuItem;
    Menu1706: TMenuItem;
    Menu1707: TMenuItem;
    Menu1708: TMenuItem;
    Menu1709: TMenuItem;
    Menu1710: TMenuItem;
    Menu1711: TMenuItem;
    Menu1712: TMenuItem;
    Menu1713: TMenuItem;
    MenuItem1: TMenuItem;
    Menu1714: TMenuItem;
    Menu1715: TMenuItem;
    N20: TMenuItem;
    Menu1716: TMenuItem;
    Menu1717: TMenuItem;
    cxLabel34: TcxLabel;
    edt_ComID: TcxTextEdit;
    N22: TMenuItem;
    N23: TMenuItem;
    cxJON03_Kakao: TcxStyle;
    pnl_AiList: TPanel;
    pnl_AI_Title: TPanel;
    cxGrid13: TcxGrid;
    cxGridAiList: TcxGridDBTableView;
    cxGridDBColumn25: TcxGridDBColumn;
    cxGridDBColumn26: TcxGridDBColumn;
    cxGridDBColumn27: TcxGridDBColumn;
    cxGridLevel17: TcxGridLevel;
    Menu1210: TMenuItem;
    pnl_RemoteForIPCC: TPanel;
    pnl_RemoteForIPCC_Title: TPanel;
    btn_RemoteForIPCCclose: TcxButton;
    cxLabel35: TcxLabel;
    cxLabel54: TcxLabel;
    cxLabel55: TcxLabel;
    cxLabel56: TcxLabel;
    cxLabel57: TcxLabel;
    cxLabel58: TcxLabel;
    cxLabel59: TcxLabel;
    cxLabel60: TcxLabel;
    cxLabel61: TcxLabel;
    btn_RemoteForIPCC: TcxButton;
    Menu1170: TMenuItem;
    Menu1171: TMenuItem;
    bSI415_2601: TClientSocket;
    trm_1011After: TTimer;
    N24: TMenuItem;
    Menu821: TMenuItem;
		Menu822: TMenuItem;
    Menu823: TMenuItem;
    cxsInsure: TcxStyle;
    cxsTakInsure: TcxStyle;
    cxStyleMCash: TcxStyle;
    N25: TMenuItem;
    Menu833: TMenuItem;
		Menu831: TMenuItem;
    Menu832: TMenuItem;
    xeClearSky: TIdTCPClient;
    tmr_xeCID_New1: TTimer;
    tmr_xeCID_New2: TTimer;
    chk_Family: TcxCheckBox;
		cxCIDList: TcxComboBox;
    N26: TMenuItem;
    Menu843: TMenuItem;
    Menu842: TMenuItem;
    Menu841: TMenuItem;
    dxTileMain: TdxTileControl;
    dxTileControl1Group1: TdxTileControlGroup;
    dxTileControl1Item1: TdxTileControlItem;
    dxTileControl1Item2: TdxTileControlItem;
    dxTileControl1Item3: TdxTileControlItem;
    pnlJON01Start: TPanel;
    pBarJON01Start: TcxProgressBar;
    PnlGongJi: TPanel;
    ImgGongJi: TImage;
    tmrGongJi: TTimer;
    cxHintStyleController1: TcxHintStyleController;
    ilHotImages: TImageList;
    tmrCreate: TTimer;
    cxStyleGridBackColor: TcxStyle;
    lblGongJiF: TcxLabel;
    dxTileMainItem1: TdxTileControlItem;
    cxStyleJON03_61: TcxStyle;
    chkWin10CIDXE: TcxCheckBox;
    IdXECID: TIdTCPClient;
    IdThreadComponent: TIdThreadComponent;
    lb_Win10CIDXE: TcxLabel;
    btn_Win10CIDXE: TcxButton;
    awmAlert: TdxAlertWindowManager;
    pmMainMenu6: TPopupMenu;
    Menu701: TMenuItem;
    Menu702: TMenuItem;
    Menu703: TMenuItem;
    Menu704: TMenuItem;
    Menu705: TMenuItem;
    Menu706: TMenuItem;
    Menu707: TMenuItem;
    Menu708: TMenuItem;
    Menu709: TMenuItem;
    Menu710: TMenuItem;
    Menu711: TMenuItem;
    Menu712: TMenuItem;
    Menu713: TMenuItem;
    btnMainMenu5: TcxButton;
    btnMainMenu6: TcxButton;
    btnMainMenu7: TcxButton;
    btnMainMenu8: TcxButton;
    Menu619: TMenuItem;
    Menu620: TMenuItem;
    btnCallBellMenu: TcxButton;
    btnIpccMenu: TcxButton;
    cxLabel8: TcxLabel;
    cxSgBrOrderColumn14: TcxGridDBColumn;
    cxSgBrOrderColumn15: TcxGridDBColumn;
    btn_wL1: TcxButton;
    btn_wR1: TcxButton;
    btn_wRef1: TcxButton;
    IdUDPClient1: TIdUDPClient;
    Shape1: TShape;
    Shape2: TShape;
    Shape3: TShape;
    Shape4: TShape;
    Shape7: TShape;
    Shape5: TShape;
    Shape8: TShape;
    Shape6: TShape;
    lblCidState: TcxLabel;
    Menu715: TMenuItem;
    BtnAdvPnl4P: TcxButton;
    Menu312: TMenuItem;
    lblJON01Start: TcxLabel;
    Menu621: TMenuItem;
    cxGridHdOrder: TcxGrid;
    cxSgHdOrder: TcxGridDBTableView;
    cxGridDBColumn28: TcxGridDBColumn;
    cxGridDBColumn29: TcxGridDBColumn;
    cxGridDBColumn30: TcxGridDBColumn;
    cxGridDBColumn31: TcxGridDBColumn;
    cxGridDBColumn32: TcxGridDBColumn;
    cxGridDBColumn33: TcxGridDBColumn;
    cxGridDBColumn34: TcxGridDBColumn;
    cxGridDBColumn35: TcxGridDBColumn;
    cxGridDBColumn36: TcxGridDBColumn;
    cxGridDBColumn37: TcxGridDBColumn;
    cxGridDBColumn38: TcxGridDBColumn;
    cxGridDBColumn39: TcxGridDBColumn;
    cxGridDBColumn40: TcxGridDBColumn;
    cxGridDBColumn41: TcxGridDBColumn;
    cxGridDBColumn42: TcxGridDBColumn;
    cxGridLevel19: TcxGridLevel;
    cxSplitter1: TcxSplitter;
    Menu507: TMenuItem;
    Menu1220: TMenuItem;
    chkCallMapPopup: TcxCheckBox;
    cxGridQRateColumn31: TcxGridDBColumn;
    cxGridQRateColumn32: TcxGridDBColumn;
    Menu1230: TMenuItem;
    cxGridQRateColumn33: TcxGridDBColumn;
    pnl_KMWkList: TcxGroupBox;
    cxGrid14: TcxGrid;
    cxGrid_KDWkList: TcxGridDBTableView;
    cxGrid_KDWkListColumn0: TcxGridDBColumn;
    cxGrid_KDWkListColumn1: TcxGridDBColumn;
    cxGrid_KDWkListColumn2: TcxGridDBColumn;
    cxGrid_KDWkListColumn3: TcxGridDBColumn;
    cxGrid_KDWkListColumn4: TcxGridDBColumn;
    cxGrid_KDWkListColumn5: TcxGridDBColumn;
    cxGrid_KDWkListColumn6: TcxGridDBColumn;
    cxGrid_KDWkListColumn7: TcxGridDBColumn;
    cxGrid_KDWkListColumn8: TcxGridDBColumn;
    cxGrid_KDWkListColumn9: TcxGridDBColumn;
    cxGrid_KDWkListColumn10: TcxGridDBColumn;
    cxGridLevel20: TcxGridLevel;
    Panel2: TPanel;
    Image1: TImage;
    cb_KMSearch: TcxComboBox;
    edt_KMSearch: TcxTextEdit;
    btn_KMSearch: TcxButton;
    cxLabel11: TcxLabel;
    cb_SType: TcxComboBox;
    cxLabel25: TcxLabel;
    cb_LType: TcxComboBox;
    cb_GType: TcxComboBox;
    btnClose: TcxButton;
    pnl_WkList: TcxGroupBox;
    cxGridWkConnect: TcxGrid;
    tvWkConnect: TcxGridDBTableView;
    tvWkConnectColumn1: TcxGridDBColumn;
    tvWkConnectColumn2: TcxGridDBColumn;
    tvWkConnectColumn3: TcxGridDBColumn;
    tvWkConnectColumn4: TcxGridDBColumn;
    tvWkConnectColumn5: TcxGridDBColumn;
    tvWkConnectColumn6: TcxGridDBColumn;
    tvWkConnectColumn7: TcxGridDBColumn;
    tvWkConnectColumn8: TcxGridDBColumn;
    tvWkConnectColumn9: TcxGridDBColumn;
    tvWkConnectColumn10: TcxGridDBColumn;
    tvWkConnectColumn11: TcxGridDBColumn;
    tvWkConnectColumn12: TcxGridDBColumn;
    tvWkConnectColumn23: TcxGridDBColumn;
    tvWkConnectColumn13: TcxGridDBColumn;
    tvWkConnectColumn22: TcxGridDBColumn;
    tvWkConnectColumn14: TcxGridDBColumn;
    tvWkConnectColumn15: TcxGridDBColumn;
    tvWkConnectColumn18: TcxGridDBColumn;
    tvWkConnectColumn16: TcxGridDBColumn;
    tvWkConnectColumn17: TcxGridDBColumn;
    tvWkConnectColumn19: TcxGridDBColumn;
    tvWkConnectColumn20: TcxGridDBColumn;
    tvWkConnectColumn21: TcxGridDBColumn;
    tvWkConnectColumn24: TcxGridDBColumn;
    tvWkConnectColumn25: TcxGridDBColumn;
    cxGridLevel4: TcxGridLevel;
    lbWkTitle: TListBox;
    Pnl_Top: TPanel;
    cxGroupBox1: TcxGroupBox;
    lbWkSlip: TLabel;
    lbWkcountTime: TLabel;
    cxGroupBox2: TcxGroupBox;
    lbWkConnect_orderBox: TcxLabel;
    lbWkNoTodayBox: TcxLabel;
    lbWknormalcyBox: TcxLabel;
    lbWkRunBox: TcxLabel;
    lbWkConnectBox: TcxLabel;
    lbWkTodayBox: TcxLabel;
    RbButton9: TcxButton;
    cb_Search: TcxComboBox;
    ed_Condition: TcxTextEdit;
    cxButton4: TcxButton;
    cxButton6: TcxButton;
    lbWkToday: TcxLabel;
    lbWkConnect: TcxLabel;
    lbWkConnect_order: TcxLabel;
    lbWkRun: TcxLabel;
    lbWkNoToday: TcxLabel;
    lbWknormalcy: TcxLabel;
    cxLabel18: TcxLabel;
    cxlbWkCnt: TcxLabel;
    chk_DisOrder: TcxCheckBox;
    chk_DisGPS: TcxCheckBox;
    btnWkToday: TcxButton;
    btnWkConnect: TcxButton;
    btnWkConnect_Order: TcxButton;
    btnWkRun: TcxButton;
    btnWkNoToday: TcxButton;
    btnWknormalcy: TcxButton;
    cxGroupBox8: TcxGroupBox;
    cxButton11: TcxButton;
    btnConWKUseMap: TcxButton;
    btnSelOrderUseMap: TcxButton;
    btnSelWKUseMap: TcxButton;
    btn_KDWKSearch: TcxButton;
    cxLabel13: TcxLabel;
    lb_mdrive: TListBox;
    lb_mdrive_sn: TListBox;
    lb_speed: TListBox;
    btn1: TcxButton;
    btnChartShow3: TcxButton;
    btnSetJonAuto: TcxButton;
    pnl_WkConnect: TPanel;
    Panel15: TPanel;
    Shape36: TShape;
    cbChartKindA3: TcxComboBox;
    cxLabel42: TcxLabel;
    cxButton26: TcxButton;
    btnChartA3: TcxButton;
    cxGridA3C2: TcxGrid;
    cxGridA3C2ChartALL: TcxGridChartView;
    cxGridA3C2ChartALLSeries1: TcxGridChartSeries;
    cxGridA3C2ChartALLSeries2: TcxGridChartSeries;
    cxGridA3C2ChartALLSeries3: TcxGridChartSeries;
    cxGridA3C2ChartALLSeries4: TcxGridChartSeries;
    cxGridA3C2ChartALLSeries5: TcxGridChartSeries;
    cxGridA3C2ChartALLSeries6: TcxGridChartSeries;
    cxGridLevel18: TcxGridLevel;
    pnl2: TPanel;
    lbl2: TGradientLabel;
    btnHelpClose: TcxButton;
    lb_Becha0: TcxLabel;
    lb_Becha1: TcxLabel;
    lb_Becha2: TcxLabel;
    lb_Becha3: TcxLabel;
    lb_Becha4: TcxLabel;
    pm_KMWorker: TPopupMenu;
    MenuItem2: TMenuItem;
    chkNoAcceptShare: TcxCheckBox;
    N27: TMenuItem;
    Menu413: TMenuItem;
    Menu714: TMenuItem;
    mniWORKAll: TMenuItem;
    cxGroupBox10: TcxGroupBox;
    mmo_CallListNeasun: TcxMemo;
    btn_CallListNeasun: TcxButton;
    cxLabel26: TcxLabel;
    cxLabel28: TcxLabel;
    cxLabel30: TcxLabel;
    cxLabel32: TcxLabel;
    Menu844: TMenuItem;
    procedure AdvTPTabTabLeftClick(Sender: TObject; Index: Integer;
      APanel: TAdvToolPanel);
    procedure AdvTPTabTabSlideIn(Sender: TObject; Index: Integer;
      APanel: TAdvToolPanel);
    procedure AdvTPTabTabSlideOutDone(Sender: TObject; Index: Integer;
      APanel: TAdvToolPanel);
    procedure btn1Click(Sender: TObject);
    procedure btnHelpCloseClick(Sender: TObject);
    procedure cb_SearchClick(Sender: TObject);
    procedure cxButton11Click(Sender: TObject);
    procedure cxButton4Click(Sender: TObject);
		procedure cxButton5Click(Sender: TObject);
    procedure cxButton6Click(Sender: TObject);
    procedure cxLabel13Click(Sender: TObject);
    procedure ed_ConditionKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure lb_Becha0Click(Sender: TObject);
    procedure lbWkConnect_orderClick(Sender: TObject);
    procedure lbWkConnectBoxClick(Sender: TObject);
    procedure lbWknormalcyClick(Sender: TObject);
    procedure lbWkNoTodayClick(Sender: TObject);
    procedure lbWkRunClick(Sender: TObject);
    procedure lbWkTodayBoxClick(Sender: TObject);
    procedure mw_login;
    procedure RbButton9Click(Sender: TObject);
    procedure tm_AppCloseTimer(Sender: TObject);
		procedure tmr_InitializationTimer(Sender: TObject);
    procedure btn2Click(Sender: TObject);
    procedure btn3Click(Sender: TObject);
    procedure cb_brNameClick(Sender: TObject);
    procedure cxButton1Click(Sender: TObject);
    procedure btn_sms_conClick(Sender: TObject);
    procedure cxButton2Click(Sender: TObject);
    procedure btnBrExcelDownClick(Sender: TObject);
    procedure cxSgBrOrderColumnPosChanged(Sender: TcxGridTableView;
      AColumn: TcxGridColumn);
    procedure cxSgBrOrderColumnSizeChanged(Sender: TcxGridTableView;
      AColumn: TcxGridColumn);
    procedure MenuItem6Click(Sender: TObject);
    procedure cxButton7Click(Sender: TObject);
    procedure cbbShareCallPropertiesChange(Sender: TObject);
    procedure cbbSidoPropertiesChange(Sender: TObject);
    procedure tvWkConnectCellClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
		procedure tvWkConnectCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure tvWkConnectColumnHeaderClick(Sender: TcxGridTableView;
      AColumn: TcxGridColumn);
    procedure tvWkConnectColumnPosChanged(Sender: TcxGridTableView;
      AColumn: TcxGridColumn);
    procedure tvWkConnectColumnSizeChanged(Sender: TcxGridTableView;
      AColumn: TcxGridColumn);
    procedure tvWkConnectStylesGetContentStyle(Sender: TcxCustomGridTableView;
      ARecord: TcxCustomGridRecord; AItem: TcxCustomGridTableItem;
      var AStyle: TcxStyle);
    procedure edGroupSearchKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxBtnBrHdNameSearchClick(Sender: TObject);
    procedure bGroupSearchClick(Sender: TObject);
    procedure cxButton3Click(Sender: TObject);
    procedure cxSgBrWkCellClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure advTPTPna3Resize(Sender: TObject);
    procedure tmrShareCallTimer(Sender: TObject);
    procedure bNKT_4BSError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure bNKT_4BSRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure tmr_AliveSendTimer(Sender: TObject);
    procedure TimerOCXTimer(Sender: TObject);
    procedure Tapi_CTIError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure Tapi_CTIRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure trm_CTITimer(Sender: TObject);
    procedure bCTI_CTIError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure rb_HeadSetClick(Sender: TObject);
		procedure cxButton8Click(Sender: TObject);
    procedure cxTextEdit2KeyPress(Sender: TObject; var Key: Char);
    procedure cxButton10Click(Sender: TObject);
    procedure cxButton9Click(Sender: TObject);
    procedure cxTextEdit4KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cxGridFavoriteListCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure cxTextEdit2KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure bCTI_CTIConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure bCTI_CTIDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure bCTI_CTIRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure tmrbCTIConnectTimer(Sender: TObject);
    procedure Server_CIDClientRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure btnWkTodayClick(Sender: TObject);
    procedure btnWkConnectClick(Sender: TObject);
    procedure btnWkConnect_OrderClick(Sender: TObject);
    procedure btnWkRunClick(Sender: TObject);
    procedure btnWkNoTodayClick(Sender: TObject);
    procedure btnWknormalcyClick(Sender: TObject);
    procedure btnDisGPSClick(Sender: TObject);
    procedure btnDisOrderClick(Sender: TObject);
    procedure btnConWKUseMapClick(Sender: TObject);
    procedure btnSelOrderUseMapClick(Sender: TObject);
    procedure btnSelWKUseMapClick(Sender: TObject);
    procedure lbWkConnect_orderBoxClick(Sender: TObject);
    procedure lbWkConnectClick(Sender: TObject);
    procedure lbWkTodayClick(Sender: TObject);
    procedure lbWkRunBoxClick(Sender: TObject);
    procedure lbWkNoTodayBoxClick(Sender: TObject);
    procedure lbWknormalcyBoxClick(Sender: TObject);
    procedure btnSetJonAutoClick(Sender: TObject);
    procedure btn_wRef1Click(Sender: TObject);
    procedure btn_wL1Click(Sender: TObject);
    procedure btn_wR1Click(Sender: TObject);
    procedure cxLabel20Click(Sender: TObject);
    procedure cxLabel22Click(Sender: TObject);
    procedure ed_FavoriteNumKeyDown(Sender: TObject; var Key: Word;
			Shift: TShiftState);
    procedure ed_FavoriteNumKeyPress(Sender: TObject; var Key: Char);
    procedure ed_FavoriteMemoKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure pnl_TapiCallingStatusMouseMove(Sender: TObject;
      Shift: TShiftState; X, Y: Integer);
    procedure lbl2MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure grpSetExcelMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure grpSetBrch_selectMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure cxButton22Click(Sender: TObject);
    procedure cxPageControl1CanCloseEx(Sender: TObject; ATabIndex: Integer;
      var ACanClose: Boolean);
    procedure tmr_CidInfoTimer(Sender: TObject);
    procedure tmr_CID_checkTimer(Sender: TObject);
    procedure ipwCIDConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure ipwCIDDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure ipwCIDError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure ipwCIDRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure tmr_JoinViewTimer(Sender: TObject);
    procedure Time_perTimer(Sender: TObject);
    procedure trmAUTOSMSTimer(Sender: TObject);
    procedure trmAUTOSMSSENDTimer(Sender: TObject);
    procedure sc_wk_trError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure sc_wk_trRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure cxPageControl1Change(Sender: TObject);
    procedure cxbGongjiClick(Sender: TObject);
    procedure BtnFixClick(Sender: TObject);
    procedure cxPageControl2Resize(Sender: TObject);
    procedure acAwayTimer1Timer(Sender: TObject);
    procedure BtnAdvPnl2FClick(Sender: TObject);
    procedure BtnAdvPnl2EClick(Sender: TObject);
    procedure BtnAdvPnl3FClick(Sender: TObject);
    procedure BtnAdvPnl3EClick(Sender: TObject);
    procedure BtnAdvPnl1FClick(Sender: TObject);
    procedure BtnAdvPnl1EClick(Sender: TObject);
    procedure BtnAdvPnl6FClick(Sender: TObject);
		procedure BtnAdvPnl6EClick(Sender: TObject);
    procedure BtnAdvPnl5FClick(Sender: TObject);
    procedure BtnAdvPnl5EClick(Sender: TObject);
    procedure BtnAdvPnl4FClick(Sender: TObject);
    procedure BtnAdvPnl4EClick(Sender: TObject);
    procedure cxPageControl2Click(Sender: TObject);
    procedure cxPageControl2Change(Sender: TObject);
    procedure tmrDiffSosokTimer(Sender: TObject);
    procedure server_mdriveClientError(Sender: TObject;
      Socket: TCustomWinSocket; ErrorEvent: TErrorEvent;
      var ErrorCode: Integer);
    procedure server_mdriveClientRead(Sender: TObject;
      Socket: TCustomWinSocket);
    procedure server_speedClientError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure server_speedClientRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure tmrKillingTimer(Sender: TObject);
    procedure tmr_LOCAL_SYNCTimer(Sender: TObject);
    procedure tsBtmMenu8Resize(Sender: TObject);
    procedure tmrDiffJSosokTimer(Sender: TObject);
    procedure PnlMainTitleDblClick(Sender: TObject);
    procedure chkOrderActiveBMenuClick(Sender: TObject);
    procedure cxButton24Click(Sender: TObject);
    procedure N3Click(Sender: TObject);
    procedure N2Click(Sender: TObject);
    procedure N1Click(Sender: TObject);
    procedure SMS1Click(Sender: TObject);
    procedure enablefalse1Click(Sender: TObject);
    procedure mniN4Click(Sender: TObject);
    procedure mniSMSAllClick(Sender: TObject);
    procedure mniBrOrderColResetClick(Sender: TObject);
    procedure cxButton17MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure cxTrackBar1PropertiesChange(Sender: TObject);
    procedure cxTrackBar2PropertiesChange(Sender: TObject);
    procedure cxTrackBar3PropertiesChange(Sender: TObject);
		procedure cxTrackBar4PropertiesChange(Sender: TObject);
    procedure cxTrackBar5PropertiesChange(Sender: TObject);
    procedure cxTrackBar6PropertiesChange(Sender: TObject);
    procedure cxButton23Click(Sender: TObject);
    procedure tmrBtmMenuTimer(Sender: TObject);
    procedure cxDateEdit3MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure rchk_UseClick(Sender: TObject);
    procedure pmRemoteMenuPopup(Sender: TObject);
    procedure btnMainMenu1Click(Sender: TObject);
    procedure Menu307Click(Sender: TObject);
    procedure cxPageControl1UnDock(Sender: TObject; Client: TControl;
      NewTarget: TWinControl; var Allow: Boolean);
    procedure tmrPageChnageTimer(Sender: TObject);
    procedure xCTI_CTIConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure xCTI_CTIDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure xCTI_CTIError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure xCTI_CTIRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure tmrxCTIConnectTimer(Sender: TObject);
    procedure tmr_xeCID_checkTimer(Sender: TObject);
    procedure xeCIDConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure xeCIDDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure xeCIDError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure xeCIDRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure chkUseSet02Click(Sender: TObject);
    procedure btnCTISettingCloseClick(Sender: TObject);
    procedure btnCTISaveClick(Sender: TObject);
    procedure cxChkCidSvrIPUseClick(Sender: TObject);
    procedure grpSetFavoriteMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure grpSetCTISetting1MouseDown(Sender: TObject; Button: TMouseButton;
			Shift: TShiftState; X, Y: Integer);
    procedure grpSetBadCancelMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure BtncxPage3EClick(Sender: TObject);
    procedure BtncxPage9EClick(Sender: TObject);
    procedure btnSvrConnClick(Sender: TObject);
    procedure IdUDPCidRecvServerUDPRead(AThread: TIdUDPListenerThread;
      const AData: TIdBytes; ABinding: TIdSocketHandle);
    procedure chkActiveBMenuClick(Sender: TObject);
    procedure rb_TimeClick(Sender: TObject);
    procedure PnlClientResize(Sender: TObject);
    procedure acAwayTimer2Timer(Sender: TObject);
    procedure cxTabControl1Click(Sender: TObject);
    procedure bNKT_4BSDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure tmr_AliveTimer(Sender: TObject);
    procedure bNKT_4BSConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure cxButton13Click(Sender: TObject);
    procedure WebBrowser1CommandStateChange(Sender: TObject; Command: Integer; Enable: WordBool);
    procedure PnlMainTitleMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btnMainMenu13Click(Sender: TObject);
    procedure btnAll1Click(Sender: TObject);
    procedure btnAll2Click(Sender: TObject);
    procedure cxButton15Click(Sender: TObject);
    procedure cxButton16Click(Sender: TObject);
    procedure Edt_PWKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cxChkExpandClick(Sender: TObject);
    procedure Tree_ListCustomDrawDataCell(Sender: TcxCustomTreeList;
      ACanvas: TcxCanvas; AViewInfo: TcxTreeListEditCellViewInfo;
      var ADone: Boolean);
    procedure Tree_ListDblClick(Sender: TObject);
    procedure Tree_ListFocusedNodeChanged(Sender: TcxCustomTreeList;
      APrevFocusedNode, AFocusedNode: TcxTreeListNode);
    procedure tmr_SSIO_checkTimer(Sender: TObject);
    procedure bSSIO_CTIConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure bSSIO_CTIDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure bSSIO_CTIError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure bSSIO_CTIRead(Sender: TObject; Socket: TCustomWinSocket);
		procedure Tree_ListNodeCheckChanged(Sender: TcxCustomTreeList;
      ANode: TcxTreeListNode; AState: TcxCheckBoxState);
		procedure cxCIDListPropertiesChange(Sender: TObject);
    procedure btnLGUCTSaveClick(Sender: TObject);
    procedure img2Click(Sender: TObject);
    procedure cxButton19Click(Sender: TObject);
    procedure cxGridQRateStylesGetContentStyle(Sender: TcxCustomGridTableView;
      ARecord: TcxCustomGridRecord; AItem: TcxCustomGridTableItem;
      var AStyle: TcxStyle);
    procedure cxGridQRateCellClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure curRatePropertiesChange(Sender: TObject);
    procedure LbmeoBigoClick(Sender: TObject);
    procedure edtMemoEnter(Sender: TObject);
    procedure edtMemoExit(Sender: TObject);
    procedure btnRateAnswerClick(Sender: TObject);
    procedure curRateKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure chkRQ_AutoActiveClick(Sender: TObject);
    procedure chkRQ_ClosePopupClick(Sender: TObject);
    procedure imgCIDClick(Sender: TObject);
    procedure cxGridCShareStylesGetContentStyle(Sender: TcxCustomGridTableView;
			ARecord: TcxCustomGridRecord; AItem: TcxCustomGridTableItem;
      var AStyle: TcxStyle);
    procedure chkCS30SOverClick(Sender: TObject);
    procedure cxGridCShareCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
		procedure btnCallBellMenuDropDownMenuPopup(Sender: TObject;
      var APopupMenu: TPopupMenu; var AHandled: Boolean);
    procedure chkNoChangNSClick(Sender: TObject);
    procedure btnWideClick(Sender: TObject);
    procedure BtnPrePageClick(Sender: TObject);
    procedure BtnNexPageClick(Sender: TObject);
    procedure cbApplyRateClick(Sender: TObject);
    procedure N17Click(Sender: TObject);
    procedure pmSharePopup(Sender: TObject);
    procedure pmSMI2Click(Sender: TObject);
    procedure edt_BrNameKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edt_BrNameKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edt_BrNameMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure lst_BRListDblClick(Sender: TObject);
    procedure lst_BRListExit(Sender: TObject);
    procedure lst_BRListKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure N21Click(Sender: TObject);
    procedure cbChartKindA3PropertiesChange(Sender: TObject);
    procedure btnChartA3Click(Sender: TObject);
    procedure cxGridA3C2ChartALLGetValueHint(Sender: TcxGridChartView;
      ASeries: TcxGridChartSeries; AValueIndex: Integer; var AHint: string);
    procedure btnChartShow3Click(Sender: TObject);
    procedure cbChartKindA2PropertiesChange(Sender: TObject);
    procedure cbKindA21PropertiesChange(Sender: TObject);
    procedure cbKindA22PropertiesChange(Sender: TObject);
		procedure cbKindA25PropertiesChange(Sender: TObject);
    procedure btn_PlayBackClick(Sender: TObject);
    procedure btn_PlayClick(Sender: TObject);
    procedure btnChartA2Click(Sender: TObject);
    procedure cxGridA2C2ChartALLGetValueHint(Sender: TcxGridChartView;
      ASeries: TcxGridChartSeries; AValueIndex: Integer; var AHint: string);
    procedure btnChartShow2Click(Sender: TObject);
    procedure cxSgBrOrderCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure cxGridA2C2ChartALLDataControllerFilterRecord(
      ADataController: TcxCustomDataController; ARecordIndex: Integer;
      var Accept: Boolean);
    procedure btnChartA1Click(Sender: TObject);
    procedure btnChartShow1Click(Sender: TObject);
    procedure cxGridA1C2ChartALLGetValueHint(Sender: TcxGridChartView;
      ASeries: TcxGridChartSeries; AValueIndex: Integer; var AHint: string);
    procedure cbChartKindA1PropertiesChange(Sender: TObject);
    procedure cbKindA11PropertiesChange(Sender: TObject);
    procedure cbKindA12PropertiesChange(Sender: TObject);
    procedure pnl_ChartBrCallResize(Sender: TObject);
    procedure cxGridA1C1ChartView1GetValueHint(Sender: TcxGridChartView;
      ASeries: TcxGridChartSeries; AValueIndex: Integer; var AHint: string);
    procedure cxGridA1C1ChartSeries1GetValueDisplayText(Sender: TObject;
      const AValue: Variant; var ADisplayText: string);
		procedure bSI415Connect(Sender: TObject; Socket: TCustomWinSocket);
		procedure bSI415Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure bSI415Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
		procedure bSI415Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure tmr_SI415checkTimer(Sender: TObject);
		procedure btn_PBXLogInClick(Sender: TObject);
		procedure btn_SI415PBXClick(Sender: TObject);
		procedure bSI415_AConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure bSI415_ADisconnect(Sender: TObject; Socket: TCustomWinSocket);
		procedure bSI415_ARead(Sender: TObject; Socket: TCustomWinSocket);
    procedure bSI415_AError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure rdo_Phone_UseClick(Sender: TObject);
    procedure cb_PBXLevelPropertiesChange(Sender: TObject);
    procedure edtPBXIdKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edtPBXPwKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edt_PBXIDKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edt_PBXPWKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edt_PBXIPKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure cb_PBXLevelKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
		procedure edt_AdminIDKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edt_AdminPWKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure pmPBXPopup(Sender: TObject);
    procedure trm_IPCCSettingTimer(Sender: TObject);
    procedure cxLabel36Click(Sender: TObject);
    procedure edt_AdminIDKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure N23Click(Sender: TObject);
    procedure pnl_AI_TitleMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure cxGridAiListCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure pnl_RemoteForIPCC_TitleMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btn_RemoteForIPCCcloseClick(Sender: TObject);
		procedure bSI415_2601Connect(Sender: TObject; Socket: TCustomWinSocket);
		procedure bSI415_2601Disconnect(Sender: TObject; Socket: TCustomWinSocket);
		procedure bSI415_2601Error(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure bSI415_2601Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure btnPBXLoginClick(Sender: TObject);
    procedure btnPBXLoginExitClick(Sender: TObject);
    procedure trm_1011AfterTimer(Sender: TObject);
    procedure xeClearSkyRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure xeClearSkyError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure tmr_xeCID_New1Timer(Sender: TObject);
    procedure tmr_xeCID_New2Timer(Sender: TObject);
    procedure chkJON54AutoRunClick(Sender: TObject);
    procedure cxCIDListViewPropertiesChange(Sender: TObject);
    procedure dxTileControl1Item1Click(Sender: TdxTileControlItem);
    procedure dxTileControl1Item2Click(Sender: TdxTileControlItem);
    procedure dxTileControl1Item3Click(Sender: TdxTileControlItem);
    procedure tmrGongJiTimer(Sender: TObject);
    procedure tmrCreateTimer(Sender: TObject);
    procedure dxTileMainItem1Click(Sender: TdxTileControlItem);
    procedure IdThreadComponentRun(Sender: TIdThreadComponent);
    procedure IdXECIDConnected(Sender: TObject);
    procedure chkWin10CIDXEClick(Sender: TObject);
    procedure IdXECIDDisconnected(Sender: TObject);
    procedure btn_Win10CIDXEClick(Sender: TObject);
    procedure awmAlertClick(Sender: TObject; AAlertWindow: TdxAlertWindow);
    procedure cxButton14Click(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure cxSgBrOrderCustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo;
      var ADone: Boolean);
		procedure dxSkinController1SkinForm(Sender: TObject; AForm: TCustomForm; var ASkinName: string; var UseSkin: Boolean);
    procedure btnSvrDisConnClick(Sender: TObject);
    procedure BtnAdvPnl4PClick(Sender: TObject);
    procedure chk_FamilyClick(Sender: TObject);
    procedure cxSgHdOrderMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure cxSgBrOrderMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure PnlGongJiResize(Sender: TObject);
		procedure chkCallMapPopupClick(Sender: TObject);
    procedure btn_KDWKSearchClick(Sender: TObject);
		procedure MenuItem2Click(Sender: TObject);
    procedure btnCloseClick(Sender: TObject);
    procedure btn_KMSearchClick(Sender: TObject);
    procedure chkNoAcceptShareClick(Sender: TObject);
    procedure cxSgHdOrderDataControllerSortingChanged(Sender: TObject);
    procedure cxSgHdOrderColumnHeaderClick(Sender: TcxGridTableView;
      AColumn: TcxGridColumn);
    procedure cxSgBrOrderColumnHeaderClick(Sender: TcxGridTableView;
      AColumn: TcxGridColumn);
    procedure cxSgBrOrderDataControllerSortingChanged(Sender: TObject);
    procedure cxShareCallDataControllerSortingChanged(Sender: TObject);
    procedure cxShareCallColumnHeaderClick(Sender: TcxGridTableView;
      AColumn: TcxGridColumn);
    procedure tvWkConnectDataControllerSortingChanged(Sender: TObject);
    procedure pm_WorkerPopup(Sender: TObject);
    procedure mniWORKAllClick(Sender: TObject);
    procedure btn_CallListNeasunClick(Sender: TObject);
    procedure mmo_CallListNeasunKeyPress(Sender: TObject; var Key: Char);
	private
		{ Private declarations }
		SyncDateTime : string;
    iCntTrack : Integer;
    iPrePosition : Integer;

    AIndex : Integer;

    gsCIDEnCoding : String;      // win10 cid서버 접속시 endocde 방식 설정

		bMAIN_VIEW_TIME : Boolean;

    iLastDockPage, iLastActivePage : Integer;

    iFirstCnt : Integer;
		FGroupInfos: array of TGroupInfoRec;
    FOleInPlaceActiveObject: IOleInPlaceActiveObject;
    FOrderTotal: TOrderTotal;
		// 엑셀조회기간제한을 위해 임시변수에 저장

		iCidConnectErrCnt : Integer;

		sPreHdCd, sPreBrCd, sPreKeyNumber : String;
    sWkBrSabun, sWkBrSaTime: string;

    bPrintYesNo : Boolean;
    scbBranchInitChk : Boolean;
    scbBubinListChk : Boolean;
		stsChk : Boolean;
		aHeadSort : Boolean;
		aWKCONLIST : string;

    iChk : integer;
		sAliveQ, eAliveQ : TDateTime;     //tmr_AliveSendTimer
    trm_Time: Integer;
    giCIDCheckCnt: Integer; // CID 연결 신버전 체크 카운트  CDS. 080725.

		searchBRlist: TStringList;  //좌측 지사명 검색 시 인덱스 저장 2017.09.16  KHS

		gChartPageCnt,gChartNowPage : Array[0..5] of Integer; //차트 페이지 카운트
		gFromIdx : integer; //차트 시작, 끝
		gChartUnitCntAC, gChartUnitCntB : integer; //화면에 보여지는 유닛수
		gAdvTPTPna3Width, gPnl_ChartBrCallHeight : integer;//지사콜 차트 크기

		gsPath : string; // IPCC실행경로

    gsCIDConnectIP : String;  // CID연결 IP

    gBoard, gBoard1 : TGongJi;

		giH0, giH1, giH2, giH3, giH4, giH5, giH6, giH7, giH8, giH9 : Int64;
    giS0, giS1, giS2, giS3, giS4, giS5, giS6, giS7, giS8, giS9 : Int64;

		function RunIE(AURL: string): Boolean;
		function ProcessLive: Boolean;

    // M-DRIVE 콜 저장
    function func_mdrive(s_Accept: string): string;
    // 대표번호로 지사코드 찾기
    function func_search_brno(sKeyNum: string): string;
    // 본사, 지사, 대표번호로 고객코드(순번) 찾기
    function func_cust_seq(sHdNO, sBrNo, sKeyNum, sCuTel: string): string;
    // M-drive 오더 접수후 응답
    function func_mdrive_Recieve(ss_rxxml: String): string;
    // Speed 콜 저장
    function func_Speed(s_Accept: string): string;

    procedure Exec_bCTIOCXAgent;
		procedure Proc_Initialization; // 프로그램 초기화 설정처리.
    function func_Login: Boolean;
    procedure Proc_GlobalVariableReSet;
    // CID 서버에 접속할 포트 설정을 한다.
    // sGB : CAT.기본 구버전 포트로 설정.
    //       OLD.신버전 CAT.exe 포트로 설정.
    procedure CatAgentPortSet(sGB: string);
    procedure XmlDataFileRead;
    procedure MessageLoop(var Msg: TMsg; var Handled: Boolean);
    procedure ProcessException(Sender: TObject; E: Exception);
    procedure PrintScreenIdle(Sender: TObject; var Done: Boolean);
    procedure SetLeftMenuGrid;
    procedure MinimizeMe(Sender: TObject);
    procedure NormalMe(Sender: TObject);
    procedure pnl_Set;
 		procedure ReadINISection(AHd_no : string);
    procedure proc_recieve(ls_rxxml: String);
		procedure proc_FormCloseInitial;
		function func_logout: Boolean;
    // 접속기사 조회( iType : 0 : 선택상태 + 검색어로 조회, 1 : 검색어로만 조회, 2 : 상태로만 조회)
    procedure proc_wkConnect(iType: Integer = 0);
    // 퀀텀 그리드의 컬럼을 설정한다.
    procedure SetQuantumGridColumn(cxGColm: TcxGridDBColumn; sCaption, sFieldName, sProperties,
      sValueType: string; iWidth: Integer; iTag: Integer);
    procedure proc_LeftWkManage;
    procedure proc_Change_Title;
    // 메인화면 좌측 접속기사
    procedure proc_LeftWorker;
    // 메인화면 좌측 지사별 콜통계
    procedure proc_LeftBrCall;
    // 메인화면 좌측 공유콜
    procedure proc_LeftShareCall;
    // 메인화면 좌측 연합사
    procedure proc_LeftGroup;
    // 지사별 접속기사수
    procedure proc_BrWk;
    // 지사별 콜카운트
		procedure proc_BrOrder;
    // 연합사 보기
    procedure proc_Group;
    procedure proc_AutoShareNo;
    // 공유콜 보기
    procedure proc_Share;
    procedure MakeSMS(AOrder: TOrderTotal);
    procedure proc_smsRead(ls_rxxml: String);
    // 단어로 그리드 검색 (s : 검색할 단어, sColumn : 검색할 컬럼('1,2' : 1, 2컬럼 조회), cxGrid, 검색할 그리드)
    procedure proc_Word_Search(s: string; cxGrid: TcxGridDBBandedTableView);
    function RequestDataBase(ATxData: string; var ARxDataDom: msDOMDocument): Boolean;
		procedure DataArrival(AData : string);
    procedure CidServerVersionCheck;
    procedure proc_FormCodeChange( iTag, iSel : Integer );
    procedure procChangeTreeBrNo;

		function IsRunRivalProgram(AClassName, ASubClass, AWindowName: string; AFileSize, AMemSize: Int64): Boolean;
		procedure KillRivalProgram(AName: string; AKill: Boolean);
		function IsCheckRivalProgram(AProgram : string): Boolean;
		procedure CheckRivalProgram(ATitle, AName: string; AKill: Boolean);
		function IsKillTarget(AHdNo: string; ACity: Boolean): Boolean;
		procedure pSetpmRemoteMenuAdd(sCaption: String; iTag: Integer);
    procedure SetpmRemoteView(sStat: String);
    procedure pSetPmRemoteMenuItemClick(Sender: TObject);

    Function CidXEServerCheck( sIp, sNaesun : String ) : Boolean;
    function SetCIDReConnect : Boolean;
    function Check_LEFTSECTION(ATag: integer): Boolean; 
    procedure SetTree_ListItem(sHdcd, sBrcd: String; idx: Integer);
    procedure Func_CheckBrNo;
    function Check_LEFTSECTION1(ATag: integer): Boolean;
    function GetFormBorderIcons: TdxRibbonBorderIcons; override;
    function fSSIO_ErrMsg(aCode: String): String;
    procedure proc_AdminAuthCheck;
    function func_lap_time(in_date, ndate : string): string;
    procedure procQR_lap_time;
    procedure procCS_lap_time; 
		function func_BrNameList_Search: boolean;
		procedure proc_ChartBrCall_Init;   //지사콜 차트 사용 변수 초기화
		procedure proc_ChartBrCall_MakeGrid(AChartUnit : integer); //지사콜 차트 사용 그리드(지사별, 대표번호별) 생성

		procedure pExecPBX(bOk:Boolean);
		procedure pExecSI415OEM(bOk:Boolean);
		procedure pPBXAlive;
		procedure proc_Resize;
		procedure proc_bSSIOCTIRead(AStr:string);

		function func_OB_ClearSky(AAni, ACaller: string):String;
				
		function func_MngBranch(AHdNo: string; var ABrList : TStringList): string;  //내가 관리라는 본사별 지사 리스트
    procedure proc_First_Create;
    procedure pSetCIDState(iImgIndex : Integer);
    procedure HScrollHandler(Sender: TObject; ScrollCode: TScrollCode; var ScrollPos: Integer);
		//로그인한 ID비번 레지스트리에 저장
		procedure proc_SetLoginList;
		function func_SEL01(AGUBUN, APARAM: string): String; // SEL01
		procedure pJON52Create;
		procedure Proc_KDWkSearch;
		procedure Proc_KDWkBeacha;
	public
    { Public declarations }
    iTmrBtmMenu : Integer;

		aiAccTitle: array[0..55] of integer; //적요 2추가 2011.12.19 KHS  앱접수 추가 2013.07.02

		JON00Gubun: array[0..JON_MAX_CNT - 1] of String;  //탭형식 접수창 구분값
		Frm_JON01N: array[0..JON_MAX_CNT - 1] of TFrm_JON01N;
		JON01MNG : array[0..JON_MAX_CNT - 1] of TJON01MNG;

  	Frm_JON34B: array[0..JON_MAX_CNT - 1] of TFrm_JON34B;
		JON34MNG : array[0..JON_MAX_CNT - 1] of TJONMNG;

		Frm_JON012: array[0..JON_MAX_CNT] of TFrm_JON012;  // 고객정보에서 사용하기위해 -1하지 않음. 마지막걸 고객정보에서 사용
		JON012MNG : array[0..JON_MAX_CNT] of TJONMNG;

		Frm_JON17: array[0..JON_MAX_CNT - 1] of TFrm_JON17;  // 접수시 배차를 위해 사용
		JON17MNG : array[0..JON_MAX_CNT - 1] of TJONMNG;
		Frm_JON03: array[0..JON03_MAX_CNT - 1] of TFrm_JON03;
    JON03MNG : array[0..JON03_MAX_CNT - 1] of TJON03MNG;

		Frm_JON52 : array[0..JON03_MAX_CNT] of TFrm_JON52;

		Frm_WORA1: array[0..4] of TFrm_WORA1;
    WORA1MNG : array[0..4] of TJON03MNG;

		Frm_COM50: array[0..30] of TFrm_COM50;
    COM50MNG : array[0..30] of TJONMNG;

		Frm_Media_1: array[0..3] of TFrm_Media_1;
		Frm_Media_2: array[0..3] of TFrm_Media_2;

		gSosokName : TcxLabel;
    gSosokTabSheet : TcxTabSheet;
    gSosokTime : Integer;

    slOrderClickTag : TStringList;
    iJonTop, iJonLeft : Integer;
    iCom50Top, iCom50Left : Integer;

    chkConnWK, chkOnlyWK, chkSelWK : Boolean;

    G_Talk : String;   // 콜마너 전화받기/Billit 전화받기 구분

    in_Person : string; //입금된 기사

    GT_CID_NEW: string; // CID 구분(0 : 예전(서버소켓) 1 : 최신(클라이언트소켓)
    WkPnlOpen: Boolean;
    // 접수창의 폼 인덱스 번호를 넘겨 받는다.[선택기사의 사번을 다시 넘겨줄때 필요함.]
		FRivalInfoSend: string;
		gCurProperties : TcxCurrencyEditProperties;
    gCalProperties : TcxCalcEditProperties;
    gCalHCProperties : TcxCalcEditProperties;
		gLblProperties : TcxLabelProperties;

    gst_CidLog: TStringList;
    gst_SISOLog : TStringList;

    gst_CidLogOrg0,                   // 대표번호
    gst_CidLogOrg1,                   // 인입시간
    gst_CidLogOrg2 : TStringList;     // 고객/기사 구분
    gst_CidLogCnt : Integer;
    gst_CidLogTime : Integer;         // CID로그 저장 2분마다 체크

    iATotal, iACancel : integer;

    j30 : Integer;

    sgExcel, sgRpExcel : String;
    bgExcelOPT : Boolean;
    cxGridExcel : TcxGrid;
    cxGridDBViewExcel : TcxGridDBTableView;
    cxTreeView : TcxTreeList;

    iInterval : integer; //지사콜 발송 시간 interval

    gbCTI_Calling_Status: Boolean;  // CTI서버에 전화걸기 요청상태(True:전화걸기, False:전화끊기)
    gtCTI_Calling_Time: TDateTime;  //    " "     시간저장.

    gbCTI_bCTI_Status ,
    gbCTI_xCTI_Status : Boolean;  // CTI서버에 전화걸기 요청상태(True:전화걸기, False:전화끊기)  20130402 LYB 추가
    gtCTI_bCTI_Time: TDateTime;  //    " "     시간저장.

		iXeCidHeartBeat, iSSIOCidHeartBeat, iSI415CidHeartBeat, iSI415_ACidHeartBeat : Integer;
		bSSIOCTIConnected : Boolean;
		bSI415CTIConnected, bSI415_ACTIConnected : Boolean;

		gsOrderBrNo : String; //[좌측기사]접수창 강제배차시 배차제한 체크를 위한 지사코드
		// Hotkey id
//    prntscrn, Altprntscrn, Ctrlprntscrn : Integer;
		procedure WMHotKey(var Msg : TWMHotKey); message WM_HOTKEY;

    procedure Proc_KillAndStart;

		function ProcessKill: Boolean;
		function ProcessKill_Pro(AName:string): Boolean;
		// 접속기사 오더 거리별 정렬(좌표없을경우 100Km 설정)
    procedure proc_wkOrder(AOrderView: TcxGridDBTableView);
    procedure proc_bubinlist_insert;
    procedure Proc_Statubar_Display;
		procedure proc_stab_ref(sBR_NO: string = '');
    procedure SetSysBtnPosition;
    function IsRun(sFindFile : string): Boolean;
    function func_sysdate: string;
    function proc_UnRead_Cnt : integer;
    procedure proc_UserPermission;
    // 죄측 지사 클릭
		procedure proc_change_brNo;
    procedure Proc_Change_KeyNumber;
    procedure proc_change_HdNo(AHdNo : string);
    // 접속기사 상태별 기사 카운트
    procedure proc_wkCount;
    // 지사별 콜카운트  SMS
    procedure proc_BrOrder_SMS;
    function func_search_hdNo(sBrNo: string): string;
    procedure proc_SlipHis(sConfSlip, sAccTime: string; iJon03 : Integer; bPass : Boolean = False);
		procedure proc_AiRecHis(sConfSlip : string; iJon03 : Integer);
		function Proc_JoinFromView( i03Tag : Integer; sCID : string = '';  sSlip : string = '') : Boolean;
    // 사용한 객체 및 폼 컨트롤, 전역변수 Closing 처리 한다.  CDS. 080901.
    procedure CustTelNum_MainNum_Search(sHP, sMainNum: string);
    procedure RequestDataArea(AcxComboGugun: TcxComboBox; const ASido: string; AGugun: string; AUseAll: Boolean);
    function func_Excel_Check(sHd_No: string = ''; sBr_No: string = ''): string;
    function func_License(ss_rxxml: String): string;
    procedure proc_ExcelDB_NoSms(iType : Integer);
    function func_BrSmsCash(sBrNo: string): integer;
    procedure proc_excel(iType : Integer);

    procedure procExecMessenger( bOk : Boolean );
    procedure pExecMessenger( bOk : Boolean );

    procedure Func_New_KLCnsCid;
		procedure Proc_CidLog(ss_Gubun: Integer; ss_Message: AnsiString = '');
     // CID 연결 체크 및 연결을 한다.  CDS. 080725.
    procedure Proc_CIDConnect;
		// CIDServer.exe 신버전 으로 CID 정보 들어옴.[콜등록 화면 띄어줌] // CID 서버 연결 한다.  CDS. 080725.
    function Func_New_Cid(sRecieve: string): Boolean;
    // 접수화면 중에 "수정" 화면을 찾는다.
    function Proc_UpdateFromFindView( sSlip : String ): boolean;
    // 오더수정, 추가접수 화면을 띄운다. CDS. 080730.
		procedure AcceptFromCreate(sConfSlip, AFirstDatetime, sInsGubun: string; iJon03Tag : Integer);
		procedure proc_SocketWork(bCheck: Boolean);
    // CID 연결을 한다.  CDS. 080725.
    function fnc_cid_conf: Boolean;
    procedure procMainMenuCreateActive(iTag : Integer);
		procedure procMenuCreateActive(iTag: Integer; sTitle: String);
    function func_brcash_check(br_no: string; icharge: Integer): Boolean;
		function func_BrCash_V3(ABRNO: string): Double; // 지사캐쉬 전문
		function func_BrCash_V2(AHDNO, ABRNO, ASLIP: string; ACharge, AStandCharge: Integer; var ABrCharge, ABrSumCharge : Double): Boolean; //접수된 후불 오더들의 합계
		function func_BrCash_V4(AHDNO, ABRNO, ASLIP: string; ACharge, AStandCharge: Integer; var ABrCharge, ABrSumCharge : Double): Boolean; //접수된 후불 오더들의 합계
		procedure TelWorkerByBrSabun(AWkHp, AKeyNum: string; sSlip : String = ''; sGubun : String = '');
    procedure Proc_CIDSetSave;
    Function fGetHdBrGubunInfo : String;
    procedure pSetHdBrGubunInfo( sInfo : String; Var sHdNo, sBrNo, sIdx : String );
		Function getJON03Close( iJon03Tag : Integer ) : Boolean;
		procedure pCallingCID(sCust_Tel, sKeyNumber : String; sSlip : String = ''; sGubun : String = '');
		procedure pCallingOFFERING(sCust_Tel, sKeyNumber, sTargetLine : String );

    function GetWebBrowserHTML(const WebBrowser: TWebBrowser): String;
    function GetHTML(w: TWebBrowser;  bText : Boolean): String;
    procedure procJON03Open;

		function func_SI415SendText(ACode : String): Boolean;
		procedure proc_SI415_AdminLoginSet(AData : string);
		procedure procExecPBX(bOk:Boolean; AProgram : string);
		procedure Proc_IPCCLogOut;
		procedure Proc_IPCCAdminLogOut;
		// 프로그램을 종료 한다.
		function proc_ProgramLogOut: Boolean;
		procedure proc_AdminLogin_Q_exten(AJson: string);
		procedure proc_IdXECIDRead(ARead : string);
    procedure pGongjiStart;
    procedure pLOCAL_SYNC_CHECK;
    procedure pCallMapPopup(bChange: Boolean);
    function fSetIniFile(vType, vHdNo, vOpt: String; var slFile: TStringList; bMsg: Boolean = True): Boolean;
    procedure pGetCidCount(var iCuCnt, iWkCnt: Integer; Var sBizDate : String);
	end;

var
  Frm_Main: TFrm_Main;

  gsCIDMessage: string;  // CID 전문 저장.
  gsCIDMsgFront: string; // CID 바로앞의 전문 내용을 저장한다.

	gsSi415Message, gsSi415MsgFront, gsSi415Msg : Ansistring;
	gsSi415_IPCCMessage, gsSi415_IPCCMsgFront, gsSi415_IPCCMsg : Ansistring;
	gsSi415_2601Message, gsSi415_2601MsgFront, gsSi415_2601Msg : Ansistring;
	
implementation

uses
  xe_Lib, xe_Login, xe_XmlProtocal, xe_system, xe_Func,
  xe_SETA1, xe_xml, xe_Dm, xe_Msg, xe_Query,
  xe_Notice, xe_packet, xe_gnl2, xe_gnl3, xe_JON30, xe_JON31,
	xe_AdminMap ,SZHash, xe_JON07, xe_COM01, xe_COM40,
  xe_CUT011, xe_CUT012, xe_AdminMap01, xe_Jon015, xe_JON016, xe_JON017,
  xe_JON018, xe_JON09, xe_JON10, xe_JON15, xe_JON16,
  xe_JON25, xe_JON32, xe_SMS01, xe_SMS05, xe_SMS06,
  xe_WOR09, xe_WOR11, xe_WOR14, xe_WOR16, xe_WOR17, xe_charge, CidLib, xe_HEL,
  xe_COM02, xe_WOR03, xe_CUT, xe_ImportFile,
  xe_CMP011, xe_CUT09, xe_CUT013, xe_CUT019, xe_WOR01, xe_WOR02, xe_WOR04, xe_WOR05,
  xe_WOR07, xe_WOR08, xe_WOR12, xe_WOR13, xe_WOR18,
  xe_SET06, xe_JON23, xe_JON24, xe_CUT02, xe_CUT03, xe_Flash, xe_SET,
  xe_CUT07, xe_WOR10, xe_JON51, xe_SMS,
  xe_SMS07, xe_JON33, xe_JON02, xe_JON019, xe_JON53,
  CidXeLib, xe_JON35, xe_JON54, xe_JON55, xe_JON011,
  xe_JON56, xe_WORA8, xe_COM11, xe_COM12, xe_WOR, xe_AdminMap02,
  xe_JON30S, xe_JON01Share,
  xe_BTN, xe_BTN01, xe_CUT014, xe_JON59, xe_MessageBox, xe_BTN02,
  xe_BTN03, xe_CUT1, xe_UpdateBox, xe_SET07, xe_SET08, xe_ShuttleMap,
	xe_WOR20, CidSi415Lib, xe_PBX, xe_PBX02, xe_PBX01,
	xe_PBX05, xe_PBX06, xe_PBX08, xe_JON08, xe_JON60, xe_ShuttleMap_New,
	xe_WOR21, xe_AIC10, xe_WOR22, xe_STT_Shuttle,
  xe_JON61, xe_WOR23, xe_WOR24, xe_JON62, xe_ACC, xe_ACC1, xe_ACC10, xe_ACC01, xe_ACC02, xe_ACC03, xe_ACC04, xe_ACC05, xe_ACC06, xe_ACC07, xe_JON63,
  xe_CMP, xe_STT, xe_STT01, xe_AIC01, xe_AIC11, xe_AIC21, xe_AIC02, xe_AIC09, xe_AIC12, xe_AIC13, xe_APP, xe_APP01, xe_USR, xe_USR10, xe_CMP017,
	xe_CMP01, xe_CMP012, xe_CMP013, xe_CMP014, xe_CMP015, xe_CMP016, xe_JON057, xe_JON36, xe_JON58, 
	xe_JON013, xe_COM60, xe_agentCfg, xe_JON00, xe_JON021, xe_JON05, xe_JON05_1;
{$R *.dfm}

{ TFrm_Main }

procedure CloseMessageBox(AWnd: HWND; AMsg: UINT; AIDEvent: UINT_PTR;
  ATicks: DWORD); stdcall;
var
  Wnd: HWND;
begin
  SetDebugeWrite('CloseMessageBox');
  try
    KillTimer(AWnd, AIDEvent);
		// active window of the calling thread should be the message box
    Wnd := GetActiveWindow;
    if IsWindow(Wnd) then
      PostMessage(Wnd, WM_CLOSE, 0, 0);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.GetFormBorderIcons: TdxRibbonBorderIcons;
begin
  Result:= inherited GetFormBorderIcons - [rbiDisplayOptions];
end;

procedure TFrm_Main.pnl_AI_TitleMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
	ReleaseCapture;
	PostMessage(pnl_AiList.Handle, WM_SYSCOMMAND, $F012, 0);
end;

procedure TFrm_Main.grpSetBrch_selectMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('Main.pnl_Brch_selectMouseMove');
  try
		ReleaseCapture;
    PostMessage(TcxGroupBox(sender).Parent.Handle, WM_SYSCOMMAND, $F012, 0);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.pnl_ChartBrCallResize(Sender: TObject);
var i, iTmp, iUnit : integer;
begin
	if (gChartUnitCntB = 0) then exit;

	if (cbChartKindA2.ItemIndex in [1]) and ((cbKindA21.ItemIndex = 0) and (cbKindA22.ItemIndex = 0)) or
																					((cbKindA21.ItemIndex = 1) and (cbKindA23.ItemIndex = 0)) then
	begin
		if pnl_ChartBrCall.Height <= gPnl_ChartBrCallHeight then
		begin
			gChartUnitCntB := 5;
			btnChartA2.Click;
		end
		else
		begin
			//80 유닛당 기준 너비
			iTmp := pnl_ChartBrCall.Height - gPnl_ChartBrCallHeight;
			iUnit := iTmp Div 35;
			if iUnit > 0 then
			begin
				gChartUnitCntB := 5 + iUnit;//gChartUnitCnt + iUnit;
				btnChartA2.Click;

			end;
		end;
		gFromIdx := 0;
		btn_PlayBack.Enabled := False;
		btn_PlayBack.Tag := 0;
		btn_Play.Tag := 1;
		btn_Play.Enabled := False;
		for I := 0 to 5 do
		begin
			gChartPageCnt[i] := 0;  //0:대표번호-일반, 1: 대표번호-실시간, 2:대표번호-취소, 3:지사-일반, 4: 지사-실시간, 5:지사-취소
			gChartNowPage[i] := 0;
		end;
		iTmp := 0;
		iTmp := cxGridSetK1.DataController.RecordCount div gChartUnitCntB;
		if cxGridSetK1.DataController.RecordCount mod gChartUnitCntB > 0 then iTmp := iTmp + 1;
		gChartPageCnt[0] := iTmp; //대표번호-일반모드 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetK2.DataController.RecordCount div gChartUnitCntB;
		if cxGridSetK2.DataController.RecordCount mod gChartUnitCntB > 0 then iTmp := iTmp + 1;
		gChartPageCnt[1] := iTmp; //대표번호-실시간 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetK3.DataController.RecordCount div gChartUnitCntB;
		if cxGridSetK3.DataController.RecordCount mod gChartUnitCntB > 0 then iTmp := iTmp + 1;
		gChartPageCnt[2] := iTmp; //대표번호-취소 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetG1.DataController.RecordCount div gChartUnitCntB;
		if cxGridSetG1.DataController.RecordCount mod gChartUnitCntB > 0 then iTmp := iTmp + 1;
		gChartPageCnt[3] := iTmp; //지사-일반모드 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetG2.DataController.RecordCount div gChartUnitCntB;
		if cxGridSetG2.DataController.RecordCount mod gChartUnitCntB > 0 then iTmp := iTmp + 1;
		gChartPageCnt[4] := iTmp; //지사-실시간모드 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetG2.DataController.RecordCount div gChartUnitCntB;
		if cxGridSetG2.DataController.RecordCount mod gChartUnitCntB > 0 then iTmp := iTmp + 1;
		gChartPageCnt[5] := iTmp; //지사-취소모드 페이지 카운트

		if cbKindA21.ItemIndex = 0 then
		begin
			if cxGridSetG1.DataController.RecordCount > gChartUnitCntB then btn_Play.Enabled := True;
			lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[3]);
		end
		else
		begin
			if cxGridSetK1.DataController.RecordCount > gChartUnitCntB then btn_Play.Enabled := True;
			lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[0]);
		end;

	end;
end;

procedure TFrm_Main.grpSetExcelMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  SetDebugeWrite('Main.pnl_ExcelMouseMove');
	try
		ReleaseCapture;
    PostMessage(TcxGroupBox(sender).Parent.Handle, WM_SYSCOMMAND, $F012, 0);
  except on E: Exception do
		Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.grpSetFavoriteMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('Main.pnl_FavoriteMouseDown');
  try
    grpSetFavorite.BringToFront;
	  ReleaseCapture;
    PostMessage(TcxGroupBox(sender).Handle, WM_SYSCOMMAND, $F012, 0);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.pnl_Set;
var
  i, j, pnl_br_cnt, idx,  iNodeNO, iKeyNumberCnt : Integer;
  ls_Ins, ls_Title, sTemp, vPreHD_NO, sMHdNo, sMHdNm : string;
	iHdCnt, iBrCnt : Integer;
	chkMaster : Boolean;

  aNode: TcxTreeListNode;
  bNode: TcxTreeListNode;
  cNode: TcxTreeListNode;
  sNode: TcxTreeListNode;

  LeftTreePtr : PTreeRec;
  iIndex : LongInt;
  sKeynum, sCustAPP :string;
  sErrLine : String;
  sBfish, sTmp : String;
  LogEncryptData: TIdBytes;
  iEncryptLen, ii: Integer;
begin
	SetDebugeWrite('Main.pnl_Set');
	// 다른 DLL 폼에서 사용위해 StringList에 저장한다.
  scb_HdNo.Clear;   //패밀리권한 본사코드 LYB
  scb_HdNm.Clear;
	scb_HdMainBr.Clear;
	scb_FamilyBrCode.Clear;
  scb_FamilyBrName.Clear;
	scb_FamilyBranch.Clear;
  scb_FamilyWkBranchName.Clear;
  scb_FamilyWkBranchCode.Clear;
	scb_FamilyTaksong.Clear;
	scb_FamilyShuttle4.Clear;

  scb_FamilyDsBranchCode.Clear;
  scb_FamilyDsBranchName.Clear;
	scb_FamilyKeyNumber.Clear;
  scb_FamilySituation_Tel.Clear;  // 지사대표번호- 상황실번호(엔젤 전화걸기-기사 에 사용)
	scb_FamilyKeyNumberAuth.Clear;
	scb_FamilyHeadCode.Clear;

  scbBranchInitChk := False;
	scbBubinListChk := False;

  scb_HeadCode.Clear; // 본사코드  CDS.
  scb_RateMent.Clear; // 요금, 안내맨트
  scb_Branch.Clear; // 지사코드 + 지사명 저장
	scb_HdCode.Clear;
	scb_BranchCode.Clear; // 지사코드 저장
  scb_BranchName.Clear; // 지사명 저장
	scb_KeyNumber.Clear; // 지사대표번호 저장
  scb_Situation_Tel.Clear; // 지사대표번호- 상황실번호(엔젤 전화걸기-기사 에 사용)
	scb_KeyNumberAuth.Clear;
  scb_DsBranchCode.Clear; // 대표번호 연동 지사코드 저장
  scb_DsBranchName.Clear; // 대표번호 연동 지사명 저장
  scb_BranchCoupon.Clear;
	scb_OfficeBaecha.Clear;
	scb_Change_Keynum_yn.Clear;
	scb_BrCardAgentCD.Clear;
  scb_CRCustInfoDayOpen.Clear;
  scb_CRCustInfoSafeMin.Clear;
  scb_CRRouteMgr.Clear;
  scb_CustLevelSeq.Clear;
  scb_CustAPPUseYn.Clear;
  scb_Blowfish_HdCode.Clear;
  scb_Blowfish_HdBrCode.Clear;

	scb_HeadCodeCallBell.Clear;
  scb_OrderToAsk.Clear;
	scb_PlusCallUse.Clear;
	scb_TakAllyUse.Clear;
	scb_AIOutBoundUse.Clear;
	scb_AIOBKeyNumberUse.Clear;
  scb_WkBranchName.Clear;
  scb_WkBranchCode.Clear;
	scb_Taksong.Clear;
	scb_LBS.Clear;
	scb_Shuttle4.Clear;
	scb_MilePayMileSave.Clear;
	scb_CashPayMileSave.Clear;
	scb_CALLDUse.Clear; //자율수수료 사용여부 CALLD 20200219 KHS
	scb_CALLDPer.Clear; //자율수수료율 |30,25,20| 20200219 KHS
	scb_CALLDsetYN.Clear;
	scb_CouponYN.Clear;  // 자체발행쿠폰사용여부 20200324 KHS
  scb_MultiSetYN.Clear;
  scb_Area1.Clear;
  scb_Area2.Clear;
  scb_Area3.Clear;
  scb_ShareNo.Clear;
	scb_SERVICE_TYPE_CHANGE.Clear;
	scb_JON03CMPSupportUse.Clear;
	scb_JON03CMPSupportAMT.Clear;
	scb_JON03CallByInsureFree.Clear;
	
  idx := 0;
  pnl_br_cnt := 0;

  Tree_List.BeginUpdate;
 	Tree_List.Clear;
	chkMaster := False;

	if ( IsFamily ) Or ( GS_BRLISTVIEWMODE ) then     // 20120629 LYB
	begin
    try
			i := 0;

      iNodeNO := 0;
      New(LeftTreePtr);

      if IsFamily then
      begin
				LeftTreePtr^.HDCode := '0000'; // 본사코드
        LeftTreePtr^.HDName := '패밀리본사전체';
        LeftTreePtr^.BRCode := '0000'; // 지사코드
        LeftTreePtr^.BRName := '패밀리전체(통합)';
        LeftTreePtr^.KeyNumber := ''; //대표번호            if GSL_HD_LIST[i, 18] = 'M' then
        LeftTreePtr^.FIndex := iNodeNO;
      end else
      if GS_BRLISTVIEWMODE then
      begin
        LeftTreePtr^.HDCode := '0000';  // 본사코드
        LeftTreePtr^.HDName := '본사전체';
        LeftTreePtr^.BRCode := '0000'; // 지사코드
        LeftTreePtr^.KeyNumber := '';              // 대표번호            if GSL_HD_LIST[i, 18] = 'M' then
        LeftTreePtr^.FIndex := iNodeNO;
      end;

      aNode := Tree_List.Add(nil, LeftTreePtr);
      aNode.CheckGroupType := ncgCheckGroup;

      aNode.Texts[0] := Ifthen(IsFamily, '▒▒[패]패밀리본사전체', '▒▒콜센터통합') ;
      aNode.ImageIndex := 41;
			aNode.SelectedIndex := 41;
			GT_AIUse := False;
			// 0지사코드, 1지사명, 2대표번호, 3기본요금, 4콜센터코드, 5본사코드, 6멘트, 7상황실번호
      while true do
      begin
				if GSL_HD_LIST[i, 0] = '' then break;

				if GSL_HD_LIST[i, 31] = 'y' then GT_AIUse := True;  //AI사용여부
				if GSL_HD_LIST[i, 36] = 'y' then GT_AIUse := True;  //AI-OB사용여부

				try
					// --- 본사코드 ---
          sBfish := '';
          sTemp := GSL_HD_LIST[i, 5];

          ZeroMemory(@LogEncryptData, SizeOf(LogEncryptData));
          SetLength(LogEncryptData, 1024);
          iEncryptLen := BlowFishEncrypt(Copy(_CHK_KEY,8,10) + Copy(_CHK_KEY,23,22), sTemp, LogEncryptData);

          // Hex 코드 만들기..
          for ii := 0 to iEncryptLen - 1 do
          begin
            sBfish := sBfish + ByteToHexaStr(LogEncryptData[ii]);
          end;

          scb_Blowfish_HdCode.Add(sBfish);

          // --- 본사지사코드 ---
          sBfish := '';
          sTemp := GSL_HD_LIST[i, 5] + GSL_HD_LIST[i, 0];

          ZeroMemory(@LogEncryptData, SizeOf(LogEncryptData));
          SetLength(LogEncryptData, 1024);
          iEncryptLen := BlowFishEncrypt(Copy(_CHK_KEY,8,10) + Copy(_CHK_KEY,23,22), sTemp, LogEncryptData);

          // Hex 코드 만들기..
          for ii := 0 to iEncryptLen - 1 do
          begin
            sBfish := sBfish + ByteToHexaStr(LogEncryptData[ii]);
          end;

          scb_Blowfish_HdBrCode.Add(sBfish);
        except
          on e: exception do
          begin
            Assert(False, 'frmMain[pnl_Set]1:LeftMenu생성 scb_Blowfish_HdBrCode Error : '+ E.Message);
          end;
        end;

        if vPreHD_NO <> GSL_HD_LIST[i, 5] then
        begin
          pnl_br_cnt := 0;

          iNodeNO := 0;
          New(LeftTreePtr);
          LeftTreePtr^.HDCode := GSL_HD_LIST[i, 5]; // 본사코드
          LeftTreePtr^.HDName := GSL_HD_LIST[i, 21];
          LeftTreePtr^.FIndex := iNodeNO;

					if GSL_HD_LIST[i, 22] = 'M' then
					begin
            aNode := Tree_List.Add(Nil, LeftTreePtr);
						aNode.CheckGroupType := ncgCheckGroup;
						aNode.Texts[0] := Ifthen(IsFamily, '▒▒[패(M)]', '▒▒[(M)]') + GSL_HD_LIST[i, 21] + '(지사리스트)';
						sMHdNo := GSL_HD_LIST[i, 5];
            sMHdNm := GSL_HD_LIST[i, 21];
						chkMaster := True;
            aNode.ImageIndex := 42;
            aNode.SelectedIndex := 42;
					end else
					begin
            LeftTreePtr^.FIndex := iNodeNO;
            aNode := Tree_List.Add(Nil, LeftTreePtr);
            aNode.CheckGroupType := ncgCheckGroup;
            aNode.Texts[0] := Ifthen(IsFamily, '▒▒[패]', '▒▒') + GSL_HD_LIST[i, 21] + '(지사리스트)';
						if not chkMaster then
						begin
              if IsFamily then
              begin
    						sMHdNo := GSL_HD_LIST[i, 5];
                sMHdNm := GSL_HD_LIST[i, 21];
              end;
						end;
            aNode.ImageIndex := 41;
            aNode.SelectedIndex := 41;
					end;

					scb_HdNo.add(GSL_HD_LIST[i, 5]); // 본사코드
					scb_HdNm.Add(GSL_HD_LIST[i, 21]); // 본사명
//					scb_HeadCodeCallBell.add(GSL_HD_LIST[i, 27]); //콜벨사용 여부 'y'사용
					
					vPreHD_NO := GSL_HD_LIST[i, 5];
          iNodeNO := 1;
        end;

				//CMNIPCC 사용여부 확인
				if GSL_HD_LIST[i, 0] = GT_USERIF.CT then //해당지사와 내 소속콜센터코드가 같으면
				begin
					if GSL_HD_LIST[i,28] = 'y' then 
					begin
						GT_ComID := UpperCase(GSL_HD_LIST[i,29]); //IPCC사용여부 확인 후 대리점 코드입력
						Menu1210.Visible := false;//GT_ComID <> '';
//						GS_EnvFile.WriteString('CID_COMM', 'PBX_ComID' , Trim(GT_ComID));
						if cxCIDListView.Properties.Items.IndexOf('콜마너IPCC') < 0 then
//							cxCIDListView.Properties.Items.Add('콜마너IPCC');
							cxCIDListView.Properties.Items.Insert(5,'콜마너IPCC');
					end else 
					begin
						btnIpccMenu.Visible := False;
						cxTabSheet1.TabVisible := True;
					end;
				end;	

				try
          ls_Title := '[' + IntToStr(pnl_br_cnt + 1) + ']' + GSL_HD_LIST[i, 1];

          case StrToIntDef(GT_USERIF.LV, 0) of
            10: // 상담원.
//              if GT_USERIF.CT <> GSL_HD_LIST[i, 4] then Continue;
              if (GT_USERIF.CT <> GSL_HD_LIST[i, 4]) and (GT_USERIF.CT <> GSL_HD_LIST[i, 26]) then Continue;
            40: // 지사관리자
							if GT_USERIF.BR <> GSL_HD_LIST[i, 0] then
                Continue;
            60:
              ;
          else
            GMessagebox(MSG010, CDMSE);
            Exit;
					end;

          ls_Ins := GSL_HD_LIST[i, 0] + '(' + GSL_HD_LIST[i, 1] + ')';
					// 지사추가
          if (scb_Branch.IndexOf(ls_Ins) < 0) and (ls_Ins <> '()') then
          begin
            New(LeftTreePtr);
            LeftTreePtr^.HDCode := GSL_HD_LIST[i, 5]; // 본사코드
            LeftTreePtr^.HDName := GSL_HD_LIST[i, 21];
            LeftTreePtr^.BRCode := GSL_HD_LIST[i, 0]; // 지사코드
            LeftTreePtr^.BRName := GSL_HD_LIST[i, 1];
            LeftTreePtr^.KeyNumber := GSL_HD_LIST[i, 2]; //대표번호            if GSL_HD_LIST[i, 18] = 'M' then
            LeftTreePtr^.FIndex := iNodeNO;
            if GSL_HD_LIST[i, 18] = 'M' then
            begin
              LeftTreePtr^.FIndex := iNodeNO;
              bNode := Tree_List.AddChild(aNode, LeftTreePtr);
              bNode.CheckGroupType := ncgNone;
              bNode.Texts[0] := ls_Title;

              scb_HdMainBr.Add(GSL_HD_LIST[i, 0] + ',' + GSL_HD_LIST[i, 5]); // 본사별 메인지사
              bNode.ImageIndex := 37;
              bNode.SelectedIndex := 37;
            end else
            begin
              LeftTreePtr^.FIndex := iNodeNO;
              bNode := Tree_List.AddChild(aNode, LeftTreePtr);
              bNode.CheckGroupType := ncgNone;
              bNode.Texts[0] := ls_Title;
              bNode.ImageIndex := 43;
              bNode.SelectedIndex := 43;
            end;
            iKeyNumberCnt := 0;
            sKeynum := '';
            if GSL_HD_LIST[i, 2] = '' then
            begin
              if GSL_HD_LIST[i, 7] <> '' then
              begin
                sKeynum := '[상황:' + GSL_HD_LIST[i, 7] + ']';
              end;
            end else
            begin
              sKeynum := '대표:' + GSL_HD_LIST[i, 2];
              if GSL_HD_LIST[i, 7] <> '' then
                sKeynum := sKeynum + '[상황:' + GSL_HD_LIST[i, 7] + ']';
            end;

            if sKeynum <> '' then
            begin
              cNode := Tree_List.AddChild(bNode, LeftTreePtr);
              cNode.CheckGroupType := ncgNone;
              cNode.Texts[0] := sKeyNum;
              cNode.ImageIndex := 40;
              cNode.SelectedIndex := 40;
              Inc(iKeyNumberCnt);
            end;

            // 본사 첫번째 지사를 넣어준다.
						if sMHdNo = GSL_HD_LIST[i, 5] then
						begin
							scb_FamilyBranch.Add(ls_Ins);
							scb_FamilyBrCode.add(GSL_HD_LIST[i, 0]); // 지사코드
							scb_FamilyBrName.Add(GSL_HD_LIST[i, 1]); // 지사명
							scb_FamilyTaksong.Add(GSL_HD_LIST[i, 19]);
							scb_FamilyShuttle4.Add(GSL_HD_LIST[i, 32]); //#4

							if StrToInt(GSL_HD_LIST[i, 20]) > 0 then
              begin
                 scb_FamilyWkBranchCode.Add(GSL_HD_LIST[i, 0]);
                 scb_FamilyWkBranchName.Add(GSL_HD_LIST[i, 1]);
							end;
						end;

            scb_Branch.Add(ls_Ins); // 지사코드 + 지사명
            scb_HdCode.Add(GSL_HD_LIST[i, 5]); //지사별 본사 코드
            scb_BranchCode.add(GSL_HD_LIST[i, 0]); // 지사코드
						scb_BranchName.Add(GSL_HD_LIST[i, 1]); // 지사명

            scb_BranchCoupon.Add(GSL_HD_LIST[i, 9]);
						scb_OfficeBaecha.Add(GSL_HD_LIST[I, 10]);
						scb_Change_Keynum_yn.Add(GSL_HD_LIST[I, 23]);
						scb_BrCardAgentCD.Add(GSL_HD_LIST[I, 11]); // 카드사용코드
            scb_CRCustInfoDayOpen.Add(GSL_HD_LIST[I, 12]);
            scb_CRCustInfoSafeMin.Add(GSL_HD_LIST[I, 13]);
            scb_CRRouteMgr.Add(GSL_HD_LIST[I, 14]);
            scb_OrderToAsk.Add(GSL_HD_LIST[I, 16]);
						scb_PlusCallUse.Add(GSL_HD_LIST[i, 17]);
						scb_TakAllyUse.Add(GSL_HD_LIST[i, 35]);
						scb_AIOutBoundUse.Add(GSL_HD_LIST[i, 36]);
						scb_Taksong.Add(GSL_HD_LIST[i, 19]);
						scb_LBS.Add(GSL_HD_LIST[i, 30]); //LBS 사용여부
						scb_Shuttle4.Add(GSL_HD_LIST[i, 32]); //#4 사용여부
						scb_MilePayMileSave.Add(GSL_HD_LIST[i, 33]); //마일사용 마일적립
						scb_CashPayMileSave.Add(GSL_HD_LIST[i, 34]); //캐시사용 마일적립

//						scb_CALLDUse.Add(GSL_HD_LIST[i, 39]); //자율수수료 사용여부 CALLD 20200219 KHS
//						scb_CALLDPer.Add(GSL_HD_LIST[i, 40]); //자율수수료율 |30,25,20| 20200219 KHS
//						scb_CALLDsetYN.Add(GSL_HD_LIST[i, 41]); // 자율 수수료 설정 가능여부y->설정메뉴오픈 20200219 KHS
						scb_CouponYN.Add(GSL_HD_LIST[i, 42]);  // 자체발행쿠폰사용여부 20200324 KHS
						scb_MultiSetYN.Add(GSL_HD_LIST[i, 43]);  // 복합결제 설정 여부 y/n  20201104 LYB
						scb_SERVICE_TYPE_CHANGE.Add(GSL_HD_LIST[i, 48]);   // 일반콜 전환 가능 여부 20210705 KHS
						scb_JON03CMPSupportUse.Add(GSL_HD_LIST[i, 49]);    //지원금 사용여부 20210708 KHS 
						scb_JON03CMPSupportAMT.Add(GSL_HD_LIST[i, 50]);    //지원금 액 20210708 KHS 
						scb_JON03CallByInsureFree.Add(GSL_HD_LIST[i, 51]);    // 건당보험료무료 자동적용사용여부 20210906 KM진행사항 KHS
						if StrToInt(GSL_HD_LIST[i, 20]) > 0 then
            begin
              scb_WkBranchCode.Add(GSL_HD_LIST[i, 0]);
              scb_WkBranchName.Add(GSL_HD_LIST[i, 1]);
            end;
            Inc(pnl_br_cnt);
            inc(iNodeNO);
          end else
          // 대표번호 추가
          begin
            if iKeyNumberCnt < 20 then
            begin
              sKeynum := '';
              New(LeftTreePtr);
              LeftTreePtr^.HDCode := GSL_HD_LIST[i, 5]; // 본사코드
              LeftTreePtr^.HDName := GSL_HD_LIST[i, 21];
              LeftTreePtr^.BRCode := GSL_HD_LIST[i, 0]; // 지사코드
              LeftTreePtr^.BRName := GSL_HD_LIST[i, 1];
							LeftTreePtr^.KeyNumber := GSL_HD_LIST[i, 2]; //대표번호            if GSL_HD_LIST[i, 18] = 'M' then
              LeftTreePtr^.FIndex := iNodeNO;
              if GSL_HD_LIST[i, 2] = '' then
              begin
                if GSL_HD_LIST[i, 7] <> '' then
                begin
                  sKeynum := '[상황:' + GSL_HD_LIST[i, 7] + ']';
                end;
              end else
              begin
                sKeynum := '대표:' + GSL_HD_LIST[i, 2];
                if GSL_HD_LIST[i, 7] <> '' then
                  sKeynum := sKeynum + '[상황:' + GSL_HD_LIST[i, 7] + ']';
              end;

              if sKeynum <> '' then
              begin
                cNode := Tree_List.AddChild(bNode, LeftTreePtr);
                cNode.CheckGroupType := ncgNone;
                cNode.Texts[0] := sKeynum;
                cNode.ImageIndex := 40;
                cNode.SelectedIndex := 40;
                Inc(iKeyNumberCnt);
              end;
            end;
          end;

					if (0 > scb_KeyNumber.IndexOf(ls_Ins)) and (ls_Ins <> '') then
					begin
            // 본사 첫번째 지사를 넣어준다.
						if sMHdNo = GSL_HD_LIST[i, 5] then
						begin
              scb_FamilyDsBranchCode.add(GSL_HD_LIST[i, 0]); // 대표번호 연동 지사코드 저장
              scb_FamilyDsBranchName.Add(GSL_HD_LIST[i, 1]); // 대표번호 연동 지사명 저장
							scb_FamilyKeyNumber.Add(Trim(GSL_HD_LIST[i, 2])); // 대표번호
              scb_FamilySituation_Tel.Add(Trim(GSL_HD_LIST[i, 7]));  // 지사대표번호- 상황실번호(엔젤 전화걸기-기사 에 사용)
							scb_FamilyKeyNumberAuth.Add(GSL_HD_LIST[i, 38]);      //대표번호 증명원 여부
							scb_FamilyHeadCode.Add(GSL_HD_LIST[i, 5]); // 본사코드 CDS.
						end;

            scb_DsBranchCode.add(GSL_HD_LIST[i, 0]); // 대표번호 연동 지사코드 저장
            scb_DsBranchName.Add(GSL_HD_LIST[i, 1]); // 대표번호 연동 지사명 저장
						scb_KeyNumber.Add(Trim(GSL_HD_LIST[i, 2])); // 대표번호
            scb_Situation_Tel.Add(Trim(GSL_HD_LIST[i, 7]));  // 지사대표번호- 상황실번호(엔젤 전화걸기-기사 에 사용)
						scb_KeyNumberAuth.Add(GSL_HD_LIST[i, 38]);      //대표번호 증명원 여부
						scb_HeadCode.Add(GSL_HD_LIST[i, 5]); // 본사코드 CDS.

						scb_AIOBKeyNumberUse.Add(GSL_HD_LIST[i, 37]); //AIOB 대표번호사용유무
						scb_RateMent.Add(GSL_HD_LIST[i, 3] + '|' + GSL_HD_LIST[i, 6]); // 요금, 안내맨트
						scb_CustLevelSeq.Add(GSL_HD_LIST[i, 15]);
						scb_CustAPPUseYn.Add(Trim(GSL_HD_LIST[i, 0]) + '|' + Trim(GSL_HD_LIST[i, 2]) + '|' + GSL_HD_LIST[i, 25] + '|' + (GSL_HD_LIST[i, 5]));     // 지사코드|대표번호|지사별 대표번호별 고객어플 사용 유무 |본사코드 저장
						if GSL_HD_LIST[i, 25] = 'y' then TCK_USER_PER.APP_UseYN := '1';

            scb_Area1.Add(GSL_HD_LIST[i, 44]);
            scb_Area2.Add(GSL_HD_LIST[i, 45]);
            scb_Area3.Add(GSL_HD_LIST[i, 46]);
            scb_ShareNo.Add(GSL_HD_LIST[i, 47]);

						////콜벨관련 2016.12.31 KHS////////////////////////////////////////
						scb_HeadCodeCallBell.add(GSL_HD_LIST[i, 27]);  //콜벨사용본사 콜벨사용여부는 사용=y, 미사용 = '' or n
//						scb_KeyNumberAddCallBell.add(Trim(GSL_HD_LIST[i, 28])); // 대표번효 콜벨실착신번호
						////콜벨관련 2016.12.31 KHS////////////////////////////////////////
					end;
        finally
          Inc(i);
        end;
      end;
    except
      on e: exception do
      begin
        Assert(False, E.Message);
        ShowMessage('frmMain[pnl_Set]1:LeftMenu생성:' + e.message);
      end;
    end;

    if GSL_HD_LIST[0, 0] <> '' then
    begin
      for i := 0 to Tree_List.Count - 1 do
      begin
        for j := 0 to Tree_List.Items[i].Count - 1 do
        begin
          LeftTreePtr := Tree_List.Items[i].Items[j].Data;

          if LeftTreePtr^.BRCode = GSL_HD_LIST[0, 0] then
          begin
            try
              if UpperCase(GT_USERIF.RouteMS)[1] in ['M', 'S'] then
              begin
                new(LeftTreePtr);
                sNode := Tree_List.Items[i].Items[j];
                sNode := sNode.Parent;
                LeftTreePtr^.Hint := UpperCase(GT_USERIF.RouteMS)[1];
                LeftTreePtr^.FIndex := 99;
                if UpperCase(GT_USERIF.RouteMS) = 'S' then
                begin
                  bNode := Tree_List.AddChild(sNode, LeftTreePtr);
                  bNode.CheckGroupType := ncgNone;
                  bNode.Texts[0] := '[이관받은지사(S)]';
                end else
                begin
                  bNode := Tree_List.AddChild(sNode, LeftTreePtr);
                  bNode.CheckGroupType := ncgNone;
                  bNode.Texts[0] := '[이관받은지사(M)]';
                end;
                break;
              end;
            except
              on e: exception do
              begin
                Assert(False, E.Message);
                ShowMessage('frmMain[pnl_Set]2:LeftMenu생성:' + e.Message);
              end;
            end;
          end;
        end;
      end;
    end;
    GT_SEL_BRNO.Idx := 0;
    GT_SEL_BRNO.GUBUN := '0';

    GT_SEL_BRNO.BrNo := GT_USERIF.BR;
		GT_SEL_BRNO.HDNO := sMHdNo;//GT_USERIF.HD;

		if GT_SEL_BRNO.HDNO = '' then GT_SEL_BRNO.HDNO := GT_USERIF.HD;

    if Not scbBubinListChk then
    begin
      proc_bubinlist_insert;
      Proc_CustGroup;
      scbBubinListChk := True;
    end;

		if TCK_USER_PER.CUR_CallBell = '1' then
		begin
			for i := 0 to scb_HeadCodeCallBell.count - 1 do
			begin
				if scb_HeadCodeCallBell[i] = 'y' then
				begin
					gs_CallBellUse := True;
					btnCallBellMenu.caption := '콜벨/업소관리';
				end	else
				begin
					gs_CallBellUse := False;
					btnCallBellMenu.caption := '업소관리';
				end;

				if gs_CallBellUse then Break;
			end;
		end;
	end else
  begin
    try
      i := 0;

      New(LeftTreePtr);
      LeftTreePtr^.HDCode := GSL_HD_LIST[i, 5]; // 본사코드
      LeftTreePtr^.HDName := GSL_HD_LIST[i, 21];
      LeftTreePtr^.FIndex := 0;

			scb_HdNo.add(GSL_HD_LIST[i, 5]); // 본사코드
			scb_HdNm.Add(GSL_HD_LIST[i, 21]); // 본사명
//			scb_HeadCodeCallBell.add(GSL_HD_LIST[i, 27]); //콜벨사용 여부 'y'사용

			aNode := Tree_List.Add(Nil, LeftTreePtr);
			aNode.CheckGroupType := ncgCheckGroup;
			aNode.Texts[0] :=  '콜센터(지사리스트)';

      aNode.ImageIndex := 42;
			aNode.SelectedIndex := 42;
			GT_AIUse := False;
			// 0지사코드, 1지사명, 2대표번호, 3기본요금, 4콜센터코드, 5본사코드, 6멘트, 7상황실번호
			while true do
      begin
        if GSL_HD_LIST[i, 0] = '' then  break;

				if GSL_HD_LIST[i, 31] = 'y' then  //AI사용여부
					GT_AIUse := True;	
				if GSL_HD_LIST[i, 36] = 'y' then  //AI-OB사용여부
					GT_AIUse := True;	

        try
          // --- 본사코드 ---
          sBfish := '';
          sTemp := GSL_HD_LIST[i, 5];

          ZeroMemory(@LogEncryptData, SizeOf(LogEncryptData));
          SetLength(LogEncryptData, 1024);
          iEncryptLen := BlowFishEncrypt(Copy(_CHK_KEY,8,10) + Copy(_CHK_KEY,23,22), sTemp, LogEncryptData);

          // Hex 코드 만들기..
          for ii := 0 to iEncryptLen - 1 do
          begin
            sBfish := sBfish + ByteToHexaStr(LogEncryptData[ii]);
          end;

          scb_Blowfish_HdCode.Add(sBfish);

          // --- 본사지사코드 ---
          sBfish := '';
          sTemp := GSL_HD_LIST[i, 5] + GSL_HD_LIST[i, 0];

          ZeroMemory(@LogEncryptData, SizeOf(LogEncryptData));
          SetLength(LogEncryptData, 1024);
          iEncryptLen := BlowFishEncrypt(Copy(_CHK_KEY,8,10) + Copy(_CHK_KEY,23,22), sTemp, LogEncryptData);

          // Hex 코드 만들기..
          for ii := 0 to iEncryptLen - 1 do
          begin
            sBfish := sBfish + ByteToHexaStr(LogEncryptData[ii]);
          end;

          scb_Blowfish_HdBrCode.Add(sBfish);
        except
          on e: exception do
          begin
            Assert(False, 'frmMain[pnl_Set]1:LeftMenu생성 scb_Blowfish_HdBrCode Error : '+ E.Message);
          end;
        end;

        New(LeftTreePtr);
        LeftTreePtr^.HDCode := GSL_HD_LIST[i, 5]; // 본사코드
				LeftTreePtr^.HDName := GSL_HD_LIST[i, 21];
				LeftTreePtr^.BRCode := GSL_HD_LIST[i, 0]; // 지사코드
				LeftTreePtr^.BRName := GSL_HD_LIST[i, 1];
				LeftTreePtr^.KeyNumber := GSL_HD_LIST[i, 2]; //대표번호
				LeftTreePtr^.FIndex := 1;

				//CMNIPCC 사용여부 확인
				if GSL_HD_LIST[i, 0] = GT_USERIF.CT then //해당지사와 내 소속콜센터코드가 같으면
				begin
					if GSL_HD_LIST[i,28] = 'y' then 
					begin
						GT_ComID := UpperCase(GSL_HD_LIST[i,29]); //IPCC사용여부 확인 후 대리점 코드입력
						Menu1210.Visible := false;//GT_ComID <> '';
//						GS_EnvFile.WriteString('CID_COMM', 'PBX_ComID' , Trim(GT_ComID));
						if cxCIDListView.Properties.Items.IndexOf('콜마너IPCC') < 0 then
							cxCIDListView.Properties.Items.Insert(5,'콜마너IPCC');
//							cxCIDListView.Properties.Items.Add('콜마너IPCC');
					end else 
					begin
						btnIpccMenu.Visible := False;
						cxTabSheet1.TabVisible := True;
					end;
				end;	

				try
          ls_Title := '[' + IntToStr(pnl_br_cnt + 1) + ']' + GSL_HD_LIST[i, 1];

          case StrToIntDef(GT_USERIF.LV, 0) of
            10: // 상담원.
//              if GT_USERIF.CT <> GSL_HD_LIST[i, 4] then Continue;
              if (GT_USERIF.CT <> GSL_HD_LIST[i, 4]) and (GT_USERIF.CT <> GSL_HD_LIST[i, 26]) then Continue;
            40: // 지사관리자
              if GT_USERIF.BR <> GSL_HD_LIST[i, 0] then
                Continue;
            60:
              ;
          else
            GMessagebox(MSG010, CDMSE);
            Exit;
          end;

          ls_Ins := GSL_HD_LIST[i, 0] + '(' + GSL_HD_LIST[i, 1] + ')';
          // 지사추가
					if not Check_ID(GT_USERIF.ID, GSL_HD_LIST[i, 0]) then
          begin

            if (scb_Branch.IndexOf(ls_Ins) < 0) and (ls_Ins <> '()') then
            begin
              if GSL_HD_LIST[i, 18] = 'M' then
              begin
                bNode := Tree_List.AddChild(aNode, LeftTreePtr);
                bNode.CheckGroupType := ncgNone;
                bNode.Texts[0] := ls_Title;
                sMHdNo := GSL_HD_LIST[i, 5];
                chkMaster := True;
                bNode.ImageIndex := 37;
                bNode.SelectedIndex := 37;
              end else
              begin
                bNode := Tree_List.AddChild(aNode, LeftTreePtr);
                bNode.CheckGroupType := ncgNone;
                bNode.Texts[0] := ls_Title;
                if not chkMaster then
                begin
                  sMHdNo := GSL_HD_LIST[i, 5];
                end;
                bNode.ImageIndex := 43;
                bNode.SelectedIndex := 43;
              end;

              sKeynum := '';

              if GSL_HD_LIST[i, 2] = '' then
              begin
                if GSL_HD_LIST[i, 7] <> '' then
                begin
                  sKeynum := '[상황:' + GSL_HD_LIST[i, 7] + ']';
                end;
              end else
              begin
                sKeynum := '대표:' + GSL_HD_LIST[i, 2];
                if GSL_HD_LIST[i, 7] <> '' then
                  sKeynum := sKeynum + '[상황:' + GSL_HD_LIST[i, 7] + ']';
              end;

              try
                if sKeynum <> '' then
                begin
                  LeftTreePtr^.FIndex := 2;
                  cNode := Tree_List.AddChild(bNode, LeftTreePtr);
                  cNode.CheckGroupType := ncgNone;
                  cNode.Texts[0] := sKeynum;
                  cNode.ImageIndex := 40;
                  cNode.SelectedIndex := 40;
                end;
              except
                on e: exception do
                begin
                  Assert(False, 'frmMain[pnl_Set]1:LeftMenu생성 sKeynum Error : ' + sErrLine + ':' + E.Message);
                end;
              end;

							scb_Branch.Add(ls_Ins); // 지사코드 + 지사명
              scb_HdCode.Add(GSL_HD_LIST[i, 5]); //지사별 본사 코드

							scb_HdNo.add(GSL_HD_LIST[i, 5]); // 본사코드
							scb_HdNm.Add(GSL_HD_LIST[i, 21]); // 본사명
//							scb_HeadCodeCallBell.add(GSL_HD_LIST[i, 27]); //콜벨사용 여부 'y'사용

              scb_BranchCode.add(GSL_HD_LIST[i, 0]); // 지사코드
							scb_BranchName.Add(GSL_HD_LIST[i, 1]); // 지사명

              scb_BranchCoupon.Add(GSL_HD_LIST[i, 9]);
							scb_OfficeBaecha.Add(GSL_HD_LIST[I, 10]);
							scb_Change_Keynum_yn.Add(GSL_HD_LIST[I, 23]);
							scb_BrCardAgentCD.Add(GSL_HD_LIST[I, 11]); // 카드사용코드

							scb_CRCustInfoDayOpen.Add(GSL_HD_LIST[I, 12]);
							scb_CRCustInfoSafeMin.Add(GSL_HD_LIST[I, 13]);
							scb_CRRouteMgr.Add(GSL_HD_LIST[I, 14]);
              scb_OrderToAsk.Add(GSL_HD_LIST[I, 16]);

							scb_PlusCallUse.Add(GSL_HD_LIST[i, 17]);
							scb_TakAllyUse.Add(GSL_HD_LIST[i, 35]);
							scb_AIOutBoundUse.Add(GSL_HD_LIST[i, 36]);
							scb_Taksong.Add(GSL_HD_LIST[i, 19]);
							scb_LBS.Add(GSL_HD_LIST[i, 30]); //LBS 사용여부
							scb_Shuttle4.Add(GSL_HD_LIST[i, 32]); //#4 사용여부
							scb_MilePayMileSave.Add(GSL_HD_LIST[i, 33]); //마일사용 마일적립
							scb_CashPayMileSave.Add(GSL_HD_LIST[i, 34]); //캐시사용 마일적립

	//						scb_CALLDUse.Add(GSL_HD_LIST[i, 39]); //자율수수료 사용여부 CALLD 20200219 KHS
	//						scb_CALLDPer.Add(GSL_HD_LIST[i, 40]); //자율수수료율 |30,25,20| 20200219 KHS
	//						scb_CALLDsetYN.Add(GSL_HD_LIST[i, 41]); // 자율 수수료 설정 가능여부y->설정메뉴오픈 20200219 KHS
							scb_CouponYN.Add(GSL_HD_LIST[i, 42]);  // 자체발행쿠폰사용여부 20200324 KHS
							scb_MultiSetYN.Add(GSL_HD_LIST[i, 43]);  // 복합결제 설정 여부 y/n  20201104 LYB
							scb_SERVICE_TYPE_CHANGE.Add(GSL_HD_LIST[i, 48]);   // 일반콜 전환 가능 여부 20210705 KHS
							scb_JON03CMPSupportUse.Add(GSL_HD_LIST[i, 49]);    //지원금 사용여부 20210708 KHS 
							scb_JON03CMPSupportAMT.Add(GSL_HD_LIST[i, 50]);    //지원금 액 20210708 KHS 
							scb_JON03CallByInsureFree.Add(GSL_HD_LIST[i, 51]);    // 건당보험료무료 자동적용사용여부 20210906 KM진행사항 KHS
							
							if StrToInt(GSL_HD_LIST[i, 20]) > 0 then
              begin
                scb_WkBranchCode.Add(GSL_HD_LIST[i, 0]);
                scb_WkBranchName.Add(GSL_HD_LIST[i, 1]);
              end;
              Inc(pnl_br_cnt);
            end else
            begin
              sKeynum := '';

							if GSL_HD_LIST[i, 2] = '' then
              begin
                if GSL_HD_LIST[i, 7] <> '' then
                begin
                  sKeynum := '[상황:' + GSL_HD_LIST[i, 7] + ']';
                end;
              end else
              begin
								sKeynum := '대표:' + GSL_HD_LIST[i, 2];
                if GSL_HD_LIST[i, 7] <> '' then
                  sKeynum := sKeynum + '[상황:' + GSL_HD_LIST[i, 7] + ']';
              end;

              try
                if sKeynum <> '' then
                begin
                  LeftTreePtr^.FIndex := 2;
                  cNode := Tree_List.AddChild(bNode, LeftTreePtr);
                  cNode.CheckGroupType := ncgNone;
                  cNode.Texts[0] := sKeynum;

                  cNode.ImageIndex := 40;
                  cNode.SelectedIndex := 40;
                end;
              except
                on e: exception do
                begin
                  Assert(False, 'frmMain[pnl_Set]1:LeftMenu생성 sKeynum Error : ' + sErrLine + ':' + E.Message);
                end;
              end;
            end;

						if (0 > scb_KeyNumber.IndexOf(ls_Ins)) and (ls_Ins <> '') then
            begin
              scb_DsBranchCode.add(GSL_HD_LIST[i, 0]); // 대표번호 연동 지사코드 저장
							scb_DsBranchName.Add(GSL_HD_LIST[i, 1]); // 대표번호 연동 지사명 저장
							scb_KeyNumber.Add(Trim(GSL_HD_LIST[i, 2])); // 대표번호
              scb_Situation_Tel.Add(Trim(GSL_HD_LIST[i, 7]));  // 지사대표번호- 상황실번호(엔젤 전화걸기-기사 에 사용)

							scb_KeyNumberAuth.Add(GSL_HD_LIST[i, 38]);      //대표번호 증명원 여부
							scb_AIOBKeyNumberUse.Add(GSL_HD_LIST[i, 37]); //AIOB 대표번호사용유무
							scb_HeadCode.Add(GSL_HD_LIST[i, 5]); // 본사코드 CDS.
							scb_RateMent.Add(GSL_HD_LIST[i, 3] + '|' + GSL_HD_LIST[i, 6]); // 요금, 안내맨트
							scb_CustLevelSeq.Add(GSL_HD_LIST[i, 15]);
							scb_CustAPPUseYn.Add(Trim(GSL_HD_LIST[i, 0]) + '|' + Trim(GSL_HD_LIST[i, 2]) + '|' + GSL_HD_LIST[i, 25] + '|' + (GSL_HD_LIST[i, 5]));     // 지사코드|대표번호|지사별 대표번호별 고객어플 사용 유무 |본사코드 저장
							if GSL_HD_LIST[i, 25] = 'y' then TCK_USER_PER.APP_UseYN := '1';

              scb_Area1.Add(GSL_HD_LIST[i, 44]);
              scb_Area2.Add(GSL_HD_LIST[i, 45]);
              scb_Area3.Add(GSL_HD_LIST[i, 46]);
              scb_ShareNo.Add(GSL_HD_LIST[i, 47]);

							////콜벨관련 2016.12.31 KHS////////////////////////////////////////
							scb_HeadCodeCallBell.add(GSL_HD_LIST[i, 27]);  //콜벨사용본사 콜벨사용여부는 사용=y, 미사용 = '' or n
//							scb_KeyNumberAddCallBell.add(Trim(GSL_HD_LIST[i, 28])); // 대표번효 콜벨실착신번호
							////콜벨관련 2016.12.31 KHS////////////////////////////////////////
						end;
          end;
        finally
          Inc(i);
        end;
      end;
    except
      on e: exception do
      begin
        Assert(False, 'frmMain[pnl_Set]1:LeftMenu생성 Error : ' + sErrLine + ':' + E.Message);
        ShowMessage('frmMain[pnl_Set]1:LeftMenu생성:' + e.message);
      end;
    end;

    GT_SEL_BRNO.Idx := 0;
    GT_SEL_BRNO.GUBUN := '0';

    GT_SEL_BRNO.BrNo := GT_USERIF.BR;
		GT_SEL_BRNO.HDNO := GT_USERIF.HD;
  end;

  for i := 0 to Tree_List.Count - 1 do
  begin
    if Tree_List.Items[i].Level = 0 then
      Tree_List.Items[i].Expand(True);

    for j := 0 to Tree_List.Items[i].Count - 1 do
      if Tree_List.Items[i].Items[j].Level = 1 then
        Tree_List.Items[i].Items[j].Collapse(True)
      else
        Tree_List.Items[i].Items[j].Collapse(True);
  end;

	Tree_List.EndUpdate;

	if TCK_USER_PER.CUR_CallBell = '1' then
	begin
		for i := 0 to scb_HeadCodeCallBell.count - 1 do
		begin
			if scb_HeadCodeCallBell[i] = 'y' then
			begin
				gs_CallBellUse := True;
				btnCallBellMenu.caption := '콜벨/업소관리';
			end else
			begin
				gs_CallBellUse := False;
				btnCallBellMenu.caption := '업소관리';
			end;

			if gs_CallBellUse then Break;
		end;
	end;

  if ( IsFamily ) then
  begin
    mLEFT_HdCd := GT_SEL_BRNO.HDNO;
    mLEFT_Idx  := GT_SEL_BRNO.Idx;

    // 패밀리 본사 마스터 선택 처리
    Tree_List.Tag := 1;
    SetTree_ListItem(sMHdNo, '', 0);
    Tree_List.Tag := 0;
  end else
  begin
    Tree_List.Items[0].Selected := True;
    LeftTreePtr := Tree_List.Items[0].Data;
  end;

  if ( IsFamily ) Or
     ( ( GS_BRLISTVIEWMODE ) And ( mLEFT_SectionIndex = 1 ) ) then
    advTPTPna1.Caption := '   (통합)::' + sMHdNm + '   '
  else
    advTPTPna1.Caption := '   (통합)::콜센터통합' + '   ';

  advTPTPna1.Hint    := advTPTPna1.Caption;

  ReadINISection(GT_SEL_BRNO.HDNO);      //2012.09.05 KHS
  scbBranchInitChk := True;
end;

procedure TFrm_Main.pnl_TapiCallingStatusMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('Main.pnl_TapiCallingStatusMouseMove');
	ReleaseCapture;
  PostMessage(TcxGroupBox(sender).Parent.Handle, WM_SYSCOMMAND, $F012, 0);
end;

procedure TFrm_Main.pPBXAlive;
begin
	try
		tmr_SI415check.Enabled := True;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

// Trap Hotkey Messages
procedure TFrm_Main.WMHotKey (var Msg : TWMHotKey);
begin
{  if bPrintYesNo then
  begin
    if ( Msg.HotKey = prntscrn ) then
    begin
			Msg.hotkey := 0;
			Log('Print Screen Press Key', LOGDATAPATHFILE);
    end else
    if ( Msg.HotKey = Altprntscrn ) then
		begin
      Msg.hotkey := 0;
			Log('Alt + Print Screen Press Key', LOGDATAPATHFILE);
		end else
		if ( Msg.HotKey = Ctrlprntscrn ) then
    begin
      Msg.hotkey := 0;
      Log('Ctrl + Print Screen Press Key', LOGDATAPATHFILE);
    end;
  end;}
end;

procedure TFrm_Main.PrintScreenIdle(Sender: TObject; var Done: Boolean);
const
  MAX_CLIPBOARD_TRIES = 10;
  CLIPBOARD_WAIT_TIME = 500;
var
  tries : Integer;
  success : Boolean;
begin
//-  SetDebugeWrite('Main.PrintScreenIdle');
  if bPrintYesNo then
  begin
    if GetAsyncKeyState(VK_SNAPSHOT) <> 0 then
    begin
      success := False;
      tries := 0;
      while (not success) and (tries < MAX_CLIPBOARD_TRIES) do
      begin
        try
          Clipboard.Clear;
          success := True;
          Log('Screen Press Key Clipboard Clear', LOGDATAPATHFILE);
        except
          Inc(tries);
          Sleep(CLIPBOARD_WAIT_TIME);
          Log('Screen Press Key Clipboard Not Clear', LOGDATAPATHFILE);
        end;
      end;

//-      ClipBoard.Clear;
//-      showmessage('Print Screen 키를 눌렀군');
      Exit;
    end;
    Done := True;
  end;
end;


procedure TFrm_Main.ProcessException(Sender: TObject; E: Exception);
  function ConvertAddr(Address: Pointer): Pointer;
  var
    Info: TMemoryBasicInformation;
    Temp: array[0..MAX_PATH] of Char;
  begin
    if Address = nil
    then Result := nil { Always convert nil to nil }
    else begin
      VirtualQuery(Address, Info, sizeof(Info));
      if (Info.State <> MEM_COMMIT)
      or (GetModuleFilename(THandle(Info.AllocationBase), Temp, SizeOf(Temp))= 0)
      then GetModuleFileName(HInstance, Temp, SizeOf(Temp))
      else Integer(Address) := Integer(Address) - Integer(Info.AllocationBase);
      { offset from code start; code start set by linker to $1000 }
      { this lines it up with the .map file. To use Search|Find Error add $1000 back on }
      Result := Pointer(Integer(Address) - $1000);
      end; {else}
  end;

  function Address2Str(Addr: Pointer): string;
  begin
    Result := Format('%p', [Addr]);
  end;
var
  sTmp: string;
  TmpPointer : Pointer;
  TmpLongWord : LongWord;
begin
  try
     if E.ClassName = 'EdxGdipException' then
    begin
      // GDI+ 오류 무시
    end else
    if E.ClassName = 'EDBEditError' then
    begin
      GMessagebox(MSG420 + CRLF + MSG419, CDMSE);
    end else
    begin
      sTmp := 'CN:' + string(E.ClassName);
      sTmp := sTmp + ' /Msg:' + E.Message + '/' + Sender.ClassName;

      TmpPointer := ExceptAddr;
      Move (TmpPointer, TmpLongWord, SizeOf(TmpLongWord));
      sTmp := sTmp + '/ExceptAddr:' + Address2Str(ConvertAddr(ExceptAddr));

      Log(sTmp, LOGDATAPATHFILE);

      Assert(False, sTmp);

      Screen.Cursor := crDefault;
    end;
  except
  end;
end;

procedure TFrm_Main.Proc_CidLog(ss_Gubun: Integer; ss_Message: AnsiString);
var
  i, iRow : Integer;
  log_file, log_file1: file of byte;
  lst_CidLog, lst_Row: TStringList;
  ls_StartTime : string;
  ss_MessageOrg, sTmp : AnsiString;

  lst_BlowFishCidLog,
  gst_CidLog1: TStringList;
  sErrLine : String;
begin
	ss_MessageOrg := ss_Message;
  case ss_Gubun of
		10: begin
			// 로그 파일 초기화.                         100170120063
			SetDebugeWrite('Main.Proc_CidLog 10');
      try
        ls_StartTime := StartDateTime('yyyy-mm-dd hh:nn:ss');
        if FileExists(CIDLOGPATHFILE) then
        begin
          lst_CidLog := TStringList.Create;
          lst_CidLog.LoadFromFile(CIDLOGPATHFILE);
          lst_BlowFishCidLog := TStringList.Create;
          gst_CidLog.Clear;
          lst_BlowFishCidLog.Clear;
          lst_Row := TStringList.Create;
          try
            for i := 0 to lst_CidLog.Count - 1 do
            begin
              sTmp := CID_Decode.DecodeString(lst_CidLog[i]);
              if sTmp = '' then Continue;
              GetTextSeperationEx2('/', sTmp, lst_Row);
              if lst_Row.Count > 2 then
              begin
                if ls_StartTime < lst_Row[2] then
                begin
                  gst_CidLog.Add(sTmp);
                  lst_BlowFishCidLog.Add(lst_CidLog[i]);
                end;
              end;
            end;
           lst_BlowFishCidLog.SaveToFile(CIDLOGPATHFILE);
          finally
            FreeAndNil(lst_BlowFishCidLog);
            FreeAndNil(lst_Row);
            FreeAndNil(lst_CidLog);
          end;
        end;

        if FileExists(CIDLOGPATHFILE1) then
        begin
          lst_CidLog := TStringList.Create;
          gst_CidLog1 := TStringList.Create;
          lst_CidLog.LoadFromFile(CIDLOGPATHFILE1);
          ls_StartTime := StartDateTime('yyyy-mm-dd hh:nn:ss');

          gst_CidLogOrg0.Clear;
          gst_CidLogOrg1.Clear;
          gst_CidLogOrg2.Clear;
					gst_CidLogCnt := 0;

					gst_CidLog1.Clear;
          lst_Row := TStringList.Create;
          try
            for i := 0 to lst_CidLog.Count - 1 do
            begin
              GetTextSeperationEx2('/', lst_CidLog[i], lst_Row);
              if lst_Row.Count >= 2 then
              begin
                if ls_StartTime < lst_Row[1] then
                begin
									gst_CidLog1.Add(lst_CidLog[i]);
									gst_CidLogOrg0.Add(lst_Row[0]);
									gst_CidLogOrg1.Add(lst_Row[1]);
									if lst_Row.Count > 2 then
                    gst_CidLogOrg2.Add(lst_Row[2])
                  else
                    gst_CidLogOrg2.Add('')
                end;
              end;
            end;
            gst_CidLogCnt := gst_CidLogOrg0.Count;
            gst_CidLog1.SaveToFile(CIDLOGPATHFILE1);
          finally
            FreeAndNil(lst_Row);
            FreeAndNil(lst_CidLog);
            FreeAndNil(gst_CidLog1);
          end;
        end;
      except on E: Exception do
        Assert(False, 'LineNo ' + sErrLine + ' - ' +E.Message);
      end;
    end;
    90: // 로그 기록.
      begin
        SetDebugeWrite('Main.Proc_CidLog 90');
        if Trim(ss_Message) = '' then Exit;
				try
					ss_Message := CID_Encode.Encode(ss_Message);

					if Trim(ss_Message) = '' then Exit;
					gst_CidLog.Add(ss_MessageOrg);

					FileMode := fmOpenWrite;
					AssignFile(log_file, CIDLOGPATHFILE);
					if FileExists(CIDLOGPATHFILE) = True then
            Reset(log_file)
          else
            Rewrite(log_file);
          Seek(log_file, filesize(log_file));
          BlockWrite(log_file, PAnsiChar(ss_Message)^, Length(ss_Message));
          CloseFile(log_file);

					try
						lst_Row := TStringList.Create;
						GetTextSeperationEx2('/', ss_MessageOrg, lst_Row);
						if lst_Row.Count > 2 then
              ss_MessageOrg := lst_Row[0]+ '/' + lst_Row[2];

						gst_CidLogOrg0.Add(lst_Row[0]);
						gst_CidLogOrg1.Add(lst_Row[2]);
						gst_CidLogOrg2.Add('');

            FileMode := fmOpenWrite;
            AssignFile(log_file1, CIDLOGPATHFILE1);
            if FileExists(CIDLOGPATHFILE1) = True then
              Reset(log_file1)
            else
              Rewrite(log_file1);
            Seek(log_file1, filesize(log_file1));
            BlockWrite(log_file1, PAnsiChar(ss_MessageOrg)^, Length(ss_MessageOrg));
            CloseFile(log_file1);
          finally
            FreeAndNil(lst_Row);
            // BlockWrite로 하면 엔터값이 안먹혀서..로딩후 다시저장하면 엔터값이 먹힘..
            try
              gst_CidLog1 := TStringList.Create;
              try
                gst_CidLog1.LoadFromFile(CIDLOGPATHFILE);
                gst_CidLog1.SaveToFile(CIDLOGPATHFILE);
              finally
                FreeAndNil(gst_CidLog1);
              end;
            except on E: Exception do
              Assert(False, E.Message);
            end;
          end;
        except on E: Exception do
          Assert(False, E.Message);
        end;
      end;
    88: // 로그 파일 수정.(기사/고객 실제 적용)
      begin
        SetDebugeWrite('Main.Proc_CidLog Start 88');
        if FileExists(CIDLOGPATHFILE1) then
        begin
          try
            if gst_CidLog.Count = gst_CidLogCnt then Exit;

            lst_CidLog := TStringList.Create;
            lst_CidLog.Clear;
            try
              for i := 0 to gst_CidLogOrg0.Count - 1 do
              begin
                lst_CidLog.Add(gst_CidLogOrg0[i] + '/' + gst_CidLogOrg1[i] + '/' + gst_CidLogOrg2[i])
              end;
              lst_CidLog.Sort;
            finally
              gst_CidLogCnt := gst_CidLogOrg0.Count;
              lst_CidLog.SaveToFile(CIDLOGPATHFILE1);
            end;
          except on E: Exception do
            Assert(False, E.Message);
          end;
        end;
        SetDebugeWrite('Main.Proc_CidLog End 88');
      end;
    98: // 로그 파일 수정.(기사/고객 여부 저장)
      begin
        SetDebugeWrite('Main.Proc_CidLog Start 98');
        if FileExists(CIDLOGPATHFILE1) then
        begin
          try
            iRow := gst_CidLogOrg1.IndexOf(CID_GET_TIME);
            if iRow >= 0 then
                gst_CidLogOrg2[iRow] := ss_MessageOrg;
          except on E: Exception do
            Assert(False, E.Message);
          end;
        end;
        SetDebugeWrite('Main.Proc_CidLog End 98');
      end;
    99: // 로그 파일 수정.
      begin
        SetDebugeWrite('Main.Proc_CidLog Start 99');
        if FileExists(CIDLOGPATHFILE1) then
        begin
          try
            lst_CidLog := TStringList.Create;
            lst_CidLog.LoadFromFile(CIDLOGPATHFILE1);

            lst_Row := TStringList.Create;
            try
              lst_CidLog.Sort;
              for i := 0 to lst_CidLog.Count - 1 do
              begin
                GetTextSeperationEx2('/', lst_CidLog[i], lst_Row);
                if lst_Row.Count >= 2 then
                begin
                  if lst_Row[1] = CID_GET_TIME then
                  begin
                    lst_CidLog[i] := StringReplace(lst_CidLog[i], lst_CidLog[i], lst_CidLog[i] + '/' + ss_MessageOrg, [rfReplaceAll]);
                    Break;
                  end;
                end;
              end;
            finally
							lst_CidLog.SaveToFile(CIDLOGPATHFILE1);
              FreeAndNil(lst_CidLog);
              FreeAndNil(lst_Row);
            end;
          except on E: Exception do
            Assert(False, E.Message);
          end;
        end;
        SetDebugeWrite('Main.Proc_CidLog End 99');
      end;
  end;
end;

procedure TFrm_Main.Proc_GlobalVariableReSet;
begin
  SetDebugeWrite('Main.Proc_GlobalVariableReSet');
  try
    with GT_USERIF do
    begin
      ID := '';
      PW := '';
      NM := '';
      HD := '';
      BR := '';
      CT := '';
      LV := '';
      MC := '';
      IP := '';
      SA := '';
      Excel_Use := '';
      CallCnt := '';
      VH := '';
      MainGbnInfo:='';
    end;
    // 메뉴, 화면 권한 Create..
    GT_Permition.aryGrpCode   := TStringList.Create;
    GT_Permition.aryMmCode    := TStringList.Create;
    GT_Permition.aryDetCode   := TStringList.Create;
    GT_Permition.aryMemPer    := TStringList.Create;
    GT_Permition.aryMemDetPer := TStringList.Create;
    GT_Permition.aryMmNumber  := TStringList.Create;
    GT_Permition.aryMenuAuth  := TStringList.Create;
    GT_Permition.aryMmGrpName := TStringList.Create;
    GT_Permition.aryMmName    := TStringList.Create;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_Group;
var
  ls_TxLoad: string; // XML File Load
  rv_str: string;
  ls_RxXML: String;
  slReceive: TStringList;
  ErrCode, i: integer;
begin
  SetDebugeWrite('Main.proc_Group');
  try
    if cxLabel14.Caption = '' then
      proc_AutoShareNo;

    cxGroup.DataController.SetRecordCount(0);
    ls_TxLoad := GTx_UnitXmlLoad('C014.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'Main' + 'GROUP', [rfReplaceAll]);
    if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
    begin
      ls_TxLoad := StringReplace(ls_TxLoad, 'HdNoString', GT_SEL_BRNO.HDNO, [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BrNoString', GT_SEL_BRNO.BrNo, [rfReplaceAll]);
    end else
    begin
      ls_TxLoad := StringReplace(ls_TxLoad, 'HdNoString', GT_USERIF.HD, [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BrNoString', GT_USERIF.BR, [rfReplaceAll]);
    end;

    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        for i := 0 to slReceive.Count - 1 do
        begin
          rv_str := slReceive[i];
          if rv_str <> '' then
          begin
            ls_rxxml := rv_str;
            Application.ProcessMessages;
            proc_recieve(ls_rxxml);
          end;
        end;
      end;
    finally
      FreeAndNil(slReceive);
      Frm_Flash.Hide;
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_IdXECIDRead(ARead : string);
var bFirst : Boolean;
begin
//	SetDebugeWrite_CID('Main.xeCIDRead');
	try
		gsCIDMessage := ARead; // 전문읽기.

		gsCIDMessage := StringReplace(gsCIDMessage, #13, '', [rfReplaceAll]);
		gsCIDMessage := StringReplace(gsCIDMessage, #10, '', [rfReplaceAll]);

		// 오른쪽에서부터 자르는 부분은 TCP자료가 밀려서 한꺼번에 들어올수 있기때문에 맨 마지막 CID자료만 추출하기 위해서
		gsCIDMessage := System.StrUtils.RightStr(gsCIDMessage, 63);
		// CID 전문 받은걸 처리한다. ------------------------------------------------

 		SetDebugeWrite_CID('IXERead[B]/[N] : [' + gsCIDMsgFront + ']/[' + gsCIDMessage + ']-' + gsCIDConnectIP );

		bFirst := False;
		if gsCIDMsgFront <> gsCIDMessage then
		begin
			bFirst := True;
			gsCIDMsgFront := gsCIDMessage;
    end;

  	CTIXE_Check_Save(gsCIDMessage);

    Log(Format('IXE --> RECV [%s, %s, %s, %s, %s, %s, %s] %s - %s',
              [ gXeRecvHeader.sType,
                gXeRecvHeader.sLine,
                gXeRecvHeader.sMainLn,
                gXeRecvHeader.sStation,
                System.StrUtils.Rightstr(gXeRecvHeader.sTelNum, 4),
                gXeRecvHeader.sSndTime,
                gXeRecvHeader.sBrNo,
                gsCIDConnectIP,
                GT_USERIF.IP]), HEARTLOGPATHFILE);

//**************************************************************
//CID서버를 종료할때,,  상담원 클라이언트에 종료 전문 보내고,
//	상담원 클라이언트는 종료전문 받고, 4초 후 부터 2초 단위로 20회 시도하고
//																								 5초 단위로 20회 시도하고
//							그래도 접속 안되면 시도 종료처리
//*****************************************************************

		if gXeRecvHeader.sType = 'T' then  //서버에서 종료 메세지 받음
		begin
			giCIDCheckCnt := 0;
			xeCID.Tag := 0; // 데이터 받았다는 확인을 한다.
			tmr_xeCID_check.Tag := 99; //여기서 멈췄다는 표시
			tmr_xeCID_check.Enabled := False;
			xeCID.Active := False;	 //즉시 접속종료

			tmr_xeCID_New1.Enabled := True; //4초 후 다시실행
			Exit;
		end else
		begin
			if (tmr_xeCID_check.Tag = 99) and (tmr_xeCID_check.Enabled = False) then
			begin
				tmr_xeCID_check.Tag := 0;
				tmr_xeCID_check.Enabled := True;
				iXeCidHeartBeat := 0;
				giCIDCheckCnt := 0;
			end;
		end;

		if xeCID.Tag = 77 then
		begin
			xeCID.Tag := 0; // 데이터 받았다는 확인을 한다.
			Exit;
		end;

		if gsCIDMessage = '' then Exit;
    iXeCidHeartBeat := 0;

    if (GT_OCX = 'SSIO') Or (GT_OCX = 'SSIT') Or (GT_OCX = 'SI415') then
    begin
  		SetDebugeWrite_CID('idCXERead[B]/[N] '+GT_OCX+' Exit : [' + gsCIDMsgFront + ']/[' + gsCIDMessage + ']' );
      Exit;
    end;

		if ( bFirst ) And ( gXeRecvHeader.sType <> 'R' ) then  //CID가 먼저 들어옴
		begin
			try
				tmr_JoinView.Tag := 100;
				tmr_JoinView.Enabled := True;
				giCIDCheckCnt := 0;
			except on E: Exception do
				Assert(False, E.Message);
			end;
		end;
	except on E: Exception do
		begin
			Log('idXeCidRead : ' + gsCIDMessage, LOGDATAPATHFILE);
			Assert(False, E.Message);
		end;
	end;
end;

procedure TFrm_Main.Proc_Initialization;
var
  sTemp : AnsiString;
  sTmp, sMacAddr, sTmpPOI, sTmpDARK : string;

  LogEncryptData: TIdBytes;
  iEncryptLen, ii: Integer;
  sMac : AnsiString;

  hProc : THandle;
	i, ia, iRow : Integer;
  ln_Env : TIniFile;
	SearchRec : TSearchRec; // 파일 속성값을 저장.
	ftLWL : TFileTime;
	ftLW : TSystemTime;
	ftLWs : string;
	slTmp, slTmp2, ls_Rcrd, lst_WKLog : TStringList;

	sTmpDate1, sTmpTime1, sTmpDate2 : string;
	dTmpDate1, dTmpDate2 : TDateTime;
	bTmp : Boolean;
begin
	SetDebugeWrite('Main.Proc_Initialization');

	gsPath := '';
	if Pos('Windows XP', GS_EXEC_OSName) > 0  then
		gsPath := 'C:\Program Files\CMNIPCC\CMNIPCC.exe'
	else
	begin
		gsPath := 'C:\Program Files (x86)\CMNIPCC\CMNIPCC.exe';
		if Not FileExists(gsPath) then 
			gsPath := 'C:\Program Files\CMNIPCC\CMNIPCC.exe'
	end;

	// 업데이터가 업데이트 된경우 업데이터 교체(XXX_NEW.exe -> XXX.exe)
	if FileExists(EXECDIRECTORY + GS_CDMS_UPFILENAME_NEW) then
  begin
    DeleteFile(EXECDIRECTORY + GS_CDMS_UPFILENAME);
    RenameFile(EXECDIRECTORY + GS_CDMS_UPFILENAME_NEW, EXECDIRECTORY + GS_CDMS_UPFILENAME);
  end;

	searchBRlist := TStringList.Create;

  for i := 0 to JON_MAX_CNT - 1 do
  begin
    JON01_MSGList[i].sType := TStringList.Create;
    JON01_MSGList[i].sMsg  := TStringList.Create;
  end;

  cxPageControl2.Height := 25;

  cxLabel17.Visible := False;
  Shape21.Visible := False;
  rb_HeadSet.Visible := False;
  rb_Receiver.Visible := False;

  if not func_Login then
	begin
    hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
    TerminateProcess(hProc, 0);
    Exit;
  end;

  // CID 콜 받은 내역도 사용자별로 저장  2021.08.24
  CIDLOGPATHFILE := LOGDATADIRECTORY + Format('CIDLOGXEA_%s.log', [GT_USERIF.ID]);
  CIDLOGPATHFILE1 := LOGDATADIRECTORY + Format('CIDLOGORGXEA_%s.log', [GT_USERIF.ID]);

  Log(Format('-로그인시간, 로그인버전-%s[%s-%s]',[GS_PRJ_VERSION,GS_APPNAME,GS_EXEC_OSName]), LOGDATADIRECTORY + 'lgv_' + GT_USERIF.ID + '.txt', 1);
// 외부아이피 저장
	GS_PublicIP := GetPublicIP;
	
  if GB_FIRSTMODE then
  begin
    try
//      try
        if ( not Assigned(Frm_SETA1) ) Or ( Frm_SETA1 = Nil ) then Frm_SETA1 := TFrm_SETA1.Create(nil);
        Frm_SETA1.pnlLeft.Visible := False;
        Frm_SETA1.cxSplitter1.Visible := False;
        for i := 0 to Frm_SETA1.cxPageControl1.PageCount - 1 do
        begin
          Frm_SETA1.cxPageControl1.Pages[i].TabVisible := False;
        end;

        Frm_SETA1.grpFirstMode.Align := alTop;
        Frm_SETA1.grpFirstMode.Visible := True;
        Frm_SETA1.Height := 700;
        Frm_SETA1.Width  := 530;
        Frm_SETA1.btnClose.Visible := False;
        Frm_SETA1.pnlSvr.Visible := False;
        Frm_SETA1.ShowModal;
//      finally
  			if Frm_SETA1.ModalResult = mrOK then
        begin
          pRestart_program;
          ShellExecute(Handle, 'open', PChar(EXECDIRECTORY + 'restart.bat'), nil, nil, SW_HIDE);

          hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
          TerminateProcess(hProc, 0);

          Exit;
        end;
//      end;
    except on E: Exception do
      Assert(False, E.Message);
    end;
  end;

  // MacAddress가 여러개일 경우 체크가 안되므로 레지스트리에 저장후 로그인시 체크
  try
    sTemp := GetRegistry(HKEY_LOCAL_MACHINE, 'SYSTEM\WLKXE', 'MACADDR');
    sTemp := HexToValue(sTemp);
    sTemp := BlowFishDecrypt(Copy(_CHK_KEY,8,10) + Copy(_CHK_KEY,23,22), sTemp);
		sMacAddr := StringToWideString(sTemp, CP_ACP);

    if Trim(sMacAddr) = '' then
    begin
      sTemp := GT_USERIF.MC;

      ZeroMemory(@LogEncryptData, SizeOf(LogEncryptData));
      SetLength(LogEncryptData, 1024);
      iEncryptLen := BlowFishEncrypt(Copy(_CHK_KEY,8,10) + Copy(_CHK_KEY,23,22), sTemp, LogEncryptData);

      // Hex 코드 만들기..
      for ii := 0 to iEncryptLen - 1 do
      begin
        sMac := sMac + ByteToHexaStr(LogEncryptData[ii]);
      end;

      SetRegistry(HKEY_LOCAL_MACHINE, 'SYSTEM\WLKXE', 'MACADDR', sMac);
    end;
  Except
    Assert(False, 'Mac Address 저장 중 오류 발생');
  end;

  // 환경설정 개별사용으로 인해 다시 한번 처리
  try
    SetOfficeVersion;

    GS_XLS_AUTOOPEN := GS_EnvFile.ReadBool('GER', 'XlsAutoOpen', True);
    GS_XLS_DTypeUse := GS_EnvFile.ReadBool('GER', 'XlsDTypeUse', False);

		GB_PorgramSize := GS_EnvFile.ReadBool('GER', 'PorgramSize', False);
    if GB_PorgramSize then
    begin
			Constraints.MinHeight := 0;
      Constraints.MinWidth  := 0;
    end else
    begin
      Constraints.MinHeight := 900;
      Constraints.MinWidth  := 1280;
    end;

		if Trim(CHARGE_DIS)   = '' then CHARGE_DIS := '1.0';
    if Trim(CHARGE_GUBUN) = '' then CHARGE_GUBUN := 'P';

    GS_LevelColor := GS_EnvFile.ReadBool('LevelColor', 'LevelColor', True);

		frm_JON54.cxPageControl1.Pages[0].TabVisible := True;
		frm_JON54.cxPageControl1.Pages[1].TabVisible := True;
		frm_JON54.cxPageControl1.Pages[2].TabVisible := True;
		frm_JON54.Panel3.visible := True;
		frm_JON54.cxPageControl1.Pages[3].TabVisible := False;
		frm_JON54.cxPageControl1.Pages[4].TabVisible := False;

		btnIpccMenu.Visible := False;
		lb_SI415Notice.Visible := False;
		proc_Resize;

		GS_CleanSKYUse := False;
		if GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 0 then //콜마너CID 사용 하면서 맑은하늘 사용여부
		begin
			bTmp := GS_EnvFile.ReadBool('CID_COMM', 'CLEANSKY' , False); // 맑은하늘 사용여부
			if bTmp then 
			begin
				GS_EnvFile.WriteInteger('CID_COMM', 'GUBUN' , 6); //기존 맑은 하늘 전화걸기 사용체크일경우 강제로 인덱스변경시킴
			end;
		end;
		if GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 2 then
		begin
			GT_OCX := 'KLCNS';
//      GT_OCX := 'SSIO';
//      bSSIO_CTI.Active := True;
//
//      tmr_SSIO_check.Interval := 500;
//      tmr_SSIO_check.Tag := 0;
//      tmr_SSIO_check.Enabled := True;
    end else
    // 시사일오 CID 수신은 안하고 전화걸기만 하기위해서 사용
		if GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 3 then
    begin
      GT_OCX := 'SSIT';
			if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
      begin
        if not IdUDPCidRecvServer.Active then
        begin
          IdUDPCidRecvServer.Tag := 0;
          IdUDPCidRecvServer.DefaultPort := 25376;
          IdUDPCidRecvServer.Active := True;

          pSetCIDState(0);
        end;
			end;
    end else
    if GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 4 then
    begin
      GT_OCX := 'LGUCT';
    end else
    // GT_POSS_TEL : 전화걸기 가능 (0 : 불가, 1 : 가능)
		if (FileExists('C:\4bs.ini')) then
		begin
			GT_OCX := 'NKT';
			bNKT_4BS.Active := True;
			tmr_AliveSend.Interval := 500;
      tmr_Alive.Tag := 0;
			tmr_AliveSend.Enabled := True;

			rb_HeadSet.Enabled := True;
			rb_Receiver.Enabled := True;
      cxLabel17.Visible := False;
      Shape21.Visible := False;
      rb_HeadSet.Visible := False;
      rb_Receiver.Visible := False;

      frm_JON54.btn_PickUpPhone.Enabled := True;
      frm_JON54.btn_HangUp     .Enabled := True;

//      GS_EnvFile.WriteString('CID_COMM', 'CID_AUTO', 'N');  // NKT사용시 CID 사용 않함
		end else
		// 시사일오 PBX
		if GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 5 then
		begin
			GT_OCX := 'SI415';
			lb_SI415Notice.left := 3;
			lb_SI415Notice.Top := 437;
			lb_SI415Notice.Visible := True;
			cxTabSheet1.TabVisible := False;
			
			frm_JON54.cxPageControl1.Pages[0].TabVisible := False;
			frm_JON54.cxPageControl1.Pages[1].TabVisible := False;
			frm_JON54.cxPageControl1.Pages[2].TabVisible := False;
			frm_JON54.Panel3.visible := False;
			frm_JON54.cxPageControl1.Pages[3].TabVisible := False;
			frm_JON54.cxPageControl1.Pages[4].TabVisible := False;   

      frm_JON54.Shape4.Visible := False;
      frm_JON54.Shape4.Repaint;
			frm_JON54.PnlCalling.Left := 29;//430;
			frm_JON54.PnlCalling.Top := 3;
			frm_JON54.PnlCalling.Width := 956;//517;
			frm_JON54.PnlCalling.Caption := '콜마너SoftPhone 사용';
      frm_JON54.PnlCalling.BringToFront;
			frm_JON54.PnlCalling.Visible := True;

			frm_JON54.lb_CallingListCnt.Visible := False;

			btnIpccMenu.Visible := True;
			proc_Resize;

			if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
			begin
				if not IdUDPCidRecvServer.Active then
				begin
          IdUDPCidRecvServer.Tag := 0;
					IdUDPCidRecvServer.DefaultPort := 25376;
					IdUDPCidRecvServer.Active := True;
				end;

				GT_Q_exten    := TStringList.Create;
				GT_Service_no := TStringList.Create;
				GT_Dnis_no    := TStringList.Create;
				GT_Buz_name   := TStringList.Create; //IPCC 연동 데이터 저장
				GT_Admin_Q_exten    := TStringList.Create;
				GT_Admin_Service_no := TStringList.Create;
				GT_Admin_Dnis_no    := TStringList.Create;
				GT_Admin_Buz_name   := TStringList.Create; //IPCC 연동 데이터 저장
				
				gSI415AliveData := '';
				sTmp  :=	GS_EnvFile.ReadString('CID_COMM', 'PBX_OP', '');
				if sTmp = '1' then procExecPBX(True, 'CMNSoftPhone');				//전화기 사용
			end;
		end else 
		if GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 6 then // 맑은하늘 전화걸기 사용	
		begin
			GT_OCX := 'SKY';
			GS_CleanSKYUse := True;
		end else
		if GT_POSS_TEL = 1 then
		begin
			GT_OCX := 'DAEJEN';
    end else
    if FileExists('C:\Program Files\Bridgetec\IPron\Softphone\DLL\WebCaller.ocx') then
    begin
      GT_OCX := '1004'; // 천사대리운전 로그인 일때..[인우콜센터 사용]
      ShellExecute(Self.Handle, 'open', PChar(ExtractFilePath(ParamStr(0)) + 'WebCaller.exe'), nil, nil, SW_SHOWNORMAL);
    end else
		if FileExists('C:\Program Files\SoftPhone\vSoftPhone.exe') then
    begin
      GT_OCX := '1002';
      ShellExecute(Self.Handle, 'open', PChar(ExtractFilePath(ParamStr(0)) + 'LocalCaller.exe'), nil, nil, SW_SHOWNORMAL);
		end else
    if FileExists('C:\Program Files\MSoftPhone\softphonedll.dll') then
    begin
      GT_OCX := 'OJ'; // 오제이 대리운전 로그인 일때..
    end else
    if FileExists(ExtractFilePath(Application.ExeName) + 'CTIAgentCom.dll') then
    begin
      GT_OCX := 'CTI_Com';
    end;
		GS_EnvFile.WriteBool('CID_COMM', 'CLEANSKY' , GS_CleanSKYUse); //맑은하늘 전화기 사용값 적용
		
    CidServerVersionCheck;

    if GetIniColor(ENVPATHFILE, 'AcceptWin', 'STORE', '$00000000') = $00000000 then
    begin
      SetIniColor(ENVPATHFILE, 'AcceptWin', 'General', '$00ED7328');
      SetIniColor(ENVPATHFILE, 'AcceptWin', 'STORE', '$0077FF77');
			SetIniColor(ENVPATHFILE, 'AcceptWin', 'CompanyColor', '$00FFA4FF');
      SetIniColor(ENVPATHFILE, 'AcceptWin', 'WorkerColor', '$00FFFF8E');
    end;

    // 컴퓨터 마우스 움직임이 60분동안 없을경우 자동으로 로그아웃 처리.
    acAwayTimer1.Enabled := (GS_EnvFile.ReadString('AUTOCLOSE', 'MINUTE60YN', 'YES') = 'YES');
    acAwayTimer2.Enabled := True;

    if Not GB_ORDERACTIVEBMENU_USE then
    begin
      BtnFix.Down := GS_EnvFile.ReadBool('UserGongji', 'BMenuOpen', False);
      BtnFixClick(BtnFix);
    end;

    // 2011.04.21 CID설정권한조회
    GT_USERIF.CIDTEL_PER:=Chk_CidPer;

		// 좌측 그리드의 지사리스트를 설정한다.
		pnl_set;

    Menu412.Visible := (GT_USERIF.BR = 'B100') Or (scb_BranchCode.IndexOf('X469') >= 0);   // 412.동부화재보험현황

		if Menu412.Visible then btnMainMenu3.Enabled := True;

		if GS_PRJ_AREA = 'S' then
		begin
			if GT_USERIF.HD = 'A876' then
      begin
        Menu1415.Visible := False;
        Menu1416.Visible := False;
      end;
    end else
    begin
      if GT_USERIF.HD = '876' then
      begin
        Menu1415.Visible := False;
        Menu1416.Visible := False;
      end;
    end;

    // 자료가 다 들어온 후에 권한 다시 체크
    if Copy(GetPlusCallYN(GT_SEL_BRNO.BrNo),3,1) = 'y' then                                           // 505.기사원천징수현황
			Menu505.Visible := ( TCK_USER_PER.CUR_WithHolding = '1' ) And (GS_AdminAuthYN)
    else
      Menu505.Visible := False;

		if (TCK_USER_PER.CUR_Manager        = '1') or
       (TCK_USER_PER.CUR_General        = '1') or
			 (TCK_USER_PER.CUR_High           = '1') or
       (TCK_USER_PER.CUR_Detail         = '1') or
			 (TCK_USER_PER.CUR_Dormancy       = '1') or
       (TCK_USER_PER.CUR_Mileage        = '1') or
			 (TCK_USER_PER.CUR_MileageStat    = '1') or
       (TCK_USER_PER.CUR_MileageDetail  = '1') or
			 (TCK_USER_PER.CUR_Virture        = '1') or
       (TCK_USER_PER.CUR_CustLevel      = '1') or
//			 (TCK_USER_PER.CUR_OKCashBack     = '1') or
		   (TCK_USER_PER.CUR_BubinMng       = '1') or
       (TCK_USER_PER.CUR_BubinMngModify = '1') or
			 (TCK_USER_PER.CUR_BubinHis       = '1') or
       (TCK_USER_PER.CUR_BubinAcc       = '1') or
			 (TCK_USER_PER.CUR_BubinAuth      = '1') or
       (TCK_USER_PER.CUR_WithHolding    = '1') then
      btnMainMenu3.Enabled := True
		else
      btnMainMenu3.Enabled := False;

		btnCallBellMenu.visible := (TCK_USER_PER.CUR_CallBell = '1');

    // 콜마너 사용에 대한 기본환경설정 작업을 한다.
		tmr_Initialization.Enabled := True;

    InitGridSizeEnv(cxSgBrOrder);
		LoadGridSizeEnv(cxSgBrOrder, GS_EnvFile);
    CopyGridSizeEnv(cxSgBrOrder, cxSgHdOrder, GS_EnvFile);

    // [엑셀다운] 접수엑셀권한 있을 경우 표시
    btnBrExcelDown.Visible := False;
    if GT_USERIF.Excel_Use <> 'n' then
      btnBrExcelDown.Visible := (TCK_USER_PER.JON_ExcelDown = '1');

    // 2011.03.02 후불고정값
    GT_USERIF.AfterPayMidx:=GS_EnvFile.ReadInteger('JON01AFTERMONEYUSE', 'AFTERMONEYDEFAULT', 1);

		try
			lb_Becha0.Style.Color := GetIniColor(ENVPATHFILE, 'BechaStatus', 'Becha0', ColorToString($0015F0D5));
			lb_Becha1.Style.Color := GetIniColor(ENVPATHFILE, 'BechaStatus', 'Becha1', ColorToString($00E9DDA5));
			lb_Becha2.Style.Color := GetIniColor(ENVPATHFILE, 'BechaStatus', 'Becha2', ColorToString($00F8D1EB));
			lb_Becha3.Style.Color := GetIniColor(ENVPATHFILE, 'BechaStatus', 'Becha3', ColorToString($00CFE1FA));
			lb_Becha4.Style.Color := GetIniColor(ENVPATHFILE, 'BechaStatus', 'Becha4', ColorToString($00B0B0F9));
		except
		end;

    try
      if GS_SEARCH_WISE_NAVER_COMPARE then sTmpPOI := 'Y'
                                      else sTmpPOI := 'N';
      if GB_DARKMODE then sTmpDARK := 'Y'
                     else sTmpDARK := 'N';

      Assert(False, 'LogIn' + ' ['+ GS_EXEC_OSName + ' - IE Ver : ' + GetIEVersion +
                    '] POI통합(' + sTmpPOI +
                    ') - 다크모드(' + sTmpDARK +
                    ') - 폰트(' + GS_FONTNAME + ') - ' +
                    ifthen(GB_KMAiRateUSE , 'KM-AI : Y', 'KM-AI : N') + ' - ' + GS_KMAiRateName +
                    ifthen(GB_KMAiRateMode, ' - 자동모드', ' -  수동모드') );

      GS_EnvFile.WriteString('GER', 'LOGIN', FormatDateTime('YYYY-MM-DD HH:NN:SS', Now));  // 로그인 시간 저장
		except
			Assert(False, 'LogIn');
		end;
		Proc_CidLog(10, '');

    try
			// 메인 공지화면 권한이 없을 경우 바로 접수 화면 표시
			if TCK_USER_PER.JON_MainView <> '1' then
			begin
				procMainMenuCreateActive(200);
			end;
		except
			Assert(False, 'Init_1');
		end;

		///////////////////////////////////관제 클론기사 정보 처리 20161017 KHS
		if ((GT_USERIF.HD = 'A1782') and (GS_PRJ_AREA = 'O')) or (GT_USERIF.ID = 'sntest') then
		begin
			lst_WKLog := TStringList.create;
			ls_Rcrd  := TStringList.create;
			slTmp  := TStringList.create;
			Try
				if FileExists(WKDATAPATHFILE) then
				begin
					FindFirst(WKDATAPATHFILE, faAnyFile, SearchRec);
					FileTimeToLocalFileTime(SearchRec.FindData.ftLastWriteTime, ftLWL);
					FileTimeToSystemTime(ftLWL, ftLW);
					ftLWs := format('%0.4d-%0.2d-%0.2d %0.2d:%0.2d:%0.2d', [ftLW.wYear,ftLW.wMonth,ftLW.wDay,ftLW.wHour,ftLW.wMinute,ftLW.wSecond]);

					sTmpDate1 := ftLWs; //sTmpDate1 := StartDateTime('yyyy-mm-dd hh:nn:ss');  //현재시간
					dTmpDate1 := StrToDateTime(sTmpDate1);
	//				sTmpDate2 := FormatDateTime('yyyy-mm-dd', Now) + ' 19:35:00';
					sTmpDate2 := StartDateTime('yyyy-mm-dd hh:nn:ss'); //기준시간 yyyy-mm-dd 09:00:00
					dTmpDate2 := StrToDateTime(sTmpDate2);

					if dTmpDate1 < dTmpDate2 then
					begin 
						DeleteFile(WKDATAPATHFILE);
					end	else
					begin
						lst_WKLog.LoadFromFile(WKDATAPATHFILE);
						for i := 0 to lst_WKLog.count -1 do
						begin 
							GetTextSeperationEx2('│', lst_WKLog[i], ls_Rcrd);
							scb_MapMarkIdx  .add(ls_Rcrd[1]);                 //기존 정보 삭제
							scb_MapMarkSabun.add(ls_Rcrd[0]);
							scb_MapMarkTitle.add(ls_Rcrd[2]);
																										// #13#10
							slTmp := TStringList.Create;
							try
								GetTextSeperationEx2('¶', ls_Rcrd[3], slTmp);
								for ia := 0 to slTmp.Count - 1 do
								begin
									if ia = 0 then
										sTmp := slTmp[ia]
									else
										sTmp := sTmp + #13#10 + slTmp[ia];
								end;
							finally
								FreeAndNil(slTmp);
							end;
							scb_MapMarkContents.add(sTmp);
							scb_MapMarkLon.add(ls_Rcrd[4]);
							scb_MapMarkLat.add(ls_Rcrd[5]);
						end;
					end;
				end;
			finally
				ls_Rcrd.Free;
				lst_WKLog.Free;
			End;
		end;
		///////////////////////////////////관제 클론기사 정보 처리 20161017 KHS

		if GS_AdminAuthYN then   //관리자 인증일 경우에만 사용
		begin
			if ( TCK_USER_PER.JON_MainView = '1' )then
			begin
				try
					if GS_PRJ_AREA = 'S' then     //탭우선순위
					begin
						cxTabControl1.TabIndex := 0;
						cxTabControl1Click(cxTabControl1);
					end else
					begin
						cxTabControl1.TabIndex := 0;
						cxTabControl1Click(cxTabControl1);
					end;
				except
					Assert(False, 'Init_2');
				end;

        if ( Not GB_365System ) And ( Not GB_CallLine ) then
        begin
          Try
            if GS_AdminAuthYN then
              cxTabControl1.tabs.VisibleTabs[3].Visible := False
            else
              cxTabControl1.tabs.VisibleTabs[3].Visible := True;
          except
            Assert(False, 'Init_3');
          end;
        end;

        if (GT_AIUse) then
        begin
          pnl_AiList.Visible := True;
          pnl_AiList.left := 690;

          cxGridAiList.Columns[0].DataBinding.ValueType := 'Integer';
          cxGridAiList.Columns[1].DataBinding.ValueType := 'String';
					cxGridAiList.Columns[2].DataBinding.ValueType := 'String';
          cxGridAiList.DataController.SetRecordCount(0);

          if FileExists(DBDIRECTORY+'aiinfo.dat') then
          begin
            slTmp := TStringList.Create;
            slTmp.LoadFromFile(DBDIRECTORY+'aiinfo.dat');
            slTmp2 := TStringList.Create;
            try
              cxGridAiList.BeginUpdate;
              for i := 0 to slTmp.Count - 1 do
              begin
                iRow := cxGridAiList.DataController.AppendRecord;
                GetTextSeperationEx2('│', slTmp[i], slTmp2);
                cxGridAiList.DataController.Values[iRow, 0] := slTmp2[0];
                cxGridAiList.DataController.Values[iRow, 1] := slTmp2[1];
                cxGridAiList.DataController.Values[iRow, 2] := slTmp2[2];
              end
            finally
              cxGridAiList.EndUpdate;
              FreeAndNil(slTmp);
              FreeAndNil(slTmp2);
            end;
          end;

        end;
			end;
		end;
	except
    on e: exception do
    begin
      Assert(False, E.Message);
			sTmp := 'frmMain[Proc_Initialization]:' + e.Message;
			ShowMessage(sTmp);
		end;
  end;
end;

procedure TFrm_Main.Proc_IPCCAdminLogOut;
begin
	pSi415SendData(fSI_MakeHeader_Only('1040', '0', ''));
	gSI415_A_Close := True;
	gSI415_A_Login := False;
end;

procedure TFrm_Main.Proc_IPCCLogOut;
begin
	pSi415IPCCSendData(fSI_MakeHeader_Only('1020', '0', ''));
	gSI415_C_Close := True;
	gSI415_C_Login := False;
end;

procedure TFrm_Main.proc_LeftBrCall;
begin
  SetDebugeWrite('Main.proc_LeftBrCall');
  try
		if (cxSgBrOrder.DataController.RecordCount = 0) and
      (FormatDateTime('yyyymmdd', dtBrCallSt.Date) = StartDateTime('yyyymmdd')) then
      proc_BrOrder;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_LeftGroup;
begin
  SetDebugeWrite('Main.proc_LeftGroup');
  try
    if (cxGroup.DataController.RecordCount = 0) then
      proc_Group;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_LeftShareCall;
begin
  SetDebugeWrite('Main.proc_LeftShareCall');
  if cxShareCall.DataController.RecordCount = 0 then
    proc_Share;
end;

procedure TFrm_Main.proc_LeftWkManage;
var
  sWkName, sWkBrNum, sSabun, sHp, sBrNo, sBrName, msg: string;
  iRow, iWkName, iWkBrNum, iWkSabun, iHp, iCash, iWkAttend, iWkStatus, iBrNo, iBrName: Integer;
begin
	SetDebugeWrite('Main.proc_LeftWkManage');
  try
    iRow := tvWkConnect.DataController.FocusedRecordIndex;
    if iRow = -1 then Exit;

    iWkName := tvWkConnect.GetColumnByFieldName('기사명').Index;
    iWkBrNum := tvWkConnect.GetColumnByFieldName('자체사번').Index;
    iWkSabun := tvWkConnect.GetColumnByFieldName('기사사번').Index;
    iHp := tvWkConnect.GetColumnByFieldName('휴대폰').Index;
    iCash := tvWkConnect.GetColumnByFieldName('잔액').Index;
    iWkAttend := tvWkConnect.GetColumnByFieldName('상태').Index;
    iWkStatus := tvWkConnect.GetColumnByFieldName('기사상태').Index;
    iBrNo := tvWkConnect.GetColumnByFieldName('지사코드').Index;
    iBrName := tvWkConnect.GetColumnByFieldName('지사명').Index;

    sWkName := tvWkConnect.DataController.Values[iRow, iWkName];
    sWkBrNum := tvWkConnect.DataController.Values[iRow, iWkBrNum];
    sSabun := tvWkConnect.DataController.Values[iRow, iWkSabun];
    sHp := tvWkConnect.DataController.Values[iRow, iHp];
    sBrNo := tvWkConnect.DataController.Values[iRow, iBrNo];
    sBrName := tvWkConnect.DataController.Values[iRow, iBrName];

    if (GT_USERIF.LV = '10') and (not IsPassedManagementWk(sBrNo)) then
    begin
      msg := '[%s(%s)]  지사에서 기사관련 관리권한 이관(콜센터 상담원)을 설정 하지 않았습니다.'
          + #13#10'(해당 지사관리자에게 관리권한 이관[회사>지사관리>상세설정]을 요청바랍니다.)';
      GMessagebox(Format(msg, [sBrNo, sBrName]), CDMSE);
      Exit;
    end;

    if Not Assigned(Frm_COM02) Or (Frm_COM02 = Nil) then Frm_COM02 := TFrm_COM02.Create(Nil);
    Frm_COM02.pnlTitle.Caption := '기사 : ' + sWkName + '(' + sSabun + ') [' + sHp + ']';
    Frm_COM02.cxLabel11.Caption := sSabun;
    Frm_COM02.cxLabel12.Caption := tvWkConnect.DataController.Values[iRow, iBrNo];
    Frm_COM02.cxLabel13.Caption := StringReplace(sHp, '-', '', [rfReplaceAll]);
    Frm_COM02.ed_Cash.Text := tvWkConnect.DataController.Values[iRow, iCash];
    Frm_COM02.chk_Attend.Checked := False;
    Frm_COM02.chk_Attend.Enabled := False;
		if tvWkConnect.DataController.Values[iRow, iWkAttend] = '미출근' then
			Frm_COM02.chk_Attend.Enabled := True;
    Frm_COM02.chk_Status.Checked := False;
    Frm_COM02.cb_Status.Enabled := False;

    Frm_COM02.cb_Status.Tag := 1;
    Frm_COM02.cb_Status.ItemIndex := Frm_COM02.cb_Status.Properties.Items.IndexOf(tvWkConnect.DataController.Values[iRow, iWkStatus]);
    Frm_COM02.cb_Status.Tag := 0;

    if (GT_USERIF.LV <> '60') and (frm_COM02.cb_Status.ItemIndex = 8) then
      Frm_COM02.chk_Status.Enabled := False
    else
      Frm_COM02.chk_Status.Enabled := True;

    Frm_COM02.chk_before.Checked := False;
    Frm_COM02.de_stDate.Enabled := False;
    Frm_COM02.de_edDate.Enabled := False;
    Frm_COM02.RbButton1.Enabled := False;
    Frm_COM02.Show;
    Frm_COM02.proc_init;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_LeftWorker;
begin
	SetDebugeWrite('Main.proc_LeftWorker');
	try
		cxLabel9.Left := IfThen(cxLabel9.Left = 5, 4, 5);

		if (lbWkConnect.Caption = '0') and (lbWkToday.Caption = '0')   and (lbWkConnect_order.Caption = '0') and
       (lbWkRun.Caption = '0')     and (lbWkNoToday.Caption = '0') and (lbWknormalcy.Caption = '0')      then
      proc_wkCount;
	except on e: exception do
		begin
			Assert(False, E.Message);
			ShowMessage('frmMain[proc_LeftWorker]:' + e.Message);
		end;
	end;
end;

function TFrm_Main.func_OB_ClearSky(AAni, ACaller: string):String;
var	bOutData : array of byte;
	cbcKey1, cbcKey2, sBody, sPacket :String;
	nPackSize, nType : integer;
	ArByte : byDynamicArr;
	sData, sCmd, sCmp, sStr : string;
	i : integer;
	rv_str : AnsiString;
begin
	SetDebugeWrite('Main.proc_LeftWorker');
	try
		Result := '';
		xeClearSky.Host := '127.0.0.1';
		xeClearSky.Port := 29010;

		cbcKey1 := '7210AEWQ9GKLIUYTFDWDZVXP42102189';
		cbckey2 := 'EZDHQSK2145EGFHKL65WAQDOPKMF2Q5H';

		SetLength(bOutData, MaxCommandSize);

		sStr := 'J'+Chr($0);
		sCmd := '"Command : 8001"';
		sCmp := fEncryptAESbase64(bOutData, '002', cbcKey1);

		ACaller := StringReplace(ACaller, '-', '', [rfReplaceAll]);
		AAni := StringReplace(AAni, '-', '', [rfReplaceAll]);
		sData := '{"Ani":"'+AAni+'","Caller":"'+ACaller+'","Trunk":""}' ;
		sData := fEncryptAESbase64(bOutData, sData, cbcKey2);

		sBody := 'Ar{"Command":8001,"CompanyCode":"' + sCmp + '","Data":"'+ sData + '"}';
		nType := 100;
		nPackSize := 6 + Length(sBody);
//						nType := htons(100);  //big endian
//						nPackSize := htons(8 + Length(sBody));

		sPacket := String2Hex(sStr); 
		sPacket := sPacket + IntToHex(nPackSize,4);
		sPacket := sPacket + IntToHex(nType,4);
		sPacket := sPacket + String2Hex(sBody);
												
		i := 0;
		xeClearSky.Host := '127.0.0.1';
		xeClearSky.Port := 29010;
		Try
			while not xeClearSky.Connected do
			begin
				if i > 15 then 
				begin
					GMessagebox('맑은하늘과 연동이 안되고 있습니다.' +#13#10 +#13#10 
										+ '맑은하늘 재실행 후 다시 전화걸기를 하십시오', CDMSE);
					xeClearSky.DisConnect;					
					exit;
				end;
				Application.ProcessMessages;
				Sleep(300);
				xeClearSky.Connect;
				inc(i);
			end;
						
			if xeClearSky.Connected = True then
			begin
				ArByte := HexToByteArr(sPacket);
				xeClearSky.IOHandler.Write(RawToBytes(ArByte[0], Length(ArByte)));

				xeClearSky.IOHandler.InputBuffer.Clear; 
				rv_str := xeClearSky.IOHandler.ReadString(10);
				rv_str := copy(rv_str,9,2);
				Result := rv_str;
			end;
			xeClearSky.DisConnect;
		except
			xeClearSky.DisConnect;
		end;
	except on e: exception do
		begin
			Assert(False, E.Message);
			ShowMessage('frmMain[proc_LeftWorker]:' + e.Message);
		end;
	end;
end;

procedure TFrm_Main.proc_smsRead(ls_rxxml: String);
var
  ls_Msg_Err: String;
begin
	SetDebugeWrite('Main.proc_smsRead');
	try
    ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
    if ('0000' = ls_Msg_Err) then
    begin
      Log(ls_Msg_Err, LOGDATAPATHFILE);
    end else
    begin
      Log(ls_Msg_Err, LOGDATAPATHFILE);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_stab_ref(sBR_NO: string);
var
  sBr_No2, XmlData, Param, ErrMsg: string;
  iUserLevel, ErrCode : Integer;
begin
  SetDebugeWrite('Main.proc_stab_ref');
  if (GT_USERIF.LV = '10') and (TCK_USER_PER.JON_BrchCashView <> '1') then
  begin
    sbar_Message.Panels.Items[0].Text := '';
    sbar_Message.Panels.Items[1].Text := '';
    sbar_Message.Panels.Items[2].Text := '';
    sbar_Message.Panels.Items[3].Text := '';
    Exit;
  end;

  sbar_Message.Panels.Items[4].Text := '조회중..';

  try
    iUserLevel := StrToIntDef(GT_USERIF.LV, 0);
    if (iUserLevel = 60) and {(GT_USERIF.VH = '3') and }(sBr_No <> '') then
    begin
      iUserLevel := 40;
      sBr_No2 := sBr_No;
    end else
    if sBR_NO = '' then
      sBr_No2 := GT_USERIF.BR
    else
      sBr_no2 := sBr_No;

    case iUserLevel of
      40, 10:
        begin
          Param := '│' + sBr_No2 + '│' + GT_USERIF.ID;
        end;
      60:
        begin
          if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
          begin
						if GT_SEL_BRNO.HDNO = '' then
						begin
              Param := GT_USERIF.HD + '││' + GT_USERIF.ID;
						end else
						begin
              Param := GT_SEL_BRNO.HDNO + '││' + GT_USERIF.ID;
						end;
					end else
          begin
            Param := GT_USERIF.HD + '││' + GT_USERIF.ID;
          end;
        end;
    end;

  	if not RequestBase(GetSel06('Main' + 'CASH0001', 'COM.GET_TOTAL_CASH_LIST', '1000', Param), XmlData, ErrCode, ErrMsg) then
    begin
      GMessagebox(Format('캐쉬 조회 오류'#13#10'[%d]%s', [ErrCode, ErrMsg]), CDMSE);
      Exit;
    end;

    proc_recieve(XmlData);
  except on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.Proc_Statubar_Display;
var
  sTemp: string;
begin
  SetDebugeWrite('Main.Proc_Statubar_Display');
  try
    with sbar_Message do
    begin
      Panels[5].Text := GT_USERIF.ID;

      case StrToIntDef(GT_USERIF.LV, 0) of
        10: Panels[6].Text := '상담원';
        40: Panels[6].Text := '지사관리자';
        60: begin
							if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
                Panels[6].Text := '패밀리관리자'
              else
                Panels[6].Text := '본사관리자';
            end;
      else
        Panels[6].Text := '';
      end;

      Panels[7].Text := GT_USERIF.HD;
      Panels[8].Text := GT_USERIF.BR;
      Panels[9].Text := GT_USERIF.CT;
      Panels[10].Text := 'Ver.' + VERSIONINFO;
      if GT_CIDINFO.NaeSun <> '' then
        Panels[10].Text := '[' + GT_CIDINFO.NaeSun + ']';
      if Self.Visible then
        proc_stab_ref('');
    end;
  except
    on E: exception do
    begin
      sTemp := 'frmMAIN[Proc_Statubar]예외처리 발생:' + e.Message;
      Assert(False, E.Message);
      ShowMessage(sTemp);
    end;
  end;
end;

function TFrm_Main.proc_UnRead_Cnt: integer;
var XmlData, Param, ErrMsg: string;
  ErrCode: Integer;
  tmpCnt: integer;
  tmpCntStr: string;
begin
  SetDebugeWrite('Main.proc_UnRead_Cnt');
  try
    Param := '';
    if RequestBase(GetSel05('GET_NOTICE_LIST', 'CAS.GET_NOTICE_LIST', '100', Param), XmlData, ErrCode, ErrMsg) then
    begin
      try
        if Pos('<Data Count="',xmlData)>0 then
        begin
          tmpCntStr:=Copy(XmlData,Pos('<Data Count="',xmlData)+13,100);
          if Pos('"',tmpCntStr)>0 then tmpCntStr:=Copy(tmpCntStr,1,Pos('"',tmpCntStr)-1);
          tmpCnt:=StrToIntDef(tmpCntStr,0);
        end;
      except
      end;
    end;
    Result := tmpCnt;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.Server_CIDClientRead(Sender: TObject;
  Socket: TCustomWinSocket);
var
  xdom: msDomDocument;
  lst_Data: IXMLDomNodeList;
  rv_str, ls_rxxml, ls_Msg_Err, ls_Cust_Tel, ls_Key_num, ls_Service_id,  s_rvstr: string;
  ls_LogMsg : AnsiString;
  li_MLen, li_LenRe, li_Pos_STX: Integer;
begin
  SetDebugeWrite('Main.Server_CIDClientRead');
	try
    rv_str := '';
    ls_rxxml := '';
    ls_Cust_Tel := '';
    ls_Key_num := '';

    // 메인폼이 최소화 되었을때, 원래화면으로 띄워줌..
    SetActiveWindow(Handle);

    s_rvstr := '';

    li_MLen := Socket.ReceiveLength;

    SetLength(rv_str, li_MLen);
    li_LenRe := Socket.Receivebuf(rv_str[1], li_MLen);
    rv_str := Copy(rv_str, 1, li_LenRe);

    //------------------------------------------------------------------------------
    //  신규 CID 통신 전문일경우 처리 : 100 byte 이하면 신규 CID 연결임.
    //==============================================================================
    if length(rv_str) <= 100 then
    begin
      giCIDCheckCnt := 0;
      // CID 전문 받은걸 처리한다. ------------------------------------------------
      if gsCIDMsgFront <> rv_str then
      begin
        gsCIDMsgFront := rv_str;
				Func_New_Cid(rv_str);
        giCIDCheckCnt := 0;
      end;
      Exit;
    end;
    //==============================================================================

    li_Pos_STX := Pos(STX, rv_str);
    ls_rxxml := Copy(rv_str, li_Pos_STX + 1, (Length(rv_str) - li_Pos_STX) - 1);

    xdom := ComsDomDocument.Create;
    try
      if not xdom.loadXML(ls_rxxml) then
        Exit;

      //---------------------------------------------------------------------------------
      //    이해안됨(설계도중에 중단된거 같음) 로그인 정보를 왜 CID와 통신에서 체크하는지..??
      //---------------------------------------------------------------------------------
      ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
      if ('9999' = Copy(ls_Msg_Err, 1, 4)) then
      begin
        Log('오류코드:' + ls_Msg_Err +
          ' 다른 사람이 동일한 내선으로 CID서버에 로그인 해서 종료 합니다',
          LOGDATAPATHFILE);
        Close;
      end;

      lst_Data := xdom.documentElement.selectNodes('/cdms/Service/Data/Accept');
      ls_Cust_Tel := lst_Data.item[0].attributes.getNamedItem('CallNumber').Text;
      ls_Key_num := lst_Data.item[0].attributes.getNamedItem('KeyNumber').Text;

      if Trim(ls_Cust_Tel) = '' then Exit;

      //---------------------------------------------------------------------------------
      //    천사일 경우 고객번호만 전송됨...
      //---------------------------------------------------------------------------------
      if (GT_OCX = '1004') or (GT_OCX = '1002') then
        ls_key_num := '15881004';

      ls_LogMsg := ls_Key_num + '/' + ls_Cust_Tel + '/' + FormatDateTime('yyyy-mm-dd hh:nn:ss', Now) + '/' + GT_USERIF.ID;
      Proc_CidLog(90, ls_LogMsg);

      ls_Service_id := GetXmlServiceID(ls_rxxml);
      if ls_Service_id = 'CNS01' then
      begin
        // CIDServer 신버전 전문 형식에 맞춤.
        rv_str := PTYPE_INCONNECTED + '    ' + Copy(ls_Key_num +
          '              ', 1, 14) + '    ' + RSLT_OK + Copy(ls_Cust_Tel +
          '              ', 1, 14) + '        ' + '    ' +
          '                    ' + '                    ';

        // 신규 CID 전문 형식으로 변환하여 접수창 Open 한다.
        Func_New_Cid(rv_str);
      end;
    finally
      xdom := Nil;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.server_mdriveClientError(Sender: TObject;
  Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
var
  i: Integer;
begin
  SetDebugeWrite('Main.server_mdriveClientError');
  try
    ErrorCode := 0;
    Socket.Close;
    for i := 0 to 2 do
    begin
  		server_mdrive.Active := True;
      Sleep(200);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.server_mdriveClientRead(Sender: TObject;
  Socket: TCustomWinSocket);
var
  s, sKey, sRevieve: string;
	sList: TStringList;
begin
  SetDebugeWrite('Main.server_mdriveClientRead');
	s := trim(socket.ReceiveText);
	if s = 'CDRVCONNS' then
		Socket.SendText('CDRVCONNS' + #$D#$A)
	else
	begin
		try
			s := StringReplace(s, 'CDRVCALLS', '', [rfReplaceAll]);
      s := StringReplace(s, '|', '│', [rfReplaceAll]);
      s := StringReplace(s, ' ', '', [rfReplaceAll]);
      sKey := copy(s, 1, pos('│', s) - 1);
      sList := TStringList.Create;
      try
        sList.Clear;
        sList.Delimiter := '│';
        sList.DelimitedText := s;
        if lb_mdrive_sn.Items.IndexOf(sKey) = -1 then
        begin
          sRevieve := func_mdrive(s);
          if sRevieve = 'S' then
          begin
            lb_mdrive.Items.Add(s);
            lb_mdrive_sn.Items.Add(sKey);
            socket.SendText('CDRVCALLS' + sKey + '│' + sList[1] + '│' + sKey + '│' + sList[1] + '│S│' + #$D#$A);
						Frm_JON03[GI_JON03_LastFromIdx].rb_Search.Click;
          end else
            socket.SendText('CDRVCALLF' + sKey + '│' + sList[1] + '│' + sKey
              + '│' + sList[1] + '│F│' + sRevieve + #$D#$A);
          if lb_mdrive_sn.Items.Count >= 300 then
          begin
            lb_mdrive.Items.SaveToFile(LOGDATADIRECTORY + '\m_drive.log');
            lb_mdrive.Items.Clear;
            lb_mdrive_sn.Items.Clear;
          end;
        end else
        begin
          socket.SendText('CDRVCALLF' + sKey + '│' + sList[1] + '│' + sKey +
            '│' + sList[1] + '│F│' + '데이터중복' + #$D#$A);
        end;
      finally
        sList.Free;
      end;
    except
      on E: Exception do
      begin
        Assert(False, E.Message);
      end;
    end;
  end;
end;

procedure TFrm_Main.server_speedClientError(Sender: TObject;
  Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
var
  i: Integer;
begin
  SetDebugeWrite('Main.server_speedClientError');
  try
    ErrorCode := 0;
    Socket.Close;
    for i := 0 to 2 do
    begin
      server_speed.Active := True;
      Sleep(200);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.server_speedClientRead(Sender: TObject;
  Socket: TCustomWinSocket);
const
  sId = 'SDRV';
var
  s, sRevieve, ssize, sData: string;
  sList: TStringList;
  iSize: Integer;
begin
  SetDebugeWrite('Main.server_speedClientRead');
  try
    s := socket.ReceiveText;
    if Trim(s) <> '' then
    begin
      if (s[1] = #2) and (s[length(s)] = #3) then
      begin
        sList := TStringList.Create;
        try
          sList.Clear;
          sList.Add('RECV:' + s);
          if copy(Trim(s), 9, 5) = 'CONNS' then
          begin
            s := #2 + '0015SDRVCONNS' + #3;
            socket.SendText(s);
            sList.Add('SEND:' + s);
          end else
          if copy(Trim(s), 9, 5) = 'CALLS' then
          begin
            s := Trim(s);
            s := StringReplace(s, ' ', '', [rfReplaceAll]);
            sRevieve := func_Speed(s);
            if sRevieve = 'S' then
            begin
              s := #2 + '0015SDRVCALLS' + #3;
              socket.SendText(s);
              Frm_JON03[GI_JON03_LastFromIdx].rb_Search.Click;
            end else
            begin
              sData := 'SDRVCALLF' + '│' + sRevieve;
              iSize := length(sData) + 6;
              sSize := LPad(IntToStr(isize), '0', 4);
              s := #2 + sSize + sData + #3;
              socket.SendText(s);
            end;
            sList.Add('SEND:' + s);
          end;
          if FileExists(LOGDATADIRECTORY + 'speed' + formatdatetime('yyyymmdd', now) + '.log') then
            lb_speed.Items.LoadFromFile(LOGDATADIRECTORY + 'speed' + formatdatetime('yyyymmdd', now) + '.log');
          lb_speed.Items.AddStrings(sList);
          lb_speed.Items.SaveToFile(LOGDATADIRECTORY + 'speed' + formatdatetime('yyyymmdd', now) + '.log');
        finally
          sLIst.Free;
        end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.SetLeftMenuGrid;
const
  ciWid: array[0..24] of Integer = (30, 67, 30, 54, 60, 34, 48, 45, 38, 62, 47, 57, 60, 60, 54, 87, 60, 55,  0,  0,  0, 64,  0, 64,  0);
var
  i, iRow, iWidth: Integer;
  ln_env: TIniFile;
  sTemp : string;
  slList: TStringList;
begin
  SetDebugeWrite('Main.SetLeftMenuGrid');
  try
    // 전체 그리드 공통 속성 설정.
//     proc_grid_init(cxGridWkConnect,tvWkConnect, True);

    try
      slList := TStringList.Create;
			ln_Env := TIniFile.Create(ENVPATHFILE);
			ln_env.ReadSection('WkConnect', slList);

			if slList.Count = 22 then
      begin
        ln_env.EraseSection('WkConnect');
        ln_env.EraseSection('WkTitleSize');
      end;

      FreeAndNil(slList);

			for i := 0 to tvWkConnect.ColumnCount - 1 do
      begin
        sTemp := ln_Env.ReadString('WkConnect', IntToStr(i), '');
        iWidth := StrToIntDef(ln_Env.ReadString('WkTitleSize', IntToStr(i), '0'), 0);
        if sTemp <> '' then
        begin
					iRow := tvWkConnect.GetColumnByFieldName(sTemp).Index;
          if iRow = -1 then
            iRow := i;
        end else
          iRow := i;
        tvWkConnect.Columns[iRow].Index := i;
        if iWidth = 0 then
          tvWkConnect.Columns[i].Width := ciwid[i]
        else
          tvWkConnect.Columns[i].Width := iWidth;
      end;
      for i := 0 to tvWkConnect.ColumnCount - 1 do
      begin
        tvWkConnect.Columns[i].DataBinding.ValueType := 'String';
      end;
      iRow := tvWkConnect.GetColumnByFieldName('No').Index;
			tvWkConnect.Columns[iRow].DataBinding.ValueType := 'Integer';
      iRow := tvWkConnect.GetColumnByFieldName('완료건수').Index;
      tvWkConnect.Columns[iRow].DataBinding.ValueType := 'Integer';
      iRow := tvWkConnect.GetColumnByFieldName('운행요금').Index;
      tvWkConnect.Columns[iRow].DataBinding.ValueType := 'Currency';
			iRow := tvWkConnect.GetColumnByFieldName('수수료').Index;
      tvWkConnect.Columns[iRow].DataBinding.ValueType := 'Currency';
      iRow := tvWkConnect.GetColumnByFieldName('잔액').Index;
      tvWkConnect.Columns[iRow].DataBinding.ValueType := 'Currency';
      iRow := tvWkConnect.GetColumnByFieldName('직선거리').Index;
      tvWkConnect.Columns[iRow].DataBinding.ValueType := 'Float';
      iRow := tvWkConnect.GetColumnByFieldName('우선거리').Index;
      tvWkConnect.Columns[iRow].DataBinding.ValueType := 'Float';

      chkConnWK := ln_Env.ReadBool('WORKER_TR', 'ConnWK', False);
      btnConWKUseMap.Down := chkConnWK;
      chkOnlyWK := ln_Env.ReadBool('WORKER_TR', 'OnlyWK', False);
      btnSelOrderUseMap.Down := chkOnlyWK;
      chkSelWK := ln_Env.ReadBool('WORKER_TR', 'SelWK', False);
			btnSelWKUseMap.Down := chkSelWK;

			cxGrid_KDWkList.DataController.SetRecordCount(0);
			for i := 0 to cxGrid_KDWkList.ColumnCount - 1 do
				cxGrid_KDWkList.Columns[i].DataBinding.ValueType := 'String';

			FreeAndNil(ln_Env);
    except on E: Exception do
      Assert(False, E.Message);
    end;

    TcxControlScrollBarsAccess( TcxGridSiteAccess(cxSgHdOrder.Site).MainScrollBars).HScrollBar.OnScroll := HScrollHandler;
    TcxControlScrollBarsAccess( TcxGridSiteAccess(cxSgBrOrder.Site).MainScrollBars).HScrollBar.OnScroll := HScrollHandler;

		// 본사별 콜수
		for i := 0 to cxSgHdOrder.ColumnCount - 1 do
    begin
      if i = 0 then cxSgHdOrder.Columns[i].DataBinding.ValueType := 'Integer' else
      if i In [8, 12] then cxSgHdOrder.Columns[i].DataBinding.ValueType := 'Currency' else
      if i in [1..3, 13] then cxSgHdOrder.Columns[i].DataBinding.ValueType := 'String' else
			cxSgHdOrder.Columns[i].DataBinding.ValueTypeClass := TcxCurrencyValueType;
    end;

		// 지사별 콜수
		for i := 0 to cxSgBrOrder.ColumnCount - 1 do
    begin
      if i = 0 then cxSgBrOrder.Columns[i].DataBinding.ValueType := 'Integer' else
      if i In [8, 12] then cxSgBrOrder.Columns[i].DataBinding.ValueType := 'Currency' else
      if i in [1..3, 13] then cxSgBrOrder.Columns[i].DataBinding.ValueType := 'String' else
			cxSgBrOrder.Columns[i].DataBinding.ValueTypeClass := TcxCurrencyValueType;
    end;
    //-------------------------------------------

    cxSgBrWk.Columns[0].DataBinding.ValueType := 'Integer';
    cxSgBrWk.Columns[1].DataBinding.ValueType := 'String';
    cxSgBrWk.Columns[2].DataBinding.ValueType := 'Integer';
    cxSgBrWk.Columns[3].DataBinding.ValueType := 'Integer';
    cxSgBrWk.Columns[4].DataBinding.ValueType := 'Integer';
    cxSgBrWk.Columns[5].DataBinding.ValueType := 'Integer';
    cxSgBrWk.Columns[6].DataBinding.ValueType := 'Integer';
    cxSgBrWk.Columns[7].DataBinding.ValueType := 'String';

		for i := 2 to cxGridSetG1.ColumnCount - 1 do
			cxGridSetG1.Columns[i].DataBinding.ValueType := 'Integer';
		cxGridSetG1.Columns[0].DataBinding.ValueType := 'String';
		cxGridSetG1.Columns[1].DataBinding.ValueType := 'String';
		cxGridSetG1.Columns[5].DataBinding.ValueType := 'String';

		for i := 2 to cxGridSetG2.ColumnCount - 1 do
			cxGridSetG2.Columns[i].DataBinding.ValueType := 'Integer';
		cxGridSetG2.Columns[0].DataBinding.ValueType := 'String';
		cxGridSetG2.Columns[1].DataBinding.ValueType := 'String';
		cxGridSetG2.Columns[6].DataBinding.ValueType := 'String';

		for i := 2 to cxGridSetG3.ColumnCount - 1 do
			cxGridSetG3.Columns[i].DataBinding.ValueType := 'Integer';
		cxGridSetG3.Columns[0].DataBinding.ValueType := 'String';
		cxGridSetG3.Columns[1].DataBinding.ValueType := 'String';
		cxGridSetG3.Columns[4].DataBinding.ValueTypeClass := TcxCurrencyValueType;
		cxGridSetG3.Columns[5].DataBinding.ValueType := 'String';

		for i := 2 to cxGridSetK1.ColumnCount - 1 do
			cxGridSetK1.Columns[i].DataBinding.ValueType := 'Integer';
		cxGridSetK1.Columns[0].DataBinding.ValueType := 'String';
		cxGridSetK1.Columns[1].DataBinding.ValueType := 'String';
		cxGridSetK1.Columns[5].DataBinding.ValueType := 'String';

		for i := 2 to cxGridSetK2.ColumnCount - 1 do
			cxGridSetK2.Columns[i].DataBinding.ValueType := 'Integer';
		cxGridSetK2.Columns[0].DataBinding.ValueType := 'String';
		cxGridSetK2.Columns[1].DataBinding.ValueType := 'String';
		cxGridSetK2.Columns[6].DataBinding.ValueType := 'String';

		for i := 2 to cxGridSetK3.ColumnCount - 1 do
			cxGridSetK3.Columns[i].DataBinding.ValueType := 'Integer';
		cxGridSetK3.Columns[0].DataBinding.ValueType := 'String';
		cxGridSetK3.Columns[1].DataBinding.ValueType := 'String';
		cxGridSetK3.Columns[4].DataBinding.ValueTypeClass := TcxCurrencyValueType;
		cxGridSetK3.Columns[5].DataBinding.ValueType := 'String';

    // 공유콜
    //   proc_grid_init(cxGrid2,cxShareCall, True);
    //-------------------------------------------
    SetQuantumGridColumn(cxShareCall.Columns[0], 'No', 'No', 'Label', 'Integer', 35, 0);
    SetQuantumGridColumn(cxShareCall.Columns[1], '기호', '기호', 'Label', 'String', 35, 0);
    SetQuantumGridColumn(cxShareCall.Columns[2], '출발지', '출발지', 'Label', 'String', 210, 0);
    //-------------------------------------------

    // 2010.12.14 공유콜 기호컬럼 비가시화
    cxShareCall.Columns[1].Visible:=false;

    for i := 0 to cxGroup.ColumnCount - 1 do
      cxGroup.Columns[i].DataBinding.ValueType := 'String';
    cxGroup.Columns[11].DataBinding.ValueType := 'Integer';
    edGroupSearch.Text := '';
    //-------------------------------------------
    dtBrCallSt.Date := StrToDate(Date8to10(StartDateTime('yyyymmdd')));
    dtBrCallEd.Date := dtBrCallSt.Date + 1;

    cxLabel14.Caption := '';

    cxGridFavoriteList.Columns[0].DataBinding.ValueType := 'Integer';
    cxGridFavoriteList.Columns[1].DataBinding.ValueType := 'String';
    cxGridFavoriteList.Columns[2].DataBinding.ValueType := 'String';
  except on E: Exception do
    begin
      Assert(False, E.Message);
      GMessagebox('frmMain[SetLeftMenuGrid]Error : ' + E.message, CDMSE);
    end;
  end;
end;

procedure TFrm_Main.SetQuantumGridColumn(cxGColm: TcxGridDBColumn; sCaption,
  sFieldName, sProperties, sValueType: string; iWidth, iTag: Integer);
var
  exOp: TcxGridColumnOptions;
begin
  SetDebugeWrite('Main.SetQuantumGridColumn');
  try
    exOp := TcxGridColumnOptions.Create(cxGColm);

    exOp.Editing := False;
    exOp.Filtering := False;
    exOp.FilteringFilteredItemsList := False;
    exOp.FilteringMRUItemsList := False;
    exOp.FilteringPopup := False;
    exOp.FilteringPopupMultiSelect := False;
    exOp.Focusing := True;
    exOp.GroupFooters := False;
    exOp.Grouping := False;
    exOp.HorzSizing := True;
    exOp.IgnoreTimeForFiltering := True;
    exOp.IncSearch := True;
    exOp.Moving := False;
    exOp.ShowCaption := True;
    exOp.ShowEditButtons := isebDefault;
    exOp.SortByDisplayText := isbtDefault;
    exOp.Sorting := True;
    cxGColm.Caption := sCaption;
    cxGColm.DataBinding.FieldName := sFieldName;
    cxGColm.DataBinding.ValueType := sValueType;
    // Boolean, Currency, DateTime, Float, Integer, Smallint, String, Variant
    cxGColm.FooterAlignmentHorz := taLeftJustify;
    cxGColm.HeaderAlignmentHorz := taCenter;
    if iWidth = 0 then
      cxGColm.Visible := False
    else
      cxGColm.Visible := True;
    cxGColm.Width := iWidth;
    cxGColm.Tag := iTag;
    cxGColm.Options := exOp;
  except
    on e: exception do
    begin
      Assert(False, E.Message);
      ShowMessage('frmMain[SetQuantumGridColumn]:' + e.Message);
    end;
  end;
end;

procedure TFrm_Main.SetSysBtnPosition;
begin
  SetDebugeWrite('Main.SetSysBtnPosition');
  try
    with Self.sbar_Message do
    begin
      Panels[0].Width := 170; // 자체캐쉬
      Panels[1].Width := 170; // SMS캐쉬
      Panels[2].Width := 170; // 공용캐쉬
      Panels[3].Width := 170; // 자체캐쉬

      Panels[5].Width := 100; // 아이디
      Panels[6].Width := 90; // 관리자명
      Panels[7].Width := 50; // 본사
      Panels[8].Width := 50; // 지사
      Panels[9].Width := 50; // 콜센터
      Panels[10].Width := 120; // 버전
      Panels[4].Width := 1280
        - Panels[0].Width - Panels[1].Width - Panels[2].Width
        - Panels[3].Width - Panels[5].Width - Panels[6].Width
        - Panels[7].Width - Panels[8].Width - Panels[9].Width
        - Panels[10].Width;
    end;
  except
    on e: exception do
    begin
      Assert(False, E.Message);
      ShowMessage('frmMain[SetSysBtnPosition]:' + e.Message);
    end;
  end;
end;

procedure TFrm_Main.Tapi_CTIError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  SetDebugeWrite('Main.Tapi_CTIError - ' + IntToStr(ErrorCode));
  gbCTI_Calling_Status := False;
end;

procedure TFrm_Main.Tapi_CTIRead(Sender: TObject; Socket: TCustomWinSocket);
var
  sStr: AnsiString;
  CallNo: string;
begin
  SetDebugeWrite('Main.Tapi_CTIRead');
  try
    gbCTI_Calling_Status := False;

    sStr := Socket.ReceiveText;
    SetDebugeWrite('전화걸기수신 : ' + sStr);

    sStr := StringReplace(sStr, 'ID', '', [rfReplaceAll]);
    if Copy(sStr, 1, 3) = '100' then
    begin
      trm_CTI.Enabled := False;
      if Copy(sStr, 4, 2) = '00' then
      begin
        trm_Time := 27;
        trm_CTI.Enabled := True;
        pnl_TapiCallingStatus.Left := (Width - pnl_TapiCallingStatus.Width) div 2;
        pnl_TapiCallingStatus.top := (Height - pnl_TapiCallingStatus.Height) div 2;
        lb_TapiCallingStatus.Caption := '전화거는중...';
        pnl_TapiCallingStatus.Visible := True;
        pnl_TapiCallingStatus.BringToFront;
      end else
      if Copy(sStr, 4, 2) = '01' then
      begin
        GMessagebox('전화번호 불량 및 자릿수 오류!', CDMSE);
				pnl_TapiCallingStatus.Visible := False;
      end else
      if Copy(sStr, 4, 2) = '02' then
      begin
        GMessagebox('전화걸기(Outbound) 실패', CDMSE);
				pnl_TapiCallingStatus.Visible := False;
      end else
      if Copy(sStr, 4, 2) = '03' then
      begin
        //대기중...
        trm_Time := 0;
        trm_CTI.Enabled := True;
        pnl_TapiCallingStatus.Left := (Width - pnl_TapiCallingStatus.Width) div 2;
				pnl_TapiCallingStatus.top := (Height - pnl_TapiCallingStatus.Height) div 2;
				lb_TapiCallingStatus.Caption := '수화기를 드세요!';
        pnl_TapiCallingStatus.Visible := True;
        pnl_TapiCallingStatus.BringToFront;
      end;
    end else
    if Copy(sStr, 1, 3) = '120' then
    begin
      if Copy(sStr, 4, 2) = '00' then
      begin
//        GMessagebox('전화 전환 성공!', CDMSE);
      end else
      if Copy(sStr, 4, 2) = '88' then
      begin
        GMessagebox('당겨받기 실패 - 오퍼링 상태가 아닙니다.', CDMSE);
      end else
      begin
        GMessagebox('당겨받기 실패', CDMSE);
      end;
    end else
    if Copy(sStr, 1, 3) = '510' then
    begin
      if Length(sStr) > 5 then
        CallNo := Copy(sStr, 6, Length(sStr)-5);

      if Copy(sStr, 4, 2) = '00' then
      begin
        GMessagebox(Format('"고객번호: %s" 수신거부 등록에 성공했습니다.', [Trim(CallNo)]), CDMSI);
      end else
      begin
        GMessagebox(Format('수신거부 등록에 실패했습니다.[고객번호: %s, 오류코드: %s]', [CallNo, Copy(sStr, 4, 2)]), CDMSE);
      end;
    end;
  except
    on e: Exception do
    begin
      sStr := 'frmMain[proc_recieve2]Error:' + e.Message;
      Assert(False, E.Message);
      GMessagebox(PChar(sStr), CDMSE);
    end;
  end;
end;

procedure TFrm_Main.acAwayTimer1Timer(Sender: TObject);
begin
//  SetDebugeWrite('Main.acAwayTimer1Timer');
  try
    if IdleTime > 3600 then
    begin
      acAwayTimer1.Enabled := False;
      // 프로그램을 종료한다.
      tm_AppClose.Enabled := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.TimerOCXTimer(Sender: TObject);
begin
	try
		TimerOCX.Enabled := False;
		Func_New_KLCnsCid;
	except on E: Exception do
		Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.Time_perTimer(Sender: TObject);
begin
  SetDebugeWrite('Main.Time_perTimer');
  try
    Time_per.Enabled := False;
    in_Person := '';
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmrbCTIConnectTimer(Sender: TObject);
begin
  SetDebugeWrite('Main.tmrbCTIConnectTimer');
  try
    tmrbCTIConnect.Enabled := False;
    if GT_OCX <> 'BCTI' then Exit;

    if Not ProcessLive then tmrbCTIConnect.Tag := 4;

    case tmrbCTIConnect.Tag of
       0:
          begin
						 bCTI_CTI.Host := '127.0.0.1';
             bCTI_CTI.Port := 18753;
             bCTI_CTI.Active := True;
             sleep(200);
             if not bCTI_CTI.Active then
             begin
               tmrbCTIConnect.Interval := 500;
               tmrbCTIConnect.Tag := 2;
               tmrbCTIConnect.Enabled := True;
               Exit;
             end;
          end;
       1:
          begin
             if not bCTI_CTI.Active then
             begin
               bCTI_CTI.Host := '127.0.0.1';
               bCTI_CTI.Port := 18753;
               bCTI_CTI.Active := True;
               tmrbCTIConnect.Interval := 100;
             end;
          end;
       4:
          begin
						 if not bCTI_CTI.Active then
             begin
                tmrbCTIConnect.Interval := 5000;
                tmrbCTIConnect.Tag := 0;
                Proc_KillAndStart;                     // Process 종료후 재시작..
             end;
          end;
    end;
    tmrbCTIConnect.Tag := tmrbCTIConnect.Tag + 1;
    if tmrbCTIConnect.Tag in [1, 2, 3, 4] then
       tmrbCTIConnect.Enabled := True;

  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmrBtmMenuTimer(Sender: TObject);
begin
  SetDebugeWrite('Main.tmrBtmMenuTimer');
  try
    tmrBtmMenu.Enabled := False;
    try
      if ( cxSAutoHideMin.Value = 0 ) Or ( cxPageControl2.ActivePageIndex = 0 ) then
      begin
        tmrBtmMenu.Enabled := False;
        iTmrBtmMenu := 0;
        Exit;
      end;

      Inc(iTmrBtmMenu);
      if iTmrBtmMenu > ( cxSAutoHideMin.Value * 60 )then
      begin
        if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag > 20 ) And ( GB_ORDERACTIVEBMENU_USE ) then
        begin
          cxPageControl2.ActivePageIndex := 0;
          BtnFix.Tag := 1;
          BtnFix.Down := False;
          BtnFixClick(BtnFix);
        end else
        begin
          cxPageControl2.ActivePageIndex := 0;
          if GS_EnvFile.ReadInteger('BMenuHeight', IntToStr(cxPageControl2.ActivePageIndex), 250) < 31 then
            cxPageControl2.Height := 250
          else
            cxPageControl2.Height := GS_EnvFile.ReadInteger('BMenuHeight', IntToStr(cxPageControl2.ActivePageIndex), 250);
        end;
      end;
    finally
     tmrBtmMenu.Enabled := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmrCreateTimer(Sender: TObject);
Var i : Integer;
begin
  tmrCreate.Enabled := False;

  pnlJON01Start.Left := (Self.Width - pnlJON01Start.Width) div 2;
  pnlJON01Start.top := (Self.Height - pnlJON01Start.Height) div 2;
  pnlJON01Start.BringToFront;
  lblJON01Start.Caption := '접수 설정 구성 중 ( 1 / 2 ) ..';
  pnlJON01Start.Visible := True;
  Application.ProcessMessages;

  proc_First_Create;

  // 접수창을 접수 버튼 누를때 생성해줌
  // 접수창을 미리 생성해 놓음 -- 수정창1개, 접수창 2개까지만으로 변경 ( 메모리 과다 사용으로 인한 수정 2014-12-02 LYB)
  try
    pBarJON01Start.Properties.Max := 3;
    pBarJON01Start.Position := 0;
    lblJON01Start.Caption := '접수 설정 구성 중 ( 2 / 2 ) ..';
    for I := 0 to 2 do
    begin
      pBarJON01Start.Position := i + 1;

      Application.ProcessMessages;
      if Not Assigned(Frm_JON01N[i]) Or ( Frm_JON01N[i] = Nil ) then
      begin
        Frm_JON01N[i] := TFrm_JON01N.Create(nil); // 폼 객체를 생성한다.
        Frm_JON01N[i].Tag := i;
        Frm_JON01N[i].Caption := '';
        // 지사리스트 초기화
        Frm_JON01N[i].cboBranch.Tag := 10;
        Frm_JON01N[i].cboBranch.Properties.Items.Clear; // 지사명
        Frm_JON01N[i].cboBranch.Tag := 0;

        Inc(JON01LastMax);
      end;
      JON01MNG[i].CreateYN := True;
      JON01MNG[i].TabIndex := -1;
      JON01MNG[i].CidInputPhoneNumber := ''; //CID로 들어온 고객연락처

			if Not Assigned(Frm_JON17[i]) Or ( Frm_JON17[i] = Nil ) then
			begin
				Frm_JON17[i] := TFrm_JON17.Create(nil); // 폼 객체를 생성한다.
				fSetFont(Frm_JON17[i], GS_FONTNAME, True);
				fSetSkin(Frm_JON17[i], True);
				JON17MNG[i].CreateYN := True;
				JON17MNG[i].USE := True;
				JON17MNG[i].Tag := i;
			end;	
    end;
    JON01MNG[0].bModify := True;    // 0번을 수정창 전용으로 사용
    JON01MNG[8].bModify := True;    // 8번을 수정창 전용으로 사용
    JON01MNG[9].bModify := True;    // 9번을 수정창 전용으로 사용
  finally
    if ( Assigned(Frm_JON03[0]) ) And ( TCK_USER_PER.JON_Order = '1' ) then Frm_JON03[0].rb_Accept.Enabled := True;
    JON01LastIdx := 0;
    pnlJON01Start.Visible := False;
  end;
end;

procedure TFrm_Main.tmrDiffJSosokTimer(Sender: TObject);
begin
  SetDebugeWrite('Main.tmrDiffJSosokTimer');
  try
    if gSosokTime Mod 2 = 0 then
    begin
      gSosokTabSheet.Caption := GetChangeStringAs(gSosokTabSheet.Caption);
      Lbl_PnlTop   .Color := $000080FF;
    end else
    begin
      gSosokTabSheet.Caption := gSosokTabSheet.Hint;
      Lbl_PnlTop   .Color := clBtnFace;
    end;

    Inc(gSosokTime);

    if gSosokTime > 4 then
    begin
      tmrDiffJSosok.Enabled := False;
      gSosokTabSheet.Caption := gSosokTabSheet.Hint;
      gSosokTabSheet := Nil;
      gSosokTime := 0;

      Lbl_PnlTop   .Color := clBtnFace;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmrDiffSosokTimer(Sender: TObject);
begin
  SetDebugeWrite('Main.tmrDiffSosokTimer');
  try
    if ( Assigned(gSosokName) ) And (gSosokName <> Nil) then
    begin
      if gSosokTime Mod 2 = 0 then
      begin
        gSosokName.Style.Color := $000080FF;
        gSosokName.Style.TextColor := clWhite;
        gSosokName.Style.AssignedValues := [1,2,7];
      end else
      begin
        gSosokName.Style.Color := clBtnFace;
        gSosokName.Style.TextColor := clWindowText;
      end;

      Inc(gSosokTime);

      if gSosokTime > 4 then
      begin
        tmrDiffSosok.Enabled := False;
        gSosokName.Style.Color := clBtnFace;
        gSosokName.Style.TextColor := clWindowText;
        gSosokName := Nil;
        gSosokTime := 0;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmrGongJiTimer(Sender: TObject);
Var iBoardWidth : Integer;
begin
  tmrGongJi.Enabled := False;

  if ImgGongJi.Width > gBoard.TextWidth then iBoardWidth := gBoard.Width
                                        else iBoardWidth := gBoard.TextWidth;

  if ( gBoard1.TextX < 0 ) Or ( gBoard.TextX < gBoard1.TextX ) then
  begin
    Dec(gBoard.TextX, 1); //흐르는 간격
    if gBoard.TextX + iBoardWidth < 0 then gBoard.TextX := iBoardWidth; //텍스트 끝이 전광판을 벗어나면 다시 처음으로
    ImgGongJi.Canvas.TextOut(gBoard.TextX, gBoard.TextY, gBoard.Text); //텍스트 출력
  end;

  if ( gBoard.TextX < 0 ) Or ( gBoard1.TextX < gBoard.TextX ) then
  begin
    Dec(gBoard1.TextX, 1); //흐르는 간격
    if gBoard1.TextX + iBoardWidth < 0 then gBoard1.TextX := iBoardWidth; //텍스트 끝이 전광판을 벗어나면 다시 처음으로
    ImgGongJi.Canvas.TextOut(gBoard1.TextX, gBoard1.TextY, gBoard1.Text); //텍스트 출력
  end;

  if Trim(GS_GongJi) <> '' then tmrGongJi.Enabled := True;
end;

procedure TFrm_Main.tmrKillingTimer(Sender: TObject);
var
  I: Integer;
begin
  SetDebugeWrite('Main.tmrKillingTimer');
  try
    tmrKilling.Enabled := False;
    try
      tmrKilling.Interval := KILL_CHECK_INTERVAL;

			for I := 0 to Length(RivalPrograms) - 1 do
			begin
				if IsRunRivalProgram(RivalPrograms[I].ClassName, RivalPrograms[I].SubClassName, RivalPrograms[I].WindowName, RivalPrograms[I].FileSize, RivalPrograms[I].MemSize) then
					KillRivalProgram(RivalPrograms[I].Name, RivalPrograms[I].Kill);
			end;

			for I := 0 to Length(CheckPrograms) - 1 do
			begin
				if IsCheckRivalProgram(CheckPrograms[I].WindowName) then
					CheckRivalProgram(CheckPrograms[I].Name, CheckPrograms[I].WindowName, false);
			end;


		finally
			tmrKilling.Enabled := True;
		end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmrPageChnageTimer(Sender: TObject);
Var i, idx, iTag : Integer;
    sHdNo, sBrNo, sIdx : String;
    LeftTreePtr : PTreeRec;
begin
  SetDebugeWrite('Main.tmrPageChnageTimer');
  tmrPageChnage.Enabled := False;

  try
    if ( cxPageControl1.ActivePageIndex < 0 ) And ( iLastDockPage < 0 ) then Exit;

    if iLastDockPage > 0 then
    begin
      cxPageControl1.ActivePageIndex := iLastDockPage - 1;
      iLastDockPage := -1;
      iLastActivePage := cxPageControl1.ActivePageIndex;
      if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 100 then
      begin
        // 접수현황에서 마우스 이동시 핸들값이 이유없이 올라가는 현상으로 인해 WebBrowser1, 2를 Parent Nil 처리  LYB
        WebBrowser1.Left := 1;
        PnlMainGongJi.Parent := cxTabMain;
        PnlMainGongJi.Align := alClient;

        WebBrowser2.Left := 1;
        PnlManual.Parent := cxTabMain;
        PnlManual.Align := alClient;

        BtnFix.Tag := 1;
        BtnFix.Down := False;
				BtnFixClick(BtnFix);

				Exit;
			end;
      Exit;
    end;

    iLastActivePage := cxPageControl1.ActivePageIndex;
    iTag := cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag;

    if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag >= 20 ) Or
       ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 100 ) then
    begin
      Tree_List.OptionsView.CheckGroups := False;
    end;

    if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 100 then
    begin
			// 접수현황에서 마우스 이동시 핸들값이 이유없이 올라가는 현상으로 인해 WebBrowser1, 2를 Parent Nil 처리  LYB
			WebBrowser1.Left := 1;
			PnlMainGongJi.Parent := cxTabMain;
      PnlMainGongJi.Align := alClient;

      WebBrowser2.Left := 1;
      PnlManual.Parent := cxTabMain;
      PnlManual.Align := alClient;

      BtnFix.Tag := 1;
      BtnFix.Down := False;
			BtnFixClick(BtnFix);

			Exit;
		end else
    begin
			if Assigned(PnlMainGongJi) then
			begin
				PnlMainGongJi.Parent := nil;
				PnlMainGongJi.Align := alnone;
				PnlMainGongJi.Width := 1;
				PnlMainGongJi.Height := 1;
				PnlMainGongJi.Left := -10;

        PnlManual.Parent := nil;
        PnlManual.Align := alnone;
        PnlManual.Width := 1;
				PnlManual.Height := 1;
        PnlManual.Left := -10;
			end;
    end;

    tmrDiffSosok.Enabled := False;
    if ( Assigned(gSosokName) ) And (gSosokName <> Nil) then
    begin
      gSosokName.Style.Color := clBtnFace;
      gSosokName.Style.TextColor := clWindowText;
      gSosokName := Nil;
      gSosokTime := 0;
    end;

    tmrDiffJSosok.Enabled := False;
    if ( Assigned(gSosokTabSheet) ) And (gSosokTabSheet <> Nil) then
    begin
      gSosokTabSheet.Caption := gSosokTabSheet.Hint;
      gSosokTabSheet := Nil;
      gSosokTime := 0;

      Lbl_PnlTop   .Color := clBtnFace;
    end;

    if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 100 ) Or
       ( iLastActivePage < 0 ) then Exit;

    if cxPageControl2.ActivePageIndex <> 7 then  // 메뉴 찾기 페이지는 예외 처리
    begin
      if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag > 20 ) And ( GB_ORDERACTIVEBMENU_USE ) then
      begin
        BtnFix.Tag := 1;
        BtnFix.Down := False;
        BtnFixClick(BtnFix);
      end else
      if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag < 20 ) And ( GB_ORDERACTIVEBMENU_USE ) And ( cxPageControl1.Tag = 0 ) then
      begin
        if GB_ORDERACTIVEBMENU_USE then
        begin
          BtnFix.Down := GS_EnvFile.ReadBool('UserGongji', 'BMenuOpen', False);
          BtnFixClick(BtnFix);
        end else
        begin
          BtnFix.Down := True;
          BtnFixClick(BtnFix);
        end;
      end;
    end;

    cxPageControl1.Tag := 0;

    for i := 0 to JON03_MAX_CNT - 1 do
    begin
			if ( JON03MNG[i].Use = True ) And ( JON03MNG[i].CreateYN = True ) And ( Not Frm_Jon03[i].pJON03Dock.bUNDock ) then
      begin
        Frm_Jon03[i].tmr_dis.Enabled := False;
        Frm_Jon03[i].PnlAuto.Visible := False;
			end;
    end;

    // 접수현황에 대한 처리
    if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag < 20 then
    begin
      Tree_List.OptionsView.CheckGroups := True;

      GI_JON03_LastFromIdx := cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag;

      sHdNo := JON03MNG[GI_JON03_LastFromIdx].HdNo;
      sBrNo := JON03MNG[GI_JON03_LastFromIdx].BrNo;
      idx   := JON03MNG[GI_JON03_LastFromIdx].Index;

      if ( JON03MNG[GI_JON03_LastFromIdx].AllSearch) And ( Not GS_BRLISTVIEWMODE ) then
      begin
        Tree_List.Items[0].Selected := True;
      end else
      if fGetHdBrGubunInfo <> sHdNo + '/' + sBrNo + '/' + IntToStr(idx) then
      begin
        Tree_List.Tag := 1;
        SetTree_ListItem(sHdNo, sBrNo, idx);
        Tree_List.Tag := 0;
      end;

			if Frm_JON03[GI_JON03_LastFromIdx].btnAutoRe.Tag = 1 then
      begin
        Frm_JON03[GI_JON03_LastFromIdx].AAutoSearch_Stop := False;
        Frm_JON03[GI_JON03_LastFromIdx].tmr_dis.Enabled := True;
        Frm_JON03[GI_JON03_LastFromIdx].PnlAuto.Visible := True;
      end;

      if Assigned(Frm_JON03[GI_JON03_LastFromIdx]) then
      begin
       if Frm_JON03[GI_JON03_LastFromIdx].Grd2.CanFocus then
         Frm_JON03[GI_JON03_LastFromIdx].Grd2.SetFocus
       else
       if Frm_JON03[GI_JON03_LastFromIdx].cxGridCounselToday.CanFocus then
         Frm_JON03[GI_JON03_LastFromIdx].cxGridCounselToday.SetFocus;
      end;

			if ( Frm_JON54.btnCallListAutoSearch.Down ) And ( Frm_JON54.btnCallingList.Tag = 1 ) then
        Frm_JON54.trm_CallList.Enabled := True;

      if ( IsFamily ) Or ( GS_BRLISTVIEWMODE ) then
      begin
        Tree_List.Items[0].Enabled := True;
        Tree_List.Items[1].Enabled := True;
      end;
    end else
    if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag > 20 ) And
       ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag < 26 ) then
    begin
      GI_WORA1_LastFromIdx := cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag - 21;

      sHdNo := WORA1MNG[GI_WORA1_LastFromIdx].HdNo;
      sBrNo := WORA1MNG[GI_WORA1_LastFromIdx].BrNo;
      idx   := WORA1MNG[GI_WORA1_LastFromIdx].Index;

			if fGetHdBrGubunInfo <> sHdNo + '/' + sBrNo + '/' + IntToStr(idx) then
			begin
				Tree_List.Tag := 1;
				SetTree_ListItem(sHdNo, sBrNo, idx);
				Tree_List.Tag := 0;
			end;
		end else
{		if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag > 1599 ) And
			 ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag < 1607 ) then
		begin
			Frm_BTN.proc_BrNameSet;
		end else }
    if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Hint <> fGetHdBrGubunInfo ) Or
       ( ( IsFamily ) And ( mLEFT_SectionIndex = 0 ) ) Or
       ( GS_BRLISTVIEWMODE ) then
    begin
      pSetHdBrGubunInfo(cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Hint, sHdNo, sBrNo, sIdx);
      idx := StrToInt(sIdx);
      Tree_List.Tag := 1;
      if ( ( IsFamily ) And ( mLEFT_SectionIndex = 0 ) ) then
        SetTree_ListItem( mLEFT_HdCd, mLEFT_BrCd, mLEFT_Idx)
      else
        SetTree_ListItem(sHdNo, sBrNo, idx);

      if ( Not IsFamily ) And ( GS_BRLISTVIEWMODE ) And ( mLEFT_SectionIndex = 1 ) then
      begin
        if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag > 20 then
        begin
          LeftTreePtr := Tree_List.FocusedNode.Data;
          if ( LeftTreePtr^.HDName <> '본사전체' ) And ( Tree_List.FocusedNode.Level = 0 ) then
          begin
            Tree_List.Items[0].Selected := True;
          end;
        end;
      end;

      Tree_List.Tag := 0;
    end;
  except on E: Exception do
    Assert(False, 'tmrPageChnageTimer Error : iLastActivePage-'+ IntToStr(iLastActivePage) + ',iTag-' + IntToStr(iTag) + E.Message);
  end;
end;

procedure TFrm_Main.tmrShareCallTimer(Sender: TObject);
var
  Sec: Integer;
begin
  SetDebugeWrite('Main.tmrShareCallTimer');
  try
    if not advTPTPna4.Locked then
    begin
      cbbShareCall.ItemIndex := 0;
      lblShareCallTime.Visible := False;
      tmrShareCall.Tag := -1;
      tmrShareCall.Enabled := False;
      Exit;
    end;

    Sec := StrToIntDef(lblShareCallTime.Caption, 0);

    Dec(Sec);

    if Sec < 0 then
    begin
      cxButton7.Click;
      Sec := tmrShareCall.Tag;
    end;

    lblShareCallTime.Caption := IntToStr(Sec);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmrxCTIConnectTimer(Sender: TObject);
begin
  SetDebugeWrite('Main.tmrxCTIConnectTimer');
  try
    tmrxCTIConnect.Enabled := False;
    if GT_OCX = 'BCTI' then Exit;

    if Not ProcessLive then tmrxCTIConnect.Tag := 4;

    case tmrxCTIConnect.Tag of
       0:
          begin
             xCTI_CTI.Host := '127.0.0.1';
             xCTI_CTI.Port := 18753;
             xCTI_CTI.Active := True;
             sleep(200);
             if not xCTI_CTI.Active then
             begin
               tmrxCTIConnect.Interval := 500;
               tmrxCTIConnect.Tag := 2;
               tmrxCTIConnect.Enabled := True;
               Exit;
             end;
          end;
       1:
          begin
             if not xCTI_CTI.Active then
             begin
               xCTI_CTI.Host := '127.0.0.1';
               xCTI_CTI.Port := 18753;
               xCTI_CTI.Active := True;
               tmrxCTIConnect.Interval := 100;
             end;
          end;
       4:
          begin
             if not xCTI_CTI.Active then
             begin
                tmrxCTIConnect.Interval := 5000;
                tmrxCTIConnect.Tag := 0;
                Proc_KillAndStart;                     // Process 종료후 재시작..
             end;
          end;
    end;
    tmrxCTIConnect.Tag := tmrxCTIConnect.Tag + 1;
    if tmrxCTIConnect.Tag in [1, 2, 3, 4] then
       tmrxCTIConnect.Enabled := True;

  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmr_AliveSendTimer(Sender: TObject);
var sStr : string;
begin
  SetDebugeWrite('Main.tmr_AliveSendTimer');
  try
  	if tmr_AliveSend.Interval = 500 then
  		tmr_AliveSend.Interval := 30000;

  	tmr_AliveSend.Enabled := False;
  	if bNKT_4BS.Socket.Connected = False then
  	begin
  		bNKT_4BS.Open;
    	Frm_JON54.pnl1.Visible := True;
  		Frm_JON54.btn_Calling.Enabled := False;
  	end else
    begin
  		Frm_JON54.pnl1.Visible := False;
  	end;

  	if bNKT_4BS.Socket.Connected then
    begin
    	sStr := '';
    	sStr := sStr + '900';
    	sStr := sStr + Rpad('C', 15, ' ');;
    	sStr := sStr + Rpad('', 2, ' ');;
    	sStr := sStr + '0  ';
    	bNKT_4BS.Socket.SendText(sStr);
    	SetDebugeWrite('NKT Send: '+ sStr);
    end;

  	sAliveQ := now;
  	if eAliveQ = 0 then eAliveQ := sAliveQ;

  	if SecondsBetween(sAliveQ, eAliveQ) > 20 then
  	begin
  		if bNKT_4BS.Socket.Connected = False then
  		begin
  			bNKT_4BS.Open;
				Frm_JON54.pnl1.Visible := True;
  		end;
  		tmr_AliveSend.Enabled := True;
  	end else
  	begin
    	Frm_JON54.pnl1.Visible := False;
  		tmr_AliveSend.Enabled := True;
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmr_AliveTimer(Sender: TObject);
begin
  SetDebugeWrite('Main.tmr_AliveTimer');
  if tmr_Alive.Tag = 20 then Exit;

  try
  	tmr_Alive.Enabled := False;
  	if SecondsBetween(sAliveQ, eAliveQ) > 15 then
  	begin
  		ShowMessage('소프트폰 응답없음.');
  		tmr_AliveSend.Interval := 60000;
  	end;
  	eAliveQ := sAliveQ;
  	tmr_Alive.Enabled := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmr_CidInfoTimer(Sender: TObject);
var	sCidfile, sSendFile, sCallFile, sWord, sCidMessage : string;
		sCustTel, sKeyNum : String;
	sLine, sWordBit : TStringList;
	i : integer;
begin
	SetDebugeWrite('Main.tmr_CidInfoTimer');
	tmr_CidInfo.Enabled := False;
  try
	  sLine := TStringList.Create;
	  sWordBit := TStringList.Create;
	  sCidfile := EXECDIRECTORY + 'cid.info';
	  try
	  	if FileExists(sCidfile) then
	  	begin
				sLine.clear;
				sLine.LoadFromFile(sCidfile);
				sWord := '';
				sCidMessage := '';
	  		for i := 0 to sLine.Count - 1 do
	  		begin
					sWord := copy(sLine[i], 3, length(sLine[i]) -2) ; //앞 '//'두자리 자름
					sWord := copy(sWord, 1, length(sWord) -2) ; //뒤 '//'두자리 자름
					GetTextSeperationEx2('/', sWord, sWordBit);
					if Length(sWordBit[0]) < 8 then
	  			begin
						GMessagebox('대표전화번호 자릿수가 8자 이하입니다.', CDMSE);
						DeleteFile(sCidfile);
						tmr_CidInfo.Enabled := True;
						Exit;
	  			end;
					if Length(sWordBit[1]) < 7 then
					begin
						GMessagebox('고객번호 자릿수가 7자 이하입니다.', CDMSE);
						DeleteFile(sCidfile);
						tmr_CidInfo.Enabled := True;
	  				Exit;
	  			end;
	  			if Length(sWordBit[2]) < 3 then
	  			begin
						GMessagebox('국선(DNIS) 오류입니다.', CDMSE);
	  				DeleteFile(sCidfile);
	  				tmr_CidInfo.Enabled := True;
	  				Exit;
	  			end;

					if gsCidVersion = 'CXE' then
          begin
						sCidMessage := 'C';                                       //  1  1  |  전문구분[C.콜링]
						sCidMessage := sCidMessage + Rpad(sWordBit[2], 13, ' ');  // 13  14 |  전화국선라인(PRI,DID,DOD,국선,,)
						sCidMessage := sCidMessage + Rpad(sWordBit[0], 13, ' ');  // 13  27 |  대표전화번호(PRI,DID,DOD,국선대표번호,,)
  	  			sCidMessage := sCidMessage + Rpad(''         , 10, ' ');  // 10  37 |  상담원 내선번호
  	  			sCidMessage := sCidMessage + Rpad(sWordBit[1], 13, ' ');  // 13  50 |  전화번호[일반전호, 핸드폰,,]
  	  			sCidMessage := sCidMessage + Rpad(FormatDateTime('HH:MM:SS', Now),  8, ' ');  //  8  58 |  time    : hh:mm:ss
  	  			sCidMessage := sCidMessage + Rpad(''         ,  5, ' ');  //  5  63 |  지사코드
          end else
          begin
  	  			sCidMessage := '117';                                     //  3  1  |  전문구분[Inbound(100,101,,), Outbound(201,202,,)
						sCidMessage := sCidMessage + Rpad(sWordBit[2],  4, ' ');  //  4  7  |  전화국선라인(PRI,DID,DOD,국선,,)
  	  			sCidMessage := sCidMessage + Rpad(sWordBit[0], 14, ' ');  // 14  21 |  대표전화번호(PRI,DID,DOD,국선대표번호,,)
  	  			sCidMessage := sCidMessage + Rpad(''         ,  4, ' ');  //  4  25 |  상담원 내선번호
  	  			sCidMessage := sCidMessage + Rpad('00'       ,  2, ' ');  //  2  27 |  결과코드[00:성공,01:CID오류,02:실패,,]
  	  			sCidMessage := sCidMessage + Rpad(sWordBit[1], 14, ' ');  // 14  41 |  전화번호[일반전호, 핸드폰,,]
  	  			sCidMessage := sCidMessage + Rpad(''         ,  8, ' ');  //  8  8  |  time    : hh:mm:ss    2008-01-22
  	  			sCidMessage := sCidMessage + Rpad(''         ,  4, ' ');  //  4  4  |  시/도
  	  			sCidMessage := sCidMessage + Rpad(''         , 20, ' ');  // 20  20 |  시/군/구
  	  			sCidMessage := sCidMessage + Rpad(''         , 20, ' ');  // 20  20 |  읍/면/동
          end;

					tmr_JoinView.Tag := 100;
					Func_New_Cid(sCidMessage); // CID 전문 접수창 생성함. CDS. 080725.
          break;
				end;
	  		DeleteFile(sCidfile);

	  	end;
    except on E: Exception do
      Assert(False, E.Message);
    end;

	  sSendFile := EXECDIRECTORY + 'sendcall.ato';
	  try
	  	if FileExists(sSendFile) then
	  	begin
				sLine.clear;
				sLine.LoadFromFile(sSendFile);
	  		sCustTel := '';
	  		sKeyNum := '';
	  		for i := 0 to sLine.Count - 1 do
	  		begin
	  			sCustTel := copy(sLine[i],  1, 12);  //앞 12자리 전화번호
	  			sKeyNum := copy(sLine[i], 13, 12);  //뒤 12자리 대표번호

	  			if Length(Trim(sCustTel)) < 7 then
	  			begin
	  				GMessagebox('고객번호 자릿수가 7자 이하입니다.', CDMSE);
	  				DeleteFile(sSendFile);
	  				tmr_CidInfo.Enabled := True;
	  				Exit;
	  			end;

	  			if Length(Trim(sKeyNum)) < 8 then
	  			begin
	  				GMessagebox('대표전화번호 자릿수가 8자 이하입니다.', CDMSE);
	  				DeleteFile(sSendFile);
	  				tmr_CidInfo.Enabled := True;
	  				Exit;
	  			end;

					pCallingCID(Trim(sCustTel), Trim(sKeyNum));
          break;
	  		end;
	  		DeleteFile(sSendFile);
	  	end;
		except on E: Exception do
			Assert(False, E.Message);
		end;

    // 엔젤플러스만 파일콜링 사용
    if (IsAngelPlusHead(GS_PRJ_AREA = 'S', GT_UserIF.HD)) then
		begin
			//콜마트 파일콜링	
			sCallFile := ANGELFILECALLDIRECTORY + 'callinfo.txt';
			try
				if FileExists(sCallFile) then
				begin
					gCALLMARTClear;

					sLine.clear;
					sLine.LoadFromFile(sCallFile);
					sCustTel := '';
					sKeyNum := '';
					for i := 0 to sLine.Count - 1 do
					begin
						if Copy(sLine[i], 1, 3) = 'a1:' then gCALLMART.a1 := StringReplace(sLine[i], 'a1:', '', [rfReplaceAll]) else // 지사코드
						if Copy(sLine[i], 1, 3) = 'a2:' then gCALLMART.a2 := StringReplace(sLine[i], 'a2:', '', [rfReplaceAll]) else // 대표번호
						if Copy(sLine[i], 1, 3) = 'b1:' then gCALLMART.b1 := StringReplace(sLine[i], 'b1:', '', [rfReplaceAll]) else // 고객HP
						if Copy(sLine[i], 1, 3) = 'c1:' then gCALLMART.c1 := StringReplace(sLine[i], 'c1:', '', [rfReplaceAll]) else // 출발지 POI명
						if Copy(sLine[i], 1, 3) = 'c2:' then gCALLMART.c2 := StringReplace(sLine[i], 'c2:', '', [rfReplaceAll]) else // 출발지 시/도
						if Copy(sLine[i], 1, 3) = 'c3:' then gCALLMART.c3 := StringReplace(sLine[i], 'c3:', '', [rfReplaceAll]) else // 출발지 시/군/구
						if Copy(sLine[i], 1, 3) = 'c4:' then gCALLMART.c4 := StringReplace(sLine[i], 'c4:', '', [rfReplaceAll]) else // 출발지 읍/면/동(리)
						if Copy(sLine[i], 1, 3) = 'd1:' then gCALLMART.d1 := StringReplace(sLine[i], 'd1:', '', [rfReplaceAll]) else // 도착지 POI명
						if Copy(sLine[i], 1, 3) = 'd2:' then gCALLMART.d2 := StringReplace(sLine[i], 'd2:', '', [rfReplaceAll]) else // 도착지 시/도
						if Copy(sLine[i], 1, 3) = 'd3:' then gCALLMART.d3 := StringReplace(sLine[i], 'd3:', '', [rfReplaceAll]) else // 도착지 시/군/구
						if Copy(sLine[i], 1, 3) = 'd4:' then gCALLMART.d4 := StringReplace(sLine[i], 'd4:', '', [rfReplaceAll]) else // 도착지 읍/면/동(리)
						if Copy(sLine[i], 1, 3) = 'e1:' then gCALLMART.e1 := StringReplace(sLine[i], 'e1:', '', [rfReplaceAll]) else // 경유지1 POI명
						if Copy(sLine[i], 1, 3) = 'e2:' then gCALLMART.e2 := StringReplace(sLine[i], 'e2:', '', [rfReplaceAll]) else // 경유지1 시/도
						if Copy(sLine[i], 1, 3) = 'e3:' then gCALLMART.e3 := StringReplace(sLine[i], 'e3:', '', [rfReplaceAll]) else // 경유지1 시/군/구
						if Copy(sLine[i], 1, 3) = 'e4:' then gCALLMART.e4 := StringReplace(sLine[i], 'e4:', '', [rfReplaceAll]) else // 경유지1 읍/면/동(리)
						if Copy(sLine[i], 1, 3) = 'f1:' then gCALLMART.f1 := StringReplace(sLine[i], 'f1:', '', [rfReplaceAll]) else // 경유지2 POI명
						if Copy(sLine[i], 1, 3) = 'f2:' then gCALLMART.f2 := StringReplace(sLine[i], 'f2:', '', [rfReplaceAll]) else // 경유지2 시/도
						if Copy(sLine[i], 1, 3) = 'f3:' then gCALLMART.f3 := StringReplace(sLine[i], 'f3:', '', [rfReplaceAll]) else // 경유지2 시/군/구
						if Copy(sLine[i], 1, 3) = 'f4:' then gCALLMART.f4 := StringReplace(sLine[i], 'f4:', '', [rfReplaceAll]) else // 경유지2 읍/면/동(리)
						if Copy(sLine[i], 1, 3) = 'g1:' then gCALLMART.g1 := StringReplace(sLine[i], 'g1:', '', [rfReplaceAll]) else // 요금
						if Copy(sLine[i], 1, 3) = 'g2:' then gCALLMART.g2 := StringReplace(sLine[i], 'g2:', '', [rfReplaceAll]) else // 결제구분("현금","후불","후불(마일)","후불(카드)","현장카드","복합")
						if Copy(sLine[i], 1, 3) = 'h1:' then gCALLMART.h1 := StringReplace(sLine[i], 'h1:', '', [rfReplaceAll]) else // 적요1
						if Copy(sLine[i], 1, 3) = 'h2:' then gCALLMART.h2 := StringReplace(sLine[i], 'h2:', '', [rfReplaceAll]) else // 적요2
						if Copy(sLine[i], 1, 3) = 'h3:' then gCALLMART.h3 := StringReplace(sLine[i], 'h3:', '', [rfReplaceAll]); // 적요3

					end;
					gCALLMART.a2 := StringReplace(gCALLMART.a2, '-', '', [rfReplaceAll]);
					gCALLMART.b1 := StringReplace(gCALLMART.b1, '-', '', [rfReplaceAll]);
					gCALLMART.g1 := StringReplace(gCALLMART.g1, ',', '', [rfReplaceAll]);
	{				if Length(gCALLMART.a2) < 8 then
					begin
						GMessagebox('대표전화번호 자릿수가 8자 이하입니다.', CDMSE);
						DeleteFile(sCallFile);
						tmr_CidInfo.Enabled := True;
						Exit;
					end;}
					if Length(gCALLMART.b1) < 7 then
					begin
						GMessagebox('고객번호 자릿수가 7자 이하입니다.', CDMSE);
						DeleteFile(sCallFile);
						tmr_CidInfo.Enabled := True;
						Exit;
					end;  
					//DNIS 사용안함
	{				if Length(sWordBit[2]) < 3 then
					begin
						GMessagebox('국선(DNIS) 오류입니다.', CDMSE);
						DeleteFile(sCallFile);
						tmr_CidInfo.Enabled := True;
						Exit;
					end;  }

					if gsCidVersion = 'CXE' then
					begin
						sCidMessage := 'C';                                       //  1  1  |  전문구분[C.콜링]
						sCidMessage := sCidMessage + Rpad(''          , 13, ' ');  // 13  14 |  전화국선라인(PRI,DID,DOD,국선,,)
						sCidMessage := sCidMessage + Rpad(gCALLMART.a2, 13, ' ');  // 13  27 |  대표전화번호(PRI,DID,DOD,국선대표번호,,)
						sCidMessage := sCidMessage + Rpad(''          , 10, ' ');  // 10  37 |  상담원 내선번호
						sCidMessage := sCidMessage + Rpad(gCALLMART.b1, 13, ' ');  // 13  50 |  전화번호[일반전호, 핸드폰,,]
						sCidMessage := sCidMessage + Rpad(FormatDateTime('HH:MM:SS', Now),  8, ' ');  //  8  58 |  time    : hh:mm:ss
						sCidMessage := sCidMessage + Rpad(gCALLMART.a1,  5, ' ');  //  5  63 |  지사코드
					end else
					begin
						sCidMessage := '117';                                     //  3  1  |  전문구분[Inbound(100,101,,), Outbound(201,202,,)
						sCidMessage := sCidMessage + Rpad(''          ,  4, ' ');  //  4  7  |  전화국선라인(PRI,DID,DOD,국선,,)
						sCidMessage := sCidMessage + Rpad(gCALLMART.a2, 14, ' ');  // 14  21 |  대표전화번호(PRI,DID,DOD,국선대표번호,,)
						sCidMessage := sCidMessage + Rpad(''          ,  4, ' ');  //  4  25 |  상담원 내선번호
						sCidMessage := sCidMessage + Rpad('00'        ,  2, ' ');  //  2  27 |  결과코드[00:성공,01:CID오류,02:실패,,]
						sCidMessage := sCidMessage + Rpad(gCALLMART.b1, 14, ' ');  // 14  41 |  전화번호[일반전호, 핸드폰,,]
						sCidMessage := sCidMessage + Rpad(''          ,  8, ' ');  //  8  8  |  time    : hh:mm:ss    2008-01-22
						sCidMessage := sCidMessage + Rpad(''          ,  4, ' ');  //  4  4  |  시/도
						sCidMessage := sCidMessage + Rpad(''          , 20, ' ');  // 20  20 |  시/군/구
						sCidMessage := sCidMessage + Rpad(''          , 20, ' ');  // 20  20 |  읍/면/동
					end;
					gbCallMartFileJON01 := True;
					tmr_JoinView.Tag := 100;
					Func_New_Cid(sCidMessage); // CID 전문 접수창 생성함. CDS. 080725.

					DeleteFile(sCallFile);
				end;
			except on E: Exception do
				Assert(False, E.Message);
			end;
		end;
	finally
  	FreeAndNil(sLine);
	  FreeAndNil(sWordBit);
  end;
	tmr_CidInfo.Enabled := True;
end;

procedure TFrm_Main.tmr_CID_checkTimer(Sender: TObject);
var
  ss_SendText: string;
  iCnt: Integer;
begin
  SetDebugeWrite('Main.tmr_CID_checkTimer');
  try
    tmr_CID_check.Enabled := False;

    if tmr_CID_check.Tag = 20 then Exit;
		if iCidConnectErrCnt > 5 then Exit;

    try
			giCIDCheckCnt := giCIDCheckCnt + 1;
      if giCIDCheckCnt > 1 then
      begin
				if ipwCID.Socket.Connected = False then
        begin
          try
            ipwCID.Close; // CID 연결 컴포넌트를 IPWorks 로 변경함. 080809.
						Application.ProcessMessages;
						Sleep(100);

            Log(Format('OLD try Connect [%s]',[ipwCID.Host]), HEARTLOGPATHFILE);
						ipwCID.Active := True;
            iCnt := 0;
            while ((iCnt < 15) and (ipwCID.Socket.Connected = False)) do
            begin
              Application.ProcessMessages;
              // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
              Sleep(200);
              Inc(iCnt);
            end;
            ss_SendText := CTI_MakeLoginStruct(gsInternalNumber);

						if ipwCID.Socket.Connected = True then
            begin
              gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
              iCnt := 0;
              ipwCID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
              ipwCID.Socket.SendText(ss_SendText);
              while ((iCnt < 16) and (ipwCID.Tag = 77)) do
              begin
                Application.ProcessMessages;
                // CIDServer 로 부터 연결성공 전문 받을때까지 대기한다.
                Sleep(200);
                Inc(iCnt);
              end;
              // 결과값[로그인 성공에 대한 응답 전문] 확인.  gsCIDMessage --> ipwCID 이밴트에서 읽어온다.
							if ((gsCIDMessage <> '') and (Func_New_Cid(gsCIDMessage))) then
              begin
                GT_CID_NEW := '1';
                pSetCIDState(0);
              end else
              begin
                GT_CID_NEW := '0';
                pSetCIDState(2);
              end;
            end;

						if not IdUDPCidRecvServer.Active then
            begin
              IdUDPCidRecvServer.DefaultPort := 25376;
              IdUDPCidRecvServer.Active := True;
            end;
          except
            //cs_CID_Com.DisconnectSocket;
            ipwCID.Close;

            if GT_CID_NEW = '1' then
            begin
              pSetCIDState(1);
              SetDebugeWrite('tmr_CID - DisConnect 3622 ');
            end else
            begin
              pSetCIDState(3);
            end;
          end;
          Exit;
        end;
        giCIDCheckCnt := 0;
      end;
    except on E: Exception do
      Assert(False, E.Message);
		end;
  finally
    if ( tmr_CID_check.Tag < 10 ) And ( iCidConnectErrCnt <= 5 ) then
    begin
      tmr_CID_check.Enabled := True;
    end else
    begin
      tmr_CID_check.Tag := 0;
    end;
  end;
end;

procedure TFrm_Main.tmr_InitializationTimer(Sender: TObject);
var
  ihour, j, iTmp, iLeft : integer;
	sList_Check, sDate, sTmp : string;
  tmpTime: TSystemTime;
  ss_SendText : AnsiString;
  iCnt : Integer;
	slTmp  : TStringList;
begin
	SetDebugeWrite('Main.tmr_InitializationTimer');
	try
		tmr_Initialization.Enabled := False;

//    PnlMenu.Enabled := True;  // 좌측메뉴 생성되기전에 메뉴 클릭하면 오류 발생을 막기 위해

		chk_Family.visible := IsFamily;

		if scb_HdNo.IndexOf(GT_USERIF.HD) >= 0 then
      sTmp := scb_HdNm[scb_HdNo.IndexOf(GT_USERIF.HD)]
    else
			sTmp := GT_USERIF.HD;

		// 프로그램 듀얼 메인.   2011.06.21
    if (GT_PRG_DUAL_MAIN = 0) then
    begin
      // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함 수도권 토성대리-A876 상담지사12-D615
      if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then
        lblMainTitle.Caption := IfThen(GS_PRJ_AREA = 'O', '<지원팀> Aⓙ', '<지원팀> Aⓢ') + 'CXE v' + ReplaceAll(GS_PRJ_VERSION, '.', '') + ' - ' + sTmp
      else
        lblMainTitle.Caption := IfThen(GS_PRJ_AREA = 'O', 'Aⓙ', 'Aⓢ') + 'CXE v' + ReplaceAll(GS_PRJ_VERSION, '.', '') + ' - ' + sTmp;
    end else
    begin
      if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then
        lblMainTitle.Caption := IfThen(GS_PRJ_AREA = 'O', '<지원팀> Bⓙ', '<지원팀> Bⓢ') + 'CXE v' + ReplaceAll(GS_PRJ_VERSION, '.', '') + ' - ' + sTmp
      else
        lblMainTitle.Caption := IfThen(GS_PRJ_AREA = 'O', 'Bⓙ', 'Bⓢ') + 'CXE v' + ReplaceAll(GS_PRJ_VERSION, '.', '') + ' - ' + sTmp;
    end;

    if (GT_PRG_DUAL_MAIN = 2) then
    begin
      // 20130923 LYB 지원팀 전용..지원팀원 저장시 시도/시군구/읍면동 저장 않함 수도권 토성대리-A876 상담지사12-D615
			if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then
        lblMainTitle.Caption := IfThen(GS_PRJ_AREA = 'O', '<지원팀> Cⓙ', '<지원팀> Cⓢ') + 'CXE v' + ReplaceAll(GS_PRJ_VERSION, '.', '') + ' - ' + sTmp
			else
        lblMainTitle.Caption := IfThen(GS_PRJ_AREA = 'O', 'Cⓙ', 'Cⓢ') + 'CXE v' + ReplaceAll(GS_PRJ_VERSION, '.', '') + ' - ' + sTmp;
    end;

    lblMainTitle.Caption := ' ' + lblMainTitle.Caption;

		if (GT_USERIF.ID = 'sntest') or (GT_USERIF.ID = 'si415ipcc') then
			edt_ComID.Properties.ReadOnly := False else edt_ComID.Properties.ReadOnly := True;

			
		if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
		begin
			if not (FileExists('C:\Program Files\NKT Soft\CTI Agent Application\CTIAgentApplication.exe')) then
			begin
        try
          Server_CID.Active     := True; //8800
          server_mdrive.Active  := True;
          server_speed.Active   := True;
        except
          on e: exception do
          begin
            Assert(False, E.Message);
            sList_Check := 'frmMain[tmr_InitializationTimer]:' + e.Message;
            ShowMessage(sList_Check);
          end;
        end;
			end;
//			sTmp  := IfThen(TCK_USER_PER.COM_MSNTotal = '1', '1', '0'); // 콜마너 전체사용자 공유
//			sTmp3 := IfThen(TCK_USER_PER.COM_MSNHead  = '1', '1', '0'); // 본사 공유
//
//			if (sTmp = '1') or (sTmp3 = '1') then
//			begin
//        procExecMessenger;
//			end else
//      begin
//        Menu1409.Enabled := False;  // 메신저
//      end;
		end else
    begin
      cxPageControl2.Pages[6].Visible := False;
    end;

		if ( FileExists('C:\Windows\System32\bCTI.ocx') ) And ( GT_CIDINFO.Use_yn = 'Y' ) then
    begin
			GT_OCX := 'BCTI';   // 초이대리운전.. 20130402 LYB

			Exec_bCTIOCXAgent;
			try // CID 구버전 프로그램으로 로그인 시도를 한다.

				bCTI_CTI.Close;
				Sleep(200);
				bCTI_CTI.Host := '127.0.0.1';
				bCTI_CTI.Port := 18753;
				bCTI_CTI.Active := True;
				iCnt := 0;
        while ((iCnt < 15) and (bCTI_CTI.Socket.Connected = False)) do
        begin
          Application.ProcessMessages;
          // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
          Sleep(200);
          Inc(iCnt);
				end;
				if bCTI_CTI.Socket.Connected = True then
        begin
          ss_SendText := Rpad('700', 38, ' ');
					bCTI_CTI.Socket.SendText(#2 + ss_SendText + #3);
					// 구버전으로 로그인 전문을 보낸다.
          pSetCIDState(2);
        end else
        begin
          pSetCIDState(3);
				end;
			except
				on e: exception do
				begin
					Assert(False, 'bCTI_CTI ' + E.Message);
          pSetCIDState(3);
				end;
			end;
    end else
    if ( ( FileExists('C:\Windows\System32\KLCns\IPCallrabi.ocx') ) Or
         ( FileExists('C:\Windows\SysWOW64\KLCns\IPCallrabi.ocx') ) ) And ( GT_CIDINFO.Use_yn = 'Y' ) then
    begin
			GT_OCX := 'KLCNS';   // 친절대리운전.. 20130402 LYB
    end else
    if FileExists('C:\Windows\System32\SangACD.ocx') then
    begin
      if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
      begin
         if ( GT_CIDINFO.ACDSERVERUSE ) then Exec_bCTIOCXAgent;
      end;
    end;

		if GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 4 then GT_OCX := 'LGUCT';

		if ( GT_OCX = 'KLCNS' ) Or ( GT_OCX = 'LGUCT' ) then
		begin
			Exec_bCTIOCXAgent;
      try // CMNOCXXEAgent.exe 소켓 연결
        xCTI_CTI.Close;
        Sleep(1000);
        xCTI_CTI.Host := '127.0.0.1';
        xCTI_CTI.Port := 18753;
        xCTI_CTI.Active := True;
        iCnt := 0;
        while ((iCnt < 15) and (xCTI_CTI.Socket.Connected = False)) do
        begin
          Application.ProcessMessages;
          // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
          Sleep(200);
          Inc(iCnt);
        end;
        if xCTI_CTI.Socket.Connected = True then
        begin
          ss_SendText := Rpad('700', 38, ' ');
          xCTI_CTI.Socket.SendText(#2 + ss_SendText + #3);
        end;
      except
				on e: exception do
				begin
					Assert(False, 'xCTI_CTI ' + E.Message);
				end;
			end;
    end;

		FillChar(GT_PASS_INFO, SizeOf(GT_PASS_INFO), chr($00));
    FillChar(GT_OrderInfo, SizeOf(GT_OrderInfo), chr($00));

//--		if GT_OCX <> 'NKT' then  //20141028 NKT연결시 CID정보있으면 CIDXE도 동시 연결
    try
  		Proc_CIDConnect;  // CID 연결 체크 및 연결을 한다.  CDS. 080725.
    except
    end;

    if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
    begin
      cb_brName.Properties.Items.Clear;
      cb_brName.Properties.Items.Assign(scb_FamilyBrName);

      // 접수 검색의 지사 변경
      for j := 0 to JON03_MAX_CNT - 1 do
			begin
				if Assigned(Frm_JON03[j]) then
        begin
          // 접수 검색의 즉시 배차 지사 변경
          Frm_JON03[j].cb_branch_Name2.Properties.Items.Clear;
          Frm_JON03[j].cb_branch_Name2.Properties.Items.Assign(scb_FamilyBrName);
          Frm_JON03[j].cb_branch_Name2.ItemIndex := 0;
          Frm_JON03[j].InitBubInWindow(sTmp);
        end;
      end;
		end else
		begin
      cb_brName.Properties.Items.Clear;
      cb_brName.Properties.Items.Assign(scb_BranchName);

      // 접수 검색의 지사 변경
      for j := 0 to JON03_MAX_CNT - 1 do
      begin
        if Assigned(Frm_JON03[j]) then
        begin
          // 접수 검색의 즉시 배차 지사 변경
          Frm_JON03[j].cb_branch_Name2.Properties.Items.Clear;
          Frm_JON03[j].cb_branch_Name2.Properties.Items.Assign(scb_BranchName);
          Frm_JON03[j].cb_branch_Name2.ItemIndex := 0;
          Frm_JON03[j].InitBubInWindow(sTmp);
        end;
      end;
		end;

		sc_wk_tr.Active := False;

		if GT_TR_INFO.USE = 'y' then
		begin
			Frm_JON54.imgTRS.Visible := True;
			cxCIDImgList.GetIcon(4, Frm_JON54.imgTRS.Picture.Icon);
			// TRS ON;
			sc_wk_tr.Active := False;
			try
				sc_wk_tr.Host := GT_TR_INFO.IP;
				sc_wk_tr.Port := StrToIntDef(GT_TR_INFO.PORT, 2002);
				sc_wk_tr.Active := True;
			except
				GT_TR_INFO.USE := 'n';
				GS_EnvFile.WriteString('WORKER_TR', 'USE', 'n');
				cxCIDImgList.GetIcon(5, Frm_JON54.imgTRS.Picture.Icon);
				// TRS Off;
				sc_wk_tr.Host := GT_TR_INFO.IP;
				sc_wk_tr.Port := StrToIntDef(GT_TR_INFO.PORT, 2002);
				sc_wk_tr.Active := False;
			end;
		end;

//		Frm_WOR01 := TFrm_WOR01.Create(Self);

		////////////////////////////////////////////////////////////////////////////////
		//     서버시간으로 로컬 컴퓨터 시간 변경
		////////////////////////////////////////////////////////////////////////////////
		sDate := func_sysdate;
		if formatdatetime('yyyymmdd', now) <> copy(sDate, 1, 12) then
		begin
			GetSystemTime(tmpTime);
			tmpTime.wYear := StrToInt(copy(sDate, 1, 4));
			tmpTime.wMonth := StrToInt(copy(sDate, 5, 2));
			tmpTime.wDay := StrToInt(copy(sDate, 7, 2));
			ihour := strtoint(copy(sDate, 9, 2));
			if ihour <= 8 then
			begin
				tmpTime.wDay := StrToInt(copy(sDate, 7, 2)) - 1;
				inc(ihour, 24);
			end;
			tmpTime.wHour := ihour - 9;
			tmpTime.wMinute := strtoint(copy(sDate, 11, 2));
			SetSystemTime(tmpTime);
		end;

		mw_login;

		tmrKilling.Interval := 1 * 10000;
		tmrKilling.Enabled := True;

    //미니맵생성
    if j30 = 0 then
    begin
      Frm_JON30 := TFrm_JON30.Create(Self);
      iLeft := Frm_JON30.Left;
      Frm_JON30.Left := -1000;
      Frm_JON30.Tag := 0;
      fSetSkin(Frm_JON30);
      Frm_JON30.Show;
      Frm_JON30.Hide;
      Frm_JON30.Left := iLeft;

      // 서울,경기,인천 지역은 다음POI검색시 기준위치와 상관없으므로 API키 사용안함으로 검색 2021.08.10
      // API키 사용안함일 경우 검색이 잘됨(주소및상호)
      if (slstLocalMapOrder[0] = '서울') Or (slstLocalMapOrder[0] = '경기') Or (slstLocalMapOrder[0] = '인천') then
      begin
        GS_DAPIKeyUSE := False;
        Frm_JON30.chkUseAPIKey.Enabled := GS_DAPIKeyUSE;
        Frm_JON30.chkUseAPIKey.Checked := GS_DAPIKeyUSE;
      end;

      j30 := 1;

      GS_PORTAL_SEL := 'A';   // 처음 로그인시에는 무조건 네이버 포탈 //통합으로 변경 팀장님 지시 20191202 KHS
      Frm_JON30.rbSA.Checked := True;
      GB_PORTAL_AutoChk := True;
    end;

//    tmrCreate.Enabled := True;

		if GS_PRJ_AREA ='S' then
		begin
      lbl_MainYn.Visible := True;
      lbl_MainGubun.Visible := True;
      lbl_MainGubun.Caption := GT_USERIF.MainGbnInfo;
    end;

		if not (FileExists('C:\sqnmsg.crc')) then
    begin
      if GT_USERIF.LV = '60' then
      begin
        frm_Notice := Tfrm_Notice.Create(Self);
        if proc_UnRead_Cnt > 0 then
        begin
          try
            frm_Notice.ShowModal;
					finally
            frm_Notice.Free;
          end;
        end;
      end;
		end;

		if GS_JON_FILECALLINGUSE then tmr_CidInfo.Enabled := True
														 else tmr_CidInfo.Enabled := False;

		GS_KM00030_ErrorMsg := '';														 
		GS_KM00030_ErrorCnt := 0;														 
//		iTmp := cxSgBrOrder.GetColumnByFieldName('취소율').Index;
//		if GS_PRJ_AREA = 'S' then
//			(cxSgBrOrder.Columns[iTmp].Properties as TcxCurrencyEditProperties).DisplayFormat := ',0;-,0'
//		else
//			(cxSgBrOrder.Columns[iTmp].Properties as TcxCurrencyEditProperties).DisplayFormat := ',0.0;-,0.0';

		sTmp := SOUNDDIRECTORY + 'Tmp.wav';
		if FileExists(sTmp) then DeleteFile(PChar(sTmp));	

		////////////////로그인 리스트 작성//////////////////////
		if (FileExists('C:\sqnmsg.crc')) And ( Not GB_365System ) And ( Not GB_CallLine ) then
		begin
			proc_SetLoginList;
		end;    
		////////////////로그인 리스트 작성//////////////////////

		////////////////엔젤플러스 파일콜링폴더생성////////////////
		if (IsAngelPlusHead(GS_PRJ_AREA = 'S', GT_UserIF.HD)) then
			dirMake('C:\angelxe');
		pGongjiStart;

//    if (Not GB_365System) And (Not GB_CallLine) And (not FileExists('C:\sqnmsg.crc')) then
    if (Not GB_365System) And (Not GB_CallLine) then
    begin
      gCOM60Agree := False;
      sTmp := func_SEL01('SURVEY1', '');
      slTmp := TStringList.Create;
      Try
        GetTextSeperationEx2('│', sTmp, slTmp);
        if slTmp.Count > 6 then
        begin
          if slTmp[5] = 'SURVEY1' then
          begin
            if (slTmp[8] = 'y') and (slTmp[12] = 'y') then
            begin
              gCOM60Agree := True;//동의일 경우 종료시 설문안띄움
              if Not Assigned(Frm_COM60) Or (Frm_COM60 = Nil) then Frm_COM60 := TFrm_COM60.Create(Nil);
              Frm_COM60.Show;
              Frm_COM60.btn_Hot2Day.Click;
            end;
          end;
        end else
        begin
          if Not Assigned(Frm_COM60) Or (Frm_COM60 = Nil) then Frm_COM60 := TFrm_COM60.Create(Nil);
          Frm_COM60.Show;
          Frm_COM60.btn_Hot2Day.Click;
        end
      finally
        slTmp.Free;
      end;
    end;
	except
		on e: exception do
		begin
			Assert(False, E.Message);
			sList_Check := 'frmMain[tmr_InitializationTimer]:' + e.Message;
			ShowMessage(sList_Check);
		end;
	end;
end;

procedure TFrm_Main.tmr_JoinViewTimer(Sender: TObject);
begin
	SetDebugeWrite('Main.tmr_JoinViewTimer');
  try
		tmr_JoinView.Enabled := False;
		Func_New_Cid(gsCIDMessage); // CID 전문 접수창 생성함. CDS. 080725.
    gsCIDMessage := '';
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmr_LOCAL_SYNCTimer(Sender: TObject);
begin
  SetDebugeWrite('Main.tmr_LOCAL_SYNCTimer');
  try
  	tmr_LOCAL_SYNC.Enabled := False;
  	if (CHARGE_GUBUN = 'S') or (CHARGE_GUBUN = 'O') then
  	begin
  		if not GS_JON01OPEN_CHECK then
  		begin
  			Case GS_LOCALDATA_USE of
  				0:
  				begin
            proc_CServer_LOCALtoList; //전체사용
					end;
  				1:
					begin
            proc_LocalTOLocallist; //로컬데이터를 메모리에 올린다.
  				end;
  				2:
  				begin
						proc_CServerTOLocallist; //MySQL데이터를 메모리에 올린다.
  				end;
  			end;

  			GS_EnvFile.WriteString('LOCAL', 'GS_SYNC_DATETIME', SyncDateTime);
  			GS_SYNC_DATETIME := SyncDateTime;
  			tmr_LOCAL_SYNC.Interval := 500;
  		end	else
      if GS_JON01OPEN_CHECK then
  		begin
  			tmr_LOCAL_SYNC.Interval := 10000;
  			tmr_LOCAL_SYNC.Enabled := True;
  		end;
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.pLOCAL_SYNC_CHECK;
var sQuery : string;
    i : Integer;
begin
	SetDebugeWrite('Main.pLOCAL_SYNC_CHECK');
  try
  	if ((CHARGE_GUBUN = 'S') or (CHARGE_GUBUN = 'O')) and (GS_LOCALDATA_USE in [0,2]) then
  	begin
  		sQuery := 'SELECT IN_DATE FROM CDMS_LOCAL_MASTER ';
  		dmCharge.proc_mysql_init;
  		dmCharge.FDQuery1.Close;
  		dmCharge.FDQuery1.SQL.Text := sQuery;
  		dmCharge.FDQuery1.OPEN;

  		SyncDateTime := FormatDateTime('yyyy-mm-dd hh:mm:ss', dmCharge.FDQuery1.FieldByName('IN_DATE').AsDateTime);
  		if SyncDateTime <> '1900-01-01 01:01:01' then
  		begin
  			if GS_SYNC_DATETIME < SyncDateTime then
  			begin
  				tmr_LOCAL_SYNC.Enabled  := True;
        end;
      end;
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmr_SI415checkTimer(Sender: TObject);
Var sStr : String;
begin
	try
		if tmr_SI415check.Tag = 20 then Exit;

//		tmr_SI415check.Enabled := False;

		if tmr_SI415check.Interval = 500 then
			tmr_SI415check.Interval := 3000;

		if Not bSI415.Socket.Connected then
			bSI415.Active := True
		else
		begin
			if iSI415CidHeartBeat > 1 then
			begin
				if bSI415.Socket.Connected then
				begin
					sStr := fSI_MakeHeader_Only('9000', '0', '00');

					bSI415.Socket.SendText(sStr);
					iSI415CidHeartBeat := 0;
					SetDebugeWrite('tmr_SI415checkTimer : ' + sStr);
				end;
			end;
			Inc(iSI415CidHeartBeat);
		end;
		if Not bSI415_2601.Socket.Connected then
			bSI415_2601.Active := True
		else
		begin
			if bSI415_2601.Socket.Connected then
			begin
				sStr := fSI_MakeHeader_Only('9000', '0', '00');

				bSI415_2601.Socket.SendText(sStr);
				SetDebugeWrite('tmr_SI415_2601checkTimer : ' + sStr);
			end;
		end;	

	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.tmr_SSIO_checkTimer(Sender: TObject);
Var sStr : String;
begin
  try
    if tmr_SSIO_check.Tag = 20 then Exit;

  	tmr_SSIO_check.Enabled := False;

    if tmr_SSIO_check.Interval = 500 then
      tmr_SSIO_check.Interval := 3000;

		if Not bSSIO_CTI.Socket.Connected then
      bSSIO_CTI.Active := True
    else
    begin
      if iSSIOCidHeartBeat > 20 then
      begin
        if bSSIO_CTI.Socket.Connected then
        begin
          // 9000. Ping
        	sStr := '#';
        	sStr := sStr + '9000';
					sStr := sStr + Rpad('5001',   4, ' ');
					sStr := sStr + Rpad(''    ,  20, ' ');
					sStr := sStr + Rpad(''    ,   2, ' ');
					sStr := sStr + Rpad(''    ,  15, ' ');
					sStr := sStr + Rpad(''    ,  15, ' ');
					sStr := sStr + Rpad(''    ,  15, ' ');
        	sStr := sStr + '$';

          bSSIO_CTI.Socket.SendText(sStr);
					iSSIOCidHeartBeat := 0;
          SetDebugeWrite('tmr_SSIO_Heart : ' + sStr);
				end;
      end;
      Inc(iSSIOCidHeartBeat);
    end;

		if GT_OCX = 'SSIO' then tmr_SSIO_check.Enabled := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tmr_xeCID_checkTimer(Sender: TObject);
var
	ss_SendText: string;
	iCnt: Integer;
begin
	try
		tmr_xeCID_check.Enabled := False;

		if tmr_xeCID_check.Tag = 20 then Exit;
		if iCidConnectErrCnt > 5 then Exit;

		try
			giCIDCheckCnt := giCIDCheckCnt + 1;
			if giCIDCheckCnt > 1 then
			begin
        if GT_CIDINFO.Win10CIDXE_YN then
        begin
          if IdXECID.Connected = False then
          begin
            try
              Application.ProcessMessages;
              Sleep(100);

              Log(Format('IXE try Connect [%s]',[IdXECID.Host]), HEARTLOGPATHFILE);
              IdXECID.Connect;
              iCnt := 0;
              while ((iCnt < 15) and (xeCID.Socket.Connected = False)) do
              begin
                Application.ProcessMessages;
                // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
                Sleep(200);
                Inc(iCnt);
              end;

              ss_SendText := CTIXE_MakeLoginStruct(gsInternalNumber);
              if IdXECID.Connected then
              begin
                gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
                iCnt := 0;
                xeCID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
                SetDebugeWrite_CID('4006 tmr_xeCID_Login : ' + ss_SendText);

                if gsCIDEnCoding = 'enUTF8' then IdXECID.IOHandler.WriteLn(ss_SendText + #13#10, enUTF8)
                                            else IdXECID.IOHandler.WriteLn(ss_SendText + #13#10);

                while ((iCnt < 16) and (xeCID.Tag = 77)) do
                begin
                  Application.ProcessMessages;
                  // CIDServer 로 부터 연결성공 전문 받을때까지 대기한다.
                  Sleep(200);
                  Inc(iCnt);
                end;
                // 결과값[로그인 성공에 대한 응답 전문] 확인.  gsCIDMessage --> xeCID 이밴트에서 읽어온다.
                if ((gsCIDMessage <> '') and (Func_New_Cid(gsCIDMessage))) then
                begin
                  GT_CID_NEW := '2';
                  pSetCIDState(0);
                end;
              end;

              if not IdUDPCidRecvServer.Active then
              begin
                IdUDPCidRecvServer.DefaultPort := 25376;
                IdUDPCidRecvServer.Active := True;
              end;
            except
              try
                IdXECID.Disconnect;
              except
              end;
              pSetCIDState(1);
              Log('tmr_CID - DisConnect 6653', HEARTLOGPATHFILE);
            end;
            Exit;
          end else
          begin
            try
              if iXeCidHeartBeat > 10 then
              begin
                if IdXECID.Connected then
                begin
                  ss_SendText := CTIXE_MakeHeartbeat(gsInternalNumber);
                  gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
                  xeCID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.

                  if gsCIDEnCoding = 'enUTF8' then IdXECID.IOHandler.WriteLn(ss_SendText + #13#10, enUTF8)
                                              else IdXECID.IOHandler.WriteLn(ss_SendText + #13#10);

                  iXeCidHeartBeat := 0;
                  SetDebugeWrite_CID('tmr_xeCID_Heart : ' + ss_SendText);
                end;
              end;
              Inc(iXeCidHeartBeat);
            except on E: Exception do
              begin
                Assert(False, E.Message);
                try
                  IdXECID.Disconnect;
                except
                end;
                pSetCIDState(1);
                Log('tmr_CID - DisConnect 6680', HEARTLOGPATHFILE);
              end;
            end;
          end;
        end else
        begin
          if xeCID.Socket.Connected = False then
          begin
            try
              xeCID.Close; // CID 연결 컴포넌트를 IPWorks 로 변경함. 080809.
              Application.ProcessMessages;
              Sleep(100);

              Log(Format('CID try Connect [%s]',[xeCID.Host]), HEARTLOGPATHFILE);
              xeCID.Active := True;
              iCnt := 0;
              while ((iCnt < 15) and (xeCID.Socket.Connected = False)) do
              begin
                Application.ProcessMessages;
                // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
                Sleep(200);
                Inc(iCnt);
              end;

              ss_SendText := CTIXE_MakeLoginStruct(gsInternalNumber);
              if xeCID.Socket.Connected = True then
              begin
                gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
                iCnt := 0;
                xeCID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
                SetDebugeWrite_CID('4006 tmr_xeCID_Login : ' + ss_SendText);
                xeCID.Socket.SendText(ss_SendText);
                while ((iCnt < 16) and (xeCID.Tag = 77)) do
                begin
                  Application.ProcessMessages;
                  // CIDServer 로 부터 연결성공 전문 받을때까지 대기한다.
                  Sleep(200);
                  Inc(iCnt);
                end;
                // 결과값[로그인 성공에 대한 응답 전문] 확인.  gsCIDMessage --> xeCID 이밴트에서 읽어온다.
                if ((gsCIDMessage <> '') and (Func_New_Cid(gsCIDMessage))) then
                begin
                  GT_CID_NEW := '2';
                  pSetCIDState(0);
                end;
              end;

              if not IdUDPCidRecvServer.Active then
              begin
                IdUDPCidRecvServer.DefaultPort := 25376;
                IdUDPCidRecvServer.Active := True;
              end;
            except
              xeCID.Close;
              pSetCIDState(1);
              Log('tmr_CID - DisConnect 6735', HEARTLOGPATHFILE);
            end;
            Exit;
          end else
          begin
            try
              if iXeCidHeartBeat > 10 then
              begin
                if xeCID.Socket.Connected then
                begin
                  ss_SendText := CTIXE_MakeHeartbeat(gsInternalNumber);
                  gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
                  xeCID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
                  xeCID.Socket.SendText(ss_SendText);
                  iXeCidHeartBeat := 0;
                  SetDebugeWrite_CID('tmr_xeCID_Heart : ' + ss_SendText);
                end;
              end;
              Inc(iXeCidHeartBeat);
            except on E: Exception do
              begin
                Assert(False, E.Message);
                xeCID.Close;
                pSetCIDState(1);
                Log('tmr_CID - DisConnect 6759', HEARTLOGPATHFILE);
              end;
            end;
          end;
        end;
        giCIDCheckCnt := 0;
      end;
    except on E: Exception do
      begin
        try
          IdXECID.Disconnect;
        except
        end;
        xeCID.Close;
  			Assert(False, E.Message);
      end;
    end;
  finally
		if ( tmr_xeCID_check.Tag < 10 ) And ( iCidConnectErrCnt <= 5 ) then
		begin
			tmr_xeCID_check.Enabled := True;
		end else
		begin
			tmr_xeCID_check.Tag := 0;
		end;
	end;
end;

procedure TFrm_Main.tmr_xeCID_New1Timer(Sender: TObject);
begin
	tmr_xeCID_New1.Enabled := False;
//	xeCID.Active := True;
	tmr_xeCID_New2.Tag := 2000 ;//2초간격
	tmr_xeCID_New2.Enabled := True;
end;

procedure TFrm_Main.tmr_xeCID_New2Timer(Sender: TObject);
var
	ss_SendText: string;
	iCnt, iInterval, i : Integer;
begin
	SetDebugeWrite_CID('Main.tmr_xeCID_New2');
	try

		if tmr_xeCID_New2.Tag = 20 then Exit;

		tmr_xeCID_New2.Enabled := False;
		iInterval := 200;
    if (giCIDCheckCnt > 10) and (tmr_xeCID_New2.Tag = 2000) then 
		begin
			iInterval := 500;
			tmr_xeCID_New2.Tag := 5000;  
			giCIDCheckCnt := 0;
			iCidConnectErrCnt := 0;   
//			exit;
		end;

//**************************************************************
//CID서버를 종료할때,,  상담원 클라이언트에 종료 전문 보내고, 
//	상담원 클라이언트는 종료전문 받고, 4초 후 부터 2초 단위로 20회 시도하고
//																								 5초 단위로 20회 시도하고
//							그래도 접속 안되면 시도 종료처리
//*****************************************************************			
		
		try
			giCIDCheckCnt := giCIDCheckCnt + 1;

			if giCIDCheckCnt > 1 then
			begin
        if GT_CIDINFO.Win10CIDXE_YN then
        begin
          if IdXECID.Connected = False then
          begin
            try
              Application.ProcessMessages;
              Sleep(100);

              i := 0;
              while not idXECID.Connected do
              begin
                if i > 15 then
                begin
                  try
                    IdXECID.Disconnect;
                  except
                  end;
                  Exit;
                end;
                Application.ProcessMessages;
                Sleep(300);
                Log(Format('IXE try Connect [%s]',[IdXECID.Host]), HEARTLOGPATHFILE);
                idXECID.Connect;
                inc(i);
              end;

              iCnt := 0;
              while ((iCnt < 20) and (IdXECID.Connected = False)) do
              begin
                Application.ProcessMessages;
                // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
                Sleep(iInterval);
  //							Sleep(200);
                Inc(iCnt);
              end;

              ss_SendText := CTIXE_MakeLoginStruct(gsInternalNumber);
              if IdXECID.Connected then
              begin
                gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
                iCnt := 0;
                IdXECID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
                SetDebugeWrite_CID('4006 tmr_xeCID_Login : ' + ss_SendText);

                if gsCIDEnCoding = 'enUTF8' then IdXECID.IOHandler.WriteLn(ss_SendText + #13#10, enUTF8)
                                            else IdXECID.IOHandler.WriteLn(ss_SendText + #13#10);

                while ((iCnt < 16) and (IdXECID.Tag = 77)) do
                begin
                  Application.ProcessMessages;
                  // CIDServer 로 부터 연결성공 전문 받을때까지 대기한다.
                  Sleep(200);
                  Inc(iCnt);
                end;
                // 결과값[로그인 성공에 대한 응답 전문] 확인.  gsCIDMessage --> xeCID 이밴트에서 읽어온다.
                if ((gsCIDMessage <> '') and (Func_New_Cid(gsCIDMessage))) then
                begin
                  GT_CID_NEW := '2';
                  pSetCIDState(0);
                end;
              end;

              if not IdUDPCidRecvServer.Active then
              begin
                IdUDPCidRecvServer.DefaultPort := 25376;
                IdUDPCidRecvServer.Active := True;
              end;
            except
              try
                IdXECID.Disconnect;
              except
              end;
              pSetCIDState(1);
              Log('tmr_CID2 - DisConnect 6900', HEARTLOGPATHFILE);
            end;
            Exit;
          end else
          begin
            try
              if iXeCidHeartBeat > 10 then
              begin
                if IdXECID.Connected then
                begin
                  ss_SendText := CTIXE_MakeHeartbeat(gsInternalNumber);
                  gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
                  IdXECID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.

                  if gsCIDEnCoding = 'enUTF8' then IdXECID.IOHandler.WriteLn(ss_SendText + #13#10, enUTF8)
                                              else IdXECID.IOHandler.WriteLn(ss_SendText + #13#10);

                  iXeCidHeartBeat := 0;
                  SetDebugeWrite_CID('tmr_xeCID_Heart : ' + ss_SendText);
                end;
              end;
              Inc(iXeCidHeartBeat);
            except
              try
                IdXECID.Disconnect;
              except
              end;
              pSetCIDState(1);
              Log('tmr_CID2 - DisConnect 6927', HEARTLOGPATHFILE);
            end;
          end;
        end else
        begin
          if xeCID.Socket.Connected = False then
          begin
            try
              xeCID.Close;
              Application.ProcessMessages;
              Sleep(100);
              Log(Format('CID try Connect [%s]',[xeCID.Host]), HEARTLOGPATHFILE);
              xeCID.Active := True;
              iCnt := 0;
              while ((iCnt < 20) and (xeCID.Socket.Connected = False)) do
              begin
                Application.ProcessMessages;
                // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
                Sleep(iInterval);
  //							Sleep(200);
                Inc(iCnt);
              end;

              ss_SendText := CTIXE_MakeLoginStruct(gsInternalNumber);
              if xeCID.Socket.Connected = True then
              begin
                gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
                iCnt := 0;
                xeCID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
                SetDebugeWrite_CID('4006 tmr_xeCID_Login : ' + ss_SendText);
                xeCID.Socket.SendText(ss_SendText);
                while ((iCnt < 16) and (xeCID.Tag = 77)) do
                begin
                  Application.ProcessMessages;
                  // CIDServer 로 부터 연결성공 전문 받을때까지 대기한다.
                  Sleep(200);
                  Inc(iCnt);
                end;
                // 결과값[로그인 성공에 대한 응답 전문] 확인.  gsCIDMessage --> xeCID 이밴트에서 읽어온다.
                if ((gsCIDMessage <> '') and (Func_New_Cid(gsCIDMessage))) then
                begin
                  GT_CID_NEW := '2';
                  pSetCIDState(0);
                end;
              end;

              if not IdUDPCidRecvServer.Active then
              begin
                IdUDPCidRecvServer.DefaultPort := 25376;
                IdUDPCidRecvServer.Active := True;
              end;
            except
              xeCID.Close;
              pSetCIDState(1);
              SetDebugeWrite_CID('tmr_CID - DisConnect 4092');
            end;
            Exit;
          end else
          begin
            try
              if iXeCidHeartBeat > 10 then
              begin
                if xeCID.Socket.Connected then
                begin
                  ss_SendText := CTIXE_MakeHeartbeat(gsInternalNumber);
                  gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
                  xeCID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
                  xeCID.Socket.SendText(ss_SendText);
                  iXeCidHeartBeat := 0;
                  SetDebugeWrite_CID('tmr_xeCID_Heart : ' + ss_SendText);
                end;
              end;
              Inc(iXeCidHeartBeat);
            except
              xeCID.Close;
              pSetCIDState(1);
              SetDebugeWrite_CID('tmr_CID - DisConnect 4092');
            end;
          end;
        end;
				giCIDCheckCnt := 0;
      end;
    except on E: Exception do
      Assert(False, E.Message);
		end;
	finally
		if (not xeCID.Socket.Connected) and ( iCidConnectErrCnt <= 10 ) then
		begin
			tmr_xeCID_New2.Enabled := True;
		end;
  end;
end;

procedure TFrm_Main.tm_AppCloseTimer(Sender: TObject);
begin
  SetDebugeWrite('Main.tm_AppCloseTimer');
  try
    tm_AppClose.Enabled := False;
    Screen.Cursor := crHourGlass;

    // 자동로그 아웃 구분값 설정.
    acAwayTimer1.Tag := 99;
    // 로그 아웃을 한다.
		proc_ProgramLogOut;
		sleep(1000);

    Self.Close;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.SetTree_ListItem( sHdcd, sBrcd : String; idx : Integer );
var
  i, j : Integer;
  LeftTreePtr : PTreeRec;
begin
  SetDebugeWrite('Main.SetTree_LeftItem');
  try
    for i := 0 to Tree_List.Count - 1 do
    begin
      LeftTreePtr := Tree_List.Items[i].Data;
      if ( LeftTreePtr^.HDCode = sHdcd ) And ( LeftTreePtr^.BrCode = sBrcd ) And ( LeftTreePtr^.FIndex = idx ) then
      begin
        Tree_List.Items[i].Selected := True;
        Break;
      end;

      for j := 0 to Tree_List.Items[i].Count - 1 do
      begin
        LeftTreePtr := Tree_List.Items[i].Items[j].Data;
        if ( LeftTreePtr^.HDCode = sHdcd ) And ( LeftTreePtr^.BrCode = sBrcd ) And ( LeftTreePtr^.FIndex = idx ) then
        begin
          Tree_List.Items[i].Items[j].Selected := True;
          Break;
        end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.SMS1Click(Sender: TObject);
var
  iBrNo, iHp, iRow: Integer;
  sBrNo, sHp: string;
begin
  SetDebugeWrite('Main.SMS1Click');
  try
    iRow := tvWkConnect.DataController.FocusedRecordIndex;
    if iRow = -1 then
      Exit;

    iBrNo := tvWkConnect.GetColumnByFieldName('지사코드').Index;
    iHp   := tvWkConnect.GetColumnByFieldName('휴대폰').Index;
    sBrNo := tvWkConnect.DataController.Values[iRow, iBrNo];
    sHp   := tvWkConnect.DataController.Values[iRow, iHp];
    sHp   := StringReplace(sHp, '-', '', [rfReplaceAll]);

    if ( Not Assigned(Frm_SMS06) ) Or ( Frm_SMS06 = NIl ) then Frm_SMS06 := TFrm_SMS06.Create(Nil);
    Frm_SMS06.cxTextEdit1.Text := sHp;
    Frm_SMS06.cxTextEdit2.Text := GetBrOfficeTel(sBrNo);
    Frm_SMS06.cxMemo1.Text := '';
    Frm_SMS06.Show;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.Tree_ListCustomDrawDataCell(Sender: TcxCustomTreeList;
  ACanvas: TcxCanvas; AViewInfo: TcxTreeListEditCellViewInfo;
  var ADone: Boolean);
begin
  try
    if AViewInfo.Focused then
    begin
      Sender.Canvas.Font.Color := clWhite;
      Sender.Canvas.Brush.Color := $00FF9933;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.Tree_ListDblClick(Sender: TObject);
begin
  SetDebugeWrite('Main.Tree_LeftDblClick');
  try
    if Tree_List.FocusedNode.Data = nil then Exit;

    if Tree_List.FocusedNode.Level = 2 then BtnAdvPnl1E.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.Tree_ListFocusedNodeChanged(Sender: TcxCustomTreeList;
  APrevFocusedNode, AFocusedNode: TcxTreeListNode);
var LeftTreePtr : PTreeRec;
begin
  SetDebugeWrite('Main.Tree_LeftChange');
  try
    if AFocusedNode.Data = nil then Exit;

    LeftTreePtr := AFocusedNode.Data;

    mLEFT_BRLISTVIEWHDCD := '';
    mLEFT_SectionIndex := 1;

  	if ( ( IsFamily ) And ( LeftTreePtr^.HDName = '패밀리본사전체' ) ) then     // 20120629 LYB
  	begin
      if cxPageControl1.ActivePageIndex < 0 then Exit;
  		if Check_LEFTSECTION(cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag) then Exit;

      mLEFT_SectionIndex := 0;
      GT_SEL_BRNO.GUBUN := '0';

      try
				JON03MNG[GI_JON03_LastFromIdx].HdNo  := LeftTreePtr.HDCode;
        JON03MNG[GI_JON03_LastFromIdx].BrNo  := LeftTreePtr.BRCode;
        JON03MNG[GI_JON03_LastFromIdx].Index := LeftTreePtr.FIndex;
      Except
        JON03MNG[GI_JON03_LastFromIdx].Index := 0;
      end;

      advTPTPna1.Caption := '   ' + Trim(LeftTreePtr^.BrName) + '   ';
      advTPTPna1.Hint := advTPTPna1.Caption;
      sPreBrCd := '';

      if Tree_List.Tag = 0 then
      begin
        JON03MNG[GI_JON03_LastFromIdx].AllSearch := True;
        Frm_Jon03[GI_JON03_LastFromIdx].dt_sysdate[GI_JON03_LastFromIdx] := '';
        Frm_Jon03[GI_JON03_LastFromIdx].rb_Search.Click;
        cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Caption := '접수-' + Trim(advTPTPna1.Hint);
        cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Hint    := '접수-' + Trim(advTPTPna1.Hint);
      end;

      Exit;
  	end else
    if ( Not IsFamily ) And ( GS_BRLISTVIEWMODE ) And ( LeftTreePtr^.HDName = '본사전체' ) And ( AFocusedNode.Level = 0 ) then
    begin
      mLEFT_SectionIndex := 0;
      GT_SEL_BRNO.GUBUN := '0';

      advTPTPna1.Caption := '   (통합)::콜센터통합' + '   ';
      advTPTPna1.Hint := advTPTPna1.Caption;
      sPreBrCd := '';
      if cxPageControl1.ActivePageIndex < 0 then Exit;
      if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag < 20 then
      begin
        try
          JON03MNG[GI_JON03_LastFromIdx].HdNo  := LeftTreePtr.HDCode;
          JON03MNG[GI_JON03_LastFromIdx].BrNo  := LeftTreePtr.BRCode;
          JON03MNG[GI_JON03_LastFromIdx].Index := LeftTreePtr.FIndex;
        Except
          JON03MNG[GI_JON03_LastFromIdx].Index := 0;
        end;

        if Tree_List.Tag = 0 then
        begin
          JON03MNG[GI_JON03_LastFromIdx].AllSearch := True;
          Frm_Jon03[GI_JON03_LastFromIdx].dt_sysdate[GI_JON03_LastFromIdx] := '';
          Frm_Jon03[GI_JON03_LastFromIdx].rb_Search.Click;
          cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Caption := '접수-' + Trim(advTPTPna1.Hint);
          cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Hint    := '접수-' + Trim(advTPTPna1.Hint);
        end;

        Exit;
      end else
      if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag > 20 ) And
         ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag < 26 ) then
      begin
        try
          WORA1MNG[GI_WORA1_LastFromIdx].HdNo  := LeftTreePtr.HDCode;
          WORA1MNG[GI_WORA1_LastFromIdx].BrNo  := LeftTreePtr.BRCode;
          WORA1MNG[GI_WORA1_LastFromIdx].Index := LeftTreePtr.FIndex;
        Except
          WORA1MNG[GI_WORA1_LastFromIdx].Index := 0;
        end;

        if Tree_List.Tag = 0 then
        begin
          Frm_WORA1[GI_WORA1_LastFromIdx].lblSosokNameA1.Caption := GetSosokInfo;
        end;

        Exit;
      end else
      if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 100 then Exit;
    end else
  	if ( Not IsFamily ) And ( ( GS_BRLISTVIEWMODE ) And ( LeftTreePtr^.HDName <> '본사전체' ) And ( AFocusedNode.Level = 0 ) ) then
    begin
      if cxPageControl1.ActivePageIndex < 0 then Exit;
  		if Check_LEFTSECTION1(cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag) then Exit;
      mLEFT_BRLISTVIEWHDCD := LeftTreePtr^.HDCode;
    end;

    if sPreHdCd = '' then sPreHdCd := LeftTreePtr^.HDCode;     //20160129 KHS
    if sPreHdCd <> LeftTreePtr^.HDCode then
    begin
      proc_change_HdNo(LeftTreePtr^.HDCode);
      sPreHdCd := LeftTreePtr^.HDCode;
    end;

    procChangeTreeBrNo;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.Tree_ListNodeCheckChanged(Sender: TcxCustomTreeList;
  ANode: TcxTreeListNode; AState: TcxCheckBoxState);
begin
  SetDebugeWrite('Main.Tree_LeftChange');
  if ANode.Data = nil then Exit;

  try
    if ANode.CheckGroupType = ncgNone then
    begin
      if ( Tree_List.Tag = 0 ) And ( (ANode.ImageIndex = 37) Or (ANode.ImageIndex = 43) ) then
      begin
        Func_CheckBrNo;
        if Tree_List.FocusedNode <> ANode then
          Tree_List.FocusedNode := ANode
        else
          Tree_ListFocusedNodeChanged(Tree_List, ANode, ANode);
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.Func_CheckBrNo;
	procedure _PushTag(AStatus: string; var Value: string);
  begin
    if Value <> '' then
			Value := Value + ',';

    Value := Value + AStatus;
  end;
Var i, j : Integer;
  LeftTreePtr : PTreeRec;
begin
  SetDebugeWrite('Main.Func_CheckBrNo');

  GS_CHECKBRLIST := '';
  try
    for i := 0 to Tree_List.Count - 1 do
    begin
      for j := 0 to Tree_List.Items[i].Count - 1 do
      begin
        if Tree_List.Items[i].Items[j].Checked then
        begin
           LeftTreePtr := Tree_List.Items[i].Items[j].Data;
    			_PushTag('''' + LeftTreePtr^.BRCode + '''', GS_CHECKBRLIST );
        end;
      end;
    end;
  except
    GS_CHECKBRLIST := '';
  end;
end;

procedure TFrm_Main.procChangeTreeBrNo;
var LeftTreePtr : PTreeRec;
  s : string;
  bNoMain : Boolean;
  idx, i : Integer;
begin
  SetDebugeWrite('Main.procChangeTreeBrNo');
  try
    if Tree_List.FocusedNode.Data = nil then Exit;
    LeftTreePtr := Tree_List.FocusedNode.Data;
    GT_SEL_BRNO.BrName := LeftTreePtr^.BRName;

    if ( Trim(LeftTreePtr^.KeyNumber) <> '' ) And ( Tree_List.FocusedNode.Level = 2 ) then
    begin
      advTPTPna1.Caption := '   ' + Trim(GT_SEL_BRNO.BrName) + '-' + LeftTreePtr^.KeyNumber + '   ';
    end else
    begin
      if ( ( Tree_List.FocusedNode.Level = 0 ) And ( IsFamily ) ) Or
         ( ( GS_BRLISTVIEWMODE ) And ( mLEFT_SectionIndex = 1 ) ) then
        advTPTPna1.Caption := '   (통합)::' + LeftTreePtr^.HdName + '   '
      else
      if ( Tree_List.FocusedNode.Level = 0 ) then
//      if ( Tree_List.FocusedNode.Level = 0 ) And ( GT_USERIF.Family = 'n' ) then
        advTPTPna1.Caption := '   (통합)::콜센터통합' + '   '
      else
        advTPTPna1.Caption := '   ' + Trim(GT_SEL_BRNO.BrName) + '   ';
    end;
    advTPTPna1.Hint := advTPTPna1.Caption;

    if ( (( sPreBrCd = (LeftTreePtr^.HDCode + LeftTreePtr^.BRCode + GT_SEL_BRNO.GUBUN) ) And
         ( sPreKeyNumber <> LeftTreePtr^.KeyNumber ) ) Or
       ( Tree_List.FocusedNode.Level = 1 ) )  then
    begin
  		Proc_Change_KeyNumber;
      sPreKeyNumber := LeftTreePtr^.KeyNumber;
    end;

    if sPreBrCd = (LeftTreePtr^.HDCode + LeftTreePtr^.BRCode + GT_SEL_BRNO.GUBUN + GS_CHECKBRLIST) then Exit;

    if ( Tree_List.FocusedNode.Level = 0 ) then idx := 0  // 콜센터(통합) 선택.
    else
      idx := Tree_List.FocusedNode.Index + 1;

    if ( GT_SEL_BRNO.Idx <> idx ) Or ( IsFamily ) Or ( GS_BRLISTVIEWMODE ) then
    begin
      if (UpperCase(GT_USERIF.RouteMS)[1] in ['M', 'S']) And ( Tree_List.FocusedNode.Level = 1 ) then // 지사 선택시에만 처리
      begin
        if ( idx = Tree_List.FocusedNode.Parent.Count ) And ( LeftTreePtr^.FIndex = 99 ) then
        begin
          GT_SEL_BRNO.GUBUN := '2'; // 이관지사 선택.
          if ( IsFamily  ) and (LeftTreePtr^.HINT <> 'F') then     // 20120629 LYB
          begin
            if idx = 0 then
              GT_SEL_BRNO.GUBUN := '0' // 콜센터(통합) 선택.
            else
              GT_SEL_BRNO.GUBUN := '1'; // 지사선택.
          end;
        end else
        if idx = 0 then
          GT_SEL_BRNO.GUBUN := '0' // 콜센터(통합) 선택.
        else
          GT_SEL_BRNO.GUBUN := '1'; // 지사선택.

      end else if idx = 0 then
        GT_SEL_BRNO.GUBUN := '0' // 콜센터(통합) 선택.
      else
        GT_SEL_BRNO.GUBUN := '1'; // 지사선택.

      if idx > 0 then
      begin
        GT_SEL_BRNO.BrNo := LeftTreePtr^.BRCode;
        GT_SEL_BRNO.HDNO := LeftTreePtr^.HDCode;
        GT_SEL_BRNO.BrName := LeftTreePtr^.BRName;
        proc_stab_ref(GT_SEL_BRNO.BrNo);
      end else
      begin
        if ( IsFamily ) then     // 20120629 LYB
        begin
          bNoMain := False;
          if GT_USERIF.HD = LeftTreePtr^.HDCode then
          begin
            GT_SEL_BRNO.BrNo := GT_USERIF.BR;
            GT_SEL_BRNO.HDNO := GT_USERIF.HD;
          end else
          begin
            // 패밀리 권한 사용자의 메인 본사가 아닌 다른 본사를 선택했을때는 다른 본사에 메인지사가 지사전체(통합}{이 됨 LYB 20120630
            for i := 0 to scb_HdMainBr.Count - 1 do
            begin
              if copy(s, Pos(',', s) + 1, Length(s) - Pos(',', s)) = copy(scb_HdMainBr[i], Pos(',', scb_HdMainBr[i]) + 1, Length(scb_HdMainBr[i]) - Pos(',', scb_HdMainBr[i])) then
              begin
                GT_SEL_BRNO.BrNo := LeftTreePtr^.BRCode;
                GT_SEL_BRNO.HDNO := LeftTreePtr^.HDCode;
                bNoMain := True;
              end;
            end;
            if not bNoMain then
            begin
              GT_SEL_BRNO.HDNO := LeftTreePtr^.HDCode;
              GT_SEL_BRNO.BrNo := scb_FamilyBrCode[0];
            end;
          end;
        end else
        begin
          GT_SEL_BRNO.BrNo := GT_USERIF.BR;
          GT_SEL_BRNO.HDNO := GT_USERIF.HD;
        end;
        GT_SEL_BRNO.BrName := '   (통합)::' + LeftTreePtr^.HdName + '   ';
        proc_stab_ref('');
      end;
      GT_SEL_BRNO.Idx := idx;
		end;

		if TCK_USER_PER.CUR_CallBell = '1' then
		begin
			if scb_HeadCodeCallBell[scb_HeadCode.IndexOf(GT_SEL_BRNO.HDNO)] = 'y' then
			begin
				gs_CallBellUse := True;
				btnCallBellMenu.caption := '콜벨/업소관리';
			end else
			begin
				gs_CallBellUse := False;
				btnCallBellMenu.caption := '업소관리';
			end;
    end;

		proc_change_brNo;
    Proc_Change_KeyNumber;

    if idx < 1 then // 클릭시 툴탭 캡션에 지사명 표기. CDS. 080812.
    begin
      if ( ( Tree_List.FocusedNode.Level = 0 ) And ( IsFamily ) ) Or
         ( ( GS_BRLISTVIEWMODE ) And ( mLEFT_SectionIndex = 1 ) )  then
        advTPTPna1.Caption := '   (통합)::' + LeftTreePtr^.HdName + '   '
      else
//      if ( Tree_List.FocusedNode.Level = 0 ) And ( GT_USERIF.Family = 'n' ) then
      if ( Tree_List.FocusedNode.Level = 0 ) then
        advTPTPna1.Caption := '   (통합)::콜센터통합' + '   ';

      advTPTPna1.Hint := advTPTPna1.Caption;
    end else
    begin
      if ( Trim(LeftTreePtr^.KeyNumber) <> '' ) And ( Tree_List.FocusedNode.Level = 2 ) then
        advTPTPna1.Caption := '   ' + Trim(GT_SEL_BRNO.BrName) + '-' + LeftTreePtr^.KeyNumber + '   '
      else
        advTPTPna1.Caption := '   ' + Trim(GT_SEL_BRNO.BrName) + '   ';

      advTPTPna1.Hint := advTPTPna1.Caption;
    end;

    mLEFT_HdCd := LeftTreePtr^.HDCode;
    mLEFT_BrCd := LeftTreePtr^.BRCode;
    mLEFT_Idx  := LeftTreePtr^.FIndex;

    sPreBrCd := ( LeftTreePtr^.HDCode + LeftTreePtr^.BRCode + GT_SEL_BRNO.GUBUN + GS_CHECKBRLIST );
    sPreKeyNumber := LeftTreePtr^.KeyNumber;
  except
    on e: exception do
    begin
      Assert(False, E.Message);
      s := 'frmMain[LMDSBARITEMCLICK]:' + e.Message;
      ShowMessage(s);
    end;
  end;
end;

procedure TFrm_Main.trmAUTOSMSSENDTimer(Sender: TObject);
var sTime, eTime, nTime : string;
begin
  SetDebugeWrite('Main.trmAUTOSMSSENDTimer');
  trmAUTOSMS.Enabled := False;
//	trmAUTOSMSSEND.Enabled := False;
	
//	trmAUTOSMSSEND.Interval := iInterval;
  nTime := func_sysdate;
	nTime := copy(nTime,9,2) + ':' + copy(nTime,11,2);
  if iChk = 1 then
  begin
    sTime := GS_FIR_FTIME;
    eTime := GS_FIR_ETIME;
  end else
  if iChk = 2 then
  begin
    sTime := GS_SEC_FTIME;
    eTime := GS_SEC_ETIME;
  end else
  if iChk = 3 then
  begin
    sTime := GS_THI_FTIME;
    eTime := GS_THI_ETIME;
  end else
  if iChk = 4 then
  begin
    sTime := GS_FOU_FTIME;
    eTime := GS_FOU_ETIME;
  end else
  if iChk = 5 then
  begin
    sTime := GS_FIF_FTIME;
    eTime := GS_FIF_ETIME;
  end;

  try
    if Trim(GS_MMS_STR) = '' then
    begin
      Exit;
    end;

    if Trim(GS_RECEIVER_TEL) = '' then
    begin
      Exit;
    end;

    if (sTime <= nTime) and (eTime >= nTime) then
      proc_BrOrder_SMS;

		trmAUTOSMS.Enabled := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.trmAUTOSMSTimer(Sender: TObject);
var sysdate : string;
begin
  SetDebugeWrite('Main.trmAUTOSMSTimer');
  try
    trmAUTOSMS.Interval := 120000;
    if not GS_ONOFF_CHK then
    begin
      trmAUTOSMS.Enabled := False;
      Exit;
    end;

    sysdate := func_sysdate;
    sysdate := copy(sysdate,9,2) + ':' + copy(sysdate,11,2);
    if GS_FIR_CHK then
    begin
      if (GS_FIR_FTIME < GS_FIR_ETIME) then
      begin
        if (GS_FIR_FTIME <= sysdate) and (GS_FIR_ETIME >= sysdate) then
        begin
					iInterval := (strtoint(GS_FIR_DTIME) + 1) * 5 * 60000;
					iChk := 1;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end else
      if (GS_FIR_FTIME > GS_FIR_ETIME) then
      begin
        if (GS_FIR_FTIME <= sysdate) or (GS_FIR_ETIME >= sysdate) then
        begin
          iInterval := (strtoint(GS_FIR_DTIME) + 1) * 5 * 60000;
          iChk := 1;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end;
    end;
  {  if GS_FIR_CHK then
    begin
      if (GS_FIR_FTIME < sysdate) and (GS_FIR_ETIME > sysdate) then
      begin
        iInterval := strtoint(GS_FIR_DTIME) + 1 * 5 * 60000;
        iChk := 1;
        if trmAUTOSMSSEND.Enabled = False then trmAUTOSMSSEND.Enabled := True;
      end;
    end; }
    if GS_SEC_CHK then
    begin
      if (GS_SEC_FTIME < GS_SEC_ETIME) then
      begin
        if (GS_SEC_FTIME <= sysdate) and (GS_SEC_ETIME >= sysdate) then
        begin
          iInterval := (strtoint(GS_SEC_DTIME) + 1) * 5 * 60000;
          iChk := 2;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end else
      if (GS_SEC_FTIME > GS_SEC_ETIME) then
      begin
        if (GS_SEC_FTIME <= sysdate) or (GS_SEC_ETIME >= sysdate) then
        begin
          iInterval := (strtoint(GS_SEC_DTIME) + 1) * 5 * 60000;
          iChk := 2;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end;
    end;
    if GS_THI_CHK then
    begin
      if (GS_THI_FTIME < GS_THI_ETIME) then
      begin
        if (GS_THI_FTIME <= sysdate) and (GS_THI_ETIME >= sysdate) then
        begin
          iInterval := (strtoint(GS_THI_DTIME) + 1) * 5 * 60000;
          iChk := 3;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end else
      if (GS_THI_FTIME > GS_THI_ETIME) then
      begin
        if (GS_THI_FTIME <= sysdate) or (GS_THI_ETIME >= sysdate) then
        begin
          iInterval := (strtoint(GS_THI_DTIME) + 1) * 5 * 60000;
          iChk := 3;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end;
    end;
    if GS_FOU_CHK then
    begin
      if (GS_FOU_FTIME < GS_FOU_ETIME) then
      begin
        if (GS_FOU_FTIME <= sysdate) and (GS_FOU_ETIME >= sysdate) then
        begin
          iInterval := (strtoint(GS_THI_DTIME) + 1) * 5 * 60000;
          iChk := 4;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end else
      if (GS_FOU_FTIME > GS_FOU_ETIME) then
      begin
        if (GS_FOU_FTIME <= sysdate) or (GS_FOU_ETIME >= sysdate) then
        begin
          iInterval := (strtoint(GS_FOU_DTIME) + 1) * 5 * 60000;
					iChk := 4;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end;
    end;
    if GS_FIF_CHK then
    begin
      if (GS_FIF_FTIME < GS_FIF_ETIME) then
      begin
        if (GS_FIF_FTIME <= sysdate) and (GS_FIF_ETIME >= sysdate) then
        begin
          iInterval := (strtoint(GS_FIF_DTIME) + 1) * 5 * 60000;
          iChk := 5;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end else
      if (GS_FIF_FTIME > GS_FIF_ETIME) then
      begin
        if (GS_FIF_FTIME <= sysdate) or (GS_FIF_ETIME >= sysdate) then
        begin
          iInterval := (strtoint(GS_FIF_DTIME) + 1) * 5 * 60000;
          iChk := 5;
					if trmAUTOSMSSEND.Enabled = False then 
					begin
						trmAUTOSMSSEND.Interval := iInterval; 
						trmAUTOSMSSEND.Enabled := True;
					end;
				end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.trm_1011AfterTimer(Sender: TObject);
begin
	trm_1011After.Enabled := False;
	pSi415IPCCSendData(fSI_MakeHeader_Only('1012', '0', '')); //미사용
end;

procedure TFrm_Main.trm_CTITimer(Sender: TObject);
begin
  SetDebugeWrite('Main.trm_CTITimer');
  try
    if trm_Time >= 30 then
    begin
      trm_CTI.Enabled := False;
  		pnl_TapiCallingStatus.Visible := False;
      trm_Time := 0;
		end else
    begin
      Inc(trm_Time);
		end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.trm_IPCCSettingTimer(Sender: TObject);
var sMsg : string;
	bNewFile : Boolean;
begin
	trm_IPCCSetting.Enabled := False;
	bNewFile := False;
	if FileExists(EXECDIRECTORY + GS_CDMS_UPCMNIPCC_NEW) then
	begin
		DeleteFile(EXECDIRECTORY + GS_CDMS_UPCMNIPCC);
		RenameFile(EXECDIRECTORY + GS_CDMS_UPCMNIPCC_NEW, EXECDIRECTORY + GS_CDMS_UPCMNIPCC);

		bNewFile := True; //새롭게 다운받은 파일이 있는지 여부
	end;

	gsPath := '';
	if Pos('Windows XP', GS_EXEC_OSName) > 0  then
		gsPath := 'C:\Program Files\CMNIPCC\CMNIPCC.exe'
	else
	begin
		gsPath := 'C:\Program Files (x86)\CMNIPCC\CMNIPCC.exe';
		if Not FileExists(gsPath) then 
			gsPath := 'C:\Program Files\CMNIPCC\CMNIPCC.exe'
	end;

	if not FileExists(PChar(gsPath)) then
	begin
		sMsg := '콜마너IPCC 프로그램이 설치되어 있지 않습니다.' + #13#10 + '설치하시겠습니까?' + #13#10 + #13#10 + 
						'**미설치 시 콜마너IPCC 기능을 사용할 수 없습니다.';
						
		if Application.MessageBox(PChar(sMsg), '[CMNIPCC]', MB_YESNO +	MB_ICONQUESTION + MB_DEFBUTTON1) = IDYES then
		begin
			try
				ShellExecute(
					Self.Handle,
					'open',
					PChar(ExtractFilePath(ParamStr(0)) + 'CMNIPCC.exe'),
					nil,
					nil,
					SW_SHOWNORMAL
				);
				GMessagebox('설치가 완료되면 상담원 프로그램을 재실행 하여 주십시오.', CDMSE);
			except on e: exception do
				begin
					Assert(False, E.Message);
					ShowMessage('frmMain[pExecSI415OEM]:' + e.Message);
				end;
			end;
		end else
		begin
			RenameFile(EXECDIRECTORY + GS_CDMS_UPCMNIPCC, EXECDIRECTORY + GS_CDMS_UPCMNIPCC_NEW);
//			DeleteFile(EXECDIRECTORY + GS_CDMS_UPCMNIPCC);
		end;
	end else
	if bNewFile then
	begin
		sMsg := '콜마너IPCC 업데이트 파일이 있습니다.' + #13#10 + '설치하시겠습니까?' + #13#10 + #13#10 + 
						'**미설치 시 콜마너IPCC 기능을 사용할 수 없습니다.';
						
		if Application.MessageBox(PChar(sMsg), '[CMNIPCC]', MB_YESNO +	MB_ICONQUESTION + MB_DEFBUTTON1) = IDYES then
		begin
			try
				ShellExecute(
					Self.Handle,
					'open',
					PChar(ExtractFilePath(ParamStr(0)) + 'CMNIPCC.exe'),
					nil,
					nil,
					SW_SHOWNORMAL
				);
				GMessagebox('설치가 완료되면 상담원 프로그램을 재실행 하여 주십시오.', CDMSE);
			except on e: exception do
				begin
					Assert(False, E.Message);
					ShowMessage('frmMain[pExecSI415OEM]:' + e.Message);
				end;
			end;
		end else
		begin
			RenameFile(EXECDIRECTORY + GS_CDMS_UPCMNIPCC, EXECDIRECTORY + GS_CDMS_UPCMNIPCC_NEW);
//			DeleteFile(EXECDIRECTORY + GS_CDMS_UPCMNIPCC);
		end;
		
	end;
end;

procedure TFrm_Main.tvWkConnectCellClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
var
  iRow, iCol, iOrderX, iOrderY : integer;
	sTmp, sOrderX, sOrdery : string;
begin
  SetDebugeWrite('Main.tvWkConnectCellClick');
	// 그리드 기사 선택시 접수창의 강제배차 입력란에 자동입력됨.
  // 접수창의 "강제배차" 연동됨.[오더 접수시 바로 배차함.]
  try
		if not Assigned(Frm_JON01N[GS_JON01_LASTACTIVE]) then exit;
		
		if Frm_JON01N[GS_JON01_LASTACTIVE].chkCompulWor.checked then
		begin
			iRow := tvWkConnect.DataController.FocusedRecordIndex;
			iCol := tvWkConnect.GetColumnByFieldName('기사사번').Index;
			sTmp := tvWkConnect.DataController.Values[iRow, iCol];

			Frm_JON17[GS_JON01_LASTACTIVE].lb_WKSabun.Caption := '기사사번 : ' + sTmp;
			Frm_JON17[GS_JON01_LASTACTIVE].lb_WkSabun.Hint := sTmp;
			
			iCol := tvWkConnect.GetColumnByFieldName('기사명').Index;
			sTmp := tvWkConnect.DataController.Values[iRow, iCol];
			Frm_JON17[GS_JON01_LASTACTIVE].lb_WkName.Caption := '기사이름 : ' + sTmp;
			Frm_JON17[GS_JON01_LASTACTIVE].lb_WkName.Hint    := sTmp;
			
			iCol := tvWkConnect.GetColumnByFieldName('휴대폰').Index;
			sTmp := tvWkConnect.DataController.Values[iRow, iCol];
			Frm_JON17[GS_JON01_LASTACTIVE].lb_WkTel.Caption := '기사번호 : ' + sTmp;
			Frm_JON17[GS_JON01_LASTACTIVE].lb_WkTel.Hint    := sTmp;

			
			Frm_JON17[GS_JON01_LASTACTIVE].btn_Acept.Enabled := True;
			//배차 시 고객에게 문자전송 (지사별 설정 문자내용 적용)
		end;
	except
		on e: Exception do
		begin
			sTmp := 'frmMain[tvWkConnectCellClick]Error:' + e.Message;
			Assert(False, E.Message);
			GMessagebox(PChar(sTmp), CDMSE);
		end;
	end;

  try
  	iRow := tvWkConnect.DataController.FocusedRecordIndex;
  	iCol := tvWkConnect.GetColumnByFieldName('기사사번').Index;
  	aWKCONLIST := tvWkConnect.DataController.Values[iRow, iCol];
    if btnSetJonAuto.Down then
    begin
       btnSetJonAuto.Down := False;
       pSetSkinButton(btnSetJonAuto);
    end;

  	if chkSelWK then
  	begin
  		iRow := tvWkConnect.DataController.FocusedRecordIndex;
  		iOrderX := tvWkConnect.GetColumnByFieldName('위치X').Index;
      iOrderY := tvWkConnect.GetColumnByFieldName('위치Y').Index;
      sOrderX := tvWkConnect.DataController.Values[iRow, iOrderX];
      sOrderY := tvWkConnect.DataController.Values[iRow, iOrderY];
      if (sOrderX <> '') and (sOrderY <> '') then
      begin
        if not Assigned(frm_AdminMap) then
        begin
          frm_AdminMap := Tfrm_AdminMap.Create(Self);
        end;

        frm_AdminMap.Skm := '';
        frm_AdminMap.Show;

        Application.ProcessMessages;
        frm_AdminMap.ConnectOneWorker(tvWkConnect, chkConnWK, iRow, '0' + sOrderX, sOrderY);
      end else
      begin
        cxLabel13.Caption := '출발지에 좌표값이 없습니다.';
        cxLabel13.Visible := True;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tvWkConnectCellDblClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
begin
	SetDebugeWrite('Main.tvWkConnectCellDblClick');
	proc_LeftWkManage;
end;

procedure TFrm_Main.tvWkConnectColumnHeaderClick(Sender: TcxGridTableView;
  AColumn: TcxGridColumn);
begin
  AIndex := AColumn.Index;
end;

procedure TFrm_Main.tvWkConnectColumnPosChanged(Sender: TcxGridTableView;
  AColumn: TcxGridColumn);
begin
  SetDebugeWrite('Main.tvWkConnectColumnPosChanged');
  proc_Change_Title;
end;

procedure TFrm_Main.tvWkConnectColumnSizeChanged(Sender: TcxGridTableView;
  AColumn: TcxGridColumn);
begin
  SetDebugeWrite('Main.tvWkConnectColumnSizeChanged');
  proc_Change_Title;
end;

procedure TFrm_Main.tvWkConnectDataControllerSortingChanged(Sender: TObject);
begin
  gfSetIndexNo(tvWkConnect, AIndex, GS_SortNoChange);
end;

procedure TFrm_Main.tvWkConnectStylesGetContentStyle(
  Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
  AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
var
	iRow, iStCd, iBecha: Integer;
begin
	if (ARecord.Selected) or (Sender.DataController.RecordCount = 0) then Exit;
  try
    AStyle := cxstWkConnect;
    iRow := tvWkConnect.DataController.GetRowInfo(ARecord.Index).RecordIndex;
		iStCd := tvWkConnect.GetColumnByFieldName('상태').Index;

    AStyle.TextColor := clBlack;
		if tvWkConnect.DataController.Values[iRow, iStCd] = '출근'      then AStyle.Color := lbWkToday.Style.Color else
		if tvWkConnect.DataController.Values[iRow, iStCd] = '단순접속'  then AStyle.Color := lbWkConnect.Style.Color else
		if tvWkConnect.DataController.Values[iRow, iStCd] = '오더접속'  then AStyle.Color := lbWkConnect_order.Style.Color else
		if tvWkConnect.DataController.Values[iRow, iStCd] = '운행'      then AStyle.Color := lbWkRun.Style.Color else
		if tvWkConnect.DataController.Values[iRow, iStCd] = '운행/접속' then AStyle.Color := $00B9FFFD else
    begin
      if GB_DARKMODE then
      begin
        AStyle.Color := $00333333;
        AStyle.TextColor := clWhite;
      end else AStyle.Color := clWhite;
    end;

//		if (tvWkConnect.DataController.Values[iRow, iStCd] = '운행') or (tvWkConnect.DataController.Values[iRow, iStCd] = '운행/접속') then
		begin
			iBecha := tvWkConnect.GetColumnByFieldName('배차상태코드').Index;
			if tvWkConnect.DataController.Values[iRow, iBecha] = '0' then
			begin
				AStyle.Color := lb_Becha0.Style.Color;
			end else
			if tvWkConnect.DataController.Values[iRow, iBecha] = '1' then
			begin
				AStyle.Color := lb_Becha1.Style.Color;
			end else
			if tvWkConnect.DataController.Values[iRow, iBecha] = '2' then
			begin
				AStyle.Color := lb_Becha2.Style.Color;
			end else
			if tvWkConnect.DataController.Values[iRow, iBecha] = '3' then
			begin
				AStyle.Color := lb_Becha3.Style.Color;
			end else
			if tvWkConnect.DataController.Values[iRow, iBecha] = 'R' then
			begin
				AStyle.Color := lb_Becha4.Style.Color;
			end;
		end;
  except
		on e: Exception do
    begin
      Assert(False, E.Message);
      GMessagebox(PChar('frmMain[tvWkConnectStylesGetContentStyle]Error:' + e.Message), CDMSE);
    end;
  end;
end;

procedure TFrm_Main.xeClearSkyError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
	ErrorCode := 0;
end;

procedure TFrm_Main.xeClearSkyRead(Sender: TObject; Socket: TCustomWinSocket);
var
	sStr, sData, ss_SendText : AnsiString;
begin
	SetDebugeWrite_CID('Main.xCTI_CTIRead');
	try
    sStr := Socket.ReceiveText;
		if Trim(sStr) = '' then Exit;

		SetDebugeWrite_CID( 'xCTI_CTI - Read : ' + sStr);

//    if GT_USERIF.CT = 'R134' then Log('xCTI_CTI - Read : ' + sStr, LOGDATAPATHFILE);

		sData := Copy(sStr,Pos(STX,sStr) + 1, Pos(ETX,sStr)-2); // 전문 잘라내기.

		if Copy(sData, 1, 3) = '100' then
		begin
			try
				Frm_JON54.btn_PickUpPhone.Enabled := True;
				Frm_JON54.btn_HangUp.Enabled := False;
        Frm_JON54.btn_Calling.Enabled := True;

				GS_JONCidInput.KeyNumber   := Trim(Copy(sData, 23, 14));   // 대표번호
				GS_JONCidInput.PhoneNumber := Trim(Copy(sData, 4 , 14));   // 고객번호
				GS_JONCidInput.ExtNumber   := Trim(Copy(sData, 18,  5));   // DNIS
				GS_JONCidInput.CidCall     := False;
				if Assigned(Frm_JON35) then Frm_JON35.Close;

        if G_Talk <> 'C' then TimerOCX.Enabled := True;

			except on E: Exception do
    		Assert(False, E.Message);
      end;
    end else
    if Copy(sData, 1, 3) = '101' then   //  Billit Ring 이벤트
    begin
      G_Talk := '';
    	try
				GS_JONCidInput.KeyNumber   := Trim(Copy(sData, 23, 14));   // 대표번호
				GS_JONCidInput.PhoneNumber := Trim(Copy(sData, 4 , 14));   // 고객번호
				GS_JONCidInput.ExtNumber   := Trim(Copy(sData, 18,  5));   // DNIS
				GS_JONCidInput.CidCall     := False;

				Frm_JON54.btn_PickUpPhone.Enabled := True;
        Frm_JON54.btn_HangUp.Enabled := False;
        Frm_JON54.btn_Calling.Enabled := True;

        if ( Not Assigned(Frm_JON35) ) And ( Frm_JON35 = Nil ) then Frm_JON35 := TFrm_JON35.Create(Self);
        Frm_JON35.Show;

      except on E: Exception do
    		Assert(False, E.Message);
      end;
    end else
    if Copy(sData, 1, 3) = '102' then   //  Billit Hnag up 이벤트
    begin
    	try
        Frm_JON54.btn_PickUpPhone.Enabled := True;
        Frm_JON54.btn_HangUp.Enabled := False;
        Frm_JON54.btn_Calling.Enabled := True;

				GS_JONCidInput.KeyNumber   := '';   // 대표번호
				GS_JONCidInput.PhoneNumber := '';   // 고객번호
				GS_JONCidInput.ExtNumber   := '';   // DNIS
				GS_JONCidInput.CidCall     := False;

        if Assigned(Frm_JON35) then Frm_JON35.Close;

      except on E: Exception do
    		Assert(False, E.Message);
      end;
    end else
    if Copy(sData, 1, 3) = '103' then   //  070번호를 대표번호로 재조회
		begin
      Frm_JON54.btn_PickUpPhone.Enabled := True;
      Frm_JON54.btn_HangUp.Enabled := False;
      Frm_JON54.btn_Calling.Enabled := True;

      if GT_CIDINFO.Win10CIDXE_YN then
      begin
        if IdXECID.Connected then
        begin
          ss_SendText := CTIXE_MakeLGUMake(sData);
          SetDebugeWrite_CID('tmr_xeCID_R : ' + ss_SendText);
          if gsCIDEnCoding = 'enUTF8' then IdXECID.IOHandler.WriteLn(ss_SendText + #13#10, enUTF8)
                                      else IdXECID.IOHandler.WriteLn(ss_SendText + #13#10);
        end;
      end else
      begin
        if xeCID.Socket.Connected then
        begin
          ss_SendText := CTIXE_MakeLGUMake(sData);
          SetDebugeWrite_CID('tmr_xeCID_R : ' + ss_SendText);
          xeCID.Socket.SendText(ss_SendText);
        end;
      end;

      if Assigned(Frm_JON35) then Frm_JON35.Close;
    end else
    if Copy(sData, 1, 3) = '200' then
		begin
      gbCTI_xCTI_Status := False;

			trm_CTI.Enabled := False;
			if System.StrUtils.RightStr(sData, 2) = '00' then
      begin
	  		trm_Time := 27;
	  		trm_CTI.Enabled := True;
				pnl_TapiCallingStatus.Left := (Width - pnl_TapiCallingStatus.Width) div 2;
				pnl_TapiCallingStatus.top := (Height - pnl_TapiCallingStatus.Height) div 2;
	  		lb_TapiCallingStatus.Caption := '전화거는중...';
	  		pnl_TapiCallingStatus.Visible := True;
	  		pnl_TapiCallingStatus.BringToFront;
	  	end else
			if System.StrUtils.RightStr(sData, 2) = '10' then
      begin
        GMessagebox('CID 부정확 오류!', CDMSE);
	  		pnl_TapiCallingStatus.Visible := False;
      end else
			if System.StrUtils.RightStr(sData, 2) = '20' then
      begin
        GMessagebox('MakeCall 실패!', CDMSE);
        pnl_TapiCallingStatus.Visible := False;
      end else
			if System.StrUtils.RightStr(sData, 2) = '99' then
      begin
        GMessagebox('알수없는 오류!', CDMSE);
	  		pnl_TapiCallingStatus.Visible := False;
      end else
			if System.StrUtils.RightStr(sData, 2) = '50' then
      begin
        GMessagebox('수신거부 성공!', CDMSE);
      end else
      if System.StrUtils.RightStr(sData, 2) = '51' then
      begin
        GMessagebox('수신거부 실패!', CDMSE);
      end;
    end;
  except
    on e: Exception do
    begin
      sStr := 'frmMain[xCTI_CTIRead]Error:' + e.Message;
      Assert(False, E.Message);
      GMessagebox(PChar(sStr), CDMSE);
    end;
  end;
end;

procedure TFrm_Main.xCTI_CTIConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
	SetDebugeWrite('Main.xCTI_CTIConnect');
	try
    pSetCIDState(0);

		GS_KLCNS_ConnectYN := True;
		SetDebugeWrite('xCTI_CTI - Connect ');
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.xCTI_CTIDisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  SetDebugeWrite('Main.xCTI_CTIDisconnect');
  try
    pSetCIDState(1);
    SetDebugeWrite('xCTI_CTI - DisConnect 4789');

    GS_KLCNS_ConnectYN := False;

    SetDebugeWrite('xCTI_CTI - DisConnect ');

    tmrxCTIConnect.Enabled := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.xCTI_CTIError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
	SetDebugeWrite('Main.xCTI_CTIError');
	gbCTI_xCTI_Status := False;

	SetDebugeWrite('xCTI_CTI - Error ');
end;

procedure TFrm_Main.xCTI_CTIRead(Sender: TObject; Socket: TCustomWinSocket);
var
	sStr, sData, ss_SendText : AnsiString;
begin
	SetDebugeWrite_CID('Main.xCTI_CTIRead');
	try
    sStr := Socket.ReceiveText;
		if Trim(sStr) = '' then Exit;

		SetDebugeWrite_CID( 'xCTI_CTI - Read : ' + sStr);

//    if GT_USERIF.CT = 'R134' then Log('xCTI_CTI - Read : ' + sStr, LOGDATAPATHFILE);

		sData := Copy(sStr,Pos(STX,sStr) + 1, Pos(ETX,sStr)-2); // 전문 잘라내기.

		if Copy(sData, 1, 3) = '100' then
		begin
			try
				Frm_JON54.btn_PickUpPhone.Enabled := True;
				Frm_JON54.btn_HangUp.Enabled := False;
        Frm_JON54.btn_Calling.Enabled := True;

				GS_JONCidInput.KeyNumber   := Trim(Copy(sData, 23, 14));   // 대표번호
				GS_JONCidInput.PhoneNumber := Trim(Copy(sData, 4 , 14));   // 고객번호
				GS_JONCidInput.ExtNumber   := Trim(Copy(sData, 18,  5));   // DNIS
				GS_JONCidInput.CidCall     := False;
				if Assigned(Frm_JON35) then Frm_JON35.Close;

        if G_Talk <> 'C' then TimerOCX.Enabled := True;

      except on E: Exception do
    		Assert(False, E.Message);
      end;
    end else
    if Copy(sData, 1, 3) = '101' then   //  Billit Ring 이벤트
    begin
      G_Talk := '';
    	try
				GS_JONCidInput.KeyNumber   := Trim(Copy(sData, 23, 14));   // 대표번호
				GS_JONCidInput.PhoneNumber := Trim(Copy(sData, 4 , 14));   // 고객번호
				GS_JONCidInput.ExtNumber   := Trim(Copy(sData, 18,  5));   // DNIS
				GS_JONCidInput.CidCall     := False;

				Frm_JON54.btn_PickUpPhone.Enabled := True;
        Frm_JON54.btn_HangUp.Enabled := False;
        Frm_JON54.btn_Calling.Enabled := True;

        if ( Not Assigned(Frm_JON35) ) And ( Frm_JON35 = Nil ) then Frm_JON35 := TFrm_JON35.Create(Self);
        Frm_JON35.Show;

      except on E: Exception do
    		Assert(False, E.Message);
      end;
    end else
    if Copy(sData, 1, 3) = '102' then   //  Billit Hnag up 이벤트
    begin
    	try
        Frm_JON54.btn_PickUpPhone.Enabled := True;
        Frm_JON54.btn_HangUp.Enabled := False;
        Frm_JON54.btn_Calling.Enabled := True;

        GS_JONCidInput.KeyNumber   := '';   // 대표번호
				GS_JONCidInput.PhoneNumber := '';   // 고객번호
				GS_JONCidInput.ExtNumber   := '';   // DNIS
				GS_JONCidInput.CidCall     := False;

        if Assigned(Frm_JON35) then Frm_JON35.Close;

      except on E: Exception do
    		Assert(False, E.Message);
      end;
    end else
    if Copy(sData, 1, 3) = '103' then   //  070번호를 대표번호로 재조회
    begin
      Frm_JON54.btn_PickUpPhone.Enabled := True;
      Frm_JON54.btn_HangUp.Enabled := False;
      Frm_JON54.btn_Calling.Enabled := True;

      if GT_CIDINFO.Win10CIDXE_YN then
      begin
        if IdXECID.Connected then
        begin
          ss_SendText := CTIXE_MakeLGUMake(sData);
          SetDebugeWrite_CID('tmr_xeCID_R : ' + ss_SendText);
          if gsCIDEnCoding = 'enUTF8' then IdXECID.IOHandler.WriteLn(ss_SendText + #13#10, enUTF8)
                                      else IdXECID.IOHandler.WriteLn(ss_SendText + #13#10);
        end;
      end else
      begin
        if xeCID.Socket.Connected then
        begin
          ss_SendText := CTIXE_MakeLGUMake(sData);
          SetDebugeWrite_CID('tmr_xeCID_R : ' + ss_SendText);
          xeCID.Socket.SendText(ss_SendText);
        end;
      end;

      if Assigned(Frm_JON35) then Frm_JON35.Close;
    end else
    if Copy(sData, 1, 3) = '200' then
    begin
      gbCTI_xCTI_Status := False;

	  	trm_CTI.Enabled := False;
			if System.StrUtils.RightStr(sData, 2) = '00' then
      begin
	  		trm_Time := 27;
	  		trm_CTI.Enabled := True;
				pnl_TapiCallingStatus.Left := (Width - pnl_TapiCallingStatus.Width) div 2;
				pnl_TapiCallingStatus.top := (Height - pnl_TapiCallingStatus.Height) div 2;
	  		lb_TapiCallingStatus.Caption := '전화거는중...';
	  		pnl_TapiCallingStatus.Visible := True;
	  		pnl_TapiCallingStatus.BringToFront;
	  	end else
			if System.StrUtils.RightStr(sData, 2) = '10' then
      begin
        GMessagebox('CID 부정확 오류!', CDMSE);
	  		pnl_TapiCallingStatus.Visible := False;
      end else
			if System.StrUtils.RightStr(sData, 2) = '20' then
      begin
        GMessagebox('MakeCall 실패!', CDMSE);
        pnl_TapiCallingStatus.Visible := False;
      end else
			if System.StrUtils.RightStr(sData, 2) = '99' then
      begin
        GMessagebox('알수없는 오류!', CDMSE);
	  		pnl_TapiCallingStatus.Visible := False;
      end else
			if System.StrUtils.RightStr(sData, 2) = '50' then
      begin
        GMessagebox('수신거부 성공!', CDMSE);
      end else
      if System.StrUtils.RightStr(sData, 2) = '51' then
      begin
        GMessagebox('수신거부 실패!', CDMSE);
      end;
    end;
  except
    on e: Exception do
		begin
      sStr := 'frmMain[xCTI_CTIRead]Error:' + e.Message;
      Assert(False, E.Message);
      GMessagebox(PChar(sStr), CDMSE);
    end;
  end;
end;

procedure TFrm_Main.xeCIDConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
	Log('Main.xeCIDConnect', HEARTLOGPATHFILE);
  try
    pSetCIDState(0);

		iCidConnectErrCnt := 0;
    gsCIDConnectIP := xeCID.Host;

		if ( GT_OCX = 'NKT'  ) then GT_NKTXE := 'NKT' else
		if ( GT_OCX = 'SSIO' ) then GT_NKTXE := 'NKT' else
		if ( GT_OCX = 'SSIT' ) then GT_NKTXE := 'NKT';
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.xeCIDDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  Log('Main.xeCIDDisconnect', HEARTLOGPATHFILE);
  try
    if tmr_xeCID_check.Tag = 20 then Exit;

    pSetCIDState(1);

    gsCIDConnectIP := '';

		if ( GT_OCX = 'NKT'  ) then GT_NKTXE := '' else
		if ( GT_OCX = 'SSIO' ) then GT_NKTXE := '' else
		if ( GT_OCX = 'SSIT' ) then GT_NKTXE := '';
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.xeCIDError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
	SetDebugeWrite_CID('Main.xeCIDError - ' + IntToStr(ErrorCode));
  ErrorCode := 0;
  try
		Inc(iCidConnectErrCnt);
		if iCidConnectErrCnt > 10 then
		begin
			GS_EnvFile.WriteString('CID_COMM', 'CID_AUTO', 'N');
			tmr_xeCID_check.Enabled := False;
			if iCidConnectErrCnt = 11 then
			begin
				ShowMessage('CID서버 연결에 실패하였습니다.' + #10#13 +
										'CID서버를 다시 연결하시려면 CID설정에서 서버설정값 확인 후 재 연결 바랍니다');
			end;

			ed_Number.Enabled := True; // 내선
			ed_CID_Ip1.Enabled := True; // IP
			ed_CID_Ip2.Enabled := True; // IP
			rchk_Use.Enabled := True; // CID사용 여부
			btnSvrConn.Enabled := True; // 연결버튼 활성화.
		end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.xeCIDRead(Sender: TObject; Socket: TCustomWinSocket);
var bFirst : Boolean;
begin
	SetDebugeWrite_CID('Main.xeCIDRead');
  try
		gsCIDMessage := Socket.ReceiveText; // 전문읽기.

		gsCIDMessage := StringReplace(gsCIDMessage, #13, '', [rfReplaceAll]);
		gsCIDMessage := StringReplace(gsCIDMessage, #10, '', [rfReplaceAll]);

  		// 오른쪽에서부터 자르는 부분은 TCP자료가 밀려서 한꺼번에 들어올수 있기때문에 맨 마지막 CID자료만 추출하기 위해서
		gsCIDMessage := System.StrUtils.RightStr(gsCIDMessage, 63);
		// CID 전문 받은걸 처리한다. ------------------------------------------------
		bFirst := False;
		if gsCIDMsgFront <> gsCIDMessage then
		begin
			bFirst := True;
			gsCIDMsgFront := gsCIDMessage;
		end;

//		SetDebugeWrite('XeCidReadFront : ' + gsCIDMsgFront);
//		SetDebugeWrite('XeCidRead : ' + gsCIDMessage);
		SetDebugeWrite_CID('CXERead[B]/[N] : [' + gsCIDMsgFront + ']/[' + gsCIDMessage + ']' );

		CTIXE_Check_Save(gsCIDMessage);

    Log(Format('CIDXE --> RECV [%s, %s, %s, %s, %s, %s, %s] %s - %s',
              [ gXeRecvHeader.sType,
                gXeRecvHeader.sLine,
                gXeRecvHeader.sMainLn,
                gXeRecvHeader.sStation,
                System.StrUtils.Rightstr(gXeRecvHeader.sTelNum, 4),
                gXeRecvHeader.sSndTime,
                gXeRecvHeader.sBrNo,
                Socket.LocalAddress,
                GT_USERIF.IP]), HEARTLOGPATHFILE);

//**************************************************************
//CID서버를 종료할때,,  상담원 클라이언트에 종료 전문 보내고, 
//	상담원 클라이언트는 종료전문 받고, 4초 후 부터 2초 단위로 20회 시도하고
//																								 5초 단위로 20회 시도하고
//							그래도 접속 안되면 시도 종료처리
//*****************************************************************			

		if gXeRecvHeader.sType = 'T' then  //서버에서 종료 메세지 받음
		begin
			giCIDCheckCnt := 0;
			xeCID.Tag := 0; // 데이터 받았다는 확인을 한다.
			tmr_xeCID_check.Tag := 99; //여기서 멈췄다는 표시
			tmr_xeCID_check.Enabled := False;
			xeCID.Active := False;	 //즉시 접속종료	

			tmr_xeCID_New1.Enabled := True; //4초 후 다시실행
			Exit;
		end else
		begin
			if (tmr_xeCID_check.Tag = 99) and (tmr_xeCID_check.Enabled = False) then
			begin
				tmr_xeCID_check.Tag := 0;
				tmr_xeCID_check.Enabled := True;
				iXeCidHeartBeat := 0;
				giCIDCheckCnt := 0;
			end;
		end;

		if xeCID.Tag = 77 then
		begin
			xeCID.Tag := 0; // 데이터 받았다는 확인을 한다.
			Exit;
		end;

		if gsCIDMessage = '' then Exit;
    iXeCidHeartBeat := 0;

		gsCIDMessage := StringReplace(gsCIDMessage, #13, '', [rfReplaceAll]);

		// 오른쪽에서부터 자르는 부분은 TCP자료가 밀려서 한꺼번에 들어올수 있기때문에 맨 마지막 CID자료만 추출하기 위해서
		gsCIDMessage := System.StrUtils.RightStr(gsCIDMessage, 63);
		if ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'J610')) or (GT_USERIF.BR = 'B100') or
			 ((GS_PRJ_AREA = 'O') and (GT_USERIF.CT = 'H227')) then 
		begin
			Log('XeCidRead RightStr', LOGDATAPATHFILE);
		end;

    if (GT_OCX = 'SSIO') Or (GT_OCX = 'SSIT') Or (GT_OCX = 'SI415') then
    begin
  		SetDebugeWrite_CID('CXERead[B]/[N] '+GT_OCX+' Exit : [' + gsCIDMsgFront + ']/[' + gsCIDMessage + ']' );
      Exit;
    end;

		// CID 전문 받은걸 처리한다. ------------------------------------------------
		if bFirst then
		begin
			try
				tmr_JoinView.Tag := 100;
				tmr_JoinView.Enabled := True;
				giCIDCheckCnt := 0;
      except on E: Exception do
        Assert(False, E.Message);
      end;
    end;
	except on E: Exception do
		begin
			Log('XeCidRead : ' + gsCIDMessage, LOGDATAPATHFILE);
			Assert(False, E.Message);
		end;
  end;
end;

procedure TFrm_Main.XmlDataFileRead;
begin
  SetDebugeWrite('Main.XmlDataFileRead');
  try
    // ==================================== 2011-10-16
    //  XML전문 Protocal Unit 사용 및 생성.
    gfnc_XML_LOCAL_MAKE;
    gfnc_XML_LOCAL_MAKE1;
    gfnc_XML_LOCAL_MAKE2;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.procMainMenuCreateActive(iTag : Integer);
Var i, iCnt, iUse, hMsg : Integer;
    LeftTreePtr : PTreeRec;
begin
  SetDebugeWrite('Main.procMainMenuCreateActive');
  try
    case iTag of
    100 :   // 메인
      begin
        BtnFix.Tag := 1;
        BtnFix.Down := False;
				BtnFixClick(BtnFix);
        cxPageControl1.ActivePageIndex := 0;

        mw_login;
      end;
    200 :   // 접수
      begin
        btnMainMenu1.Enabled := False;
        Screen.Cursor := crHourGlass;
        iCnt := 0;
        try
          if pnlJON01Start.Tag = 0 then
          begin
            tmrCreate.Enabled := True;
            pnlJON01Start.Tag := 1;
            pnlJON01Start.Visible := False;
          end;

          for i := 0 to JON03_MAX_CNT - 1 do
          begin
            if ( JON03MNG[i].Use = True ) And ( Not Frm_Jon03[i].pJON03Dock.bUNDock ) then
            begin
              Frm_Jon03[i].tmr_dis.Enabled := False;
              Frm_Jon03[i].PnlAuto.Visible := False;
            end;
          end;

          for i := 0 to JON03_MAX_CNT - 1 do
          begin
            if JON03MNG[i].Use = False then
            begin
              if JON03MNG[i].CreateYN = False then
              begin
                Frm_Jon03[i] := TFrm_JON03.Create(nil); // 폼 객체를 생성한다.
                Frm_JON03[i].proc_UserPer;

                JON03MNG[i].CreateYN := True;
                if Not Assigned(Frm_JON52[i]) then
                begin
                  Frm_JON52[i] := TFrm_JON52.Create(Nil);
                  Frm_JON52[i].BorderStyle := bsNone;
                  Frm_JON52[i].Parent := Frm_Jon03[i].pnlMap;
                  Frm_JON52[i].Align := alClient;

                  Frm_JON52[i].pnlRight.Align := alTop;
                  Frm_JON52[i].pnlRight.Height := 25;

                  Frm_JON52[i].shp_Mod1.Left := 17;
                  Frm_JON52[i].shp_Mod1.Top := 2;

                  Frm_JON52[i].shp_Mod2.Left := Frm_JON52[i].shp_Mod1.Left + 90;
                  Frm_JON52[i].shp_Mod2.Top  := Frm_JON52[i].shp_Mod1.Top;

                  Frm_JON52[i].shp_Mod3.Left := Frm_JON52[i].shp_Mod2.Left + 90;
                  Frm_JON52[i].shp_Mod3.Top  := Frm_JON52[i].shp_Mod1.Top;

                  Frm_JON52[i].shp_Mod4.Left := Frm_JON52[i].shp_Mod3.Left + 90;
                  Frm_JON52[i].shp_Mod4.Top  := Frm_JON52[i].shp_Mod1.Top;

                  Frm_JON52[i].btn_Mod1.Left := 42;
                  Frm_JON52[i].btn_Mod1.Top := 2;

                  Frm_JON52[i].btn_Mod2.Left := Frm_JON52[i].btn_Mod1.Left + 90;
                  Frm_JON52[i].btn_Mod2.Top  := Frm_JON52[i].btn_Mod1.Top;

                  Frm_JON52[i].btn_Mod3.Left := Frm_JON52[i].btn_Mod2.Left + 90;
                  Frm_JON52[i].btn_Mod3.Top  := Frm_JON52[i].btn_Mod1.Top;

                  Frm_JON52[i].btn_Mod4.Left := Frm_JON52[i].btn_Mod3.Left + 90;
                  Frm_JON52[i].btn_Mod4.Top  := Frm_JON52[i].btn_Mod1.Top;

                  Frm_JON52[i].cbRoute.Left := 365;
                  Frm_JON52[i].cbRoute.Top := 3;

                  Frm_JON52[i].chkCallMapPopup.Visible := False;

                  Frm_JON52[i].cxLabel1.Left := 439;
                  Frm_JON52[i].cxLabel1.Top := 3;

                  fSetFont(Frm_JON52[i], GS_FONTNAME);
                  fSetSkin(Frm_JON52[i]);
                  Frm_JON52[i].Show;
                end;
              end;
              iUse := i;
              Break;
            end;
            Inc(ICnt);
          end;

          if iCnt > JON03_MAX_CNT-1 then
          begin
            hMsg := FindWindow('TMessageForm', 'CMNAGTXE');
            if hMsg <> 0 then
              SendMessage(hMsg, WM_CLOSE, 0, 0);

            GMessagebox('접수현황창 최대 생성수를 초과하였습니다. 접수현황창을 닫고 사용하세요~ @_@', CDMSE);
            Exit;
          end;

          JON03MNG[iUse].Use := True;
          JON03MNG[iUse].Tag := iUse;
//					if GS_PRJ_AREA = 'O' then Frm_Jon03[iUse].btn_KakaoList.Visible := False; //지방권은 숨김
					if Not GT_KAKAOUse then Frm_Jon03[iUse].btn_KakaoList.Visible := False
					//본사관리자만 허용
					else if (GT_KAKAOUse) then //신성현차장요청 20190624 KHS
					begin
						if (GS_PRJ_AREA = 'O') and (StrToIntDef(GT_USERIF.LV, 0) <> 60) then 
							Frm_Jon03[iUse].btn_KakaoList.Visible := False;
					end;
					Frm_JON03[iUse].Caption := '접수-' + Trim(advTPTPna1.Hint);
          Frm_JON03[iUse].Hint    := '접수-' + Trim(advTPTPna1.Hint);
          Frm_JON03[iUse].Tag := iUse;
          Frm_JON03[iUse].Align := alNone;
          if Not Assigned(Frm_Main.Frm_JON01N[2]) then Frm_JON03[iUse].rb_Accept.Enabled := False;
          Frm_JON03[iUse].Height := 1024;
          Frm_JON03[iUse].Width  := 1280;
          JON03MNG[iUse].Tag := iUse;
          JON03MNG[iUse].Caption := '접수 ' + IntToStr(iUse);
          try
            LeftTreePtr := Tree_List.FocusedNode.Data;
            JON03MNG[iUse].HdNo  := LeftTreePtr.HDCode;
            JON03MNG[iUse].BrNo  := LeftTreePtr.BRCode;
            JON03MNG[iUse].Index := LeftTreePtr.FIndex;
          Except
            JON03MNG[iUse].Index := 0;
          end;

					Frm_Jon03[iUse].lblSosokName.Caption := GetSosokInfo; //카카오리스트 소속명 

          fSetFont(Frm_JON03[iUse], GS_FONTNAME);
          fSetSkin(Frm_JON03[iUse]);

          GI_JON03_LastFromIdx := iUse; // 마지막 로드된 접수창의 index 번호 저장.
          Frm_JON03[iUse].ManualDock(cxPageControl1, nil, alNone);
          Frm_JON03[iUse].Show;

          cxPageControl1.ActivePageIndex := cxPageControl1.PageCount - 1;
          cxPageControl1.ActivePage.Name  := 'cxTabMain' + IntToStr(iUse);
          cxPageControl1.ActivePage.Caption := '접수-' + Trim(advTPTPna1.Hint);
          cxPageControl1.ActivePage.Hint    := '접수-' + Trim(advTPTPna1.Hint);
          cxPageControl1.ActivePage.Tag     := iUse;

          cxPageControl1.ActivePage.SetFocus;
          iLastActivePage := cxPageControl1.ActivePageIndex;

          if GB_ORDERACTIVEBMENU_USE then
          begin
						BtnFix.Down := GS_EnvFile.ReadBool('UserGongji', 'BMenuOpen', False);
						BtnFixClick(BtnFix);

						if TCK_USER_PER.BTM_CALLMNG = '1' then
						begin
              // 자동실행중이면 패스
							if ( Frm_JON54.btnCallListAutoSearch.Tag = 0 ) And
                 ( Not Frm_JON54.btnCallListAutoSearch.Down ) then
              begin
                if ( GS_JON54AutoRunNew ) then
                begin
                  Frm_JON54.btnCallListAutoSearch.Enabled := True;
                  Frm_JON54.btnCallListAutoSearch.Down := True;
                  Frm_JON54.Shape4.Brush.Color := $0073D8FF;
                  Frm_JON54.btnCallListAutoSearch.Caption := '조회종료';
                  Frm_JON54.btnCallingList.Click;
                end	else
                begin
                  Frm_JON54.btnCallListAutoSearch.Enabled := True;
                  Frm_JON54.btnCallListAutoSearch.Caption := '조회시작';
                  Frm_JON54.btnCallListAutoSearch.Down := False;
                  if GB_DARKMODE then Frm_JON54.Shape4.Brush.Color := $00333333
                                 else Frm_JON54.Shape4.Brush.Color := clWhite;
                end;
              end;
						end;
					end else
					begin
						BtnFix.Down := True;
						BtnFixClick(BtnFix);
					end;

          if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
          begin
            Frm_JON03[iUse].cb_branch_Name2.Properties.Items.Clear;
            Frm_JON03[iUse].cb_branch_Name2.Properties.Items.Assign(scb_FamilyBrName);
            Frm_JON03[iUse].cb_branch_Name2.ItemIndex := 0;
            Frm_JON03[iUse].InitBubInWindow(LeftTreePtr.HDCode);
      		end else
      		begin
            // 접수 검색의 즉시 배차 지사 변경
            Frm_JON03[iUse].cb_branch_Name2.Properties.Items.Clear;
            Frm_JON03[iUse].cb_branch_Name2.Properties.Items.Assign(scb_BranchName);
            Frm_JON03[iUse].cb_branch_Name2.ItemIndex := 0;
            Frm_JON03[iUse].InitBubInWindow(LeftTreePtr.HDCode);
      		end;

          if ( Assigned(Frm_Main.Frm_JON01N[2]) ) And ( TCK_USER_PER.JON_Order = '1' ) then Frm_JON03[iUse].rb_Accept.Enabled := True;

          if ( IsFamily ) Or ( GS_BRLISTVIEWMODE ) then
          begin
            Tree_List.Items[0].Enabled := True;
            Tree_List.Items[1].Enabled := True;
          end;
        finally
          Screen.Cursor := crDefault;
          btnMainMenu1.Enabled := True;
        end;
      end;
    301 :   // 기사현황관리
      begin
        Screen.Cursor := crHourGlass;
        iCnt := 0;
        try
          for i := 0 to 4 do
          begin
            if WORA1MNG[i].Use = False then
            begin
              if WORA1MNG[i].CreateYN = False then
              begin
                Frm_WORA1[i] := TFrm_WORA1.Create(nil); // 폼 객체를 생성한다.
                WORA1MNG[i].CreateYN := True;
              end;
              iUse := i;
              Break;
            end;
            Inc(ICnt);
          end;

          if iCnt > 4 then
          begin
            hMsg := FindWindow('TMessageForm', 'CMNAGTXE');
            if hMsg <> 0 then
              SendMessage(hMsg, WM_CLOSE, 0, 0);

            GMessagebox('기사현황관리창 최대 생성수를 초과하였습니다. 기사현황관리창을 닫고 사용하세요~ @_@', CDMSE);
            Exit;
          end;

          Frm_WORA1[iUse].Caption := '기사현황관리['+IntTostr(iUse+1)+']';
          Frm_WORA1[iUse].Hint    := '기사현황관리['+IntTostr(iUse+1)+']';
          Frm_WORA1[iUse].Tag := 21 + iUse;
          Frm_WORA1[iUse].Align := alNone;
          Frm_WORA1[iUse].Height := 1024;
          Frm_WORA1[iUse].Width  := 1280;

          WORA1MNG[iUse].Use := True;
          WORA1MNG[iUse].Tag := iUse;
          WORA1MNG[iUse].Caption := '기사현황관리['+IntTostr(iUse+1)+']';
          try
            LeftTreePtr := Tree_List.FocusedNode.Data;
            WORA1MNG[iUse].HdNo  := LeftTreePtr.HDCode;
            WORA1MNG[iUse].BrNo  := LeftTreePtr.BRCode;
            WORA1MNG[iUse].Index := LeftTreePtr.FIndex;
          Except
            WORA1MNG[iUse].Index := 0;
          end;

          GI_WORA1_LastFromIdx := iUse; // 마지막 로드된 접수창의 index 번호 저장.
          Frm_WORA1[iUse].ManualDock(cxPageControl1, nil, alNone);
          Frm_WORA1[iUse].Show;
          fSetFont(Frm_WORA1[iUse], GS_FONTNAME);

          cxPageControl1.ActivePageIndex := cxPageControl1.PageCount - 1;
          cxPageControl1.ActivePage.Name  := 'cxTabMain' + IntToStr(iUse);
          cxPageControl1.ActivePage.Caption := '기사현황관리['+IntTostr(iUse+1)+']';
          cxPageControl1.ActivePage.Hint    := '기사현황관리['+IntTostr(iUse+1)+']';
          cxPageControl1.ActivePage.Tag     := 21 + iUse;

          cxPageControl1.ActivePage.SetFocus;
          iLastActivePage := cxPageControl1.ActivePageIndex;
        finally
          Screen.Cursor := crDefault;
        end;

       if Assigned(Frm_JON51) then
         if TCK_USER_PER.BTM_MENUSCH = '1' then Frm_JON51.Menu_Use_Mark('ADD', iTag);
      end;
    end;

    if (btnWide.Hint <> '') then
    begin
      cxPageControl1.Pages[iLastActivePage].TabVisible := False;
      cxPageControl1.ActivePageIndex := iLastActivePage;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.procMenuCreateActive(iTag : Integer; sTitle : String);
Var
  sfile, msg : string;
  IE: variant;
  bRet: DWORD;
  TabSheet : TcxTabSheet;
  i, iSel, iRTag : Integer;
  bOpen, bSheet : Boolean;
	sParam : AnsiString;
	sMsg, sTmp : string;
begin
	SetDebugeWrite('Main.procMenuCreateActive');
  bOpen := True;
  bSheet := False;
  try
    if (iTag = 302) Or (iTag = 303) Or (iTag = 304) Or (iTag = 305) Or
       (iTag = 306) Or (iTag = 307) Or (iTag = 308) Or (iTag = 309) Or (iTag = 312) then
    begin
      iRTag := 300;
    end else
    if (iTag = 401) Or (iTag = 402) Or (iTag = 403) Or (iTag = 404) Or (iTag = 405) Or
       (iTag = 406) Or (iTag = 407) Or (iTag = 408) Or (iTag = 409) Or (iTag = 410) Or
       (iTag = 411) Or (iTag = 413) then
    begin
      iRTag := 400;
    end else
    if (iTag = 501) Or (iTag = 502) Or (iTag = 503) Or (iTag = 504) Or (iTag = 505) Or
       (iTag = 506) or (iTag = 507) then
    begin
      iRTag := 500;
    end else
    if (iTag = 601) Or (iTag = 602) Or (iTag = 603) Or (iTag = 604) Or (iTag = 605) Or
       (iTag = 606) Or (iTag = 607) Or (iTag = 608) Or (iTag = 609) Or (iTag = 621) then
    begin
      iRTag := 600;
    end else
    if (iTag = 610) Or (iTag = 611) Or (iTag = 612) Or (iTag = 613) Or (iTag = 614) Or
       (iTag = 615) Or (iTag = 616) Or (iTag = 617) Or (iTag = 619) Or (iTag = 620) then
    begin
      iRTag := 650;
    end else
    if (iTag = 701) Or (iTag = 702) Or (iTag = 703) Or (iTag = 704) Or (iTag = 705) Or
       (iTag = 706) Or (iTag = 707) Or (iTag = 708) Or (iTag = 709) Or (iTag = 710) Or
       (iTag = 711) Or (iTag = 712) Or (iTag = 713) Or (iTag = 714) Or (iTag = 715) then
    begin
      iRTag := 700;
    end else
    if (iTag = 801) Or (iTag = 802) Or (iTag = 803) Or (iTag = 804) Or (iTag = 805) then
    begin
      iRTag := 800;
    end else
		if (iTag = 811) Or (iTag = 812) Or (iTag = 813) Or (iTag = 814) Or (iTag = 815) Or
			 (iTag = 816) Or (iTag = 817) then
		begin
			iRTag := 810;
		end else
		if (iTag = 821) Or (iTag = 822) Or (iTag = 823) then
		begin
			iRTag := 820;
		end else
		if (iTag = 831) Or (iTag = 832) Or (iTag = 833) then
		begin
			iRTag := 830;
		end else
		if (iTag = 841) Or (iTag = 842) Or (iTag = 843)  Or (iTag = 844) then
		begin
			iRTag := 840;
		end else
		if (iTag = 901) Or (iTag = 902) Or (iTag = 903) Or (iTag = 904) Or (iTag = 905) Or
       (iTag = 906) Or (iTag = 907) Or (iTag = 908) Or (iTag = 909) Or (iTag = 910) then
    begin
      iRTag := 900;
    end else
		if (iTag = 1001) Or (iTag = 1002) Or (iTag = 1003) Or (iTag = 1004) Or (iTag = 1005) then
    begin
      iRTag := 1000;
		end else
    if (iTag = 1403) Or (iTag = 1404) Or (iTag = 1405) Or (iTag = 1406) Or (iTag = 1407) then
    begin
      iRTag := 1400;
    end else
		if (iTag = 1601) Or (iTag = 1602) Or (iTag = 1603) Or (iTag = 1604) Or (iTag = 1605) Or (iTag = 1606) then
    begin
			iRTag := 1600;
		end else
		if (iTag = 1701) Or (iTag = 1702) Or (iTag = 1703) Or (iTag = 1704) Or (iTag = 1705) Or
       (iTag = 1706) or (iTag = 1707) Or (iTag = 1708) Or (iTag = 1709) Or (iTag = 1710) Or
			 (iTag = 1711) Or (iTag = 1712) Or (iTag = 1713) Or (iTag = 1714) Or (iTag = 1715) Or (iTag = 1716) then
		begin
			iRTag := 1700;
		end else
		begin
      iRTag := iTag;
    end;

    for iSel := 0 to cxPageControl1.PageCount - 1 do
    begin
      if cxPageControl1.Pages[iSel].Tag = iRTag then
      begin
        bOpen := False;
        Break;
      end;
    end;

    if cxPageControl2.ActivePageIndex <> 7 then  // 메뉴 찾기 페이지는 예외 처리
    begin
      if GB_ORDERACTIVEBMENU_USE then
      begin
        BtnFix.Tag := 1;
        BtnFix.Down := False;
        BtnFixClick(BtnFix);
      end;

      for i := 0 to JON03_MAX_CNT - 1 do
      begin
        if ( JON03MNG[i].Use = True ) And ( Not Frm_Jon03[i].pJON03Dock.bUNDock ) then
        begin
          Frm_Jon03[i].tmr_dis.Enabled := False;
          Frm_Jon03[i].PnlAuto.Visible := False;
        end;
      end;

			Frm_JON54.trm_CallList.Enabled := False;
    end;

  	if ( ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) And ( mLEFT_SectionIndex = 0 ) ) then     // 20140629 LYB
  	begin
      if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag > 20 then
        SetTree_ListItem( mLEFT_HdCd, mLEFT_BrCd, mLEFT_Idx);
    end;

    // cxPageControl에 표시 되는 메뉴만 처리
    Case iTag of
      302, 303, 304, 305, 306, 307, 308, 309, 312,                                                    // 기사 관련 메뉴
      401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413,                                // 고객 관련 메뉴
      501, 502, 503, 504, 505, 506, 507,                                                              // 법인 관련 메뉴
      601, 602, 603, 604, 605, 606, 607, 608, 609, 621,                                               // 정산 관련 메뉴A
      610, 611, 612, 613, 614, 615, 616, 617, 619, 620,                                               // 정산 관련 메뉴B
      701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715,                      // 통계 관련 메뉴
      801, 802, 803, 804, 805,                                                                        // 회사 관련 메뉴
			811, 812, 813, 814, 815, 816, 817,                                                              // 고객앱 관련 메뉴
			821, 822, 823,                                                                                  // AI관리 배차지연콜
			831, 832, 833,                                                                                  // AI관리 해피콜
			841, 842, 843, 844,                                                                             // AI관리 인바운드
			901, 902, 903, 904, 905, 906, 907, 908, 909, 910,                                               // 직원 관련 메뉴
			1001, 1002, 1003, 1004, 1005,                                                                   // 광고 관련 메뉴
			1171,                                                                                           // 셔틀통계 메뉴
			1403, 1404, 1405, 1406, 1407,                                                                   // 설정 관련 메뉴
			1601, 1602, 1603, 1604, 1605, 1606,                                                             // 콜벨 관련 메뉴
			1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715 :// PBX 관련 메뉴
			begin
        bSheet := True;
        if bOpen then
        begin
          TabSheet := TcxTabSheet.Create(cxPageControl1);
          if (btnWide.Hint <> '') then
            TabSheet.TabVisible := False;

          if (iTag = 302) Or (iTag = 303) Or (iTag = 304) Or (iTag = 305) Or
             (iTag = 306) Or (iTag = 307) Or (iTag = 308) Or (iTag = 309) Or (iTag = 312) then
          begin
            TabSheet.Caption := '기사관리';
          end else
          if (iTag = 401) Or (iTag = 402) Or (iTag = 403) Or (iTag = 404) Or (iTag = 405) Or
             (iTag = 406) Or (iTag = 407) Or (iTag = 408) Or (iTag = 409) Or (iTag = 410) Or
             (iTag = 411) Or (iTag = 413) then
          begin
            TabSheet.Caption := '고객관리';
          end else
          if (iTag = 501) Or (iTag = 502) Or (iTag = 503) Or (iTag = 504) Or
             (iTag = 505) Or (iTag = 506) Or (iTag = 507) then
          begin
            TabSheet.Caption := '법인관리';
          end else
          if (iTag = 601) Or (iTag = 602) Or (iTag = 603) Or (iTag = 604) Or (iTag = 605) Or
             (iTag = 606) Or (iTag = 607) Or (iTag = 608) Or (iTag = 609) Or (iTag = 621) then
          begin
            TabSheet.Caption := '정산관리A';
          end else
          if (iTag = 610) Or (iTag = 611) Or (iTag = 612) Or (iTag = 613) Or (iTag = 614) Or
             (iTag = 615) Or (iTag = 616) Or (iTag = 617) Or (iTag = 619) Or (iTag = 620) then
          begin
            TabSheet.Caption := '정산관리B';
          end else
          if (iTag = 701) Or (iTag = 702) Or (iTag = 703) Or (iTag = 704) Or (iTag = 705) Or
             (iTag = 706) Or (iTag = 707) Or (iTag = 708) Or (iTag = 709) Or (iTag = 710) Or
             (iTag = 711) Or (iTag = 712) Or (iTag = 713) Or (iTag = 715) then
          begin
            TabSheet.Caption := '통계관리';
          end else
          if (iTag = 801) Or (iTag = 802) Or (iTag = 803) Or (iTag = 804) Or (iTag = 805) then
          begin
            TabSheet.Caption := '회사관리';
					end else
					if (iTag = 811) Or (iTag = 812) Or (iTag = 813) Or (iTag = 814) Or (iTag = 815) Or
						 (iTag = 816) Or (iTag = 817) then
					begin
						TabSheet.Caption := '고객앱관리';
					end else
					if (iTag = 821) Or (iTag = 822) Or (iTag = 823) then
					begin
						TabSheet.Caption := 'AI관리-배차지연콜';
					end else
					if (iTag = 831) Or (iTag = 832) Or (iTag = 833) then
					begin
						TabSheet.Caption := 'AI관리-해피콜';
					end else
					if (iTag = 841) Or (iTag = 842) Or (iTag = 843) Or (iTag = 844) then
					begin
						TabSheet.Caption := 'AI관리-인바운드';
					end else
					if (iTag = 901) Or (iTag = 902) Or (iTag = 903) Or (iTag = 904) Or (iTag = 905) Or
             (iTag = 906) Or (iTag = 907) Or (iTag = 908) Or (iTag = 909) Or (iTag = 910) then
          begin
            TabSheet.Caption := '직원관리';
          end else
					if (iTag = 1001) Or (iTag = 1002) Or (iTag = 1003) Or (iTag = 1004) Or (iTag = 1005) then
					begin
						TabSheet.Caption := '광고관리';
					end else
					if (iTag = 1171) then
					begin
						TabSheet.Caption := '셔틀통계';
					end else
					if (iTag = 1403) Or (iTag = 1404) Or (iTag = 1405) Or (iTag = 1406) Or (iTag = 1407) then
					begin
						TabSheet.Caption := '설정관리';
					end else
					if (iTag = 1601) Or (iTag = 1602) Or (iTag = 1603) Or (iTag = 1604) Or (iTag = 1605) Or (iTag = 1606) then
					begin
						TabSheet.Caption := '업소(콜벨)관리';
					end else
					if (iTag = 1701) Or (iTag = 1702) Or (iTag = 1703) Or (iTag = 1704) Or (iTag = 1705) Or
						 (iTag = 1706) or (iTag = 1707) Or (iTag = 1708) Or (iTag = 1709) Or (iTag = 1710) Or
						 (iTag = 1711) Or (iTag = 1712) Or (iTag = 1713) Or (iTag = 1714) Or (iTag = 1715) then
					begin
						TabSheet.Caption := 'IPCC관리';
					end else
					begin
            TabSheet.Caption := sTitle;
					end;
          TabSheet.Tag     := iRTag;
          TabSheet.PageControl := cxPageControl1;
          TabSheet.Hint    := fGetHdBrGubunInfo;
				end else
        begin
          if cxPageControl1.Pages[iSel].Hint <> fGetHdBrGubunInfo then
          begin
            proc_FormCodeChange(iRTag, iTag);
            cxPageControl1.Pages[iSel].Hint := fGetHdBrGubunInfo;
          end;

          if iTag = 302 then Frm_WOR.cxPageControl1.ActivePageIndex := 0 else     // 기사캐쉬관리
          if iTag = 303 then Frm_WOR.cxPageControl1.ActivePageIndex := 1 else     // 기사배차현황
          if iTag = 304 then Frm_WOR.cxPageControl1.ActivePageIndex := 2 else     // 기사공유콜배차제한
          if iTag = 305 then Frm_WOR.cxPageControl1.ActivePageIndex := 3 else     // 기사블랙리스트
          if iTag = 306 then Frm_WOR.cxPageControl1.ActivePageIndex := 4 else     // 심야배차제한현황
					if iTag = 307 then Frm_WOR.cxPageControl1.ActivePageIndex := 5 else     // 기사출근표
					if iTag = 308 then Frm_WOR.cxPageControl1.ActivePageIndex := 6 else     // 우선배차기사현황
					if iTag = 309 then Frm_WOR.cxPageControl1.ActivePageIndex := 7 else     // 미출근현황
					if iTag = 312 then Frm_WOR.cxPageControl1.ActivePageIndex := 8;         // 기사상태변경조회

          if iTag = 401 then Frm_CUT.cxPageControl1.ActivePageIndex := 0 else     // 고객관리
          if iTag = 402 then Frm_CUT.cxPageControl1.ActivePageIndex := 1 else     // 일반검색
          if iTag = 403 then Frm_CUT.cxPageControl1.ActivePageIndex := 2 else     // 고급검색
          if iTag = 404 then Frm_CUT.cxPageControl1.ActivePageIndex := 3 else     // 상세검색
          if iTag = 405 then Frm_CUT.cxPageControl1.ActivePageIndex := 4 else     // 안심번호관리
          if iTag = 406 then Frm_CUT.cxPageControl1.ActivePageIndex := 5 else     // 휴먼고객
          if iTag = 407 then Frm_CUT.cxPageControl1.ActivePageIndex := 6 else     // 고객등급관리
          if iTag = 408 then Frm_CUT.cxPageControl1.ActivePageIndex := 7 else     // 마일리지설정
          if iTag = 409 then Frm_CUT.cxPageControl1.ActivePageIndex := 8 else     // 마일리지현황(고객별)
          if iTag = 410 then Frm_CUT.cxPageControl1.ActivePageIndex := 9 else     // 마일리지상세(적립+지급)
          if iTag = 411 then Frm_CUT.cxPageControl1.ActivePageIndex := 10 else    // OK캐쉬백적립현황
          if iTag = 413 then Frm_CUT.cxPageControl1.ActivePageIndex := 11 else    // 추천인관리(앱)

          if iTag = 501 then Frm_CUT1.cxPageControl1.ActivePageIndex := 0 else    // 법인관리
          if iTag = 502 then Frm_CUT1.cxPageControl1.ActivePageIndex := 1 else    // 법인이용내역
          if iTag = 503 then Frm_CUT1.cxPageControl1.ActivePageIndex := 2 else    // 법인일일정산
          if iTag = 504 then Frm_CUT1.cxPageControl1.ActivePageIndex := 3 else    // 법인인증
					if iTag = 505 then Frm_CUT1.cxPageControl1.ActivePageIndex := 4 else    // 기사원천징수현황
					if iTag = 506 then Frm_CUT1.cxPageControl1.ActivePageIndex := 5 else    // 법인월정산
					if iTag = 507 then Frm_CUT1.cxPageControl1.ActivePageIndex := 6;        // 일마감-엑셀출력

          if iTag = 601 then Frm_ACC.cxPageControl1.ActivePageIndex := 0 else     // 지사캐쉬내역
          if iTag = 602 then Frm_ACC.cxPageControl1.ActivePageIndex := 1 else     // 통장식로그
          if iTag = 603 then Frm_ACC.cxPageControl1.ActivePageIndex := 2 else     // 오더정산내역
          if iTag = 604 then Frm_ACC.cxPageControl1.ActivePageIndex := 3 else     // 지사충전내역
          if iTag = 605 then Frm_ACC.cxPageControl1.ActivePageIndex := 4 else     // 기사충전내역
          if iTag = 606 then Frm_ACC.cxPageControl1.ActivePageIndex := 5 else     // 기사사용료
          if iTag = 607 then Frm_ACC.cxPageControl1.ActivePageIndex := 6 else     // 공유콜정산
          if iTag = 608 then Frm_ACC.cxPageControl1.ActivePageIndex := 7 else     // 캐쉬이동
          if iTag = 609 then Frm_ACC.cxPageControl1.ActivePageIndex := 8 else     // SMS캐쉬충전내역
          if iTag = 621 then Frm_ACC.cxPageControl1.ActivePageIndex := 9;         // SMS캐쉬일괄충전내역

          if iTag = 610 then Frm_ACC1.cxPageControl1.ActivePageIndex := 0 else    // 수익금리스트
          if iTag = 611 then Frm_ACC1.cxPageControl1.ActivePageIndex := 1 else    // 수익금계산
          if iTag = 612 then Frm_ACC1.cxPageControl1.ActivePageIndex := 2 else    // 콜운행정산
          if iTag = 613 then Frm_ACC1.cxPageControl1.ActivePageIndex := 3 else    // 기사수수료현황
          if iTag = 614 then Frm_ACC1.cxPageControl1.ActivePageIndex := 4 else    // 콜대행수수료
          if iTag = 615 then Frm_ACC1.cxPageControl1.ActivePageIndex := 5 else    // 쿠폰승인현황
          if iTag = 616 then Frm_ACC1.cxPageControl1.ActivePageIndex := 6 else    // 쿠폰사용현황
					if iTag = 617 then Frm_ACC1.cxPageControl1.ActivePageIndex := 7 else    // 카드사용현황
					if iTag = 619 then Frm_ACC1.cxPageControl1.ActivePageIndex := 8 else    // 자체쿠폰등록현황
					if iTag = 620 then Frm_ACC1.cxPageControl1.ActivePageIndex := 9;        // 자체쿠폰사용현황

          if iTag = 701 then Frm_STT.cxPageControl1.ActivePageIndex := 0  else    // 기사현황관리
          if iTag = 702 then Frm_STT.cxPageControl1.ActivePageIndex := 1  else    // 기사별 통계 관리
          if iTag = 703 then Frm_STT.cxPageControl1.ActivePageIndex := 2  else    // 고객별 통계 관리
          if iTag = 704 then Frm_STT.cxPageControl1.ActivePageIndex := 3  else    // 자사별 통계 관리
          if iTag = 715 then Frm_STT.cxPageControl1.ActivePageIndex := 4  else    // 지사별 콜정산 통계
          if iTag = 705 then Frm_STT.cxPageControl1.ActivePageIndex := 5  else    // 공유별 통계 관리
          if iTag = 706 then Frm_STT.cxPageControl1.ActivePageIndex := 6  else    // 지역별 통계 관리
          if iTag = 707 then Frm_STT.cxPageControl1.ActivePageIndex := 7  else    // 신규고객 통계관리
          if iTag = 708 then Frm_STT.cxPageControl1.ActivePageIndex := 8  else    // 시간대별고객 통계관리
          if iTag = 709 then Frm_STT.cxPageControl1.ActivePageIndex := 9  else    // 일자별별고객 통계관리
          if iTag = 710 then Frm_STT.cxPageControl1.ActivePageIndex := 10 else    // 신규콜수 통계관리
          if iTag = 711 then Frm_STT.cxPageControl1.ActivePageIndex := 11 else    // 취소콜 통계관리
          if iTag = 712 then Frm_STT.cxPageControl1.ActivePageIndex := 12 else    // 시간대별출도지역통계
          if iTag = 713 then Frm_STT.cxPageControl1.ActivePageIndex := 13 else    // 오더요금별통계
          if iTag = 714 then Frm_STT.cxPageControl1.ActivePageIndex := 15;        // 오더별평가조회


          if iTag = 801 then Frm_CMP.cxPageControl1.ActivePageIndex := 0 else     // 본사관리
          if iTag = 802 then Frm_CMP.cxPageControl1.ActivePageIndex := 1 else     // 지사관리
          if iTag = 803 then Frm_CMP.cxPageControl1.ActivePageIndex := 2 else     // 자동SMS설정
          if iTag = 804 then Frm_CMP.cxPageControl1.ActivePageIndex := 3 else     // 자율수수료제
          if iTag = 805 then Frm_CMP.cxPageControl1.ActivePageIndex := 4;         // 오토콜설정

          if iTag = 811 then Frm_APP.cxPageControl1.ActivePageIndex := 0 else     // 앱/스마트푸시설정
					if iTag = 812 then Frm_APP.cxPageControl1.ActivePageIndex := 1 else     // 앱게시물관리
          if iTag = 813 then Frm_APP.cxPageControl1.ActivePageIndex := 2 else     // 앱푸시관리
					if iTag = 814 then Frm_APP.cxPageControl1.ActivePageIndex := 3 else     // 콜마너SMS발송내역
          if iTag = 815 then Frm_APP.cxPageControl1.ActivePageIndex := 4 else     // 스마트PUSH발송내역
					if iTag = 816 then Frm_APP.cxPageControl1.ActivePageIndex := 5 else     // 콜마너SMS발송일별통계
          if iTag = 817 then Frm_APP.cxPageControl1.ActivePageIndex := 6;         // 스마트PUSH발송일별통계

					if iTag = 821 then Frm_AIC01.cxPageControl1.ActivePageIndex := 0 else   // AI-OB 배차지연콜 설정
					if iTag = 822 then Frm_AIC01.cxPageControl1.ActivePageIndex := 1 else   // AI-OB 배차지연콜 상세내역
					if iTag = 823 then Frm_AIC01.cxPageControl1.ActivePageIndex := 2;       // AI-OB 배차지연콜 일별현황
					if iTag = 831 then Frm_AIC11.cxPageControl1.ActivePageIndex := 0 else   // AI-OB 해피콜 설정
					if iTag = 832 then Frm_AIC11.cxPageControl1.ActivePageIndex := 1 else   // AI-OB 해피콜 상세내역
					if iTag = 833 then Frm_AIC11.cxPageControl1.ActivePageIndex := 2;       // AI-OB 해피콜 일별현황
					if iTag = 841 then Frm_AIC21.cxPageControl1.ActivePageIndex := 0 else   // AI-IB 설정
					if iTag = 842 then Frm_AIC21.cxPageControl1.ActivePageIndex := 1 else   // AI-IB 상세내역
					if iTag = 843 then Frm_AIC21.cxPageControl1.ActivePageIndex := 2 else   // AI-IB 일별현황
					if iTag = 844 then Frm_AIC21.cxPageControl1.ActivePageIndex := 3;       // AI-IB 접수통계

					if iTag = 901 then Frm_USR.cxPageControl1.ActivePageIndex := 0 else     // 직원관리
          if iTag = 902 then Frm_USR.cxPageControl1.ActivePageIndex := 1 else     // 권한설정
          if iTag = 903 then Frm_USR.cxPageControl1.ActivePageIndex := 2 else     // 직원인증현황
          if iTag = 904 then Frm_USR.cxPageControl1.ActivePageIndex := 3 else     // 직원인증(직원)
          if iTag = 905 then Frm_USR.cxPageControl1.ActivePageIndex := 4 else     // 직원인증(PC)
          if iTag = 906 then Frm_USR.cxPageControl1.ActivePageIndex := 5 else     // 엑셀다운현황
          if iTag = 907 then Frm_USR.cxPageControl1.ActivePageIndex := 6 else     // 직원콜현황
          if iTag = 908 then Frm_USR.cxPageControl1.ActivePageIndex := 7 else     // 시간별현황
          if iTag = 909 then Frm_USR.cxPageControl1.ActivePageIndex := 8 else     // 직원근태현황
          if iTag = 910 then Frm_USR.cxPageControl1.ActivePageIndex := 9;         // 패밀리권한설정

          if iTag = 1001 then Frm_SMS.cxPageControl1.ActivePageIndex := 0 else     // SMS발송
          if iTag = 1002 then Frm_SMS.cxPageControl1.ActivePageIndex := 1 else     // 대량파일SMS발송
          if iTag = 1003 then Frm_SMS.cxPageControl1.ActivePageIndex := 2 else     // 조회결과(상세)
          if iTag = 1004 then Frm_SMS.cxPageControl1.ActivePageIndex := 3 else     // 조회결과(일별)
					if iTag = 1005 then Frm_SMS.cxPageControl1.ActivePageIndex := 4;         // 수신거부관리

					if iTag = 1171 then Frm_STT_Shuttle.cxPageControl1.ActivePageIndex := 1;  // 셔틀통계

					if iTag = 1403 then Frm_SET.cxPageControl1.ActivePageIndex := 0 else     // 요금제편집
          if iTag = 1404 then Frm_SET.cxPageControl1.ActivePageIndex := 1 else     // 요금제설정[대표번호]
          if iTag = 1405 then Frm_SET.cxPageControl1.ActivePageIndex := 2 else     // 요금제설정[법인]
          if iTag = 1406 then Frm_SET.cxPageControl1.ActivePageIndex := 3 else     // 심야할증요금
					if iTag = 1407 then Frm_SET.cxPageControl1.ActivePageIndex := 4;         // CID대표번호DNIS관리

					if iTag = 1601 then Frm_CMP.cxPageControl1.ActivePageIndex := 1 else     // 지사관리
					if iTag = 1602 then Frm_BTN.cxPageControl1.ActivePageIndex := 0 else     // 영업사원관리
					if iTag = 1603 then Frm_BTN.cxPageControl1.ActivePageIndex := 1 else     // 업소관리
					if iTag = 1604 then Frm_BTN.cxPageControl1.ActivePageIndex := 2 else     // 지사정산
					if iTag = 1605 then Frm_BTN.cxPageControl1.ActivePageIndex := 3 else     // 영업사원정산
					if iTag = 1606 then Frm_BTN.cxPageControl1.ActivePageIndex := 4;         // 업소정산

					if iTag = 1701 then Frm_PBX.cxPageControl1.ActivePageIndex :=  0 else     // 통화현황
					if iTag = 1702 then Frm_PBX.cxPageControl1.ActivePageIndex :=  1 else     // 통화분석
					if iTag = 1703 then Frm_PBX.cxPageControl1.ActivePageIndex :=  2 else     // 인바운드설정
					if iTag = 1704 then Frm_PBX.cxPageControl1.ActivePageIndex :=  3 else     // 상담그룹설정
					if iTag = 1705 then Frm_PBX.cxPageControl1.ActivePageIndex :=  4 else     // 상담원설정
					if iTag = 1706 then Frm_PBX.cxPageControl1.ActivePageIndex :=  5 else     // 관리자설정
					if iTag = 1707 then Frm_PBX.cxPageControl1.ActivePageIndex :=  6 else     // 관리자권한설정
					if iTag = 1708 then Frm_PBX.cxPageControl1.ActivePageIndex :=  7 else     // 부가서비스설정
					if iTag = 1709 then Frm_PBX.cxPageControl1.ActivePageIndex :=  8 else     // 멘트설정
					if iTag = 1710 then Frm_PBX.cxPageControl1.ActivePageIndex :=  9 else     // 호분배권한설정
					if iTag = 1711 then Frm_PBX.cxPageControl1.ActivePageIndex := 10 else     // 호분배우선순위설정
					if iTag = 1712 then Frm_PBX.cxPageControl1.ActivePageIndex := 11 else     // 근무시간설정
					if iTag = 1713 then Frm_PBX.cxPageControl1.ActivePageIndex := 12 else     // 휴일설정
					if iTag = 1714 then Frm_PBX.cxPageControl1.ActivePageIndex := 13 else     // VIP고객관리
					if iTag = 1715 then Frm_PBX.cxPageControl1.ActivePageIndex := 14 ;        // 수신거부고객관리

					cxPageControl1.ActivePage := cxPageControl1.Pages[iSel];
					cxPageControl1.ActivePage.SetFocus;
          Exit;
        end;
      end;
    End;

    Case iTag of
    302, 303, 304, 305, 306, 307, 308, 309, 312  :   //기사관리
      begin
        if Not Assigned(Frm_WOR) then Frm_WOR := TFrm_WOR.Create(Nil);

        Frm_WOR.Parent := TabSheet;
        Frm_WOR.Align := alClient;
        Frm_WOR.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

        if iTag = 302 then Frm_WOR.cxPageControl1.ActivePageIndex := 0 else     // 기사캐쉬관리
        if iTag = 303 then Frm_WOR.cxPageControl1.ActivePageIndex := 1 else     // 기사배차현황
        if iTag = 304 then Frm_WOR.cxPageControl1.ActivePageIndex := 2 else     // 기사공유콜배차제한
        if iTag = 305 then Frm_WOR.cxPageControl1.ActivePageIndex := 3 else     // 기사블랙리스트
        if iTag = 306 then Frm_WOR.cxPageControl1.ActivePageIndex := 4 else     // 심야배차제한현황
				if iTag = 307 then Frm_WOR.cxPageControl1.ActivePageIndex := 5 else     // 기사출근표
				if iTag = 308 then Frm_WOR.cxPageControl1.ActivePageIndex := 6 else     // 우선배차기사현황
				if iTag = 309 then Frm_WOR.cxPageControl1.ActivePageIndex := 7 else     // 미출근현황
				if iTag = 312 then Frm_WOR.cxPageControl1.ActivePageIndex := 8;         // 기사상태변경조회

        Frm_WOR.proc_BranchChange;
			end;
		310  :   //기사픽업
			begin
        if ( Not Assigned(Frm_WOR10) ) Or ( Frm_WOR10 = Nil ) then Frm_WOR10 := TFrm_WOR10.Create(Nil);
        Frm_WOR10.Show;
      end;
		311  :   //기사공지관리
      begin
				//권한부분은 Menu311.visible 부분에서 처리됨
				if TCK_USER_PER.JON_MainView <> '1' then
				begin
					GMessagebox('권한이 없습니다.'+#10#13+'[사용자권한]->[접수]->[메인화면보기] 권한 확인요망', CDMSE);
					Exit;
				end;
				if (GS_PRJ_AREA = 'O') and (TCK_USER_PER.WOR_Gongji <> '1') then   //지방권인 경우 기사공지작성권한에따라 공지 항목 제한 2014.01.03 KHS
				begin
					GMessagebox('기사공지 권한이 없습니다.'+#10#13+'[사용자권한]->[기사]->[기사공지작성] 권한 확인요망',CDMSE);
					exit;
				end;
				if Not Assigned(Frm_WOR22) then Frm_WOR22 := TFrm_WOR22.Create(Nil);
				Frm_WOR22.proc_init(0);
				Frm_WOR22.pnlTitle.CAPTION := Format('   기사공지(본사: %s 지사:%s-%s)', [GT_SEL_BRNO.HDNO, GT_SEL_BRNO.BrNo, GT_SEL_BRNO.BrName]);
				Frm_WOR22.lb_WkCnt.Caption := '전체';
				Frm_WOR22.cxedMemo.Text := GT_USERIF.NM;

				Frm_WOR22.chkAllSelect.Enabled := False;
				if GT_USERIF.LV >= '60' then
				begin
					Frm_WOR22.chkAllSelect.Checked := True;
				end else
				begin
					Frm_WOR22.chkAllSelect.Checked := False;
				end;
				Frm_WOR22.Show;
				Frm_WOR22.proc_Notice(1);
			 {	if (GS_PRJ_AREA = 'O') and ((GT_USERIF.ShareNo = 'G05') or (GT_UserIF.HD = 'A100') or (GT_UserIF.HD = 'A283')) or (GT_UserIF.HD = 'A100') then 	
				begin
					if Not Assigned(Frm_WOR22) then Frm_WOR22 := TFrm_WOR22.Create(Nil);
					Frm_WOR22.proc_init(0);
					Frm_WOR22.pnlTitle.CAPTION := Format('   기사공지(본사: %s 지사:%s-%s)', [GT_SEL_BRNO.HDNO, GT_SEL_BRNO.BrNo, GT_SEL_BRNO.BrName]);
					Frm_WOR22.lb_WkCnt.Caption := '전체';
					Frm_WOR22.cxedMemo.Text := GT_USERIF.NM;

					Frm_WOR22.chkAllSelect.Enabled := False;
					if GT_USERIF.LV >= '60' then
					begin
						Frm_WOR22.chkAllSelect.Checked := True;
					end else
					begin
						Frm_WOR22.chkAllSelect.Checked := False;
					end;
					Frm_WOR22.Show;
					Frm_WOR22.proc_Notice(1);
				end else
				begin
					if Not Assigned(Frm_WOR18) then Frm_WOR18 := TFrm_WOR18.Create(Nil);
					Frm_WOR18.proc_init(0);
					Frm_WOR18.pnlTitle.CAPTION := Format('   기사공지(본사: %s 지사:%s-%s)', [GT_SEL_BRNO.HDNO, GT_SEL_BRNO.BrNo, GT_SEL_BRNO.BrName]);
					Frm_WOR18.cxlbl2.Caption := '전체';
					Frm_WOR18.cxedMemo.Text := GT_USERIF.NM;

					Frm_WOR18.chkAllSelect.Enabled := False;
					if GT_USERIF.LV >= '60' then
					begin
						Frm_WOR18.chkAllSelect.Checked := True;
					end else
					begin
						Frm_WOR18.chkAllSelect.Checked := False;
					end;
					Frm_WOR18.Show;
					Frm_WOR18.proc_Notice(1);
				end;   }
				
			end;

    401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413 :                        // 고객 관리
      begin
        if Not Assigned(Frm_CUT) then Frm_CUT := TFrm_CUT.Create(Nil);
        Frm_CUT.Parent := TabSheet;
        Frm_CUT.Align := alClient;
        Frm_CUT.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

        if iTag = 401 then Frm_CUT.cxPageControl1.ActivePageIndex := 0 else     // 고객관리
        if iTag = 402 then Frm_CUT.cxPageControl1.ActivePageIndex := 1 else     // 고객일반관리
        if iTag = 403 then Frm_CUT.cxPageControl1.ActivePageIndex := 2 else     // 고객고급검색
        if iTag = 404 then Frm_CUT.cxPageControl1.ActivePageIndex := 3 else     // 고객상세검색
        if iTag = 405 then Frm_CUT.cxPageControl1.ActivePageIndex := 4 else     // 고객안심번호
        if iTag = 406 then Frm_CUT.cxPageControl1.ActivePageIndex := 5 else     // 휴먼고객
        if iTag = 407 then Frm_CUT.cxPageControl1.ActivePageIndex := 6 else     // 고객등급관리
        if iTag = 408 then Frm_CUT.cxPageControl1.ActivePageIndex := 7 else     // 마일리지설정
        if iTag = 409 then Frm_CUT.cxPageControl1.ActivePageIndex := 8 else     // 마일리지현황(고객별)
        if iTag = 410 then Frm_CUT.cxPageControl1.ActivePageIndex := 9 else     // 마일리지현황(상세)
        if iTag = 411 then Frm_CUT.cxPageControl1.ActivePageIndex := 10 else    // OK캐쉬백
        if iTag = 413 then Frm_CUT.cxPageControl1.ActivePageIndex := 11;        // 추천인관리(앱)

        Frm_CUT.proc_BrNameSet;
      end;

		501, 502, 503, 504, 505, 506, 507 :                                                 // 법인 관리
      begin
        if Not Assigned(Frm_CUT1) then Frm_CUT1 := TFrm_CUT1.Create(Nil);
        Frm_CUT1.Parent := TabSheet;
        Frm_CUT1.Align := alClient;
        Frm_CUT1.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

        if iTag = 501 then Frm_CUT1.cxPageControl1.ActivePageIndex := 0 else    // 법인관리
        if iTag = 502 then Frm_CUT1.cxPageControl1.ActivePageIndex := 1 else    // 법인이용내역
        if iTag = 503 then Frm_CUT1.cxPageControl1.ActivePageIndex := 2 else    // 법인일일정산내역
        if iTag = 504 then Frm_CUT1.cxPageControl1.ActivePageIndex := 3 else    // 법인인증내역
        if iTag = 505 then Frm_CUT1.cxPageControl1.ActivePageIndex := 4 else    // 법인기사원천징수현황
				if iTag = 506 then Frm_CUT1.cxPageControl1.ActivePageIndex := 5 else    // 법인월정산
				if iTag = 507 then Frm_CUT1.cxPageControl1.ActivePageIndex := 6;        // 일마감-엑셀출력

				Frm_CUT1.proc_BrNameSet;
      end;

    412  :     //동부화재보험가입현황
      begin
        if Not Assigned(Frm_WORA8) then Frm_WORA8 := TFrm_WORA8.Create(Nil);
        Frm_WORA8.Parent := TabSheet;
        Frm_WORA8.Align := alClient;
        Frm_WORA8.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;
      end;

    601, 602, 603, 604, 605, 606, 607, 608, 609, 621 :   // 정산 관리A
      begin
        if Not Assigned(Frm_ACC) then Frm_ACC := TFrm_ACC.Create(Nil);
        Frm_ACC.Parent := TabSheet;
        Frm_ACC.Align := alClient;
        Frm_ACC.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

        if iTag = 601 then Frm_ACC.cxPageControl1.ActivePageIndex := 0 else     // 지사캐쉬내역
        if iTag = 602 then Frm_ACC.cxPageControl1.ActivePageIndex := 1 else     // 통장식로그
        if iTag = 603 then Frm_ACC.cxPageControl1.ActivePageIndex := 2 else     // 오더정산내역
        if iTag = 604 then Frm_ACC.cxPageControl1.ActivePageIndex := 3 else     // 지사충전내역
        if iTag = 605 then Frm_ACC.cxPageControl1.ActivePageIndex := 4 else     // 기사충전내역
        if iTag = 606 then Frm_ACC.cxPageControl1.ActivePageIndex := 5 else     // 기사사용료
        if iTag = 607 then Frm_ACC.cxPageControl1.ActivePageIndex := 6 else     // 공유콜정산
        if iTag = 608 then Frm_ACC.cxPageControl1.ActivePageIndex := 7 else     // 캐쉬이동
        if iTag = 609 then Frm_ACC.cxPageControl1.ActivePageIndex := 8 else     // SMS캐쉬충전내역
        if iTag = 621 then Frm_ACC.cxPageControl1.ActivePageIndex := 9;         // SMS캐쉬일괄충전내역

        Frm_ACC.proc_BrNameSet;
      end;

		610, 611, 612, 613, 614, 615, 616, 617, 619, 620 :   // 정산 관리B
      begin
        if Not Assigned(Frm_ACC1) then Frm_ACC1 := TFrm_ACC1.Create(Nil);
        Frm_ACC1.Parent := TabSheet;
        Frm_ACC1.Align := alClient;
        Frm_ACC1.Show;
				cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

        if iTag = 610 then Frm_ACC1.cxPageControl1.ActivePageIndex := 0 else     // 수익금리스트
        if iTag = 611 then Frm_ACC1.cxPageControl1.ActivePageIndex := 1 else    // 수익금계산
        if iTag = 612 then Frm_ACC1.cxPageControl1.ActivePageIndex := 2 else    // 콜운행정산
        if iTag = 613 then Frm_ACC1.cxPageControl1.ActivePageIndex := 3 else    // 기사수수료현황
        if iTag = 614 then Frm_ACC1.cxPageControl1.ActivePageIndex := 4 else    // 콜대행수수료
        if iTag = 615 then Frm_ACC1.cxPageControl1.ActivePageIndex := 5 else    // 쿠폰승인현황
        if iTag = 616 then Frm_ACC1.cxPageControl1.ActivePageIndex := 6 else    // 쿠폰사용현황
				if iTag = 617 then Frm_ACC1.cxPageControl1.ActivePageIndex := 7 else    // 카드사용현황
				if iTag = 619 then Frm_ACC1.cxPageControl1.ActivePageIndex := 8 else    // 자체쿠폰등록현황
				if iTag = 620 then Frm_ACC1.cxPageControl1.ActivePageIndex := 9;        // 자체쿠폰사용현황


        Frm_ACC1.proc_BrNameSet;
      end;

    618  :   //정산-출금요청
      begin
        Edt_PW.Clear;
        Edt_PPw.Clear;
        Edt_APw.Clear;
        Edt_BPw.Clear;

        Pnl_Pay.Left := (Width  - Pnl_Pay.Width ) div 2;
        Pnl_Pay.Top  := (Height - Pnl_Pay.Height) div 2;
        Pnl_Pay.Height := 94;
        Pnl_Pay.Visible := True;
        Pnl_Pay.BringToFront;
        Edt_PW.SetFocus;
      end;

		701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715  :   // 통계 관리
			begin
				if Not Assigned(Frm_STT) then Frm_STT := TFrm_STT.Create(Nil);
				Frm_STT.Parent := TabSheet;
				Frm_STT.Align := alClient;
				Frm_STT.Show;
				cxPageControl1.ActivePage := TabSheet;
				cxPageControl1.ActivePage.SetFocus;

				iLastActivePage := cxPageControl1.ActivePageIndex;
				if (btnWide.Hint <> '') then
					cxPageControl1.ActivePageIndex := iLastActivePage;

				if iTag = 701 then Frm_STT.cxPageControl1.ActivePageIndex := 0  else    // 대표번호별 통계 관리
				if iTag = 702 then Frm_STT.cxPageControl1.ActivePageIndex := 1  else    // 기사별 통계 관리
				if iTag = 703 then Frm_STT.cxPageControl1.ActivePageIndex := 2  else    // 고객별 통계 관리
				if iTag = 704 then Frm_STT.cxPageControl1.ActivePageIndex := 3  else    // 자사별 통계 관리
				if iTag = 715 then Frm_STT.cxPageControl1.ActivePageIndex := 4  else    // 지사별 콜정산 통계 관리
				if iTag = 705 then Frm_STT.cxPageControl1.ActivePageIndex := 5  else    // 공유별 통계 관리
				if iTag = 706 then Frm_STT.cxPageControl1.ActivePageIndex := 6  else    // 지역별 통계 관리
				if iTag = 707 then Frm_STT.cxPageControl1.ActivePageIndex := 7  else    // 신규고객 통계관리
				if iTag = 708 then Frm_STT.cxPageControl1.ActivePageIndex := 8  else    // 시간대별고객 통계관리
				if iTag = 709 then Frm_STT.cxPageControl1.ActivePageIndex := 9  else    // 일자별별고객 통계관리
				if iTag = 710 then Frm_STT.cxPageControl1.ActivePageIndex := 10 else    // 신규콜수 통계관리
				if iTag = 711 then Frm_STT.cxPageControl1.ActivePageIndex := 11 else    // 취소콜 통계관리
				if iTag = 712 then Frm_STT.cxPageControl1.ActivePageIndex := 12 else    // 시간대별출도지역통계
				if iTag = 713 then Frm_STT.cxPageControl1.ActivePageIndex := 13 else    // 오더요금별통계
				if iTag = 714 then Frm_STT.cxPageControl1.ActivePageIndex := 15;        // 오더별평가조회

				Frm_STT.proc_BrNameSet;
			end;
		801, 802, 803, 804, 805 :   // 회사 관리
      begin
        if Not Assigned(Frm_CMP) then Frm_CMP := TFrm_CMP.Create(Nil);
        Frm_CMP.Parent := TabSheet;
        Frm_CMP.Align := alClient;
        Frm_CMP.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

        if iTag = 801 then Frm_CMP.cxPageControl1.ActivePageIndex := 0 else     // 본사관리
        if iTag = 802 then Frm_CMP.cxPageControl1.ActivePageIndex := 1 else     // 지사관리
        if iTag = 803 then Frm_CMP.cxPageControl1.ActivePageIndex := 2 else     // 자동SMS설정
        if iTag = 804 then Frm_CMP.cxPageControl1.ActivePageIndex := 3 else     // 자율수수료제
        if iTag = 805 then Frm_CMP.cxPageControl1.ActivePageIndex := 4;         // 오토콜설정

        Frm_CMP.proc_BrNameSet;
      end;
    806  :   //대표번호증명원등록
      begin
        if Not Assigned(Frm_CMP017) then Frm_CMP017 := TFrm_CMP017.Create(Nil);
        Frm_CMP017.proc_init;
      	Frm_CMP017.Show;
      end;
		811, 812, 813, 814, 815, 816, 817  :   //고객앱관리
			begin
				if Not Assigned(Frm_APP) then Frm_APP := TFrm_APP.Create(Nil);
				Frm_APP.Parent := TabSheet;
				Frm_APP.Align := alClient;
        Frm_APP.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

				iLastActivePage := cxPageControl1.ActivePageIndex;
				if (btnWide.Hint <> '') then
					cxPageControl1.ActivePageIndex := iLastActivePage;

				if iTag = 811 then Frm_APP.cxPageControl1.ActivePageIndex := 0 else     // 앱/스마트푸시설정
				if iTag = 812 then Frm_APP.cxPageControl1.ActivePageIndex := 1 else     // 앱게시물관리
				if iTag = 813 then Frm_APP.cxPageControl1.ActivePageIndex := 2 else     // 앱푸시관리
				if iTag = 814 then Frm_APP.cxPageControl1.ActivePageIndex := 3 else     // 콜마너SMS발송내역
				if iTag = 815 then Frm_APP.cxPageControl1.ActivePageIndex := 4 else     // 스마트PUSH발송내역
				if iTag = 816 then Frm_APP.cxPageControl1.ActivePageIndex := 5 else     // 콜마너SMS발송일별통계
				if iTag = 817 then Frm_APP.cxPageControl1.ActivePageIndex := 6;         // 스마트PUSH발송일별통계
			end;
		821, 822, 823  :   //AI관리 배차지연콜
			begin
				if Not Assigned(frm_AIC01) then frm_AIC01 := Tfrm_AIC01.Create(Nil);
				frm_AIC01.Parent := TabSheet;
				frm_AIC01.Align := alClient;
				frm_AIC01.Show;
				Frm_AIC01.proc_BrNameSet;
				gSosokName := Frm_AIC01.lblSosokNameA1;
				cxPageControl1.ActivePage := TabSheet;
				cxPageControl1.ActivePage.SetFocus;

				iLastActivePage := cxPageControl1.ActivePageIndex;
				if (btnWide.Hint <> '') then
					cxPageControl1.ActivePageIndex := iLastActivePage;

				if iTag = 821 then frm_AIC01.cxPageControl1.ActivePageIndex := 0 else    // AI-OB 배차지연콜 설정
				if iTag = 822 then frm_AIC01.cxPageControl1.ActivePageIndex := 1 else    // AI-OB 배차지연콜 상세내역
				if iTag = 823 then frm_AIC01.cxPageControl1.ActivePageIndex := 2 ;       // AI-OB 배차지연콜 일별현황
			end;
		831, 832, 833  :   //AI관리 해피콜
			begin
				if Not Assigned(frm_AIC11) then frm_AIC11 := Tfrm_AIC11.Create(Nil);
				frm_AIC11.Parent := TabSheet;
				frm_AIC11.Align := alClient;
				frm_AIC11.Show;
				Frm_AIC11.proc_BrNameSet;
				gSosokName := frm_AIC11.lblSosokNameA1;
				cxPageControl1.ActivePage := TabSheet;
				cxPageControl1.ActivePage.SetFocus;

				iLastActivePage := cxPageControl1.ActivePageIndex;
				if (btnWide.Hint <> '') then
					cxPageControl1.ActivePageIndex := iLastActivePage;

				if iTag = 831 then frm_AIC11.cxPageControl1.ActivePageIndex := 0 else    // AI-OB 해피콜 설정
				if iTag = 832 then frm_AIC11.cxPageControl1.ActivePageIndex := 1 else    // AI-OB 해피콜 상세내역
				if iTag = 833 then frm_AIC11.cxPageControl1.ActivePageIndex := 2 ;       // AI-OB 해피콜 일별현황
			end;
		841, 842, 843, 844  :   //AI-IB
			begin
				if Not Assigned(frm_AIC21) then frm_AIC21 := Tfrm_AIC21.Create(Nil);
				frm_AIC21.Parent := TabSheet;
				frm_AIC21.Align := alClient;
				frm_AIC21.Show;
				frm_AIC21.proc_BrNameSet;
				gSosokName := frm_AIC21.lblSosokNameA1;
				cxPageControl1.ActivePage := TabSheet;
				cxPageControl1.ActivePage.SetFocus;

				iLastActivePage := cxPageControl1.ActivePageIndex;
				if (btnWide.Hint <> '') then
					cxPageControl1.ActivePageIndex := iLastActivePage;

				if iTag = 841 then frm_AIC21.cxPageControl1.ActivePageIndex := 0 else    // AI-IB  설정
				if iTag = 842 then frm_AIC21.cxPageControl1.ActivePageIndex := 1 else    // AI-IB  상세내역
				if iTag = 843 then frm_AIC21.cxPageControl1.ActivePageIndex := 2 else    // AI-IB  일별현황
				if iTag = 844 then frm_AIC21.cxPageControl1.ActivePageIndex := 3 ;       // AI-IB  접수통계
			end;
		901, 902, 903, 904, 905, 906, 907, 908, 909, 910 :   //직원관리
      begin
        if Not Assigned(Frm_USR) then Frm_USR := TFrm_USR.Create(Nil);
        Frm_USR.Parent := TabSheet;
        Frm_USR.Align := alClient;
        Frm_USR.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

        if iTag = 901 then Frm_USR.cxPageControl1.ActivePageIndex := 0 else     // 직원관리
        if iTag = 902 then Frm_USR.cxPageControl1.ActivePageIndex := 1 else     // 직원권한설정
        if iTag = 903 then Frm_USR.cxPageControl1.ActivePageIndex := 2 else     // 직원인증현황
        if iTag = 904 then Frm_USR.cxPageControl1.ActivePageIndex := 3 else     // 직원인증(직원)
        if iTag = 905 then Frm_USR.cxPageControl1.ActivePageIndex := 4 else     // 직원인증(PC)
        if iTag = 906 then Frm_USR.cxPageControl1.ActivePageIndex := 5 else     // 엑셀다운현황
        if iTag = 907 then Frm_USR.cxPageControl1.ActivePageIndex := 6 else     // 직원콜현황
        if iTag = 908 then Frm_USR.cxPageControl1.ActivePageIndex := 7 else     // 시간별현황
        if iTag = 909 then Frm_USR.cxPageControl1.ActivePageIndex := 8 else     // 직원근태현황
        if iTag = 910 then Frm_USR.cxPageControl1.ActivePageIndex := 9;         // 패밀리권한설정

        Frm_USR.proc_BrNameSet;
      end;
		1001, 1002, 1003, 1004, 1005 :   //광고관리
      begin
        if Not Assigned(Frm_SMS) then Frm_SMS := TFrm_SMS.Create(Nil);
        Frm_SMS.Parent := TabSheet;
        Frm_SMS.Align := alClient;
        Frm_SMS.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

        if iTag = 1001 then Frm_SMS.cxPageControl1.ActivePageIndex := 0 else     // SMS발송
        if iTag = 1002 then Frm_SMS.cxPageControl1.ActivePageIndex := 1 else     // SMS대량발송
        if iTag = 1003 then Frm_SMS.cxPageControl1.ActivePageIndex := 2 else     // SMS발송상세조회
        if iTag = 1004 then Frm_SMS.cxPageControl1.ActivePageIndex := 3 else     // SMS발송일별조회
        if iTag = 1005 then Frm_SMS.cxPageControl1.ActivePageIndex := 4;         // 수신거부관리

        Frm_SMS.proc_BrNameSet;
      end;
    1100 :  // 관제지도
      begin
        if Not Assigned(Frm_AdminMap) then Frm_AdminMap := TFrm_AdminMap.Create(Nil);
        Frm_AdminMap.Skm := '';
        Frm_AdminMap.Show;
      end;
    1150 :  // 셔틀관제
      begin
        if Not Assigned(Frm_AdminMap02) then Frm_AdminMap02 := TFrm_AdminMap02.Create(Nil);
        Frm_AdminMap02.Show;
      end;
		1160 :  // 셔틀노선관제
			begin
				if Not Assigned(frm_ShuttleMap) then frm_ShuttleMap := Tfrm_ShuttleMap.Create(Nil);
				frm_ShuttleMap.Show;
			end;
		1170 :  // 셔틀노선관제_NEW
			begin
				if Not Assigned(frm_ShuttleMap_New) then frm_ShuttleMap_New := Tfrm_ShuttleMap_New.Create(Nil);
				frm_ShuttleMap_New.Show;
			end;
		1171 :  // 셔틀통계 관리
			begin
				if Not Assigned(Frm_STT_Shuttle) then Frm_STT_Shuttle := TFrm_STT_Shuttle.Create(Nil);
				Frm_STT_Shuttle.Parent := TabSheet;
				Frm_STT_Shuttle.Align := alClient;
				Frm_STT_Shuttle.Show;
				cxPageControl1.ActivePage := TabSheet;
				cxPageControl1.ActivePage.SetFocus;

				iLastActivePage := cxPageControl1.ActivePageIndex;
				if (btnWide.Hint <> '') then
					cxPageControl1.ActivePageIndex := iLastActivePage;

				Frm_STT_Shuttle.proc_BrNameSet;
			end;
		1200: // 원격요청
      begin
        try
					IE := CreateOleObject('InternetExplorer.Application');
          IE.Visible := true;
					IE.height := 800;
          IE.width := 1000;
					IE.left := 0;
          IE.top := 0;

					IE.MenuBar := False;
          IE.AddressBar := False;
          IE.Resizable := False;
          IE.StatusBar := False;
          IE.ToolBar := False;
          IE.Silent := false;
//          IE.Navigate('http://callmaner.anyhelp.net/');     // 2011-11-10 원격지원 프로그램을 데이콤 AnyHelp 로 변경함.
          IE.Navigate('http://cs1472.com');                 // 2016-04-19 원격지원 프로그램을 업데이트로 변경함.
          EHWND := IE.HWND;
        except
        end;
      end;
		1210: // IPCC 원격요청
			begin
				pnl_RemoteForIPCC.Visible := True;		 
			end;
		1220: // 요금조회
			begin
				if Not Assigned(Frm_JON63) then Frm_JON63 := TFrm_JON63.Create(Nil);
				Frm_JON63.Hide;
				Frm_JON63.proc_Init;
				Frm_JON63.Tag := -1;
				Frm_JON63.bChkTime := False;
				Frm_JON63.Show;
				Frm_JON63.edt_StPoi.Text := '';
				Frm_JON63.edt_EdPoi.Text := '';
//				Frm_JON63.btnSearch.Click;
			end;
		1230: //   콜센터 운영 도움 정보
			begin
				if Not Assigned(Frm_COM60) Or (Frm_COM60 = Nil) then Frm_COM60 := TFrm_COM60.Create(Nil);
					
				GB_COM60SURVEY := True;
				Frm_COM60.Show;
				//설문창 초기화
				Frm_COM60.pnl_Survey.Height := 150;
				Frm_COM60.pnl_Survey.width  := 385;
				Frm_COM60.pnl_Survey.Visible := False;
				Frm_COM60.btn_Survey_NO.Left := 70;
				Frm_COM60.btn_Survey_NO.Top  := 68;
				Frm_COM60.btn_Survey_YES.Left := 220;
				Frm_COM60.btn_Survey_YES.Top  := Frm_COM60.btn_Survey_NO.Top;
				Frm_COM60.lb_EtcInfo.Left := 12;
				Frm_COM60.lb_EtcInfo.Top  := 130;
				Frm_COM60.btn_Survey_Close.Visible := False;
				Frm_COM60.pnl_More.visible := False;
				Frm_COM60.btn_More.Tag := 0; //의견을 입력함

				Frm_COM60.btn_Hot3DayClose.Tag := 0;
				if not gCOM60Agree then				
				begin
					Frm_COM60.btn_More.Enabled := False;
					Frm_COM60.pnl_ReOPEN.Visible := True;
					Frm_COM60.btn_Survey.Enabled := False;
					Frm_COM60.btn_Hot2Day.Enabled := False;
					Frm_COM60.btn_Hot3DayClose.Enabled := False;
					Frm_COM60.btn_Hot2DayCC.Enabled := False;

					Frm_COM60.pnl_ReOPEN.Left := (Frm_COM60.width Div 2) - (Frm_COM60.pnl_ReOPEN.width Div 2);
					Frm_COM60.pnl_ReOPEN.Top  := (Frm_COM60.Height Div 2) - (Frm_COM60.pnl_ReOPEN.Height Div 2); 
					Frm_COM60.pnl_ReOPEN.Height := 150;
					Frm_COM60.pnl_ReOPEN.width  := 250;
				end else Frm_COM60.btn_Hot2Day.Click;
				
			end;
		1300 :  // SMS
      begin
        try
          if Not Assigned(Frm_SMS01) then Frm_SMS01 := TFrm_SMS01.Create(Nil);
          Frm_SMS01.mm_message.Text := '';
          Frm_SMS01.ed_send.Text := '';
          Frm_SMS01.ls_sms.Items.Clear;
					Frm_SMS01.ls_sms.Items.Add('');
          Frm_SMS01.ed_receiver.Text := '';
					Frm_SMS01.sSendKind := '';
					Frm_SMS01.rdo_SMS.visible := False;
					Frm_SMS01.rdo_PUSH.visible := False;
					Frm_SMS01.PageControl1.ActivePageIndex := 0;
					Frm_SMS01.Show;
        finally
        end;
      end;

    1401  :   //일반설정
      begin
        if ( Not Assigned(Frm_SETA1) ) Or ( Frm_SETA1 = Nil ) then Frm_SETA1 := TFrm_SETA1.Create(Nil);
        Frm_SETA1.Show;
        if GS_EnvFile.ReadInteger('GER', 'SETIDX', 0) = 0 then Frm_SETA1.SetOption(1);
      end;
    1402  :   //접수설정
      begin
        if ( Not Assigned(Frm_SETA1) ) Or ( Frm_SETA1 = Nil ) then Frm_SETA1 := TFrm_SETA1.Create(Nil);
        Frm_SETA1.Show;
        if GS_EnvFile.ReadInteger('GER', 'SETIDX', 0) = 0 then Frm_SETA1.SetOption(0);
      end;

    1403, 1404, 1405, 1406, 1407 :   //설정관리
      begin
        if Not Assigned(Frm_SET) then Frm_SET := TFrm_SET.Create(Nil);
        Frm_SET.Parent := TabSheet;
        Frm_SET.Align := alClient;
        Frm_SET.Show;
        cxPageControl1.ActivePage := TabSheet;
        cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

        if iTag = 1403 then Frm_SET.cxPageControl1.ActivePageIndex := 0 else     // 요금제 설정
        if iTag = 1404 then Frm_SET.cxPageControl1.ActivePageIndex := 1 else     // 요금제 설정[대표번호]
        if iTag = 1405 then Frm_SET.cxPageControl1.ActivePageIndex := 2 else     // 요금제 설정[법인]
        if iTag = 1406 then Frm_SET.cxPageControl1.ActivePageIndex := 3 else     // 심야할증요금제 설정
        if iTag = 1407 then Frm_SET.cxPageControl1.ActivePageIndex := 4;         // CID대표번호DNIS관리

        Frm_SET.proc_BrNameSet;
      end;

    1408  :   //CID내역
      begin
        proc_CidLog(88, '');
        Frm_JON02.Show;
			end;

    1414  :   //CID설정
      begin
				if Assigned(Frm_JON54) and (Frm_JON54.BtnBtm1Setting <> nil) then
					Frm_JON54.BtnBtm1Setting.Click;
			end;

		1409 :    // 메신저
      begin
				ProcessKill_Pro('CMessenger2.exe');
				sleep(1000);	
				procExecMessenger(True);
      end;

    1415, 1416  :   // 콜마너 고객센터 채팅/쪽지
      begin
        pSet050CCList(iTag);
      end;

    1410 :   // 핸드폰(PDA)다운로드방법
      begin
        try
          IE := CreateOleObject('InternetExplorer.Application');
          IE.left := 0;
          IE.top := 0;
          IE.Width := Screen.Width;
          IE.Height := 740;

          IE.MenuBar := False;
          IE.AddressBar := False;
          IE.ToolBar := False;
          IE.Silent := false;
          IE.Navigate('http://www.callmaner.com/cdms_help/help2.htm');
          IE.Visible := true;
        except
        end;
      end;
    1411 :   // 사용자 메뉴얼
      begin
        sFile := HELPDIRECTORY + 'callmaner2009_manual_2.pdf';
        try
          bRet := 0;
          if FileExists(sFile) then
            bRet := ShellExecute(Self.Handle, 'open', PChar(sFile), nil, nil, SW_SHOWNORMAL);

          if bRet < 32 then
          begin
						msg := '사용자 메뉴얼을 읽기위한 PDF 리더 프로그램을 읽을 수 없습니다.'#13#10#13#10
							+ 'PDF 리더 프로그램(Adobe reader) 다운로드 페이지로 이동하시겠습니까?'
							+ #13#10'(http://file.naver.com/pc/view.html?fnum=224235&cat=30)';

						if Application.MessageBox(PChar(msg), CDMSE,
									MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON1) = IDYES then
						begin
              RunIE('http://file.naver.com/pc/view.html?fnum=224235&cat=30');
            end;

					end;
          OutputDebugString(PChar(Format('bRet: %d', [bRet])));
        except
          GMessagebox('Acrobat Reader를 설치하세요', CDMSE);
          Exit;
        end;
      end;
    1412 :   // 사용법 요약
      begin
        if Not Assigned(Frm_HEL) then Frm_HEL := TFrm_HEL.Create(Nil);
        Frm_HEL.Caption := '사용법요약';
        with Frm_HEL do
        begin
          FormStyle := fsStayOnTop;
          Show;
        end;
      end;
    1413 :   // 콜마너 홈페이지
      begin
        try
          IE := CreateOleObject('InternetExplorer.Application');
          IE.left := 0;
          IE.top := 0;
          IE.Width := Screen.WorkAreaWidth;
          IE.Height := Screen.WorkAreaHeight;
					IE.MenuBar := False;
					IE.ToolBar := False;
					IE.StatusBar := False;
          if GB_365System then
  					IE.Navigate('http://wj365.co.kr/')
          else
  					IE.Navigate('http://www.callmaner.com/');
          IE.Visible := true;
        except
        end;
      end;
    1500 :   // 메뉴찾기
      begin
        cxPageControl2.ActivePageIndex := 7;
        BtnFix.Down := True;
        BtnFixClick(BtnFix);
        Frm_JON51.EdtSearch.SetFocus;
      end;
		1601, 1602, 1603, 1604, 1605, 1606 :   //콜벨관리
			begin
				if Not Assigned(Frm_BTN) then Frm_BTN := TFrm_BTN.Create(Nil);
				Frm_BTN.Parent := TabSheet;
				Frm_BTN.Align := alClient;
				Frm_BTN.Show;
				cxPageControl1.ActivePage := TabSheet;
				cxPageControl1.ActivePage.SetFocus;

        iLastActivePage := cxPageControl1.ActivePageIndex;
        if (btnWide.Hint <> '') then
          cxPageControl1.ActivePageIndex := iLastActivePage;

				if iTag = 1601 then Frm_CMP.cxPageControl1.ActivePageIndex := 1 else
				if iTag = 1602 then Frm_BTN.cxPageControl1.ActivePageIndex := 0 else     // 영업사원관리
				if iTag = 1603 then Frm_BTN.cxPageControl1.ActivePageIndex := 1 else     // 업소관리
				if iTag = 1604 then Frm_BTN.cxPageControl1.ActivePageIndex := 2 else     // 지사정산
				if iTag = 1605 then Frm_BTN.cxPageControl1.ActivePageIndex := 3 else     // 영업사원정산
				if iTag = 1606 then Frm_BTN.cxPageControl1.ActivePageIndex := 4 ;        // 업소정산

				Frm_BTN.proc_BrNameSet;
			end;
		1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715 :
			begin 	
				if Not Assigned(Frm_PBX) then Frm_PBX := TFrm_PBX.Create(Nil);
				Frm_PBX.Parent := TabSheet;
				Frm_PBX.Align := alClient;
				Frm_PBX.Show;
				cxPageControl1.ActivePage := TabSheet;
				cxPageControl1.ActivePage.SetFocus;

        if iTag = 1701 then Frm_PBX.cxPageControl1.ActivePageIndex :=  0 else     // 통화현황
        if iTag = 1702 then Frm_PBX.cxPageControl1.ActivePageIndex :=  1 else     // 통화분석
				if iTag = 1703 then Frm_PBX.cxPageControl1.ActivePageIndex :=  2 else     // 인바운드설정
				if iTag = 1704 then Frm_PBX.cxPageControl1.ActivePageIndex :=  3 else     // 상담그룹설정
        if iTag = 1705 then Frm_PBX.cxPageControl1.ActivePageIndex :=  4 else     // 상담원설정
				if iTag = 1706 then Frm_PBX.cxPageControl1.ActivePageIndex :=  5 else     // 관리자설정
        if iTag = 1707 then Frm_PBX.cxPageControl1.ActivePageIndex :=  6 else     // 관리자권한설정
        if iTag = 1708 then Frm_PBX.cxPageControl1.ActivePageIndex :=  7 else     // 부가서비스설정
        if iTag = 1709 then Frm_PBX.cxPageControl1.ActivePageIndex :=  8 else     // 멘트설정
        if iTag = 1710 then Frm_PBX.cxPageControl1.ActivePageIndex :=  9 else     // 호분배권한설정
        if iTag = 1711 then Frm_PBX.cxPageControl1.ActivePageIndex := 10 else     // 호분배우선순위설정
        if iTag = 1712 then Frm_PBX.cxPageControl1.ActivePageIndex := 11 else     // 근무시간설정
        if iTag = 1713 then Frm_PBX.cxPageControl1.ActivePageIndex := 12 else     // 휴일설정
        if iTag = 1714 then Frm_PBX.cxPageControl1.ActivePageIndex := 13 else     // VIP고객관리
        if iTag = 1715 then Frm_PBX.cxPageControl1.ActivePageIndex := 14 ;        // 수신거부고객관리
			end;
		1716 :
			begin
				if Not Assigned(Frm_PBX02) then Frm_PBX02 := TFrm_PBX02.Create(Nil);
				Frm_PBX02.Show;
			end;	
		1717 : //모니터링 프로그램 실행
			begin
				ProcessKill_Pro('CMNMonitor.exe');
				sTmp  := GS_EnvFile.ReadString('CID_COMM', 'PBX_IP',  '');
				sParam := sTmp + ' ' + GT_ComID;
				ShellExecute(
					Self.Handle,
					'open',
					PChar(ExtractFilePath(ParamStr(0)) + 'CMNMonitor.exe'),
					PChar(String(sParam)),
					nil,
					SW_SHOWNORMAL
				); 
			end;	
		End;

    if ( Not IsFamily ) And ( GS_BRLISTVIEWMODE ) And ( mLEFT_BRLISTVIEWHDCD <> '' ) And ( mLEFT_SectionIndex = 0 ) And ( bSheet ) then
    begin
      if iTag > 20 then
        Tree_List.Items[0].Selected := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.procExecMessenger( bOk : Boolean );
var
  iHandle: THandle;
begin
  SetDebugeWrite('Main.procExecMessenger');
  try
		if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
      Dm.ssMessenger.Active := True;

    if (GB_365System) Or ( GB_CallLine) then
      iHandle := FindWindow('TfrmMain', PChar(GS_APPNAME +  ' 메신저'))
    else
      iHandle := FindWindow('TfrmMain', PChar('콜마너 메신저 ' + GS_PRJ_AREA));

    //------------------------------------------------------
    if iHandle <> 0 then
    begin
      p903SendMSNAlive;
    end else
    begin
    //------------------------------------------------------ 메신저 실행시 무조건 종료후 재시작  LYB 2017.08.17
//    if iHandle <> 0 then                                   백단에서 항상 실행중이므로
//    begin
//      CopyData.cbData := Length('ACTIVE') + 1;
//      CopyData.lpData := pAnsiChar('ACTIVE' + #0);
//      SendMessage(iHandle, WM_COPYDATA, 0, LongInt(@CopyData));
//    end else
      pExecMessenger(bOk);
    end;
  except on e: exception do
    begin
      Assert(False, E.Message);
      ShowMessage('frmMain[procExecMessenger]:' + e.Message);
    end;
  end;
end;

procedure TFrm_Main.procExecPBX(bOk: Boolean; AProgram : string);
var
	ProcID: DWORD;
	hProcess: THandle;
	TermSucc: BOOL;
begin
	SetDebugeWrite('Frm_Main.procExecPBX');
	trm_IPCCSetting.Enabled := True;
	try
		if AProgram = 'CMNSoftPhone' then
		begin
			ProcID:= Process32ListFind('CMNSoftPhone.exe');
			if ProcID <> 0 then
			begin
				// 존재하는 process object의 handle을 return한다
				hProcess := OpenProcess(PROCESS_ALL_ACCESS, TRUE, ProcID);

				// 명시한 process를 강제 종료시킨다
				TermSucc := TerminateProcess(hProcess, 0);  
				Sleep(500);
			end;
			pExecPBX(bOk);

			pPBXAlive;
		end else
		if AProgram = 'CMNIPCC' then
		begin
			ProcID:= Process32ListFind('CMNIPCC.exe');
			if ProcID = 0 then
			begin
				pExecSI415OEM(True);
				Sleep(3000);
			end;
		end;
	except on e: exception do
		begin
			Assert(False, E.Message);
			ShowMessage('frmMain[procExecMessenger]:' + e.Message);
		end;
	end;
end;

procedure TFrm_Main.pExecMessenger( bOk : Boolean );
var
  sTotal, sLocal, sBlock, sMsnSvrIP, sShareMsn, sArea, sMsnYn : string;
  sParam, sTemp : AnsiString;

  LogEncryptData: TIdBytes;
  iEncryptLen, ii: Integer;
begin
  SetDebugeWrite('Main.pExecMessenger');
	try
    sTotal    := IfThen(TCK_USER_PER.COM_MSNTotal = '1', '1', '0');   // 콜마너 전체사용자 공유
    sLocal    := IfThen(TCK_USER_PER.COM_MSNLocal = '1', '1', '0');   // SMS전송기능
    sBlock    := IfThen(TCK_USER_PER.COM_MSNBlock = '1', '1', '0');   // 상담원간 메시지 제한
//    sMsnSvrIP := '211.110.44.43';
//		sMsnSvrIP := '192.168.10.27';
//		sMsnSvrIP := '61.77.191.102';
		sMsnSvrIP := '61.77.191.103';
		sShareMsn := IfThen(ShareMsnYN = 'y', '1', '0');
    sArea     := IfThen(GS_PRJ_AREA = 'O', '0', '1');

    if bOk then sMsnYn := '0'    // 0.메신저로그인
           else sMsnYn := '1';   // 1.업데이트만 체크

    // 메신저 파라메타 암호화 처리
		sTemp := 'CM' + StringReplace(GT_USERIF.ID, ' ', '│', [rfReplaceAll])  + ' ' + GT_USERIF.HashPW + ' ' + GT_USERIF.HD + ' ' + sTotal + ' ' +
             sLocal + ' ' + sBlock + ' ' + sMsnSvrIP + ' ' + sShareMsn + ' ' + sArea + ' ' + ExtractFilePath(Application.ExeName) + ' ' +
             ENVPATHFILE + ' ' + ReplaceAll(GS_PRJ_VERSION, '.', '') + ' ' + sMsnYn + ' ' + GS_APPNAME;

    ZeroMemory(@LogEncryptData, SizeOf(LogEncryptData));
    SetLength(LogEncryptData, 1024);
    iEncryptLen := BlowFishEncrypt(_LOG_KEY, AnsiString(sTemp), LogEncryptData);

    // Hex 코드 만들기..
    sParam := '';
    for ii := 0 to iEncryptLen - 1 do
    begin
      sParam := sParam + ByteToHexaStr(LogEncryptData[ii]);
    end;

		if not (FileExists('C:\sqnmsg.crc')) then
    begin
      // 메신져 실행
      ShellExecute(
        Self.Handle,
        'open',
        PChar(ExtractFilePath(ParamStr(0)) + 'MSN\CMessenger2.exe'),
        PChar(String(sParam)),
        nil,
        SW_SHOWNORMAL
      );

//      sExec := ExtractFilePath(ParamStr(0)) + 'MSN\CMessenger2.exe ' + String(sParam);
//      WinExec(PAnsiChar(sExec), SW_SHOWNORMAL);
//      ProcessExecute(sExec, SW_SHOWNORMAL);
    end;
  except on e: exception do
    begin
      Assert(False, E.Message);
      ShowMessage('frmMain[pExecMessenger]:' + e.Message);
    end;
  end;
end;

procedure TFrm_Main.pExecPBX(bOk: Boolean);
var
	sParam : AnsiString;
	sID, sPW, sEXT, sIP, sOP, sComID : string;
begin
	SetDebugeWrite('Frm_Main.pExecPBX');
	if not bOk then exit;
	sID  := GS_EnvFile.ReadString('CID_COMM', 'PBX_ID',  '');
	sPW  := GS_EnvFile.ReadString('CID_COMM', 'PBX_PW',  '');
	sEXT := GS_EnvFile.ReadString('CID_COMM', 'PBX_EXT',  '');
//		sLV  := GS_EnvFile.ReadString('CID_COMM', 'PBX_LV',  '');
	sIP  := GS_EnvFile.ReadString('CID_COMM', 'PBX_IP',  '');
	sOP  :=	GS_EnvFile.ReadString('CID_COMM', 'PBX_OP', '');
	if GT_ComID = '' then 
		GT_ComID := GS_EnvFile.ReadString('CID_COMM', 'PBX_ComID', '');
	sComID := GT_ComID;
																															
//	ProcessKill_Pro('CMNSoftPhone.exe');

	try
		sParam := sID + ' ' + sPW + ' ' + sEXT + ' ' + sIP + ' ' + sOP + ' ' + sComID;
		ShellExecute(
			Self.Handle,
			'open',
			PChar(ExtractFilePath(ParamStr(0)) + 'CMNSoftPhone.exe'),
			PChar(String(sParam)),
			nil,
			SW_SHOWNORMAL
		);
//		gsInternalNumber := ed_Number.Text;
//		GT_CIDINFO.NaeSun := ed_Number.Text;
	except on e: exception do
		begin
			Assert(False, E.Message);
			ShowMessage('frmMain[pExecMessenger]:' + e.Message);
		end;
	end;
end;

procedure TFrm_Main.pExecSI415OEM(bOk: Boolean);
var	sParam : AnsiString;
begin
	SetDebugeWrite('Frm_Main.pExecSI415OEM');
	trm_IPCCSetting.Enabled := True;
	try
		sParam := '';
		ShellExecute(
			Self.Handle,
			'open',
			PChar(gsPath),
			PChar(String(sParam)),
			nil,
			SW_SHOWNORMAL
		);
	except on e: exception do
		begin
			Assert(False, E.Message);
			ShowMessage('frmMain[pExecSI415OEM]:' + e.Message);
		end;
	end;
end;

procedure TFrm_Main.pGongjiStart;
begin
  tmrGongJi.Enabled := False;
  lblGongJiF.Visible := False;

  ImgGongJi.Picture.Bitmap.SetSize(ImgGongJi.Width, ImgGongJi.Height);
  ImgGongJi.Canvas.FillRect(ImgGongJi.Canvas.ClipRect);
  ImgGongJi.Canvas.Font.Size := 13; //글씨 크기
  ImgGongJi.Canvas.Font.Color := clYellow;
  ImgGongJi.Canvas.Font.Style := [fsBold];
  ImgGongJi.Canvas.Brush.Color := clBlack;

  if Trim(GS_GongJi) = '' then
  begin
    gBoard.Text := '';

    lblGongJiF.Visible := True;
    Exit;
  end;

  tmrGongJi.Interval := 10; //흐르는 속도

  gBoard := Default(TGongJi);
  gBoard.Width := ImgGongJi.Width;
  gBoard.Text := GS_GongJi; //텍스트 내용
  gBoard.TextWidth := ImgGongJi.Canvas.TextWidth(gBoard.Text);
  gBoard.TextX := gBoard.Width;
  gBoard.TextY := 0;

  gBoard1 := gBoard;
  gBoard1.TextX := gBoard.TextWidth;  // 2번째 시작은 TextWidth만큼 대기

  tmrGongJi.Enabled := True;
end;

procedure TFrm_Main.proc_FormCodeChange(iTag, iSel: Integer);
begin
  SetDebugeWrite('Main.proc_FormCodeChange');
  try
    case iTag of
    300  :   //기사관리
      begin
        Frm_WOR.lblSosokNameA2.Caption := GetSosokInfo;
        Frm_WOR.lblSosokNameA3.Caption := GetSosokInfo;
				Frm_WOR.lblSosokNameA4.Caption := GetSosokInfo;
        Frm_WOR.lblSosokNameA5.Caption := GetSosokInfo;
        Frm_WOR.lblSosokNameA6.Caption := GetSosokInfo;
        Frm_WOR.lblSosokNameA7.Caption := GetSosokInfo;

        if Frm_WOR.cxPageControl1.ActivePageIndex = 4 then Frm_WOR.proc_peakTimeSearch;

        if Tree_List.Tag = 1 then
        begin
          if Frm_WOR.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_WOR.lblSosokNameA2 else  // 기사캐쉬관리
          if Frm_WOR.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_WOR.lblSosokNameA3 else  // 기사배차현황
          if Frm_WOR.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_WOR.lblSosokNameA4 else  // 기사공유콜배차제한
          if Frm_WOR.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_WOR.lblSosokNameA5 else  // 기사블랙리스트
          if Frm_WOR.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_WOR.lblSosokNameA6 else  // 심야배차제한현황
          if Frm_WOR.cxPageControl1.ActivePageIndex = 5 then gSosokName := Frm_WOR.lblSosokNameA7;      // 기사출근표

          tmrDiffSosok.Enabled := True;
        end;
      end;
    412  :     //동부화재 보험가입현황
      begin
        Frm_WORA8.proc_BrNameSet;
        if Tree_List.Tag = 1 then
        begin
          gSosokName := Frm_WORA8.lblSosokNameA8;
          tmrDiffSosok.Enabled := True;
        end;
      end;
    400  :   //고객관리
      begin
        Frm_CUT.proc_BrNameSet;

      	if Frm_CUT.cxPageControl1.ActivePageIndex =  7 then
        begin
          Frm_CUT.proc_MileageSet;
          Frm_CUT.proc_MileageSet_Multi;
        end;

        if Tree_List.Tag = 1 then
        begin
          if Frm_CUT.cxPageControl1.ActivePageIndex = 0  then gSosokName := Frm_CUT.lbCustCompany01 else  // 고객관리
          if Frm_CUT.cxPageControl1.ActivePageIndex = 1  then gSosokName := Frm_CUT.lbCustCompany02 else  // 고객일반관리
          if Frm_CUT.cxPageControl1.ActivePageIndex = 2  then gSosokName := Frm_CUT.lbCustCompany03 else  // 고객고급검색
          if Frm_CUT.cxPageControl1.ActivePageIndex = 3  then gSosokName := Frm_CUT.lbCustCompany04 else  // 고객상세검색
          if Frm_CUT.cxPageControl1.ActivePageIndex = 4  then gSosokName := Frm_CUT.lbCustCompany05 else  // 고객안심번호
          if Frm_CUT.cxPageControl1.ActivePageIndex = 5  then gSosokName := Frm_CUT.lbCustCompany06 else  // 휴먼고객
          if Frm_CUT.cxPageControl1.ActivePageIndex = 6  then gSosokName := Frm_CUT.lbCustCompany07 else  // 고객등급관리
          if Frm_CUT.cxPageControl1.ActivePageIndex = 7  then gSosokName := Frm_CUT.lbCustCompany08 else  // 마일리지설정
          if Frm_CUT.cxPageControl1.ActivePageIndex = 8  then gSosokName := Frm_CUT.lbCustCompany09 else  // 마일리지현황(고객별)
          if Frm_CUT.cxPageControl1.ActivePageIndex = 9  then gSosokName := Frm_CUT.lbCustCompany10 else  // 마일리지현황(상세)
          if Frm_CUT.cxPageControl1.ActivePageIndex = 10 then gSosokName := Frm_CUT.lbCustCompany11 else  // OK캐쉬백

          tmrDiffSosok.Enabled := True;
        end;
      end;
    500  :   //고객관리
      begin
        Frm_CUT1.proc_BrNameSet;

        if Frm_CUT1.cxPageControl1.ActivePageIndex = 0 then Frm_CUT1.btn_12_1.Click else
        if Frm_CUT1.cxPageControl1.ActivePageIndex = 1 then Frm_CUT1.btn_13_1.Click;

        if Tree_List.Tag = 1 then
        begin
          if Frm_CUT1.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_CUT1.lbCustCompany12 else  // 법인관리
          if Frm_CUT1.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_CUT1.lbCustCompany13 else  // 법인이용내역
          if Frm_CUT1.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_CUT1.lbCustCompany14 else  // 법인일일정산내역
          if Frm_CUT1.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_CUT1.lbCustCompany15 else  // 법인인증내역
          if Frm_CUT1.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_CUT1.lbCustCompany16 else  // 법인기사원천징수현황
          if Frm_CUT1.cxPageControl1.ActivePageIndex = 5 then gSosokName := Frm_CUT1.lbCustCompany17;      // 법인월정산

          tmrDiffSosok.Enabled := True;
        end;
      end;
    600  :   //정산관리A
      begin
        Frm_ACC.proc_BrNameSet;

        if Frm_ACC.cxPageControl1.ActivePageIndex = 8 then Frm_ACC.BtnSearch1A9.Click;

        if Tree_List.Tag = 1 then
        begin
          if Frm_ACC.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_ACC.lblSosokNameA1 else  // 지사캐쉬내역
          if Frm_ACC.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_ACC.lblSosokNameA2 else  // 통장식로그
          if Frm_ACC.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_ACC.lblSosokNameA3 else  // 오더정산내역
          if Frm_ACC.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_ACC.lblSosokNameA4 else  // 지사충전내역
          if Frm_ACC.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_ACC.lblSosokNameA5 else  // 기사충전내역
          if Frm_ACC.cxPageControl1.ActivePageIndex = 5 then gSosokName := Frm_ACC.lblSosokNameA6 else  // 기사사용료
          if Frm_ACC.cxPageControl1.ActivePageIndex = 6 then gSosokName := Frm_ACC.lblSosokNameA7 else  // 공유콜정산
          if Frm_ACC.cxPageControl1.ActivePageIndex = 8 then gSosokName := Frm_ACC.lblSosokNameA9;      // SMS캐쉬충전내역
          tmrDiffSosok.Enabled := True;
        end;
      end;
    650  :   //정산관리B
      begin
        Frm_ACC1.proc_BrNameSet;

        if Tree_List.Tag = 1 then
        begin
          if Frm_ACC1.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_ACC1.lblSosokNameA10 else // 수익금리스트
          if Frm_ACC1.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_ACC1.lblSosokNameA11 else  // 수익금계산
          if Frm_ACC1.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_ACC1.lblSosokNameA12 else  // 콜운행정산
          if Frm_ACC1.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_ACC1.lblSosokNameA13 else  // 기사수수료현황
          if Frm_ACC1.cxPageControl1.ActivePageIndex = 4 then begin
                                                                if Frm_ACC1.cxPageControl2.ActivePageIndex = 0 then
                                                                  gSosokName := Frm_ACC1.lblSosokNameA14 else   // 콜대행수수료
                                                                if Frm_ACC1.cxPageControl2.ActivePageIndex = 1 then
                                                                  gSosokName := Frm_ACC1.lblSosokNameA141;      // 콜대행수수료
                                                              end else
          if Frm_ACC1.cxPageControl1.ActivePageIndex = 5 then gSosokName := Frm_ACC1.lblSosokNameA15 else      // 쿠폰승인현황
          if Frm_ACC1.cxPageControl1.ActivePageIndex = 6 then gSosokName := Frm_ACC1.lblSosokNameA16 else       // 쿠폰사용현황
          if Frm_ACC1.cxPageControl1.ActivePageIndex = 7 then gSosokName := Frm_ACC1.lblSosokNameA17;       // 카드사용현황

          tmrDiffSosok.Enabled := True;
        end;
      end;
    700  :   //통계관리
      begin
        Frm_STT.proc_BrNameSet;

        if Tree_List.Tag = 1 then
        begin
					if Frm_STT.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_STT.lblSosokNameA1 else  // 기사현황관리
          if Frm_STT.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_STT.lblSosokNameA2 else  // 기사별통계관리
          if Frm_STT.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_STT.lblSosokNameA3 else  // 고객별통계관리
          if Frm_STT.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_STT.lblSosokNameA5;     // 신규콜수통계관리

          tmrDiffSosok.Enabled := True;
        end;
      end;
    800  :   //회사관리
      begin
        Frm_CMP.proc_BrNameSet;

        if Frm_CMP.cxPageControl1.ActivePageIndex = 0 then Frm_CMP.proc_init_head else
        if Frm_CMP.cxPageControl1.ActivePageIndex = 1 then
        begin
          Frm_CMP.proc_init_branch;
				  Frm_CMP.RequestDataBranchList;
        end else
        if Frm_CMP.cxPageControl1.ActivePageIndex = 2 then Frm_CMP.BtnSearchA3.Click else
        if Frm_CMP.cxPageControl1.ActivePageIndex = 4 then Frm_CMP.BtnSearchA5.Click;

        if Tree_List.Tag = 1 then
        begin
          if Frm_CMP.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_CMP.lblSosokNameA2 else  // 지사관리
          if Frm_CMP.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_CMP.lblSosokNameA3 else  // 자동SMS설정
          if Frm_CMP.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_CMP.lblSosokNameA4 else  // 자율수수료제
          if Frm_CMP.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_CMP.lblSosokNameA5;      // 오토콜설정

          tmrDiffSosok.Enabled := True;
        end;
      end;
		810  :   //고객앱관리
			begin
				Frm_APP.proc_BrNameSet;
				if Tree_List.Tag = 1 then
				begin
          if Frm_APP.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_APP.lblSosokNameA1 else  // 앱/스마트푸시설정
          if Frm_APP.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_APP.lblSosokNameA2 else  // 앱게시물관리
					if Frm_APP.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_APP.lblSosokNameA3 else  // 앱푸시관리
					if Frm_APP.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_APP.lblSosokNameA4 else  // 콜마너SMS발송내역
					if Frm_APP.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_APP.lblSosokNameA5 else  // 스마트PUSH발송내역
					if Frm_APP.cxPageControl1.ActivePageIndex = 5 then gSosokName := Frm_APP.lblSosokNameA6 else  // 콜마너SMS발송일별통계
					if Frm_APP.cxPageControl1.ActivePageIndex = 6 then gSosokName := Frm_APP.lblSosokNameA7;      // 스마트PUSH발송일별통계

					tmrDiffSosok.Enabled := True;
				end;
			end;
		820  :   //AI관리
			begin
				Frm_AIC01.proc_BrNameSet;
				gSosokName := Frm_AIC01.lblSosokNameA1;
				if Tree_List.Tag = 1 then
				begin
					if Frm_AIC01.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_AIC01.lblSosokNameA1 else  // AI-OB 배차지연콜 설정
					if Frm_AIC01.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_AIC01.lblSosokNameA2 else
					if Frm_AIC01.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_AIC01.lblSosokNameA3 ;
					tmrDiffSosok.Enabled := True;
				end;
			end;
		830  :   //AI관리
			begin
				Frm_AIC11.proc_BrNameSet;
				gSosokName := Frm_AIC11.lblSosokNameA1;
				if Tree_List.Tag = 1 then
				begin
					if Frm_AIC11.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_AIC11.lblSosokNameA1 else  // AI-OB 배차지연콜 설정
					if Frm_AIC11.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_AIC11.lblSosokNameA2 else
					if Frm_AIC11.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_AIC11.lblSosokNameA3 ;
					tmrDiffSosok.Enabled := True;
				end;
			end;
		840  :   //AI관리
			begin
				Frm_AIC21.proc_BrNameSet;
				gSosokName := Frm_AIC21.lblSosokNameA1;
				if Tree_List.Tag = 1 then
				begin
					if Frm_AIC21.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_AIC21.lblSosokNameA1 else  // AI-IB 설정
					if Frm_AIC21.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_AIC21.lblSosokNameA2 else
					if Frm_AIC21.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_AIC21.lblSosokNameA3 else
					if Frm_AIC21.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_AIC21.lblSosokNameA4 ;
					tmrDiffSosok.Enabled := True;
				end;
			end;
		900  :   //직원관리
      begin
        Frm_USR.proc_BrNameSet;
        if Tree_List.Tag = 1 then
        begin
          if Frm_USR.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_USR.lblSosokNameA1 else  // 직원관리
          if Frm_USR.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_USR.lblSosokNameA2 else  // 직원권한관리
          if Frm_USR.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_USR.lblSosokNameA3 else  // 직원인증현황
          if Frm_USR.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_USR.lblSosokNameA4 else  // 직원인증(직원)현황
          if Frm_USR.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_USR.lblSosokNameA5 else  // 직원인증(PC)현황
          if Frm_USR.cxPageControl1.ActivePageIndex = 5 then gSosokName := Frm_USR.lblSosokNameA6 else  // 엑셀다운현황
          if Frm_USR.cxPageControl1.ActivePageIndex = 6 then gSosokName := Frm_USR.lblSosokNameA7 else  // 직원콜현황
          if Frm_USR.cxPageControl1.ActivePageIndex = 7 then gSosokName := Frm_USR.lblSosokNameA8 else  // 시간별현황
          if Frm_USR.cxPageControl1.ActivePageIndex = 8 then gSosokName := Frm_USR.lblSosokNameA9 else  // 직원근태현황
          if Frm_USR.cxPageControl1.ActivePageIndex = 9 then gSosokName := Frm_USR.lblSosokNameB1;      // 패밀리권한설정

          tmrDiffSosok.Enabled := True;
        end;
      end;
		1000  :   //광고관리
      begin
        Frm_SMS.proc_BrNameSet;

        if Frm_SMS.cxPageControl1.ActivePageIndex = 1 then
          Frm_SMS.proc_init_filesms;;

        if Tree_List.Tag = 1 then
        begin
          if Frm_SMS.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_SMS.lblSosokNameA3 else  // 조회결과(상세)
          if Frm_SMS.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_SMS.lblSosokNameA4;

          tmrDiffSosok.Enabled := True;
        end;
      end;
		1171  :   //셔틀통계
			begin
				Frm_STT_Shuttle.proc_BrNameSet;

        if Tree_List.Tag = 1 then
        begin
					if Frm_STT_Shuttle.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_STT_Shuttle.lblSosokNameA1 else  // 
					if Frm_STT_Shuttle.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_STT_Shuttle.lblSosokNameA2 else  // 
					if Frm_STT_Shuttle.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_STT_Shuttle.lblSosokNameA3 else  // 
					if Frm_STT_Shuttle.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_STT_Shuttle.lblSosokNameA4;      // 

          tmrDiffSosok.Enabled := True;
				end;
			end;
		1400  :   //설정관리
      begin
        Frm_SET.proc_BrNameSet;

        if Frm_SET.cxPageControl1.ActivePageIndex = 0 then Frm_SET.proc_ChargeModify else
        if Frm_SET.cxPageControl1.ActivePageIndex = 1 then Frm_SET.proc_ChargeSet    else
        if Frm_SET.cxPageControl1.ActivePageIndex = 2 then Frm_SET.proc_GBChargeSet;

        if Tree_List.Tag = 1 then
        begin
          if Frm_SET.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_SET.lblSosokNameA3 else  // 요금제편집
          if Frm_SET.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_SET.lblSosokNameA4 else  // 요금제설정[대표번호]
          if Frm_SET.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_SET.lblSosokNameA5 else  // 요금제설정[법인]
          if Frm_SET.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_SET.lblSosokNameA6 else  // 심야할증요금제 설정
          if Frm_SET.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_SET.lblSosokNameA7;      // CID대표번호DNIS관리

					tmrDiffSosok.Enabled := True;
				end;
			end;
		1600  :   //콜벨관리
			begin
				Frm_BTN.proc_BrNameSet;

//				if Frm_BNT.cxPageControl1.ActivePageIndex = 0 then Frm_BNT.proc_ChargeModify else
//				if Frm_BNT.cxPageControl1.ActivePageIndex = 1 then Frm_BNT.proc_ChargeSet    else
//				if Frm_BNT.cxPageControl1.ActivePageIndex = 2 then Frm_BNT.proc_GBChargeSet;

				if Tree_List.Tag = 1 then
				begin
					if Frm_BTN.cxPageControl1.ActivePageIndex = 0 then gSosokName := Frm_BTN.lbBTNCompany02 else  // 영업사원관리
					if Frm_BTN.cxPageControl1.ActivePageIndex = 1 then gSosokName := Frm_BTN.lbBTNCompany03 else  // 업소관리
					if Frm_BTN.cxPageControl1.ActivePageIndex = 2 then gSosokName := Frm_BTN.lbBTNCompany04 else  // 지사정산
					if Frm_BTN.cxPageControl1.ActivePageIndex = 3 then gSosokName := Frm_BTN.lbBTNCompany05 else  // 영업사원정산
					if Frm_BTN.cxPageControl1.ActivePageIndex = 4 then gSosokName := Frm_BTN.lbBTNCompany06 ;     // 업소정산

					tmrDiffSosok.Enabled := True;
				end;
			end;
		end;
  except
    on e: exception do
    begin
      Log('proc_FormCodeChange Error :' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_FormCodeChange Error :' + E.Message);
    end;
  end;
end;

procedure TFrm_Main.AdvTPTabTabLeftClick(Sender: TObject; Index: Integer;
  APanel: TAdvToolPanel);
begin
  SetDebugeWrite('Main.AdvTPTabTabLeftClick');
  try
  	// 좌측메뉴 펼쳐질때 그리드 스크롤바 숨는걸 방지 한다.
    if APanel.Tag > 5 then
		begin
      APanel.OpenWidth := APanel.OpenWidth + 1;
			APanel.Tag := 0;
    end else
    begin
      case index of
        0: APanel.OpenWidth := 300;
        1: APanel.OpenWidth := 590;
        2: APanel.OpenWidth := 730;
        3: APanel.OpenWidth := 421;
        4: APanel.OpenWidth := 884;
        5: APanel.OpenWidth := 393;
      end;
      APanel.OpenWidth := APanel.OpenWidth - 1;
      APanel.Tag := 10;
    end;

		iPrePosition := APanel.OpenWidth;
		btn_KDWKSearch.Visible := GT_Kakao_AgreeAllocat;
		pnl_KMWkList.Visible := False; 

    Application.ProcessMessages;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.AdvTPTabTabSlideIn(Sender: TObject; Index: Integer;
  APanel: TAdvToolPanel);
begin
  SetDebugeWrite('Main.AdvTPTabTabSlideIn');
  if APanel.Name = 'advTPTPna2' then WkPnlOpen := False;
end;

procedure TFrm_Main.AdvTPTabTabSlideOutDone(Sender: TObject; Index: Integer;
  APanel: TAdvToolPanel);
begin
  SetDebugeWrite('Main.AdvTPTabTabSlideOutDone');
  Application.ProcessMessages;
  try
    case index of
      0 : begin
            BtnAdvPnl1E.Left := APanel.Width - 47;
            BtnAdvPnl1F.Left := APanel.Width - 25;
          end;
      1 : begin
            BtnAdvPnl2E.Left := APanel.Width - 47;
            BtnAdvPnl2F.Left := APanel.Width - 25;
          end;
      2 : begin
            BtnAdvPnl3E.Left := APanel.Width - 47;
            BtnAdvPnl3F.Left := APanel.Width - 25;
          end;
      3 : begin
            BtnAdvPnl4P.Left := APanel.Width - 69;
            BtnAdvPnl4E.Left := APanel.Width - 47;
            BtnAdvPnl4F.Left := APanel.Width - 25;
          end;
      4 : begin
            BtnAdvPnl5E.Left := APanel.Width - 47;
            BtnAdvPnl5F.Left := APanel.Width - 25;
          end;
      5 : begin
            BtnAdvPnl6E.Left := APanel.Width - 47;
            BtnAdvPnl6F.Left := APanel.Width - 25;
          end;
    end;

    case Index of
      0:  Exit;
      1:
        begin
          proc_LeftWorker;
          WkPnlOpen := True;
          stsChk := True;
        end;
      2:  proc_LeftBrCall;
      3:  proc_LeftShareCall;
      4:  proc_LeftGroup;
      5:  proc_BrWk;
    end;

    case index of
      1: begin
           if btnChartShow3.Tag = 0 then
           begin
             pnl_WkConnect.Height := advTPTPna2.Height Div 3;
             btnChartShow3.Tag := 1;
           end;
      end;
      2: begin
           if btnChartShow2.Tag = 0 then
           begin
             pnl_ChartBrCall.Height := advTPTPna3.Height Div 3;
             btnChartShow2.Tag := 1;
           end;
      end;
      5: begin
           if btnChartShow1.Tag = 0 then
           begin
             pnl_Chart.Height := advTPTPna6.Height Div 3;
             btnChartShow1.Tag := 1;
           end;
      end;
    end;
  except
    on e: exception do
    begin
      Assert(False, E.Message);
      ShowMessage('frmMain[AdvTPTabLEFTCLick]:' + e.Message);
    end;
  end;
end;

procedure TFrm_Main.advTPTPna3Resize(Sender: TObject);
var i, iTmp, iUnit : integer;
begin
	SetDebugeWrite('Main.advTPTPna3Resize');
	if (gChartUnitCntAC = 0) then exit;
	if (cbChartKindA2.ItemIndex in [0,2]) and ((cbKindA21.ItemIndex = 0) and (cbKindA22.ItemIndex = 0)) or 
																						((cbKindA21.ItemIndex = 1) and (cbKindA23.ItemIndex = 0)) then
	begin
		if advTPTPna3.Width <= 740 then
		begin
			gChartUnitCntAC := 7;
			btnChartA2.Click;
		end	else
		begin
			//80 유닛당 기준 너비
			iTmp := advTPTPna3.Width - 740;
			iUnit := iTmp Div 80;
			if iUnit > 0 then
			begin
				gChartUnitCntAC := 7 + iUnit;//gChartUnitCnt + iUnit;
				btnChartA2.Click;

			end;
		end;
		gFromIdx := 0;
		btn_PlayBack.Enabled := False;
		btn_PlayBack.Tag := 0;
		btn_Play.Tag := 1;
		btn_Play.Enabled := False;
		for I := 0 to 5 do
		begin
			gChartPageCnt[i] := 0;  //0:대표번호-일반, 1: 대표번호-실시간, 2:대표번호-취소, 3:지사-일반, 4: 지사-실시간, 5:지사-취소
			gChartNowPage[i] := 0;
		end;
		iTmp := 0;
		iTmp := cxGridSetK1.DataController.RecordCount div gChartUnitCntAC;
		if cxGridSetK1.DataController.RecordCount mod gChartUnitCntAC > 0 then iTmp := iTmp + 1;
		gChartPageCnt[0] := iTmp; //대표번호-일반모드 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetK2.DataController.RecordCount div gChartUnitCntAC;
		if cxGridSetK2.DataController.RecordCount mod gChartUnitCntAC > 0 then iTmp := iTmp + 1;
		gChartPageCnt[1] := iTmp; //대표번호-실시간 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetK3.DataController.RecordCount div gChartUnitCntAC;
		if cxGridSetK3.DataController.RecordCount mod gChartUnitCntAC > 0 then iTmp := iTmp + 1;
		gChartPageCnt[2] := iTmp; //대표번호-취소 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetG1.DataController.RecordCount div gChartUnitCntAC;
		if cxGridSetG1.DataController.RecordCount mod gChartUnitCntAC > 0 then iTmp := iTmp + 1;
		gChartPageCnt[3] := iTmp; //지사-일반모드 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetG2.DataController.RecordCount div gChartUnitCntAC;
		if cxGridSetG2.DataController.RecordCount mod gChartUnitCntAC > 0 then iTmp := iTmp + 1;
		gChartPageCnt[4] := iTmp; //지사-실시간모드 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetG2.DataController.RecordCount div gChartUnitCntAC;
		if cxGridSetG2.DataController.RecordCount mod gChartUnitCntAC > 0 then iTmp := iTmp + 1;
		gChartPageCnt[5] := iTmp; //지사-취소모드 페이지 카운트

		if cbKindA21.ItemIndex = 0 then
		begin
			if cxGridSetG1.DataController.RecordCount > gChartUnitCntAC then btn_Play.Enabled := True;
			lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[3]);
		end
		else
		begin
			if cxGridSetK1.DataController.RecordCount > gChartUnitCntAC then btn_Play.Enabled := True;
			lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[0]);
		end;

		gAdvTPTPna3Width := advTPTPna3.Width;
	end;
end;

procedure TFrm_Main.bCTI_CTIConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  SetDebugeWrite('Main.bCTI_CTIConnect');
  try
    pSetCIDState(0);
    GS_KLCNS_ConnectYN := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.bCTI_CTIDisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  SetDebugeWrite('Main.bCTI_CTIDisconnect');
  try
    pSetCIDState(1);
    SetDebugeWrite('bCTI_CTI - DisConnect 6945');

    GS_KLCNS_ConnectYN := False;

    tmrbCTIConnect.Enabled := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.bCTI_CTIError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  SetDebugeWrite('Main.bCTI_CTIError - ' + IntToStr(ErrorCode));
  gbCTI_bCTI_Status := False;
end;

procedure TFrm_Main.bCTI_CTIRead(Sender: TObject; Socket: TCustomWinSocket);
var
  sStr, sData : string;
begin
  SetDebugeWrite('Main.bCTI_CTIRead');
	try
    sStr := Socket.ReceiveText;
		if Trim(sStr) = '' then Exit;

//    if GT_USERIF.CT = 'R134' then Log('BCTI_CTI - Read : ' + sStr, LOGDATAPATHFILE);

    sData := Copy(sStr,Pos(STX,sStr) + 1, Pos(ETX,sStr)-2); // 전문 잘라내기.

    if Copy(sData, 1, 3) = '100' then
    begin
    	try
				GS_JONCidInput.KeyNumber   := Trim(Copy(sData, 23, 14));
				GS_JONCidInput.PhoneNumber := Trim(Copy(sData, 4, 14));
				GS_JONCidInput.ExtNumber   := Trim(Copy(sData, 18, 5));
				GS_JONCidInput.CidCall     := False;

        TimerOCX.Enabled := True;
      except on E: Exception do
    		Assert(False, E.Message);
      end;
    end else
    if Copy(sData, 1, 3) = '200' then
    begin
      gbCTI_bCTI_Status := False;

			trm_CTI.Enabled := False;
			if System.StrUtils.RightStr(sData, 2) = '00' then
      begin
				trm_Time := 27;
				trm_CTI.Enabled := True;
				pnl_TapiCallingStatus.Left := (Width - pnl_TapiCallingStatus.Width) div 2;
				pnl_TapiCallingStatus.top := (Height - pnl_TapiCallingStatus.Height) div 2;
				lb_TapiCallingStatus.Caption := '전화거는중...';
				pnl_TapiCallingStatus.Visible := True;
				pnl_TapiCallingStatus.BringToFront;
			end else
			if System.StrUtils.RightStr(sData, 2) = '10' then
      begin
        GMessagebox('CID 부정확 오류!', CDMSE);
				pnl_TapiCallingStatus.Visible := False;
      end else
			if System.StrUtils.RightStr(sData, 2) = '20' then
      begin
        GMessagebox('MakeCall 실패!', CDMSE);
        pnl_TapiCallingStatus.Visible := False;
      end else
			if System.StrUtils.RightStr(sData, 2) = '99' then
      begin
        GMessagebox('알수없는 오류!', CDMSE);
				pnl_TapiCallingStatus.Visible := False;
      end;
    end;
  except
    on e: Exception do
    begin
      sStr := 'frmMain[bCTI_CTIRead]Error:' + e.Message;
      Assert(False, E.Message);
      GMessagebox(PChar(sStr), CDMSE);
    end;
  end;
end;

procedure TFrm_Main.bGroupSearchClick(Sender: TObject);
begin
  SetDebugeWrite('Main.bGroupSearchClick');
  proc_Group;
end;

procedure TFrm_Main.bNKT_4BSConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  SetDebugeWrite('Main.bNKT_4BSConnect');
  try
    pSetCIDState(0);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.bNKT_4BSDisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  SetDebugeWrite('Main.bNKT_4BSDisconnect');
	Frm_JON54.pnl1.Visible := True;
  try
    pSetCIDState(1);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.bNKT_4BSError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  SetDebugeWrite('Main.bNKT_4BSError - ' + IntToStr(ErrorCode));
	gbCTI_bCTI_Status := False;
	ErrorCode := 0;
end;

procedure TFrm_Main.bNKT_4BSRead(Sender: TObject; Socket: TCustomWinSocket);
var
	sStr, sHead, sBody : string;
	sTmp: string;
	oReadLength, nReadLength, nLen : Integer;
begin
  SetDebugeWrite('Main.bNKT_4BSRead');
	try
		tmr_AliveSend.Enabled := False;
		sStr := Socket.ReceiveText;
		oReadLength := Length(sStr);
		SetDebugeWrite('NKT Read: '+ sStr);

//    if GT_USERIF.CT = 'R134' then Log('NKT Read: '+ sStr, LOGDATAPATHFILE);

//    if GT_NKTXE = 'NKT' then Exit;
    
		if Trim(sStr) = '' then
    begin
      tmr_Alive.Tag := 0;
			tmr_AliveSend.Enabled := True;
      Exit;
    end;
		nReadLength := 0;
		while oReadLength > nReadLength do
		begin
			sHead := copy(sStr, 1, 23);
			if Length(Trim(sHead)) < 1 then Break;
			nLen := StrToIntDef(Trim(copy(sHead, 21, 3)), 0);
			if nLen = 0 then
			begin
				sTmp := 'frmMain[NKT]bNKT sHead ' + sHead;
				SetDebugeWrite(sTmp);
			end;
			sBody := copy(sStr, 24, nLen);
			sTmp := 'frmMain[NKT]bNKT DataArrival ' + sHead + sBody;
			SetDebugeWrite(sTmp);

			DataArrival(sHead + sBody);
			if oReadLength >= Length(sHead + sBody) then
			begin
				sStr := ReplaceAll(sStr, sHead + sBody, '');
				nReadLength := nReadLength + Length(sHead + sBody);
			end;
		end;

    tmr_Alive.Tag := 0;
		tmr_AliveSend.Enabled := True;
	except
		on e: Exception do
		begin
			sStr := 'frmMain[NKT]Error:' + e.Message;
			Assert(False, E.Message);
			GMessagebox(PChar(sStr), CDMSE);
		end;
	end;
end;

procedure TFrm_Main.bSI415Connect(Sender: TObject; Socket: TCustomWinSocket);
var sStr : String;
begin
	//콜마너PBX 접속 - 상전화담원, 관리자
	SetDebugeWrite('Frm_Main.bSI_145Connect');
	try
    pSetCIDState(0);
		if bSI415.Socket.Connected then
		begin
			// 9000. Ping
			sStr := fSI_MakeHeader_Only('9000', '0', '00');
			bSI415.Socket.SendText(sStr);
			iSI415CidHeartBeat := 0;
			gSI415AliveData := '';
			SetDebugeWrite('bSI_145Connect : ' + sStr);

			bSI415CTIConnected := True;
			btn_SI415PBX.visible := False;
			gSI415_C_Close := False;

			frm_JON54.pnl_PBX_1.Enabled := True;

			trm_1011After.enabled := True;
		end;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.bSI415Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
	SetDebugeWrite('Frm_Main.bSI_145Disconnect');
	try
    pSetCIDState(1);
		bSI415CTIConnected := False;

		gSI415_C_Login := False;
		gSI415_C_Close := True;
		gSI415AliveData := '';
		if rdo_Phone_Use.checked then
			btn_SI415PBX.visible := True;

		if Assigned(frm_JON54) and (bSI415.Tag <> 99) and (frm_JON54.pnl_PBX_1 <> nil) then 
		begin	
			frm_JON54.pnl_PBX_1.Enabled := False;
			Screen.Cursor := crDefault;
			frm_JON54.lb_CMNPHONE_Notice1.Caption := '콜마너PHONE 연결이 종료되었습니다. 재실행하여 주십시오.';
			frm_JON54.lb_CMNPHONE_Notice2.Caption := '[재실행]설정 > CID설정 > "LOGIN-콜마너PHONE 실행" 버튼클릭';																			 
		end;			
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.bSI415Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
	SetDebugeWrite('Frm_Main.bSI_145Error - ' + IntToStr(ErrorCode));
	gbCTI_bCTI_Status := False;

	ErrorCode := 0;
end;

procedure TFrm_Main.bSI415Read(Sender: TObject; Socket: TCustomWinSocket);
var
	iLen, iPos : Integer;
	Data: Pointer;
	bEnd : Boolean;
	sTmp : string;
begin
	SetDebugeWrite('Frm_Main.cs_si415_IPCCRead');
	try
		bEnd := False;
		iPos := 0;
		repeat
			iLen := Socket.ReceiveLength;
			if iLen >= 8192 then
			begin
				while iLen > 0 do
				begin
					iLen := Socket.ReceiveLength;
					GetMem(Data, iLen);
					Socket.ReceiveBuf(PChar(Data)^, iLen);
					Move(PChar(Data)^, aSiBuff[iPos], iLen);
					iPos := iPos + iLen;
				end;
			end else
			begin
				GetMem(Data, iLen);
				Socket.ReceiveBuf(PChar(Data)^, iLen);
				Move(PChar(Data)^, aSiBuff[iPos], iLen);
				iPos := iLen;
			end;

			sTmp := Trim(TEncoding.ANSI.GetString(aSiBuff));
			SetDebugeWrite('cs_si415_IPCCRead sTmp: ' + sTmp);
			if (Pos('[', sTmp) < 1) or (Pos(']', sTmp) > 0) or (Trim(sTmp) = '') then 
			begin
				bEnd := True;
//				gsSi415Message := gsSi415Message + sTmp;
				gsSi415_IPCCMessage := Trim(TEncoding.ANSI.GetString(aSiBuff));
				gsSi415_IPCCMessage := StringReplace(gsSi415_IPCCMessage, #13, '', [rfReplaceAll]);
				sTmp := '';
			end else
			begin
			end;
		until	bEnd;
		iSI415CidHeartBeat := 0;

		aSiBuff := aSiBuffInit;    // 초기화
		SetDebugeWrite('cs_si415_IPCCRead : ' + gsSi415_IPCCMessage);
		if gsSi415_IPCCMessage = '' then Exit;

		gsSi415_IPCCMsgFront := gsSi415_IPCCMessage;
		try
			if Pos(']', gsSi415_IPCCMessage) > 0 then
			begin
				while Pos(']', gsSi415_IPCCMessage) > 0 do
				begin
					iPos := System.AnsiStrings.AnsiPos(']', gsSi415_IPCCMessage);
					gsSi415_IPCCMsg := Copy(gsSi415_IPCCMessage, 1, iPos);
					TThread.Queue(Nil, procedure begin pSi415_IPCCExecute(gsSi415_IPCCMsg);  end);
					gsSi415_IPCCMessage := StringReplace(gsSi415_IPCCMessage, gsSi415_IPCCMsg, '', [rfReplaceAll]);
					sleep(400);
        end;
      end else
			begin
				TThread.Queue(Nil, procedure begin pSi415_IPCCExecute(gsSi415_IPCCMessage);  end);
      end;
    except on E: Exception do
      Assert(False, E.Message);
    end;


	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.bSI415_2601Connect(Sender: TObject;
  Socket: TCustomWinSocket);
var sStr : String;
begin
	//콜마너PBX 접속 - 상전화담원, 관리자
	SetDebugeWrite('Frm_Main.bSI415_2601Connect');
	try
    pSetCIDState(0);
		if bSI415_2601.Socket.Connected then
		begin
			// 9000. Ping
			sStr := fSI_MakeHeader_Only('9000', '0', '00');
			bSI415_2601.Socket.SendText(sStr);
			iSI415CidHeartBeat := 0;
			gSI415AliveData := '';
			SetDebugeWrite('bSI415_2601Connect : ' + sStr);

			frm_JON54.pnl_PBX_1.Enabled := True;
			bSI415CTIConnected := True;
			btn_SI415PBX.visible := False;
		end;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.bSI415_2601Disconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
	SetDebugeWrite('Frm_Main.bSI415_2601Disconnect');
	try
    pSetCIDState(1);
		bSI415CTIConnected := False;

		gSI415AliveData := '';
		if rdo_Phone_Use.checked then
			btn_SI415PBX.visible := True;

		if Assigned(frm_JON54) and (bSI415_2601.Tag <> 99) and (frm_JON54.pnl_PBX_1 <> nil) then 
		begin	
			frm_JON54.pnl_PBX_1.Enabled := False;
			Screen.Cursor := crDefault;
			frm_JON54.lb_CMNPHONE_Notice1.Caption := '콜마너PHONE 연결이 종료되었습니다. 재실행하여 주십시오.';
			frm_JON54.lb_CMNPHONE_Notice2.Caption := '[재실행]설정 > CID설정 > "LOGIN-콜마너PHONE 실행" 버튼클릭';																			 
		end;			
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.bSI415_2601Error(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
	SetDebugeWrite('Frm_Main.bSI415_2601Error - ' + IntToStr(ErrorCode));
	gbCTI_bCTI_Status := False;

	ErrorCode := 0;
end;

procedure TFrm_Main.bSI415_2601Read(Sender: TObject; Socket: TCustomWinSocket);
var
	iLen, iPos : Integer;
	Data: Pointer;
	bEnd : Boolean;
	sTmp : string;
begin
	SetDebugeWrite('Frm_Main.bSI415_2601Read');
	try
		bEnd := False;
		iPos := 0;
		repeat
			iLen := Socket.ReceiveLength;
			if iLen >= 8192 then
			begin
				while iLen > 0 do
				begin
					iLen := Socket.ReceiveLength;
					GetMem(Data, iLen);
					Socket.ReceiveBuf(PChar(Data)^, iLen);
					Move(PChar(Data)^, aSiBuff[iPos], iLen);
					iPos := iPos + iLen;
				end;
			end else
			begin
				GetMem(Data, iLen);
				Socket.ReceiveBuf(PChar(Data)^, iLen);
				Move(PChar(Data)^, aSiBuff[iPos], iLen);
				iPos := iLen;
			end;

			sTmp := Trim(TEncoding.ANSI.GetString(aSiBuff));
			if (Pos('[', sTmp) < 1) or (Pos(']', sTmp) > 0) or (Trim(sTmp) = '') then 
			begin
				bEnd := True;
//				gsSi415Message := gsSi415Message + sTmp;
				gsSi415_2601Message := Trim(TEncoding.ANSI.GetString(aSiBuff));
				gsSi415_2601Message := StringReplace(gsSi415_2601Message, #13, '', [rfReplaceAll]);
				sTmp := '';
			end else
			begin
			end;
		until	bEnd;
		iSI415CidHeartBeat := 0;

		aSiBuff := aSiBuffInit;    // 초기화
		SetDebugeWrite('cs_si415_2601Read : ' + gsSi415_2601Message);
		if gsSi415_2601Message = '' then Exit;


		gsSi415_2601MsgFront := gsSi415_2601Message;
		try
			if Pos(']', gsSi415_2601Message) > 0 then
      begin
				while Pos(']', gsSi415_2601Message) > 0 do
				begin
					iPos := System.AnsiStrings.AnsiPos(']', gsSi415_IPCCMessage);
					gsSi415_2601Msg := Copy(gsSi415_2601Message, 1, iPos);
					TThread.Queue(Nil, procedure begin pSi415_2601Execute(gsSi415_2601Msg);  end);
					gsSi415_IPCCMessage := StringReplace(gsSi415_2601Message, gsSi415_2601Msg, '', [rfReplaceAll]);
					sleep(400);
				end;
      end else
			begin
				TThread.Queue(Nil, procedure begin pSi415_2601Execute(gsSi415_2601Message);  end);
			end;
		except on E: Exception do
      Assert(False, E.Message);
    end;

	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.bSI415_AConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
	SetDebugeWrite('Frm_Main.bSI_145Connect');
	try
		// 관리자 로그인 이후 연결이 재 시작되면 자동으로 로그인 처리
		if grpSetPBXLogin.Tag = 1 then
		begin
			pSI_1030_Send(GT_Si415_INFO.Id, GT_Si415_INFO.pw, GT_Si415_INFO.IP);
			gSI415_A_Close := False;
		end;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.bSI415_ADisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
	SetDebugeWrite('Frm_Main.bSI_145Disconnect');
	try
		bSI415_ACTIConnected := False;
		gSI415_A_Login := False;
		gSI415_A_Close := True;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.bSI415_AError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
	ErrorCode := 0;
end;

procedure TFrm_Main.bSI415_ARead(Sender: TObject; Socket: TCustomWinSocket);
var
	iLen, iPos : Integer;
	Data: Pointer;
	bEnd : Boolean;
	sTmp : string;
begin
	SetDebugeWrite('Frm_Main.cs_si415Read');
	try
		bEnd := False;
		iPos := 0;
		repeat
			iLen := Socket.ReceiveLength;
			if iLen >= 8192 then
			begin
				while iLen > 0 do
				begin
					iLen := Socket.ReceiveLength;
					GetMem(Data, iLen);
					Socket.ReceiveBuf(PChar(Data)^, iLen);
					Move(PChar(Data)^, aSiBuff[iPos], iLen);
					iPos := iPos + iLen;
				end;
			end else
			begin
				GetMem(Data, iLen);
				Socket.ReceiveBuf(PChar(Data)^, iLen);
				Move(PChar(Data)^, aSiBuff[iPos], iLen);
				iPos := iLen;
			end;

			sTmp := Trim(TEncoding.ANSI.GetString(aSiBuff));
			if (Pos('[', sTmp) < 1) or (Pos(']', sTmp) > 0) or (Trim(sTmp) = '') then 
			begin
				bEnd := True;
				gsSi415Message := Trim(TEncoding.ANSI.GetString(aSiBuff));
				gsSi415Message := StringReplace(gsSi415Message, #13, '', [rfReplaceAll]);
				sTmp := '';
			end else
			begin
			end;
		until	bEnd;
	
//		Log('gsSi415 : ' + gsSi415Message, LOGDATAPATHFILE);
		aSiBuff := aSiBuffInit;    // 초기화
		SetDebugeWrite('cs_si415Read : ' + gsSi415Message);
		if gsSi415Message = '' then Exit;

		gsSi415MsgFront := gsSi415Message;
    try
			if Pos(']', gsSi415Message) > 0 then
      begin
				while Pos(']', gsSi415Message) > 0 do
				begin
					iPos := System.AnsiStrings.AnsiPos(']', gsSi415Message);
          gsSi415Msg := Copy(gsSi415Message, 1, iPos);
					TThread.Queue(Nil, procedure begin pSi415Execute(gsSi415Msg);  end);
//					Log('gsSi415Msg : ' + gsSi415Msg, LOGDATAPATHFILE);
					gsSi415Message := StringReplace(gsSi415Message, gsSi415Msg, '', [rfReplaceAll]);
					sleep(400);
				end;
			end else
      begin
        TThread.Queue(Nil, procedure begin pSi415Execute(gsSi415Message);  end);
      end;
    except on E: Exception do
      Assert(False, E.Message);
    end;
	except on E: Exception do
    Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.bSSIO_CTIConnect(Sender: TObject; Socket: TCustomWinSocket);
Var sStr : String;
begin
	SetDebugeWrite('Main.bSSIO_CTIConnect');
  try
    if bSSIO_CTI.Socket.Connected then
		begin
			// 9000. Ping
    	sStr := '#';
    	sStr := sStr + '9000';
    	sStr := sStr + Rpad('5001',   4, ' ');
    	sStr := sStr + Rpad(''    ,  20, ' ');
    	sStr := sStr + Rpad(''    ,   2, ' ');
    	sStr := sStr + Rpad(''    ,  15, ' ');
    	sStr := sStr + Rpad(''    ,  15, ' ');
    	sStr := sStr + Rpad(''    ,  15, ' ');
    	sStr := sStr + '$';

			bSSIO_CTI.Socket.SendText(sStr);
      iSSIOCidHeartBeat := 0;
      SetDebugeWrite('tmr_SSIO_Heart : ' + sStr);

      bSSIOCTIConnected := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.bSSIO_CTIDisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  SetDebugeWrite('Main.bSSIO_CTIDisconnect');
  try
    bSSIOCTIConnected := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.bSSIO_CTIError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  SetDebugeWrite('Main.bSSIO_CTIError - ' + IntToStr(ErrorCode));
	gbCTI_bCTI_Status := False;
	ErrorCode := 0;
end;

function TFrm_Main.fSSIO_ErrMsg ( aCode : String ) : String;
begin
  if aCode = '01' then Result := '01.통화중-실패' else

  if aCode = '09' then Result := '09.패킷 사이즈 오류' else
  if aCode = '11' then Result := '11.정의되지않은 패킷번호' else
  if aCode = '12' then Result := '12.사업자코드 에러' else
  if aCode = '13' then Result := '13.Ani 번호 오류' else
	if aCode = '14' then Result := '14.DNIS 번호 오류' else

  if aCode = '20' then Result := '20.Stx(‘#’) 오류' else
  if aCode = '21' then Result := '21.Etx(‘$’) 오류';
end;

procedure TFrm_Main.bSSIO_CTIRead(Sender: TObject; Socket: TCustomWinSocket);
var	bEnd : Boolean;
	iPos : Integer;
	sStr, sTmp : string;
begin
  SetDebugeWrite('Main.bSSIO_CTIRead');
	try
		sStr := Socket.ReceiveText;
		SetDebugeWrite('SSIO Read: '+ sStr);
//		sStr := '#90005001                    00                                             $#81115001                    01                                             $';
		bEnd := False;
		iPos := 0;
		repeat
			sTmp := copy(sStr, 1, 77);

			proc_bSSIOCTIRead(sTmp);

			sStr := StringReplace(sStr, sTmp, '', [rfReplaceAll]);
			
			if Length(sStr) <> 77 then 
			begin
				bEnd := True;
			end else
			begin
			end;
		until	bEnd;
	except
		on e: Exception do
		begin
			sStr := 'frmMain[SSIO]Error:' + e.Message;
			Assert(False, E.Message);
			GMessagebox(PChar(sStr), CDMSE);
		end;
	end;
end;

procedure TFrm_Main.btn1Click(Sender: TObject);
begin
  SetDebugeWrite('Main.btn1Click');
	if pnl2.Visible then
		pnl2.Visible := False
	else
	  pnl2.Visible := True;
end;

procedure TFrm_Main.btn2Click(Sender: TObject);
var
  sBrNo: string;
begin
  SetDebugeWrite('Main.btn2Click');
  try
    sBrNo := scb_BranchCode.Strings[cb_brName.ItemIndex];
    Label32.Caption := func_Excel_Check('', sBrNo);
    if Label32.Caption <> '' then
    begin
      grpSetExcel.Left := (Width - grpSetExcel.Width) div 2;
      grpSetExcel.top := (Height - grpSetExcel.Height) div 2;
      grpSetExcel.Visible := True;
      grpSetExcel.BringToFront;
      grpSetExcel.Hint := grpSetBrch_select.Hint;  // Excel명
      grpSetExcel.Tag  := grpSetBrch_select.Tag;   // 고객번호 숨김 여부
      btn_sms_con.Enabled := True;
      Edit1.Text := '';
      Edit1.SetFocus;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btn3Click(Sender: TObject);
begin
  SetDebugeWrite('Main.btn3Click');
  grpSetBrch_select.Hide;
end;

procedure TFrm_Main.btnAll1Click(Sender: TObject);
Var Param, XmlData, ErrMsg : String;
	ErrCode: Integer;
	vHash : THashSHA2;
	sTmp : string;
begin
	if Trim(Edt_PPw.Text) = '' then
  begin
    ShowMessage('현재 비밀번호를 입력하십시오.');
    Edt_PPw.SetFocus;
    Exit;
  end;

  if Trim(Edt_APw.Text) = '' then
  begin
    ShowMessage('변경 비밀번호를 입력하십시오.');
    Edt_APw.SetFocus;
    Exit;
  end;

  if Trim(Edt_BPw.Text) = '' then
  begin
    ShowMessage('확인 비밀번호를 입력하십시오.');
    Edt_BPw.SetFocus;
    Exit;
	end;

  if Trim(Edt_APw.Text) <> Trim(Edt_BPw.Text) then
  begin
    ShowMessage('비밀번호변경과 비밀번호확인이 일치하지 않습니다.');
    Edt_APw.SetFocus;
    Exit;
  end;

	sTmp := vHash.GetHashString(Trim(Edt_PPw.Text) + 'callmaner#2106Key',SHA256); 
	Param := sTmp;
	sTmp := vHash.GetHashString(Trim(Edt_APw.Text) + 'callmaner#2106Key',SHA256); 
	Param := Param + '│' + sTmp;

	if not RequestBase(GetCallable05('SETPWDMODIFY', 'PAY_OUT.SET_PWD_MODIFY', Param), XmlData, ErrCode, ErrMsg) then
  begin
    GMessageBox(Format('[%d] %s', [ErrCode, ErrMsg]), CDMSE);
    Exit;
  end;

  ShowMessage('변경되었습니다.');

  Edt_PW.SetFocus;
  Pnl_Pay.Height := 94;
end;

procedure TFrm_Main.btnAll2Click(Sender: TObject);
begin
  Pnl_Pay.Height := 94;
end;

procedure TFrm_Main.btnBrExcelDownClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnBrExcelDownClick');
  try
    if GT_USERIF.Excel_Use = 'n' then
    begin
      GMessagebox('[엑셀다운로드허용] 권한이 없습니다. 관리자에게 문의(권한요청) 바랍니다.', CDMSE);
      Exit;
    end;

    if btnBrExcelDown.Tag = 0 then
    begin
      if cxSgBrOrder.DataController.RecordCount = 0 then
      begin
        GMessagebox('자료가 없습니다.', CDMSE);
        Exit;
      end;
      sgExcel := '지사콜현황.xls';
      sgRpExcel := Format('메인>지사콜현황]%s건', [GetMoneyStr(cxSgBrOrder.DataController.RecordCount)]);
      cxGridExcel := cxGridBrOrder;
    end else
    if btnBrExcelDown.Tag = 1 then
    begin
      if cxSgHdOrder.DataController.RecordCount = 0 then
      begin
        GMessagebox('자료가 없습니다.', CDMSE);
        Exit;
      end;
      sgExcel := '본사콜현황.xls';
      sgRpExcel := Format('메인>본사콜현황]%s건', [GetMoneyStr(cxSgHdOrder.DataController.RecordCount)]);
      cxGridExcel := cxGridHdOrder;
    end;
    bgExcelOPT := False;
    proc_excel(0);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btnCallBellMenuDropDownMenuPopup(Sender: TObject;
  var APopupMenu: TPopupMenu; var AHandled: Boolean);
begin
	APopupMenu:= pmCallBell;
end;

procedure TFrm_Main.btnChartA1Click(Sender: TObject);
var
	I : Integer;
begin
	if btnChartShow1.Caption = '그래프보기' then exit;
	case cbKindA11.ItemIndex of
		0:
		begin
			if cbKindA12.ItemIndex = 0 then
			begin
				cxGridA1C1.Visible := False;
				cxGridA1C2ChartALL.DataController.SetRecordCount(0);
				cxGridA1C2.Visible := True;
				cxGridA1C2ChartALL.BeginUpdate();
				try
					cxGridA1C2ChartALL.DataController.RecordCount := cxSgBrWk.DataController.RecordCount;
					 for I := 0 to cxSgBrWk.DataController.RecordCount-1 do
					 begin
						 cxGridA1C2ChartALL.Categories.Values[I] := cxSgBrWk.ViewData.Records[i].Values[1];

						 cxGridA1C2ChartSeries1.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 2];
						 cxGridA1C2ChartSeries2.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 3];
						 cxGridA1C2ChartSeries3.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 4];
						 cxGridA1C2ChartSeries4.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 5];
						 cxGridA1C2ChartSeries5.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 6];
					 end;
				finally
					cxGridA1C2ChartALL.EndUpdate();
				end;
			end	else
			begin
				cxGridA1C2.Visible := False;
				cxGridA1C1.Visible := True;
				cxGridA1C1ChartView1.DataController.SetRecordCount(0);
				cxGridA1C1ChartView1.BeginUpdate();
				try
					cxGridA1C1ChartView1.DataController.RecordCount := cxSgBrWk.DataController.RecordCount;
					for I := 0 to cxSgBrWk.DataController.RecordCount-1 do
					begin
						cxGridA1C1ChartView1.Categories.Values[I] := cxSgBrWk.ViewData.Records[i].Values[1];
						case cbKindA12.ItemIndex of
							1 : cxGridA1C1ChartSeries1.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 2];
							2 : cxGridA1C1ChartSeries1.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 3];
							3 : cxGridA1C1ChartSeries1.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 4];
							4 : cxGridA1C1ChartSeries1.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 5];
							5 : cxGridA1C1ChartSeries1.Values[I] := cxSgBrWk.ViewData.Records[i].Values[ 6];
						end;
					end;
				finally
					cxGridA1C1ChartView1.EndUpdate();
				end;
			end;
		end	else
		begin
			cxGridA1C2.Visible := True;
			cxGridA1C2ChartALL.DataController.SetRecordCount(0);
			cxGridA1C2ChartALL.BeginUpdate();
			try
				cxGridA1C2ChartALL.DataController.RecordCount := 1;
				 for I := 0 to cxSgBrWk.DataController.RecordCount-1 do
				 begin
					 if cbKindA11.Text = cxSgBrWk.ViewData.Records[i].Values[1] then
					 begin
						 cxGridA1C2ChartALL.Categories.Values[0] := cxSgBrWk.ViewData.Records[i].Values[1];

						 cxGridA1C2ChartSeries1.Values[0] := cxSgBrWk.ViewData.Records[i].Values[ 2];
						 cxGridA1C2ChartSeries2.Values[0] := cxSgBrWk.ViewData.Records[i].Values[ 3];
						 cxGridA1C2ChartSeries3.Values[0] := cxSgBrWk.ViewData.Records[i].Values[ 4];
						 cxGridA1C2ChartSeries4.Values[0] := cxSgBrWk.ViewData.Records[i].Values[ 5];
						 cxGridA1C2ChartSeries5.Values[0] := cxSgBrWk.ViewData.Records[i].Values[ 6];
						 Break;
					 end;
				 end;
			finally
				cxGridA1C2ChartALL.EndUpdate();
			end;
		end;
	end;
end;

procedure TFrm_Main.btnChartA2Click(Sender: TObject);
var
	I, iRow : Integer;
	iSetValue, iSetValue_1, iChartUnit : integer;
	ACombo : TcxComboBox;
	AGridSet1, AGridSet2, AGridSet3 : TcxGridDBTableView;
begin
	SetDebugeWrite('Frm_Main.btnChartA2Click');
	try
		if btnChartShow2.Caption = '그래프보기' then exit;
		if cbChartKindA2.ItemIndex = 1 then iChartUnit := gChartUnitCntB else iChartUnit := gChartUnitCntAC;
		case cbKindA21.ItemIndex of
			0:
			begin
				ACombo := cbKindA22;
				AGridSet1 := cxGridSetG1;
				AGridSet2 := cxGridSetG2;
				AGridSet3 := cxGridSetG3;
				cbKindA22.Visible := True;
				cbKindA23.Visible := False;
				iSetValue := 5;
				iSetValue_1 := 6;
			end;
			1:
			begin
				ACombo := cbKindA23;
				AGridSet1 := cxGridSetK1;
				AGridSet2 := cxGridSetK2;
				AGridSet3 := cxGridSetK3;
				cbKindA22.Visible := False;
				cbKindA23.Visible := True;
				iSetValue := 1;
				iSetValue_1 := 1;
			end;
		end;
		iRow := 0;
		if cbKindA25.ItemIndex = 0 then
		begin
			if ACombo.ItemIndex = 0 then
			begin
				cxGridA2C2ChartALL.DataController.SetRecordCount(0);
				cxGridA2C2.Visible := True;
				cxGridA2C2ChartALL.BeginUpdate();
				try
					Case cbKindA24.ItemIndex of
						0:
						begin
							cxGridA2C2ChartALL.DataController.RecordCount := AGridSet1.DataController.RecordCount;
							cxGridChartSeries1.DisplayText := '접수+대기+예약';
							cxGridChartSeries2.DisplayText := '운행+완료';
							cxGridChartSeries3.DisplayText := '문의+취소';
							for I := gFromIdx to AGridSet1.DataController.RecordCount-1 do
							begin
								if iRow > iChartUnit-1 then Break;
								cxGridA2C2ChartALL.Categories.Values[iRow] := AGridSet1.ViewData.Records[i].Values[iSetValue];

								cxGridChartSeries1.Values[iRow] := AGridSet1.ViewData.Records[i].Values[ 2]; // 접수 + 대기 + 예약
								cxGridChartSeries1.DisplayText := '접수+대기+예약';
								cxGridChartSeries2.Values[iRow] := AGridSet1.ViewData.Records[i].Values[ 3]; // 운행 + 완료
								cxGridChartSeries2.DisplayText := '운행+완료';
								cxGridChartSeries3.Values[iRow] := AGridSet1.ViewData.Records[i].Values[ 4]; // 문의 + 취소
								cxGridChartSeries3.DisplayText := '문의+취소';
								cxGridChartSeries4.Visible := False;
								inc(iRow)
							end;
						end;
						1:
						begin
							cxGridA2C2ChartALL.DataController.RecordCount := AGridSet2.DataController.RecordCount;
							cxGridChartSeries1.DisplayText := '접수';
							cxGridChartSeries2.DisplayText := '문의';
							cxGridChartSeries3.DisplayText := '완료';
							cxGridChartSeries4.DisplayText := '취소';
							for I := gFromIdx to AGridSet2.DataController.RecordCount-1 do
							begin
								if iRow > iChartUnit-1 then Break;
								cxGridA2C2ChartALL.Categories.Values[iRow] := AGridSet2.ViewData.Records[i].Values[iSetValue_1];

								cxGridChartSeries1.Values[iRow] := AGridSet2.ViewData.Records[i].Values[ 2]; // 접수
								cxGridChartSeries1.DisplayText := '접수';
								cxGridChartSeries2.Values[iRow] := AGridSet2.ViewData.Records[i].Values[ 3]; // 문의
								cxGridChartSeries2.DisplayText := '문의';
								cxGridChartSeries3.Values[iRow] := AGridSet2.ViewData.Records[i].Values[ 4]; // 완료
								cxGridChartSeries3.DisplayText := '완료';
								cxGridChartSeries4.Visible := True;
								cxGridChartSeries4.Values[iRow] := AGridSet2.ViewData.Records[i].Values[ 5]; // 취소
								cxGridChartSeries4.DisplayText := '취소';
								inc(iRow)
							end;
						end;
						2:
						begin
							cxGridA2C2ChartALL.DataController.RecordCount := AGridSet3.DataController.RecordCount;
							cxGridChartSeries1.DisplayText := '총건수';
							cxGridChartSeries2.DisplayText := '취소';
							cxGridChartSeries3.DisplayText := '취소율';
							for I := gFromIdx to AGridSet3.DataController.RecordCount-1 do
							begin
								if iRow > iChartUnit-1 then Break;
								cxGridA2C2ChartALL.Categories.Values[iRow] := AGridSet3.ViewData.Records[i].Values[iSetValue];

								cxGridChartSeries1.Values[iRow] := AGridSet3.ViewData.Records[i].Values[ 2]; // 총건수
								cxGridChartSeries1.DisplayText := '총건수';
								cxGridChartSeries2.Values[iRow] := AGridSet3.ViewData.Records[i].Values[ 3]; // 취소
								cxGridChartSeries2.DisplayText := '취소';
								cxGridChartSeries3.Values[iRow] := AGridSet3.ViewData.Records[i].Values[ 4]; // 취소율
								cxGridChartSeries3.DisplayText := '취소율';
								cxGridChartSeries4.Visible := False;
								inc(iRow)
							end;
						end;
					End;
				finally
					cxGridA2C2ChartALL.EndUpdate();
				end;
			end	else   //지사 or 대표번호 선택 시
			begin
				cxGridA2C2ChartALL.DataController.SetRecordCount(0);
				cxGridA2C2.Visible := True;
				cxGridA2C2ChartALL.BeginUpdate();
				cxGridA2C2ChartALL.DataController.RecordCount := 1;
				try
					Case cbKindA24.ItemIndex of
						0:
						begin
							cxGridChartSeries4.Visible := False;
							cxGridChartSeries1.DisplayText := '접수+대기+예약';
							cxGridChartSeries2.DisplayText := '운행+완료';
							cxGridChartSeries3.DisplayText := '문의+취소';
							for I := 0 to AGridSet1.DataController.RecordCount-1 do
							begin
								if ACombo.Text = AGridSet1.ViewData.Records[i].Values[iSetValue] then
								begin
									if iRow > 4 then Break;
									cxGridA2C2ChartALL.Categories.Values[0] := AGridSet1.ViewData.Records[i].Values[iSetValue];

									cxGridChartSeries1.Values[0] := AGridSet1.ViewData.Records[i].Values[ 2]; // 접수 + 대기 + 예약
									cxGridChartSeries1.DisplayText := '접수+대기+예약';
									cxGridChartSeries2.Values[0] := AGridSet1.ViewData.Records[i].Values[ 3]; // 운행 + 완료
									cxGridChartSeries2.DisplayText := '운행+완료';
									cxGridChartSeries3.Values[0] := AGridSet1.ViewData.Records[i].Values[ 4]; // 문의 + 취소
									cxGridChartSeries3.DisplayText := '문의+취소';
									Break;
								end;
							end;
						end;
						1:
						begin
							cxGridChartSeries4.Visible := True;
							cxGridChartSeries1.DisplayText := '접수';
							cxGridChartSeries2.DisplayText := '문의';
							cxGridChartSeries3.DisplayText := '완료';
							cxGridChartSeries4.DisplayText := '취소';
							for I := 0 to AGridSet2.DataController.RecordCount-1 do
							begin
								if ACombo.Text = AGridSet2.ViewData.Records[i].Values[iSetValue_1] then
								begin
									cxGridA2C2ChartALL.Categories.Values[0] := AGridSet2.ViewData.Records[i].Values[iSetValue_1];

									cxGridChartSeries1.Values[0] := AGridSet2.ViewData.Records[i].Values[ 2]; // 접수
									cxGridChartSeries1.DisplayText := '접수';
									cxGridChartSeries2.Values[0] := AGridSet2.ViewData.Records[i].Values[ 3]; // 문의
									cxGridChartSeries2.DisplayText := '문의';
									cxGridChartSeries3.Values[0] := AGridSet2.ViewData.Records[i].Values[ 4]; // 완료
									cxGridChartSeries3.DisplayText := '완료';
									cxGridChartSeries4.Values[0] := AGridSet2.ViewData.Records[i].Values[ 5]; // 취소
									cxGridChartSeries4.DisplayText := '취소';
									Break;
								end;
							end;
						end;
						2:
						begin
							cxGridChartSeries4.Visible := False;
							cxGridChartSeries1.DisplayText := '총건수';
							cxGridChartSeries2.DisplayText := '취소';
							cxGridChartSeries3.DisplayText := '취소율';
							for I := 0 to AGridSet3.DataController.RecordCount-1 do
							begin
								if ACombo.Text = AGridSet3.ViewData.Records[i].Values[iSetValue] then
								begin
									cxGridA2C2ChartALL.Categories.Values[0] := AGridSet3.ViewData.Records[i].Values[iSetValue];

									cxGridChartSeries1.Values[0] := AGridSet3.ViewData.Records[i].Values[ 2]; // 총건수
									cxGridChartSeries1.DisplayText := '총건수';
									cxGridChartSeries2.Values[0] := AGridSet3.ViewData.Records[i].Values[ 3]; // 취소
									cxGridChartSeries2.DisplayText := '취소';
									cxGridChartSeries3.Values[0] := AGridSet3.ViewData.Records[i].Values[ 4]; // 취소율
									cxGridChartSeries3.DisplayText := '취소율';
									Break
								end;
							end;
						end;
					End;
				finally
					cxGridA2C2ChartALL.EndUpdate();
				end;
			end;
		end else //상위 7개, 하위7개
		begin
			if ACombo.ItemIndex = 0 then  //지사전체
			begin
				Case cbKindA24.ItemIndex of
					0:
					begin
						cxGridA2C2ChartALL.DataController.RecordCount := AGridSet1.DataController.RecordCount;
						cxGridChartSeries1.DisplayText := '접수+대기+예약';
						cxGridChartSeries2.DisplayText := '운행+완료';
						cxGridChartSeries3.DisplayText := '문의+취소';
						for I := 0 to AGridSet1.DataController.RecordCount-1 do
						begin
							if (cbKindA25.ItemIndex = 2) and (AGridSet1.DataController.RecordCount > 7) and
								 (AGridSet1.ViewData.Records[i].Values[7] < 1) then Continue;

							if iRow > 7 then Break;
							cxGridA2C2ChartALL.Categories.Values[iRow] := AGridSet1.ViewData.Records[i].Values[iSetValue];

							cxGridChartSeries1.Values[iRow] := AGridSet1.ViewData.Records[i].Values[ 2]; // 접수 + 대기 + 예약
							cxGridChartSeries1.DisplayText := '접수+대기+예약';
							cxGridChartSeries2.Values[iRow] := AGridSet1.ViewData.Records[i].Values[ 3]; // 운행 + 완료
							cxGridChartSeries2.DisplayText := '운행+완료';
							cxGridChartSeries3.Values[iRow] := AGridSet1.ViewData.Records[i].Values[ 4]; // 문의 + 취소
							cxGridChartSeries3.DisplayText := '문의+취소';
							cxGridChartSeries4.Visible := False;
							inc(iRow)
						end;
					end;
					1:
					begin
						cxGridA2C2ChartALL.DataController.RecordCount := AGridSet2.DataController.RecordCount;
						cxGridChartSeries1.DisplayText := '접수';
						cxGridChartSeries2.DisplayText := '문의';
						cxGridChartSeries3.DisplayText := '완료';
						cxGridChartSeries4.DisplayText := '취소';
						for I := 0 to AGridSet2.DataController.RecordCount-1 do
						begin
							if (cbKindA25.ItemIndex = 2) and (AGridSet2.DataController.RecordCount > 7) and
								 (AGridSet2.ViewData.Records[i].Values[8] < 1) then Continue;
							if iRow > 7 then Break;
							cxGridA2C2ChartALL.Categories.Values[iRow] := AGridSet2.ViewData.Records[i].Values[iSetValue_1];

							cxGridChartSeries1.Values[iRow] := AGridSet2.ViewData.Records[i].Values[ 2]; // 접수
							cxGridChartSeries1.DisplayText := '접수';
							cxGridChartSeries2.Values[iRow] := AGridSet2.ViewData.Records[i].Values[ 3]; // 문의
							cxGridChartSeries2.DisplayText := '문의';
							cxGridChartSeries3.Values[iRow] := AGridSet2.ViewData.Records[i].Values[ 4]; // 완료
							cxGridChartSeries3.DisplayText := '완료';
							cxGridChartSeries4.Visible := True;
							cxGridChartSeries4.Values[iRow] := AGridSet2.ViewData.Records[i].Values[ 5]; // 취소
							cxGridChartSeries4.DisplayText := '취소';
							inc(iRow)
						end;
					end;
					2:
					begin
						cxGridA2C2ChartALL.DataController.RecordCount := AGridSet3.DataController.RecordCount;
						cxGridChartSeries1.DisplayText := '총건수';
						cxGridChartSeries2.DisplayText := '취소';
						cxGridChartSeries3.DisplayText := '취소율';
						for I := 0 to AGridSet3.DataController.RecordCount-1 do
						begin
							if (cbKindA25.ItemIndex = 2) and (AGridSet3.DataController.RecordCount > 7) and
								 (AGridSet3.ViewData.Records[i].Values[2] < 1) then Continue;
							if iRow > 7 then Break;
							cxGridA2C2ChartALL.Categories.Values[iRow] := AGridSet3.ViewData.Records[i].Values[iSetValue];

							cxGridChartSeries1.Values[iRow] := AGridSet3.ViewData.Records[i].Values[ 2]; // 총건수
							cxGridChartSeries1.DisplayText := '총건수';
							cxGridChartSeries2.Values[iRow] := AGridSet3.ViewData.Records[i].Values[ 3]; // 취소
							cxGridChartSeries2.DisplayText := '취소';
							cxGridChartSeries3.Values[iRow] := AGridSet3.ViewData.Records[i].Values[ 4]; // 취소율
							cxGridChartSeries3.DisplayText := '취소율';
							cxGridChartSeries4.Visible := False;
							inc(iRow)
						end;
					end;
				end;
			end;
		end;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.btnChartA3Click(Sender: TObject);
var
	I, iRow : Integer;
begin
	SetDebugeWrite('Frm_Main.btnChartA3Click');
	try
		if btnChartShow3.Caption = '그래프보기' then exit;
		iRow := 0;
		cxGridA3C2ChartALL.DataController.SetRecordCount(0);
		cxGridA3C2ChartALL.BeginUpdate();
		try
			cxGridA3C2ChartALL.DataController.RecordCount := 6;
			cxGridA3C2ChartALLSeries1.Styles.values := cxSTT_Field3;
			for I := 0 to 5 do
			begin
				case I of
					0:begin
							cxGridA3C2ChartALL.Categories.Values[I] := '출근';
							cxGridA3C2ChartALLSeries1.Values[I] := lbWkToday.Caption;
						end;
					1:begin
							cxGridA3C2ChartALL.Categories.Values[I] := '단순접속';
							cxGridA3C2ChartALLSeries1.Styles.values := cxSTT_Field2;
							cxGridA3C2ChartALLSeries1.Values[I] := lbWkConnect.Caption;
						end;
					2:begin
							cxGridA3C2ChartALL.Categories.Values[I] := '오더접속';
							cxGridA3C2ChartALLSeries1.Values[I] := lbWkConnect_order.Caption;
						end;
					3:begin
							cxGridA3C2ChartALL.Categories.Values[I] := '운행';
							cxGridA3C2ChartALLSeries1.Values[I] := lbWkRun.Caption;
						end;
					4:begin
							cxGridA3C2ChartALL.Categories.Values[I] := '미출근';
							cxGridA3C2ChartALLSeries1.Values[I] := lbWkNoToday.Caption;
						end;
					5:begin
							cxGridA3C2ChartALL.Categories.Values[I] := '정상';
							cxGridA3C2ChartALLSeries1.Values[I] := lbWknormalcy.Caption;
						end;
				end;
			end;
		finally
			cxGridA3C2ChartALL.EndUpdate();
		end;
	except on E: Exception do
		Assert(False, E.Message);
	end;

{
	try
		if btnChartShow3.Caption = '그래프보기' then exit;
		iRow := 0;
		cxGridA3C2ChartALL.DataController.SetRecordCount(0);
		cxGridA3C2ChartALL.BeginUpdate();
		try
			cxGridA3C2ChartALL.DataController.RecordCount := 1;
			I := 0;
			cxGridA3C2ChartALL.Categories.Values[I] := '접속기사';

			cxGridA3C2ChartALLSeries1.Values[I] := lbWkToday.Caption;
			cxGridA3C2ChartALLSeries2.Values[I] := lbWkConnect.Caption;
			cxGridA3C2ChartALLSeries3.Values[I] := lbWkConnect_order.Caption;
			cxGridA3C2ChartALLSeries4.Values[I] := lbWkRun.Caption;
			cxGridA3C2ChartALLSeries5.Values[I] := lbWkNoToday.Caption;
			cxGridA3C2ChartALLSeries6.Values[I] := lbWknormalcy.Caption;
		finally
			cxGridA3C2ChartALL.EndUpdate();
		end;
	except on E: Exception do
		Assert(False, E.Message);
	end;         }
end;

procedure TFrm_Main.btnChartShow1Click(Sender: TObject);
begin
	if pnl_Chart.Height <> 0 then
	begin
		pnl_Chart.Height := 0;
		btnChartShow1.Caption := '그래프보기';
	end else
	begin
		pnl_Chart.Height := advTPTPna6.Height Div 3;
		btnChartShow1.Caption := '그래프닫기';
		btnChartA1.click;
	end;
end;

procedure TFrm_Main.btnChartShow2Click(Sender: TObject);
begin
	if pnl_ChartBrCall.Height <> 0 then
	begin
		pnl_ChartBrCall.Height := 0;
		btnChartShow2.Caption := '그래프보기';
	end	else
	begin
		pnl_ChartBrCall.Height := advTPTPna3.Height Div 3;
		btnChartShow2.Caption := '그래프닫기';
		cxButton2.click;
	end;
end;

procedure TFrm_Main.btnChartShow3Click(Sender: TObject);
begin
	if pnl_WkConnect.Height <> 0 then
	begin
		pnl_WkConnect.Height := 0;
		btnChartShow3.Caption := '그래프보기';
	end	else
	begin
		pnl_WkConnect.Height := advTPTPna2.Height Div 3;
		btnChartShow3.Caption := '그래프닫기';
		btnChartA3.click;
	end;
end;

procedure TFrm_Main.btnCloseClick(Sender: TObject);
begin
	pnl_KMWKList.visible := False;
end;

procedure TFrm_Main.btnConWKUseMapClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnConWKUseMapClick');
  try
    pSetSkinButton(btnConWKUseMap);

    if stsChk then
    begin
      chkConnWK := btnConWKUseMap.Down;
      GS_EnvFile.WriteBool('WORKER_TR', 'ConnWK', chkConnWK);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btnDisGPSClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnDisGPSClick');
  if Chk_DisGPS.Checked then
  begin
    Chk_DisOrder.Checked := True;
  end;
end;

procedure TFrm_Main.btnDisOrderClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnDisOrderClick');
  if (not Chk_DisOrder.Checked) and (cxLabel13.Visible) then
    cxLabel13.Visible := False;
end;

procedure TFrm_Main.BtnFixClick(Sender: TObject);
Var ln_Env : TIniFile;
    i : Integer;
begin
  SetDebugeWrite('Main.BtnFixClick');
  try
    ln_Env := TIniFile.Create(ENVPATHFILE);
    try
      if BtnFix.Down then
      begin
         AdvSplitter1.Visible := True;
         cxPageControl2.Pages[cxPageControl2.ActivePageIndex].Tag := 1;

         try
           if cxPageControl2.ActivePageIndex = 0 then Frm_JON54.cxGrid1.Visible := False else
           if cxPageControl2.ActivePageIndex = 1 then Frm_JON55.cxGrid5.Visible := False else
           if cxPageControl2.ActivePageIndex = 5 then Frm_JON53.cxGrid7.Visible := False;

           if cxPageControl2.ActivePageIndex = 7 then
             cxPageControl2.Height := 500
           else
           if ln_Env.ReadInteger('BMenuHeight', IntToStr(cxPageControl2.ActivePageIndex), 250) < 31 then
             cxPageControl2.Height := 250
           else
             cxPageControl2.Height := ln_Env.ReadInteger('BMenuHeight', IntToStr(cxPageControl2.ActivePageIndex), 250);

         finally
           if cxPageControl2.ActivePageIndex = 0 then Frm_JON54.cxGrid1.Visible := True else
           if cxPageControl2.ActivePageIndex = 1 then Frm_JON55.cxGrid5.Visible := True else
           if cxPageControl2.ActivePageIndex = 5 then Frm_JON53.cxGrid7.Visible := True;
         end;
      end else
      begin
        AdvSplitter1.Visible := False;
        cxPageControl2.Height := 25;
      end;

      if ( GS_JON03HeaderColor ) Or ( cxPageControl2.ActivePageIndex = 4 ) then
      begin
        for i := 0 to JON03_MAX_CNT - 1 do
        begin
          if ( JON03MNG[i].Use = True ) And ( JON03MNG[i].CreateYN = True ) And ( Not Frm_Jon03[i].pJON03Dock.bUNDock ) then
          begin
            Frm_Jon03[i].Grd2.Invalidate;
          end;
        end;
      end;

      if BtnFix.Tag = 0 then
     	  ln_Env.WriteBool('UserGongji', 'BMenuOpen', BtnFix.Down);

      BtnFix.Tag := 0;
    finally
      FreeAndNil(ln_Env);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btnHelpCloseClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnHelpCloseClick');
	pnl2.Visible := False;
end;

procedure TFrm_Main.btnLGUCTSaveClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnLGUCTSaveClick');
  try
    btnLGUCTSave.Enabled := False;
    try
    	GS_EnvFile.WriteString('CID_COMM', 'LGU_ID', Trim(cxEdtLGUCTID.Text));
    	GS_EnvFile.WriteString('CID_COMM', 'LGU_PW', Trim(cxEdtLGUCTPW.Text));
    finally
    	GMessagebox('저장하였습니다.', CDMSI);
      btnLGUCTSave.Enabled := True;
      btnSvrConn.Click;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.BtnPrePageClick(Sender: TObject);
begin
  cxPageControl1.SelectNextPage(False, False);
end;

procedure TFrm_Main.btnMainMenu13Click(Sender: TObject);
var
   pt : TPoint;
begin
  pt := btnMainMenu13.ClientToScreen(Point(0, btnMainMenu13.Height));
  pmMainMenu10.popup( pt.x, pt.y );
end;

procedure TFrm_Main.btnMainMenu1Click(Sender: TObject);
begin
  SetDebugeWrite('Main.btnMainMenu1Click');
  procMainMenuCreateActive(TMenuItem(Sender).Tag);
end;

procedure TFrm_Main.btnRateAnswerClick(Sender: TObject);
Var
    vQ_Rate : TQ_Rate;
begin
  SetDebugeWrite('Main.btnRateAnswerClick');

  if Trim(lblRateA.Hint) = '' then
  begin
  	GMessagebox('답변할 요금을 선택하세요.', CDMSE);
    Exit;
  end;

//  if Trim(lblRateE.Hint) = GT_USERIF.ID then
//  begin
//  	GMessagebox('동일 사용자의 질문은 답변할수 없습니다.', CDMSE);
//    Exit;
//  end;

  vQ_Rate.cmd := '603';
  vQ_Rate.rkey := lblRateA.Hint;
	vQ_Rate.uid  := lblRateE.Hint;
  vQ_Rate.unm :=  '';
  vQ_Rate.sta :=  '';
  vQ_Rate.staddr := '';
  vQ_Rate.via := '';
  vQ_Rate.eda := '';
  vQ_Rate.edaddr := '';
  vQ_Rate.rate := '';
  vQ_Rate.qtm := '';
  vQ_Rate.aid := GT_USERIF.ID;
  vQ_Rate.anm := GT_USERIF.NM;
  vQ_Rate.arate := IntToStr(curRate.Value);
  if LbmeoBigo.Visible then vQ_Rate.amsg := LbmeoBigo.Caption
                       else vQ_Rate.amsg := edtMemo.Text;
  vQ_Rate.atm := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);

  pSet603QRateAnswer(vQ_Rate);

  cxgrpQRHead.Hint := '';
  lblRateA.Hint := '';
  lblRateA.Tag  := 0;
  curRate.Value := 0;
  curRate.Enabled := False;
  lblRateE.Hint := '';
  LbmeoBigo.Caption := '요금설명';
  lbmeoBigo.Visible := True;
  edtMemo.Text := '';
  edtMemo.Enabled := False;
end;

procedure TFrm_Main.BtnNexPageClick(Sender: TObject);
begin
  cxPageControl1.SelectNextPage(True, False);
end;

procedure TFrm_Main.btnPBXLoginClick(Sender: TObject);
begin
	if edtPBXId.Text = '' then
	begin
		GMessagebox('아이디를 입력하세요.', CDMSE);
		Exit;
	end;
	procExecPBX(True,'CMNIPCC') ;

	GT_Si415_INFO.Id := edtPBXId.Text;
	GT_Si415_INFO.pw := edtPBXPw.Text;
	GT_Si415_INFO.IP := GS_EnvFile.ReadString('CID_COMM', 'PBX_IP',  '');

	if GT_Si415_INFO.IP = '' then
	begin
		GMessagebox('콜마너IPCC 연결 서버정보가 없습니다.' + #13#10 + #13#10
							+ '[설정>CID설정>서버IP주소]에 IP주소를 입력하신 뒤'+ #13#10
							+ 'Login정보저장을 눌러주세요', CDMSE);

		btnPBXLoginExit.Click;
		Menu307Click(Menu1414);

		Exit;
	end;

	grpSetPBXLogin.Tag := 1;
	if not gSI415_A_Login then
	begin
		bSi415_A.Active := False;
	end;
	bSi415_A.Active := True;
end;

procedure TFrm_Main.btnPBXLoginExitClick(Sender: TObject);
begin
  grpSetPBXLogin.Visible := False;
end;

procedure TFrm_Main.btnSelOrderUseMapClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnSelOrderUseMapClick');
  pSetSkinButton(btnSelOrderUseMap);

  if stsChk then
	begin
    chkOnlyWK := btnSelOrderUseMap.Down;
		GS_EnvFile.WriteBool('WORKER_TR', 'OnlyWK', chkOnlyWK);
	end;
end;

procedure TFrm_Main.btnSelWKUseMapClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnSelWKUseMapClick');
  pSetSkinButton(btnSelWKUseMap);

  if stsChk then
  begin
    chkSelWK := btnSelWKUseMap.Down;
    GS_EnvFile.WriteBool('WORKER_TR', 'SelWK', chkSelWK);
  end;
end;

procedure TFrm_Main.btnSetJonAutoClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnSetJonAutoClick');
  pSetSkinButton(btnSetJonAuto);

	GS_WKCON_AUTO := btnSetJonAuto.Down;
	GS_EnvFile.WriteBool('WKSEARCH', 'WKSEARCHAUTO', GS_WKCON_AUTO);
end;

procedure TFrm_Main.btnSvrConnClick(Sender: TObject);
begin
	SetDebugeWrite('Main.btnSetJonAutoClick');
//  btnSvrDisConn.Click;
	SetCIDReConnect;
end;

procedure TFrm_Main.btnSvrDisConnClick(Sender: TObject);
begin
  try
    Log('try DisConnect', HEARTLOGPATHFILE);

    btnCidExit.Enabled := True;
    btnSvrDisConn.Tag := 1;

    // NKT
    if bNKT_4BS.Socket.Connected then bNKT_4BS.Close;
    tmr_AliveSend.Enabled := False;

    // LGUCT
    if xCTI_CTI.Socket.Connected then xCTI_CTI.Close;
    tmrxCTIConnect.Enabled := False;

    // BCTI
    if bCTI_CTI.Socket.Connected then bCTI_CTI.Close;
    tmrbCTIConnect.Enabled := False;

    //구버전
    if ipwCID.Socket.Connected then ipwCID.Close;
    tmr_CID_check.Enabled := False;

    //신버전
    if xeCID.Socket.Connected then xeCID.Close;;	 //즉시 접속종료
    tmr_xeCID_check.Tag := 99; //여기서 멈췄다는 표시
    tmr_xeCID_check.Enabled := False;

    // win10버전
    try
      if IdXECID.Connected then
      begin
        IdXECID.IOHandler.InputBuffer.clear;
        IdXECID.IOHandler.CloseGracefully;
        IdXECID.Disconnect;
      end;
    except
    end;

    // SSIT
    if bSSIO_CTI.Socket.Connected then bSSIO_CTI.Close;;
    tmr_SSIO_check.Enabled := False;

    // SI415
    if bSI415.Socket.Connected then bSI415.Close;
    if bSI415_2601.Socket.Connected then bSI415_2601.Close;

    // UDP
    if IdUDPCidRecvServer.Active then
    begin
      IdUDPCidRecvServer.Tag := 99;
      IdUDPCidRecvServer.Active := False;
    end;

    pSetCIDState(1);
  except
  end;
end;

function TFrm_Main.SetCIDReConnect : Boolean;
  procedure pinit( btf : Boolean );
  begin
    ed_Number.Enabled := btf; // 내선
    ed_CID_Ip1.Enabled := btf; // IP
    ed_CID_Ip2.Enabled := btf; // IP
    rchk_Use.Enabled := btf; // CID사용 여부
    btnSvrConn.Enabled := btf; // 연결버튼 활성화.
    btnCidExit.Enabled := btf;
  end;

var
  ss_SendText, ls_msg, sNumber : string;
  iCnt: Integer;
begin
	SetDebugeWrite('Main.SetCIDReConnect');
  try
    Result := False;
    btnSvrDisConn.Tag := 0;  // 중간에 연결 종료 클릭 체크

    gsCidEnCoding := '9999';  //  최초연결여부

    // 현재 사용버전 및 같은 프로그램이 실행되어 있으면 CID 셋팅을 하지 않는다.
    if GS_EXEC_GUBUN = 0 then Exit;

		if ( trim(ed_Number.Text) = '' ) And ( cxCIDList.ItemIndex <> 3 ) then // 시사일오-마술피리가 아니면 내선번호확인
		begin
      GMessagebox('내선번호 확인해 주세요', CDMSE);
      ed_Number.SetFocus;
      Exit;
    end;

    lblCidState.Caption := FCID_CON_I;

		iCidConnectErrCnt := 0;

		GS_EnvFile.WriteInteger('CID_COMM', 'GUBUN' , cxCIDList.ItemIndex);

		if cxCIDList.ItemIndex = 0 then GT_OCX := 'CXE' else
		if cxCIDList.ItemIndex = 1 then GT_OCX := 'NKT' else
		if cxCIDList.ItemIndex = 2 then GT_OCX := 'KLCNS' else
		if cxCIDList.ItemIndex = 3 then GT_OCX := 'SSIT' else
		if cxCIDList.ItemIndex = 4 then GT_OCX := 'LGUCT' else
		if cxCIDList.ItemIndex = 5 then GT_OCX := 'SI415' else //PBX
		if cxCIDList.ItemIndex = 6 then GT_OCX := 'SKY' ; //맑은하늘

		if ( GT_OCX = 'CXE' ) or ( GT_OCX = 'SKY' ) then ProcessKill;

    //------------------------------------------------------------------
    // SSIO 또는 NKT는 CXE와 동시에 실행 가능
    if GT_OCX = 'SSIO' then
    begin
			bSSIO_CTI.Active := False;
      tmr_SSIO_check.Tag := 0;
			tmr_SSIO_check.Interval := 500;
      tmr_SSIO_check.Tag := 0;
      tmr_SSIO_check.Enabled := True;

      if ( Not rchk_Use.Checked ) And ( Not cxChkCidSvrIPUse.Checked ) then btnCTISettingClose.Click;
    end else
		if GT_OCX = 'SSIT' then
    begin
      // Cid 최종 설정값을 일단 저장한다.
      Proc_CIDSetSave;

			bSSIO_CTI.Active := False;
			tmr_SSIO_check.Enabled := False;

  		if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
      begin
        if not IdUDPCidRecvServer.Active then
				begin
          IdUDPCidRecvServer.Tag := 0;
          IdUDPCidRecvServer.DefaultPort := 25376;
          IdUDPCidRecvServer.Active := True;
          pSetCIDState(0);
        end;
      end;

      if ( Not rchk_Use.Checked ) And ( Not cxChkCidSvrIPUse.Checked ) then btnCTISettingClose.Click;
		end else
		if GT_OCX = 'SI415' then
		begin
			trm_IPCCSetting.Enabled := True;

			// Cid 최종 설정값을 일단 저장한다.
			Proc_CIDSetSave;

			bSI415.Active := True;
			bSI415_2601.Active := True;
//			tmr_SI415check.Enabled := False;
			if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
			begin
				if not IdUDPCidRecvServer.Active then
				begin
          IdUDPCidRecvServer.Tag := 0;
					IdUDPCidRecvServer.DefaultPort := 25392;
					IdUDPCidRecvServer.Active := True;
          pSetCIDState(0);
				end;
			end;

			if ( Not rchk_Use.Checked ) And ( Not cxChkCidSvrIPUse.Checked ) then btnCTISettingClose.Click;
		end else
		if GT_OCX = 'NKT' then
    begin
			bNKT_4BS.Active := True;
			tmr_AliveSend.Interval := 500;
      tmr_Alive.Tag := 0;
			tmr_AliveSend.Enabled := True;

			rb_HeadSet.Enabled := True;
			rb_Receiver.Enabled := True;
      cxLabel17.Visible := False;
      Shape21.Visible := False;
      rb_HeadSet.Visible := False;
      rb_Receiver.Visible := False;

      frm_JON54.btn_PickUpPhone.Enabled := True;
      frm_JON54.btn_HangUp     .Enabled := True;

      if ( Not rchk_Use.Checked ) And ( Not cxChkCidSvrIPUse.Checked ) then btnCTISettingClose.Click;
    end else
    if GT_OCX = 'LGUCT' then
    begin
      xCTI_CTI.Active := False;
      tmrxCTIConnect.Tag := 0;
      tmrxCTIConnect.Enabled := True;
    end;
    //------------------------------------------------------------------

    gsCIDConnectIP := '';
    btnCidExit.Enabled := False;

    if ( Not rchk_Use.Checked ) And ( Not cxChkCidSvrIPUse.Checked ) then
    begin
			xeCID.Tag := 0; // 데이터 받았다는 확인을 한다.
			tmr_xeCID_check.Tag := 99; //여기서 멈췄다는 표시
			tmr_xeCID_check.Enabled := False;
			xeCID.Active := False;	 //즉시 접속종료
      if (GT_OCX <> 'SSIT') And (GT_OCX <> 'SI415') then lblCidState.Caption := FCID_CON_N;

      btnCidExit.Enabled := True;
      Exit;
    end;

    if GT_OCX = 'KLCNS' then
    begin
      // Cid 최종 설정값을 일단 저장한다.
      Proc_CIDSetSave;

      xCTI_CTI.Active := False;
      tmrxCTIConnect.Tag := 0;
      tmrxCTIConnect.Enabled := True;
    end else
    if GT_OCX = 'BCTI' then
    begin
      bCTI_CTI.Active := False;
      tmrbCTIConnect.Tag := 0;
      tmrbCTIConnect.Enabled := True;
    end else
		begin    //XECID, SKY
      if rchk_Use.Checked then
      begin
				if ( Trim(ed_CID_Ip1.Text) = '' ) and ( RB_SvrUse1.Checked ) then
        begin
          GMessagebox('서버 IP1을 확인해 주세요', CDMSE);
          lblCidState.Caption := FCID_CON_N;
          ed_CID_Ip1.SetFocus;
          btnCidExit.Enabled := True;
          Exit;
        end;

        if ( Trim(ed_CID_Ip2.Text) = '' ) and ( RB_SvrUse2.Checked ) then
        begin
          GMessagebox('서버 IP2를 확인해 주세요', CDMSE);
          lblCidState.Caption := FCID_CON_N;
          ed_CID_Ip2.SetFocus;
          btnCidExit.Enabled := True;
          Exit;
        end;
      end;

      if cxChkCidSvrIPUse.Checked then
      begin
        if CbCidSvrIP.ItemIndex = -1 then
        begin
          GMessagebox('서버명을 확인해 주세요', CDMSE);
          lblCidState.Caption := FCID_CON_N;
          CbCidSvrIP.SetFocus;
          btnCidExit.Enabled := True;
          Exit;
        end;
      end;
			if GT_OCX = 'CTI_Com' then
			begin
				// CTI서버에 접속하여 CID 정보 받아올때,,
			end else //GT_OCX := 'CXE' , 'SKY'
			begin
				GS_CleanSKYUse := False;
				if GT_OCX = 'SKY' then GS_CleanSKYUse := True ;
				GS_EnvFile.WriteBool('CID_COMM', 'CLEANSKY' , GS_CleanSKYUse); //맑은하늘 전화기 사용값 적용

				// Cid 최종 설정값을 일단 저장한다.
				Proc_CIDSetSave;

        pinit(False);
        try
          //tmr_CID_check.Tag     := 20;  // cid 연결유지 타이머 정지.
          tmr_CID_check.Enabled := False;
          xeCID.Active := False;

					tmr_XECID_check.Enabled := False;

					// CAT, CXE 여부 구분
          CidServerVersionCheck;

					if ( ( GT_OCX = 'NKT' ) And ( gsCidVersion <> 'CXE' ) ) Or
						 ( ( GT_OCX = 'SSIO') And ( gsCidVersion <> 'CXE' ) ) Or
						 ( ( GT_OCX = 'SSIT') And ( gsCidVersion <> 'CXE' ) ) or
						 ( ( GT_OCX = 'SI415') And ( gsCidVersion <> 'CXE' ) ) then
          begin
            btnCidExit.Enabled := True;
            Exit;
          end;

          // Client socket 재시작.
					if GT_USERIF.ID <> '' then
          begin
    				Server_CID.Active := True;
						server_mdrive.Active := True;
            server_speed.Active := True;
					end;
        except
          pinit(True);
          lblCidState.Caption := FCID_CON_N;
        end;

        imgCID.Visible := True;

        try
          if ( gsCidVersion = 'OLD' ) Or ( gsCidVersion = 'CAT' ) then
          begin
            if gsCidVersion <> 'CAT' then
            begin
              try // CID 구버전 프로그램으로 로그인 시도를 한다.
                ipwCID.Close;
                if UpperCase(copy(ed_CID_Ip1.Text, 1, 2)) = 'LO' then
                  ipwCID.Host := GT_USERIF.IP
                else
                begin
                  if rchk_Use.Checked then
                  begin
                    if RB_SvrUse1.Checked then ipwCID.Host := ed_CID_Ip1.Text else
                    if RB_SvrUse2.Checked then ipwCID.Host := ed_CID_Ip2.Text;
                  end else
                  if cxChkCidSvrIPUse.Checked then ipwCID.Host := CbCidSvrIP.Hint;
                end;
                ipwCID.Port := 8888;
                //ipwCID.Timeout := 1000;
                Log(Format('OLD try Connect [%s]',[ipwCID.Host]), HEARTLOGPATHFILE);
                ipwCID.Active := True;
                iCnt := 0;
                while ((iCnt < 15) and (ipwCID.Socket.Connected = False)) do
                begin
                  if btnSvrDisConn.Tag = 1 then
                  begin
                    pinit(True);
                    Exit;
                  end;
                  Application.ProcessMessages;
                  // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
                  Sleep(200);
                  Inc(iCnt);
                end;
                //Sleep(100);
                if ipwCID.Socket.Connected = True then
                begin
                  ss_SendText := ed_Number.Text + '/' + GT_USERIF.IP + #13#10;
                  ipwCID.Socket.SendText(ss_SendText);
                  // 구버전으로 로그인 전문을 보낸다.
                  pSetCIDState(2);
                end else
                begin
                  pSetCIDState(3);
                end;
              except
                pSetCIDState(3);
              end;
            end else
            begin
              pSetCIDState(3);
            end;
            sNumber := ed_Number.Text;
            gsInternalNumber := ed_Number.Text;

            if cxCIDImgList.Tag <> 2 then
            begin
              try
                //tmr_CID_check.Tag     := 20;  // cid 연결유지 타이머 정지.
                tmr_CID_check.Enabled := False;
                if ipwCID.Socket.Connected = True then
                  ipwCID.Close;

                //ipwCID.Disconnect;   // CID 연결 컴포넌트를 IPWorks 로 변경함. 080809.
                ipwCID.Port := GT_CAT_PORT.InboundPort;
                // 9457. 2008-08-09 최도순
                if RB_SvrUse1.Checked then ipwCID.Host := ed_CID_Ip1.Text else
                if RB_SvrUse2.Checked then ipwCID.Host := ed_CID_Ip2.Text;

                if cxChkCidSvrIPUse.Checked then ipwCID.Host := CbCidSvrIP.Hint;
                //ipwCID.Timeout := 1000;
                Log(Format('OLD try Connect [%s]',[ipwCID.Host]), HEARTLOGPATHFILE);
                ipwCID.Active := True;
                iCnt := 0;
                while ((iCnt < 15) and (ipwCID.Socket.Connected = False)) do
                begin
                  if btnSvrDisConn.Tag = 1 then
                  begin
                    pinit(True);
                    Exit;
                  end;
                  Application.ProcessMessages;
                  // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
                  Sleep(200);
                  Inc(iCnt);
                end;
                ss_SendText := CTI_MakeLoginStruct(sNumber);

                if ipwCID.Socket.Connected = True then
                begin
                  gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
                  iCnt := 0;
                  ipwCID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
                  ipwCID.Socket.SendText(ss_SendText);
                  while ((iCnt < 16) and (ipwCID.Tag = 77)) do
                  begin
                    if btnSvrDisConn.Tag = 1 then
                    begin
                      pinit(True);
                      Exit;
                    end;
                    Application.ProcessMessages;
                    // CIDServer 로 부터 연결성공 전문 받을때까지 대기한다.
                    Sleep(200);
                    Inc(iCnt);
                  end;

                  // 결과값[로그인 성공에 대한 응답 전문] 확인.  gsCIDMessage --> ipwCID 이밴트에서 읽어온다.
									if ((gsCIDMessage <> '') and (Func_New_Cid(gsCIDMessage))) then
                  begin
                    GT_CID_NEW := '1';
                    pSetCIDState(0);
                    tmr_CID_check.Tag := 0;
                    tmr_CID_check.Enabled := True;
                    // CID Server 신버전 연결 감시 타이머 시작.
                  end else
                  begin
                    GT_CID_NEW := '0';
                    pSetCIDState(2);
                    tmr_CID_check.Enabled := False;
                    // CID Server 신버전 연결 감시 타이머 종료.
                  end;
                end else
                begin
                  GMessagebox('CID서버와 연결을 할 수 없습니다. CID서버 IP를 확인해주세요!', CDMSE);
                  pinit(True);
                  Exit;
                end;
              except
                GT_CID_NEW := '0';
                pSetCIDState(1);
                SetDebugeWrite('xCTI_CTI - DisConnect 7449');
              end;
            end;

            if gsCidVersion = 'CAT' then
            begin // CAT:신버전, OLD:구버전
              tmr_CID_check.Tag := 0;
              tmr_CID_check.Enabled := True;
              // CID Server 신버전 연결 감시 타이머 시작.
            end;
          end else
          if gsCidVersion = 'CXE' then
          begin
            GT_CID_NEW := '2';
            pSetCIDState(0);
						tmr_xeCID_check.Tag := 0;
						tmr_xeCID_check.Enabled := True;
						iXeCidHeartBeat := 0;
          end;
				except
          on E: Exception do
          begin
            ipwCID.Close;
            xeCID.Close;

            ls_msg := '서버접속 중 문제가 발생했습니다' + #13#10 + 'CID_IP를 확인하세요';
            GMessagebox(ls_msg, CDMSE);
            pSetCIDState(1);

            SetDebugeWrite('xeCid - DisConnect 7481');
            pinit(True);
            Exit;
          end;
        end;
        pinit(True);
			end;
			GS_EnvFile.WriteBool('CID_COMM', 'CLEANSKY' , GS_CleanSKYUse); //맑은하늘 전화기 사용값 적용
    end;

		gsInternalNumber := ed_Number.Text;
    GT_CIDINFO.NaeSun := ed_Number.Text;

    // Cid 설정값을 저장한다.
    Proc_CIDSetSave;

    Result := True;

    GT_CIDINFO.NaeSun := gsInternalNumber;
    sbar_Message.Panels[10].Text := '[' + GT_CIDINFO.NaeSun + ']';

    btnCidExit.Enabled := True;
    btnCTISettingClose.Click;
  except on E: Exception do
    begin
      btnCidExit.Enabled := True;
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.btnWideClick(Sender: TObject);
Var i : Integer;
begin
  if ( btnWide.Hint = '' ) then
  begin
    for i := 0 to cxPageControl1.PageCount - 1 do
    begin
      cxPageControl1.Pages[i].TabVisible := False;
    end;

//    for i := 0 to JON03_MAX_CNT - 1 do
//    begin
//      if ( JON03MNG[i].Use = True ) And ( JON03MNG[i].CreateYN = True ) then
//      begin
//        Frm_Jon03[i].cxTCOrderState.Visible := False;
//        if Not Frm_Jon03[i].cxTCOrderState.Visible then
//        begin
//          Frm_Jon03[i].cxTCOrderState.TabIndex := 0;
//          if Frm_Jon03[i].lbl_JONSrc_Alert1.Visible then Frm_Jon03[i].lbl_JONSrc_Alert.Visible := True;
//        end else
//        begin
//          if Frm_Jon03[i].lbl_JONSrc_Alert1.Visible then Frm_Jon03[i].lbl_JONSrc_Alert.Visible := False;
//        end;
//      end;
//    end;

    btnWide.Hint := '1';
  end else
  begin
    if ( BtnFix.Down ) And ( btnWide.Hint = '1' ) then
    begin
      btnWide.Tag := 1;
      btnWide.Hint := '2';
      BtnFix.Down := False;
      BtnFixClick(BtnFix);
      Exit;
    end;

    for i := 0 to cxPageControl1.PageCount - 1 do
    begin
      cxPageControl1.Pages[i].TabVisible := True;
    end;

//    for i := 0 to JON03_MAX_CNT - 1 do
//    begin
//      if ( JON03MNG[i].Use = True ) And ( JON03MNG[i].CreateYN = True ) then
//      begin
//        if GS_COUNSEL_SSEL10 then
//        begin
//          Frm_Jon03[i].cxTCOrderState.Visible := True;
//          if Not Frm_Jon03[i].cxTCOrderState.Visible then
//          begin
//            Frm_Jon03[i].cxTCOrderState.TabIndex := 0;
//            if Frm_Jon03[i].lbl_JONSrc_Alert1.Visible then Frm_Jon03[i].lbl_JONSrc_Alert.Visible := True;
//          end else
//          begin
//            if Frm_Jon03[i].lbl_JONSrc_Alert1.Visible then Frm_Jon03[i].lbl_JONSrc_Alert.Visible := False;
//          end;
//        end;
//      end;
//    end;

    btnWide.Hint := '';
    if btnWide.Tag = 1 then
    begin
      BtnFix.Down := True;
      BtnFixClick(BtnFix);
      btnWide.Tag := 0;
    end;
  end;
  cxPageControl1.Tag := 10;
  cxPageControl1.ActivePageIndex := iLastActivePage;
end;

procedure TFrm_Main.btnWkConnectClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnWkConnectClick');
  try
    pSetSkinButton(btnWkConnect);

  	if btnWkConnect.Down then
  	begin
  		btnWkNoToday.Down := False;
      pSetSkinButton(btnWkNoToday);
  		btnWknormalcy.Down := True;
      pSetSkinButton(btnWknormalcy);
  	end;
    RbButton9.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btnWkConnect_OrderClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnWkConnect_OrderClick');
  try
    pSetSkinButton(btnWkConnect_order);

  	if btnWkConnect_order.Down then
  	begin
  		btnWkNoToday.Down := False;
      pSetSkinButton(btnWkNoToday);
  		btnWknormalcy.Down := True;
      pSetSkinButton(btnWknormalcy);
  	end;
    RbButton9.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btnWknormalcyClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnWknormalcyClick');
  try
    pSetSkinButton(btnWknormalcy);

  	if not btnWknormalcy.Down then
    begin
  		btnWkConnect.Down := False;
      pSetSkinButton(btnWkConnect);
  		btnWkConnect_order.Down := False;
      pSetSkinButton(btnWkConnect_order);
  		btnWkToday.Down := False;
      pSetSkinButton(btnWkToday);
  		btnWkRun.Down := False;
      pSetSkinButton(btnWkRun);
    end else
    if (btnWkConnect.Down) then
    begin
      btnWkConnect.Down := False;
      pSetSkinButton(btnWkConnect);
    end;
    RbButton9.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btnWkNoTodayClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnWkNoTodayClick');
  try
    pSetSkinButton(btnWkNoToday);

    if btnWkNoToday.Down then
    begin
  		btnWkConnect.Down := False;
      pSetSkinButton(btnWkConnect);
  		btnWkConnect_order.Down := False;
      pSetSkinButton(btnWkConnect_order);
  		btnWkToday.Down := False;
      pSetSkinButton(btnWkToday);
  		btnWkRun.Down := False;
      pSetSkinButton(btnWkRun);
  	end;
    RbButton9.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btnWkRunClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnWkRunClick');
  try
    pSetSkinButton(btnWkRun);

  	if btnWkRun.Down then
  	begin
  		btnWkNoToday.Down := False;
      pSetSkinButton(btnWkNoToday);
  		btnWknormalcy.Down := True;
      pSetSkinButton(btnWknormalcy);
  	end;
    RbButton9.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btnWkTodayClick(Sender: TObject);
begin
  SetDebugeWrite('Main.btnWkTodayClick');
  try
    pSetSkinButton(btnWkToday);

    if btnWkToday.Down then
    begin
      btnWkNoToday.Down := False;
      pSetSkinButton(btnWkNoToday);
      btnWknormalcy.Down := True;
      pSetSkinButton(btnWknormalcy);
    end;
    RbButton9.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cbApplyRateClick(Sender: TObject);
begin
  SetDebugeWrite('Main.rbDefaultRateClick');
	GB_RQ_APPLYRATE := TcxCheckBox(Sender).Checked;
	GS_EnvFile.WriteBool('COUNSEL', 'RQ_APPLYRATE', GB_RQ_APPLYRATE);
end;

procedure TFrm_Main.cbbShareCallPropertiesChange(Sender: TObject);
var
  Sec: Integer;
begin
  SetDebugeWrite('Main.cbbShareCallPropertiesChange');
  try
    Sec := StrToIntDef(cbbShareCall.Text, -1);

    if (Sec > -1) and not advTPTPna4.Locked then
    begin
      if Application.MessageBox(
          PChar('[공유콜] 자동검색은 해당 탭이 고정된 상태에서 동작가능합니다.' + #13#10
              + '(공유탭을 고정하시겠습니까?)'), '공유콜', MB_YESNO + MB_ICONQUESTION) = IDYES then
      begin
        AdvTPTab.RollOut(advTPTPna4);
        advTPTPna4.Locked := True;
      end else
      begin
        lblShareCallTime.Visible := False;
        tmrShareCall.Tag := -1;
        tmrShareCall.Enabled := False;
        Exit;
      end;
    end;

    tmrShareCall.Tag := Sec;
    tmrShareCall.Enabled := not (Sec = -1);
    lblShareCallTime.Visible := not (Sec = -1);
    lblShareCallTime.Caption := IntToStr(Sec);
    cxButton7.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cbbSidoPropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('Main.cbbSidoPropertiesChange');
  try
    if GONGuCALLYN = 'y' then
      RequestDataArea(cbbGugun, cbbSido.Text, '', True);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cbChartKindA1PropertiesChange(Sender: TObject);
var AViewChart : TcxGridChartView;
begin
	if cxGridA1C1.Visible = True then AViewChart := cxGridA1C1ChartView1;
	if cxGridA1C2.Visible = True then AViewChart := cxGridA1C2ChartALL;

	case TcxComboBox(sender).ItemIndex of
		0 : AViewChart.DiagramColumn.Active := True;
		1 : AViewChart.DiagramBar.Active := True;
		2 : AViewChart.DiagramLine.Active := True;
	end;
	btnChartA1.Click;
end;

procedure TFrm_Main.cbChartKindA2PropertiesChange(Sender: TObject);
begin
	case TcxComboBox(sender).ItemIndex of
		0 : cxGridA2C2ChartALL.DiagramColumn.Active := True;
		1 : cxGridA2C2ChartALL.DiagramBar.Active := True;
		2 : cxGridA2C2ChartALL.DiagramLine.Active := True;
	end;
	btnChartA2.Click;
end;

procedure TFrm_Main.cbChartKindA3PropertiesChange(Sender: TObject);
begin
	case TcxComboBox(sender).ItemIndex of
		0 : cxGridA3C2ChartALL.DiagramColumn.Active := True;
		1 : cxGridA3C2ChartALL.DiagramBar.Active := True;
		2 : cxGridA3C2ChartALL.DiagramLine.Active := True;
	end;
	btnChartA3.Click;
end;

procedure TFrm_Main.cbKindA11PropertiesChange(Sender: TObject);
var AViewChart : TcxGridChartView;
begin
	if cxSgBrWk.DataController.RecordCount = 0 then exit;

	if cbKindA11.ItemIndex = 0 then
	begin
		cbKindA12.ItemIndex := 0;
		cbKindA12.Enabled := True;
		if cbKindA12.ItemIndex = 0 then
		begin
			cxGridA1C1.Visible := False;
			cxGridA1C2.Visible := True;
		end else
		begin
			cxGridA1C1.Visible := True;
			cxGridA1C2.Visible := False;
		end;
	end else
	begin
		cxGridA1C1.Visible := False;
		cxGridA1C2.Visible := True;
		cbKindA12.ItemIndex := 0;
		cbKindA12.Enabled := False;
	end;

	if cxGridA1C1.Visible = True then AViewChart := cxGridA1C1ChartView1;
	if cxGridA1C2.Visible = True then AViewChart := cxGridA1C2ChartAll;

	case cbChartKindA1.ItemIndex of
		0 : AViewChart.DiagramColumn.Active := True;
		1 : AViewChart.DiagramBar.Active := True;
		2 : AViewChart.DiagramLine.Active := True;
	end;
	btnChartA1.Click;
end;

procedure TFrm_Main.cbKindA12PropertiesChange(Sender: TObject);
var AViewChart : TcxGridChartView;
begin
	if cbKindA12.ItemIndex = 0 then
	begin
		cxGridA1C1.Visible := False;
		cxGridA1C2.Visible := True;
	end else
	begin
		cxGridA1C1.Visible := True;
		cxGridA1C2.Visible := False;
	end;

	case cbKindA12.ItemIndex of
		1 :
		begin
			cxGridA1C1ChartSeries1.Styles.Values := cxSTT_Field1;
			cxGridA1C1ChartSeries1.DisplayText := '출근';
		end;
		2 :
		begin
			cxGridA1C1ChartSeries1.Styles.Values := cxSTT_Field2;
			cxGridA1C1ChartSeries1.DisplayText := '대기';
		end;
		3 :
		begin
			cxGridA1C1ChartSeries1.Styles.Values := cxSTT_Field3;
			cxGridA1C1ChartSeries1.DisplayText := '운행';
		end;
		4 :
		begin
			cxGridA1C1ChartSeries1.Styles.Values := cxSTT_Field4;
			cxGridA1C1ChartSeries1.DisplayText := '퇴근';
		end;
		5 :
		begin
			cxGridA1C1ChartSeries1.Styles.Values := cxSTT_Field5;
			cxGridA1C1ChartSeries1.DisplayText := '접속';
		end;
	end;

	if cxGridA1C1.Visible = True then AViewChart := cxGridA1C1ChartView1;
	if cxGridA1C2.Visible = True then AViewChart := cxGridA1C2ChartAll;

	case cbChartKindA1.ItemIndex of
		0 : AViewChart.DiagramColumn.Active := True;
		1 : AViewChart.DiagramBar.Active := True;
		2 : AViewChart.DiagramStackedArea.Active := True;
		3 : AViewChart.DiagramStackedBar.Active := True;
		4 : AViewChart.DiagramStackedColumn.Active := True;
		5 : AViewChart.DiagramLine.Active := True;
		6 : AViewChart.DiagramArea.Active := True;
		7 : AViewChart.DiagramPie.Active := True;
	end;
	btnChartA1.Click;
end;

procedure TFrm_Main.cbKindA21PropertiesChange(Sender: TObject);
var i : integer;
begin
	if cxSgBrOrder.DataController.RecordCount = 0 then exit;

	btn_PlayBack.Enabled := False;
	btn_Play.Enabled := False;
	if cbKindA21.ItemIndex = 0 then
	begin
		cbKindA22.Visible := True;
		cbKindA23.Visible := False;
		if cxGridSetG1.DataController.RecordCount > 5 then btn_Play.Enabled := True;
		lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[3]);
		cbKindA22.ItemIndex := 0;
	end else
	begin
		cbKindA22.Visible := False;
		cbKindA23.Visible := True;
		if cxGridSetK1.DataController.RecordCount > 5 then btn_Play.Enabled := True;
		lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[0]);
		cbKindA23.ItemIndex := 0;
	end;
	cbKindA24.ItemIndex := 0;
	cbKindA25.ItemIndex := 0;

	gFromIdx := 0;
	btn_Play.Tag := 1;
	btn_PlayBack.Tag := 0; //지사-일반조회
	for I := 0 to 5 do
	begin
		gChartNowPage[i] := 1; //조회조건 변경 시 현재 페이지 초기화
	end;

	if cbKindA25.ItemIndex <> 0 then
	begin
		btn_PlayBack.Enabled := False;
		btn_Play.Enabled := False;
		lbPage.Enabled := False;
	end;

	btnChartA2.Click;
end;

procedure TFrm_Main.cbKindA22PropertiesChange(Sender: TObject);
var i : integer;
begin
	if cbKindA22.Tag = 99 then exit;
	if cxSgBrOrder.DataController.RecordCount = 0 then exit;
	btn_PlayBack.Enabled := False;
	btn_Play.Enabled := False;
	gFromIdx := 0;
	btn_Play.Tag := 1;
	btn_PlayBack.Tag := 0; //지사-일반조회
	for I := 0 to 5 do
	begin
		gChartNowPage[i] := 1; //조회조건 변경 시 현재 페이지 초기화
	end;
	if cbKindA21.ItemIndex = 0 then //지사기준
	begin
		if cbKindA22.ItemIndex = 0 then
		begin
			btn_PlayBack.Enabled := True;
			btn_Play.Enabled := True;
			lbPage.Enabled := True;
			case cbKindA21.ItemIndex of
				0:
				begin
					if cxGridSetG1.DataController.RecordCount > 5 then btn_Play.Enabled := True;
					lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[3]);
				end;
				1:
				begin
					if cxGridSetG2.DataController.RecordCount > 5 then btn_Play.Enabled := True;
					lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[4]);
				end;
				2:
				begin
					if cxGridSetG3.DataController.RecordCount > 5 then btn_Play.Enabled := True;
					lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[5]);
				end;
			end;
			cbKindA25.Enabled := True;
		end else
		begin
			lbPage.Caption := '1 / 1';
			cbKindA25.ItemIndex := 0;
			cbKindA25.Enabled := False;
		end;
	end else  //대표번호기준
	begin
		btn_PlayBack.Enabled := True;
		btn_Play.Enabled := True;
		lbPage.Enabled := True;
		if cbKindA23.ItemIndex = 0 then
		begin
			case cbKindA21.ItemIndex of
				0:
				begin
					if cxGridSetK1.DataController.RecordCount > 5 then btn_Play.Enabled := True;
					lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[0]);
				end;
				1:
				begin
					if cxGridSetK2.DataController.RecordCount > 5 then btn_Play.Enabled := True;
					lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[1]);
				end;
				2:
				begin
					if cxGridSetK3.DataController.RecordCount > 5 then btn_Play.Enabled := True;
					lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[2]);
				end;
			end;
			cbKindA25.Enabled := True;
		end else
		begin
			lbPage.Caption := '1 / 1';
			cbKindA25.ItemIndex := 0;
			cbKindA25.Enabled := False;
		end;
	end;

	if cbKindA22.ItemIndex <> 0 then
	begin
		btn_PlayBack.Enabled := False;
		btn_Play.Enabled := False;
		lbPage.Enabled := False;
	end;
	if cbKindA23.ItemIndex <> 0 then
	begin
		btn_PlayBack.Enabled := False;
		btn_Play.Enabled := False;
		lbPage.Enabled := False;
	end;
	if cbKindA25.ItemIndex <> 0 then
	begin
		btn_PlayBack.Enabled := False;
		btn_Play.Enabled := False;
		lbPage.Enabled := False;
	end;

	btnChartA2.Click;
end;

procedure TFrm_Main.cbKindA25PropertiesChange(Sender: TObject);
var iTmp, i : integer;
begin
	for i := 0 to cxGridSetK1.ColumnCount -1 do
	begin
		cxGridSetK1.Columns[i].SortOrder := soNone;
	end;
	for i := 0 to cxGridSetK2.ColumnCount -1 do
	begin
		cxGridSetK2.Columns[i].SortOrder := soNone;
	end;
	for i := 0 to cxGridSetK3.ColumnCount -1 do
	begin
		cxGridSetK3.Columns[i].SortOrder := soNone;
	end;
	for i := 0 to cxGridSetG1.ColumnCount -1 do
	begin
		cxGridSetG1.Columns[i].SortOrder := soNone;
	end;
	for i := 0 to cxGridSetG2.ColumnCount -1 do
	begin
		cxGridSetG2.Columns[i].SortOrder := soNone;
	end;
	for i := 0 to cxGridSetG3.ColumnCount -1 do
	begin
		cxGridSetG3.Columns[i].SortOrder := soNone;
	end;

	cxGridSetK1.BeginUpdate;
	cxGridSetK2.BeginUpdate;
	cxGridSetK3.BeginUpdate;
	cxGridSetG1.BeginUpdate;
	cxGridSetG2.BeginUpdate;
	cxGridSetG3.BeginUpdate;

	if cbKindA25.ItemIndex = 0 then
	begin
		iTmp := cxGridSetG1.GetColumnByFieldName('OrgIndex').Index;
		cxGridSetG1.Columns[iTmp].SortOrder := soAscending;
		iTmp := cxGridSetG2.GetColumnByFieldName('OrgIndex').Index;
		cxGridSetG2.Columns[iTmp].SortOrder := soAscending;
		iTmp := cxGridSetG3.GetColumnByFieldName('OrgIndex').Index;
		cxGridSetG3.Columns[iTmp].SortOrder := soAscending;

		iTmp := cxGridSetK1.GetColumnByFieldName('OrgIndex').Index;
		cxGridSetK1.Columns[iTmp].SortOrder := soAscending;
		iTmp := cxGridSetK2.GetColumnByFieldName('OrgIndex').Index;
		cxGridSetK2.Columns[iTmp].SortOrder := soAscending;
		iTmp := cxGridSetK3.GetColumnByFieldName('OrgIndex').Index;
		cxGridSetK3.Columns[iTmp].SortOrder := soAscending;

		btn_PlayBack.Enabled := True;
		btn_Play.Enabled := True;
		lbPage.Enabled := True;
	end else
  if cbKindA25.ItemIndex = 1 then
	begin
		btn_PlayBack.Enabled := False;
		btn_Play.Enabled := False;
		lbPage.Enabled := False;
		case cbKindA21.ItemIndex of
			0:begin
					iTmp := cxGridSetG1.GetColumnByFieldName('총건수').Index;
					cxGridSetG1.Columns[iTmp].SortOrder := soDescending;    //총건수 높은순서
					iTmp := cxGridSetG2.GetColumnByFieldName('총건수').Index;
					cxGridSetG2.Columns[iTmp].SortOrder := soDescending;    //총건수 높은순서
					iTmp := cxGridSetG3.GetColumnByFieldName('총건수').Index;
					cxGridSetG3.Columns[iTmp].SortOrder := soDescending;    //총건수 높은순서
				end;
			1:begin
					iTmp := cxGridSetK1.GetColumnByFieldName('총건수').Index;
					cxGridSetK1.Columns[iTmp].SortOrder := soDescending;
					iTmp := cxGridSetK2.GetColumnByFieldName('총건수').Index;
					cxGridSetK2.Columns[iTmp].SortOrder := soDescending;
					iTmp := cxGridSetK3.GetColumnByFieldName('총건수').Index;
					cxGridSetK3.Columns[iTmp].SortOrder := soDescending;
				end;
		end;
	end	else
  if cbKindA25.ItemIndex = 2 then
	begin
		btn_PlayBack.Enabled := False;
		btn_Play.Enabled := False;
		lbPage.Enabled := False;
		case cbKindA21.ItemIndex of
			0:begin
					iTmp := cxGridSetG1.GetColumnByFieldName('총건수').Index;
					cxGridSetG1.Columns[iTmp].SortOrder := soAscending;    //총건수 낮은순서
					iTmp := cxGridSetG2.GetColumnByFieldName('총건수').Index;
					cxGridSetG2.Columns[iTmp].SortOrder := soAscending;    //총건수 낮은순서
					iTmp := cxGridSetG3.GetColumnByFieldName('총건수').Index;
					cxGridSetG3.Columns[iTmp].SortOrder := soAscending;    //총건수 낮은순서
				end;
			1:begin
					iTmp := cxGridSetK1.GetColumnByFieldName('총건수').Index;
					cxGridSetK1.Columns[iTmp].SortOrder := soAscending;
					iTmp := cxGridSetK2.GetColumnByFieldName('총건수').Index;
					cxGridSetK2.Columns[iTmp].SortOrder := soAscending;
					iTmp := cxGridSetK3.GetColumnByFieldName('총건수').Index;
					cxGridSetK3.Columns[iTmp].SortOrder := soAscending;
				end;
		end;
	end;

	cxGridSetK1.EndUpdate;
	cxGridSetK2.EndUpdate;
	cxGridSetK3.EndUpdate;
	cxGridSetG1.EndUpdate;
	cxGridSetG2.EndUpdate;
	cxGridSetG3.EndUpdate;

	btnChartA2.Click;
{
			cxGridSetK1.BeginUpdate;
			cxGridSetK2.BeginUpdate;
			cxGridSetK3.BeginUpdate;
	for i := 0 to cxSgBrOrder.ColumnCount -1 do
	begin
		cxSgBrOrder.Columns[i].SortOrder := soNone;
	end;
	iTmp := cxSgBrOrder.GetColumnByFieldName('총건수').Index;
	cxSgBrOrder.Columns[iTmp].SortOrder := soDescending;
 }
end;

procedure TFrm_Main.cb_brNameClick(Sender: TObject);
var
  sBrNo, sCash: string;
begin
  SetDebugeWrite('Main.cb_brNameClick');
  try
    if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
      sBrNo := scb_FamilyBrCode.Strings[TcxComboBox(Sender).ItemIndex]
    else
      sBrNo := scb_BranchCode.Strings[TcxComboBox(Sender).ItemIndex];

		sCash := IntToStr(func_BrSmsCash(sBrNo));
		sCash := formatfloat('#,##0', StrToFloatDef(sCash, 0));
		if TCK_USER_PER.JON_BrchCashView = '1' then
      Lbl_SmsCash.Caption := 'SMS캐쉬 : ' + sCash + '원'
    else
      Lbl_SmsCash.Caption := 'SMS캐쉬 : ' + '**,***원';

  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cb_PBXLevelKeyDown(Sender: TObject; var Key: Word;
	Shift: TShiftState);
begin
	if Key = VK_RETURN then 
	begin
		if cb_PBXLevel.ItemIndex = 1 then edt_AdminID.SetFocus else btn_PBXLogIn.SetFocus;
	end;
end;

procedure TFrm_Main.cb_PBXLevelPropertiesChange(Sender: TObject);
begin
	case cb_PBXLevel.ItemIndex of
		0:begin
				edt_AdminID.Enabled := False;
				edt_AdminPW.Enabled := False;
			end;	
		1,2:begin
				edt_AdminID.Enabled := True;
				edt_AdminPW.Enabled := True;
				if edt_AdminID.CanFocus then edt_AdminID.SetFocus;
			end;	
	end;
end;

procedure TFrm_Main.cb_SearchClick(Sender: TObject);
begin
  SetDebugeWrite('Main.cb_SearchClick');
	if cb_Search.ItemIndex = 6 then
		ed_Condition.Enabled := False
	else
		ed_Condition.Enabled := True;
end;

procedure TFrm_Main.chkActiveBMenuClick(Sender: TObject);
begin
  SetDebugeWrite('Main.chkActiveBMenuClick');
	GB_ACTIVEBMENU_USE := TcxCheckBox(Sender).Checked;
	GS_EnvFile.WriteBool('COUNSEL', 'ActiveBMenu', GB_ACTIVEBMENU_USE);
end;

procedure TFrm_Main.chkCallMapPopupClick(Sender: TObject);
begin
	GB_CALLMAP_POPUP := TcxCheckBox(Sender).Checked;
	GS_EnvFile.WriteBool('COUNSEL', 'CALLMAP_POPUP', GB_CALLMAP_POPUP);

  try
    if Assigned(Frm_JON52[JON03_MAX_CNT]) then
    begin
      Frm_JON52[JON03_MAX_CNT].Tag := 99;
      Frm_JON52[JON03_MAX_CNT].Close;
      FreeAndNil(Frm_JON52[JON03_MAX_CNT]);
    end;
  finally
    try
      pJON52Create;
    except
    end;
  end;

  try
    if GB_CALLMAP_POPUP then
    begin
      GT_DISTANCE_ST := 1;            //경탐사용으로 변경
      SR1ErrCnt := 0; SR2ErrCnt := 0; //경탐체크시 경탐에러횟수 초기화
      GS_EnvFile.WriteString('CHARGE', 'GT_DISTANCE_ST', IntToStr(GT_DISTANCE_ST));

      Frm_JON52[JON03_MAX_CNT].Show;
      Frm_JON52[JON03_MAX_CNT].Hide;
      cxPageControl2.Pages[4].TabVisible := False;
    end else
    begin
      cxPageControl2.Pages[4].TabVisible := True;
    end;
  except
  end;
end;

procedure TFrm_Main.chkCS30SOverClick(Sender: TObject);
Var iSecond : Integer;
begin
  if chkCS30SOver.Checked then
  begin
    iSecond := cxGridCShare.GetColumnByFieldName('경과(초)').Index;
    cxGridCShare.DataController.Filter.Clear;
    cxGridCShare.DataController.Filter.Root.BoolOperatorKind := fboOr;
    cxGridCShare.DataController.Filter.Root.AddItem(cxGridCShare.Columns[iSecond], foGreaterEqual, '00분30초', '30초이상');
    cxGridCShare.DataController.Filter.Active := True;
  end else
  begin
    cxGridCShare.DataController.Filter.Clear;
    cxGridCShare.DataController.Filter.Active := False;
  end;
end;

procedure TFrm_Main.chkOrderActiveBMenuClick(Sender: TObject);
begin
  SetDebugeWrite('Main.chkOrderActiveBMenuClick');
	GB_ORDERACTIVEBMENU_USE := TcxCheckBox(Sender).Checked;
	GS_EnvFile.WriteBool('COUNSEL', 'OrderActiveBMenu', GB_ORDERACTIVEBMENU_USE);
end;

procedure TFrm_Main.chkRQ_AutoActiveClick(Sender: TObject);
begin
  SetDebugeWrite('Main.chkRQ_AutoActiveClick');
	GB_RQ_AUTOACTIVE := TcxCheckBox(Sender).Checked;
	GS_EnvFile.WriteBool('COUNSEL', 'RQ_AUTOACTIVE', GB_RQ_AUTOACTIVE);
end;

procedure TFrm_Main.chkRQ_ClosePopupClick(Sender: TObject);
begin
  SetDebugeWrite('Main.chkRQ_ClosePopupClick');
	GB_RQ_CLOSEPOPUP := TcxCheckBox(Sender).Checked;
	GS_EnvFile.WriteBool('COUNSEL', 'RQ_CLOSEPOPUP', GB_RQ_CLOSEPOPUP);
end;

procedure TFrm_Main.chkUseSet02Click(Sender: TObject);
Var i : Integer;
begin
	SetDebugeWrite('Main.chkUseSet02Click');
  try
		GS_CleanSKYUse := False;
		if chkUseSet02.Checked then
    begin
      GT_POSS_TEL := 1;
			if ( GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 2 ) then
      begin
        GT_OCX := 'KLCNS';
      end else
			if ( GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 3 ) then
			begin
        GT_OCX := 'SSIT';
			end else
			if ( GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 5 ) then
			begin
				GT_OCX := 'SI415';
			end else
			if ( GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 6 ) then   //맑은하늘 전화걸기 사용
			begin
				GT_OCX := 'SKY';
				GS_CleanSKYUse := True;
			end else
			if (FileExists('C:\4bs.ini')) then
  		begin
  			GT_OCX := 'NKT';
  		end else
				GT_OCX := 'DAEJEN';    //콜마너CID
				
			for i := 0 to JON03_MAX_CNT - 1 do
			begin
        if ( JON03MNG[i].Use = True ) And ( JON03MNG[i].CreateYN = True ) then
        begin
      		Frm_Jon03[i].NOCX1.Visible := True;
          Frm_Jon03[i].NOCX_WOR.Visible := True;
          Frm_Jon03[i].NOCX_CUST.Visible := True;
          Frm_Jon03[i].NOCX_BLOCK.Visible := False;
        end;
      end;
    end else
    begin
			GT_POSS_TEL := 0;
			if ( GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 2 ) then
      begin
        GT_OCX := 'KLCNS';
      end else
      if ( GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 3 ) then
      begin
        GT_OCX := 'SSIT';
      end else
			if ( GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 5 ) then
			begin
				GT_OCX := 'SI415';
			end else
			if ( GS_EnvFile.ReadInteger('CID_COMM', 'GUBUN', 0) = 6 ) then   //맑은하늘 전화걸기 사용
			begin
				GT_OCX := 'SKY';
				GS_CleanSKYUse := True;
			end else
			if (FileExists('C:\4bs.ini')) then
  		begin
  			GT_OCX := 'NKT';
  		end else
      	GT_OCX := '';

      for i := 0 to JON03_MAX_CNT - 1 do
      begin
        if ( JON03MNG[i].Use = True ) And ( JON03MNG[i].CreateYN = True ) then
        begin
					Frm_Jon03[i].NOCX1.Visible := False;
          Frm_Jon03[i].NOCX_WOR.Visible := False;
          Frm_Jon03[i].NOCX_CUST.Visible := False;
          Frm_Jon03[i].NOCX_BLOCK.Visible := False;
        end;
      end;
		end;
		if chkUseSet02.Tag <> 99 then 
			GS_EnvFile.WriteBool('CID_COMM', 'CLEANSKY' , GS_CleanSKYUse); //맑은하늘 전화기 사용값 적용
		GS_EnvFile.WriteString('POSS_TEL', 'GT_POSS_TEL', IntToStr(GT_POSS_TEL));
  except on E: Exception do
		Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.chkWin10CIDXEClick(Sender: TObject);
begin
  GT_CIDINFO.Win10CIDXE_YN := chkWin10CIDXE.Checked;
  GS_EnvFile.WriteBool('CID_COMM', 'WIN10_CIDXE_USE', GT_CIDINFO.Win10CIDXE_YN);
end;

procedure TFrm_Main.chk_FamilyClick(Sender: TObject);
begin
  cxSplitter1.Visible := chk_Family.Checked;
  cxGridHdOrder.Visible := chk_Family.Checked;
end;

procedure TFrm_Main.cxbGongjiClick(Sender: TObject);
begin
  SetDebugeWrite('Main.cxbGongjiClick');
	try
    if ( not Assigned(Frm_JON23) ) Or ( Frm_JON23 = Nil ) then Frm_JON23 := TFrm_JON23.Create(nil);
	  Frm_JON23.Show;
    Frm_JON23.proc_Search;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxBtnBrHdNameSearchClick(Sender: TObject);
var
  s: string;
begin
  SetDebugeWrite('Main.cxBtnBrHdNameSearchClick');
  try
    s := Param_Filtering(edGroupSearch.Text);
    if s <> '' then
      proc_Word_Search(s, cxGroup);
  except on E: Exception do
		Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxButton10Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton10Click');
  grpSetFavorite.Visible := False;
end;

procedure TFrm_Main.cxButton11Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton11Click');
  try
    if not Assigned(frm_adminMap) then
    begin
      frm_adminMap := Tfrm_adminMap.Create(Self);
    end;

    frm_adminMap.Skm := '';
    frm_adminMap.Show;

    Application.ProcessMessages;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxButton13Click(Sender: TObject);
var ln_Env : TIniFile;
		sParam : String;
begin
  if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
  begin
    ln_Env := TIniFile.Create(ENVPATHFILE);
    try
      GT_CIDINFO.ACDSERVERIP := Trim(ed_ACDServerIP.Text);
      ln_Env.WriteString('CID_COMM', 'ACDSERVERIP', GT_CIDINFO.ACDSERVERIP);

      GT_CIDINFO.ACDSERVERUSE := cxAcdSvrUse.Checked;
      ln_Env.WriteBool('CID_COMM', 'ACDSERVERUSE', GT_CIDINFO.ACDSERVERUSE);
    finally
      FreeAndNil(ln_Env);
    end;

    if GT_CIDINFO.ACDSERVERUSE then
    begin
      ProcessKill;

      if ( FileExists('C:\Windows\System32\SangACD.ocx') ) Then
      begin
        sParam := 'A08FB1D3VOP9ACD ' + GT_CIDINFO.ACDSERVERIP + ' ' + GT_CIDINFO.NaeSun + ' ' + GT_USERIF.ID + ' ' + IntToStr(GS_EXEC_GUBUN);
        ShellExecute(
          Self.Handle,
          'open',
          PChar(ExtractFilePath(ParamStr(0)) + 'CMNOCXXEAgent.exe'),
          PChar(sParam),
          nil,
          SW_SHOWNORMAL
        );
      end;
    end else
    begin
      ProcessKill;
    end;
  end;
end;

procedure TFrm_Main.cxButton14Click(Sender: TObject);
var
  XmlData, Param, ErrMsg : string;
  ErrCode: Integer;
	vHash : THashSHA2;
	sTmp : string;
begin
	if Trim(Edt_PW.Text) = '' then
  begin
    ShowMessage('비밀번호를 입력하십시오.');
    Edt_PW.SetFocus;
    Exit;
  end;

	sTmp := vHash.GetHashString(Trim(Edt_PW.Text) + 'callmaner#2106Key',SHA256); 
	Param := sTmp + '│' + GT_USERIF.IP + '│' + GT_USERIF.MC;

  if not RequestBase(GetCallable05('GETPWDCHK', 'PAY_OUT.GET_PWD_CHK', Param), XmlData, ErrCode, ErrMsg) then
  begin
		GMessageBox(Format('[%d] %s', [ErrCode, ErrMsg]), CDMSE);
    Exit;
  end;

  Pnl_Pay.Visible := False;
  if ( Not Assigned(Frm_ACC10) ) Or ( Frm_ACC10 = NIl ) then Frm_ACC10 := TFrm_ACC10.Create(Nil);
  try
    Frm_ACC10.ShowModal;
  finally
    Frm_ACC10.Free;
    if Assigned(Frm_JON51) then
      if TCK_USER_PER.BTM_MENUSCH = '1' then Frm_JON51.Menu_Use_Mark('DEL', 618);
  end;
end;

procedure TFrm_Main.cxButton15Click(Sender: TObject);
begin
  Pnl_Pay.Visible := False;
  if Assigned(Frm_JON51) then
    if TCK_USER_PER.BTM_MENUSCH = '1' then Frm_JON51.Menu_Use_Mark('DEL', 618);
end;

procedure TFrm_Main.cxButton16Click(Sender: TObject);
begin
  Pnl_Pay.Height := 229;
  Edt_PPw.SetFocus;
end;

procedure TFrm_Main.btnCTISaveClick(Sender: TObject);
begin
	SetDebugeWrite('Main.btnCTISaveClick');
  try
    btnCTISave.Enabled := False;
    try
      GT_POSS_IP := '';
      GT_POSS_KEYNUM := '';
      if chkUseSet02.Checked then
      begin
        GT_POSS_IP := ed_CTIIP.Text;
				GT_POSS_KEYNUM := StringReplace(ed_ExTensionNumber.Text, '-', '', [rfReplaceAll]);
    		GS_EnvFile.WriteString('POSS_IP', 'GT_POSS_IP', GT_POSS_IP);
    	end;
			GT_POSS_KEYNUM := ed_ExTensionNumber.Text;
    	GS_EnvFile.WriteString('POSS_TEL', 'GT_POSS_KEYNUM', GT_POSS_KEYNUM);

    finally
    	GMessagebox('저장하였습니다.', CDMSI);
      btnCTISave.Enabled := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btnCTISettingCloseClick(Sender: TObject);
begin
  pnlCTISetting.Visible := False;
end;

procedure TFrm_Main.BtncxPage3EClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtncxPage3EClick');
  Frm_Main.cxPageControl2Click(Frm_Main.cxPageControl2);
end;

procedure TFrm_Main.BtncxPage9EClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtncxPage9EClick');
  Frm_Main.cxPageControl2Click(Frm_Main.cxPageControl2);
end;

procedure TFrm_Main.cxButton17MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('Main.cxButton17MouseDown');
  pop_date.Popup(Mouse.CursorPos.X, Mouse.CursorPos.y);
end;

procedure TFrm_Main.cxButton19Click(Sender: TObject);
begin
  PnlHelp.Visible := False;
end;

procedure TFrm_Main.cxButton1Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton1Click');
  grpSetExcel.Visible := False;
end;

procedure TFrm_Main.cxButton22Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton22Click');
  grpSetBadCancel.Visible := False;
end;

procedure TFrm_Main.cxButton23Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton23Click');
  try
  	GS_EnvFile.WriteInteger('COUNSEL', 'AutoHidMinute', cxSAutoHideMin.Value);

    iTmrBtmMenu := 0;
    if cxSAutoHideMin.Value <> 0 then tmrBtmMenu.Enabled := True
                                 else tmrBtmMenu.Enabled := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxButton24Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton24Click');
  try
    if (trmAUTOSMS.Enabled <> True) or ( not GS_ONOFF_CHK) or (GS_HEAD_NO = '') then
    begin
      if ( Not Assigned(Frm_SMS07) ) Or ( Frm_SMS07 = Nil ) then Frm_SMS07 := TFrm_SMS07.Create(Nil);
      Frm_SMS07.Left := advTPTPna3.left;// self.Left + advTPTPna3.left;
      Frm_SMS07.Top := advTPTPna3.Top ;//Self.Top;// - advdckpnl1.Height - GradientLabel3.Height;
      Frm_SMS07.Show;
      Frm_SMS07.proc_init;
      Frm_SMS07.proc_BrOrder;
      Frm_SMS07.proc_SetINI;
      Frm_SMS07.RequestDataHead;
    end else
    begin
      if GS_HEAD_NO <>  GT_SEL_BRNO.HDNO then
      begin
        GMessagebox(GS_HEAD_NAME + '본사의 실시간 문자발송이 구동중입니다.' + #13#10
                  + GS_HEAD_NAME + '본사발송을 중지하신 뒤 설정 하세요', CDMSE);
      end else
      begin
        if ( Not Assigned(Frm_SMS07) ) Or ( Frm_SMS07 = Nil ) then Frm_SMS07 := TFrm_SMS07.Create(Nil);
        Frm_SMS07.Left := advTPTPna3.left;// self.Left + advTPTPna3.left;
        Frm_SMS07.Top := advTPTPna3.Top ;//Self.Top;// - advdckpnl1.Height - GradientLabel3.Height;
        Frm_SMS07.Show;
        Frm_SMS07.proc_init;
        Frm_SMS07.proc_BrOrder;
        Frm_SMS07.proc_SetINI;
        Frm_SMS07.RequestDataHead;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.BtnAdvPnl1EClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl1EClick');
  try
    if advTPTPna1.Locked then advTPTPna1.Locked := False;
    AdvTPTab.RollIn(advTPTPna1);
    BtnAdvPnl1F.Down := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.BtnAdvPnl1FClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl1FClick');
  if advTPTPna1.Locked then
    advTPTPna1.Locked := False
  else
    advTPTPna1.Locked := True;
end;

procedure TFrm_Main.BtnAdvPnl2EClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl2EClick');
  try
    if advTPTPna2.Locked then advTPTPna2.Locked := False;
		AdvTPTab.RollIn(advTPTPna2);
    BtnAdvPnl2F.Down := False;
    WkPnlOpen := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.BtnAdvPnl2FClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl2FClick');
  advTPTPna2.Locked := not advTPTPna2.Locked;
end;

procedure TFrm_Main.BtnAdvPnl3EClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl3EClick');
  try
    if advTPTPna3.Locked then advTPTPna3.Locked := False;
    AdvTPTab.RollIn(advTPTPna3);
    BtnAdvPnl3F.Down := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.BtnAdvPnl3FClick(Sender: TObject);
begin
	SetDebugeWrite('Frm_Main.BtnAdvPnl3FClick');
	if advTPTPna3.Locked then
	begin
		advTPTPna3.Locked := False;
		BtnAdvPnl3F.OptionsImage.ImageIndex := 54;
	end
	else
	begin
		advTPTPna3.Locked := True;
		BtnAdvPnl3F.OptionsImage.ImageIndex := 53;
	end;	
end;

procedure TFrm_Main.BtnAdvPnl4EClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl4EClick');
  try
    if advTPTPna4.Locked then advTPTPna4.Locked := False;
    AdvTPTab.RollIn(advTPTPna4);
    BtnAdvPnl4F.Down := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.BtnAdvPnl4FClick(Sender: TObject);
begin
  SetDebugeWrite('Frm_Main.BtnAdvPnl4FClick');
	if advTPTPna4.Locked then
	begin
		advTPTPna4.Locked := False;
		BtnAdvPnl4F.OptionsImage.ImageIndex := 53;
	end
	else
	begin
		advTPTPna4.Locked := True;
		BtnAdvPnl4F.OptionsImage.ImageIndex := 54;
	end;	
end;

procedure TFrm_Main.BtnAdvPnl4PClick(Sender: TObject);
begin
  try
    if ( not Assigned(Frm_COM12) ) Or ( Frm_COM12 = Nil ) then Frm_COM12 := TFrm_COM12.Create(nil);
    Frm_COM12.cbbSido.Properties.Items := cbbSido.Properties.Items;
    Frm_COM12.cbbSido.ItemIndex := cbbSido.ItemIndex;
    Frm_COM12.Show;
  except
  end;
end;

procedure TFrm_Main.BtnAdvPnl5EClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl5EClick');
  try
    if advTPTPna5.Locked then advTPTPna5.Locked := False;
    AdvTPTab.RollIn(advTPTPna5);
    BtnAdvPnl5F.Down := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.BtnAdvPnl5FClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl5FClick');
  if advTPTPna5.Locked then
    advTPTPna5.Locked := False
  else
    advTPTPna5.Locked := True;
end;

procedure TFrm_Main.BtnAdvPnl6FClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl6FClick');
  if advTPTPna6.Locked then
    advTPTPna6.Locked := False
  else
    advTPTPna6.Locked := True;
end;

procedure TFrm_Main.BtnAdvPnl6EClick(Sender: TObject);
begin
  SetDebugeWrite('Main.BtnAdvPnl6EClick');
  try
    if advTPTPna6.Locked then advTPTPna6.Locked := False;
    AdvTPTab.RollIn(advTPTPna6);
    BtnAdvPnl6F.Down := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxButton2Click(Sender: TObject);
begin
	SetDebugeWrite('Main.cxButton2Click');
  try
    if dtBrCallEd.Date - dtBrCallSt.Date > 31 then
    begin
			GMessagebox('기간을 한달이내로 선택바랍니다.', CDMSE);
      dtBrCallSt.Date := dtBrCallEd.Date - 31;
      Exit;
    end;
		proc_BrOrder;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxButton3Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton3Click');
  proc_BrWk;
end;

procedure TFrm_Main.cxButton4Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton4Click');
	proc_wkConnect;
end;

procedure TFrm_Main.cxButton5Click(Sender: TObject);
var Msg : string;
 iRow, i : integer;
begin
  SetDebugeWrite('Main.cxButton5Click');
  try
    iRow := cxGridFavoriteList.DataController.FocusedRecordIndex;
    Msg := '선택하신 전화번호를 삭제하시겠습니까?';

    if Application.MessageBox(PChar(Msg), 'CDMS', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) = IDYES then
    begin
      cxGridFavoriteList.DataController.DeleteRecord(iRow);
      GS_UserFavoriteNumber.Clear;
      for i := 0 to cxGridFavoriteList.DataController.RecordCount -1 do
      begin
        GS_UserFavoriteNumber.Add(cxGridFavoriteList.DataController.Values[i, 1] + '=' + cxGridFavoriteList.DataController.Values[i, 2]);
      end;
      SaveUserFavoriteNumber;
      Frm_JON54.proc_FavoriteNumber;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxButton6Click(Sender: TObject);
var
  ls_TxLoad, sKeyString: string;
	rv_str, sBaechSMS, sWkSabun, sStatus, sSlip, sBrNo, sCallCenter, sOdbWkSabun: string;
  ls_rxxml: String;
	iRow, i03Row, iWkSabun: Integer;
	slReceive: TStringList;
	ErrCode: integer;
	AView: TcxGridDBTableView;
begin
	SetDebugeWrite('Main.cxButton6Click');

	AView := Frm_JON03[GI_JON03_LastFromIdx].GetCurrentView;

	if (tvWkConnect.DataController.RecordCount = 0) then
  begin
		GMessagebox('기사가 없습니다.', CDMSE);
		Exit;
	end;

	if (AView.DataController.RecordCount = 0) then
  begin
    GMessagebox('오더가 없습니다.', CDMSE);
    Exit;
  end;

  iRow := tvWkConnect.DataController.FocusedRecordIndex;
  if (iRow = -1) then
  begin
    GMessagebox('선택된 기사가 없습니다.', CDMSE);
    Exit;
  end;

	i03Row := AView.DataController.FocusedRecordIndex;

	sSlip   := AView.DataController.Values[i03Row, Frm_JON03[GI_JON03_LastFromIdx].giSlip];
	sStatus := AView.DataController.Values[i03Row, Frm_JON03[GI_JON03_LastFromIdx].giStCd];
	sBrNo   := AView.DataController.Values[i03Row, Frm_JON03[GI_JON03_LastFromIdx].giBrNo];
	sCallCenter := AView.DataController.Values[i03Row, Frm_JON03[GI_JON03_LastFromIdx].giCallcenter];

  if ( i03Row < 0 ) Or (sSlip = '') then
  begin
    GMessagebox('선택된 오더가 없습니다.', CDMSE);
    Exit;
  end;

  // [hjF-091022] 강제배차 연합설정 적용
  if not Frm_JON03[GI_JON03_LastFromIdx].func_check_CallCenter then
  begin
		if Frm_JON03[GI_JON03_LastFromIdx].icheck_CT_Flag = 0 then
			GMessagebox('타사오더는 강제배차 할 수 없습니다.', CDMSE);
    Exit;
  end;

  if not IsUseOfficeBaecha(sBrNo) then
  begin
    GMessagebox('연합사 설정으로 인해 강제배차가 제한되었습니다.', CDMSE);
    Exit;
  end;

  iWkSabun := tvWkConnect.GetColumnByFieldName('기사사번').Index;
  sWkSabun := tvWkConnect.DataController.Values[iRow, iWkSabun];
	sOdbWkSabun := '';
	if trim(sWkSabun) = '' then
  begin
    GMessagebox('기사를 클릭하세요', CDMSE);
    Exit;
  end;

  try
    lbWkSlip.Caption := sSlip;

    if StrToIntDef(lbWkSlip.Caption, -1) = -1 then
      Exit;

    sBaechSMS := '';
    sKeyString := 'BAECHA';

    ls_TxLoad := GTx_UnitXmlLoad('C006.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'Main' + sKeyString, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', En_Coding(lbWkSlip.Caption), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'WkSabunString', En_Coding(sWkSabun), [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ConfWkSbString',En_Coding(sWkSabun), [rfReplaceAll]);   // 기사사번
		ls_TxLoad := StringReplace(ls_TxLoad, 'OdbWkSbString', '', [rfReplaceAll]);   // ODB기사사번
		ls_TxLoad := StringReplace(ls_TxLoad, 'CurStatusString', En_Coding(sStatus), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'BaechaSMSString', En_Coding(sBaechSMS), [rfReplaceAll]);

    // 2006.06.06 문자배차 항목이 추가 되어, 구분속성이 추가되었다
    // 문자배차이면 구분이 "1"로 처리한다. 그외에는 처리하지 않는다
     //-----------------------------------------------------------------------------------------------
     //  * 1: 문자배차
     //  * 2: 강제배차
     //  * 3: 재배차
     //  * 4: 사무실배차
     //-----------------------------------------------------------------------------------------------
    ls_TxLoad := StringReplace(ls_TxLoad, 'GubunString', '4', [rfReplaceAll]);

    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);
        end;
      end;
    finally
      Frm_Flash.Hide;
      FreeAndNil(slReceive);
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.cxButton7Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton7Click');
  proc_Share;
  if cbbShareCall.ItemIndex > 0 then
    lblShareCallTime.Caption := cbbShareCall.Text;
end;

procedure TFrm_Main.cxButton8Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxButton8Click');
	pnl_TapiCallingStatus.Visible := False;
end;

procedure TFrm_Main.cxButton9Click(Sender: TObject);
var iRow, iIndex, i : integer;
  Msg : string;
begin
  SetDebugeWrite('Main.cxButton9Click');
  try
    if length(ed_FavoriteNum.Text) < 8 then
    begin
      GMessagebox('전화번호는 최소 8자리입니다.', CDMSE);
      ed_FavoriteNum.SetFocus;
      Exit;
    end;
    iIndex := cxGridFavoriteList.DataController.FindRecordIndexByText(0,1,ed_FavoriteNum.Text,False,False,True);
    if iIndex >= 0 then
    begin
      cxGridFavoriteList.DataController.FocusedRecordIndex := iIndex;
      Msg := '동일한 전화번호가 등록되어 있습니다.'#13#10
            + '(변경할까요?)';
      if Application.MessageBox(PChar(Msg), 'CDMS', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) = IDYES then
      begin
        cxGridFavoriteList.BeginUpdate;
        cxGridFavoriteList.DataController.Values[iIndex, 0] := IntToStr(iIndex+1);
        cxGridFavoriteList.DataController.Values[iIndex, 1] := ed_FavoriteNum.Text;
        cxGridFavoriteList.DataController.Values[iIndex, 2] := ed_FavoriteMemo.Text ;
        cxGridFavoriteList.EndUpdate;
      end;
    end else
    begin
      cxGridFavoriteList.BeginUpdate;
      iRow := cxGridFavoriteList.DataController.AppendRecord;
      cxGridFavoriteList.DataController.Values[iRow, 0] := IntToStr(iRow+1);
      cxGridFavoriteList.DataController.Values[iRow, 1] := ed_FavoriteNum.Text;
      cxGridFavoriteList.DataController.Values[iRow, 2] := ed_FavoriteMemo.Text ;
      cxGridFavoriteList.EndUpdate;
    end;

    GS_UserFavoriteNumber.Clear;
    for i := 0 to cxGridFavoriteList.DataController.RecordCount -1 do
    begin
      GS_UserFavoriteNumber.Add(cxGridFavoriteList.DataController.Values[i, 1] + '=' + cxGridFavoriteList.DataController.Values[i, 2]);
    end;
    SaveUserFavoriteNumber;
    Frm_JON54.proc_FavoriteNumber;

    ed_FavoriteNum.Text := '';
    ed_FavoriteMemo.Text := '';
    ed_FavoriteNum.SetFocus;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.chkNoAcceptShareClick(Sender: TObject);
begin
  SetDebugeWrite('Main.chkNoAcceptShareClick');
  cxGridCShare.DataController.SetRecordCount(0);
  tsBtmMenu3.Caption := '신규접수공유';
	GB_NS_NOACCEPTSHARE := TcxCheckBox(Sender).Checked;
	GS_EnvFile.WriteBool('COUNSEL', 'NS_NOACCEPTSHARE', GB_NS_NOACCEPTSHARE);
end;

procedure TFrm_Main.chkNoChangNSClick(Sender: TObject);
begin
  SetDebugeWrite('Main.cbNoChangNSClick');
	GB_NS_NOCHANGEMENU := TcxCheckBox(Sender).Checked;
	GS_EnvFile.WriteBool('COUNSEL', 'NS_NOCHANGEMENU', GB_NS_NOCHANGEMENU);
end;

procedure TFrm_Main.chkJON54AutoRunClick(Sender: TObject);
begin
	GS_JON54AutoRunNew := TcxCheckBox(Sender).Checked;
	GS_EnvFile.WriteBool('COUNSEL', 'JON54AutoRunNew', GS_JON54AutoRunNew);
end;

procedure TFrm_Main.cxChkCidSvrIPUseClick(Sender: TObject);
begin
  SetDebugeWrite('Main.cxChkCidSvrIPUseClick');
  try
    if cxChkCidSvrIPUse.Checked then
    begin
			GS_SERVERCIDUSE := True;
			GS_EnvFile.WriteString('CID_COMM', 'CID_SELSVRUSE', 'Y');

      CbCidSvrIP.Enabled := True;
      ed_Number.Enabled := True;
//      cxCIDListView.ItemIndex := 0;
    end else
    begin
      GS_SERVERCIDUSE := False;
      GS_EnvFile.WriteString('CID_COMM', 'CID_SELSVRUSE', 'N');

      if rchk_Use.Checked then ed_Number.Enabled := True
                          else ed_Number.Enabled := False;
      CbCidSvrIP.Enabled := False;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxChkExpandClick(Sender: TObject);
Var i, j : Integer;
begin
  if cxChkExpand.Checked then
  begin
    Tree_List.BeginUpdate;
    for i := 0 to Tree_List.Count - 1 do
    begin
      if Tree_List.Items[i].Level = 0 then
        Tree_List.Items[i].Expand(True);

      for j := 0 to Tree_List.Items[i].Count - 1 do
      begin
        if Tree_List.Items[i].Items[j].Level = 1 then
          Tree_List.Items[i].Items[j].Collapse(True)
        else
          Tree_List.Items[i].Items[j].Collapse(True);
      end;
    end;

    Tree_List.EndUpdate;
  end else
  begin
    Tree_List.BeginUpdate;
    Tree_List.FullCollapse;
    Tree_List.EndUpdate;
  end;
end;

procedure TFrm_Main.cxCIDListPropertiesChange(Sender: TObject);
var sTmp : string;
	iTmp : integer;
begin
	RB_SvrUse1.Enabled := True;
	RB_SvrUse2.Enabled := True;

	ed_CID_Ip1.Enabled := True;
	ed_CID_Ip2.Enabled := True;

	ed_Number.Enabled := True;

	grpPBXSetting.Visible := False;
	btnIpccMenu.Visible := False;
	lb_SI415Notice.Visible := False;
	proc_Resize;

	frm_JON54.cxPageControl1.Pages[0].TabVisible := True;
	frm_JON54.cxPageControl1.Pages[1].TabVisible := True;
	frm_JON54.cxPageControl1.Pages[2].TabVisible := True;
	frm_JON54.Panel3.visible := True;

	GS_CleanSKYUse := False;
	
{	if cxCidList.ItemIndex = 0 then  //콜마너XE 선택 맑은하늘
	begin
		cxCIDList.Width := 245;
		chk_CleanSky.Visible := True;
//		cxCIDList.Width := 245;
//		chk_CleanSky.Visible := False;
	end	else
	begin
		cxCIDList.Width := 245;
		chk_CleanSky.Visible := False;
	end;}//사용안함. 옵션 리스트로 변경
	
	if cxCidList.ItemIndex = 3 then  // 시사일오
	begin
		if Not rchk_Use.Checked then
		begin
      RB_SvrUse1.Enabled := False;
      RB_SvrUse2.Enabled := False;

      ed_CID_Ip1.Enabled := False;
      ed_CID_Ip2.Enabled := False;

      if cxChkCidSvrIPUse.Checked then ed_Number.Enabled := True
                                  else ed_Number.Enabled := False;
    end;
		grpLGUCT.Visible := False;
  end else
  if cxCidList.ItemIndex = 4 then  // LG 센트릭스
  begin
		grpLGUCT.Top := 144;
		grpLGUCT.Left := 19;
    grpLGUCT.BringToFront;
		grpLGUCT.Visible := True;

		cxEdtLGUCTID.Text := GS_EnvFile.ReadString('CID_COMM', 'LGU_ID',  '');
		cxEdtLGUCTPW.Text := GS_EnvFile.ReadString('CID_COMM', 'LGU_PW',  '');
	end else
	if cxCidList.ItemIndex = 5 then  // 콜마너PBX          ['{341288D2-E295-449B-B176-C7699F0479A8}']
	begin
		trm_IPCCSetting.Enabled := True;

		lb_SI415Notice.left := 3;
		lb_SI415Notice.Top := 437;
		lb_SI415Notice.Visible := True;

    grpPBXSetting.BringToFront;
		grpPBXSetting.Left := 0;
		grpPBXSetting.Top := 84;
		grpPBXSetting.Visible := True;

		edt_PBXID.Text  := GS_EnvFile.ReadString('CID_COMM', 'PBX_ID',  '');
		edt_PBXPW.Text  := GS_EnvFile.ReadString('CID_COMM', 'PBX_PW',  '');
		edt_PBXEXT.Text := GS_EnvFile.ReadString('CID_COMM', 'PBX_EXT',  '');
		edt_PBXIP.Text  := GS_EnvFile.ReadString('CID_COMM', 'PBX_IP',  '');
		sTmp := GS_EnvFile.ReadString('CID_COMM', 'PBX_LV',  '0');	
		if sTmp = '0' then cb_PBXLevel.ItemIndex := 0 else
		if sTmp = '2' then cb_PBXLevel.ItemIndex := 1	else 
		if sTmp = '4' then cb_PBXLevel.ItemIndex := 2	else cb_PBXLevel.ItemIndex := 0;
		sTmp := GS_EnvFile.ReadString('CID_COMM', 'PBX_OP',  '1');	
		if sTmp = '1' then rdo_Phone_Use.Checked := True else
		if sTmp = '2' then rdo_Phone_NOUse.Checked := True;
		edt_ComID.Text := GT_ComID;
		edt_AdminID.Text  := GS_EnvFile.ReadString('CID_COMM', 'Admin_ID',  '');
		edt_AdminPW.Text  := GS_EnvFile.ReadString('CID_COMM', 'Admin_PW',  '');
		grpLGUCT.Visible := False;

		frm_JON54.cxPageControl1.Pages[0].TabVisible := False;
		frm_JON54.cxPageControl1.Pages[1].TabVisible := False;
		frm_JON54.cxPageControl1.Pages[2].TabVisible := False;
		frm_JON54.Panel3.visible := False;

		btnIpccMenu.Visible := True;
		proc_Resize;

		if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
		begin
			if not IdUDPCidRecvServer.Active then
			begin
        IdUDPCidRecvServer.Tag := 0;
				IdUDPCidRecvServer.DefaultPort := 25376;
				IdUDPCidRecvServer.Active := True;
			end;
		end;

		if GT_Q_exten = nil 				 then GT_Q_exten    := TStringList.Create;
		if GT_Service_no = nil 			 then GT_Service_no := TStringList.Create;
		if GT_Dnis_no = nil 				 then GT_Dnis_no    := TStringList.Create;
		if GT_Buz_name = nil         then GT_Buz_name   := TStringList.Create; //IPCC 연동 데이터 저장
		if GT_Admin_Q_exten = nil    then GT_Admin_Q_exten    := TStringList.Create;
		if GT_Admin_Service_no = nil then GT_Admin_Service_no := TStringList.Create;
		if GT_Admin_Dnis_no = nil    then GT_Admin_Dnis_no    := TStringList.Create;
		if GT_Admin_Buz_name = nil   then GT_Admin_Buz_name   := TStringList.Create; //IPCC 연동 데이터 저장
				
		gSI415AliveData := '';
		GT_OCX := 'SI415';
	end else
	if cxCidList.ItemIndex = 6 then  // 맑은하늘
	begin
		lb_SI415Notice.Visible := False;
		grpPBXSetting.Visible := False;
    grpPBXSetting.Visible := False;

		GT_OCX := 'SKY'; // 'CXE'사용하면서 맑은하늘 콜링사용
		GS_CleanSKYUse := True;
	end else
	begin
		grpLGUCT.Visible := False;
	end;
	GS_EnvFile.WriteBool('CID_COMM', 'CLEANSKY' , GS_CleanSKYUse); //맑은하늘 전화기 사용값 적용
	GS_EnvFile.WriteInteger('CID_COMM', 'GUBUN' , cxCIDList.ItemIndex);

	cxCIDListView.Tag := 99;
	sTmp := cxCIDList.Text;
	iTmp := cxCIDListView.Properties.Items.IndexOf(sTmp);
	cxCIDListView.ItemIndex := iTmp; 
	cxCIDListView.Tag := 0;
end;

procedure TFrm_Main.cxCIDListViewPropertiesChange(Sender: TObject);
var iTmp : integer;
	sTmp : string;
begin
	if cxCIDListView.Tag = 99 then exit;
	sTmp := cxCIDListView.Text;
	iTmp := cxCIDList.Properties.Items.IndexOf(sTmp);
	cxCIDList.ItemIndex := iTmp; 
end;

procedure TFrm_Main.cxDateEdit3MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('Main.cxDateEdit3MouseDown');
  iTmrBtmMenu := 0;
end;

procedure TFrm_Main.cxGridA1C1ChartSeries1GetValueDisplayText(Sender: TObject;
  const AValue: Variant; var ADisplayText: string);
var sTmp, sValue : string;
	iTag : integer;
begin
	sValue := AValue;
	sValue := formatfloat('#,##0', StrToFloatDef(sValue, 0));
	iTag := TcxGridChartSeries(Sender).Tag;
	if cbChartKindA1.itemIndex = 1 then
	begin
		case iTag of
			0 : sTmp := '출근기사 : ' + sValue + '명';
			1 : sTmp := '대기기사 : ' + sValue + '명';
			2 : sTmp := '운행기사 : ' + sValue + '명';
			3 : sTmp := '퇴근기사 : ' + sValue + '명';
			4 : sTmp := '접속기사 : ' + sValue + '명';
		end;
	end
	else
	begin
		case iTag of
			0 : sTmp := sValue + '명';
			1 : sTmp := sValue + '명';
			2 : sTmp := sValue + '명';
			3 : sTmp := sValue + '명';
			4 : sTmp := sValue + '명';
		end;
	end;
	ADisplayText := sTmp;
end;

procedure TFrm_Main.cxGridA1C1ChartView1GetValueHint(Sender: TcxGridChartView;
  ASeries: TcxGridChartSeries; AValueIndex: Integer; var AHint: string);
begin
	AHint := '';
end;

procedure TFrm_Main.cxGridA1C2ChartALLGetValueHint(Sender: TcxGridChartView;
  ASeries: TcxGridChartSeries; AValueIndex: Integer; var AHint: string);
var sTmp, sValue, sCategory : string;
	iTag : integer;
begin
	sCategory := TcxGridChartView(Sender).Categories.Values[AValueIndex];
	iTag := ASeries.Tag;
	sValue := ASeries.Values[AValueIndex];
	sValue := formatfloat('#,##0', StrToFloatDef(sValue, 0));

	if cbChartKindA1.itemIndex = 7 then    //Pie
	begin
		case iTag of
			0 : sTmp := sCategory + ' 출근기사 : ' + sValue + '명';
			1 : sTmp := sCategory + ' 대기기사 : ' + sValue + '명';
			2 : sTmp := sCategory + ' 운행기사 : ' + sValue + '명';
			3 : sTmp := sCategory + ' 퇴근기사 : ' + sValue + '명';
			4 : sTmp := sCategory + ' 접속기사 : ' + sValue + '명';
		end;
	end	else
	begin
		case iTag of
			0 : sTmp := '출근기사 : ' + sValue + '명';
			1 : sTmp := '대기기사 : ' + sValue + '명';
			2 : sTmp := '운행기사 : ' + sValue + '명';
			3 : sTmp := '퇴근기사 : ' + sValue + '명';
			4 : sTmp := '접속기사 : ' + sValue + '명';
		end;
	end;
	AHint := sTmp;
end;

procedure TFrm_Main.cxGridA2C2ChartALLDataControllerFilterRecord(
  ADataController: TcxCustomDataController; ARecordIndex: Integer;
  var Accept: Boolean);
var iTmp : integer;
begin
	if cbChartKindA2.ItemIndex = 1 then iTmp := gChartUnitCntB else iTmp := gChartUnitCntAC;
	Accept := ARecordIndex < iTmp;
end;

procedure TFrm_Main.cxGridA2C2ChartALLGetValueHint(Sender: TcxGridChartView;
  ASeries: TcxGridChartSeries; AValueIndex: Integer; var AHint: string);
var sTmp, sValue, sCategory : string;
	iTag : integer;
begin
	sCategory := TcxGridChartView(Sender).Categories.Values[AValueIndex];
	iTag := ASeries.Tag;
	sValue := ASeries.Values[AValueIndex];
	sValue := formatfloat('#,##0', StrToFloatDef(sValue, 0));

	if cbKindA24.ItemIndex = 0 then
	begin
		case iTag of
			0 : sTmp := '접수+대기+예약 : ' + sValue + '건';
			1 : sTmp := '운행+완료 : ' + sValue + '건';
			2 : sTmp := '문의+취소 : ' + sValue + '건';
		end;
	end else
  if cbKindA24.ItemIndex = 1 then
	begin
		case iTag of
			0 : sTmp := '접수 : ' + sValue + '건';
			1 : sTmp := '문의 : ' + sValue + '건';
			2 : sTmp := '완료 : ' + sValue + '건';
			3 : sTmp := '취소 : ' + sValue + '건';
		end;
	end	else
  if cbKindA24.ItemIndex = 2 then
	begin
		case iTag of
			0 : sTmp := '총건수 : ' + sValue + '건';
			1 : sTmp := '취소 : ' + sValue + '건';
			2 : sTmp := '취소율 : ' + sValue + '%';
		end;
	end;
	AHint := sTmp;
end;

procedure TFrm_Main.cxGridA3C2ChartALLGetValueHint(Sender: TcxGridChartView;
  ASeries: TcxGridChartSeries; AValueIndex: Integer; var AHint: string);
var sTmp, sValue, sCategory : string;
	iTag : integer;
begin
	sCategory := TcxGridChartView(Sender).Categories.Values[AValueIndex];
	iTag := ASeries.Tag;
	sValue := ASeries.Values[AValueIndex];
	sValue := formatfloat('#,##0', StrToFloatDef(sValue, 0));

	begin
		case AValueIndex of
			0 : sTmp := '출근 : '     + sValue + '명';
			1 : sTmp := '단순접속 : ' + sValue + '명';
			2 : sTmp := '오더접속 : ' + sValue + '명';
			3 : sTmp := '운행 : '     + sValue + '명';
			4 : sTmp := '미출근 : '   + sValue + '명';
			5 : sTmp := '정상 : '     + sValue + '명';
		end;
	end;
	AHint := sTmp;
end;

procedure TFrm_Main.cxGridAiListCellDblClick(Sender: TcxCustomGridTableView;
	ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
	AShift: TShiftState; var AHandled: Boolean);
var
	IE : Variant;
	Value : Cardinal;
	sUrl : string;
	iRow, iCol : integer;
begin
	iRow := cxGridAiList.DataController.FocusedRecordIndex;
	if iRow < 0 then exit;
	iCol := 2;
	sUrl := cxGridAiList.DataController.Values[iRow, iCol];
	 
	IE := CreateOleObject('InternetExplorer.Application');

	IE.Navigate( sUrl );
	IE.AddressBar := False;
	IE.MenuBar := False;
	IE.ToolBar := False;
	IE.StatusBar := False;

	IE.Width := 690;
	IE.Height := 800;

	IE.Top := Self.Top;//((Self.Top * 2 + Self.Height) - IE.Height)/2;
	IE.Left := 0;//Self.Left - IE.Width;

//            bIE := True;
	Value := IE.Hwnd;
	RegSetValue(HKEY_CURRENT_USER, 'HKSFA\IE_HWND', REG_DWORD, @Value, SizeOf(Cardinal));
	IE.Visible := true;
	SetForegroundWindow(Value);
end;

procedure TFrm_Main.cxGridCShareCellDblClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
begin
  SetDebugeWrite('Main.cxGridCShareCellDblClick');
  pmSMI0.Click;
end;

procedure TFrm_Main.cxGridCShareStylesGetContentStyle(
  Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
  AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
Var iSecond, iRow : Integer;
begin
  if (ARecord.Selected) or (Sender.DataController.RecordCount = 0) then	Exit;
  try
    iSecond := cxGridCShare.GetColumnByFieldName('경과(초)').Index;
    iRow := cxGridCShare.DataController.GetRowInfo(ARecord.Index).RecordIndex;

    AStyle := cxStyleCShare;

    if cxGridCShare.DataController.Values[iRow, iSecond] >= '00분20초' then
    begin
      if GB_DARKMODE then AStyle.TextColor := GS_DarkFocusColor
                     else AStyle.TextColor := clRed;
    end else
    begin
      if GB_DARKMODE then AStyle.TextColor := clAqua
                     else AStyle.TextColor := clBlue;
    end;
  except
  end;
end;

procedure TFrm_Main.cxGridFavoriteListCellDblClick(
  Sender: TcxCustomGridTableView; ACellViewInfo: TcxGridTableDataCellViewInfo;
  AButton: TMouseButton; AShift: TShiftState; var AHandled: Boolean);
var Msg : string;
 iRow, i : integer;
begin
  SetDebugeWrite('Main.cxGridFavoriteListCellDblClick');
  try
    iRow := cxGridFavoriteList.DataController.FocusedRecordIndex;
    Msg := '선택하신 전화번호를 삭제하시겠습니까?';
    if Application.MessageBox(PChar(Msg), 'CDMS', MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON2) = IDYES then
    begin
      cxGridFavoriteList.DataController.DeleteRecord(iRow);
      GS_UserFavoriteNumber.Clear;
      for i := 0 to cxGridFavoriteList.DataController.RecordCount -1 do
      begin
        GS_UserFavoriteNumber.Add(cxGridFavoriteList.DataController.Values[i, 1] + '=' + cxGridFavoriteList.DataController.Values[i, 2]);
      end;
      SaveUserFavoriteNumber;
      Frm_JON54.proc_FavoriteNumber;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxGridQRateCellClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
var
  iRow, iRate, iUid, irKey, iState, iARate, icrKey : Integer;
begin
  SetDebugeWrite('Main.cxGridQRateCellClick');
  if ( GT_USERIF.LV = '10' ) And ( TCK_USER_PER.BTM_10LVL_RQUEST <> '1' ) then Exit;

	iState := cxGridQRate.GetColumnByFieldName('상태').Index;
	iRate := cxGridQRate.GetColumnByFieldName('질문자요금').Index;
	iUid  := cxGridQRate.GetColumnByFieldName('uid').Index;
	irKey := cxGridQRate.GetColumnByFieldName('rkey').Index;
	icrKey := cxGridQRate.GetColumnByFieldName('crkey').Index;
	iARate := cxGridQRate.GetColumnByFieldName('답변요금').Index;

  iRow := cxGridQRate.DataController.FocusedRecordIndex;
  try
    // 우측마우스 버튼 클릭 시 기존에 선택했던 레코드가 FocusedRecordIndex로 넘어옴
    if AButton = TMouseButton(mbLeft) then
    begin
      if ( cxGridQRate.DataController.Values[iRow, iState] = '요금문의' ) Or
         ( cxGridQRate.DataController.Values[iRow, iState] = '자동답변' ) Or
         ( cxGridQRate.DataController.Values[iRow, iState] = '답변완료' ) then
      begin
        if StrToIntDef(cxGridQRate.DataController.Values[iRow, iARate], 0) > 0 then
        begin
          lblRateA.Tag  := StrToIntDef(cxGridQRate.DataController.Values[iRow, iARate], 0);
          curRate.Value := StrToIntDef(cxGridQRate.DataController.Values[iRow, iARate], 0);
        end else
        begin
          lblRateA.Tag  := StrToIntDef(cxGridQRate.DataController.Values[iRow, iRate], 0);
          curRate.Value := StrToIntDef(cxGridQRate.DataController.Values[iRow, iRate], 0);
        end;
        lblRateA.Hint := cxGridQRate.DataController.Values[iRow, irKey];
        lblRateE.Hint := cxGridQRate.DataController.Values[iRow, iUid];

        curRate.Enabled := True;
        edtMemo.Enabled := True;

        cxgrpQRHead.Hint := cxGridQRate.DataController.Values[iRow, icrKey];
//        curRate.SetFocus;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxGridQRateStylesGetContentStyle(
  Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
  AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
Var iSt, iRow : Integer;
begin
  if (ARecord.Selected) or (Sender.DataController.RecordCount = 0) then	Exit;

  try
    iSt := cxGridQRate.GetColumnByFieldName('상태').Index;
    iRow := cxGridQRate.DataController.GetRowInfo(ARecord.Index).RecordIndex;

    AStyle := cxStyleQRate;

    if AItem.Index = 17 then
    begin
      if GB_DARKMODE then AStyle.TextColor := GS_DarkFocusColor
                     else AStyle.TextColor := clRed;
      AStyle.Color := $00DBFCFD;
    end else
    if AItem.Index = 18 then
    begin
      if GB_DARKMODE then AStyle.TextColor := clAqua
                     else AStyle.TextColor := clBlue;
      AStyle.Color := $00FEF9DE;
    end else
    begin
      if cxGridQRate.DataController.Values[iRow, iSt] = '요금문의' then
      begin
        if GB_DARKMODE then AStyle.TextColor := GS_DarkFocusColor
                       else AStyle.TextColor := clRed;
      end else
      if cxGridQRate.DataController.Values[iRow, iSt] = '자동답변' then
      begin
        if GB_DARKMODE then AStyle.TextColor := clAqua
                       else AStyle.TextColor := clBlue;
      end else
      begin
        AStyle.TextColor := clBlack;
      end;
      AStyle.Color := clWhite;
    end;
  except
  end;
end;

procedure TFrm_Main.grpSetBadCancelMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  SetDebugeWrite('Main.cxGroupBox14MouseDown');
  grpSetBadCancel.BringToFront;
	ReleaseCapture;
  PostMessage(TcxGroupBox(sender).Handle, WM_SYSCOMMAND, $F012, 0);
end;

procedure TFrm_Main.cxLabel13Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxLabel13Click');
  cxLabel13.Visible := False;
end;

procedure TFrm_Main.cxLabel20Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxLabel20Click');
  ed_CTIIP.SetFocus;
end;

procedure TFrm_Main.cxLabel22Click(Sender: TObject);
begin
	SetDebugeWrite('Main.cxLabel22Click');
  ed_ExTensionNumber.SetFocus;
end;

procedure TFrm_Main.cxLabel36Click(Sender: TObject);
begin
	cxTabControl1.TabIndex := 1;
	cxTabControl1Click(cxTabControl1);
end;

procedure TFrm_Main.cxPageControl1CanCloseEx(Sender: TObject;
  ATabIndex: Integer; var ACanClose: Boolean);
Var iActive : Integer;
begin
  SetDebugeWrite('Main.cxPageControl1CanCloseEx');
  try
    if ATabIndex = 0 then ACanClose := False
    else
    begin
			tmrDiffSosok.Enabled := False;
      tmrDiffJSosok.Enabled := False;
      gSosokName := Nil;
      gSosokTabSheet := Nil;

      iActive := cxPageControl1.Pages[ATabIndex].Tag;
      case iActive of
			300 :
        begin
          if Assigned(Frm_WOR) then
          begin
            if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
              begin
                Frm_JON51.Menu_Use_Mark('DEL', 302);
                Frm_JON51.Menu_Use_Mark('DEL', 303);
                Frm_JON51.Menu_Use_Mark('DEL', 304);
                Frm_JON51.Menu_Use_Mark('DEL', 305);
                Frm_JON51.Menu_Use_Mark('DEL', 306);
                Frm_JON51.Menu_Use_Mark('DEL', 307);
								Frm_JON51.Menu_Use_Mark('DEL', 308);
								Frm_JON51.Menu_Use_Mark('DEL', 309);
								Frm_JON51.Menu_Use_Mark('DEL', 312);
              end;
            end;
            Frm_WOR.Parent := Nil;
            Frm_WOR.Free;
          end;
          ACanClose := True;
        end;
      412 :
        begin
          if Assigned(Frm_WORA8) then
          begin
            Frm_WORA8.Parent := Nil;
            Frm_WORA8.Free;
          end;
          ACanClose := True;
        end;
      400 :
        begin
          if Assigned(Frm_CUT) then
          begin
            if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
              begin
                Frm_JON51.Menu_Use_Mark('DEL', 401);
                Frm_JON51.Menu_Use_Mark('DEL', 402);
                Frm_JON51.Menu_Use_Mark('DEL', 403);
                Frm_JON51.Menu_Use_Mark('DEL', 404);
                Frm_JON51.Menu_Use_Mark('DEL', 405);
                Frm_JON51.Menu_Use_Mark('DEL', 406);
                Frm_JON51.Menu_Use_Mark('DEL', 407);
                Frm_JON51.Menu_Use_Mark('DEL', 408);
                Frm_JON51.Menu_Use_Mark('DEL', 409);
                Frm_JON51.Menu_Use_Mark('DEL', 410);
                Frm_JON51.Menu_Use_Mark('DEL', 411);
              end;
            end;
            Frm_CUT.Parent := Nil;
            Frm_CUT.Free;
          end;
          ACanClose := True;
        end;
      500 :
        begin
          if Assigned(Frm_CUT1) then
          begin
            if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
              begin
                Frm_JON51.Menu_Use_Mark('DEL', 501);
                Frm_JON51.Menu_Use_Mark('DEL', 502);
                Frm_JON51.Menu_Use_Mark('DEL', 503);
                Frm_JON51.Menu_Use_Mark('DEL', 504);
                Frm_JON51.Menu_Use_Mark('DEL', 505);
								Frm_JON51.Menu_Use_Mark('DEL', 506);
								Frm_JON51.Menu_Use_Mark('DEL', 507);
							end;
            end;
            Frm_CUT1.Parent := Nil;
            Frm_CUT1.Free;
          end;
          ACanClose := True;
        end;
      600 :
        begin
          if Assigned(Frm_ACC) then
          begin
            if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
              begin
                Frm_JON51.Menu_Use_Mark('DEL', 601);
                Frm_JON51.Menu_Use_Mark('DEL', 602);
                Frm_JON51.Menu_Use_Mark('DEL', 603);
                Frm_JON51.Menu_Use_Mark('DEL', 604);
                Frm_JON51.Menu_Use_Mark('DEL', 605);
                Frm_JON51.Menu_Use_Mark('DEL', 606);
                Frm_JON51.Menu_Use_Mark('DEL', 607);
                Frm_JON51.Menu_Use_Mark('DEL', 608);
                Frm_JON51.Menu_Use_Mark('DEL', 609);
                Frm_JON51.Menu_Use_Mark('DEL', 621);
              end;
            end;
            Frm_ACC.Parent := Nil;
            Frm_ACC.Free;
          end;
          ACanClose := True;
        end;
      650 :
        begin
          if Assigned(Frm_ACC1) then
          begin
            if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
              begin
                Frm_JON51.Menu_Use_Mark('DEL', 610);
                Frm_JON51.Menu_Use_Mark('DEL', 611);
                Frm_JON51.Menu_Use_Mark('DEL', 612);
                Frm_JON51.Menu_Use_Mark('DEL', 613);
                Frm_JON51.Menu_Use_Mark('DEL', 614);
                Frm_JON51.Menu_Use_Mark('DEL', 615);
                Frm_JON51.Menu_Use_Mark('DEL', 616);
                Frm_JON51.Menu_Use_Mark('DEL', 617);
								Frm_JON51.Menu_Use_Mark('DEL', 619);
								Frm_JON51.Menu_Use_Mark('DEL', 620);
							end;
            end;
            Frm_ACC1.Parent := Nil;
            Frm_ACC1.Free;
          end;
          ACanClose := True;
        end;
      700 :
        begin
          if Assigned(Frm_STT) then
          begin
            if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
              begin
                Frm_JON51.Menu_Use_Mark('DEL', 701);
                Frm_JON51.Menu_Use_Mark('DEL', 702);
                Frm_JON51.Menu_Use_Mark('DEL', 703);
                Frm_JON51.Menu_Use_Mark('DEL', 704);
                Frm_JON51.Menu_Use_Mark('DEL', 705);
                Frm_JON51.Menu_Use_Mark('DEL', 706);
                Frm_JON51.Menu_Use_Mark('DEL', 707);
                Frm_JON51.Menu_Use_Mark('DEL', 708);
                Frm_JON51.Menu_Use_Mark('DEL', 709);
                Frm_JON51.Menu_Use_Mark('DEL', 710);
                Frm_JON51.Menu_Use_Mark('DEL', 711);
              end;
            end;
            Frm_STT.Parent := Nil;
            Frm_STT.Free;
          end;
          ACanClose := True;
				end;
      800 :
        begin
          if Assigned(Frm_CMP) then
          begin
            if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
              begin
                Frm_JON51.Menu_Use_Mark('DEL', 801);
                Frm_JON51.Menu_Use_Mark('DEL', 802);
                Frm_JON51.Menu_Use_Mark('DEL', 803);
                Frm_JON51.Menu_Use_Mark('DEL', 804);
                Frm_JON51.Menu_Use_Mark('DEL', 805);
              end;
            end;
            Frm_CMP.Parent := Nil;
            Frm_CMP.Free;
          end;
          ACanClose := True;
        end;
			810 :
				begin
					if Assigned(Frm_APP) then
					begin
						if Assigned(Frm_JON51) then
						begin
							if TCK_USER_PER.BTM_MENUSCH = '1' then
							begin
								Frm_JON51.Menu_Use_Mark('DEL', 811);
								Frm_JON51.Menu_Use_Mark('DEL', 812);
								Frm_JON51.Menu_Use_Mark('DEL', 813);
								Frm_JON51.Menu_Use_Mark('DEL', 814);
								Frm_JON51.Menu_Use_Mark('DEL', 815);
								Frm_JON51.Menu_Use_Mark('DEL', 816);
								Frm_JON51.Menu_Use_Mark('DEL', 817);
							end;
						end;
						Frm_APP.Parent := Nil;
						Frm_APP.Free;
					end;
					ACanClose := True;
				end;
			820 :
				begin
					if Assigned(Frm_AIC01) then
					begin
						if Assigned(Frm_JON51) then
						begin
							if TCK_USER_PER.BTM_MENUSCH = '1' then
							begin
								Frm_JON51.Menu_Use_Mark('DEL', 821);
								Frm_JON51.Menu_Use_Mark('DEL', 822);
								Frm_JON51.Menu_Use_Mark('DEL', 823);
							end;
						end;
						Frm_AIC01.Parent := Nil;
						Frm_AIC01.Free;
					end;
					ACanClose := True;
				end;
			830 :
				begin
					if Assigned(Frm_AIC11) then
					begin
						if Assigned(Frm_JON51) then
						begin
							if TCK_USER_PER.BTM_MENUSCH = '1' then
							begin
								Frm_JON51.Menu_Use_Mark('DEL', 831);
								Frm_JON51.Menu_Use_Mark('DEL', 832);
								Frm_JON51.Menu_Use_Mark('DEL', 833);
							end;
						end;
						Frm_AIC11.Parent := Nil;
						Frm_AIC11.Free;
					end;
					ACanClose := True;
				end;
			840 :
				begin
					if Assigned(Frm_AIC21) then
					begin
						if Assigned(Frm_JON51) then
						begin
							if TCK_USER_PER.BTM_MENUSCH = '1' then
							begin
								Frm_JON51.Menu_Use_Mark('DEL', 841);
								Frm_JON51.Menu_Use_Mark('DEL', 842);
								Frm_JON51.Menu_Use_Mark('DEL', 843);
								Frm_JON51.Menu_Use_Mark('DEL', 844);
							end;
						end;
						Frm_AIC21.Parent := Nil;
						Frm_AIC21.Free;
					end;
					ACanClose := True;
				end;
			900 :
        begin
          if Assigned(Frm_USR) then
          begin
            if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
              begin
                Frm_JON51.Menu_Use_Mark('DEL', 901);
                Frm_JON51.Menu_Use_Mark('DEL', 902);
                Frm_JON51.Menu_Use_Mark('DEL', 903);
                Frm_JON51.Menu_Use_Mark('DEL', 904);
                Frm_JON51.Menu_Use_Mark('DEL', 905);
                Frm_JON51.Menu_Use_Mark('DEL', 906);
                Frm_JON51.Menu_Use_Mark('DEL', 907);
                Frm_JON51.Menu_Use_Mark('DEL', 908);
                Frm_JON51.Menu_Use_Mark('DEL', 909);
                Frm_JON51.Menu_Use_Mark('DEL', 910);
              end;
            end;
            Frm_USR.Parent := Nil;
            Frm_USR.Free;
          end;
          ACanClose := True;
        end;
			1000 :
				begin
					if Assigned(Frm_SMS) then
					begin
						if Assigned(Frm_JON51) then
						begin
							if TCK_USER_PER.BTM_MENUSCH = '1' then
							begin
								Frm_JON51.Menu_Use_Mark('DEL', 1001);
								Frm_JON51.Menu_Use_Mark('DEL', 1002);
								Frm_JON51.Menu_Use_Mark('DEL', 1003);
								Frm_JON51.Menu_Use_Mark('DEL', 1004);
								Frm_JON51.Menu_Use_Mark('DEL', 1005);
							end;
						end;
						Frm_SMS.Parent := Nil;
						Frm_SMS.Free;
					end;
					ACanClose := True;
				end;
			1171 :
				begin
					if Assigned(Frm_STT_Shuttle) then
					begin
						if Assigned(Frm_JON51) then
						begin
							if TCK_USER_PER.BTM_MENUSCH = '1' then
							begin
								Frm_JON51.Menu_Use_Mark('DEL', 1171);
							end;
						end;
						Frm_STT_Shuttle.Parent := Nil;
						Frm_STT_Shuttle.Free;
					end;
					ACanClose := True;
				end;
			1400 :
        begin
          if Assigned(Frm_SET) then
          begin
            if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
              begin
                Frm_JON51.Menu_Use_Mark('DEL', 1403);
                Frm_JON51.Menu_Use_Mark('DEL', 1404);
                Frm_JON51.Menu_Use_Mark('DEL', 1405);
                Frm_JON51.Menu_Use_Mark('DEL', 1406);
                Frm_JON51.Menu_Use_Mark('DEL', 1407);
              end;
            end;
            Frm_SET.Parent := Nil;
            Frm_SET.Free;
          end;
          ACanClose := True;
        end;
			1600 :
        begin
					if Assigned(Frm_BTN) then
          begin
						if Assigned(Frm_JON51) then
            begin
              if TCK_USER_PER.BTM_MENUSCH = '1' then
							begin
								Frm_JON51.Menu_Use_Mark('DEL', 1601);
								Frm_JON51.Menu_Use_Mark('DEL', 1602);
								Frm_JON51.Menu_Use_Mark('DEL', 1603);
								Frm_JON51.Menu_Use_Mark('DEL', 1604);
								Frm_JON51.Menu_Use_Mark('DEL', 1605);
								Frm_JON51.Menu_Use_Mark('DEL', 1606);
							end;
            end;
						Frm_BTN.Parent := Nil;
						Frm_BTN.Free;
          end;
          ACanClose := True;
        end;
			1700 :
				begin
					if Assigned(Frm_PBX) then
					begin
						if Assigned(Frm_JON51) then
						begin
							if TCK_USER_PER.BTM_MENUSCH = '1' then
							begin
								Frm_JON51.Menu_Use_Mark('DEL', 1701);
								Frm_JON51.Menu_Use_Mark('DEL', 1702);
								Frm_JON51.Menu_Use_Mark('DEL', 1703);
								Frm_JON51.Menu_Use_Mark('DEL', 1704);
								Frm_JON51.Menu_Use_Mark('DEL', 1705);
								Frm_JON51.Menu_Use_Mark('DEL', 1706);
								Frm_JON51.Menu_Use_Mark('DEL', 1707);
								Frm_JON51.Menu_Use_Mark('DEL', 1708);
								Frm_JON51.Menu_Use_Mark('DEL', 1709);
								Frm_JON51.Menu_Use_Mark('DEL', 1710);
								Frm_JON51.Menu_Use_Mark('DEL', 1711);
								Frm_JON51.Menu_Use_Mark('DEL', 1712);
								Frm_JON51.Menu_Use_Mark('DEL', 1713);
								Frm_JON51.Menu_Use_Mark('DEL', 1714);
							end;
						end;
						Frm_PBX.Parent := Nil;
						Frm_PBX.Free;
          end;
          ACanClose := True;
        end;
			 21..25 :
        begin
          WORA1MNG[iActive-21].CreateYN := False;
          WORA1MNG[iActive-21].Use := False;
          Frm_WORA1[iActive-21].Close;

          ACanClose := True;
        end
			else                                    
        begin
          if Not getJON03Close(JON03MNG[iActive].Tag) then
          begin
            ACanClose := False;
            Exit;
          end;

          JON03MNG[iActive].CreateYN := False;
          JON03MNG[iActive].Use := False;
          Frm_JON03[iActive].Close;
//          Frm_JON03[iActive].ManualFloat(Rect(63, 63, 1024 + 63, 768 + 63 ));
//          Frm_JON03[iActive].Hide;

  //-        iLastDockPage := cxPageControl1.PageCount - 1;
  //-        cxPageControl1Change(Sender);

          ACanClose := True;
        end;
      end;
    end;
    if Assigned(Frm_JON51) then
      if TCK_USER_PER.BTM_MENUSCH = '1' then Frm_JON51.Menu_Use_Mark('DEL', iActive);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxPageControl1Change(Sender: TObject);
begin
  SetDebugeWrite('Main.cxPageControl1Change');
  if tmrPageChnage.Tag = 0 then
    tmrPageChnage.Enabled := True;
end;

procedure TFrm_Main.cxPageControl1UnDock(Sender: TObject; Client: TControl;
  NewTarget: TWinControl; var Allow: Boolean);
Var i : Integer;
begin
  SetDebugeWrite('Main.cxPageControl1UnDock');
  try
    if Pos('Frm_JON03', Client.Name) > 0 then
    begin
      Frm_JON03[Client.Tag].pJON03Dock.HdNO    := GT_SEL_BRNO.HDNO;
      Frm_JON03[Client.Tag].pJON03Dock.BrNO    := GT_SEL_BRNO.BrNo;
      Frm_JON03[Client.Tag].pJON03Dock.BrName  := GT_SEL_BRNO.BrName;
      Frm_JON03[Client.Tag].pJON03Dock.Gubun   := GT_SEL_BRNO.Gubun;
      Frm_JON03[Client.Tag].pJON03Dock.Idx     := GT_SEL_BRNO.Idx;
      Frm_JON03[Client.Tag].pJON03Dock.Callcenter := GT_SEL_BRNO.Callcenter;


      Frm_JON03[Client.Tag].Caption := cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Caption;
      Frm_JON03[Client.Tag].HInt    := Frm_JON03[Client.Tag].Caption;

      Frm_JON03[Client.Tag].tmr_dis.Enabled := False;
      Frm_JON03[Client.Tag].PnlAuto.Visible := False;

      for i := 0 to JON_MAX_CNT - 1 do
      begin
        if JON01MNG[i].Use then
        begin
          if JON01MNG[i].Tag = Client.Tag then
          begin
            Frm_JON01N[i].pJON01Dock.bUNDock := True;

            Frm_JON01N[i].pJON01Dock.bUnDock := Frm_JON03[Client.Tag].pJON03Dock.bUnDock;
            Frm_JON01N[i].pJON01Dock.HdNO    := Frm_JON03[Client.Tag].pJON03Dock.HdNo;
            Frm_JON01N[i].pJON01Dock.BrNO    := Frm_JON03[Client.Tag].pJON03Dock.BrNo;
            Frm_JON01N[i].pJON01Dock.Gubun   := Frm_JON03[Client.Tag].pJON03Dock.Gubun;
            Frm_JON01N[i].pJON01Dock.Idx     := Frm_JON03[Client.Tag].pJON03Dock.Idx;
            Frm_JON01N[i].pJON01Dock.Callcenter := Frm_JON03[Client.Tag].pJON03Dock.Callcenter;
            Frm_JON01N[i].pJON01Dock.BrName  := Frm_JON03[Client.Tag].pJON03Dock.BrName;
          end;
        end;
      end;

      iLastDockPage := cxPageControl1.ActivePageIndex;
      cxPageControl1Change(Sender);
    end;

    if Pos('Frm_WORA1', Client.Name) > 0 then
    begin
      Frm_WORA1[Client.Tag-21].pWORA1Dock.HdNO    := GT_SEL_BRNO.HDNO;
      Frm_WORA1[Client.Tag-21].pWORA1Dock.BrNO    := GT_SEL_BRNO.BrNo;
      Frm_WORA1[Client.Tag-21].pWORA1Dock.Gubun   := GT_SEL_BRNO.Gubun;
      Frm_WORA1[Client.Tag-21].pWORA1Dock.Idx     := GT_SEL_BRNO.Idx;
      Frm_WORA1[Client.Tag-21].pWORA1Dock.Callcenter := GT_SEL_BRNO.Callcenter;
      Frm_WORA1[Client.Tag-21].pWORA1Dock.BrName  := GT_SEL_BRNO.BrName;

      Frm_WORA1[Client.Tag-21].Caption := cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Caption;
      Frm_WORA1[Client.Tag-21].HInt    := Frm_JON03[Client.Tag-21].Caption;

      iLastDockPage := cxPageControl1.ActivePageIndex;
      cxPageControl1Change(Sender);
    end;

  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.procJON03Open;
Var i : Integer;
    bOpen : Boolean;
begin
	SetDebugeWrite('Main.procJON03Open');
  try
    bOpen := False;
    for i := 0 to cxPageControl1.PageCount - 1 do
    begin
			if cxPageControl1.Pages[i].Tag < 20 then
			begin
        bOpen := True;
        Break;
      end;
    end;

    if Not bOpen then
      procMainMenuCreateActive(200);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

Function TFrm_Main.getJON03Close( iJon03Tag : Integer ) : Boolean;
Var i, iCnt : Integer;
    msg : String;
begin
  SetDebugeWrite('Main.getJON03Close');
  try
    Result := False;

    iCnt := 0;
    for i := 0 to JON_MAX_CNT - 1 do
    begin
      if JON01MNG[i].Use then
      begin
        if JON01MNG[i].Jon03Tag = iJon03Tag then Inc(iCnt);
      end;
    end;

    if iCnt >= 1 then
    begin
      msg := Format('현재 접수현황에서 생성한 접수창[%d]이 존재합니다.', [iCnt]) + #13#10 +
             '접수창도 모두 닫으시겠습니까?';

      if Application.MessageBox(PChar(msg), CDMSI, MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON1) = IDYES then
      begin
        for i := 0 to JON_MAX_CNT - 1 do
        begin
          if JON01MNG[i].Use then
          begin
            if JON01MNG[i].Jon03Tag = iJon03Tag then
            begin
              if Assigned(Frm_JON01N[i]) then
              begin
                Frm_JON01N[i].btnCmdExit.Description := 'T';
                Frm_JON01N[i].btnCmdExit.Click;
              end;
            end;
          end;
        end;
        Result := True;
      end;
    end else Result := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.IdThreadComponentRun(Sender: TIdThreadComponent);
begin
  // 맨 처음에 한번만 처리  CID서버 UTF8여부 체크하기 위해
  if gsCidEnCoding = '9999' then
  begin
    gsCIDEnCoding := IdXECID.IOHandler.ReadLn();
    if gsCIDEnCoding <> 'enUTF8' then
    begin
      proc_IdXECIDRead(gsCIDEnCoding);
      gsCIDEnCoding := '';
    end;
    Exit;
  end;

  if gsCIDEnCoding = 'enUTF8' then proc_IdXECIDRead(idXECID.IOHandler.ReadLn(enUTF8))
                              else proc_IdXECIDRead(idXECID.IOHandler.ReadLn());
end;

procedure TFrm_Main.IdUDPCidRecvServerUDPRead(AThread: TIdUDPListenerThread;
  const AData: TIdBytes; ABinding: TIdSocketHandle);
var
  msg, sSisoLog : String;
	sStr, sData, sResult, sTmp : string;
	bFirst : Boolean;
begin
	SetDebugeWrite('Main.IdUDPCidRecvServerUDPRead');
	try
    msg := BytesToString(AData, Indy8BitEncoding);

    // TCP 연결된 IP가 아닌 데이터는 무시 , TCP 연결이 안되었을 경우에는 처리  LYB 20200609
    if (GT_OCX <> 'SSIO') And (GT_OCX <> 'SSIT') And (GT_OCX <> 'SI415') then
    begin
      if ( gsCIDConnectIP <> '' ) And ( gsCIDConnectIP <> ABinding.PeerIP ) then
      begin
        Log('UDPRead Exit : ' + msg + ' [PeerIP : ' + ABinding.PeerIP + ', RealIP : ' + gsCIDConnectIP +  ']', HEARTLOGPATHFILE);
        Exit;
      end;
    end;

		gsCIDMessage := msg; // 전문읽기.           '#2601                        000234008522     07081213708    16886618       $'

    try
			if Length(gsCIDMessage) = 63 then
      begin
				CTIXE_Check_Save(gsCIDMessage);  // 전문 Parsing.

        Log(Format('UDPXE --> RECV [%s, %s, %s, %s, %s, %s, %s] %s - %s - %s - %s',
                  [ gXeRecvHeader.sType,
                    gXeRecvHeader.sLine,
                    gXeRecvHeader.sMainLn,
                    gXeRecvHeader.sStation,
                    System.StrUtils.Rightstr(gXeRecvHeader.sTelNum, 4),
                    gXeRecvHeader.sSndTime,
                    gXeRecvHeader.sBrNo,
                    ABinding.PeerIP,
                    GT_USERIF.IP,
                    GT_OCX,
                    gsCidVersion]), HEARTLOGPATHFILE);
      end else
			if Length(gsCIDMessage) = 93 then
      begin
        CTI_Check_Save(gsCIDMessage); // 전문 Parsing.

        Log(Format('UDP --> RECV [%s, %s, %s, %s, %s, %s] %s - %s - %s - %s',
                  [ gRecvHeader.sType,
                    gRecvHeader.sLine,
                    gRecvHeader.sMainLn,
                    gRecvHeader.sStation,
                    System.StrUtils.Rightstr(gRecvHeader.sTelNum, 4),
                    gRecvHeader.sSndTime,
                    ABinding.PeerIP,
                    GT_USERIF.IP,
                    GT_OCX,
                    gsCidVersion]), HEARTLOGPATHFILE);
      end;
    except
    end;

// 		Log('UDPRead[B]/[N] : [' + gsCIDMsgFront + ']/[' + gsCIDMessage + '] [PeerIP : ' + ABinding.PeerIP + ']-' + GT_OCX + ',' + gsCidVersion, HEARTLOGPATHFILE);

		bFirst := False;
		if gsCIDMsgFront <> gsCIDMessage then
		begin
			bFirst := True;
			gsCIDMsgFront := gsCIDMessage;
    end;

		if gsCIDMessage = '' then Exit;
		if ( (GT_OCX <> 'SSIT') and (GT_OCX <> 'SI415') ) And ( Length(gsCIDMessage) = 77 ) then Exit;

		// CID 전문 받은걸 처리한다. ------------------------------------------------
		if ( GT_OCX ='SSIT' ) And (( Length(gsCIDMessage) = 82 ) or ( Length(gsCIDMessage) = 77 )) then
		begin
			try
				sStr := gsCIDMessage;

				sSisoLog := RPad(Copy(sStr, 1, 46), 82, '*');
				gst_SISOLog.Add(Format('%s : %s', [FormatDateTime('YYYY-MM-DD HH:NN:SS', Now), sSisoLog]));

				sData := copy(sStr, 1, 82);
				if Length(sData) = 0 then Exit;

				iSSIOCidHeartBeat := 0;

				//'#8112                        01                                             $'
				if Copy(sData, 2, 4) = '8112' then    // 8112. LBS 동의
				begin
					sResult := Copy(sData, 31, 1);

          if Assigned(Frm_JON60) then
          begin
            Frm_JON60.gsResult := sResult;
            if sResult = '1' then
            begin
              sTmp := '2. 고객위치정보 제공에 동의하셨습니다.';
              Frm_JON60.mmo_Result.lines.Insert(0,sTmp);
              Frm_JON60.lb_Listen.caption := sTmp;
              Frm_JON60.btn_LBSResult.Click;
            end else
            if sResult = '0' then
            begin
              Frm_JON60.lb_Listen.style.color := $004444FF;
              sTmp := '2. 고객위치정보 제공을 거절 하셨습니다.' + #13#10 + #13#10 + 'LBS(고객위치확인)창을 닫고' + #13#10 + 'POI검색을 통해 접수를 진행하여주십시오.';
              Frm_JON60.mmo_Result.lines.Insert(0,sTmp);
              Frm_JON60.lb_Listen.caption := sTmp;
              Frm_JON60.proc_progress(1);
            end else
            if sResult = '2' then
            begin
              Frm_JON60.lb_Listen.style.color := $004444FF;
              sTmp := '2. 고객이 전화를 끊었습니다.' + #13#10 + #13#10 + '안내를 종료합니다.';
              Frm_JON60.lb_Listen.caption := sTmp;
              sTmp := '2. 고객이 전화를 끊었습니다.' + #13#10'안내를 종료합니다.';
              Frm_JON60.mmo_Result.lines.Insert(0,sTmp);
              Frm_JON60.proc_progress(1);
            end;
          end;
				end	else
				if Copy(sData, 2, 4) = '2601' then    // 2601. 신규콜
				begin
					try
						sResult := Copy(sData, 30, 2);
						if sResult = '00' then
						begin   //   #2601                        000234008522     07081213708    16886618       9896 $
							GS_JONCidInput.PhoneNumber := Trim(Copy(sStr, 32, 15));  // 수신번호
							GS_JONCidInput.KeyNumber   := Trim(Copy(sStr, 62, 15));  // 대표번호
//							sStr := StringReplace(sStr, '$', '99999$', [rfReplaceAll]);
							sTmp := Trim(Copy(sStr, 77,  5));
							if sTmp = '$' then sTmp := '';
							GS_JONCidInput.ExtNumber   := sTmp;  // DNIS
							GS_JONCidInput.CidCall     := True;

							if GS_JONCidInput.PhoneNumber <> '' then
              begin
                // CID XE 서버와 SSIO서버에서 자료를 동시에 받을때 같은 자료이면 무시 처리 2초 사이에
                //--------------------------------------------------------------------
								if ( GS_NKTCidInput.KeyNumber <> '' ) And ( GT_NKTXE = 'NKT' ) then
								begin
                  if ( GS_NKTCidInput.KeyNumber   = GS_JONCidInput.KeyNumber   ) And
                     ( GS_NKTCidInput.PhoneNumber = GS_JONCidInput.PhoneNumber ) then
									begin
										if SecondsBetween(GS_NKTCidInput.InDate, Now) <= 2 then
                    begin
                      GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
                      GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;
											GS_NKTCidInput.InDate      := Now;
                      Exit;
                    end;
									end;
                end;

                GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
								GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;
                GS_NKTCidInput.InDate      := Now;

								TimerOCX.Enabled := True;

								if bSSIO_CTI.Socket.Connected then
                begin
									// 3601. 신규콜 응답 성공 패킷
              	  sStr := '#';
									sStr := sStr + '3601';
              	  sStr := sStr + Rpad('5001',   4, ' ');
              	  sStr := sStr + Rpad(''    ,  20, ' ');
              	  sStr := sStr + Rpad('00'  ,   2, ' ');
              	  sStr := sStr + Rpad(''    ,  15, ' ');
              	  sStr := sStr + Rpad(''    ,  15, ' ');
              	  sStr := sStr + Rpad(''    ,  15, ' ');
              	  sStr := sStr + '$';
              	  bSSIO_CTI.Socket.SendText(sStr);
              	  SetDebugeWrite('UDP SSIT Send: '+ sStr);
                end else
                begin
									SetDebugeWrite('UDP SSIT Not Send: '+ sStr);
                end;
              end;
            end else
            begin
              if bSSIO_CTI.Socket.Connected then
              begin
                // 3601. 신규콜 응답 실패 패킷
                sStr := '#';
                sStr := sStr + '3601';
                sStr := sStr + Rpad('5001' ,   4, ' ');
                sStr := sStr + Rpad(''     ,  20, ' ');
                sStr := sStr + Rpad(sResult,   2, ' ');
                sStr := sStr + Rpad(''     ,  15, ' ');
                sStr := sStr + Rpad(''     ,  15, ' ');
                sStr := sStr + Rpad(''     ,  15, ' ');
                sStr := sStr + '$';
                bSSIO_CTI.Socket.SendText(sStr);
								if ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'J610')) or (GT_USERIF.BR = 'B100')  then 
									Log('UDP SSIT Send: '+ sStr, LOGDATAPATHFILE);  //천안로그 20191125 KHS
								SetDebugeWrite('UDP SSIT Send: '+ sStr);
							end else
							begin
            	  SetDebugeWrite('UDP SSIT Not Send: '+ sStr);
							end;

      				ShowMessage('시사일오 CID 수신 실패!'  + #13#10 + fSSIO_ErrMsg(sResult));
              Exit;
            end;
    			except on E: Exception do
						Assert(False, E.Message);
    			end;
				end	else
				if Copy(sData, 2, 4) = '2602' then    // 2602. 팝업전송 신규콜
				begin
					try
						sResult := Copy(sData, 30, 2);
						if sResult = '00' then
						begin
							GS_JONCidInput.PhoneNumber := Trim(Copy(sStr, 32, 15));  // 수신번호
							GS_JONCidInput.KeyNumber   := Trim(Copy(sStr, 62, 15));  // 대표번호
							sTmp := Trim(Copy(sStr, 77,  5));
							if sTmp = '$' then sTmp := '';
							GS_JONCidInput.ExtNumber   := sTmp;  // DNIS
							GS_JONCidInput.CidCall     := False;
							
      				if GS_JONCidInput.PhoneNumber <> '' then
              begin
								// CID XE 서버와 SSIO서버에서 자료를 동시에 받을때 같은 자료이면 무시 처리 2초 사이에
                //--------------------------------------------------------------------
								if ( GS_NKTCidInput.KeyNumber <> '' ) And ( GT_NKTXE = 'NKT' ) then
								begin
                  if ( GS_NKTCidInput.KeyNumber   = GS_JONCidInput.KeyNumber   ) And
                     ( GS_NKTCidInput.PhoneNumber = GS_JONCidInput.PhoneNumber ) then
									begin
										if SecondsBetween(GS_NKTCidInput.InDate, Now) <= 2 then
                    begin
                      GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
                      GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;

                      Exit;
                    end;
									end;
                end;

                GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
								GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;
								GS_NKTCidInput.InDate      := Now;

								TimerOCX.Enabled := True;

								if bSSIO_CTI.Socket.Connected then
                begin
                  // 3601. 신규콜 응답 성공 패킷
              	  sStr := '#';
              	  sStr := sStr + '3601';
              	  sStr := sStr + Rpad('5001',   4, ' ');
              	  sStr := sStr + Rpad(''    ,  20, ' ');
              	  sStr := sStr + Rpad('00'  ,   2, ' ');
              	  sStr := sStr + Rpad(''    ,  15, ' ');
              	  sStr := sStr + Rpad(''    ,  15, ' ');
              	  sStr := sStr + Rpad(''    ,  15, ' ');
									sStr := sStr + '$';
              	  bSSIO_CTI.Socket.SendText(sStr);
              	  SetDebugeWrite('UDP SSIT Send: '+ sStr);
                end else
								begin
              	  SetDebugeWrite('UDP SSIT Not Send: '+ sStr);
                end;
							end;
            end else
            begin
							if bSSIO_CTI.Socket.Connected then
              begin
                // 3601. 신규콜 응답 실패 패킷
                sStr := '#';
                sStr := sStr + '3601';
                sStr := sStr + Rpad('5001' ,   4, ' ');
                sStr := sStr + Rpad(''     ,  20, ' ');
                sStr := sStr + Rpad(sResult,   2, ' ');
                sStr := sStr + Rpad(''     ,  15, ' ');
                sStr := sStr + Rpad(''     ,  15, ' ');
                sStr := sStr + Rpad(''     ,  15, ' ');
                sStr := sStr + '$';
                bSSIO_CTI.Socket.SendText(sStr);
                SetDebugeWrite('UDP SSIT Send: '+ sStr);
              end else
              begin
            	  SetDebugeWrite('UDP SSIT Not Send: '+ sStr);
              end;

      				ShowMessage('시사일오 CID 수신 실패!'  + #13#10 + fSSIO_ErrMsg(sResult));
              Exit;
						end;
    			except on E: Exception do
    				Assert(False, E.Message);
    			end;
				end else
    	  if Copy(sData, 2, 4) = '3501' then    // 3501. 신규콜
        begin
          sResult := Copy(sData, 30, 2);
          if sResult = '00' then
          begin

          end else
          begin
    				ShowMessage('전화걸기가 실패했습니다' + #13#10 + fSSIO_ErrMsg(sResult));
            Exit;
          end;
        end else
    	  if Copy(sData, 2, 4) = '9000' then    // 9000. Ping
        begin
          sResult := Copy(sData, 30, 2);
          if sResult = '00' then
          begin

          end else
          begin
    				ShowMessage(fSSIO_ErrMsg(sResult));
            Exit;
          end;
        end;
    	except
    		on e: Exception do
    		begin
    			sStr := 'frmMainUDP [UDP SSIT]Error:' + e.Message;
    			Assert(False, E.Message);
    			GMessagebox(PChar(sStr), CDMSE);
    		end;
			end;
    end else
		begin
      if (GT_OCX = 'SSIO') Or (GT_OCX = 'SSIT') Or (GT_OCX = 'SI415') then
      begin
        SetDebugeWrite_CID('UDPRead[B]/[N] '+GT_OCX+' Exit : [' + gsCIDMsgFront + ']/[' + gsCIDMessage + ']' );
        Exit;
      end;

			if bFirst then
			begin
				tmr_JoinView.Tag := 200;
  			tmr_JoinView.Enabled := True;
  			giCIDCheckCnt := 0;
  		end;
		end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.IdXECIDConnected(Sender: TObject);
begin
	Log('Main.xIdeCIDConnect', HEARTLOGPATHFILE);
	try
		IdThreadComponent.Active := True;
    pSetCIDState(0);

    gsCIDConnectIP := IdXECID.Host;

    lb_Win10CIDXE.Visible := True;
    lb_Win10CIDXE.Left := 205;
    lb_Win10CIDXE.Top := 115;

		iCidConnectErrCnt := 0;

		if ( GT_OCX = 'NKT'  ) then GT_NKTXE := 'NKT' else
		if ( GT_OCX = 'SSIO' ) then GT_NKTXE := 'NKT' else
		if ( GT_OCX = 'SSIT' ) then GT_NKTXE := 'NKT';

    Sleep(500);
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.IdXECIDDisconnected(Sender: TObject);
begin
  Log('Main.IdxeCIDDisconnect', HEARTLOGPATHFILE);
  try
    if tmr_xeCID_check.Tag = 20 then Exit;
    pSetCIDState(1);
    lb_Win10CIDXE.Visible := False;
    gsCIDConnectIP := '';
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.cxPageControl2Change(Sender: TObject);
Var i : Integer;
begin
	SetDebugeWrite('Main.cxPageControl2Change');
  try
    for i := 0 to cxPageControl2.PageCount - 1 do
    begin
      cxPageControl2.Pages[i].Tag := 0;
    end;

		if cxPageControl2.ActivePageIndex = 0 then
    begin
      tmrBtmMenu.Enabled := False;
      iTmrBtmMenu := 0;

			if Assigned(Frm_JON54) and (Frm_JON54.btnCallListAutoSearch <> nil) then
			begin
				if ( Frm_JON54.btnCallListAutoSearch.Down ) And ( Frm_JON54.btnCallingList.Tag = 1 ) then
				begin
					if GS_JON54AutoRunNew then 
						Frm_JON54.trm_CallList.Enabled := True
					else
						Frm_JON54.trm_CallList.Enabled := False;
				end;
			end;
    end else
			Frm_JON54.trm_CallList.Enabled := False;

    if cxPageControl2.ActivePageIndex = 1 then        // 부재중전화
    begin
      if Not Assigned(Frm_JON55) then
      begin
        Frm_JON55 := TFrm_JON55.Create(Self);
        Frm_JON55.Parent := tsBtmMenu2;
        Frm_JON55.Align := alClient;
        Frm_JON55.Show;
      end;
      Frm_JON55.btn_UnansweredCall.Click;
    end else
    if cxPageControl2.ActivePageIndex = 4 then       // 콜지도보기
    begin
      pJON52Create;
    end else
    if cxPageControl2.ActivePageIndex = 5 then      // 부정취소콜
    begin
      if Not Assigned(Frm_JON53) then
      begin
        Frm_JON53 := TFrm_JON53.Create(Self);
        Frm_JON53.Parent := tsBtmMenu6;
        Frm_JON53.Align := alClient;
        Frm_JON53.Show;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxPageControl2Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxPageControl2Click');
  try
    if cxPageControl2.Pages[cxPageControl2.ActivePageIndex].Tag = 0 then
    begin
      cxPageControl2.Pages[cxPageControl2.ActivePageIndex].Tag := 1;
      BtnFix.Down := True;
      BtnFixClick(BtnFix);
      if cxPageControl2.ActivePageIndex = 7 then Frm_JON51.EdtSearch.SetFocus;

      if cxSAutoHideMin.Value <> 0 then
      begin
        iTmrBtmMenu := 0;
        tmrBtmMenu.Enabled := True;
      end;

      if ( Frm_JON54.btnCallListAutoSearch.Down ) And ( Frm_JON54.btnCallingList.Tag = 1 ) then
        Frm_JON54.trm_CallList.Enabled := True
      else
        Frm_JON54.trm_CallList.Enabled := False;

      if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 0 then
      begin
        if cxPageControl2.ActivePageIndex = 4 then
          if Frm_Main.Frm_JON03[0].btnListMap.Down then Frm_Main.Frm_JON03[0].btnListMap.Click;
      end else
      if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 1 then
      begin
        if cxPageControl2.ActivePageIndex = 4 then
          if Frm_Main.Frm_JON03[1].btnListMap.Down then Frm_Main.Frm_JON03[1].btnListMap.Click;
      end else
      if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 2 then
      begin
        if cxPageControl2.ActivePageIndex = 4 then
          if Frm_Main.Frm_JON03[2].btnListMap.Down then Frm_Main.Frm_JON03[2].btnListMap.Click;
      end else
      if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 3 then
      begin
        if cxPageControl2.ActivePageIndex = 4 then
          if Frm_Main.Frm_JON03[3].btnListMap.Down then Frm_Main.Frm_JON03[3].btnListMap.Click;
      end else
      if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = 4 then
      begin
        if cxPageControl2.ActivePageIndex = 4 then
          if Frm_Main.Frm_JON03[4].btnListMap.Down then Frm_Main.Frm_JON03[4].btnListMap.Click;
      end;

    end else
    begin
      cxPageControl2.Pages[cxPageControl2.ActivePageIndex].Tag := 0;
      BtnFix.Down := False;
      BtnFixClick(BtnFix);
      tmrBtmMenu.Enabled := False;
      iTmrBtmMenu := 0;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxPageControl2Resize(Sender: TObject);
begin
  SetDebugeWrite('Main.cxPageControl2Resize');
  try
    if iFirstCnt > 2 then
    begin
      if BtnFix.Down then
      begin
      	GS_EnvFile.WriteInteger('BMenuHeight', IntToStr(cxPageControl2.ActivePageIndex), cxPageControl2.Height);
      end;
    end;
    Inc(iFirstCnt);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxSgBrOrderCellDblClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
var
	iRow: Integer;
	sTmp : String;
	iTmp : integer;
begin
	SetDebugeWrite('Frm_Main.cxSgBrOrderCellDblClick');
	try
		iRow := cxSgBrOrder.DataController.FocusedRecordIndex;
    if iRow <= 0 then Exit;

		if cbKindA21.ItemIndex = 0 then
		begin
			sTmp := cxSgBrOrder.DataController.Values[iRow, 1];
			iTmp := cbKindA22.Properties.Items.IndexOf(sTmp);
			if iTmp > -1 then
				cbKindA22.ItemIndex := iTmp;
		end	else
		begin
			sTmp := cxSgBrOrder.DataController.Values[iRow, 3];
			iTmp := cbKindA23.Properties.Items.IndexOf(sTmp);
			if iTmp > -1 then
				cbKindA23.ItemIndex := iTmp;
		end;
	except
		on e: exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

procedure TFrm_Main.cxSgBrOrderColumnHeaderClick(Sender: TcxGridTableView;
  AColumn: TcxGridColumn);
begin
  AIndex := AColumn.Index;
end;

procedure TFrm_Main.cxSgBrOrderColumnPosChanged(Sender: TcxGridTableView; AColumn: TcxGridColumn);
Var i, ID, Index : Integer;
    sTmp : String;
    List : TStringList;
begin
  SetDebugeWrite('Main.cxSgBrOrderColumnPosChanged');
  SaveGridSizeEnv(Sender, GS_EnvFile);
  CopyGridSizeEnv(Sender, cxSgHdOrder, GS_EnvFile);
end;

procedure TFrm_Main.cxSgBrOrderColumnSizeChanged(Sender: TcxGridTableView; AColumn: TcxGridColumn);
Var i : Integer;
begin
  SetDebugeWrite('Main.cxSgBrOrderColumnSizeChanged');
  SaveGridSizeEnv(Sender, GS_EnvFile);

  if TcxGridTableView(Sender).Name = 'cxSgHdOrder' then
  begin
    for i := 0 to cxSgBrOrder.ColumnCount - 1 do
    begin
      cxSgBrOrder.Columns[i].Width := TcxGridTableView(Sender).Columns[i].Width;
    end;
  end else
  if TcxGridTableView(Sender).Name = 'cxSgBrOrder' then
  begin
    for i := 0 to cxSgHdOrder.ColumnCount - 1 do
    begin
      cxSgHdOrder.Columns[i].Width := TcxGridTableView(Sender).Columns[i].Width;
    end;
  end;
end;

procedure TFrm_Main.cxSgBrOrderCustomDrawCell(Sender: TcxCustomGridTableView; ACanvas: TcxCanvas; AViewInfo: TcxGridTableDataCellViewInfo;
  var ADone: Boolean);
var
  lBorders: TcxBorders;
  lRect: Trect;
begin
  if (aViewInfo.GridRecord.Index = 0) and (aViewInfo.Item.Index In [2, 3]) then
  begin
    lBorders := [bLeft, bRight];
    lRect := AViewInfo.Bounds;
    aCanvas.FillRect(lRect);
    lRect.Left := lRect.Left - 1;
    lRect.Right := lRect.Right + 1;
    ACanvas.DrawComplexFrame(lRect, $00FBF6F2, $00FBF6F2, lBorders, 1);
    if (aViewInfo.Item.Index = 2) then
      ACanvas.DrawTexT('합   계', lRect, cxAlignHCenter or cxAlignVCenter);
    aDone := True;
  end;
end;

procedure TFrm_Main.cxSgBrOrderDataControllerSortingChanged(Sender: TObject);
begin
  gfSetIndexNo(cxSgBrOrder, AIndex, GS_SortNoChange, 1);
end;

procedure TFrm_Main.cxSgBrOrderMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  btnBrExcelDown.Tag := 0;
end;

procedure TFrm_Main.cxSgBrWkCellClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);
var
	s: string;
	iRow: Integer;
	sTmp : String;
	iTmp : integer;
begin
  SetDebugeWrite('Main.cxSgBrWkCellClick');
  try
    iRow := cxSgBrWk.DataController.FocusedRecordIndex;
		GT_SEL_BRNO.BrNo := cxSgBrWk.DataController.Values[iRow, 7];
		GT_SEL_BRNO.HDNO := func_search_hdNo(GT_SEL_BRNO.BrNo);
		
		if scb_HeadCodeCallBell[scb_HeadCode.IndexOf(GT_SEL_BRNO.HDNO)] = 'y' then gs_CallBellUse := True
                                                                          else gs_CallBellUse := False;

    GT_SEL_BRNO.Idx := 1;
    GT_SEL_BRNO.GUBUN := '1';
    proc_stab_ref(GT_SEL_BRNO.BrNo);

		SetTree_ListItem(GT_SEL_BRNO.HDNO, GT_SEL_BRNO.BrNo, GT_SEL_BRNO.Idx);

		sTmp := cxSgBrWk.DataController.Values[iRow, 1];
		iTmp := cbKindA11.Properties.Items.IndexOf(sTmp);
		if iTmp > -1 then
			cbKindA11.ItemIndex := iTmp;
	except
		on e: exception do
		begin
			s := 'cxSgBrWkCellClick[BrWkCount]:' + e.Message;
			Assert(False, E.Message);
			ShowMessage(s);
		end;
	end;
end;

procedure TFrm_Main.cxSgHdOrderColumnHeaderClick(Sender: TcxGridTableView;
  AColumn: TcxGridColumn);
begin
  AIndex := AColumn.Index;
end;

procedure TFrm_Main.cxSgHdOrderDataControllerSortingChanged(Sender: TObject);
begin
  gfSetIndexNo(cxSgHdOrder, AIndex, GS_SortNoChange);
end;

procedure TFrm_Main.cxSgHdOrderMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  btnBrExcelDown.Tag := 1;
end;

procedure TFrm_Main.cxShareCallColumnHeaderClick(Sender: TcxGridTableView;
  AColumn: TcxGridColumn);
begin
  AIndex := AColumn.Index;
end;

procedure TFrm_Main.cxShareCallDataControllerSortingChanged(Sender: TObject);
begin
  gfSetIndexNo(cxShareCall, AIndex, GS_SortNoChange);
end;

procedure TFrm_Main.cxTabControl1Click(Sender: TObject);
begin
  SetDebugeWrite('Main.cxTabControl1Click');
  try
   if (GS_PRJ_AREA = 'S') Or ( GT_KAKAOUse ) Or
     ((GS_PRJ_AREA = 'O') and ((GT_USERIF.ShareNo = 'G91') or (GT_USERIF.ShareNo = 'G10') or (GT_USERIF.ShareNo = 'G90') or
                               (GT_USERIF.ShareNo = 'G12') or (GT_USERIF.ShareNo = 'G03') or (GT_USERIF.ShareNo = 'G21') or
                               (GT_USERIF.ShareNo = 'G25') or (GT_USERIF.ShareNo = 'G94') or (GT_USERIF.ShareNo = 'G23') or
                               (GT_USERIF.ShareNo = 'G46') or (GT_USERIF.ShareNo = 'G05') or
                               (GT_USERIF.ShareNo = 'G58'))) then dxTileControl1Item2.visible := True
                                                             else dxTileControl1Item2.visible := False;

		if cxTabControl1.TabIndex = 0 then
    begin
      PnlMainGongJi.Visible := True;
      PnlManual.Visible := False;
			pnl_AiList.visible := False;
		end else
    begin
      cxTabControl1.Visible := True;
      PnlMainGongJi.Visible := False;
			PnlManual.Visible := True;
			pnl_AiList.visible := False;
			if ((cxTabControl1.TabIndex = 1) or (cxTabControl1.TabIndex = 2)) and (GT_AIUse) then pnl_AiList.visible := True;
			if cxTabControl1.TabIndex = 1  then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu10.html') else   // AI 배차지연콜
			if cxTabControl1.TabIndex = 2  then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu09.html') else   // AI
			if cxTabControl1.TabIndex = 3  then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXE4Menu.html' ) else   // XE4신규기능
			if cxTabControl1.TabIndex = 4  then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu08.html') else   // DB손보
			if cxTabControl1.TabIndex = 5  then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu06.html') else
			if cxTabControl1.TabIndex = 6  then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu05.html') else
			if cxTabControl1.TabIndex = 7  then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu01.html') else
			if cxTabControl1.TabIndex = 8  then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu02.html') else
			if cxTabControl1.TabIndex = 9  then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu03.html') else   // 접수시 고객에게
			if cxTabControl1.TabIndex = 10 then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu04.html') else
			if cxTabControl1.TabIndex = 11 then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu07-2.html')      // 고객지원
//			if cxTabControl1.TabIndex = 10 then WebBrowser2.Navigate('http://www.callmaner.com/CmnXEMenu/CmnXEMenu07.html')      // 콜벨사용
			;
		end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.tsBtmMenu8Resize(Sender: TObject);
begin
  SetDebugeWrite('Main.cxTabSheet9Resize');
  try
    if Assigned(Frm_JON51) then
    begin
      if tsBtmMenu8.Width > 1236  then
      begin
        Frm_JON51.PnlLeft.Align := alRight;
      end else
      if tsBtmMenu8.Width < 970 then
      begin
        Frm_JON51.PnlLeft.Align := alLeft;
      end else
      begin
        Frm_JON51.PnlLeft.Align := alLeft;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxTextEdit2KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('Main.cxTextEdit2KeyDown');
  if key = vk_Return then
  begin
    ed_FavoriteMemo.SetFocus;
  end;
end;

procedure TFrm_Main.cxTextEdit2KeyPress(Sender: TObject; var Key: Char);
begin
  SetDebugeWrite('Main.cxTextEdit2KeyPress');
  // 전화번호이기 때문에 숫자만 입력 받는다.  [(Key = #3) : Ctrl+C, (Key = #22) : Ctrl+V]
  if ((Key >= #48) and (Key <= #57)) or (Key = #8) or (Key = #3) or (Key = #22)then
  else
  begin
    Key := #0;
	end;
end;

procedure TFrm_Main.cxTextEdit4KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('Main.cxTextEdit4KeyDown');
  if key = vk_Return then
  begin
    cxButton9.Click;
  end;
end;

procedure TFrm_Main.cxTrackBar1PropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('Main.cxTrackBar1PropertiesChange');
  try
    if TcxTrackBar(Sender).Tag = 1 then Exit;
    TcxTrackBar(Sender).Tag := 1;
    try
      if iPrePosition <= TcxTrackBar(Sender).Position then
        TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + iCntTrack
      else
        TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + ( iCntTrack * -1 )
    finally
      TcxTrackBar(Sender).Tag := 0;
    end;
    advTPTPna1.Width := TcxTrackBar(Sender).Position;
    iPrePosition := TcxTrackBar(Sender).Position;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxTrackBar2PropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('Main.cxTrackBar2PropertiesChange');
  try
    if TcxTrackBar(Sender).Tag = 1 then Exit;
    TcxTrackBar(Sender).Tag := 1;
    try
      if iPrePosition <= TcxTrackBar(Sender).Position then
        TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + iCntTrack
      else
        TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + ( iCntTrack * -1 )
    finally
      TcxTrackBar(Sender).Tag := 0;
    end;

    advTPTPna2.Width := TcxTrackBar(Sender).Position;
    iPrePosition := TcxTrackBar(Sender).Position;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxTrackBar3PropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('Main.cxTrackBar3PropertiesChange');
  try
    if TcxTrackBar(Sender).Tag = 1 then Exit;
    TcxTrackBar(Sender).Tag := 1;
    try
      if iPrePosition <= TcxTrackBar(Sender).Position then
        TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + iCntTrack
      else
        TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + ( iCntTrack * -1 )
    finally
      TcxTrackBar(Sender).Tag := 0;
    end;

    advTPTPna3.Width := TcxTrackBar(Sender).Position;
    iPrePosition := TcxTrackBar(Sender).Position;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.cxTrackBar4PropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('Main.cxTrackBar4PropertiesChange');
  if TcxTrackBar(Sender).Tag = 1 then Exit;
  TcxTrackBar(Sender).Tag := 1;
  try
    if iPrePosition <= TcxTrackBar(Sender).Position then
      TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + iCntTrack
    else
      TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + ( iCntTrack * -1 )
  finally
    TcxTrackBar(Sender).Tag := 0;
  end;

  advTPTPna4.Width := TcxTrackBar(Sender).Position;
  iPrePosition := TcxTrackBar(Sender).Position;
end;

procedure TFrm_Main.cxTrackBar5PropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('Main.cxTrackBar5PropertiesChange');
  if TcxTrackBar(Sender).Tag = 1 then Exit;
  TcxTrackBar(Sender).Tag := 1;
  try
    if iPrePosition <= TcxTrackBar(Sender).Position then
      TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + iCntTrack
    else
      TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + ( iCntTrack * -1 )
  finally
    TcxTrackBar(Sender).Tag := 0;
  end;

  advTPTPna5.Width := TcxTrackBar(Sender).Position;
  iPrePosition := TcxTrackBar(Sender).Position;
end;

procedure TFrm_Main.cxTrackBar6PropertiesChange(Sender: TObject);
begin
  SetDebugeWrite('Main.cxTrackBar6PropertiesChange');
  if TcxTrackBar(Sender).Tag = 1 then Exit;
  TcxTrackBar(Sender).Tag := 1;
  try
    if iPrePosition <= TcxTrackBar(Sender).Position then
      TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + iCntTrack
    else
      TcxTrackBar(Sender).Position := TcxTrackBar(Sender).Position + ( iCntTrack * -1 )
  finally
    TcxTrackBar(Sender).Tag := 0;
  end;

  advTPTPna6.Width := TcxTrackBar(Sender).Position;
  iPrePosition := TcxTrackBar(Sender).Position;
end;

procedure TFrm_Main.DataArrival(AData: string);
var
	sStr, sendStr, sData : string;
begin
  SetDebugeWrite('Main.DataArrival');

//  if GT_USERIF.CT = 'R134' then Log('DataArrival : ' + AData, LOGDATAPATHFILE);
	try
		sStr := AData;
		if Trim(sStr) = '' then Exit;
		sData := Copy(sStr, 24, length(sStr) - 23);
		if Copy(sStr, 1, 3) = '500' then    //최초 접속 시 softphone 상태
		begin
			if trim(copy(sData,1,2)) = '3' then
			begin
				if trim(copy(sData,3,3)) = '61' then
				begin
					Frm_JON54.btn_PickUpPhone.Enabled := True; //전화받기
					Frm_JON54.btn_Calling.Enabled := False; //전화걸기
				end	else
				if trim(copy(sData,3,3)) = '62' then
				begin
					Frm_JON54.btn_PickUpPhone.Enabled := True; //전화받기
					Frm_JON54.btn_Calling.Enabled := False; //전화걸기
				end else
				if trim(copy(sData,3,3)) = '71' then
				begin
					Frm_JON54.btn_PickUpPhone.Enabled := True; //전화받기
					Frm_JON54.btn_Calling.Enabled := False; //전화걸기
				end else
				if trim(copy(sData,3,3)) = '73' then
				begin
					Frm_JON54.btn_PickUpPhone.Enabled := True; //전화받기
					Frm_JON54.btn_Calling.Enabled := False; //전화걸기
				end;
			end;
		end else
		if Copy(sStr, 1, 3) = '612' then    //헤드셋/수화기 설정완료 전문 수신시
		begin
			//접속에 성공하면 설정된 헤드셋/수화기 동기화를 한다
			GT_RECEIVER_KIND :=  Copy(sStr, 129, 1);
			GS_EnvFile.WriteString('POSS_TEL', 'GT_RECEIVER_KIND', GT_RECEIVER_KIND);
			if Assigned(Frm_JON03[GI_JON03_LastFromIdx]) then
			begin
				if GT_RECEIVER_KIND = '0' then
					rb_Receiver.Checked := True
				else
					rb_HeadSet.Checked := True;
			end;
		end	else
		if Copy(sStr, 1, 3) = '211' then    //헤드셋/수화기 변환시
		begin
			if Copy(sStr, 19, 2) = '00' then
			else if Copy(sStr, 18, 2) = '01' then
			begin
				ShowMessage('헤드셋/수화기 설정실패');
				Exit;
			end;
		end	else
		if Copy(sStr, 1, 3) = '602' then    //전화 인입시
		begin
			try
				GS_JONCidInput.KeyNumber   := Trim(Copy(sData, 1, 15));
				GS_JONCidInput.PhoneNumber := Trim(Copy(sData, 16, 30));
				GS_JONCidInput.ExtNumber   := '';//Trim(Copy(sData, 18, 5));
				GS_JONCidInput.CidCall     := False;
				Frm_JON54.btn_PickUpPhone.Enabled := True; //전화받기
				Frm_JON54.btn_Calling.Enabled := False; //전화걸기
			except on E: Exception do
				Assert(False, E.Message);
			end;
		end	else
    if Copy(sStr, 1, 3) = '202' then    //전화받기시
		begin
			if Copy(sStr, 19, 2) = '00' then
			begin
				Frm_JON54.btn_PickUpPhone.Enabled := True; //전화받기
				Frm_JON54.btn_Calling.Enabled := False; //전화걸기
			end	else
      if Copy(sStr, 19, 2) = '01' then
			begin
				ShowMessage('전화받기가 실패되었습니다.');
				Exit;
			end;
		end	else
		if Copy(sStr, 1, 3) = '603' then    //전화 받을때 접수창 띄움
		begin
			try
				if GS_JONCidInput.PhoneNumber <> '' then
        begin
          // CID XE 서버와 NKT서버에서 자료를 동시에 받을때 같은 자료이면 무시 처리 2초 사이에
          //--------------------------------------------------------------------
          if ( GS_NKTCidInput.KeyNumber <> '' ) And ( GT_NKTXE = 'NKT' ) then
          begin
            if ( GS_NKTCidInput.KeyNumber   = GS_JONCidInput.KeyNumber   ) And
               ( GS_NKTCidInput.PhoneNumber = GS_JONCidInput.PhoneNumber ) then
            begin
              if SecondsBetween(GS_NKTCidInput.InDate, Now) <= 2 then
              begin
                GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
                GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;
                GS_NKTCidInput.InDate      := Now;

//                if GT_USERIF.CT = 'R134' then Log('DataArrival Exit : ' + GS_JONCidInput.KeyNumber + ',' + GS_JONCidInput.PhoneNumber, LOGDATAPATHFILE);
                Exit;
              end;
            end;
          end;

          GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
          GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;
          GS_NKTCidInput.InDate      := Now;
          //--------------------------------------------------------------------
					TimerOCX.Enabled := True;
        end;
			except on E: Exception do
				Assert(False, E.Message);
			end;
		end	else
    if Copy(sStr, 1, 3) = '604' then    //전화 종료시
		begin
			Frm_JON54.btn_PickUpPhone.Enabled := False; //전화받기
			Frm_JON54.btn_Calling.Enabled := True; //전화걸기
			GS_JONCidInput.KeyNumber   := '';
			GS_JONCidInput.PhoneNumber := '';
			GS_JONCidInput.CidCall     := False;
		end	else
    if Copy(sStr, 1, 3) = '201' then    //전화걸기시
		begin
			if Copy(sStr, 19, 2) = '00' then
			begin
				Frm_JON54.btn_PickUpPhone.Enabled := True; //전화받기
				Frm_JON54.btn_Calling.Enabled := False; //전화걸기
			end	else
      if Copy(sStr, 19, 2) = '01' then
			begin
				if GT_NKT = 0 then
					ShowMessage('NKT SoftPhone에 등록된 상황실번호가 아닙니다.'#13#10'[설정>CID설정] 상황실 번호를 확인해 주세요.')
				else
        if GT_NKT = 1 then
					ShowMessage('NKT SoftPhone에 등록된 대표번호가 아닙니다.'#13#10'NKT SoftPhone의 대표번호를 확인해 주세요.');

				Frm_JON54.btn_Calling.Enabled := True; //전화걸기
				Exit;
			end;
		end	else
    if Copy(sStr, 1, 3) = '203' then    //전화끊기시
		begin
			if Copy(sStr, 19, 2) = '00' then
			begin
				sendStr := '';
				sendStr := sendStr + '604';
				sendStr := sendStr + Rpad('', 15, ' ');
				sendStr := sendStr + Rpad('', 2, ' ');
				sendStr := sendStr + '0  ';
				bNKT_4BS.Socket.SendText(sendStr);

				Frm_JON54.btn_PickUpPhone.Enabled := False; //전화받기
				Frm_JON54.btn_Calling.Enabled := True; //전화걸기
				GS_JONCidInput.KeyNumber   := '';
				GS_JONCidInput.PhoneNumber := '';
				GS_JONCidInput.CidCall     := False;
			end else
      if Copy(sStr, 19, 2) = '01' then
			begin
				ShowMessage('전화끊기가 실패되었습니다');
				Frm_JON54.btn_Calling.Enabled := True; //전화걸기
				Exit;
			end;
		end	else
    if Copy(sStr, 1, 3) = '204' then    //보류요청시
		begin
 {			if Copy(sStr, 19, 2) = '00' then
				frm_JON03.btn3.Enabled := False
			else if Copy(sStr, 19, 2) = '01' then
			begin
				ShowMessage('보류전환 실패되었습니다');
				frm_JON03.btn3.Caption := '전화보류';
				frm_JON03.btn3.Enabled := True;
				Exit;
			end; }
		end	else
    if Copy(sStr, 1, 3) = '605' then    //보류상태로 전환완료
		begin
//			frm_JON03.btn3.Caption := '전화보류해제';
		end	else
    if Copy(sStr, 1, 3) = '900' then    //Alivr체크
		begin
			Frm_JON54.pnl1.Visible := False;
			eAliveQ := now;
			tmr_AliveSend.Interval := 10000;
		end;
	except
		on e: Exception do
		begin
			sStr := 'frmMain[NKT]Error:' + e.Message;
			Assert(False, E.Message);
			GMessagebox(PChar(sStr), CDMSE);
		end;
	end;
end;

procedure TFrm_Main.awmAlertClick(Sender: TObject; AAlertWindow: TdxAlertWindow);
var
   sId : String;
   i : Integer;
begin
  sId := AAlertWindow.Hint;

  for i := 0 to 30 do
  begin
    if ( Assigned(Frm_Main.Frm_COM50[i]) ) And ( Frm_Main.COM50MNG[i].CreateYN )  then
    begin
      if sId = Frm_Main.Frm_COM50[i].lblRQStart.Hint then
      begin
        fSetFont(Frm_COM50[i], GS_FONTNAME);
        Frm_Main.Frm_COM50[i].Show;
        Break;
      end;
    end;
  end;

  if Not BtnFix.Down then
  begin
    BtnFix.Down := True;
    BtnFixClick(BtnFix);
  end;

  cxPageControl2.ActivePageIndex := 3;
  AAlertWindow.Close;
end;

procedure TFrm_Main.dxSkinController1SkinForm(Sender: TObject; AForm: TCustomForm; var ASkinName: string; var UseSkin: Boolean);

  procedure SetSkinName(AControl: TWinControl; ASkin: string);
  var
    AIntf: IcxLookAndFeelContainer;
    I: Integer;
  begin
    if Supports(AControl, IcxLookAndFeelContainer, AIntf) then
      AIntf.GetLookAndFeel.SkinName := ASkinName;
    for I := 0 to AControl.ControlCount - 1 do
      if AControl.Controls[I] is TWinControl then
        SetSkinName(TWinControl(AControl.Controls[I]), ASkin);
  end;

var
  I: Integer;
begin
  if Not GB_DARKMODE then Exit;

  if ( AForm is TFrm_JON011 ) Or  // 메모 확장
     ( AForm is TFrm_JON012 ) Or  // 과거이용내역
     ( AForm is TFrm_JON013 ) Or  // 대기요금설정
     ( AForm is TFrm_JON015 ) Or  // 복수콜
     ( AForm is TFrm_JON016 ) Or  // 적요상용구
     ( AForm is TFrm_JON017 ) Or  // 오더취소상용구
     ( AForm is TFrm_JON018 ) Or  // 요금편집
     ( AForm is TFrm_JON019 ) Or  // 스마트요금
     ( AForm is TFrm_JON021 ) Or  // KM AI 요금표
		 ( AForm is TFrm_JON02  ) Or  // CID 내역
     ( AForm is TFrm_JON057 ) Or  // 본인인증
     ( AForm is TFrm_JON05  ) Or  // 단축메뉴
     ( AForm is TFrm_JON05_1) Or  // 단축메뉴설정
     ( AForm is TFrm_JON07  ) Or  // 상세이력
     ( AForm is TFrm_JON08  ) Or  // AI녹취내역
     ( AForm is TFrm_JON09  ) Or  // 접수정보
     ( AForm is TFrm_JON10  ) Or  // 기사에 송금
     ( AForm is TFrm_JON15  ) Or  // 오더취소
     ( AForm is TFrm_JON16  ) Or  // 기사부족메시지설정

     ( AForm is TFrm_JON23  ) Or  // 공지리스트
     ( AForm is TFrm_JON24  ) Or  // 공지작성
     ( AForm is TFrm_JON25  ) Or  // 신용카드내역

     ( AForm is TFrm_JON30  ) Or   // POI검색
     ( AForm is TFrm_JON30S ) Or   // POI검색 설정
     ( AForm is TFrm_JON31  ) Or   // 상담지도
     ( AForm is TFrm_JON32  ) Or   // 기사정보조회(이력관리)
     ( AForm is TFrm_JON33  ) Or   // 패널티 벌점표
     ( AForm is TFrm_JON35  ) Or   // 전화왔습니다.
     ( AForm is TFrm_JON36  ) Or   // 카드전표이메일재전송

     ( AForm is TFrm_JON56 ) Or     // POI추가요청
     ( AForm is TFrm_JON58 ) Or     // 로드뷰
     ( AForm is TFrm_JON59 ) Or     // 패널티조회
     ( AForm is TFrm_JON60 ) Or     // LBS
     ( AForm is TFrm_JON61 ) Or     // 배차지연콜 즉시 수행
     ( AForm is TFrm_JON62 ) Or     // 경비지급
     ( AForm is TFrm_JON63 ) Or     // 요금표

     ( AForm is TFrm_SMS01 ) Or
     ( AForm is TFrm_SMS07 ) Or     // 지사별 실시간 콜통계 문자발송

     ( AForm is TFrm_COM01 ) Or     // 기사조회배차
     ( AForm is TFrm_COM02 ) Or     // 기사입출금
     ( AForm is TFrm_COM11 ) Or     // 인근기사조회배차
     ( AForm is TFrm_COM12 ) Or     // 공유콜현황
     ( AForm is TFrm_COM40 ) Or     // 마일리지조회
     ( AForm is TFrm_COM50 ) Or     // 요금문의답변
     ( AForm is TFrm_COM60 ) Or     // 콜센터도움정보
     ( AForm is TFrm_ImportFile ) Or     // 요금문의답변
     ( AForm is Tfrm_MessageBox ) then   // 요금문의답변
  begin
    ASkinName := 'Office2007Silver'; // 'MetropolisDark';

//    for I := 0 to AForm.ControlCount - 1 do
//      if AForm.Controls[I] is TWinControl then
//        SetSkinName(TWinControl(AForm.Controls[I]), ASkinName);

    UseSkin := True;
  end;
end;

procedure TFrm_Main.dxTileControl1Item1Click(Sender: TdxTileControlItem);
begin
	cxTabControl1.TabIndex := 6;
	cxTabControl1Click(Self);
end;

procedure TFrm_Main.dxTileControl1Item2Click(Sender: TdxTileControlItem);
var	IE: variant;
begin
	try
		IE := CreateOleObject('InternetExplorer.Application');
		IE.left := 0;
		IE.top := 0;
		IE.Width := Screen.WorkAreaWidth;
		IE.Height := Screen.WorkAreaHeight;

		IE.MenuBar := False;
		IE.ToolBar := False;
		IE.StatusBar := False;

//		IE.Navigate('http://service.kakaomobility.com/cs/request.html#none');
		IE.Navigate('https://service.kakaomobility.com/cs/request.html?INQRY_TY_L=INQ720&INQRY_TY_M=INQ1194845');

		IE.Visible := true;
	except
	end;
end;

procedure TFrm_Main.dxTileControl1Item3Click(Sender: TdxTileControlItem);
begin
	cxTabControl1.TabIndex := 2;
	cxTabControl1Click(cxTabControl1);
end;

procedure TFrm_Main.dxTileMainItem1Click(Sender: TdxTileControlItem);
begin
	cxTabControl1.TabIndex := 3;
	cxTabControl1Click(cxTabControl1);
end;

procedure TFrm_Main.edGroupSearchKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  s: string;
begin
  SetDebugeWrite('Main.edGroupSearchKeyUp');
  try
    s := edGroupSearch.Text;
    proc_Word_Search(s, cxGroup);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.edtMemoEnter(Sender: TObject);
begin
  LbmeoBigo.Visible := False;
end;

procedure TFrm_Main.edtMemoExit(Sender: TObject);
begin
  lbmeoBigo.Visible := (edtMemo.Text = '');
end;

procedure TFrm_Main.edtPBXIdKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if Key = VK_RETURN then edtPBXPw.SetFocus;
end;

procedure TFrm_Main.edtPBXPwKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if Key = VK_RETURN then btnPBXLogin.Click; 
end;

procedure TFrm_Main.edt_AdminIDKeyDown(Sender: TObject; var Key: Word;
	Shift: TShiftState);
begin
	if Key = VK_RETURN then edt_AdminPW.SetFocus; 
end;

procedure TFrm_Main.edt_AdminIDKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if Key = VK_TAB then 
		edt_AdminPW.SetFocus;
end;

procedure TFrm_Main.edt_AdminPWKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if Key = VK_RETURN then btn_PBXLogIn.SetFocus;
end;

procedure TFrm_Main.edt_BrNameKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
Var slTmp : TStringList;
begin
	SetDebugeWrite('JON01.cxTSearchMainTelKeyDown');
  if Key = VK_BACK then
	begin
		if (Length(edt_BrName.Text) <= 1) then
		begin
			lst_BRList.Visible := False;
		end;
	end else
	if Key = VK_DOWN then
	begin
		if lst_BRLIst.ItemIndex < 0 then lst_BRLIst.ItemIndex := 0;
		if lst_BRList.Visible then lst_BRList.SetFocus;
	end else
	if Key = VK_RETURN then
	begin
		slTmp := TStringList.Create;
		Try
			slTmp.Delimiter     := '|';
			slTmp.DelimitedText := searchBRlist[0];
			if slTmp.Count = 3 then
				SetTree_ListItem(slTmp[0], slTmp[1], StrToInt(slTmp[2]));
			lst_BRList.Visible := False;
		Finally
			slTmp.Free;
		End;
		lst_BRList.Visible := False;
	end;
end;

procedure TFrm_Main.edt_BrNameKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	SetDebugeWrite('JON01.cxTSearchMainTelKeyUp');

//	if (key <> 229) then //  20191224 한컴입력기 에서는 모든 한글이 229로 넘어옴 그래서 삭제 KHS
	begin
		if Trim(edt_BrName.Text) = '' then
    begin
			edt_BrName.SetFocus;
      Exit;
		end;

		if Length(Trim(edt_BrName.Text)) >= 1 then
		begin
//      lst_BRList.Visible := True;
			// 지사명으로 조회..  CDS. 080818.
			if not func_BrNameList_Search then Exit;
		end;
	end;
end;

procedure TFrm_Main.edt_BrNameMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
	SetDebugeWrite('TFrm_Main.edt_BrNameMouseDown');
	if lst_BRList.Items.Count > 30 then
    lst_BRList.Height := 500
  else
    lst_BRList.Height := lst_BRList.Items.Count * 18;
  lst_BRList.Visible := True;
end;

procedure TFrm_Main.edt_PBXIDKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if Key = VK_RETURN then edt_PBXPW.SetFocus; 
end;

procedure TFrm_Main.edt_PBXIPKeyDown(Sender: TObject; var Key: Word;
	Shift: TShiftState);
begin
	if Key = VK_RETURN then rdo_Phone_Use.SetFocus; 
end;

procedure TFrm_Main.edt_PBXPWKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
	if Key = VK_RETURN then edt_PBXEXT.SetFocus; 
end;

function TFrm_Main.func_BrCash_V2(AHDNO, ABRNO, ASLIP: string;
	ACharge, AStandCharge: Integer; var ABrCharge, ABrSumCharge : Double): Boolean;
var
	xdom: msDomDocument;
	lst_Result: IXMLDomNodeList;
	ls_TxQry, ls_TxLoad, sQueryTemp : string;
	rv_str, swhere: string;
	ls_rxxml: String;
	dBrCharge : Double;
	iBrSum : integer;
	slReceive: TStringList;
	ErrCode: integer;
begin
	Result := False;
	try
		dBrCharge := func_BrCash_V3(ABRNO);
		ABrCharge := dBrCharge;

		sWhere := format('WHERE CONF_HEAD = ''%s'' AND CONF_BRCH = ''%s'' ', [AHDNO, ABRNO]);
		sWhere := sWhere + 'AND PAY_METHOD in (''2'',''7'',''8'') ';   //후불, 후불(카드), 후불(마일)
		sWhere := sWhere + 'AND CONF_STATUS in (''0'',''1'',''3'',''C'',''D'',''V'',''R'') ';
		if ASLIP <> '' then                    //접수, 배차, 강제,확정배차,운행, 가배차, 예약  
			sWhere := sWhere + format('AND CONF_SLIP != ''%s'' ', [ASLIP]);

		//접수, 배차, 강제, 확정배차, 운행, 가배차, 예약
		fGet_BlowFish_Query(GSQ_BRANCH_CASH_V2, sQueryTemp);
		ls_TxQry := Format(sQueryTemp, [sWhere]);
		ls_TxLoad := GetSel01('BRCA0003', ls_TxQry);

		iBrSum := 0;
		Screen.Cursor := crHandPoint;
		slReceive := TStringList.Create;
		try
			if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
			begin
				rv_str := slReceive[0];
				if trim(rv_str) <> '' then
				begin
					ls_rxxml := rv_str;

					xdom := ComsDomDocument.Create;
					try
						if not xdom.loadXML(ls_rxxml) then Exit;
						lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
						iBrSum := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Value').Text, 0);
						ABrSumCharge := iBrSum;
						if AStandCharge = 0 then
						begin
							if ACharge <= (dBrCharge - iBrSum) then
								Result := True;
						end else
						begin
							if AStandCharge <= (dBrCharge - iBrSum - ACharge) then
								Result := True;
						end;
					finally
						xdom := Nil;
					end;
				end;
			end;
		finally
			FreeAndNil(slReceive);
		end;
		Screen.Cursor := crDefault;
	except
		on E: Exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

function TFrm_Main.func_BrCash_V3(ABRNO: string): Double;
var
	ls_TxQry, ls_TxLoad, sQueryTemp : string;
	rv_str, swhere: string;
	ls_rxxml: String;
	xdom: msDomDocument;
	lst_Result: IXMLDomNodeList;
	slReceive: TStringList;
	ErrCode: integer;
begin
	Result := 0;
	try
		sWhere := format('WHERE BR_NO = ''%s'' ', [ABRNO]);
		fGet_BlowFish_Query(GSQ_BRANCH_CASH, sQueryTemp);
		ls_TxQry := Format(sQueryTemp, [sWhere]);
		ls_TxLoad := GetSel01('BRCA0004', ls_TxQry);

		Screen.Cursor := crHandPoint;
		slReceive := TStringList.Create;
		try
			if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
			begin
				rv_str := slReceive[0];
				if trim(rv_str) <> '' then
				begin
					ls_rxxml := rv_str;
					xdom := ComsDomDocument.Create;
					try
						if not xdom.loadXML(ls_rxxml) then Exit;
						lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
						Result := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Value').Text, 0);
					finally
						xdom := Nil;
					end;
				end;
			end;
		finally
			FreeAndNil(slReceive);
		end;
		Screen.Cursor := crDefault;
	except
		on E: Exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

function TFrm_Main.func_BrCash_V4(AHDNO, ABRNO, ASLIP: string; ACharge,
	AStandCharge: Integer; var ABrCharge, ABrSumCharge: Double): Boolean;
var sParam : string;
	ErrMsg, ls_MSG_Err: string;
	XmlData : string;
	xdom: msDomDocument;
	lst_Result : IXMLDomNodeList;
	ErrCode : integer;
	dBrCharge : Double;
	iBrSum : integer;
begin
	SetDebugeWrite('TFrm_Main.func_BrCash_V4');
	try
		Result := False;
		sParam := '';
		sParam := AHDNO + '│' + ABRNO + '│' + ASLIP;
		
		if not RequestBase(GetSel06('GET_TODO_PAY_POST_CHARGE', 'A01.GET_TODO_PAY_POST_CHARGE', '1', sParam), XmlData, ErrCode, ErrMsg) then
		begin
			GMessagebox(Format('지가캐시 조회 오류'#13#10'[%d]%s', [ErrCode, ErrMsg]), CDMSE);
			Exit;
		end;
		xdom := ComsDomDocument.Create;
		try
			if not xdom.loadXML(XmlData) then Exit;

			ls_MSG_Err := GetXmlErrorCode(XmlData);
			if ('0000' = ls_MSG_Err) then
			begin
				if (0 < GetXmlRecordCount(XmlData)) then
				begin
					lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
					iBrSum := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Value').Text, 0);
					ABrSumCharge := iBrSum;
					if AStandCharge = 0 then
					begin
						if ACharge <= (dBrCharge - iBrSum) then
							Result := True;
					end else
					begin
						if AStandCharge <= (dBrCharge - iBrSum - ACharge) then
							Result := True;
					end;
				end;
			end;
		finally
			xdom := Nil;
		end;
	except
		on e: exception do
		begin
			Assert(False, E.Message);
		end;
	end; 
end;

function TFrm_Main.func_BrNameList_Search: boolean;
var
	bRlt: boolean;
	sKey: string;
  i, j : Integer;
  LeftTreePtr : PTreeRec;
begin
	SetDebugeWrite('TFrm_Main.func_BrNameList_Search');
	try
    bRlt := False;
    lst_BRList.Items.Clear;
		searchBRlist.Clear;
		sKey := edt_BrName.text; // 조회할 지사명 읽기.

		lst_BRList.Items.BeginUpdate;
		for i := 0 to Tree_List.Count - 1 do
		begin
			for j := 0 to Tree_List.Items[i].Count - 1 do
			begin
				LeftTreePtr := Tree_List.Items[i].Items[j].Data;
				if (Pos(sKey, LeftTreePtr^.BRName) > 0) then
				begin
					lst_BRList.Items.Add(LeftTreePtr^.BRName);
					searchBRlist.Add(LeftTreePtr^.HDCode + '|' + LeftTreePtr^.BrCode + '|' + IntToStr(LeftTreePtr^.FIndex));
					bRlt := True;
				end;
			end;
		end;
		lst_BRList.Items.EndUpdate;

		lst_BRList.Visible := True;
		if lst_BRList.Items.Count > 30 then
			lst_BRList.Height := 500
		else
			lst_BRList.Height := lst_BRList.Items.Count * 18;
		Result := bRlt;
	Except
    on e: exception do
		begin
			Log('proc_BrNameList_Search Error :' + E.Message, LOGDATAPATHFILE);
			Assert(False, 'proc_BrNameList_Search Error :' + E.Message);
		end;
	end;
end;

procedure TFrm_Main.Edt_PWKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_RETURN then cxButton14.Click;
end;

procedure TFrm_Main.ed_ConditionKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('Main.ed_ConditionKeyDown');
  if (Ord(Key) = VK_RETURN) then
    cxButton4Click(cxButton4);
end;

procedure TFrm_Main.ed_FavoriteMemoKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('Main.ed_FavoriteMemoKeyDown');
  if key = vk_Return then
  begin
    cxButton9.Click;
  end;
end;

procedure TFrm_Main.ed_FavoriteNumKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  SetDebugeWrite('Main.ed_FavoriteNumKeyDown');
  if key = vk_Return then
  begin
    ed_FavoriteMemo.SetFocus;
  end;
end;

procedure TFrm_Main.ed_FavoriteNumKeyPress(Sender: TObject; var Key: Char);
begin
  SetDebugeWrite('Main.ed_FavoriteNumKeyPress');
  // 전화번호이기 때문에 숫자만 입력 받는다.  [(Key = #3) : Ctrl+C, (Key = #22) : Ctrl+V]
  if ((Key >= #48) and (Key <= #57)) or (Key = #8) or (Key = #3) or (Key = #22)then
  else
  begin
    Key := #0;
	end;
end;

procedure TFrm_Main.enablefalse1Click(Sender: TObject);
var
  iWkSabun, iRow, iBrNo: Integer;
  sWkSabun, sBrNo: string;
begin
  SetDebugeWrite('Main.enablefalse1Click');
  try
    iRow := tvWkConnect.DataController.FocusedRecordIndex;
    if iRow = -1 then
      Exit;
    iWkSabun := tvWkConnect.GetColumnByFieldName('기사사번').Index;
    iBrNo := tvWkConnect.GetColumnByFieldName('지사코드').Index;

    sWkSabun := tvWkConnect.DataController.Values[iRow, iWkSabun];
    sBrNo := tvWkConnect.DataController.Values[iRow, iBrNo];
    if (GT_USERIF.LV = '60') or (GT_USERIF.BR = sBrNo) then
    begin
      if Not Assigned(Frm_WOR01) Or (Frm_WOR01 = Nil) then Frm_WOR01 := TFrm_WOR01.Create(Nil);
			Frm_WOR01.gUse_Cnt := 0;
			Frm_WOR01.proc_wk_Search(sWkSabun);
			Frm_WOR01.Show;
    end else
    begin
      GMessagebox('다른지사에 기사입니다.' + #13#10 + '수정할수 없습니다.', CDMSE);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.FormClose(Sender: TObject; var Action: TCloseAction);
begin
	SetDebugeWrite('Main.FormClose');
  try
    Log(Format('-로그아웃시간, 로그아웃버전-%s(%s)',[GS_PRJ_VERSION,GS_APPNAME]), LOGDATADIRECTORY + 'lgv_' + GT_USERIF.ID + '.txt', 1);
    // 60분 경과 자동종료가 아니면 로그아웃 처리함.

    ploginInfo_Del;
    if (acAwayTimer1.Tag <> 99) and (GT_USERIF.LOGIN = '1') then
    begin
      proc_ProgramLogOut; // 로그아웃 처리.
    end;
    proc_FormCloseInitial;
    Action := caFree;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
Var vMsg, sBizDate : String;
    iCuCnt, iWkCnt : Integer;
begin
	SetDebugeWrite('Main.FormCloseQuery');
  try
    if acAwayTimer1.Tag <> 99 then
    begin
      if Application.MessageBox(PChar('['+GS_APPNAME+'] 프로그램을 종료하시겠습니까?'), PChar('['+GS_APPNAME+' 종료]'), MB_ICONQUESTION + MB_OKCANCEL) = IDCANCEL then
      begin
        CanClose := False;
        Exit;
      end;

      if (GS_PRJ_AREA = 'S') and ((GT_USERIF.HD = 'A1531') Or (GT_USERIF.HD = 'A100')) And ( GI_CIDINFOSAVETIME > 300 ) then
      begin
        pGetCidCount(iCuCnt, iWkCnt, sBizDate);
        if (iCuCnt+iWkCnt) > 0 then
        begin
					vMsg := Format('%s님이 오늘 전화받은 콜수는', [GT_USERIF.NM]) + CRLF +
                  Format(' -고객 : %d 건', [iCuCnt]) + CRLF +
                  Format(' -기사 : %d 건', [iWkCnt]) + CRLF +
                  Format(' -합계 : %d 건 입니다.', [iCuCnt+iWkCnt]) + CRLF +
                  '(당일콜수는 마지막 값으로 업데이트 됩니다)';

          GMessagebox(vMsg, CDMSI);
					pSaveCidInfo( iCuCnt, iWkCnt, sBizDate );
				end;
			end;

			if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
				p999UpLogOut;    // 콜마너업데이터서버 로그아웃처리
      Self.Hide;
      DisableAero := False;
      GS_EnvFile.WriteString('COUNSEL', 'Save_map_Lon', Save_map_Lon);
      GS_EnvFile.WriteString('COUNSEL', 'Save_map_Lat', Save_map_Lat);
    end;
    CanClose := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_FormCloseInitial;
var
  iHandle, hProc : THandle;
  i: Integer;
  CopyData: TCopyDataStruct;
  ErrLine : String;
	sFileName, sMsg : string;
begin
	SetDebugeWrite('Main.proc_FormCloseInitial');
  try
   tmrPageChnage.Tag := 1;  // 종료시 이벤트 안타게..

    // 폼 배열 변수를 초기화 한다.  CDS.
    for i := 0 to JON_MAX_CNT - 1 do
    begin
      if JON34MNG[i].CreateYN then                            // 카드/현금영수증/쿠폰 결제
      begin
        if Assigned(Frm_JON34B[i]) then
        begin
          Frm_JON34B[i].Parent := Nil;
    			Frm_JON34B[i].Close;
    			Frm_JON34B[i].Free;
        end;
      end;

      if JON01MNG[i].CreateYN then
      begin
        if Assigned(Frm_JON01N[i]) then
        begin
          Frm_JON01N[i].Close;
          Frm_JON01N[i].Free;
        end;
      end;

      if JON012MNG[i].CreateYN then    // 과거이용내역
      begin
        if Assigned(Frm_Jon012[i]) then
        begin
    			Frm_Jon012[i].Close;
    			Frm_Jon012[i].Free;
        end;
      end;

			if JON17MNG[i].CreateYN then     //접수배차창
			begin
				if Assigned(Frm_JON17[i]) then
				begin
					Frm_JON17[i].Close;
					Frm_JON17[i].Free;
				end;
			end;
		end;

    for i := 0 to 30 do
    begin
      if COM50MNG[i].CreateYN then
      begin
        if Assigned(Frm_COM50[i]) then
        begin
   				Frm_COM50[i].Close;
	  			Frm_COM50[i].Free;
        end;
      end;
    end;

    for i := 0 to JON03_MAX_CNT - 1 do
    begin
      if Assigned(Frm_JON52[i]) then
      begin
        Frm_JON52[i].Tag := 99;
        Frm_JON52[i].Close;
        FreeAndNil(Frm_JON52[i]);
      end;

      if JON03MNG[i].CreateYN then
      begin
        if Assigned(Frm_JON03[i]) then
        begin
          Frm_JON03[i].pJON03Dock.bUnDock := False;
    			Frm_JON03[i].Close;
  	  		Frm_JON03[i].Free;
        end;
      end;
		end;

    for i := 0 to 4 do
    begin
      if WORA1MNG[i].CreateYN then
      begin
        if Assigned(Frm_WORA1[i]) then
        begin
          Frm_WORA1[i].pWORA1Dock.bUnDock := False;
    			Frm_WORA1[i].Close;
  	  		Frm_WORA1[i].Free;
        end;
      end;
		end;

    tmrDiffSosok.Enabled := False;
    gSosokName := Nil;

    tmrDiffJSosok.Enabled := False;
    gSosokTabSheet := Nil;

		sFileName := SOUNDDIRECTORY + 'Tmp.wav';
		if FileExists(sFileName) then DeleteFile(PChar(sFileName));	

	except
    on e: exception do
    begin
      Log('proc_FormCloseInitial Error 0 :' + ErrLine + ', ' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_FormCloseInitial Error 0 :' +  ErrLine + ', ' +E.Message);
      Sleep(100);
      hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
      TerminateProcess(hProc, 0);
    end;
  end;

  try
    proc_CidLog(88, '');

    if Assigned(Frm_JON30) then
    begin
      if (Frm_JON30.iNaverSerachStartCnt > 0) or (Frm_JON30.iNaverSerachEndCnt > 0) Or
         (Frm_JON30.iDaumSerachStartCnt > 0) or (Frm_JON30.iDaumSerachEndCnt > 0) then
      begin
        Assert(False, Format('Naver : 출 - %d 도 - %d : Daum : 출 - %d 도 - %d',
                            [Frm_JON30.iNaverSerachStartCnt, Frm_JON30.iNaverSerachEndCnt,
                             Frm_JON30.iDaumSerachStartCnt , Frm_JON30.iDaumSerachEndCnt]));
        Frm_JON30.iNaverSerachStartCnt :=0; Frm_JON30.iNaverSerachEndCnt := 0;
        Frm_JON30.iDaumSerachStartCnt  :=0; Frm_JON30.iDaumSerachEndCnt := 0;

        if GT_USERIF.HD = 'A100' then
          Log(Format('Naver : 출 - %d 도 - %d : Daum : 출 - %d 도 - %d',
                            [Frm_JON30.iNaverSerachStartCnt, Frm_JON30.iNaverSerachEndCnt,
                             Frm_JON30.iDaumSerachStartCnt , Frm_JON30.iDaumSerachEndCnt]), LOGDATAPATHFILE );
      end;
    end;

		Assert(False, 'LogOut ' + FormatDateTime('YYYY-MM-DD HH:NN:SS', Now));
		GS_EnvFile.WriteString('GER', 'LOGOUT', FormatDateTime('YYYY-MM-DD HH:NN:SS', Now));  // 로그인 시간 저장

		SetDebugeWrite('LogOut ' + FormatDateTime('YYYY-MM-DD HH:NN:SS', Now), True);
		Log('LogOut ' + FormatDateTime('YYYY-MM-DD HH:NN:SS', Now), HEARTLOGPATHFILE, 0, True);

		//카카오 요금 에러메세지 업로드
		if GT_Kakao_KMAiRate then
		begin
			if (GS_KM00030_ErrorMsg <> '') and (GS_KM00030_ErrorCnt > 0) then
			begin
				sMsg := Format('카카오요금에러[%d]-[%s]', [GS_KM00030_ErrorCnt, GS_KM00030_ErrorMsg]);
				Assert(False, sMsg);
			end;
		end;

		if Assigned(Frm_ACC01) then Frm_ACC01.Close;      // 지사별 캐쉬내역
    if Assigned(Frm_ACC02) then Frm_ACC02.Close;      // 기사 사용료 내역
    if Assigned(Frm_ACC03) then Frm_ACC03.Close;      // 지사별 캐쉬 내역
    if Assigned(Frm_ACC04) then Frm_ACC04.Close;      // 기사별 프로그램 사용내역
    if Assigned(Frm_ACC05) then Frm_ACC05.Close;      // 지사별 캐쉬 내역_상세1
    if Assigned(Frm_ACC06) then Frm_ACC06.Close;      // 지사별 캐쉬 내역_상세
    if Assigned(Frm_ACC07) then Frm_ACC07.Close;      // 지사별 캐쉬 내역_상세
    if Assigned(Frm_ACC10) then Frm_ACC10.Close;      // 지사별 출금요청

    if Assigned(Frm_ACC)   then Frm_ACC.Close;        // 정산관리A
    if Assigned(Frm_ACC1)  then Frm_ACC1.Close;       // 정산관리B

    if Assigned(Frm_COM01) then Frm_COM01.Close;      // 기사조회배차(강제/문자)
    if Assigned(Frm_COM02) then Frm_COM02.Close;      // 기사캐쉬충전
    if Assigned(Frm_COM40) then Frm_COM40.Close;      // 마일리지 상세
    if Assigned(Frm_COM11) then Frm_COM11.Close;      // 인근기사배차
		if Assigned(Frm_COM12) then Frm_COM12.Close;      // 공유콜현황
		if Assigned(Frm_COM60) then Frm_COM60.Close;      // 콜센터도움정보
    if Assigned(Frm_ImportFile) then Frm_ImportFile.Close;  // 엑셀 Import
    if Assigned(Frm_AdminMap) then Frm_AdminMap.Close;  // 관제지도
    if Assigned(Frm_AdminMap01) then Frm_AdminMap01.Close;  // 공유기사현황
    if Assigned(Frm_AdminMap02) then Frm_AdminMap02.Close;  // 셔틀
		if Assigned(frm_ShuttleMap) then frm_ShuttleMap.Close;  // 셔틀관제
		if Assigned(frm_ShuttleMap_New) then frm_ShuttleMap_New.Close;  // 셔틀관제
		if Assigned(Frm_WOR20) then Frm_WOR20.Close;  // 셔틀버스관리
		if Assigned(Frm_WOR21) then Frm_WOR21.Close;  // 셔틀버스관리

    if Assigned(Frm_STT_Shuttle) then Frm_STT_Shuttle.Close;   // 셔틀통계
	except
		on e: exception do
		begin
      Log('proc_FormCloseInitial Error 0-1 :' + ErrLine + ', '  + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_FormCloseInitial Error 0-1 :' + ErrLine + ', '  + E.Message);
      Sleep(100);
      hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
      TerminateProcess(hProc, 0);
    end;
  end;

	try
		if Assigned(Frm_AIC01) then Frm_AIC01.Close;      // AI 배차지연콜
		if Assigned(Frm_AIC02) then Frm_AIC02.Close;      // AI 배차지연콜
		if Assigned(Frm_AIC09) then Frm_AIC09.Close;      // AI 배차지연콜
		if Assigned(Frm_AIC10) then Frm_AIC10.Close;      // AI 배차지연콜
		if Assigned(Frm_AIC11) then Frm_AIC11.Close;      // AI 해피콜
		if Assigned(Frm_AIC12) then Frm_AIC12.Close;      // AI 해피콜
		if Assigned(Frm_AIC13) then Frm_AIC13.Close;      // AI 해피콜
		if Assigned(Frm_AIC21) then Frm_AIC21.Close;      // AI 해피콜

		if Assigned(Frm_BTN) then Frm_BTN.Close;          // 콜벨관리
		if Assigned(Frm_BTN01) then Frm_BTN01.Close;      // 콜벨업소관리
		if Assigned(Frm_BTN02) then Frm_BTN02.Close;      // 콜벨영업사원관리
		if Assigned(Frm_BTN03) then Frm_BTN03.Close;      // 콜벨영업사원 마일리지등록

		if Assigned(Frm_CMP01) then Frm_CMP01.Close;      // 지사등록관리
    if Assigned(Frm_CMP011) then Frm_CMP011.Close;      // 우편번호관리
    if Assigned(Frm_CMP012) then Frm_CMP012.Close;      // 콜대행비
		if Assigned(Frm_CMP013) then Frm_CMP013.Close;      // 대표번호관리
		if Assigned(Frm_CMP014) then Frm_CMP014.Close;      // 입금표관리
    if Assigned(Frm_CMP015) then Frm_CMP015.Close;      // 기사수수료 그룹관리
    if Assigned(Frm_CMP016) then Frm_CMP016.Close;      // 기사원천징수설정
    if Assigned(Frm_CMP017) then Frm_CMP017.Close;      // 대표번호증명원등록

		if Assigned(Frm_STT) then Frm_STT.Close;          // 통계관리
		if Assigned(Frm_STT01) then Frm_STT01.Close;      // 취소콜통계
		if Assigned(Frm_CMP) then Frm_CMP.Close;      // 회사관리
		if Assigned(Frm_APP01) then Frm_APP01.Close;      // 앱게시물등록
    if Assigned(Frm_APP) then Frm_APP.Close;          // 앱관리

    if Assigned(Frm_CUT) then Frm_CUT.Close;          // 고객관리
    if Assigned(Frm_CUT1) then Frm_CUT1.Close;        // 법인관리
    if Assigned(Frm_CUT02) then Frm_CUT02.Close;      // 고객등급설정
    if Assigned(Frm_CUT03) then Frm_CUT03.Close;      // 고객등급일괄변경
    if Assigned(Frm_CUT07) then Frm_CUT07.Close;      // 마일리지충전/상품지급
    if Assigned(Frm_CUT09) then Frm_CUT09.Close;      // 법인정보수정
    if Assigned(Frm_CUT011) then Frm_CUT011.Close;    // 고객정보수정
    if Assigned(Frm_CUT012) then Frm_CUT012.Close;    // 고객합치기
		if Assigned(Frm_CUT013) then Frm_CUT013.Close;    // 법인일괄등록
		if Assigned(Frm_CUT014) then Frm_CUT014.Close;    // 차단기사등록
		if Assigned(Frm_CUT019) then Frm_CUT019.Close;    // 법인일일정산
  except
    on e: exception do
    begin
      Log('proc_FormCloseInitial Error 0-2 :' + ErrLine + ', '  + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_FormCloseInitial Error 0-2 :' + ErrLine + ', '  + E.Message);
      Sleep(100);
      hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
      TerminateProcess(hProc, 0);
    end;
  end;

	TCK_USER_PER.BTM_CALLMNG := '0';  // 자동갱신 종료하기 위함

	try
    if Assigned(Frm_Jon00)  then Frm_Jon00.Close;          // 
		if Assigned(Frm_Jon011) then Frm_Jon011.Close;     // 상담메모/기사메모
//		if Assigned(Frm_JON012) then Frm_JON012.Close;     // 과거이용내역

    if Assigned(Frm_Jon013) then Frm_Jon013.Close;     // 대기요금설정
    if Assigned(Frm_Jon015) then Frm_Jon015.Close;     // 복수콜 접수
    if Assigned(Frm_JON016) then Frm_JON016.Close;     // 접수적요상용구설정
    if Assigned(Frm_JON017) then Frm_JON017.Close;     // 오더취소적요상용구설정
    if Assigned(Frm_JON018) then Frm_JON018.Close;     // 요금편집
		if Assigned(Frm_JON019) then Frm_JON019.Close;     // 추천요금제
		if Assigned(Frm_JON021) then Frm_JON021.Close;     // KM AI 요금표
    if Assigned(Frm_Jon02)  then Frm_Jon02.Close;      // CID 내역
    if Assigned(Frm_JON05)  then Frm_JON05.Close;      // 단축관리
    if Assigned(Frm_JON05_1) then Frm_JON05_1.Close;      // 단축관리
    if Assigned(Frm_Jon057) then Frm_Jon057.Close;     // 본인인증
    if Assigned(Frm_JON07)  then Frm_JON07.Close;      // 상세이력
    if Assigned(Frm_JON08)  then Frm_JON08.Close;      // AI녹취내역
    if Assigned(Frm_JON09)  then Frm_JON09.Close;      // 접수정보
    if Assigned(Frm_JON10)  then Frm_JON10.Close;      // 기사에 송금
    if Assigned(Frm_JON15)  then Frm_JON15.Close;      // 오더취소하기
    if Assigned(Frm_JON16)  then Frm_JON16.Close;      // 기사부족메시지설정
    if Assigned(Frm_JON23)  then Frm_JON23.Close;      // 공지리스트
    if Assigned(Frm_JON24)  then Frm_JON24.Close;      // 공지리스트/등록
    if Assigned(Frm_JON25)  then Frm_JON25.Close;      // 신용카드결제
		if Assigned(Frm_JON30)  then Frm_JON30.Close;      // POI 조회
		if Assigned(Frm_JON30S)  then Frm_JON30S.Close;      // POI 설정
		if Assigned(Frm_JON31)  then Frm_JON31.Close;      // 상담지도
    if Assigned(Frm_JON32)  then Frm_JON32.Close;      // 기사정보조회
    if Assigned(Frm_JON33)  then Frm_JON33.Close;      // 패널티점수표
    if Assigned(Frm_JON36)  then Frm_JON36.Close;      // 카드전표이메일재전송
    if Assigned(Frm_JON51)  then Frm_JON51.Close;
    if Assigned(Frm_JON52[JON03_MAX_CNT])  then
    begin
      Frm_JON52[JON03_MAX_CNT].Tag := 99;
      Frm_JON52[JON03_MAX_CNT].Close;
    end;
		if Assigned(Frm_JON53)  then Frm_JON53.Close;
		if Assigned(Frm_JON54)  then Frm_JON54.Close;
		if Assigned(Frm_JON56)  then Frm_JON56.Close;
		if Assigned(Frm_JON58)  then Frm_JON58.Close;      // 로드뷰
		if Assigned(Frm_JON59)  then Frm_JON59.Close;
		if Assigned(Frm_JON60)  then Frm_JON60.Close;     // LBS동의
		if Assigned(Frm_JON61)  then Frm_JON61.Close;     // 배차지연콜 즉시수행
		if Assigned(Frm_JON62)  then Frm_JON62.Close;     // 경비지급
		if Assigned(Frm_JON63)  then Frm_JON63.Close;     // 올세븐 요금

		if Assigned(frm_MessageBox) then frm_MessageBox.Close;      // 대기 메세지박스
		if Assigned(frm_UpdateBox) then frm_UpdateBox.Close;        // 업데이트 메세지박스
		if Assigned(Frm_SETA1)  then Frm_SETA1.Close;       // 설정
    if Assigned(Frm_SET)  then Frm_SET.Close;           //설정관리
    if Assigned(Frm_SET06)  then Frm_SET06.Close;       // 설정
    if Assigned(Frm_SET07)  then Frm_SET07.Close;       //
    if Assigned(Frm_SET08)  then Frm_SET08.Close;       //
    if Assigned(Frm_SMS01)  then Frm_SMS01.Close;       // SMS 전송
    if Assigned(Frm_SMS06)  then Frm_SMS06.Close;       // SMS 전송
    if Assigned(Frm_SMS07)  then Frm_SMS07.Close;       // SMS 전송
  except
    on e: exception do
    begin
      Log('proc_FormCloseInitial Error 0-3 :' + ErrLine + ', '  + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_FormCloseInitial Error 0-3 :' + ErrLine + ', '  + E.Message);
      Sleep(100);
      hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
      TerminateProcess(hProc, 0);
    end;
  end;

  try
    if Assigned(Frm_WOR)   then Frm_WOR.Close;           // 기사현황
    if Assigned(Frm_WOR01) then Frm_WOR01.Close;         // 기사등록관리
    if Assigned(Frm_WOR02) then Frm_WOR02.Close;         // 블랙리스트
    if Assigned(Frm_WOR03) then Frm_WOR03.Close;         // 기사캐쉬내역
    if Assigned(Frm_WOR04) then Frm_WOR04.Close;         // 기사운행내역
    if Assigned(Frm_WOR05) then Frm_WOR05.Close;         // 기사일비차감설정
    if Assigned(Frm_WOR07) then Frm_WOR07.Close;         // 기사이력사항
    if Assigned(Frm_WOR08) then Frm_WOR08.Close;         // 기사인센티브지급스케줄
    if Assigned(Frm_WOR09) then Frm_WOR09.Close;         // 차단기사추가
    if Assigned(Frm_WOR10) then Frm_WOR10.Close;         // 기사픽업
    if Assigned(Frm_WOR11) then Frm_WOR11.Close;         // 픽업수정
    if Assigned(Frm_WOR12) then Frm_WOR12.Close;         // 기사캐쉬일괄처리
    if Assigned(Frm_WOR13) then Frm_WOR13.Close;         // 플러스콜
    if Assigned(Frm_WOR14) then Frm_WOR14.Close;         // 패널티부과
    if Assigned(Frm_WOR16) then Frm_WOR16.Close;         // 배차취소로그
		if Assigned(Frm_WOR17) then Frm_WOR17.Close;         // 기사이동로그
		if Assigned(Frm_WOR18) then Frm_WOR18.Close;         // 기사공지관리}
		if Assigned(Frm_WOR22) then Frm_WOR22.Close;         // 기사공지관리}
		if Assigned(Frm_WOR23) then Frm_WOR23.Close;         // MCash관리}
		if Assigned(Frm_WOR24) then Frm_WOR24.Close;         // MCash관리}
	except
		on e: exception do
    begin
      Log('proc_FormCloseInitial Error 0-4 :' + ErrLine + ', '  + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_FormCloseInitial Error 0-4 :' + ErrLine + ', '  + E.Message);
      Sleep(100);
      hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
      TerminateProcess(hProc, 0);
    end;
  end;

  try
    if Assigned(Frm_USR) then Frm_USR.Close;         // 직원관리
    if Assigned(Frm_SMS) then Frm_SMS.Close;         // 광고관리
    if Assigned(Frm_USR10) then Frm_USR10.Close;         // 직원 관리
  except
    on e: exception do
    begin
      Log('proc_FormCloseInitial Error 1 :' + ErrLine + ', '  + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_FormCloseInitial Error 1 :' + ErrLine + ', '  + E.Message);
      Sleep(100);
      hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
      TerminateProcess(hProc, 0);
    end;
  end;

	try
		if Assigned(Frm_PBX) then Frm_PBX.Close;
		if Assigned(Frm_PBX01) then Frm_PBX01.Close;
		if Assigned(Frm_PBX02) then Frm_PBX02.Close;
		if Assigned(Frm_PBX05) then Frm_PBX05.Close;
		if Assigned(Frm_PBX06) then Frm_PBX06.Close;
		if Assigned(Frm_PBX08) then Frm_PBX08.Close;
	except
		on e: exception do
		begin
			Log('proc_FormCloseInitial Error 1-2 :' + ErrLine + ', '  + E.Message, LOGDATAPATHFILE);
			Assert(False, 'proc_FormCloseInitial Error 1-2 :' + ErrLine + ', '  + E.Message);
			Sleep(100);
			hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
			TerminateProcess(hProc, 0);
		end;
	end;

	if gPositionClear then  //설정-공통설정에서 위치초기화를 눌렀다면 20190928 KHS 대전8282요청
		GS_EnvFile.EraseSection('WinPos');

{	try
		for i := 0 to 2 do
		begin
			if Assigned(frm_Media_1[i]) then 
			begin
				frm_Media_1[i].Close;         
				frm_Media_1[i].Free;
			end;
			if Assigned(frm_Media_2[i]) then       
			begin
				frm_Media_2[i].Close;         
				frm_Media_2[i].Free;
			end;
		end;
	except
	end;   }

	try
		// 맵 위치값 FreeAndNil().
		GTMap_Initial('FREEANDNIL');
    try
      CloseFile(mAdd);
      CloseFile(mOAdd);
    Except
      on e: exception do
      begin
        Log('proc_FormCloseInitial Error 1-1 :' + ErrLine + ', '  + E.Message, LOGDATAPATHFILE);
        Assert(False, 'proc_FormCloseInitial Error 1-1 :' + ErrLine + ', '  + E.Message);
        Sleep(100);
				hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
				TerminateProcess(hProc, 0);
      end;
    end;

    if Assigned(slOrderClickTag) then slOrderClickTag.Free;

		// 60분 경과 자동종료가 아니면 로그아웃 처리함.
		if (acAwayTimer1.Tag <> 99) and (GT_USERIF.LOGIN = '1') then
		begin
			proc_ProgramLogOut; // 로그아웃 처리.
		end;
    //------------------------------------------------------
    //------------------------------------------------------
    if (GB_365System) Or ( GB_CallLine) then
      iHandle := FindWindow('TfrmMain', PChar(GS_APPNAME +  ' 메신저'))
    else
      iHandle := FindWindow('TfrmMain', PChar('콜마너 메신저 ' + GS_PRJ_AREA));

    if iHandle <> 0 then
    begin
      CopyData.cbData := Length('CLOSE') + 1;
      CopyData.lpData := pAnsiChar('CLOSE' + #0);
      SendMessage(iHandle, WM_COPYDATA, 0, LongInt(@CopyData));
    end;
    //------------------------------------------------------

    // Critical Section 초기화 한다.
    DeleteCriticalSection(_CriticalLockMap);
    DeleteCriticalSection(_CriticalPortal);

    //========================== Timer 종료 ==================================
		tmr_CID_check.Tag     := 20;  // cid 연결유지 타이머 정지.
		tmr_CID_check.Enabled := False;
    ipwCID.Close;
		tmr_xeCID_check.Tag     := 20;  // cid 연결유지 타이머 정지.
		tmr_xeCID_check.Enabled := False;
		tmr_xeCID_New1.Enabled := False;
		tmr_xeCID_New2.Tag := 20;
		tmr_xeCID_New2.Enabled := False;
    try
      if IdXECID.Connected then
      begin
        IdXECID.IOHandler.InputBuffer.clear;
        IdXECID.IOHandler.CloseGracefully;
        IdXECID.Disconnect;
      end;
    except
    end;
		xeCID.Close;
		//IPCC
		tmr_SI415check.Tag := 20;
		tmr_SI415check.Enabled := False;
		trm_IPCCSetting.Enabled := False;
		trm_1011After.Enabled := False;
		bSI415.Close;
		bSI415_2601.Close;
		bSI415_A.Close;

		xeClearSky.DisConnect;
		
		tmr_Initialization.Enabled := False;
    tmrKilling.Enabled := False;

    tmrShareCall.Enabled := False;

		tmr_Alive.Tag := 20;
    tmr_AliveSend.Enabled := False;

    tmr_SSIO_check.Tag := 20;
    tmr_SSIO_check.Enabled := False;
    TimerOCX.Enabled := False;
    trm_CTI.Enabled := False;
    tmrbCTIConnect.Enabled := False;
    tmrxCTIConnect.Enabled := False;
    tmr_CidInfo.Enabled := False;
    tmr_JoinView.Enabled := False;
    Time_per.Enabled := False;
    trmAUTOSMS.Enabled := False;
    trmAUTOSMSSEND.Enabled := False;
    acAwayTimer1.Enabled := False;
    acAwayTimer2.Enabled := False;
    tmrDiffSosok.Enabled := False;
    tmr_LOCAL_SYNC.Enabled := False;
    tmrDiffJSosok.Enabled := False;
    tmrBtmMenu.Enabled := False;

    tmrGongJi.Enabled := False;
    //========================== 소켓 종료 ===================================
    sc_wk_tr.Close;
    Tapi_CTI.Close;
    IdClient.Disconnect;
		IdTCPClient1.Disconnect;
    ipMsn.Close;

    if Assigned(GS_DAUM_APIKey)  then FreeAndNil(GS_DAUM_APIKey);

		if Assigned(searchBRlist) then FreeAndNil(searchBRlist);

  	if Assigned(gslCallListNeasun) then FreeAndNil(gslCallListNeasun);

      for i := 0 to JON_MAX_CNT - 1 do
    begin
      if Assigned(JON01_MSGList[i].sType) then FreeAndNil(JON01_MSGList[i].sType);
      if Assigned(JON01_MSGList[i].sMsg ) then FreeAndNil(JON01_MSGList[i].sMsg );
    end;

    //========================== 전역변수 Nil 처리 ===========================
    if Assigned(scb_HdNo) then FreeAndNil(scb_HdNo);
    if Assigned(scb_HdNm) then FreeAndNil(scb_HdNm);
    if Assigned(scb_HdMainBr) then FreeAndNil(scb_HdMainBr);
    if Assigned(scb_CrBrCode) then FreeAndNil(scb_CrBrCode);
    if Assigned(scb_HeadCode) then FreeAndNil(scb_HeadCode); // 본사코드  CDS.
		if Assigned(scb_RateMent) then FreeAndNil(scb_RateMent); // 본사명
    if Assigned(scb_Branch) then FreeAndNil(scb_Branch); // 지사코드 + 지사명 저장
    if Assigned(scb_BranchCode) then FreeAndNil(scb_BranchCode); // 지사코드 저장
    if Assigned(scb_HdCode) then FreeAndNil(scb_HdCode);
    if Assigned(scb_FamilyBrCode) then FreeAndNil(scb_FamilyBrCode); // 본사코드
    if Assigned(scb_FamilyBrName) then FreeAndNil(scb_FamilyBrName); // 본사코드
    if Assigned(scb_FamilyBranch) then FreeAndNil(scb_FamilyBranch);
		if Assigned(scb_FamilyWkBranchCode) then FreeAndNil(scb_FamilyWkBranchCode);
    if Assigned(scb_FamilyWkBranchName) then FreeAndNil(scb_FamilyWkBranchName);
		if Assigned(scb_FamilyTaksong) then FreeAndNil(scb_FamilyTaksong);
		if Assigned(scb_FamilyShuttle4) then FreeAndNil(scb_FamilyShuttle4);
		if Assigned(scb_FamilyDsBranchCode) then FreeAndNil(scb_FamilyDsBranchCode);
    if Assigned(scb_FamilyDsBranchName) then FreeAndNil(scb_FamilyDsBranchName);
		if Assigned(scb_FamilyKeyNumber) then FreeAndNil(scb_FamilyKeyNumber);
		if Assigned(scb_FamilySituation_Tel) then FreeAndNil(scb_FamilySituation_Tel); // 지사대표번호- 상황실번호(엔젤 전화걸기-기사 에 사용)
		if Assigned(scb_FamilyKeyNumberAuth) then FreeAndNil(scb_FamilyKeyNumberAuth);
		if Assigned(scb_FamilyHeadCode) then FreeAndNil(scb_FamilyHeadCode);

		if Assigned(scb_BranchName) then FreeAndNil(scb_BranchName); // 지사명 저장
		if Assigned(scb_KeyNumber) then FreeAndNil(scb_KeyNumber); // 지사대표번호 저장
		if Assigned(scb_Situation_Tel) then FreeAndNil(scb_Situation_Tel); // 지사대표번호- 상황실번호(엔젤 전화걸기-기사 에 사용)
		if Assigned(scb_KeyNumberAuth) then FreeAndNil(scb_KeyNumberAuth);
		if Assigned(scb_DsBranchCode) then FreeAndNil(scb_DsBranchCode); // 대표번호 연동 지사코드 저장
    if Assigned(scb_DsBranchName) then FreeAndNil(scb_DsBranchName); // 대표번호 연동 지사명 저장
    if Assigned(scb_BranchCoupon) then FreeAndNil(scb_BranchCoupon);
		if Assigned(scb_OfficeBaecha) then FreeAndNil(scb_OfficeBaecha);
		if Assigned(scb_Change_Keynum_yn) then FreeAndNil(scb_Change_Keynum_yn);
		if Assigned(scb_BrCardAgentCD) then FreeAndNil(scb_BrCardAgentCD);
    if Assigned(scb_CRCustInfoDayOpen) then FreeAndNil(scb_CRCustInfoDayOpen);
    if Assigned(scb_CRCustInfoSafeMin) then FreeAndNil(scb_CRCustInfoSafeMin);
    if Assigned(scb_CRRouteMgr) then FreeAndNil(scb_CRRouteMgr);
    if Assigned(scb_CustLevelSeq) then FreeAndNil(scb_CustLevelSeq);
    if Assigned(scb_CustAPPUseYn) then FreeAndNil(scb_CustAPPUseYn);
		if Assigned(scb_PlusCallUse) then FreeAndNil(scb_PlusCallUse);
		if Assigned(scb_TakAllyUse) then FreeAndNil(scb_TakAllyUse);
		if Assigned(scb_AIOutBoundUse) then FreeAndNil(scb_AIOutBoundUse);
		if Assigned(scb_AIOBKeyNumberUse) then FreeAndNil(scb_AIOBKeyNumberUse);
		if Assigned(scb_Blowfish_HdCode) then FreeAndNil(scb_Blowfish_HdCode); // 지사코드 + 지사명 저장
    if Assigned(scb_Blowfish_HdBrCode) then FreeAndNil(scb_Blowfish_HdBrCode); // 지사코드 + 지사명 저장
		if Assigned(scb_WkBranchCode) then FreeAndNil(scb_WkBranchCode);
		if Assigned(scb_WkBranchName) then FreeAndNil(scb_WkBranchName);

		if Assigned(scb_HeadCodeCallBell) then FreeAndNil(scb_HeadCodeCallBell);
//		if Assigned(scb_KeyNumberAddCallBell) then FreeAndNil(scb_KeyNumberAddCallBell);
		
    // 법인정보
    FreeAndNil(GT_BUBIN_INFO.brNo_KeyNum);
    FreeAndNil(GT_BUBIN_INFO.cbcode);
    FreeAndNil(GT_BUBIN_INFO.cbEtc);
    FreeAndNil(GT_BUBIN_INFO.cbCorpNm);  // 법인명
    FreeAndNil(GT_BUBIN_INFO.cbDeptNm);  // 부서명
    FreeAndNil(GT_BUBIN_INFO.cbSCorpNm);  // 단축법인면
    FreeAndNil(GT_BUBIN_INFO.cbSDeptNm);  // 단축부서명
    FreeAndNil(GT_BUBIN_INFO.cbPayMethod);  // 요금지불방식(0.외상, 1.현금, 2.후불)
    FreeAndNil(GT_BUBIN_INFO.cbCustYn);  // 고객등록 여부 'y', 'n'
    FreeAndNil(GT_BUBIN_INFO.cbUseYn );  // 사용 여부 'y', 'n'

    if Assigned(GS_WaitFareList) then FreeAndNil(GS_WaitFareList);
    if Assigned(GS_WaitFareDefault) then FreeAndNil(GS_WaitFareDefault);
    if Assigned(GS_UserBigoList) then FreeAndNil(GS_UserBigoList);
    if Assigned(GS_UserBigoList1) then FreeAndNil(GS_UserBigoList1);
    if Assigned(GS_UserFavoriteNumber) then FreeAndNil(GS_UserFavoriteNumber);
		if Assigned(GS_UserCancelEtc) then FreeAndNil(GS_UserCancelEtc);
		if Assigned(GS_BRCOLOR_LIST) then FreeAndNil(GS_BRCOLOR_LIST);
		if Assigned(GS_LOCAL_BRCOLOR_LIST) then FreeAndNil(GS_LOCAL_BRCOLOR_LIST);
    if Assigned(GS_BubHu_LIST) then FreeAndNil(GS_BubHu_LIST);
    if Assigned(gst_CidLog) then FreeAndNil(gst_CidLog);
    if Assigned(gst_SISOLog) then FreeAndNil(gst_SISOLog);
    if Assigned(gst_CidLogOrg0) then FreeAndNil(gst_CidLogOrg0);
    if Assigned(gst_CidLogOrg1) then FreeAndNil(gst_CidLogOrg1);
    if Assigned(gst_CidLogOrg2) then FreeAndNil(gst_CidLogOrg2);
    if Assigned(GS_UserShortMenu) then FreeAndNil(GS_UserShortMenu);

    if Assigned(GS_POIAName) then FreeAndNil(GS_POIAName);
    if Assigned(GS_POIRName) then FreeAndNil(GS_POIRName);

    if Assigned(GFormInfo.Name) then FreeAndNil(GFormInfo.Name);
    if Assigned(GFormInfo.Font) then FreeAndNil(GFormInfo.Font);
    if Assigned(GFormInfo.Skin) then FreeAndNil(GFormInfo.Skin);

    FreeAndNil(GT_Permition.aryGrpCode);
    FreeAndNil(GT_Permition.aryMmCode);
    FreeAndNil(GT_Permition.aryDetCode);
    FreeAndNil(GT_Permition.aryMemPer);
    FreeAndNil(GT_Permition.aryMemDetPer);
    FreeAndNil(GT_Permition.aryMmNumber);
    FreeAndNil(GT_Permition.aryMenuAuth);
    FreeAndNil(GT_Permition.aryMmGrpName);
    FreeAndNil(GT_Permition.aryMmName);

    FreeAndNil(GT_MAPLocal.slCity);
    FreeAndNil(GT_MAPLocal.slWard);
    FreeAndNil(GT_MAPLocal.slStre);
    FreeAndNil(GT_MAPLocal.slStre_RI);
    FreeAndNil(GT_MAPLocal.slSSub);
    FreeAndNil(GT_MAPLocal.slSPOI);
    FreeAndNil(GT_MAPLocal.slMapX);
    FreeAndNil(GT_MAPLocal.slMapY);

    FreeAndNil(GT_MAPOrigi.slCity);
    FreeAndNil(GT_MAPOrigi.slWard);
    FreeAndNil(GT_MAPOrigi.slStre);
    FreeAndNil(GT_MAPOrigi.slStre_RI);
    FreeAndNil(GT_MAPOrigi.slSSub);
    FreeAndNil(GT_MAPOrigi.slSPOI);
    FreeAndNil(GT_MAPOrigi.slMapX);
    FreeAndNil(GT_MAPOrigi.slMapY);

    FreeAndNil(J03GridAdd);
    //----------------------------------------
    if Assigned(slstMapTemp1) then FreeAndNil(slstMapTemp1);
    if Assigned(slstMapTemp2) then FreeAndNil(slstMapTemp2);
    if Assigned(slstMapTemp3) then FreeAndNil(slstMapTemp3);
    if Assigned(slstLocalMapOrder) then FreeAndNil(slstLocalMapOrder);
    if Assigned(slstLocalSelectRlt) then FreeAndNil(slstLocalSelectRlt);
    if Assigned(slstLocalSelectRlt2) then FreeAndNil(slstLocalSelectRlt2);
    if Assigned(slstLocalSelectRlt3) then FreeAndNil(slstLocalSelectRlt3);
    if Assigned(slstLocalSelectRlt4) then FreeAndNil(slstLocalSelectRlt4);
    if Assigned(slstLocalSelectRlt5) then FreeAndNil(slstLocalSelectRlt5);
    if Assigned(slstLocalSelectRltALL) then FreeAndNil(slstLocalSelectRltALL);
    if Assigned(GSL_Penalty) then FreeAndNil(GSL_Penalty);
		if Assigned(scb_Taksong) then FreeAndNil(scb_Taksong);
		if Assigned(scb_LBS) then FreeAndNil(scb_LBS);
		if Assigned(scb_Shuttle4) then FreeAndNil(scb_Shuttle4);
		if Assigned(scb_MilePayMileSave) then FreeAndNil(scb_MilePayMileSave);
		if Assigned(scb_CashPayMileSave) then FreeAndNil(scb_CashPayMileSave);
		if Assigned(scb_CALLDUse) then FreeAndNil(scb_CALLDUse);
		if Assigned(scb_CALLDPer) then FreeAndNil(scb_CALLDPer);
		if Assigned(scb_CALLDsetYN) then FreeAndNil(scb_CALLDsetYN);
		if Assigned(scb_CouponYN) then FreeAndNil(scb_CouponYN);
		if Assigned(slGongjiList) then FreeAndNil(slGongjiList);
		if Assigned(slGongjiKey ) then FreeAndNil(slGongjiKey);
		if Assigned(scb_MultiSetYN) then FreeAndNil(scb_MultiSetYN);

		if Assigned(scb_Area1) then FreeAndNil(scb_Area1);
		if Assigned(scb_Area2) then FreeAndNil(scb_Area2);
		if Assigned(scb_Area3) then FreeAndNil(scb_Area3);
		if Assigned(scb_ShareNo) then FreeAndNil(scb_ShareNo);
		if Assigned(scb_SERVICE_TYPE_CHANGE) then FreeAndNil(scb_SERVICE_TYPE_CHANGE);
		if Assigned(scb_JON03CMPSupportUse) then FreeAndNil(scb_JON03CMPSupportUse);
		if Assigned(scb_JON03CMPSupportAMT) then FreeAndNil(scb_JON03CMPSupportAMT);
		if Assigned(scb_JON03CallByInsureFree) then FreeAndNil(scb_JON03CallByInsureFree);
	
		if Assigned(scb_MapMarkIdx) then FreeAndNil(scb_MapMarkIdx);
		if Assigned(scb_MapMarkSabun) then FreeAndNil(scb_MapMarkSabun);
		if Assigned(scb_MapMarkTitle) then FreeAndNil(scb_MapMarkTitle);
		if Assigned(scb_MapMarkContents) then FreeAndNil(scb_MapMarkContents);
		if Assigned(scb_MapMarkLon) then FreeAndNil(scb_MapMarkLon);
		if Assigned(scb_MapMarkLat) then FreeAndNil(scb_MapMarkLat);
		if Assigned(FKOREAAREA_XY.Lon) then FreeAndNil(FKOREAAREA_XY.Lon);
		if Assigned(FKOREAAREA_XY.Lat) then FreeAndNil(FKOREAAREA_XY.Lat);

		if Assigned(gslTable) then FreeAndNil(gslTable);
		if Assigned(gslTrigger) then FreeAndNil(gslTrigger);

		if Assigned(GT_Q_exten)   then FreeAndNil(GT_Q_exten);
		if Assigned(GT_Service_no)then FreeAndNil(GT_Service_no);
		if Assigned(GT_Dnis_no)   then FreeAndNil(GT_Dnis_no);
		if Assigned(GT_Buz_name)  then FreeAndNil(GT_Buz_name);
		if Assigned(GT_Admin_Q_exten)   then FreeAndNil(GT_Admin_Q_exten);
		if Assigned(GT_Admin_Service_no)then FreeAndNil(GT_Admin_Service_no);
		if Assigned(GT_Admin_Dnis_no)   then FreeAndNil(GT_Admin_Dnis_no);
		if Assigned(GT_Admin_Buz_name)  then FreeAndNil(GT_Admin_Buz_name);

		if Assigned(gslNaverClientID)  then FreeAndNil(gslNaverClientID);
		if Assigned(gslNaverClientKey)  then FreeAndNil(gslNaverClientKey);
		

		if Assigned(gslLoginListAreaS)  then FreeAndNil(gslLoginListAreaS); 
		if Assigned(gslLoginListAreaO)  then FreeAndNil(gslLoginListAreaO);
		
		// XML 전문 저장 구조체 --------------------------------
		Server_CID.Active := False; // xml socket server
    server_mdrive.Active := False;
		server_speed.Active := False;
    Dm.ssMessenger.Active := False;
    sc_wk_tr.Active := False;
    IdUDPCidRecvServer.Tag := 99;
		IdUDPCidRecvServer.Active := False;
    //======================= 폼 Close =======================================

    // 통신창
    if Assigned(Frm_Flash) then Frm_Flash.Close;

    try
       //SQLite 연결 해제
      gSQLite_CDMS_DB.Free;
//       gSQLite_CDMS_Table.Free;

      if dmCharge.FDConn_SQLite.Connected then
         dmCharge.FDConn_SQLite.Connected := False;
      dmCharge.FDQuery_SQLite.Close;

      if dmCharge.FDConnection1.Connected then
         dmCharge.FDConnection1.Connected := False;
      dmCharge.FDQuery1.Close;
      dmCharge.FDQuery2.Close;
    Except
      on e: exception do
      begin
				Log('proc_FormCloseInitial Error 1-3 :' + ErrLine + ', '  + E.Message, LOGDATAPATHFILE);
				Assert(False, 'proc_FormCloseInitial Error 1-3 :' + ErrLine + ', '  + E.Message);
        Sleep(100);
        hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
        TerminateProcess(hProc, 0);
      end;
    end;

    if (GT_OCX = '1004') or (GT_OCX = '1002') then
    begin
      iHandle := FindWindow('TfrmWebCaller', '발신자정보');
      if iHandle <> 0 then
        SendMessage(iHandle, WM_CLOSe, 0, 0);
    end else
    if ( GT_OCX = 'KLCNS' ) Or ( GT_OCX = 'LGUCT' ) then
    begin
			xCTI_CTI.Active := False;
      ProcessKill;
      GT_OCX := '';    // 종료시 재시작방지하기 위해서 공백처리
    end else
		if GT_OCX = 'BCTI' then
    begin
      bCTI_CTI.Active := False;
      ProcessKill;
      GT_OCX := '';    // 종료시 재시작방지하기 위해서 공백처리
		end else
		if GT_OCX = 'SI415' then      //시사일오OEM
		begin
			gSI415_C_Close := True;
			gSI415_A_Close := True;
			bSI415.Socket.SendText('killSoftPhone');	 //소프트폰종료											
			Proc_IPCCLogOut;  //전문으로 CMNIPCC.exe 종료

			bSI415.Tag := 99;
			bSI415.Active := False;
			bSI415_A.Active := False;
			bSI415_2601.Tag := 99;
			bSI415_2601.Active := False;
//			ProcessKill_Pro('CMNSoftPhone.exe');
			sleep(500);
//			ProcessKill_Pro('CMNIPCC.exe');
			GT_OCX := '';    // 종료시 재시작방지하기 위해서 공백처리
		end else
    if FileExists('C:\Windows\System32\SangACD.ocx') Then
		begin
      if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
      begin
        ProcessKill;
      end;
    end;

    //------------------------------------------------------
    if Assigned(HashCity) then FreeAndNil(HashCity);
    if Assigned(HashWard) then FreeAndNil(HashWard);
    if Assigned(HashWar2) then FreeAndNil(HashWar2);
    if Assigned(HashStee) then FreeAndNil(HashStee);
    if Assigned(HashSte2) then FreeAndNil(HashSte2);

    if Assigned(HashRoad) then FreeAndNil(HashRoad);
    {----------------------}

 		if Assigned(HashEucKr_1) then FreeAndNil(HashEucKr_1);

    for i := 0 to Length(FAREAROUND_XY) -1 do
    begin
      if Assigned(FAREAROUND_XY[i].LonArr) then FreeAndNil(FAREAROUND_XY[i].LonArr);
      if Assigned(FAREAROUND_XY[i].LatArr) then FreeAndNil(FAREAROUND_XY[i].LatArr);
    end;

    // 사용자 직접 입력 결과 정보 저장. 120624.
    if Assigned(GT_MAPLocal_RLT.slCity) then FreeAndNil(GT_MAPLocal_RLT.slCity);
    if Assigned(GT_MAPLocal_RLT.slWard) then FreeAndNil(GT_MAPLocal_RLT.slWard);
    if Assigned(GT_MAPLocal_RLT.slStre) then FreeAndNil(GT_MAPLocal_RLT.slStre);
    if Assigned(GT_MAPLocal_RLT.slSSub) then FreeAndNil(GT_MAPLocal_RLT.slSSub);
    if Assigned(GT_MAPLocal_RLT.slSPOI) then FreeAndNil(GT_MAPLocal_RLT.slSPOI);
    if Assigned(GT_MAPLocal_RLT.slMapX) then FreeAndNil(GT_MAPLocal_RLT.slMapX);
    if Assigned(GT_MAPLocal_RLT.slMapY) then FreeAndNil(GT_MAPLocal_RLT.slMapY);

    // 사용자 직접 입력 결과 정보 저장. 120624.
    if Assigned(GT_MAPLocal_RLT_R.slCity) then FreeAndNil(GT_MAPLocal_RLT_R.slCity);
    if Assigned(GT_MAPLocal_RLT_R.slWard) then FreeAndNil(GT_MAPLocal_RLT_R.slWard);
    if Assigned(GT_MAPLocal_RLT_R.slStre) then FreeAndNil(GT_MAPLocal_RLT_R.slStre);
    if Assigned(GT_MAPLocal_RLT_R.slSSub) then FreeAndNil(GT_MAPLocal_RLT_R.slSSub);
    if Assigned(GT_MAPLocal_RLT_R.slSPOI) then FreeAndNil(GT_MAPLocal_RLT_R.slSPOI);
    if Assigned(GT_MAPLocal_RLT_R.slMapX) then FreeAndNil(GT_MAPLocal_RLT_R.slMapX);
    if Assigned(GT_MAPLocal_RLT_R.slMapY) then FreeAndNil(GT_MAPLocal_RLT_R.slMapY);

    for i := 0 to 10 do
    begin
      if Assigned(slR_11[i]) then FreeAndNil(slR_11[i]);
    end;

    //------------------------------------------------------
    if Assigned(dm) then FreeAndNil(dm);

    //========================================================================
    if GT_USERIF.LOGIN = '1' then
    begin
      // 사용한 객체 및 폼 컨트롤, 전역변수 Closing 처리 한다.
      if ( acAwayTimer1.Tag = 99 ) And ( Not GB_FIRSTMODE ) then
         ShowMessage('[콜마너XE] 60분 동안 사용자 입력이 없어서 자동 로그아웃 되었습니다.');
    end;
  except
    on e: exception do
    begin
      Log('proc_FormCloseInitial Error 2 :' + ErrLine + ', '  + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_FormCloseInitial Error 2 :' + ErrLine + ', '  + E.Message);
      Sleep(100);
      hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
      TerminateProcess(hProc, 0);
    end;
  end;
end;

procedure TFrm_Main.FormCreate(Sender: TObject);
const
  MOD_ALT = 1;
  MOD_CONTROL = 2;

var
  ln_env: TIniFile;
  i, iRow: Integer;
  Major, Minor, Release, Build: Word;
begin
	SetDebugeWrite('Main.FormCreate');
	dxSkinController1.SkinName := sdxDefaultSkinName;
//	dxSkinController1.SkinName := 'MetropolisDark';

  Self.Caption := GS_APPNAME;
  dxSkinController1.NativeStyle := False;
  RibbonAutoHideMode.Enabled := False;         // Ribbon Menu Full Screen Button InVisible
  DisableAero := True;
  GetFormBorderIcons;                          // Ribbon Display Option No Show;

	try
    // 날짜형식이 'yy/mm/dd'일경우 오류 발생 가능성으로 인해 자체 Display 포맷 변경
    for i := 0 to ComponentCount - 1 do
    begin
      if Components[i] is TcxDateEdit then
      begin
        (Components[i] as TcxDateEdit).Properties.DisplayFormat := 'yyyy/mm/dd';
        (Components[i] as TcxDateEdit).Properties.EditFormat    := 'yyyy/mm/dd';
      end;
    end;
  except
  end;

	//====================================================
  // 폼 타이틀 제거..
{  if BorderStyle = bsNone then Exit;

  Save := GetWindowLong(Handle, gwl_Style);
  if (Save and ws_Caption) = ws_Caption then
  begin
    case BorderStyle of
      bsSingle, bsSizeable:
        SetWindowLong(Handle, gwl_Style, Save and (not (ws_Caption)) or ws_border);
    end;
//-    Height := Height - ( getSystemMetrics(sm_cyCaption) + 100 );
    Refresh;
  end;}

	try
    dxTileMain.Visible := Not (GB_365System);

    if (GB_CallLine) then
    begin
      dxTileMainItem1.Visible := False;
      dxTileControl1Item1.Visible := False;
      dxTileControl1Item3.Visible := False;
    end;   

    cxTabControl1.tabs.VisibleTabs[11].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[10].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[09].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[08].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[07].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[06].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[05].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[04].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[03].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[02].Visible := Not ( GB_365System Or GB_CallLine );
    cxTabControl1.tabs.VisibleTabs[01].Visible := Not ( GB_365System Or GB_CallLine );

//    WinExec(PAnsiChar(AnsiString('Regsvr32 ' + mRootPath + 'TalmapX.dll')),0);
//    IsRun('Regsvr32.exe');
    // 복수콜 폼 로딩 여부 저장함.
    GB_FRMJON015_LOADING_YN := False;

    GFormInfo.Name := TStringList.Create;
    GFormInfo.Font := TStringList.Create;
    GFormInfo.Skin := TStringList.Create;

    slOrderClickTag := TStringList.Create;

    gSosokName := TcxLabel.Create(Nil);
    gSosokTabSheet := TcxTabSheet.Create(Nil);
    gSosokTime := 0;

    iFirstCnt := 0;
    iCntTrack := 0;

    JON01LastIdx := 0;

    gsCIDEnCoding := '9999';
    gst_CidLogTime := 0;

    iLastDockPage := -1;
    iLastActivePage := 0;

		FRivalInfoSend := '';

		FKOREAAREA_XY.Lon := TStringList.Create;
		FKOREAAREA_XY.Lat := TStringList.Create;

    GT_CALL_LIST_STATUS := clsNone;
{
1. 울릉도 37.573529, 130.971167
2. 고성군 38.707680, 128.339402
3. 해안면 38.383312, 128.127915
4. 철원읍 38.331622, 127.114426
5. 황  해 37.773629, 126.062485
6. 제주도 33.119489, 125.715416
7. 재주도 33.165484, 126.984337
8. 완  도 34.279881, 127.029912
9. 대마도 34.937208, 129.619310
}
		Try
			FKOREAAREA_XY.Lon.Add('130.971167');
			FKOREAAREA_XY.Lon.Add('128.339402');
			FKOREAAREA_XY.Lon.Add('128.127915');
			FKOREAAREA_XY.Lon.Add('127.114426');
			FKOREAAREA_XY.Lon.Add('126.062485');
			FKOREAAREA_XY.Lon.Add('125.715416');
			FKOREAAREA_XY.Lon.Add('126.984337');
			FKOREAAREA_XY.Lon.Add('127.029912');
			FKOREAAREA_XY.Lon.Add('129.619310');
			FKOREAAREA_XY.Lat.Add('37.573529');
			FKOREAAREA_XY.Lat.Add('38.707680');
			FKOREAAREA_XY.Lat.Add('38.383312');
			FKOREAAREA_XY.Lat.Add('38.331622');
			FKOREAAREA_XY.Lat.Add('37.773629');
			FKOREAAREA_XY.Lat.Add('33.119489');
			FKOREAAREA_XY.Lat.Add('33.165484');
			FKOREAAREA_XY.Lat.Add('34.279881');
			FKOREAAREA_XY.Lat.Add('34.937208');
		except
			FKOREAAREA_XY.Lon.free;
			FKOREAAREA_XY.Lat.free;
		End;

    // 화면 해상도가 1024 * 768 일때는 최대화를 자동으로 해주지 않는다.
    if Screen.Width > 1030 then
    begin
      Self.WindowState := wsMaximized;
    end;

    // 좌측메뉴 접속기사 : 출발지에 좌표값이 없습니다. 메시지 보여줌,,
//    cxLabel13.Left := 7;
//    cxLabel13.Top := 85;

    GetAllSystemInfo;
    GetFileVersion(Application.ExeName, Major, Minor, Release, Build);


		GS_PRJ_VERSION := Format('%d.%d.%d.%d', [Major, Minor, Release, Build]);
		
{    sTmp := GS_PRJ_VERSION;

    ZeroMemory(@LogEncryptData, SizeOf(LogEncryptData));
    SetLength(LogEncryptData, 1024);
    iEncryptLen := BlowFishEncrypt(_LOG_KEY, sTemp, LogEncryptData);

    // Hex 코드 만들기..
    for ii := 0 to iEncryptLen - 1 do
    begin
      sPass := sPass + ByteToHexaStr(LogEncryptData[ii]);
		end; }

		// Log 폴더 없으면 자동 생성.
    DirMake(EXECDIRECTORY + '\Log');

    // XML 전문을 읽어 온다.  CDS. 080818.
    XmlDataFileRead;

    GS_SortNoChange := True;
    gbfrmJON00Show := False;

    GS_DebugError := '';

    GS_GongJi := ''; // '피크타임 입니다. 신속 정확 하게 실수 없이 접수 바랍니다. “내가 한 실수가 여러명 고생 시킨다.”' + '    ';

    // 그리드 초기화
    for i := 0 to cxGridGongJi.ColumnCount - 1 do
    begin
      cxGridGongJi.Columns[i].DataBinding.ValueType := 'String';
    end;
    cxGridGongJi.DataController.SetRecordCount(0);

    for i := 0 to cxGridQRate.ColumnCount - 1 do
    begin
      cxGridQRate.Columns[i].DataBinding.ValueType := 'String';
    end;
    cxGridQRate.Columns[17].DataBinding.ValueType := 'Integer';
    cxGridQRate.Columns[18].DataBinding.ValueType := 'Integer';
    cxGridQRate.DataController.SetRecordCount(0);

    for i := 0 to cxGridCShare.ColumnCount - 1 do
    begin
      cxGridCShare.Columns[i].DataBinding.ValueType := 'String';
    end;
    cxGridCShare.Columns[12].DataBinding.ValueType := 'Integer';  // 요금
    cxGridCShare.DataController.SetRecordCount(0);

    cxGridExcel := TCxGrid.Create(Self);
    cxGridDBViewExcel := TcxGridDBTableView.Create(Self);
    cxTreeView := TcxTreeList.Create(Self);

    Frm_Flash := TFrm_Flash.Create(Self);
    Frm_JON02 := TFrm_JON02.Create(Self);

    // Critical Section 초기화 한다.
    InitializeCriticalSection(_CriticalLockMap);
    InitializeCriticalSection(_CriticalPortal);

    Application.HelpFile := HELPDIRECTORY + TKSCRTHELPFILE;
    Application.OnException := ProcessException;
    Application.OnMessage := MessageLoop;
    Application.OnIdle := PrintScreenIdle;

    GS_DAUM_APIKey := TStringList.Create;

    GS_DAUM_APIKey.Clear;
    GS_DAUM_APIKey.Add('b8248415dc626bb507d217449adb47f2');  // 이영범차장 APIKEY
    GS_DAUM_APIKey.Add('4e3e2caa4f2fb2029d5a84734b4d77c4');  // 김현수차장 네이버 APIKEY
    GS_DAUM_APIKey.Add('13faa7e10147ebf1acc0130df57a00db');  // 김현수차장 APIKEY
		GS_DAUM_APIKey.Add('081d13575ca6e1981da8b68872c15a72');  //콜마너Daum API key  CMNP

    gslCallListNeasun := TStringList.Create;
    scb_HdNo := TStringList.Create;      // 패밀리권한 본사코드  LYB
    scb_HdNm := TStringList.Create;      // 패밀리권한 본사명
    scb_HdMainBr := TStringList.Create;      // 패밀리권한 본사별 메인지사
		scb_FamilyBrCode := TStringList.Create;     // 본사코드 저장
		scb_FamilyBrName := TStringList.Create;     // 본사코드 저장
    scb_FamilyBranch := TStringList.Create;
    scb_FamilyWkBranchName := TStringList.Create;
		scb_FamilyWkBranchCode := TStringList.Create;
		scb_FamilyTaksong := TStringList.Create;
		scb_FamilyShuttle4 := TStringList.Create;

    scb_FamilyDsBranchCode := TStringList.Create;
    scb_FamilyDsBranchName := TStringList.Create;
  	scb_FamilyKeyNumber := TStringList.Create;
  	scb_FamilySituation_Tel := TStringList.Create;
		scb_FamilyKeyNumberAuth := TStringList.Create;
		scb_FamilyHeadCode := TStringList.Create;

    scb_HeadCode := TStringList.Create;   // 대표번호별 본사코드  CDS.
    scb_RateMent := TStringList.Create;   // 요금, 안내멘트
    scb_Branch := TStringList.Create;     // 지사코드 + 지사명 저장

    scb_HdCode := TStringList.Create;     // 지사별 본사코드
    scb_BranchCode := TStringList.Create; // 지사코드 저장
    scb_BranchName := TStringList.Create; // 지사명 저장
		scb_KeyNumber := TStringList.Create;  // 지사대표번호 저장
		scb_Situation_Tel := TStringList.Create;  // 지사대표번호 저장
		scb_KeyNumberAuth := TStringList.Create;  // 지사대표번호 저장
		scb_DsBranchCode := TStringList.Create; // 대표번호 연동 지사코드 저장
		scb_DsBranchName := TStringList.Create; // 대표번호 연동 지사명 저장

		scb_HeadCodeCallBell := TStringList.Create;     // 대표 번호별 본사코드 콜벨 사용여부 GSL_HD_LIST[I, 27] 20161231 KHS
//		scb_KeyNumberAddCallBell := TStringList.Create; // 지사대표번호에 연결된 콜벨 실착신번호 GSL_HD_LIST[I, 28] 20161231 KHS


    scb_WkBranchName := TStringList.Create; // 기사있는 지사리스트
		scb_WkBranchCode := TStringList.Create; // 기사있는 지사코드리스트
    scb_CrBrCode     := TStringList.Create;
    scb_BranchCoupon := TStringList.Create; // 모바일쿠폰사용여부
		scb_OfficeBaecha := TStringList.Create; // 강제배차사용여부(연합설정)
		scb_Change_Keynum_yn := TStringList.Create; // 메인대표번호 변경 가능 여부(연합설정)
		scb_BrCardAgentCD := TStringList.Create;
    scb_CRCustInfoDayOpen := TStringList.Create;
    scb_CRCustInfoSafeMin := TStringList.Create;
    scb_CRRouteMgr := TStringList.Create;
    scb_CustLevelSeq := TStringList.Create;
		scb_CustAPPUseYn := TStringList.Create;
    scb_OrderToAsk := TStringList.Create;
		scb_PlusCallUse := TStringList.Create;
		scb_TakAllyUse  := TStringList.Create;
		scb_AIOutBoundUse := TStringList.Create;
		scb_AIOBKeyNumberUse := TStringList.Create;
		scb_Taksong := TStringList.Create;
		scb_LBS     := TStringList.Create;
		scb_Shuttle4:= TStringList.Create;
		scb_MilePayMileSave:= TStringList.Create;
		scb_CashPayMileSave:= TStringList.Create;
		scb_CALLDUse := TStringList.Create; //자율수수료 사용여부 CALLD 20200219 KHS
		scb_CALLDPer := TStringList.Create; //자율수수료율 |30,25,20| 20200219 KHS
		scb_CALLDsetYN := TStringList.Create;
    scb_MultiSetYN := TStringList.Create;
    scb_Area1 := TStringList.Create;
    scb_Area2 := TStringList.Create;
    scb_Area3 := TStringList.Create;
		scb_ShareNo := TStringList.Create;
		scb_SERVICE_TYPE_CHANGE := TStringList.Create;
		scb_JON03CMPSupportUse := TStringList.Create;  //지원금 사용여부 20210708 KHS 
		scb_JON03CMPSupportAMT := TStringList.Create;  //지원금 액 20210708 KHS 
		scb_JON03CallByInsureFree := TStringList.Create;

		scb_CouponYN := TStringList.Create;
    slGongjiList := TStringList.Create; // 공지 저장
    slGongjiKey  := TStringList.Create; // 공지key 저장
    GS_WaitFareList := TStringList.Create; // 대기요금설정
    GS_WaitFareDefault := TStringList.Create; // 대기요금설정
		GS_UserBigoList := TStringList.Create; // 출/도착지 상용구
    GS_UserBigoList1 := TStringList.Create; // 사용자비고 상용구
		GS_UserCancelEtc := TStringList.Create; // 오더취소[기타] 사용구
    GS_UserFavoriteNumber := TStringList.Create; // 간편전화리스트
    GS_UserShortMenu := TStringList.Create; // 사용자단축메뉴

    GS_POIAName := TStringList.Create;   // POI치환
    GS_POIRName := TStringList.Create;   // POI치환

    scb_Blowfish_HdBrCode := TStringList.Create;
		scb_Blowfish_HdCode := TStringList.Create;

		GS_BRCOLOR_LIST := TStringList.Create;
		GS_LOCAL_BRCOLOR_LIST := TStringList.Create;
    GS_BubHu_LIST := TStringList.Create;
		//SocketRead := TStringList.Create; // Recieve 저장

		GT_BUBIN_INFO.brNo_KeyNum := TStringList.Create;
    GT_BUBIN_INFO.cbcode := TStringList.Create;
    GT_BUBIN_INFO.cbEtc := TStringList.Create;
    GT_BUBIN_INFO.cbCorpNm := TStringList.Create;
    GT_BUBIN_INFO.cbDeptNm := TStringList.Create;
    GT_BUBIN_INFO.cbSCorpNm := TStringList.Create;
    GT_BUBIN_INFO.cbSDeptNm := TStringList.Create;
    GT_BUBIN_INFO.cbPayMethod := TStringList.Create;
    GT_BUBIN_INFO.cbCustYn := TStringList.Create;
    GT_BUBIN_INFO.cbUseYn := TStringList.Create;

    GT_CID_NEW := '';

		J03GridAdd := THashedStringList.Create;
    // 메인화면 좌측 그리드 세팅
    SetLeftMenuGrid;

    gCurProperties := TcxCurrencyEditProperties.Create(Nil);
    gCalProperties := TcxCalcEditProperties.Create(Nil);
    gCalHCProperties := TcxCalcEditProperties.Create(Nil);
    gLblProperties := TcxLabelProperties.Create(Nil);

    gst_CidLog := TStringList.Create;
    gst_SISOLog := TStringList.Create;
    gst_CidLogOrg0 := TStringList.Create;
    gst_CidLogOrg1 := TStringList.Create;
    gst_CidLogOrg2 := TStringList.Create;

    HashCity  := THashedStringList.Create;
    HashWard  := THashedStringList.Create;
    HashWar2  := THashedStringList.Create;
    HashStee  := THashedStringList.Create;
    HashSte2  := THashedStringList.Create;

    HashRoad  := THashedStringList.Create;
    HashEucKr_1 := TStringList.Create;

    for i := 0 to 10 do
    begin
      slR_11[i] := TStringList.Create;
    end;
    FileMode := fmOpenRead;

   {----------------------}

    // 사용자 직접 입력 결과 정보 저장. 120624.
    GT_MAPLocal_RLT.slCity := TStringList.Create;
    GT_MAPLocal_RLT.slWard := TStringList.Create;
    GT_MAPLocal_RLT.slStre := TStringList.Create;
    GT_MAPLocal_RLT.slSSub := TStringList.Create;
    GT_MAPLocal_RLT.slSPOI := TStringList.Create;
    GT_MAPLocal_RLT.slMapX := TStringList.Create;
    GT_MAPLocal_RLT.slMapY := TStringList.Create;

    // 사용자 직접 입력 결과 정보 저장. 120624.
    GT_MAPLocal_RLT_R.slCity := TStringList.Create;
    GT_MAPLocal_RLT_R.slWard := TStringList.Create;
    GT_MAPLocal_RLT_R.slStre := TStringList.Create;
    GT_MAPLocal_RLT_R.slSSub := TStringList.Create;
    GT_MAPLocal_RLT_R.slSPOI := TStringList.Create;
    GT_MAPLocal_RLT_R.slMapX := TStringList.Create;
    GT_MAPLocal_RLT_R.slMapY := TStringList.Create;

		iATotal := 0;
    iACancel := 0;

    try
      if FileExists(LOGDATADIRECTORY + 'Insert.log') then DeleteFile(LOGDATADIRECTORY + 'Insert.log');
      if FileExists(LOGDATADIRECTORY + 'Delete.log') then DeleteFile(LOGDATADIRECTORY + 'Delete.log');
      if FileExists(LOGDATADIRECTORY + 'Update.log') then DeleteFile(LOGDATADIRECTORY + 'Update.log');

      if FileExists(LOGDATADIRECTORY + 'CIDLOGXE.log') then DeleteFile(LOGDATADIRECTORY + 'CIDLOGXE.log');
      if FileExists(LOGDATADIRECTORY + 'CIDLOGORGXE.log') then DeleteFile(LOGDATADIRECTORY + 'CIDLOGORGXE.log');
      if FileExists(LOGDATADIRECTORY + 'CIDLOGXE1.log') then DeleteFile(LOGDATADIRECTORY + 'CIDLOGXE1.log');
      if FileExists(LOGDATADIRECTORY + 'CIDLOGORGXE1.log') then DeleteFile(LOGDATADIRECTORY + 'CIDLOGORGXE1.log');
		except

    end;

    if not DirectoryExists(WINTEMPDIRECTORY) then
      ForceDirectories(WINTEMPDIRECTORY);

    if FileExists(EXECDIRECTORY + 'N_sddata_B.txt') then
    begin
      szHash2 := TSZHash.Create(1000, 3);
    end;
    //  20130703  LYB  최소화시에는 PrintScreen키 사용 가능하도록 처리
    Application.OnRestore := NormalMe;
    Application.OnMinimize := MinimizeMe;

    bPrintYesNo := True;

		//보스대리 관제 클론 용
		scb_MapMarkIdx   := TStringList.Create;
		scb_MapMarkSabun := TStringList.Create;
		scb_MapMarkTitle := TStringList.Create;
		scb_MapMarkContents := TStringList.Create;
		scb_MapMarkLon := TStringList.Create;
		scb_MapMarkLat := TStringList.Create;

    gslTable := TStringList.Create;
    gslTrigger := TStringList.Create;

    lbWkRun.Style.Color := GetIniColor(ENVPATHFILE, 'Status', 'CB_0D', ColorToString($00FFC78E));
    lbWkRunBox.Style.Color := lbWkRun.Style.Color;

    BtnAdvPnl4P.Visible := GB_365System;
	
{    // Globally trap the Windows system key "PrintScreen"
    prntscrn := GlobalAddAtom('Hotkey1');
    RegisterHotKey(Handle, prntscrn, 0, VK_SNAPSHOT);

    Ctrlprntscrn := GlobalAddAtom('Hotkey2');
    RegisterHotKey(Handle, Ctrlprntscrn, MOD_CONTROL, VK_SNAPSHOT);

    Altprntscrn := GlobalAddAtom('Hotkey3');
    RegisterHotKey(Handle, Altprntscrn, MOD_ALT, VK_SNAPSHOT);}

    // ---------------------------------------------------------------
	except
    on e: exception do
    begin
			ShowMessage('frmMain[FormCreate]:' + e.Message);
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.FormDestroy(Sender: TObject);
var
  hProc : THandle;
begin
  SetDebugeWrite('Main.FormDestroy');

  try
		if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
    begin
      if FileExists(WINTEMPDIRECTORY + 'CXELog.log') then DeleteFile(WINTEMPDIRECTORY + 'CXELog.log'); // 정상적인 종료시 자료 삭제
      if FileExists(WINTEMPDIRECTORY + 'CXELog1.log') then DeleteFile(WINTEMPDIRECTORY + 'CXELog1.log'); // 정상적인 종료시 자료 삭제
    end;
  except
    on e: exception do
    begin
      Log('FormDestroy Error 0 :' + E.Message, LOGDATAPATHFILE);
      Sleep(100);
      hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
      TerminateProcess(hProc, 0);
    end;
  end;

  try
    GS_CallIni.Free;
    acAwayTimer1.Enabled := False;

    // Ribbon From 종료시 AdvToolPanel 먼저 해제처리 해줘야 오류 발생 하지 않음  20131128  LYB
    AdvTPTab.Free;
    // 프로그램을 종료한다.
		tm_AppClose.Enabled := True;
    Frm_Main := Nil;
  except
    on e: exception do
    begin
      Log('FormDestroy Error 1 :' + E.Message, LOGDATAPATHFILE);
      Sleep(100);
      hProc := OpenProcess(PROCESS_TERMINATE, False, GetCurrentProcessId);
      TerminateProcess(hProc, 0);
    end;
  end;
end;

procedure TFrm_Main.FormResize(Sender: TObject);
begin
	proc_Resize;
end;

procedure TFrm_Main.FormShow(Sender: TObject);
Var i : Integer;
begin
  SetDebugeWrite('Main.FormShow');
	try
    fSetFont(Frm_Main, GS_FONTNAME);
    fSetSkin(Frm_Main);
    for i := 0 to pred(cxStyleRepository1.Count) do
    begin
      TcxStyle(cxStyleRepository1.Items[i]).Font.Name := GS_FONTNAME;
    end;

    pSetSkinButton(btnConWKUseMap);
    pSetSkinButton(btnSelOrderUseMap);
    pSetSkinButton(btnSelWKUseMap);

    if acAwayTimer1.tag = 99 then
    begin
      Application.Terminate;
    end else
    begin
      acAwayTimer1.Tag := 0;
      // 사용자입력 없이 60분 경과 하였을때,, 프로그램 종료 이벤트 처리 위한 값 초기화.
      SetSysBtnPosition;
			Proc_Initialization;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.func_Login: Boolean;
var sTmp : string;
  i : Integer;
  slChkAddrB, slChkSchB : TStringList;
begin
	Result := False;
  try
		Proc_GlobalVariableReSet();

    try
			Frm_Login := Tfrm_login.Create(Self);
			Frm_Login.ShowModal;
    finally
      FreeAndNil(GS_EnvFile);
			if Frm_Login.ModalResult = mrCancel then // 취소 버튼 클릭 : 종료 한다.
				Frm_Login.Free;
    end;

		if (GT_USERIF.ID = '') then
		begin
			Result := False;
      Exit;
		end;

		if IdTCPClient1.Tag = 99 then
		begin
			Result := False;
			Exit;
    end;

		GS_EnvFile := TIniFile.Create(ENVPATHFILE);

    GT_RECEIVER_KIND := GS_EnvFile.ReadString('POSS_TEL', 'GT_RECEIVER_KIND', '1');
		if GT_RECEIVER_KIND = '1' then rb_HeadSet.Checked := True;
		if GT_RECEIVER_KIND = '0' then rb_Receiver.Checked := True;

    GS_JON_FILECALLINGUSE := GS_EnvFile.ReadBool('Confirm', 'FileCallingUse', False); //2013.11.1 cid.info 파일 사용 KHS

		GS_JON_FONTSIZE := GS_EnvFile.ReadInteger('Confirm', 'FontSize', 9);
		GS_JON_GRIDHEIGHT := GS_JON_FONTSIZE + 15;
		GS_JON_FONTBOLD := GS_EnvFile.ReadBool('Confirm', 'FontBold', False);
		if GS_JON_FONTBOLD then GS_JON_FontStyle := [fsBold] else GS_JON_FontStyle := [];


    GS_MAP_AREA_AUTOSHOW := GS_EnvFile.ReadBool('AcceptMap', 'AreaAutoShow', false);
    GS_AUTOMEMO_SHOW := GS_EnvFile.ReadBool('AcceptMap', 'AutoMemoShow', False);

		GS_JON011_POSFIX  := GS_EnvFile.ReadBool('AcceptWin', 'Jon011Fix', False);
    GS_JON012_POSFIX  := GS_EnvFile.ReadBool('AcceptWin', 'Jon012Fix', False);
    GS_JON019_POSFIX  := GS_EnvFile.ReadBool('AcceptWin', 'Jon019Fix', False);
    GS_JON021_POSFIX  := GS_EnvFile.ReadBool('AcceptWin', 'Jon021Fix', False);
		GS_JON30_POSFIX   := GS_EnvFile.ReadBool('AcceptWin', 'Jon30Fix', False);

		GS_JON012_STATS  := GS_EnvFile.ReadInteger('AcceptWin', 'Jon012Stats', 0);

		GS_JON012_ST2 := GS_EnvFile.ReadBool('AcceptWin', 'Jon012St2', False);
		GS_JON012_ST1 := GS_EnvFile.ReadBool('AcceptWin', 'Jon012St1', False);
		GS_JON012_ST4 := GS_EnvFile.ReadBool('AcceptWin', 'Jon012St4', False);
		GS_JON012_ST8 := GS_EnvFile.ReadBool('AcceptWin', 'Jon012St8', False);

//    GS_JON01_GROUPMOVE := GS_EnvFile.ReadBool('AcceptWin', 'GroupMove', True);
    GS_JON01_GROUPMOVE := True;      // 무조건 그룹 사용으로 변경 2020.03.17

		GT_MOUSE_HINT         := StrToIntDef(GS_EnvFile.ReadString('MOUSE_OVER', 'MOUSE_OVER', '1'), 1);
		GT_MAIN_VIEW_TIME     := StrToIntDef(GS_EnvFile.ReadString('MAIN_VIEW', 'TIME', '0'), 0);

    GT_MAIN_VIEW_TIME1 := GS_EnvFile.ReadInteger('MAIN_VIEW', 'TIME1', GT_MAIN_VIEW_TIME);
    GT_MAIN_VIEW_TIME2 := GS_EnvFile.ReadInteger('MAIN_VIEW', 'TIME2', GT_MAIN_VIEW_TIME);
    GT_MAIN_VIEW_TIME3 := GS_EnvFile.ReadInteger('MAIN_VIEW', 'TIME3', GT_MAIN_VIEW_TIME);
    GT_MAIN_VIEW_TIME4 := GS_EnvFile.ReadInteger('MAIN_VIEW', 'TIME4', GT_MAIN_VIEW_TIME);
    GT_MAIN_VIEW_TIME5 := GS_EnvFile.ReadInteger('MAIN_VIEW', 'TIME5', GT_MAIN_VIEW_TIME);
    GT_MAIN_VIEW_TIME6 := GS_EnvFile.ReadInteger('MAIN_VIEW', 'TIME6', 0);

    GT_CALLMANNER_NOTSMS  := StrToIntDef(GS_EnvFile.ReadString('TRANS_SMS', 'CALLMANNER', '0'), 0);
		GT_DEFAULT_ST         := StrToIntDef(GS_EnvFile.ReadString('CHARGE', 'GT_DEFAULT_ST', '0'), 0);
		GT_WK_HINT            := StrToIntDef(GS_EnvFile.ReadString('MOUSE_OVER', 'WK_HINT', '0'), 0);

    GS_JON_DRIVERCHARGELOCAL := GS_EnvFile.ReadString('CHARGE', 'JON_DRIVERCHARGELOCAL', 'n');
    if ( Area_Charge_YN = 'n' ) And ( GS_JON_DRIVERCHARGELOCAL <> 'n' ) then Area_Charge_YN := 'y';

    GBJON01_AUTO_UPSO_YN := GS_EnvFile.ReadBool('COUNSEL',  'JON01_AUTO_UPSO_YN', GB_365System);

    GT_SUM_DEFAULT  := StrToIntDef(GS_EnvFile.ReadString('WORKER', 'SUMDEF', '0'), 0); // 기사 일괄차람 기본 선택값( 0 : 수수료차감, 1
    gbWorkerChargeYN := StrToIntDef(GS_EnvFile.ReadString('WORKER', 'CALLSMSDEF', '1'), 1);
    GB_WORSOSOK_VIEW := GS_EnvFile.ReadBool('WORKER', 'GB_WORSOSOK_VIEW', True);

    gsViaStartEndCheck := GS_EnvFile.ReadString('COUNSEL', 'ViaStartEndCheck', 'Y');
    GS_DDD_Num      := GS_EnvFile.ReadString('RouteMS', 'Current', '999');
    GS_DDD_Add      := GS_EnvFile.ReadBool('RouteMS', 'AddDDD', False);
    // 상담원 기본지역 설정값. DDD 번호.  CDS. 080730.
    GB_JON07_OPT1   := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON07_OPT1', False);    

    FillChar(GT_TR_INFO, SizeOf(GT_TR_INFO), chr($00));

		GB_CALLMNG_DATEDISP := GS_EnvFile.ReadInteger('COUNSEL', 'CallMngDateDisp', 0);
    if GB_CALLMNG_DATEDISP = 0 then rb_Time.Checked := True else
    if GB_CALLMNG_DATEDISP = 1 then rb_Date_Time.Checked := True;

    GT_TR_INFO.No   := GS_EnvFile.ReadString('WORKER_TR', 'NO', '');
    GT_TR_INFO.USE  := GS_EnvFile.ReadString('WORKER_TR', 'USE', 'n');
		GT_TR_INFO.IP   := GS_EnvFile.ReadString('WORKER_TR', 'IP', '');
		GT_TR_INFO.PORT := GS_EnvFile.ReadString('WORKER_TR', 'PORT', '');
    GT_TR_INFO.BrNo := GS_EnvFile.ReadString('WORKER_TR', 'BRNO', '');
    GT_TR_INFO.BrNo2:= GS_EnvFile.ReadString('WORKER_TR', 'BRNO2', '');

    FillChar(GT_CIDINFO, SizeOf(GT_CIDINFO), chr($00));
    GT_CIDINFO.Use_Sel      := GS_EnvFile.ReadString('CID_COMM', 'CID_SELSVR', '1');
    if GT_CIDINFO.Use_Sel = '1' then
      GT_CIDINFO.SERVER_IP    := GS_EnvFile.ReadString('CID_COMM', 'CID_IP', '')
    else
    if GT_CIDINFO.Use_Sel = '2' then
      GT_CIDINFO.SERVER_IP    := GS_EnvFile.ReadString('CID_COMM', 'CID_IP2', '');

		GT_CIDINFO.SERVER_IP1    := GS_EnvFile.ReadString('CID_COMM', 'CID_IP', '');
    GT_CIDINFO.SERVER_IP2    := GS_EnvFile.ReadString('CID_COMM', 'CID_IP2', '');
    GT_CIDINFO.NaeSun       := GS_EnvFile.ReadString('CID_COMM', 'NAESUN', '');
    GT_CIDINFO.Use_yn       := GS_EnvFile.ReadString('CID_COMM', 'CID_AUTO', 'N');

    if GT_CIDINFO.Use_yn = 'N' then
    begin
      GT_CIDINFO.Use_yn       := GS_EnvFile.ReadString('CID_COMM', 'CID_SELSVRUSE', 'N');
      GS_SERVERCIDUSE         := GS_EnvFile.ReadBool('CID_COMM', 'CID_SELSVRUSE', False);
    end;

    GT_CIDINFO.Win10CIDXE_YN := GS_EnvFile.ReadBool ('CID_COMM', 'WIN10_CIDXE_USE', FALSE);
    chkWin10CIDXE.Checked := GT_CIDINFO.Win10CIDXE_YN;

    GT_CIDINFO.ACDSERVERIP  := GS_EnvFile.ReadString('CID_COMM', 'ACDSERVERIP', '127.0.0.1');
    GT_CIDINFO.ACDSERVERUSE  := GS_EnvFile.ReadBool('CID_COMM', 'ACDSERVERUSE', False);

    if GS_EnvFile.ReadString('CID_COMM', 'CID_SELSVRUSE', 'N') = 'Y' then
      GT_CIDINFO.SERVER_IP    := GS_EnvFile.ReadString('CID_COMM', 'CID_SELSVRIP', '');

    // Y:CID사용, N:CID미사용
    GT_CIDINFO.Auto_Search   := GS_EnvFile.ReadString('CID_COMM', 'CIDSERVERIPFIND', '');  // Y:자동, N:수동
		GS_LOGIN_CID_AUTOFIND_YN := GS_EnvFile.ReadBool('CID_COMM', 'LOGIN_CID_AUTO', True);   // 2011.08.01  True(Default), False

		GS_EnvFile.ReadSection('BR_COLOR', GS_LOCAL_BRCOLOR_LIST);
    GS_EnvFile.ReadSection('BR_BubHu', GS_BubHu_LIST);

		gsInternalNumber := GS_EnvFile.ReadString('CID_COMM', 'NAESUN', '');

		GT_POSS_TEL := StrToIntDef(GS_EnvFile.ReadString('POSS_TEL', 'GT_POSS_TEL', '0'), 0);
		GT_POSS_IP := GS_EnvFile.ReadString('POSS_IP', 'GT_POSS_IP', '');
		GT_POSS_KEYNUM := StringReplace(GS_EnvFile.ReadString('POSS_TEL', 'GT_POSS_KEYNUM', ''), '-', '', [rfReplaceAll]);

    if GT_POSS_TEL = 0 then
    begin
      GT_POSS_IP := '';
			GT_POSS_KEYNUM := '';
		end;

		chkUseSet02.Tag := 99;
		chkUseSet02.Checked := GT_POSS_TEL = 1;
		chkUseSet02.Tag := 0;

		GT_RECEIVER_KIND := GS_EnvFile.ReadString('POSS_TEL', 'GT_RECEIVER_KIND', '1');
		GT_CHARGE_CAL := StrToIntDef(GS_EnvFile.ReadString('CHARGE', 'CAL', '0'), 0);
		GT_DISTANCE_ST  := StrToIntDef(GS_EnvFile.ReadString('CHARGE', 'GT_DISTANCE_ST', '0'), 0);
		GT_DISTANCE_SVR := StrToIntDef(GS_EnvFile.ReadString('CHARGE', 'SERVER', '2'), 2);
    GT_DISTANCE_ROUTETYPE := StrToIntDef(GS_EnvFile.ReadString('CHARGE', 'GT_DISTANCE_ROUTETYPE', '2'), 2);
    GT_DISTANCE_ROADTYPE := StrToIntDef(GS_EnvFile.ReadString('CHARGE', 'GT_DISTANCE_ROADTYPE', '1'), 1);
    GT_DISTANCE_TOLLTYPE := StrToIntDef(GS_EnvFile.ReadString('CHARGE', 'GT_DISTANCE_TOLLTYPE', '2'), 2);

		if GT_DISTANCE_ST = 1 then GT_CHARGE_CAL := 1;

		gsMyMainTelUse := GS_EnvFile.ReadString('MYMAINTELUSE', 'USEYN', 'FALSE');
		gsMyMainTelUseYN := GS_EnvFile.ReadString('MYMAINTELUSE', 'OPTYN', 'Y');

		GSMyMainTelOrderChargeCheck := GS_EnvFile.ReadBool('MYMAINTELUSE', 'OrderChargeCheck', False);
    gsMyMainRateNoChange := GS_EnvFile.ReadBool('MYMAINTELUSE', 'RateNoChange', False);

		GB_KMAiRateUSE := GS_EnvFile.ReadBool('MYMAINTELUSE', 'KMAiRateUSE', False);
		GS_KMAiRateName := GS_EnvFile.ReadString('MYMAINTELUSE', 'KMAiRateName', 'AiFare');
		GB_KMAiRateMode := GS_EnvFile.ReadBool('MYMAINTELUSE', 'KMAiRateMode', False);

		if GB_365System then gsMyRateRemarkMaintain := GS_EnvFile.ReadString('MYRREMARKMAT', 'USEYN', 'TRUE')
                    else gsMyRateRemarkMaintain := GS_EnvFile.ReadString('MYRREMARKMAT', 'USEYN', 'FALSE');

    gsJON01AfterMoneyYN := GS_EnvFile.ReadString('JON01AFTERMONEYUSE', 'AFTERMONEY', 'TRUE');
		gsJON01AfterMoneyWordUse  := GS_EnvFile.ReadBool('JON01AFTERMONEYUSE', 'AFTERMONEYWORDUSE', False);
		gsJON01AfterMoneyWordUse1 := GS_EnvFile.ReadBool('JON01AFTERMONEYUSE', 'AFTERMONEYWORDUSE1', False);
		gsJON01CreditMoneyYN := GS_EnvFile.ReadString('JON01AFTERMONEYUSE', 'CREDITMONEY', 'FALSE');  // 2021.05.10 기본사용안함으로 변경 CDS
    // 접수창에서 결제구분(현장카드) 사용여부 설정. 20210128 KHS
    gsJON01SelfCard := GS_EnvFile.ReadString('JON01AFTERMONEYUSE', 'SELFCARD', 'TRUE');

    gsJON01MileUnitUse := GS_EnvFile.ReadBool('COUNSEL', 'gsJON01MileUnitUse', (GS_PRJ_AREA = 'O') AND (GT_USERIF.ShareNo = 'G03') );  // 부산콜 연합만 기본 사용
    gsJON01CardBigoUse := GS_EnvFile.ReadBool('COUNSEL', 'gsJON01CardBigoUse', False );
    gsJON01PostBigoUse := GS_EnvFile.ReadBool('COUNSEL', 'gsJON01PostBigoUse', False );

    gbJON01UseShortCut := GS_EnvFile.ReadBool('COUNSEL', 'CancelShortCut', False);

	  GB_COUNSEL_TITLE_VIEW1 := GS_EnvFile.ReadBool('COUNSEL', 'GS_COUNSEL_TITLE_VIEW1', False);
  	GB_COUNSEL_TITLE_VIEW2 := GS_EnvFile.ReadBool('COUNSEL', 'GS_COUNSEL_TITLE_VIEW2', False);

		GB_SHOPTYPE_CALLCENTER := GS_EnvFile.ReadInteger('COUNSEL', 'ShopTypeCheck', 0);
		GB_JON_FINISHMSG        := GS_EnvFile.ReadBool('COUNSEL', 'FinishMsg', True);
    GB_JONLIST_RETRY_NOSHOW := GS_EnvFile.ReadBool('COUNSEL', 'RetryNoShow', False);
    GB_JONLIST_READY_NOSHOW := GS_EnvFile.ReadBool('COUNSEL', 'ReadyNoShow', False);
		GB_JONLIST_READY_NOSHOW_MSG := GS_EnvFile.ReadBool('COUNSEL', 'ReadyNoShowMsg', False);
		GB_J03_NOSHOW_MSG       := GS_EnvFile.ReadBool('COUNSEL', 'J03NoShowMsg', False);  //접수현황 전체 메세지 안띄움 2016.07.23. KHS
		GB_JON_BACKKEYUSE       := GS_EnvFile.ReadBool('COUNSEL', 'seBackKeyUse', False);   // 2011.05.25 CDS. Add.

    GB_JON_BUBHUUSE         := GS_EnvFile.ReadBool('COUNSEL', 'seBubhuuse', False);     // 즉후->법후로 변경 2012.08.01 KHS
    GB_JON_SEXM             := GS_EnvFile.ReadBool('COUNSEL', 'seSexMuse', False);
    GB_JON_SMARTRATEUSE     := GS_EnvFile.ReadBool('SmartOption', 'SmartRateUse', False);   // 스마트요금표 적용 여부
  	GT_AutoSmartCharge      := GS_EnvFile.ReadBool('SmartOption', 'AutoSmartCharge', False );
   	GT_PopUpSmartCharge     := GS_EnvFile.ReadBool('SmartOption', 'PopUpSmartCharge', False );
   	GT_AllPopUpSmartCharge  := GS_EnvFile.ReadBool('SmartOption', 'AllPopUpSmartCharge', False );
  	GB_JON_SMARTSIZEFLAG    := GS_EnvFile.ReadInteger('SmartOption', 'SmartSizeFlag', 1 );

    GS_UPMODE_START_CHANGE   := GS_EnvFile.ReadBool('COUNSEL', 'UPMODE_START_CHANGE' , False);   // 2012.07.19 수정모드 시 출발지 변경 khs
    GS_UPMODE1_START_CHANGE  := GS_EnvFile.ReadBool('COUNSEL', 'UPMODE1_START_CHANGE', False);   // 2015.03.16 수정모드 시 도착지 변경 lyb
    GS_UPMODE2_START_CHANGE  := GS_EnvFile.ReadBool('COUNSEL', 'UPMODE2_START_CHANGE', False);   // 2015.03.16 수정모드 시 요금 변경 lyb
    GS_UPMODE3_START_CHANGE  := GS_EnvFile.ReadBool('COUNSEL', 'UPMODE3_START_CHANGE', False);   // 2020.09.10 수정모드 시 적요1 변경 lyb

		GS_START_AUTOLOCK       := GS_EnvFile.ReadBool('COUNSEL', 'START_AUTOLOCK', True);         // // 2012.10.05 출발지 엔터 시 잠금khs
		GS_END_AUTOLOCK         := GS_EnvFile.ReadBool('COUNSEL', 'END_AUTOLOCK', False);         // // 2019.11.27 도착지 입력 후 엔터치면 도착지 잠기지 않음khs		GS_IDINUP := StrToIntDef(GS_EnvFile.ReadString('COUNSEL', 'IDINUP', '0'), 0);  //접수현황 조회 시 최초/수정상담원 설정 2015.02.04 LYB
		GS_IDNAME := StrToIntDef(GS_EnvFile.ReadString('COUNSEL', 'IDNAME', '0'), 0);  //접수현황 조회 시 ID+NAME 설정 2013.04.18 KHS
    GS_STARTDONG            := GS_EnvFile.ReadBool('COUNSEL', 'STARTDONG', False);   // // 2013.07.26 출발지 "읍면동/시군구" 표기(기본은 "시군구") khs
    GS_PASSTIMECHK          := StrToIntDef(GS_EnvFile.ReadString('COUNSEL', 'PASSTIMECHK', '0'), 0); //접수현황 조회 시 지난시간 계산 기준 2014.02.05 KHS
		GS_WKCON_AUTO := GS_EnvFile.ReadBool('WKSEARCH', 'WKSEARCHAUTO'        , False);
		GS_SEPER_USE            := GS_EnvFile.ReadBool('COUNSEL', 'SEPER_USE', True);         // // 2012.10.05 출발지 엔터 시 잠금khs

	  GB_ORDERACTIVEBMENU_USE := GS_EnvFile.ReadBool('COUNSEL', 'OrderActiveBMenu', True);
    chkOrderActiveBMenu.Checked := GB_ORDERACTIVEBMENU_USE;
	  GB_ACTIVEBMENU_USE := GS_EnvFile.ReadBool('COUNSEL', 'ActiveBMenu', False);
    chkActiveBMenu.Checked := GB_ACTIVEBMENU_USE;
   	GB_RQ_AUTOACTIVE := GS_EnvFile.ReadBool('COUNSEL', 'RQ_AUTOACTIVE', True);
		chkRQ_AutoActive.Checked := GB_RQ_AUTOACTIVE;

   	GB_RQ_CLOSEPOPUP := GS_EnvFile.ReadBool('COUNSEL', 'RQ_CLOSEPOPUP', True);
  	chkRQ_ClosePopup.Checked := GB_RQ_CLOSEPOPUP;

    if ( GT_USERIF.LV = '10' ) And ( TCK_USER_PER.BTM_10LVL_RQUEST <> '1' ) then
    begin
      GB_RQ_CLOSEPOPUP := False;
      chkRQ_ClosePopup.Checked := GB_RQ_CLOSEPOPUP;
      chkRQ_ClosePopup.Enabled := GB_RQ_CLOSEPOPUP;
    end;

	  GB_CALLMAP_POPUP := GS_EnvFile.ReadBool('COUNSEL', 'CALLMAP_POPUP', False);
    chkCallMapPopup.Checked := GB_CALLMAP_POPUP;

   	GB_NS_NOCHANGEMENU := GS_EnvFile.ReadBool('COUNSEL', 'NS_NOCHANGEMENU', False);
  	chkNoChangNS.Checked := GB_NS_NOCHANGEMENU;

    // 지방권은 콜링중일시정지기능 사용안함
  	GB_JON54CALLSTOP := GS_EnvFile.ReadBool('COUNSEL', 'JON54CALLSTOP', GS_PRJ_AREA = 'O');
    // 수도권만 신규접수공유 기본 사용안함
    GB_NS_NOACCEPTSHARE := GS_EnvFile.ReadBool('COUNSEL', 'NS_NOACCEPTSHARE', GS_PRJ_AREA = 'S');
  	chkNoAcceptShare.Checked := GB_NS_NOACCEPTSHARE;

   	GB_RQ_APPLYRATE := GS_EnvFile.ReadBool('COUNSEL', 'RQ_APPLYRATE', False);
	  if GB_RQ_APPLYRATE then cbApplyRate.Checked := True
                       else cbApplyRate.Checked := False;

   	cxSAutoHideMin.Value := GS_EnvFile.ReadInteger('COUNSEL', 'AutoHidMinute', 0);

   	sTmp := GS_EnvFile.ReadString('COUNSEL', 'CallListNeasun', '');
    if not func_SetCallListNeasun(sTmp) then begin gslCallListNeasun.Clear end;
    mmo_CallListNeasun.Clear;
    mmo_CallListNeasun.Text := sTmp;

		btnSetJonAuto.Down := GS_WKCON_AUTO;
    pSetSkinButton(btnSetJonAuto);

		Save_map_Lon := GS_EnvFile.ReadString('COUNSEL', 'Save_map_Lon', '');                        //사용자마지막 위치 2012.08.01
		Save_map_Lat := GS_EnvFile.ReadString('COUNSEL', 'Save_map_Lat', '');

		GS_COUNSEL_AUTOSCROLLTOP := GS_EnvFile.ReadBool('COUNSEL', 'AutoScrollTop', True);
		GS_COUNSEL_CHNORDERSCROLLTOP := GS_EnvFile.ReadBool('COUNSEL', 'ChangeOrderScrollTop', False);
		GS_WKCON_AUTOSCROLLTOP   := GS_EnvFile.ReadBool('COUNSEL', 'WKAutoScrollTop', True);

		GS_SHORTCUT_SPACENOUSE := GS_EnvFile.ReadBool('COUNSEL',  'SHORTCUT_SPACENOUSE', False); //true : 스페이스단축키 사용안함

		GS_COUNSEL_AIQuestion := GS_EnvFile.ReadBool('COUNSEL', 'AIQuestion', False);
		GS_COUNSEL_CallCustColClick := GS_EnvFile.ReadBool('COUNSEL', 'CallCustColClick', False);
		GS_COUNSEL_CallWorkerColClick := GS_EnvFile.ReadBool('COUNSEL', 'CallWorkerColClick', False);

		GS_MNG1501NoUse := GS_EnvFile.ReadBool('COUNSEL', 'MNG1501NoUse', False);

		NearWKSearchRadius   := GS_EnvFile.ReadInteger('COUNSEL', 'NearWKSearchRadius', 1);

		GS_LocalMapSET := GS_EnvFile.ReadBool('COUNSEL', 'LocalMapSET', False);

		GS_COUNSEL_BUBIN_KEYNUM  := GS_EnvFile.ReadString('COUNSEL', 'KeyNum', '');
    if Pos('.', GS_COUNSEL_BUBIN_KEYNUM) > 0 then
      GS_COUNSEL_BUBIN_KEYNUM := Copy(GS_COUNSEL_BUBIN_KEYNUM, 0, Pos('.', GS_COUNSEL_BUBIN_KEYNUM))
        + Copy(Copy(GS_COUNSEL_BUBIN_KEYNUM, Pos('.', GS_COUNSEL_BUBIN_KEYNUM) + 1,
        Length(GS_COUNSEL_BUBIN_KEYNUM)) + '     ', 1, 5);

    GS_TRS_PENALTY.Type1.Name             := GS_EnvFile.ReadString('TRSPenalty', 'Type1Name', '');
    ReadIniTRSPenalty('TRSPenalty', 'Type1', 'Step1', GS_EnvFile, GS_TRS_PENALTY.Type1.Step1);
    ReadIniTRSPenalty('TRSPenalty', 'Type1', 'Step2', GS_EnvFile, GS_TRS_PENALTY.Type1.Step2);
    ReadIniTRSPenalty('TRSPenalty', 'Type1', 'Step3', GS_EnvFile, GS_TRS_PENALTY.Type1.Step3);
    GS_TRS_PENALTY.Type2.Name             := GS_EnvFile.ReadString('TRSPenalty', 'Type2Name', '');
    ReadIniTRSPenalty('TRSPenalty', 'Type2', 'Step1', GS_EnvFile, GS_TRS_PENALTY.Type2.Step1);
    ReadIniTRSPenalty('TRSPenalty', 'Type2', 'Step2', GS_EnvFile, GS_TRS_PENALTY.Type2.Step2);
    ReadIniTRSPenalty('TRSPenalty', 'Type2', 'Step3', GS_EnvFile, GS_TRS_PENALTY.Type2.Step3);

    GS_WKCASH_TYPE_DEFAULT := GS_EnvFile.ReadString('WKCASH_DEFAULT', 'INPUT_TYPE', '미사용');
    GS_WKCASH_PAYTYPE_DEFAULT := GS_EnvFile.ReadString('WKCASH_DEFAULT', 'INPUT_PAYTYPE', '미사용');
    GS_WKCASH_NOMSG := GS_EnvFile.ReadBool('WKCASH_DEFAULT', 'FINISH_NOMSG', False);
		GS_WKCASH_AUTOCLOSE := GS_EnvFile.ReadBool('WKCASH_DEFAULT', 'FINISH_AUTOCLOSE', False);
    GS_WKCASH_FIXACCOUNT := GS_EnvFile.ReadBool('WKCASH_DEFAULT', 'FIXIED_ACCOUNTTAB', False);

    GS_JON_WKPANELTY_CONF := GS_EnvFile.ReadBool('Confirm', 'WorkerPanelty', True);
    GS_JON_SENDWORKER_CONF := GS_EnvFile.ReadBool('Confirm', 'SendWorker', True);
		GS_JON_AUTOCMDQUESTION := GS_EnvFile.ReadBool('Confirm', 'AutoCmdQuestion', False);
		GS_JON_AutoStandBy     := GS_EnvFile.ReadBool('Confirm', 'AutoStandBy', False);
    //앱접수-대기창 수정창, 신규창 사용옵셥
    GB_JON01_APPORDER      := GS_EnvFile.ReadBool('Confirm', 'AppOrder', True);

		GS_COUNSEL_BLOCKCIDADD := GS_EnvFile.ReadBool('COUNSEL', 'BlockCidAdd', False);
		GS_COUNSEL_OutCallCidSync := GS_EnvFile.ReadBool('COUNSEL', 'OutCallCidSync', False);

		GS_COUNSEL_AUTORELOADHG := GS_EnvFile.ReadBool('COUNSEL', 'AutoReloadHIG', False);
		GS_COUNSEL_MULTICHECK   := GS_EnvFile.ReadBool('COUNSEL', 'MULTIUSECHECK', True);
    GB_COUNSEL_MULTICALLNUMBER := GS_EnvFile.ReadBool('COUNSEL', 'MULTICALLNUMBER', GB_365System);
		GS_COUNSEL_MULTICHECKSHOW := GS_EnvFile.ReadBool('COUNSEL', 'MULTIUSECHECKSHOW', True);
    GS_COUNSEL_BAECHA_ALLCHECK := GS_EnvFile.ReadBool('COUNSEL', 'BAECHA_ALLCHECK', False);

		//20210625KHS
		GS_JON03Mileage     := GS_EnvFile.ReadBool('COUNSEL', 'JON03Mileage'    , False);  // [접수현황] 마일리지 옵션추가
		GS_JON03CMPSupportY := GS_EnvFile.ReadBool('COUNSEL', 'JON03CMPSupportY', False);  // [접수현황] 지원금 옵션추가
		GS_JON03CMPSupportN := GS_EnvFile.ReadBool('COUNSEL', 'JON03CMPSupportN', False);  // [접수현황] 지원금제외 옵션추가

    GB_JON_POITELSEARCH     := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON_POITELSEARCH', False);
    GB_JON_VIEWWKIFNO       := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON_VIEWWKIFNO', False);
    GB_JON_WKCALLPOPUP      := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON_WKCALLPOPUP', False);
    GB_JON_NOSMSCONFIRM     := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON_NOSMSCONFIRM', False);
		GB_JON012_DESTSEARCH_USE := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON012_DESTSEARCH_USE', False);
		GB_ResToJoin_USE        := GS_EnvFile.ReadBool('COUNSEL', 'GB_ResToJoin_USE', False);
		GB_PostPayNoUpdate      := GS_EnvFile.ReadBool('COUNSEL', 'GB_PostPayNoUpdate', False);
		GB_JON_MEMO3_USE        := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON_MEMO3_USE', False);
    GB_JON_CLOSE_CONFIRM    := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON_CLOSE_CONFIRM', False);
    GB_JON01_MENU_OVER      := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON01_MENU_OVER', False);
    GB_JON01_SHORTMENU_USE  := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON01_SHORTMENU_USE', False);
    GB_JON_FIXEDPIN         := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON_FIXEDPIN', GB_365System);
    GB_JON_FIXMODE          := GS_EnvFile.ReadBool('COUNSEL', 'GB_JON_FIXMODE', True);

		gbOrderCancelSelect := GS_EnvFile.ReadInteger('Confirm', 'ORDERCANCELSELECT', 7);

		GS_JON_BRCOLOR_SET := GS_EnvFile.ReadBool('BR_COLOR', 'BR_COLOR_USE', False);
		GS_JON_BRCOLOR_SET_USE := GS_EnvFile.ReadInteger('BR_COLOR', 'BR_COLOR_USE_ALL', 0);

		GS_AREA_AUTO_SET := GS_EnvFile.ReadBool('COUNSEL', 'GS_AREA_AUTO_SET', False); //2013.05.23 출발지, 도착지 과거이용내역으로 자동설정  KHS
		GS_AUTO_LOCK_START  := GS_EnvFile.ReadBool('COUNSEL', 'GS_AUTO_LOCK_START', True); //수정창 오픈시 출/도/요 자동잠금 > 기본값 잠슴 20171002 KHS
		GS_AUTO_LOCK_END    := GS_EnvFile.ReadBool('COUNSEL', 'GS_AUTO_LOCK_END', True); //수정창 오픈시 출/도/요 자동잠금 > 기본값 잠슴 20171002 KHS
		GS_AUTO_LOCK_CHARGE := GS_EnvFile.ReadBool('COUNSEL', 'GS_AUTO_LOCK_CHARGE', True); //수정창 오픈시 출/도/요 자동잠금 > 기본값 잠슴 20171002 KHS
    GS_MODIFY_MAP_VIEW := GS_EnvFile.ReadBool('COUNSEL', 'GS_MODIFY_MAP_VIEW', IsDaeJeonShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo)); //2020.07.29 수정창 오픈시 출발지 지도 자동 표시 LYB

		GS_LOCALDATA_USE := StrTointDef(GS_EnvFile.ReadString('LOCAL', 'GS_LOCALDATA_USE', '0'), 0);
		GS_SYNC_DATETIME := GS_EnvFile.ReadString('LOCAL', 'GS_SYNC_DATETIME', '1900-01-01 01:01:01');

		gJONOrderColor.Use := GS_EnvFile.ReadBool('OrderColor', 'Use', False);
		gJONOrderColor.Gubun := GS_EnvFile.ReadInteger('OrderColor', 'Gubun', 0);
		gJONOrderColor.ColorG := GS_EnvFile.ReadInteger('OrderColor', 'ColorG', 0);
    gJONOrderColor.Step1.Use    := GS_EnvFile.ReadBool('OrderColor', 'Step1Use', False);
		gJONOrderColor.Step1.Time   := GS_EnvFile.ReadInteger('OrderColor', 'Step1Time', -1);
    gJONOrderColor.Step1.Color  := TColor(GS_EnvFile.ReadInteger('OrderColor', 'Step1Color', $00FFFFFF));

    gJONOrderColor.Step2.Use    := GS_EnvFile.ReadBool('OrderColor', 'Step2Use', False);
    gJONOrderColor.Step2.Time   := GS_EnvFile.ReadInteger('OrderColor', 'Step2Time', -1);
    gJONOrderColor.Step2.Color  := TColor(GS_EnvFile.ReadInteger('OrderColor', 'Step2Color', $00FFFFFF));

    gJONOrderColor.Step3.Use    := GS_EnvFile.ReadBool('OrderColor', 'Step3Use', False);
    gJONOrderColor.Step3.Time   := GS_EnvFile.ReadInteger('OrderColor', 'Step3Time', -1);
    gJONOrderColor.Step3.Color  := TColor(GS_EnvFile.ReadInteger('OrderColor', 'Step3Color', $00FFFFFF));

    gJONOrderColor.Step4.Use    := GS_EnvFile.ReadBool('OrderColor', 'Step4Use', False);
		gJONOrderColor.Step4.Time   := GS_EnvFile.ReadInteger('OrderColor', 'Step4Time', -1);
		gJONOrderColor.Step4.Color  := TColor(GS_EnvFile.ReadInteger('OrderColor', 'Step4Color', $00FFFFFF));

		gJONOrderBell.Use  := GS_EnvFile.ReadBool('OrderColor', 'OrderBell',  False);
		gJONOrderBell.Time := GS_EnvFile.ReadInteger('OrderColor', 'OrderBellTime', -1);
		gJONOrderBell.Path := GS_EnvFile.ReadString('OrderColor', 'OrderBellPath', '');

		gJONAcceptMemo.Use := GS_EnvFile.ReadBool('AcceptMemo', 'Use', False);
    gJONAcceptMemo.Memo := GS_EnvFile.ReadString('AcceptMemo', 'Memo', '');

		GS_JON54AutoRunNew := GS_EnvFile.ReadBool('COUNSEL', 'JON54AutoRunNew', True);

		GT_RealTimeWorker   := GS_EnvFile.ReadBool('SmartOption', 'RealTimeWorker',   False );
    GT_RealTimeWeather  := GS_EnvFile.ReadBool('SmartOption', 'RealTimeWeather',  False );
    GB_JON_SMARTTESTDATE := GS_EnvFile.ReadString('SmartOption', 'SMARTTESTDATE', '');

		GS_Duration := GS_EnvFile.ReadInteger('COUNSEL', 'GS_Duration', 30); //30분 기본설정

		GS_FormType := GS_EnvFile.ReadString('FormEdit', 'FormDesign', 'Normal');
    slChkAddrB := TStringList.Create;
    slChkSchB  := TStringList.Create;
    try
      GS_EnvFile.ReadSection('ServerPoiAddr', slChkAddrB);
      GS_EnvFile.ReadSection('ServerPoiSch' , slChkSchB);

      GS_SEARCH_POI_ADDR := '';
      if slChkAddrB.Count <= 0 then
      begin
        GS_SEARCH_POI_ADDR := '';
      end else
      begin
        for i := 0 to slChkAddrB.Count - 1 do
        begin
          if GS_SEARCH_POI_ADDR = '' then GS_SEARCH_POI_ADDR := Trim(slChkAddrB.Strings[i])
                                     else GS_SEARCH_POI_ADDR := GS_SEARCH_POI_ADDR + ',' + Trim(slChkAddrB.Strings[i]);
        end;
      end;

      if Trim(GS_SEARCH_POI_ADDR) = '' then
        if GS_PRJ_AREA = 'S' then GS_SEARCH_POI_ADDR := '서울,경기,인천,충남,충북';

      GS_SEARCH_POI_SCH := '';
      if slChkSchB.Count <= 0 then
      begin
        GS_SEARCH_POI_SCH := '';
      end else
      begin
        for i := 0 to slChkSchB.Count - 1 do
        begin
          if GS_SEARCH_POI_SCH = '' then GS_SEARCH_POI_SCH := Trim(slChkSchB.Strings[i])
                                    else GS_SEARCH_POI_SCH := GS_SEARCH_POI_SCH + ',' + Trim(slChkSchB.Strings[i]);
        end;
      end;

      if Trim(GS_SEARCH_POI_SCH) = '' then
        if GS_PRJ_AREA = 'S' then GS_SEARCH_POI_SCH := '서울,경기,인천,충남,충북';
    finally
      slChkAddrB.Free;
      slChkSchB.Free;
    end;

    // CDS. 080730.
    GT_CAT_PORT.HoTransPort := 6001; // 신버전에서는 직접 호전환 서버에 연결함.
    GT_CAT_PORT.HoTransIP := '61.74.195.70';
    // 신버전에서는 직접 호전환 서버에 연결함.

    proc_UserPermission;

    Result := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.CidServerVersionCheck;
var
	ln_envfile: TIniFile;
  sCidAuto, sIp, sNaeSun, sIPAutoFind, sSelSvr, sIp1, sIP2: string;
begin
	SetDebugeWrite('Main.CidServerVersionCheck');
  try
    ln_envfile := TIniFile.Create(ENVPATHFILE);
    try
      if (GS_EXEC_GUBUN = 0) or (GT_PRG_DUAL_MAIN <> 0) then Exit;
      // ini 정보 읽기

      sCidAuto := ln_envFile.ReadString('CID_COMM', 'CID_AUTO', 'N');
      // Y:CID사용, N:CID미사용
      sIPAutoFind := ln_envFile.ReadString('CID_COMM', 'CIDSERVERIPFIND', '');
      // Y:자동, N:수동

      sSelSvr := ln_envfile.ReadString('CID_COMM', 'CID_SELSVR', '1');
      sIp1 := ln_envFile.ReadString('CID_COMM', 'CID_IP', '');
      sIp2 := ln_envFile.ReadString('CID_COMM', 'CID_IP2', '');

      if sSelSvr = '1' then sIp := sIp1
                       else sIp := sIp2;

      sNaeSun := ln_envFile.ReadString('CID_COMM', 'NAESUN', '');

      gsCIDConnectIP := '';
      xcEdtCidSvrIP.Caption := '';

			if sIPAutoFind = '' then
			begin
				ln_envFile.WriteString('CID_COMM', 'CIDSERVERIPFIND', 'N');
				sIPAutoFind := 'N';
			end;
			gsCidVersion := ''; // CAT:신버전, OLD:구버전
			// CID 서버에 대한 기본 포트 설정을 한다.
			CatAgentPortSet('OLD');

      // CID XE 버전 체크
			if (sCidAuto = 'Y') then
			begin
				if CidXEServerCheck(sIP, sNaeSun)  then
				begin
					gsCidVersion := 'CXE';
				end	else
				begin
					if ln_envFile.ReadString('CID_COMM', 'CID_SELSVRUSE', 'Y') = 'Y' then
					begin
						sIp := ln_envFile.ReadString('CID_COMM', 'CID_SELSVRIP', '');
						if (sIp <> '') and (CidXEServerCheck(sIp, sNaeSun)) then
						begin
							gsCidVersion := 'CXE';
						end
					end; 
				end;
			end else
			if sCidAuto = 'N' then
			begin
				if ln_envFile.ReadString('CID_COMM', 'CID_SELSVRUSE', 'Y') = 'Y' then
				begin
					if GS_EnvFile.ReadString('CID_COMM', 'CID_SELSVRIP', '') <> '' then
					begin
						sCidAuto := ln_envFile.ReadString('CID_COMM', 'CID_SELSVRUSE', 'N');
						sIp := GS_EnvFile.ReadString('CID_COMM', 'CID_SELSVRIP', '');
						xcEdtCidSvrIP.Caption := '연결 IP - ' + sIP;
						if CidXEServerCheck(sIP, sNaeSun) then
						begin
							gsCidVersion := 'CXE';
						end
					end;
				end;
			end	else
			begin
        tmr_xeCID_check.Enabled := False;
        xeCID.Active := False;
      end;

      if (sCidAuto = 'Y') And ( gsCidVersion <> 'CXE' ) then
      begin //and (Copy(Trim(GT_USERIF.IP),1,3) <> '192') then begin  // CID 사용여부 체크.
        if (Length(Trim(sIp)) > 6) and (Length(sNaeSun) > 0) then
        begin // IP, 내선 정보가 있으면 버전 체크를 한다.
          gpsIdentificationIP := Trim(sIp); // 검증 할 IP를 입력 한다.
          gpsFindMothod := 'CHECK';

          if gsCidVersion = 'CAT' then
          begin // CAT:신버전, OLD:구버전
            GT_CAT_PORT.InboundSvrIP := Trim(sIp);
            // CID 서버에 접속할 포트 설정을 한다.   sGB : CAT.기본 구버전 포트로 설정.   OLD.신버전 CAT.exe 포트로 설정.
            CatAgentPortSet('CAT');
            ln_envFile.WriteString('CID_COMM', 'CIDVERSION', 'CAT');
//            if sSelSvr = '1' then
//              ln_envFile.WriteString('CID_COMM', 'CID_IP', Trim(sIp))
//            else
//              ln_envFile.WriteString('CID_COMM', 'CID_IP2', Trim(sIp));
          end;
        end;

        if (GS_LOGIN_CID_AUTOFIND_YN = True) and (sIPAutoFind = 'Y') and (gsCidVersion <> 'CAT') then
        begin // CID Server IP Auto Find.
          gpsIdentificationIP := ''; // 검증 할 IP를 입력 한다.
          gpsFindMothod := 'FIND';

          if Length(GT_CAT_PORT.InboundSvrIP) > 6 then
          begin
            // CID 서버에 접속할 포트 설정을 한다.   sGB : CAT.기본 구버전 포트로 설정.   OLD.신버전 CAT.exe 포트로 설정.
            CatAgentPortSet('CAT');
            ln_envFile.WriteString('CID_COMM', 'CIDVERSION', 'CAT');
//            if sSelSvr = '1' then
//              ln_envFile.WriteString('CID_COMM', 'CID_IP', GT_CAT_PORT.InboundSvrIP)
//            else
//              ln_envFile.WriteString('CID_COMM', 'CID_IP2', GT_CAT_PORT.InboundSvrIP);
          end;
        end else
        if (gsCidVersion <> 'CAT') then
        begin
          gsCidVersion := 'OLD';
        end;
      end else
      begin
        if gsCidVersion <> 'CXE' then gsCidVersion := 'OLD';
      end;
    finally
      FreeAndNil(ln_envfile);
      if gsCidVersion = '' then
        gsCidVersion := 'OLD';
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.CidXEServerCheck( sIp, sNaesun : String ) : Boolean;
Var iCnt, i : Integer;
    ss_SendText : String;
begin
  Result := False;

	GT_CIDINFO.Win10CIDXE_YN := GS_EnvFile.ReadBool ('CID_COMM', 'WIN10_CIDXE_USE', False);

  try
    if GT_CIDINFO.Win10CIDXE_YN then
    begin
      if idXECID.Connected then
      begin
        try
          IdXECID.Disconnect;
        except
        end;
      end;
      idXECID.Port := 9497;
      idXECID.Host := sIP;

   		i := 0;
      while not idXECID.Connected do
      begin
        if i > 15 then
        begin
          try
            IdXECID.Disconnect;
          except
          end;
          Exit;
        end;
        if btnSvrDisConn.Tag = 1 then Exit;
        Application.ProcessMessages;
        Sleep(300);

        Log(Format('IXE try Connect [%s]',[IdXECID.Host]), HEARTLOGPATHFILE);
        idXECID.Connect;
        inc(i);
      end;

  		iCnt := 0;
  		while ((iCnt < 15) and (idXECID.Connected = False)) do
      begin
        if btnSvrDisConn.Tag = 1 then Exit;
        Application.ProcessMessages;
        Sleep(200);
        Inc(iCnt);
      end;
      ss_SendText := CTIXE_MakeLoginStruct(sNaesun);

      if idXECID.Connected then
      begin
        gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
        iCnt := 0;
        idXECID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
        SetDebugeWrite_CID('11470 tmr_xeCID_Login : ' + ss_SendText);

        if gsCIDEnCoding = 'enUTF8' then IdXECID.IOHandler.WriteLn(ss_SendText + #13#10, enUTF8)
                                    else IdXECID.IOHandler.WriteLn(ss_SendText + #13#10);

        while ((iCnt < 16) and (idXECID.Tag = 77)) do
        begin
          if btnSvrDisConn.Tag = 1 then Exit;
          Application.ProcessMessages;
          // CIDServer 로 부터 연결성공 전문 받을때까지 대기한다.
          Sleep(200);
          Inc(iCnt);
        end;

        if ( IdUDPCidRecvServer.Tag = 0 ) And ( not IdUDPCidRecvServer.Active ) then
        begin
          IdUDPCidRecvServer.DefaultPort := 25376;
          IdUDPCidRecvServer.Active := True;
        end;

        CTIXE_Check_Save(gsCIDMessage);

        if (gXeRecvHeader.sType = T_LOGIN_RESPONSE) then Result := True;
      end;
    end else
    begin
      xeCID.Close;
      xeCID.Port := 9457;
      xeCID.Host := sIP;
      Log(Format('CID try Connect [%s]',[xeCID.Host]), HEARTLOGPATHFILE);

      xeCID.Active := True;
      iCnt := 0;
      while ((iCnt < 15) and (xeCID.Socket.Connected = False)) do
      begin
        if btnSvrDisConn.Tag = 1 then Exit;
        Application.ProcessMessages;
        Sleep(200);
        Inc(iCnt);
      end;
      ss_SendText := CTIXE_MakeLoginStruct(sNaesun);

      if xeCID.Socket.Connected = True then
      begin
        gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
        iCnt := 0;
        xeCID.Tag := 77; // 데이터 받았는지 체크위해 초기화 한다.
        SetDebugeWrite_CID('11470 tmr_xeCID_Login : ' + ss_SendText);
        xeCID.Socket.SendText(ss_SendText);
        while ((iCnt < 16) and (xeCID.Tag = 77)) do
        begin
          if btnSvrDisConn.Tag = 1 then Exit;
          Application.ProcessMessages;
          // CIDServer 로 부터 연결성공 전문 받을때까지 대기한다.
          Sleep(200);
          Inc(iCnt);
        end;

        if ( IdUDPCidRecvServer.Tag = 0 ) And ( not IdUDPCidRecvServer.Active ) then
        begin
          IdUDPCidRecvServer.DefaultPort := 25376;
          IdUDPCidRecvServer.Active := True;
        end;

        CTIXE_Check_Save(gsCIDMessage);

        if (gXeRecvHeader.sType = T_LOGIN_RESPONSE) then Result := True;
      end;
    end;
  except
  end;
end;

procedure TFrm_Main.curRateKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Ord(Key) = VK_RETURN then
  begin
    if (curRate.Value > 0) and (curRate.Value < 1000) then
    begin
      curRate.Value := curRate.Value * 1000;
    end;

    if btnRateAnswer.CanFocus then btnRateAnswer.Click;
  end;
end;

procedure TFrm_Main.curRatePropertiesChange(Sender: TObject);
begin
  if lblRateA.Tag = 0 then
  begin
    LbmeoBigo.Caption := Format('[%s]받으세요!', [FormatFloat('#,', curRate.Value)]);
  end else
  if lblRateA.Tag = curRate.Value then
  begin
    LbmeoBigo.Caption := '딱! 맞아요! 그대로 받으세요!';
  end else
  if lblRateA.Tag > curRate.Value then
  begin
    LbmeoBigo.Caption := Format('[%s]이면 적당해요!', [FormatFloat('#,', curRate.Value)]);
  end else
  if lblRateA.Tag < curRate.Value then
  begin
    LbmeoBigo.Caption := Format('해당지역은 [%s]으로 받아야 해요!', [FormatFloat('#,', curRate.Value)]);
  end;
end;

function TFrm_Main.func_search_hdNo(sBrNo: string): string;
var
  i: Integer;
begin
  result := '';
  for i := 0 to GT_BR_KN_CNT do
  begin
    //  이부분에 지사별 대표번호 가져오는 로직 추가 할것.[차후에 버전 업그래이드 하면서 추가 할것.]
    if sBrNo = GSL_HD_LIST[i, 0] then
    begin
      Result := GSL_HD_LIST[i, 5];
      Break;
    end;
  end;
end;

function TFrm_Main.func_sysdate: string;
var
  ls_TxLoad, rv_str: string;
  ls_rxxml: String;
  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  ls_Msg_Err: string;
  ls_Rcrd: TStringList;
  ls_ClientKey: string;
  s: string;
  slReceive: TStringList;
  ErrCode: integer;
begin
  try
    Result := '';

		ls_TxLoad := GTx_UnitXmlLoad('SYSDATETIME.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'SYSDATETIME', [rfReplaceAll]);

    Screen.Cursor := crHandPoint;
    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if trim(rv_str) <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          xdom := ComsDomDocument.Create;
          try
            if not xdom.loadXML(ls_rxxml) then
            begin
              Screen.Cursor := crDefault;
              Exit;
            end;
            ls_ClientKey := GetXmlClientKey(ls_rxxml);

            if ls_ClientKey = 'SYSDATETIME' then
            begin
              ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
              if ('0000' = ls_Msg_Err) then
              begin
                lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data');
                ls_Rcrd := TStringList.Create;
                try
                  GetTextSeperationEx('│', lst_Result.item[0].attributes.getNamedItem('ServerDatetime').Text, ls_Rcrd);
                  s := ls_Rcrd[0];
                finally
                  ls_Rcrd.Free;
                end;
                s := StringReplace(s, ' ', '', [rfReplaceAll]);
                s := StringReplace(s, '-', '', [rfReplaceAll]);
                s := StringReplace(s, ':', '', [rfReplaceAll]);
                Result := s;
              end else
              begin
                GMessagebox(ls_Msg_Err, CDMSE);
              end;
            end;
          finally
            xdom := Nil;
          end;
        end;
      end;
    finally
      Frm_Flash.Hide;
      FreeAndNil(slReceive);
      Screen.Cursor := crDefault;
    end;
  except
    on e: exception do
    begin
      ls_TxLoad := 'frmMain[func_sysdate]:' + e.Message;
      Result := FormatDateTime('YYYYMMDDHHNNSS', Now);
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.img2Click(Sender: TObject);
begin
	PnlHelp.Left := 15;
	PnlHelp.Top := 90;
  PnlHelp.BringToFront;
	PnlHelp.Visible := True;
end;

procedure TFrm_Main.imgCIDClick(Sender: TObject);
begin
  SetDebugeWrite('Main.imgCIDClick');
  try
    procMenuCreateActive(1414, 'CID설정');
    if Assigned(Frm_JON51) then
      if TCK_USER_PER.BTM_MENUSCH = '1' then Frm_JON51.Menu_Use_Mark('ADD', TMenuItem(Sender).Tag);
	except on E: Exception do
    Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.ipwCIDConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  SetDebugeWrite('Main.ipwCIDConnect');
  try
    Log('CidConnect : ', LOGDATAPATHFILE);

		iCidConnectErrCnt := 0;

    if GT_CID_NEW = '1' then
    begin  // CID서버 신버전 연결됨
      pSetCIDState(0);
    end else
    begin  // CID서버 구버전 연결됨
      pSetCIDState(2);
    end;

    if ( GT_OCX = 'NKT'  ) then GT_NKTXE := 'NKT' else
    if ( GT_OCX = 'SSIO' ) then GT_NKTXE := 'NKT' else
    if ( GT_OCX = 'SSIT' ) then GT_NKTXE := 'NKT';
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.ipwCIDDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  SetDebugeWrite('Main.ipwCIDDisconnect');
  try
    if tmr_CID_check.Tag = 20 then Exit;

    Log('CidDisConnect : ', LOGDATAPATHFILE);

    if GT_CID_NEW = '1' then
    begin  // CID서버 신버전 연결 종료됨
      pSetCIDState(1);
      SetDebugeWrite( 'ipwCID - DisConnect 11744');
    end else
    begin  // CID서버 구버전 연결 종료됨
      pSetCIDState(3);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.ipwCIDError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
	SetDebugeWrite('Main.ipwCIDError - ' + IntToStr(ErrorCode));
	ErrorCode := 0;
	try
		Inc(iCidConnectErrCnt);
    if iCidConnectErrCnt > 5 then
    begin
      GS_EnvFile.WriteString('CID_COMM', 'CID_AUTO', 'N');
      tmr_CID_check.Enabled := False;
			if iCidConnectErrCnt = 6 then
      begin
        ShowMessage('CID서버 연결이 3회 이상 실패하였습니다.' + #10#13 +
                    'CID서버를 다시 연결하시려면 CID설정에서 서버설정값 확인 후 재 연결 바랍니다');
      end;

      ed_Number.Enabled := True; // 내선
      ed_CID_Ip1.Enabled := True; // IP
      ed_CID_Ip2.Enabled := True; // IP
      rchk_Use.Enabled := True; // CID사용 여부
      btnSvrConn.Enabled := True; // 연결버튼 활성화.
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.ipwCIDRead(Sender: TObject; Socket: TCustomWinSocket);
begin
  SetDebugeWrite('Main.ipwCIDRead');

  gsCIDMessage := Socket.ReceiveText; // 전문읽기.

//  cxMemo1.Lines.Add(GetDateTime('yyyy-mm-dd hh:mm:ss:zzz') + ' - CidRead : ' + gsCIDMessage);
//  Log('CidRead : ' + gsCIDMessage, LOGDATAPATHFILE);
  Log('CidRead : ', LOGDATAPATHFILE);

  if ipwCID.Tag = 77 then
  begin
    ipwCID.Tag := 0; // 데이터 받았다는 확인을 한다.
    Exit;
  end;

  if gsCIDMessage = '' then Exit;

  gsCIDMessage := StringReplace(gsCIDMessage, #13, '', [rfReplaceAll]);

  // 오른쪽에서부터 자르는 부분은 TCP자료가 밀려서 한꺼번에 들어올수 있기때문에 맨 마지막 CID자료만 추출하기 위해서
  if gsCidVersion = 'CXE' then
		gsCIDMessage := System.StrUtils.RightStr(gsCIDMessage, 63)
  else
		gsCIDMessage := System.StrUtils.RightStr(gsCIDMessage, 93);

  // CID 전문 받은걸 처리한다. ------------------------------------------------
  if gsCIDMsgFront <> gsCIDMessage then
  begin
		gsCIDMsgFront := gsCIDMessage;
    try
      tmr_JoinView.Tag := 100;
      tmr_JoinView.Enabled := True;
      giCIDCheckCnt := 0;
    except on E: Exception do
      Assert(False, E.Message);
    end;
  end;
end;

function TFrm_Main.IsRun(sFindFile: string): Boolean;
var
peList : TProcessEntry32;
hL, hP : THandle;
begin
  SetDebugeWrite('Main.IsRun');
  try
    Result := False;
    peList.dwSize := SizeOf(TProcessEntry32);
    hL := CreateToolHelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if Process32First(hL, peList) then
    begin
      repeat
        if CompareText(peList.szExeFile, sFindFile) = 0 then
        begin
          hP := OpenProcess(PROCESS_ALL_ACCESS, TRUE, peList.th32ProcessID);
          TerminateProcess(hP, 0);
          Result := True;
        end;
      until not Process32Next(hL, peList);
    end;
    CloseHandle(hL);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.lbl2MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  SetDebugeWrite('Main.lbl2MouseMove');
	ReleaseCapture;
  PostMessage(self.Handle, WM_SYSCOMMAND, $F012, 0);
end;

procedure TFrm_Main.LbmeoBigoClick(Sender: TObject);
begin
  SetDebugeWrite('Main.LbmeoBigoClick');
  edtMemo.SetFocus;
end;

procedure TFrm_Main.lbWkConnectBoxClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkConnectBoxClick');
	try
    btnWkConnect.Click;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.lbWkConnectClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkConnectClick');
  btnWkConnect.Click;
end;

procedure TFrm_Main.lbWkConnect_orderBoxClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkConnect_orderBoxClick');
  btnWkConnect_Order.Click;
end;

procedure TFrm_Main.lbWkConnect_orderClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkConnect_orderClick');
	try
    btnWkConnect_Order.Click;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.lbWknormalcyBoxClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWknormalcyBoxClick');
  btnWknormalcy.Click;
end;

procedure TFrm_Main.lbWknormalcyClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWknormalcyClick');
  try
    btnWknormalcy.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.lbWkNoTodayBoxClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkNoTodayBoxClick');
  btnWkNoToday.Click;
end;

procedure TFrm_Main.lbWkNoTodayClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkNoTodayClick');
  try
    btnWkNoToday.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.lbWkRunBoxClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkRunBoxClick');
  btnWkRun.Click;
end;

procedure TFrm_Main.lbWkRunClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkRunClick');
  try
    btnWkRun.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.lbWkTodayBoxClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkTodayBoxClick');
  try
    btnWkToday.Click;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.lbWkTodayClick(Sender: TObject);
begin
  SetDebugeWrite('Main.lbWkTodayClick');
  btnWkToday.Click;
end;

procedure TFrm_Main.lb_Becha0Click(Sender: TObject);
var
	s: string;
begin
  SetDebugeWrite('Main.lb_Becha0Click');
  try
  	ColorDialog1.Color := TPanel(Sender).Color;
  	if (ColorDialog1.Execute) then
  	begin
  		s := 'Becha' + IntToStr(TPanel(Sender).Tag);
  		SetIniColor(ENVPATHFILE, 'BechaStatus', s, ColorToString(ColorDialog1.Color));
  	end;
  	TcxLabel(Sender).Style.Color := ColorDialog1.Color;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.lst_BRListDblClick(Sender: TObject);
var slTmp : TStringList;
begin
	SetDebugeWrite('Frm_Main.lst_BRListDblClick');
	slTmp := TStringList.Create;
	Try
		slTmp.Delimiter     := '|';
		slTmp.DelimitedText := searchBRlist[lst_BRList.ItemIndex];
		if slTmp.Count = 3 then
			SetTree_ListItem(slTmp[0], slTmp[1], StrToInt(slTmp[2]));
		lst_BRList.Visible := False;
	Finally
		slTmp.Free;
	End;
end;

procedure TFrm_Main.lst_BRListExit(Sender: TObject);
begin
  SetDebugeWrite('TFrm_Main.lst_BRListExit');
	lst_BRList.Visible := False;
end;

procedure TFrm_Main.lst_BRListKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var slTmp : TStringList;
begin
	SetDebugeWrite('TFrm_Main.lst_BRListKeyDown');
	if key = vk_Return then
	begin
		if lst_BRList.ItemIndex < 0 then exit;

		slTmp := TStringList.Create;
		Try
			slTmp.Delimiter     := '|';
			slTmp.DelimitedText := searchBRlist[lst_BRList.ItemIndex];
			if slTmp.Count = 3 then
				SetTree_ListItem(slTmp[0], slTmp[1], StrToInt(slTmp[2]));
			lst_BRList.Visible := False;
		Finally
			slTmp.Free;
		End;
	end else
  if Key = VK_UP then
  begin
		if lst_BRlist.Selected[0] then edt_BrName.SetFocus;
  end;
end;

procedure TFrm_Main.MakeSMS(AOrder: TOrderTotal);
  procedure _SendSMS(AOrder1: TOrderTotal);
  var
    i, j : integer;
    Msg, ls_TxLoad, rv_str, sTime: string;
    ls_rxxml : String;
    StrList, ls_Rcrd, ls_Rcrd1: TStringList;
    ErrCode : integer;
    sMessage, rMSG, sysdate : string;
  begin
    sysdate := func_sysdate;
    sysdate := copy(sysdate,7,2) + '일 ' + copy(sysdate,9,2) + ':' + copy(sysdate,11,2);
    if GS_ALLBR_CHK then
    begin
      try
        sTime := '';
        sMessage := GS_MMS_STR;
        sMessage := StringReplace(sMessage, '<$본사명$>',   GS_HEAD_NAME      , [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$지사명$>',   AOrder1.BrNM       , [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$대표번호$>', AOrder1.BrTel      ,  [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$총건수$>',   AOrder1.BrTOT      , [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$접수$>',     AOrder1.BrOrder    , [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$대기$>',     AOrder1.BrStandby  , [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$운행$>',     AOrder1.BrRun      , [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$완료$>',     AOrder1.Br_Complete, [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$완료율$>',   AOrder1.Br_CompletePer, [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$취소$>',     AOrder1.BrCancel   , [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$취소율$>',   AOrder1.BrCancelPer, [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$문의$>',     AOrder1.BrINQUIRE  , [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$예약$>',     AOrder1.BrBooking  , [rfReplaceall]);
        sMessage := StringReplace(sMessage, '<$일자시간$>', sysdate, [rfReplaceall]);

        Msg := StringReplace(sMessage, #13#10, #10, [rfReplaceAll]);

        if length(Msg) <= 39 then
        begin

          ls_TxLoad := GTx_UnitXmlLoad('SMS02.XML');
          ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString',     En_Coding(GT_USERIF.ID), [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString',  VERSIONINFO, [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString',  'WSMS0001', [rfReplaceAll]);

          ls_TxLoad := StringReplace(ls_TxLoad, 'ReceiverString',   En_Coding(GS_RECEIVER_TEL), [rfReplaceAll]);
          if GS_SEND_TEL = '' then
            ls_TxLoad := StringReplace(ls_TxLoad, 'SenderString',     En_Coding(AOrder1.BrTel), [rfReplaceAll])
          else
            ls_TxLoad := StringReplace(ls_TxLoad, 'SenderString',     En_Coding(GS_SEND_TEL), [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'MessageString',    En_Coding(Msg), [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'ReservationString', sTime, [rfReplaceAll]);
					ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', '', [rfReplaceAll]);
					ls_TxLoad := StringReplace(ls_TxLoad, 'WkSabunString', '', [rfReplaceAll]);

          StrList := TStringList.Create;
          try
            if dm.SendSock(ls_TxLoad, StrList, ErrCode, False) then
            begin
              rv_str := StrList[0];
              if rv_str <> '' then
              begin
                ls_rxxml := rv_str;
                Application.ProcessMessages;
                proc_smsRead(ls_rxxml);
              end;
            end;
          finally
            Frm_Flash.Hide;
            StrList.Free;
          end;
        end else
        begin
          for j := 0 to (length(Msg) div 40) do
          begin
            if j = 0 then
              rMsg := '1)' + copy(Msg,1, 39)
            else
              rMsg := IntToStr(j+1) + ')' + copy(Msg,(j * 39) + 1, 39);

            ls_TxLoad := GTx_UnitXmlLoad('SMS02.XML');
            ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString',     En_Coding(GT_USERIF.ID), [rfReplaceAll]);
            ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString',  VERSIONINFO, [rfReplaceAll]);
            ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString',  'WSMS0001', [rfReplaceAll]);

            ls_TxLoad := StringReplace(ls_TxLoad, 'ReceiverString',   En_Coding(GS_RECEIVER_TEL), [rfReplaceAll]);
            if GS_SEND_TEL = '' then
              ls_TxLoad := StringReplace(ls_TxLoad, 'SenderString',     En_Coding(AOrder1.BrTel), [rfReplaceAll])
            else
              ls_TxLoad := StringReplace(ls_TxLoad, 'SenderString',     En_Coding(GS_SEND_TEL), [rfReplaceAll]);
            ls_TxLoad := StringReplace(ls_TxLoad, 'MessageString',    En_Coding(rMsg), [rfReplaceAll]);
            ls_TxLoad := StringReplace(ls_TxLoad, 'ReservationString', sTime, [rfReplaceAll]);
						ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', '', [rfReplaceAll]);
						ls_TxLoad := StringReplace(ls_TxLoad, 'WkSabunString', '', [rfReplaceAll]);

            StrList := TStringList.Create;
            try
              if dm.SendSock(ls_TxLoad, StrList, ErrCode, False) then
              begin
                rv_str := StrList[0];
                if rv_str <> '' then
                begin
                  ls_rxxml := rv_str;
                  Application.ProcessMessages;
                  proc_smsRead(ls_rxxml);
                end;
              end;
            finally
              Frm_Flash.Hide;
              StrList.Free;
            end;
          end;
        end
      except
      end;
    end else
    begin
      ls_Rcrd := TStringList.Create;
      ls_Rcrd1 := TStringList.Create;
      GetTextSeperationEx('│', GS_BRNO_LIST, ls_Rcrd);
      GetTextSeperationEx('│', GS_BRTEL_LIST, ls_Rcrd1);

      for i := 0 to ls_Rcrd.count - 1 do
      begin
        if (ls_Rcrd[i] = AOrder1.BrNO) and (ls_Rcrd1[i] = AOrder1.BrTel) then
        begin
          try
            sTime := '';
            sMessage := GS_MMS_STR;
            sMessage := StringReplace(sMessage, '<$본사명$>',   GS_HEAD_NAME      , [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$지사명$>',   AOrder1.BrNM       , [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$대표번호$>', AOrder1.BrTel      ,  [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$총건수$>',   AOrder1.BrTOT      , [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$접수$>',     AOrder1.BrOrder    , [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$대기$>',     AOrder1.BrStandby  , [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$운행$>',     AOrder1.BrRun      , [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$완료$>',     AOrder1.Br_Complete, [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$완료율$>',   AOrder1.Br_CompletePer, [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$취소$>',     AOrder1.BrCancel   , [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$취소율$>',   AOrder1.BrCancelPer, [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$문의$>',     AOrder1.BrINQUIRE  , [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$예약$>',     AOrder1.BrBooking  , [rfReplaceall]);
            sMessage := StringReplace(sMessage, '<$일자시간$>', sysdate, [rfReplaceall]);

            Msg := StringReplace(sMessage, #13#10, #10, [rfReplaceAll]);

            if length(Msg) <= 39 then
            begin

              ls_TxLoad := GTx_UnitXmlLoad('SMS02.XML');
              ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString',     En_Coding(GT_USERIF.ID), [rfReplaceAll]);
              ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString',  VERSIONINFO, [rfReplaceAll]);
              ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString',  'WSMS0001', [rfReplaceAll]);

              ls_TxLoad := StringReplace(ls_TxLoad, 'ReceiverString',   En_Coding(GS_RECEIVER_TEL), [rfReplaceAll]);
              if GS_SEND_TEL = '' then
                ls_TxLoad := StringReplace(ls_TxLoad, 'SenderString',     En_Coding(AOrder1.BrTel), [rfReplaceAll])
              else
                ls_TxLoad := StringReplace(ls_TxLoad, 'SenderString',     En_Coding(GS_SEND_TEL), [rfReplaceAll]);
              ls_TxLoad := StringReplace(ls_TxLoad, 'MessageString',    En_Coding(Msg), [rfReplaceAll]);
              ls_TxLoad := StringReplace(ls_TxLoad, 'ReservationString', sTime, [rfReplaceAll]);
							ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', '', [rfReplaceAll]);
							ls_TxLoad := StringReplace(ls_TxLoad, 'WkSabunString', '', [rfReplaceAll]);

              StrList := TStringList.Create;
              try
                if dm.SendSock(ls_TxLoad, StrList, ErrCode, False) then
                begin
                  rv_str := StrList[0];
                  if rv_str <> '' then
                  begin
                    ls_rxxml := rv_str;
                    Application.ProcessMessages;
                    proc_smsRead(ls_rxxml);
                  end;
                end;
              finally
                Frm_Flash.Hide;
                StrList.Free;
              end;
            end else
            begin
              for j := 0 to (length(Msg) div 40) do
              begin
                if j = 0 then
                  rMsg := '1)' + copy(Msg,1, 39)
                else
                  rMsg := IntToStr(j+1) + ')' + copy(Msg,(j * 39) + 1, 39);

                ls_TxLoad := GTx_UnitXmlLoad('SMS02.XML');
                ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString',     En_Coding(GT_USERIF.ID), [rfReplaceAll]);
                ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString',  VERSIONINFO, [rfReplaceAll]);
                ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString',  'WSMS0001', [rfReplaceAll]);

                ls_TxLoad := StringReplace(ls_TxLoad, 'ReceiverString',   En_Coding(GS_RECEIVER_TEL), [rfReplaceAll]);
                if GS_SEND_TEL = '' then
                  ls_TxLoad := StringReplace(ls_TxLoad, 'SenderString',     En_Coding(AOrder1.BrTel), [rfReplaceAll])
                else
                  ls_TxLoad := StringReplace(ls_TxLoad, 'SenderString',     En_Coding(GS_SEND_TEL), [rfReplaceAll]);
                ls_TxLoad := StringReplace(ls_TxLoad, 'MessageString',    En_Coding(rMsg), [rfReplaceAll]);
                ls_TxLoad := StringReplace(ls_TxLoad, 'ReservationString', sTime, [rfReplaceAll]);
								ls_TxLoad := StringReplace(ls_TxLoad, 'ConfSlipString', '', [rfReplaceAll]);
								ls_TxLoad := StringReplace(ls_TxLoad, 'WkSabunString', '', [rfReplaceAll]);

                StrList := TStringList.Create;
                try
                  if dm.SendSock(ls_TxLoad, StrList, ErrCode, False) then
                  begin
                    rv_str := StrList[0];
                    if rv_str <> '' then
                    begin
                      ls_rxxml := rv_str;
                      Application.ProcessMessages;
                      proc_smsRead(ls_rxxml);
                    end;
                  end;
                finally
                  Frm_Flash.Hide;
                  StrList.Free;
                end;
              end;
            end
          except
          end;
        end;
      end;
      FreeAndNil(ls_Rcrd);
      FreeAndNil(ls_Rcrd1);
    end;
  end;
begin
  SetDebugeWrite('Main.MakeSMS');
  try
    if not GS_TOTAL_CHK and not GS_ORDERT_CHK and not GS_CANCELT_CHK then  _SendSMS(AOrder);

    if GS_TOTAL_CHK and (strtoint(GS_TOTAL_CNT) <= strtoint(AOrder.BrTOT))     and
       not GS_ORDERT_CHK                                                       and
       not GS_CANCELT_CHK
    then  _SendSMS(AOrder);

    if GS_TOTAL_CHK  and (strtoint(GS_TOTAL_CNT)  <= strtoint(AOrder.BrTOT))   and
       GS_ORDERT_CHK and (strtoint(GS_ORDERT_CNT) <= strtoint(AOrder.BrOrder)) and
       not GS_CANCELT_CHK
    then  _SendSMS(AOrder);

    if GS_TOTAL_CHK   and (strtoint(GS_TOTAL_CNT)   <= strtoint(AOrder.BrTOT))       and
       GS_ORDERT_CHK  and (strtoint(GS_ORDERT_CNT)  <= strtoint(AOrder.BrOrder))     and
       GS_CANCELT_CHK and (strtoint(GS_CANCELT_PER) <= strtoint(AOrder.BrCancelPer))
    then  _SendSMS(AOrder);

    if GS_TOTAL_CHK   and (strtoint(GS_TOTAL_CNT)   <= strtoint(AOrder.BrTOT))       and
       not GS_ORDERT_CHK                                                             and
       GS_CANCELT_CHK and (strtoint(GS_CANCELT_PER) <= strtoint(AOrder.BrCancelPer))
    then  _SendSMS(AOrder);

    if not GS_TOTAL_CHK                                                              and
       GS_ORDERT_CHK  and (strtoint(GS_ORDERT_CNT)  <= strtoint(AOrder.BrOrder))     and
       GS_CANCELT_CHK and (strtoint(GS_CANCELT_PER) <= strtoint(AOrder.BrCancelPer))
    then  _SendSMS(AOrder);

    if not GS_TOTAL_CHK                                                              and
       GS_ORDERT_CHK  and (strtoint(GS_ORDERT_CNT)  <= strtoint(AOrder.BrOrder))     and
       not GS_CANCELT_CHK
    then  _SendSMS(AOrder);

    if not GS_TOTAL_CHK                                                              and
       not GS_ORDERT_CHK                                                             and
       GS_CANCELT_CHK and (strtoint(GS_CANCELT_PER) <= strtoint(AOrder.BrCancelPer))
    then  _SendSMS(AOrder);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.Menu307Click(Sender: TObject);
begin
	SetDebugeWrite('Main.Menu307Click');
  try
    procMenuCreateActive(TMenuItem(Sender).Tag, TMenuItem(Sender).Caption);
    if Assigned(Frm_JON51) then
      if TCK_USER_PER.BTM_MENUSCH = '1' then Frm_JON51.Menu_Use_Mark('ADD', TMenuItem(Sender).Tag);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.MenuItem2Click(Sender: TObject);
begin
	Proc_KDWkBeacha;
end;

procedure TFrm_Main.MenuItem6Click(Sender: TObject);
begin
	SetDebugeWrite('Main.MenuItem6Click');
  try
    case TMenuItem(Sender).Tag of
		0:
      begin
        dtBrCallSt.Date := StrToDate(Date8to10(StartDateTime('yyyymmdd')));
        dtBrCallEd.Date := dtBrCallSt.Date + 1;
      end;
    1:
      begin
        dtBrCallSt.Date := StrToDate(Date8to10(StartDateTime('yyyymmdd'))) - 1;
        dtBrCallEd.Date := dtBrCallSt.Date + 1;
      end;
    2:
      begin
        dtBrCallSt.Date := StrToDate(Date8to10(StartDateTime('yyyymmdd'))) - 7;
        dtBrCallEd.Date := dtBrCallSt.Date + 7;
      end;
    3:
      begin
        dtBrCallSt.Date := StrToDate(Date8to10(StartDateTime('yyyymmdd'))) - 31;
        dtBrCallEd.Date := dtBrCallSt.Date + 31;
      end;
    4:
      begin
        dtBrCallSt.Date := StartOfTheMonth(Now);
        dtBrCallEd.Date := EndOfTheMonth(Now);
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.MessageLoop(var Msg: TMsg; var Handled: Boolean);
const
  DialogKeys: set of Byte = [VK_TAB, VK_RETURN, VK_DELETE, VK_EXECUTE,
  VK_ESCAPE, VK_CANCEL, VK_UP, VK_DOWN, VK_LEFT, VK_RIGHT, VK_F10];
  MSJVMClassName = 'MSAWT_Comp_Class'; // for Java Applets
var
  iOIPAO: IOleInPlaceActiveObject;
  Dispatch: IDispatch;
  Str: string;
begin
  try
    if (WebBrowser1 <> nil) and ((Msg.Message = WM_KEYDOWN) or (Msg.Message = WM_KEYUP)) and (Msg.wParam in DialogKeys) and
       (PnlMainGongJi.Parent <> nil)  then
    begin
      Handled := IsDialogMessage(WebBrowser1.Handle, msg) = True;
      SetLength(Str, MAX_PATH);
      GetClassName(Msg.hwnd, PChar(Str), MAX_PATH);
      SetLength(Str, StrLen(PChar(Str)));
      if (Msg.wParam = VK_DELETE) and (Str = MSJVMClassName) then
      else
      if Handled then
        if FOleInPlaceActiveObject <> nil then
          FOleInPlaceActiveObject.TranslateAccelerator(Msg)
        else
        begin
          Dispatch := WebBrowser1.Application;
          if Dispatch <> nil then
          begin
            Dispatch.QueryInterface(IOleInPlaceActiveObject, iOIPAO);
            if iOIPAO <> nil then
              FOleInPlaceActiveObject := iOIPAO;
          end;
        end;
    end else
      Handled := False;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.MinimizeMe(Sender: TObject);
begin
  SetDebugeWrite('Main.MinimizeMe');
  bPrintYesNo := False;

{  UnRegisterHotKey(Handle, prntscrn);
  UnRegisterHotKey(Handle, Ctrlprntscrn);
  UnRegisterHotKey(Handle, Altprntscrn);}
end;

procedure TFrm_Main.mmo_CallListNeasunKeyPress(Sender: TObject; var Key: Char);
begin                  //line Feed, BackSpace, #22 crtl+v #24 cancel
  if key in ['0'..'9', '~', ',', #13, #8, #22, #24] then
  else
    key := #0;            
end;

procedure TFrm_Main.mniBrOrderColResetClick(Sender: TObject);
begin
  SetDebugeWrite('Main.mniBrOrderColResetClick');
  ResetGridSizeEnv(cxSgBrOrder, GS_EnvFile);
end;

procedure TFrm_Main.mniN4Click(Sender: TObject);
var
	ls_TxLoad, rv_str, sWkHp, sWkSabun : string;
  ls_rxxml: String;
  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  slReceive: TStringList;
	ErrCode, iWkSabun, iRow: integer;
begin
	SetDebugeWrite('Main.mniN4Click');
	iRow := tvWkConnect.DataController.FocusedRecordIndex;
	iWkSabun := tvWkConnect.GetColumnByFieldName('기사사번').Index;
	sWkSabun := tvWkConnect.DataController.GetValue(iRow, iWkSabun);
	try
    ls_TxLoad := GTx_UnitXmlLoad('C015.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString',     GT_USERIF.ID, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString',  VERSIONINFO, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString',  'HINT0003',[rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'GubunString',      '3', [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ParamString',      sWkSabun, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'Conf_slipString',  '', [rfReplaceAll]); //접수번호추가

		sWkHp := '';
		slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          try
            xdom := ComsDomDocument.Create;
            try
              if xdom.loadXML(ls_rxxml) then
              begin
                lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Accept');
                sWkHp := lst_Result.item[0].attributes.getNamedItem('Info3').Text
              end;
            finally
              xdom := Nil;
            end;
          except
          end;
        end;
      end;
		finally
      FreeAndNil(slReceive);
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;

	if sWkHp = '' then
  begin
    GMessagebox('기사님의 휴대폰 번호를 등록하세요', CDMSE);
    Exit;
  end;

  pCallingCID(sWkHp, GT_POSS_KEYNUM);
end;

procedure TFrm_Main.mniSMSAllClick(Sender: TObject);
var
	I, iTmp: Integer;
begin
	SetDebugeWrite('Frm_Main.mniSMSAllClick');
  try
		if (tvWkConnect.DataController.RecordCount = 0) then
		begin
			GMessagebox('접속기사가 없습니다.', CDMSE);
			Exit;
		end;
		iTmp := tvWkConnect.GetColumnByFieldName('휴대폰').Index;

		if Not Assigned(Frm_SMS01) Or (Frm_SMS01 = Nil) then Frm_SMS01 := TFrm_SMS01.Create(Nil);
		Frm_SMS01.mm_message.Text := '';
		Frm_SMS01.ed_send.Text := RemovePhone(GetBrOfficeTel(GT_USERIF.BR));
		Frm_SMS01.ls_sms.Items.Clear;
		for I := 0 to tvWkConnect.DataController.RecordCount - 1 do
			Frm_SMS01.ls_sms.Items.Add(RemovePhone(tvWkConnect.DataController.Values[I, iTmp]));

		iTmp := tvWkConnect.GetColumnByFieldName('기사사번').Index;

		if Not Assigned(Frm_SMS01) Or (Frm_SMS01 = Nil) then Frm_SMS01 := TFrm_SMS01.Create(Nil);
		Frm_SMS01.mm_message.Text := '';
		Frm_SMS01.ed_send.Text := RemovePhone(GetBrOfficeTel(GT_USERIF.BR));
		Frm_SMS01.edtReciveWKList.Clear;
		for I := 0 to tvWkConnect.DataController.RecordCount - 1 do
			Frm_SMS01.edtReciveWKList.Lines.Add(tvWkConnect.DataController.Values[I, iTmp]);

		Frm_SMS01.sSendKind := '';
		Frm_SMS01.rdo_SMS.visible := True;
		Frm_SMS01.rdo_PUSH.visible := True;
		if TMenuItem(Sender).Tag = 1 then
		begin
			Frm_SMS01.sSendKind := 'SMS';
			if Frm_SMS01.Showing then
			begin
				Frm_SMS01.rdo_SMS.checked := True;
			end
			else
				Frm_SMS01.Show;
		end	else
    if TMenuItem(Sender).Tag = 2 then
		begin
			Frm_SMS01.sSendKind := 'PUSH';
			if Frm_SMS01.Showing then
			begin
				Frm_SMS01.rdo_PUSH.checked := True;
			end
			else
				Frm_SMS01.Show;
		end;
	except on E: Exception do
		Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.mniWORKAllClick(Sender: TObject);
var
  ls_TxLoad, sNode, sSabun, sMsg : string;
  ls_rxxml: WideString;
  xdom: msDomDocument;
  lst_Node: IXMLDOMNodeList;
  slReceive: TStringList;
  i, iWkAttend, iWkSabun, iWkStatus, ErrCode, iCnt : integer;
begin
	if (tvWkConnect.DataController.RecordCount = 0) then
  begin
		GMessagebox('기사가 없습니다.', CDMSE);
		Exit;
	end;

	sMsg := '기사출근처리는 사용료와 관계가 있습니다.' + CRLF +
          '일괄출근 처리하시겠습니까?';
	if Application.MessageBox(PChar(sMsg), PChar(GS_APPNAME), MB_YESNO +	MB_ICONQUESTION + MB_DEFBUTTON1) = IDNO then Exit;

  try
    iWkAttend := tvWkConnect.GetColumnByFieldName('상태').Index;
    iWkSabun  := tvWkConnect.GetColumnByFieldName('기사사번').Index;
    iWkStatus := tvWkConnect.GetColumnByFieldName('기사상태').Index;
    iCnt := 0;
    for i := 0 to tvWkConnect.DataController.RecordCount - 1 do
    begin
  		if ( tvWkConnect.DataController.Values[i, iWkAttend] <> '미출근' ) Or
         ( tvWkConnect.DataController.Values[i, iWkStatus] <> '정상'   ) then Continue;

      sSabun := tvWkConnect.DataController.Values[i, iWkSabun];

      ls_rxxml := GTx_UnitXmlLoad('C012N1.XML');
      xdom := ComsDomDocument.Create;
      try
        if (not xdom.loadXML(ls_rxxml)) then
        begin
          Screen.Cursor := crDefault;
          ShowMessage('전문 Error입니다. 다시조회하여주십시요.');
          Exit;
        end;
        sNode := '/cdms/header/UserID';
        lst_Node := xdom.documentElement.selectNodes(sNode);
        lst_Node.item[0].attributes.getNamedItem('Value').Text := En_Coding(GT_USERIF.ID);
        sNode := '/cdms/header/ClientVer';
        lst_Node := xdom.documentElement.selectNodes(sNode);
        lst_Node.item[0].attributes.getNamedItem('Value').Text := VERSIONINFO;
        sNode := '/cdms/header/ClientKey';
        lst_Node := xdom.documentElement.selectNodes(sNode);
        lst_Node.item[0].attributes.getNamedItem('Value').Text := Self.Caption + '4';
        sNode := '/cdms/Service/Data/Driver';
        lst_Node := xdom.documentElement.selectNodes(sNode);

        lst_Node.item[0].attributes.getNamedItem('InSabun').Text := En_Coding(GT_USERIF.ID);
        lst_Node.item[0].attributes.getNamedItem('WkSabun').Text := En_Coding(sSabun);
        lst_Node.item[0].attributes.getNamedItem('WkStatus').Text := '';
        lst_Node.item[0].attributes.getNamedItem('Memo').Text := '';
        lst_Node.item[0].attributes.getNamedItem('WkAttend').Text := '01';  // 출근처리
        ls_TxLoad := '<?xml version="1.0" encoding="euc-kr"?>' + #13#10 + xDom.documentElement.xml;

        slReceive := TStringList.Create;
        try
          if dm.SendSock(ls_TxLoad, slReceive, ErrCode, false) then
          begin
            ls_rxxml := slReceive[0];
            if ls_rxxml <> '' then
            begin
              if not xdom.loadXML(ls_rxxml) then Exit;
              if ('0000' = GetXmlErrorCode(ls_rxxml)) then Inc(iCnt);
            end;
          end;
        finally
          Frm_Flash.Hide;
          FreeAndNil(slReceive);
        end;
      finally
        xdom := Nil;
      end;
    end;
    ShowMessage(Format('%d명 출근처리하였습니다', [iCnt]));
    proc_wkCount;
	except on E: Exception do
		Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.mw_login;
var
  ls_Url : string;
  UrlEncode_ID, UrlEncode_PW : string;
  asID, asPw, Base64_ID, Base64_PW : AnsiString;
begin
  SetDebugeWrite('Main.mw_login');
	try
    if TCK_USER_PER.JON_MainView = '1' then
    begin
      asID := GT_USERIF.ID;
      base64Encode(asID, Base64_ID);
      UrlEncode_ID := UrlEncode(Base64_ID);   //UrlEncode 2011.12.06 KHS

      if GT_USERIF.WOB <> '' then
      begin
        asPW := GT_USERIF.WOB;
        base64Encode(asPW, Base64_PW);
        UrlEncode_PW := UrlEncode(Base64_PW);   //UrlEncode 2011.12.06 KHS
        if GB_365System then
          GS_MAIN_URL_FORMAT := 'http://%s:%s/wonju365/autologin.asp?emp_id=%s&emp_pwd=%s'       // 원주365
        else if GB_CallLine then
          GS_MAIN_URL_FORMAT := 'http://%s:%s/call_line/autologin.asp?emp_id=%s&emp_pwd=%s'      // 콜라인
        else
          GS_MAIN_URL_FORMAT := 'http://%s:%s/new_web/autologin.asp?emp_id=%s&emp_pwd=%s';       // 2013.05.15 암호화로 인하여 URL변경
      end else
      begin
				asPW := GT_USERIF.HashPW;
        base64Encode(asPW, Base64_PW);
        UrlEncode_PW := UrlEncode(Base64_PW);   //UrlEncode 2011.12.06 KHS
        if GB_365System then
          GS_MAIN_URL_FORMAT := 'http://%s:%s/wonju365/login_ok_n2.asp?emp_id=%s&emp_pwd=%s'    // 원주365
        else if GB_CallLine then
          GS_MAIN_URL_FORMAT := 'http://%s:%s/call_line/login_ok_n2.asp?emp_id=%s&emp_pwd=%s'   // 콜라인
        else
          GS_MAIN_URL_FORMAT := 'http://%s:%s/new_web/login_ok_n2.asp?emp_id=%s&emp_pwd=%s';    // 2011.12.06 암호화로 인하여 URL변경
      end;

///////////////////////////////////////UrlEncode 후 base64Encode 적용/////////////////////////////

      // 대역대 별 도메인/IP 접속
      if Copy(SERVER_IP, 1, 2) = '58' then
        ls_URL := Format(GS_MAIN_URL_FORMAT, [GS_CDMS_URL, GS_CDMS_URLPORT, UrlEncode_ID, UrlEncode_PW])
      else if Copy(SERVER_IP, 1, 2) = '61' then
        ls_URL := Format(GS_MAIN_URL_FORMAT, [GS_CDMS_URL, GS_CDMS_URLPORT, UrlEncode_ID, UrlEncode_PW]) //20111123 KHS
      else
        ls_URL := Format(GS_MAIN_URL_FORMAT, [GS_CDMS_URL, GS_CDMS_URLPORT, UrlEncode_ID, UrlEncode_PW]);

			TCPClient.Disconnect;
			if not TCPClient.Connected then
			begin
				try
					TCPClient.Host := GS_CDMS_URL;
					TCPClient.Port := StrToInt(GS_CDMS_URLPORT);
					TCPClient.ReadTimeout := 5000;
					TCPClient.Connect;
				except
				end;
			end;

      if TCPClient.Connected then
      begin
				TCPClient.Disconnect;
				try
          if Assigned(WebBrowser1) then WebBrowser1.Navigate(ls_URL)
				except
				end;
			end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.N17Click(Sender: TObject);
var
	IE : Variant;
  Value : Cardinal;
begin
	IE := CreateOleObject('InternetExplorer.Application');

  if GS_PRJ_AREA = 'S' then
  	IE.Navigate( 'http://pda.gmgm.net/Android/iframe/161220_S.html' )
  else
  	IE.Navigate( 'http://pda.gmgm.net/Android/iframe/161220.html' );

	IE.AddressBar := False;
	IE.MenuBar := False;
	IE.ToolBar := False;
	IE.StatusBar := False;

	IE.Width := (screen.Width Div 3) * 2;//550;
	IE.Height := screen.Height - 50;//850;

	IE.Top := 0;//((Self.Top * 2 + Self.Height) - IE.Height)/2;
	IE.Left := 0;//Self.Left - IE.Width;

//            bIE := True;
	Value := IE.Hwnd;
	RegSetValue(HKEY_CURRENT_USER, 'HKSFA\IE_HWND', REG_DWORD, @Value, SizeOf(Cardinal));
	IE.Visible := true;
	SetForegroundWindow(Value);
end;

procedure TFrm_Main.N1Click(Sender: TObject);
begin
  SetDebugeWrite('Main.N1Click');
  proc_LeftWkManage;
end;

procedure TFrm_Main.N21Click(Sender: TObject);
var
	IE : Variant;
  Value : Cardinal;
begin
	IE := CreateOleObject('InternetExplorer.Application');

//	IE.Navigate( 'http://pda.gmgm.net/Android/iframe/nw_re.html' );
	IE.Navigate( 'http://www.callmaner.com/CmnXEMenu/callmaner_info.html');
	IE.AddressBar := False;
	IE.MenuBar := False;
	IE.ToolBar := False;
	IE.StatusBar := False;

	IE.Width := (screen.Width Div 3) * 2;//550;
	IE.Height := screen.Height - 50;//850;

	IE.Top := 0;//((Self.Top * 2 + Self.Height) - IE.Height)/2;
	IE.Left := 0;//Self.Left - IE.Width;

//            bIE := True;
	Value := IE.Hwnd;
	RegSetValue(HKEY_CURRENT_USER, 'HKSFA\IE_HWND', REG_DWORD, @Value, SizeOf(Cardinal));
	IE.Visible := true;
	SetForegroundWindow(Value);
end;

procedure TFrm_Main.N23Click(Sender: TObject);
begin
	Proc_IPCCAdminLogOut;
end;

procedure TFrm_Main.N2Click(Sender: TObject);
begin
  SetDebugeWrite('Main.N2Click');
  cxButton6Click(cxButton6);
end;

procedure TFrm_Main.N3Click(Sender: TObject);
const
  ciWid: array[0..24] of Integer = (30, 67, 30, 54, 60, 34, 48, 45, 38, 62, 47, 57, 60, 60, 54, 87, 60, 55,  0,  0,  0, 64,  0, 64,  0);
var
	i, iRow: Integer;
  ln_env: TIniFile;
  sTemp: string;
begin
  SetDebugeWrite('Main.N3Click');
  try
    ln_env := TIniFile.Create(ENVPATHFILE);
    ln_env.EraseSection('WkConnect');
    ln_env.EraseSection('WkTitleSize');
    for i := 0 to tvWkConnect.ColumnCount - 1 do
    begin
      sTemp := tvWkConnect.Columns[i].DataBinding.FieldName;
      iRow := lbWkTitle.Items.IndexOf(sTemp);
      tvWkConnect.Columns[i].Index := iRow;
      tvWkConnect.Columns[i].Width := ciwid[i];
    end;
    proc_Change_Title;
    FreeAndNil(ln_env);
  except
    on e: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.NormalMe(Sender: TObject);
begin
  SetDebugeWrite('Main.NormalMe');
  bPrintYesNo := True;

  // Globally trap the Windows system key "PrintScreen"
{  prntscrn := GlobalAddAtom('Hotkey1');
  RegisterHotKey(Handle, prntscrn, 0, VK_SNAPSHOT);

  Ctrlprntscrn := GlobalAddAtom('Hotkey2');
  RegisterHotKey(Handle, Ctrlprntscrn, MOD_CONTROL, VK_SNAPSHOT);

  Altprntscrn := GlobalAddAtom('Hotkey3');
  RegisterHotKey(Handle, Altprntscrn, MOD_ALT, VK_SNAPSHOT);}
end;

procedure TFrm_Main.pnl_RemoteForIPCC_TitleMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
	ReleaseCapture;
	PostMessage(pnl_RemoteForIPCC.Handle, WM_SYSCOMMAND, $F012, 0);
end;

procedure TFrm_Main.pmPBXPopup(Sender: TObject);
Var i : Integer;
	sTmp : string;
begin
	try
//		if grpPBXLogin.Tag = 0 then
		if not gSI415_A_Login then
		begin
			for i := 0 to pmPBX.Items.Count - 1 do
				pmPBX.Items[i].Visible := False;

			if GS_EXEC_GUBUN = 0 then
			begin
				sTmp := '콜마너 프로그램 동시 실행 시 나중에 실행된 프로그램에서는 CMNIPCC와 연동이 제한 됩니다.'
					+ #13#10 + #13#10
					+ '먼저 실행한 프로그램을 통해 CMNIPCC를 이용하여 주십시오.';
				GMessagebox(sTmp, CDMSE);
				Exit;
			end;
			
			grpSetPBXLogin.Left := (Self.Width  - grpSetPBXLogin.Width) div 2;
			grpSetPBXLogin.Top  := (Self.Height - grpSetPBXLogin.Height) div 2;
			grpSetPBXLogin.Visible := True;

			edtPBXId.Clear;
			edtPBXPw.Clear;
			edtPBXId.Text := GS_EnvFile.ReadString('CID_COMM', 'Admin_ID',  '');
			edtPBXPW.Text := GS_EnvFile.ReadString('CID_COMM', 'Admin_PW',  '');
			
			edtPBXId.SetFocus;
		end else
		begin
			for i := 0 to pmPBX.Items.Count - 1 do
				pmPBX.Items[i].Visible := True;  
		end;
	except

	end;
end;

procedure TFrm_Main.pmRemoteMenuPopup(Sender: TObject);
Var i : Integer;
    iUCnt, iCCnt, iNCnt : Integer;
begin
  SetDebugeWrite('Main.pmRemoteMenuPopup');
  try
		pmRemoteMenu.Items.Clear;
		pSetpmRemoteMenuAdd('---- 수정창 리스트 ----', 100);
		SetpmRemoteView('수정');
    pSetpmRemoteMenuAdd('---- 콜링창 리스트 ----', 200);
		SetpmRemoteView('콜링');
		pSetpmRemoteMenuAdd('---- 접수창 리스트 ----', 300);
		SetpmRemoteView('신규');
    pSetpmRemoteMenuAdd('---- 접수창 닫기 ----'  , 400);

		iUCnt := 0;
		iCCnt := 0;
    iNCnt := 0;
    for i := 0 to JON_MAX_CNT - 1 do
    begin
			if JON01MNG[i].Use then
			begin
				if Pos('수정', JON01MNG[i].Caption) > 0 then Inc(iUCnt);
				if (Pos('콜링', JON01MNG[i].Caption) > 0) or
					 (Pos('앱접수', JON01MNG[i].Caption) > 0) then Inc(iCCnt);
				if Pos('신규', JON01MNG[i].Caption) > 0 then Inc(iNCnt);
			end;
		end;

    pSetpmRemoteMenuAdd('접수창전체닫기 [' + FormatFloat('0', iUCnt + iCCnt + iNCnt) + ']' , 410);
    pSetpmRemoteMenuAdd('수정창전체닫기 [' + FormatFloat('0', iUCnt) + ']'  , 420);
		pSetpmRemoteMenuAdd('콜링창전체닫기 [' + FormatFloat('0', iCCnt) + ']'  , 430);
		pSetpmRemoteMenuAdd('신규창전체닫기 [' + FormatFloat('0', iNCnt) + ']'  , 440);

		if (GS_PRJ_AREA = 'O') then
		begin
//			Menu1160.Visible := True;    //셔틀관리 지방권만 우선적용 => 20200806 권한있는사람만 적용 신성현차장요청
			if (GT_SEL_BRNO.HDNO = 'A284') or (GT_SEL_BRNO.HDNO = 'A100') then
			begin
				Menu1170.Visible := True;
				Menu1171.Visible := True;
			end else
			begin
				Menu1170.Visible := False;
				Menu1171.Visible := False;
			end;
		end else
		begin
			Menu1160.Visible := False;
			Menu1170.Visible := False;
			Menu1171.Visible := False;
			if (GT_SEL_BRNO.HDNO = 'A284') or (GT_SEL_BRNO.HDNO = 'A100') or (GT_SEL_BRNO.BRNO = 'S316') then
			begin
				Menu1160.Visible := True;
				Menu1170.Visible := True;
				Menu1171.Visible := True;
			end;
		end;

    if (GB_365System) Or ( GB_CallLine) then     // 365프로그램시 메뉴 변경
    begin
      Menu1150.Visible := False; // 관제(셔틀관제)
      Menu1160.Visible := False; // 셔틀노선관제
      Menu1170.Caption := '셔틀버스기사등록'; // 셔틀노선관제(New)
      Menu1170.Visible := True;
      Menu1171.Visible := True; // 셔틀통계, 이동로그
    end;

		Menu308.Visible := False; //우선배차 기사현황 <= 기능구현한됨. 사용안함. 20200422 KHS
  except on E: Exception do
    Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.pmSharePopup(Sender: TObject);
begin
  if cxPageControl2.ActivePageIndex = 2 then pmSMI2.Visible := False else
	if cxPageControl2.ActivePageIndex = 3 then pmSMI2.Visible := True;
end;

procedure TFrm_Main.pmSMI2Click(Sender: TObject);
Var i, iRow, iState,
    iStaX, iStaY, iViaX, iViaY, iEndX, iEndY,
    iSta, iStaA, iEnd, iEndA, iVia, iDist : Integer;
    slViaX, slViaY, slViaNm : TStringList;
    lrDirKm : Real;
begin
  try
    iRow := cxGridQRate.DataController.FocusedRecordIndex;
    if iRow < 0 then Exit;

  	iState := cxGridQRate.GetColumnByFieldName('상태').Index;

    iSta  := cxGridQRate.GetColumnByFieldName('출발지').Index;
    iStaA := cxGridQRate.GetColumnByFieldName('출발지주소').Index;
    iVia  := cxGridQRate.GetColumnByFieldName('경유지').Index;
    iEnd  := cxGridQRate.GetColumnByFieldName('도착지').Index;
    iEndA := cxGridQRate.GetColumnByFieldName('도착지주소').Index;

    iDist := cxGridQRate.GetColumnByFieldName('거리').Index;

    iStaX := cxGridQRate.GetColumnByFieldName('StaX').Index;
    iStaY := cxGridQRate.GetColumnByFieldName('StaY').Index;
    iViaX := cxGridQRate.GetColumnByFieldName('ViaX').Index;
    iViaY := cxGridQRate.GetColumnByFieldName('ViaY').Index;
    iEndX := cxGridQRate.GetColumnByFieldName('EndX').Index;
    iEndY := cxGridQRate.GetColumnByFieldName('EndY').Index;

    With Frm_Main.Frm_JON52[JON03_MAX_CNT] do
    begin
      CONFRec.ConfSlip := 'A';
      CONFRec.ConfStatus := '';
      CONFRec.UpDate := '';
      CONFRec.DepLat := cxGridQRate.DataController.Values[iRow, iStaX];
      CONFRec.DepLng := cxGridQRate.DataController.Values[iRow, iStaY];
      CONFRec.DepName := StringReplace(cxGridQRate.DataController.Values[iRow, iStaA], ' ', '|', [rfReplaceAll]) + '|' +
                         cxGridQRate.DataController.Values[iRow, iSta];
      CONFRec.ArrLat := cxGridQRate.DataController.Values[iRow, iEndX];
      CONFRec.ArrLng := cxGridQRate.DataController.Values[iRow, iEndY];
      CONFRec.ArrName := StringReplace(cxGridQRate.DataController.Values[iRow, iEndA], ' ', '|', [rfReplaceAll]) + '|' +
                         cxGridQRate.DataController.Values[iRow, iEnd];
      CONFRec.BaechaLat := '';
      CONFRec.BaechaLng := '';
      CONFRec.BaechaName := '';

      CONFRec.ViaCnt := 0;
      CONFRec.ViaLat.Clear;
      CONFRec.ViaLng.Clear;
      CONFRec.ViaName.Clear;

      if ( cxGridQRate.DataController.Values[iRow, iViaX] <> Null ) And
         ( cxGridQRate.DataController.Values[iRow, iViaX] <> ''   ) then
      begin
        slViaX := TStringList.Create;
        slViaY := TStringList.Create;
        slViaNm := TStringList.Create;
        try
          GetTextSeperationEx('|', cxGridQRate.DataController.Values[iRow, iViaX], slViaX);
          GetTextSeperationEx('|', cxGridQRate.DataController.Values[iRow, iViaY], slViaY);
          GetTextSeperationEx('/', cxGridQRate.DataController.Values[iRow, iVia] , slViaNm);

          for i := 0 to slViaX.Count - 1 do
          begin
            if Trim(slViaX[i]) = '' then Continue;
            
            CONFRec.ViaLat .Add(slViaX[i]);
            CONFRec.ViaLng .Add(slViaY[i]);
            CONFRec.ViaName.Add('|||' + slViaNm[i]);
            Inc(CONFRec.ViaCnt);
          end;
        finally
          slViaX.Free;
          slViaY.Free;
          slViaNm.Free;
        end;
      end;

      CONFRec.WkSabun := '';
      CONFRec.WKConnState := '';
      CONFRec.WKLocLat := '';
      CONFRec.WKLocLng := '';
      CONFRec.WKLocType := '';
      CONFRec.WKLocElapseTime := '';

      Frm_Main.cxPageControl2.ActivePageIndex := 4;
      if Not Frm_Main.BtnFix.Down then
        Frm_Main.cxPageControl2Click(Frm_Main.cxPageControl2);

      lrDirKm := StrToFloatDef( StringReplace(cxGridQRate.DataController.Values[iRow, iDist], 'Km', '', [rfReplaceAll]), 0);

      Proc_MapMode_Bessel1(lrDirKm); //출발지 도착지 한지도

      btn_Mod1.Down := True;

      btn_Mod2.Down := False;
      btn_Mod3.Down := False;
      btn_Mod4.Down := False;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.pm_WorkerPopup(Sender: TObject);
begin
  mniWorkAll.Visible := TCK_USER_PER.WOR_MngModify = '1';
end;

procedure TFrm_Main.PnlClientResize(Sender: TObject);
begin
//  SetDebugeWrite('Main.PnlClientResize');
  if tmrPageChnage.Tag = 1 then Exit;
  if PnlClient.Height < cxPageControl2.Height then cxPageControl2.Height := PnlClient.Height - 100;
end;

procedure TFrm_Main.PnlGongJiResize(Sender: TObject);
begin
  pGongjiStart;
end;

procedure TFrm_Main.SetpmRemoteView(sStat : String);
Var i : Integer;
begin
  SetDebugeWrite('Main.SetpmRemoteView');
  try
    for i := 0 to JON_MAX_CNT - 1 do
    begin
      if JON01MNG[i].Use then
      begin
        if Pos(sStat, JON01MNG[i].Caption) > 0 then
          pSetpmRemoteMenuAdd(JON01MNG[i].Caption, JON01MNG[i].Tag);
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.pSetpmRemoteMenuAdd(sCaption : String; iTag : Integer);
var  menuItem : TMenuItem;
begin
  SetDebugeWrite('Main.pSetpmRemoteMenuAdd');
  menuItem := TMenuItem.Create(pmRemoteMenu);
  try
    menuItem.Caption := sCaption;
    menuItem.Tag     := iTag;
    if ( iTag = 100 ) Or ( iTag = 200 ) Or ( iTag = 300 ) Or ( iTag = 400) then menuItem.Enabled := False;

    menuItem.OnClick := pSetPmRemoteMenuItemClick;
    pmRemoteMenu.Items.Add(menuItem);
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.pSetPmRemoteMenuItemClick(Sender: TObject) ;
Var i : Integer;
    sStr : String;
begin
  SetDebugeWrite('Main.pSetPmRemoteMenuItemClick');
  try
    if sender is TMenuItem then
    begin
      if TMenuItem(Sender).Tag > 90 then
      begin
        case TMenuItem(Sender).Tag of
          410 : begin
                 for i := 0 to JON_MAX_CNT - 1 do
                 begin
                   if JON01MNG[i].Use then
                   begin
                     if Assigned(Frm_JON01N[i]) then
                     begin
                       Frm_JON01N[i].btnCmdExit.Description := 'T';
                       Frm_JON01N[i].btnCmdExit.Click;
                     end;
                   end;
                 end;
               end;
          420 : begin
                 for i := 0 to JON_MAX_CNT - 1 do
                 begin
                   if JON01MNG[i].Use then
                   begin
										 if Pos('수정', JON01MNG[i].Caption) > 0 then
                     begin
											 if Assigned(Frm_JON01N[i]) then
                       begin
                         Frm_JON01N[i].btnCmdExit.Description := 'T';
                         Frm_JON01N[i].btnCmdExit.Click;
                       end;
                     end;
                   end;
                 end;
               end;
          430 : begin
                 for i := 0 to JON_MAX_CNT - 1 do
                 begin
                   if JON01MNG[i].Use then
                   begin
										 if (Pos('콜링', JON01MNG[i].Caption) > 0) or
												(Pos('앱접수', JON01MNG[i].Caption) > 0) then
										 begin
                       if Assigned(Frm_JON01N[i]) then
                       begin
                         Frm_JON01N[i].btnCmdExit.Description := 'T';
                         Frm_JON01N[i].btnCmdExit.Click;
                       end;
                     end;
                   end;
                 end;
               end;
          440 : begin
                 for i := 0 to JON_MAX_CNT - 1 do
                 begin
                   if JON01MNG[i].Use then
                   begin
										 if Pos('신규', JON01MNG[i].Caption) > 0 then
										 begin
                       if Assigned(Frm_JON01N[i]) then
                       begin
                         Frm_JON01N[i].btnCmdExit.Description := 'T';
                         Frm_JON01N[i].btnCmdExit.Click;
                       end;
                     end;
                   end;
                 end;
               end;
        end;
      end else
      begin
        if JON01MNG[TMenuItem(Sender).Tag].Dock then
        begin
          sStr := JON01MNG[TMenuItem(Sender).Tag].Hint;
          for i := 0 to Frm_JON00.cxTabControl1.Tabs.Count - 1 do
          begin
            if (Frm_JON00.cxTabControl1.Tabs[i].Caption = sStr) And
               (Frm_JON00.slTabTag[i] = IntToStr(TMenuItem(Sender).Tag)) then
              break;
          end;
          Frm_JON00.cxTabControl1.TabIndex := i;
        end;

				Frm_Jon01N[TMenuItem(Sender).Tag].Show;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.grpSetCTISetting1MouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
	SetDebugeWrite('Main.pnlCTISetting1MouseDown');
	pnlCTISetting.BringToFront;
	ReleaseCapture;
  PostMessage(pnlCTISetting.Handle, WM_SYSCOMMAND, $F012, 0);
end;

procedure TFrm_Main.PnlMainTitleDblClick(Sender: TObject);
begin
  if Self.WindowState = wsMaximized then Self.WindowState := wsNormal
                                    else Self.WindowState := wsMaximized;
end;

procedure TFrm_Main.PnlMainTitleMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  ReleaseCapture;
  PostMessage(Self.Handle, WM_SYSCOMMAND, $F012, 0);
end;

procedure TFrm_Main.proc_UserPermission;
  procedure _SetLeftMenuAuth(AAuth: Boolean; ALeftMemu: TAdvToolPanel);
  begin
    ALeftMemu.Hidden := not AAuth;
    if ALeftMemu.Locked then
    begin
      ALeftMemu.Locked := False;
      AdvTPTab.RollIn(ALeftMemu);
    end;
  end;
var
  i, iCash : Integer;
begin
	SetDebugeWrite('Main.proc_UserPermission');
	try
		// 금액 관련 설정
    gCurProperties.ReadOnly := True;
    gCurProperties.DisplayFormat := ',0;-,0';
    gCurProperties.Nullable := True;
    gCurProperties.Alignment.Horz := taRightJustify;
    gCurProperties.Alignment.Vert := taVCenter;
    if TCK_USER_PER.COM_WkCashView = '1' then
    begin
      gCurProperties.EchoMode := eemNormal;
    end else
    begin
      gCurProperties.EchoMode := eemPassword;
    end;

    gCalProperties.ReadOnly := True;
    gCalProperties.DisplayFormat := ',0;-,0';
    gCalProperties.Alignment.Horz := taRightJustify;
    gCalProperties.Alignment.Vert := taVCenter;

    gCalHCProperties.ReadOnly := True;
    gCalHCProperties.DisplayFormat := ',0;-,0';
    gCalHCProperties.Alignment.Horz := taCenter;
    gCalHCProperties.Alignment.Vert := taVCenter;

    gLblProperties.ReadOnly := True;
    gLblProperties.Alignment.Horz := taCenter;
    gLblProperties.Alignment.Vert := taVCenter;

		iCash := tvWkConnect.GetColumnByFieldName('잔액').Index;
		tvWkConnect.Columns[iCash].Properties := gCurProperties;

		if Not GS_AdminAuthYN then proc_AdminAuthCheck;

		if ( TCK_USER_PER.JON_MainView = '1' ) And ( GS_AdminAuthYN ) then
    begin
      // 메인
      if Assigned(WebBrowser1) then WebBrowser1.Visible := True;
      cxPageControl1.Pages[0].TabVisible := True;
    	trm_NoticeInvert.enabled := True;
    end else
    begin
      // 메인
//      cxPageControl1.Pages[0].TabVisible := False;
      cxPageControl1.Pages[0].Free;
    	trm_NoticeInvert.enabled := False;
    end;

    // 기사 관련 메뉴
    Menu301.Visible := (TCK_USER_PER.WOR_StatView = '1') or (TCK_USER_PER.WOR_Manage = '1');  // 301.기사현황관리
    Menu302.Visible := (TCK_USER_PER.WOR_CashMng = '1');                                      // 302.기사캐쉬관리
    Menu303.Visible := (TCK_USER_PER.WOR_Attend = '1');                                       // 303.기사배차현황
    Menu304.Visible := (TCK_USER_PER.WOR_ShareBaecha = '1');                                  // 304.공유콜배차제한
    Menu305.Visible := (TCK_USER_PER.WOR_Blacklist = '1');                                    // 305.블랙리스트
    Menu306.Visible := (TCK_USER_PER.WOR_PeekTimeBlock = '1');                                // 306.심야배차제한현황
    Menu307.Visible := (TCK_USER_PER.WOR_513TimeCard = '1');                                  // 307.기사출근표
		Menu308.Visible := True;//(TCK_USER_PER.WOR_AboveOrder = '1');                                  // 308.우선배차기사현황
		Menu309.Visible := (TCK_USER_PER.WOR_NoWorker = '1');                                     // 309.미출근현황

		if ((GT_USERIF.SA = '02') or (GT_USERIF.SA = '09') or (GT_USERIF.PickUp = '1')) then
			Menu310.Visible := (TCK_USER_PER.WOR_Pickup = '1');                                     // 310.기사픽업

		Menu311.Visible := (TCK_USER_PER.WOR_Gongji = '1') And ( GT_USERIF.LV <> '10' );          // 311.기사공지

    if (TCK_USER_PER.WOR_StatView    = '1') or
       (TCK_USER_PER.WOR_Manage      = '1') or
       (TCK_USER_PER.WOR_CashMng     = '1') or
       (TCK_USER_PER.WOR_Attend      = '1') or
       (TCK_USER_PER.WOR_ShareBaecha = '1') or
       (TCK_USER_PER.WOR_Blacklist   = '1') or
//-       (TCK_USER_PER.WOR_Reserve     = '1') or
       (TCK_USER_PER.WOR_PeekTimeBlock = '1') or
       (TCK_USER_PER.WOR_Pickup      = '1') or
//-       (TCK_USER_PER.WOR_Baecha      = '1') or
       (TCK_USER_PER.WOR_Gongji      = '1') then
      btnMainMenu2.Enabled := True
    else
      btnMainMenu2.Enabled := False;

		// 고객 관련 메뉴
		Menu401.Visible := TCK_USER_PER.CUR_Manager = '1';    // 401.고객관리
		Menu402.Visible := TCK_USER_PER.CUR_General = '1';    // 402.일반검색
		Menu403.Visible := TCK_USER_PER.CUR_High = '1';       // 403.고급검색
		Menu404.Visible := TCK_USER_PER.CUR_Detail = '1';     // 404.상세검색
		Menu405.Visible := TCK_USER_PER.CUR_Virture = '1';    // 405.안심번호관리
		Menu406.Visible := TCK_USER_PER.CUR_Dormancy = '1';   // 406.휴먼고객
		Menu407.Visible := TCK_USER_PER.CUR_CustLevel = '1';  // 407.고객등급관리
		Menu408.Visible := TCK_USER_PER.CUR_Mileage = '1';       // 408.마일리지설정
		Menu409.Visible := TCK_USER_PER.CUR_MileageStat = '1';   // 409.마일리지현황(고객별)
		Menu410.Visible := TCK_USER_PER.CUR_MileageDetail = '1'; // 410.마일리지상세(적립+지급)
		Menu411.Visible := False; // TCK_USER_PER.CUR_OKCashBack = '1';    // 411.OK캐쉬백적립현황메뉴제거 20201020.CDS
		Menu412.Visible := False;
		Menu413.Visible := TCK_USER_PER.CUR_Manager = '1';    // 401.고객관리(추천인관리(앱) 동시 사용

		// 법인 관련 메뉴
		Menu501.Visible := (TCK_USER_PER.CUR_BubinMng = '1') or (TCK_USER_PER.CUR_BubinMngModify = '1');  // 501.법인관리
		Menu502.Visible := (TCK_USER_PER.CUR_BubinHis = '1');                                             // 502.법인이용내역
		Menu503.Visible := (TCK_USER_PER.CUR_BubinAcc = '1');                                             // 503.법인일일정산
		Menu504.Visible := (TCK_USER_PER.CUR_BubinAuth = '1');                                            // 504.법인인증
		Menu505.Visible := (GS_AdminAuthYN);                                                              // 505.기사원천징수현황
		Menu506.Visible := (GS_AdminAuthYN);                                                              // 506.법인월정산
		Menu507.Visible := (TCK_USER_PER.CUR_BubinDayClose = '1');                                        // 507.일마감-엑셀출력
//    if Copy(GetPlusCallYN(GT_USERIF.BR),3,1) = 'y' then                                             // 505.기사원천징수현황
//      Menu505.Visible := TCK_USER_PER.CUR_WithHolding = '1'
//    else
//      Menu505.Visible := False;

		if (TCK_USER_PER.CUR_Manager        = '1') or
			 (TCK_USER_PER.CUR_General        = '1') or
			 (TCK_USER_PER.CUR_High           = '1') or
       (TCK_USER_PER.CUR_Detail         = '1') or
			 (TCK_USER_PER.CUR_Dormancy       = '1') or
       (TCK_USER_PER.CUR_Mileage        = '1') or
			 (TCK_USER_PER.CUR_MileageStat    = '1') or
       (TCK_USER_PER.CUR_MileageDetail  = '1') or
			 (TCK_USER_PER.CUR_Virture        = '1') or
       (TCK_USER_PER.CUR_CustLevel      = '1') or
			 (TCK_USER_PER.CUR_OKCashBack     = '1') or
		   (TCK_USER_PER.CUR_BubinMng       = '1') or
			 (TCK_USER_PER.CUR_BubinMngModify = '1') or
			 (TCK_USER_PER.CUR_BubinHis       = '1') or
			 (TCK_USER_PER.CUR_BubinAcc       = '1') or
			 (TCK_USER_PER.CUR_BubinDayClose  = '1') or
			 (TCK_USER_PER.CUR_BubinAuth      = '1') then
			btnMainMenu3.Enabled := True
		else
      btnMainMenu3.Enabled := False;

    // 정산 관련 메뉴
    Menu601.Visible := TCK_USER_PER.ACC_BrchCash = '1';                                 // 601.지사캐쉬내역
    Menu602.Visible := TCK_USER_PER.ACC_BankBook = '1';                                 // 602.통장식로그
    Menu603.Visible := TCK_USER_PER.ACC_Order = '1';                                    // 603.오더정산
    Menu604.Visible := TCK_USER_PER.ACC_BrchCharge = '1';                               // 604.지사충전내역
    Menu605.Visible := TCK_USER_PER.ACC_WkCharge = '1';                                 // 605.기사충전내역
    Menu606.Visible := TCK_USER_PER.ACC_WKSolution = '1';                               // 606.기사사용료
    Menu607.Visible := TCK_USER_PER.ACC_BrchGainCash = '1';                             // 607.공유콜정산
    Menu608.Visible := (GT_USERIF.LV = '60') and (TCK_USER_PER.ACC_CASH_MOVIE = '1');   // 608.캐쉬이동
		Menu609.Visible := TCK_USER_PER.ACC_SMS_CASH = '1';                                 // 609.SMS캐쉬충전
		Menu621.Visible := TCK_USER_PER.ACC_SMS_CASH_PCK = '1';                             // 621.SMS캐쉬일괄충전
		Menu610.Visible := TCK_USER_PER.ACC_Gain_List = '1';                                // 610.수익금리스트
    Menu611.Visible := TCK_USER_PER.ACC_Gain_12 = '1';                                  // 611.수익금계산
    Menu612.Visible := TCK_USER_PER.ACC_Gain_13 = '1';                                  // 612.콜운행정산
    Menu613.Visible := TCK_USER_PER.ACC_Gain_14 = '1';                                  // 613.기사수수료현황
    Menu614.Visible := TCK_USER_PER.ACC_Gain_15 = '1';                                  // 614.콜대행수수료
    Menu615.Visible := TCK_USER_PER.ACC_COUPON_APP = '1';                               // 615.쿠폰승인현황
		Menu616.Visible := TCK_USER_PER.ACC_COUPON_USE = '1';                               // 616.쿠폰사용현황
		Menu617.Visible := TCK_USER_PER.ACC_CARD_PAY = '1';                                 // 617.카드결제현황
		Menu619.Visible := TCK_USER_PER.ACC_BRCOUPON_USE = '1';                             // 619.자체쿠폰등록현황
		Menu620.Visible := TCK_USER_PER.ACC_BRCOUPON_USE = '1';                             // 620.자체쿠폰사용현황
		Menu618.Visible := ( TCK_USER_PER.ACC_CASH_OUT = '1' ) And ( GT_USERIF.LV <> '10' );// 618.출금요청권한

//    if GS_PRJ_AREA = 'O' then Menu617.Visible := False;  // 지방권 카드사용으로 인해 해제 처리 2015.05.07 LYB

		if (TCK_USER_PER.ACC_BrchCash     = '1') or
       (TCK_USER_PER.ACC_BrchGainCash = '1') or
       (TCK_USER_PER.ACC_BankBook     = '1') or
       (TCK_USER_PER.ACC_Order        = '1') or
       (TCK_USER_PER.ACC_BrchCharge   = '1') or
       (TCK_USER_PER.ACC_WkCharge     = '1') or
       (TCK_USER_PER.ACC_WKSolution   = '1') or
       (TCK_USER_PER.ACC_CASH_MOVIE   = '1') or
			 (TCK_USER_PER.ACC_SMS_CASH     = '1') or
			 (TCK_USER_PER.ACC_SMS_CASH_PCK = '1') or
			 (TCK_USER_PER.ACC_Gain_List    = '1') or
       (TCK_USER_PER.ACC_Gain_12      = '1') or
       (TCK_USER_PER.ACC_Gain_13      = '1') or
       (TCK_USER_PER.ACC_Gain_14      = '1') or
       (TCK_USER_PER.ACC_Gain_15      = '1') or
       (TCK_USER_PER.ACC_CASH_OUT     = '1') or
       (TCK_USER_PER.ACC_COUPON_APP   = '1') or
       (TCK_USER_PER.ACC_COUPON_USE   = '1') or
			 (TCK_USER_PER.ACC_CARD_PAY     = '1') or
			 (TCK_USER_PER.ACC_BRCOUPON_USE = '1') then
			btnMainMenu5.Enabled := True
		else
      btnMainMenu5.Enabled := False;

		// 통계 관련 메뉴
		Menu701.Visible := (TCK_USER_PER.STT_Keynumber   = '1');  // 701.대표번호별통계
		Menu702.Visible := (TCK_USER_PER.STT_Worker      = '1');  // 702.기사별통계
		Menu703.Visible := (TCK_USER_PER.STT_Customer    = '1');  // 703.고객별통계
		Menu704.Visible := (TCK_USER_PER.STT_Owner       = '1');  // 704.자사통계
		Menu715.Visible := (TCK_USER_PER.STT_OwnerACC    = '1');  // 715.지사별콜정산통계
		Menu705.Visible := (TCK_USER_PER.STT_Share       = '1');  // 705.공유콜통계
		Menu706.Visible := (TCK_USER_PER.STT_Local       = '1');  // 706.지역별통계
		Menu707.Visible := (TCK_USER_PER.STT_NewCustRate = '1');  // 707.신규고객통계
		Menu708.Visible := (TCK_USER_PER.STT_TimeCall    = '1');  // 708.시간대별콜수통계
		Menu709.Visible := (TCK_USER_PER.STT_Day    		 = '1');  // 709.일일콜수통계
		Menu710.Visible := (TCK_USER_PER.STT_NewCall     = '1');  // 710.신규콜수통계
		Menu711.Visible := (TCK_USER_PER.STT_CanCelCall  = '1');  // 711.취소콜통계   (*)
		Menu712.Visible := (TCK_USER_PER.STT_TimeLocal   = '1');  // 712.시간대별출/도지역통계
		Menu713.Visible := (TCK_USER_PER.STT_OrderCharge = '1');  // 713.오더요금별통계
		Menu714.Visible := (TCK_USER_PER.STT_OrderGrade  = '1');  // 714.오더별평가조회

		if (TCK_USER_PER.STT_Keynumber   = '1') or
			 (TCK_USER_PER.STT_Worker      = '1') or
			 (TCK_USER_PER.STT_Customer    = '1') or
			 (TCK_USER_PER.STT_Owner       = '1') or
			 (TCK_USER_PER.STT_OwnerACC    = '1') or
			 (TCK_USER_PER.STT_Share       = '1') or
			 (TCK_USER_PER.STT_Local       = '1') or
			 (TCK_USER_PER.STT_NewCustRate = '1') or
			 (TCK_USER_PER.STT_TimeCall    = '1') or
			 (TCK_USER_PER.STT_Day    		 = '1') or
			 (TCK_USER_PER.STT_NewCall     = '1') or
			 (TCK_USER_PER.STT_CanCelCall  = '1') or
			 (TCK_USER_PER.STT_TimeLocal   = '1') or
			 (TCK_USER_PER.STT_OrderCharge = '1') or
			 (TCK_USER_PER.STT_OrderGrade  = '1') then
			btnMainMenu6.Enabled := True
		else
			btnMainMenu6.Enabled := False;

		// 회사 관련 메뉴
		Menu801.Visible := (GT_USERIF.LV = '60') and (TCK_USER_PER.CMP_Head = '1');                 // 801.본사관리
    Menu802.Visible := (TCK_USER_PER.CMP_Branch = '1') or (TCK_USER_PER.CMP_BrchModify = '1');  // 802.지사관리
    Menu803.Visible := (TCK_USER_PER.CMP_SMSSet = '1');                                         // 803.SMS발송
    Menu804.Visible := (Free_Commission = 'y') and (TCK_USER_PER.CMP_FreeSet = '1');            // 804.자율수수료 설정
		Menu805.Visible := False; //  (GT_USERIF.LV = '60');                                        // 805.오토콜설정메뉴제거  20201020.CDS
		Menu806.Visible := (TCK_USER_PER.CMP_BrchKeyNumMng = '1');                                  // 806.대표번호증명원등록

    // 고객 앱 관련 메뉴
		Menu811.Visible := TCK_USER_PER.APP_Setup = '1';     // 811.앱/스마트푸시설정
    Menu812.Visible := TCK_USER_PER.APP_Notice = '1';    // 812.앱게시물관리
    Menu813.Visible := TCK_USER_PER.APP_Push = '1';      // 813.앱푸시관리
    Menu814.Visible := TCK_USER_PER.APP_SMSLIST = '1';   // 814.콜마너SMS발송내역
		Menu815.Visible := TCK_USER_PER.APP_PushLIST = '1';  // 815.스마트PUSH발송내역
		Menu816.Visible := TCK_USER_PER.APP_SMSSTT = '1';    // 816.콜마너SMS발송일별통계
		Menu817.Visible := TCK_USER_PER.APP_PushSTT = '1';   // 817.스마트PUSH발송일별통계

		Menu821.Visible := TCK_USER_PER.AIC_ScenarioSet = '1';  // 821.AI-OB 배차지연콜 설정
		Menu822.Visible := TCK_USER_PER.AIC_DetailList = '1';   // 822.AI-OB 배차지연콜 상세내역
		Menu823.Visible := TCK_USER_PER.AIC_DayTOT = '1';       // 823.AI-OB 배차지연콜 일별현황
		Menu831.Visible := TCK_USER_PER.AIC_HappyCallSet = '1';  // 831.AI-OB 해피콜 설정
		Menu832.Visible := TCK_USER_PER.AIC_HappyCallDetailList = '1';   // 832.AI-OB 해피콜 상세내역
		Menu833.Visible := TCK_USER_PER.AIC_HappyCallDayTOT = '1';       // 833.AI-OB 해피콜 일별현황
		Menu841.Visible := TCK_USER_PER.AIC_IBCallSet = '1';          // 841.AI-IB 설정
		Menu842.Visible := TCK_USER_PER.AIC_IBCallDetailList = '1';   // 842.AI-IB 상세내역
		Menu843.Visible := TCK_USER_PER.AIC_IBCallDayTOT = '1';       // 843.AI-IB 일별현황
		Menu844.Visible := False;                                     // 844.AI-IB 접수통계

		// 회사 메뉴
		if ((GT_USERIF.LV = '60') and (TCK_USER_PER.CMP_Head = '1')) or
       ((TCK_USER_PER.CMP_Branch = '1') or (TCK_USER_PER.CMP_BrchModify = '1')) or
       (TCK_USER_PER.CMP_SMSSet    = '1') or
       (TCK_USER_PER.APP_Setup     = '1') or
       (TCK_USER_PER.APP_Notice    = '1') or
       (TCK_USER_PER.APP_Push      = '1') or
			 (TCK_USER_PER.APP_SMSLIST   = '1') or
			 (TCK_USER_PER.APP_PushLIST  = '1') or
			 (TCK_USER_PER.APP_SMSSTT    = '1') or
			 (TCK_USER_PER.APP_PushSTT   = '1') or
			 (TCK_USER_PER.AIC_ScenarioSet = '1') or        // 회사 : AI-OB 배차지연콜 설정
			 (TCK_USER_PER.AIC_DetailList  = '1') or        // 회사 : AI-OB 배차지연콜 상세내역
			 (TCK_USER_PER.AIC_DayTOT      = '1') or        // 회사 : AI-OB 배차지연콜 일별현황
			 (TCK_USER_PER.AIC_HappyCallSet = '1') or        // 회사 : AI-OB 해피콜 설정
			 (TCK_USER_PER.AIC_HappyCallDetailList  = '1') or        // 회사 : AI-OB 해피콜 상세내역
			 (TCK_USER_PER.AIC_HappyCallDayTOT      = '1') or      // 회사 : AI-OB 해피콜 일별현황
			 (TCK_USER_PER.AIC_IBCallSet = '1') or        // 회사 : AI-OB 해피콜 설정
			 (TCK_USER_PER.AIC_IBCallDetailList  = '1') or        // 회사 : AI-OB 해피콜 상세내역
			 (TCK_USER_PER.AIC_IBCallDayTOT      = '1') then      // 회사 : AI-OB 해피콜 일별현황
			btnMainMenu7.Enabled := True
		else
      btnMainMenu7.Enabled := False;

    // 직원 관련 메뉴
    Menu901.Visible := (TCK_USER_PER.USR_Manage = '1') or (TCK_USER_PER.USR_MngModify = '1');      // 901.직원관리
    Menu902.Visible := (TCK_USER_PER.USR_Permission = '1') or (TCK_USER_PER.USR_PerModify = '1');  // 902.권한설정
    Menu903.Visible := (TCK_USER_PER.USR_AuthStat = '1');                                          // 903.인증현황
    Menu904.Visible := (TCK_USER_PER.USR_UserAuthSel = '1');                                       // 904.인증관리(사용자)
    Menu905.Visible := (TCK_USER_PER.USR_PCAuthSel = '1');                                         // 905.인증관리(PC)
    Menu906.Visible := (TCK_USER_PER.USR_ExcelDownList = '1');                                     // 906.엑셀다운현황
    Menu907.Visible := (TCK_USER_PER.USR_UserCall = '1');                                          // 907.직원별콜현황
    Menu908.Visible := (TCK_USER_PER.USR_HourCall = '1');                                          // 908.직원별시간통계
    Menu909.Visible := (TCK_USER_PER.USR_LoginCheck = '1');                                        // 909.직원근태현황
    Menu910.Visible := (GT_USERIF.LV = '60') and (GT_USERIF.Family = 'y') and (GT_USERIF.Master = 'y') and ( GS_AdminAuthYN ); // 910.패밀리관리자설정

    if (TCK_USER_PER.USR_Manage        = '1') or
       (TCK_USER_PER.USR_MngModify     = '1') or
       (TCK_USER_PER.USR_Permission    = '1') or
       (TCK_USER_PER.USR_PerModify     = '1') or
       (TCK_USER_PER.USR_AuthStat      = '1') or
       (TCK_USER_PER.USR_UserAuthSel   = '1') or
       (TCK_USER_PER.USR_PCAuthSel     = '1') or
       (TCK_USER_PER.USR_ExcelDownList = '1') or
       (TCK_USER_PER.USR_UserCall      = '1') or
       (TCK_USER_PER.USR_HourCall      = '1') or
       (TCK_USER_PER.USR_LoginCheck    = '1') or
			 ((GT_USERIF.LV = '60') and (GT_USERIF.Family = 'y') and (GT_USERIF.Master = 'y') and ( GS_AdminAuthYN )) then
      btnMainMenu8.Enabled := True
    else
      btnMainMenu8.Enabled := False;

    // 광고 관련 메뉴
    Menu1001.Visible := (TCK_USER_PER.SMS_Send = '1');             // 1001.SMS발송
    Menu1002.Visible := (TCK_USER_PER.SMS_Advertisement = '1');    // 1002.대량파일SMS발송
    Menu1003.Visible := (TCK_USER_PER.SMS_Result = '1');           // 1003.조회결과(상세)
    Menu1004.Visible := (TCK_USER_PER.SMS_Detail_Result = '1');    // 1004.조회결과(일별)
    Menu1005.Visible := (TCK_USER_PER.SMS_NoSms = '1');            // 1005.수신거부관리

		// 셔틀지도 G03부산, G61대구
		//		A2208   스피드대리  G64
		//    A2206   52구역대리  G19
		Menu1150.Visible := (GS_PRJ_AREA = 'S') Or
												( (GT_USERIF.ShareNo = 'G03') And (GS_PRJ_AREA = 'O') ) Or
												( (GT_USERIF.ShareNo = 'G73') And (GS_PRJ_AREA = 'O') ) Or
												( (GT_USERIF.ShareNo = 'G61') And (GS_PRJ_AREA = 'O') ) Or
												( (GT_USERIF.ShareNo = 'G64') And (GS_PRJ_AREA = 'O') ) Or
												( (GT_USERIF.ShareNo = 'G19') And (GS_PRJ_AREA = 'O') ) Or ( GT_USERIF.BR = 'B100');
		// 관제지도    권한없으면 빼달라고 함. 신성현차장 요청 20200805 KHS
		Menu1100.Visible := (TCK_USER_PER.MAP_Accept = '1');
		Menu1150.Visible := (TCK_USER_PER.MAP_Accept = '1');
		Menu1160.Visible := (TCK_USER_PER.MAP_Accept = '1');

		Menu1403.Visible := (TCK_USER_PER.SET_Charge = '1'); //설정 : 요금제편집
		Menu1404.Visible := (TCK_USER_PER.SET_ChargeSet = '1'); //요금제설정[대표번호]
		Menu1405.Visible := (TCK_USER_PER.SET_ChargeSet = '1'); //요금제설정[법인]
		Menu1406.Visible := (TCK_USER_PER.SET_ChargeSet = '1'); //심야할증요금

		Menu1407.Visible := (TCK_USER_PER.SET_CIDDNIS = '1'); //CID대표번호DNIS관리
		Menu1414.Visible := (TCK_USER_PER.SET_CID = '1'); //CID설정

		// 원격
    Menu1200.Visible := (TCK_USER_PER.HEL_REMOTE = '1');
    // SMS 전송 여부
    Menu1300.Visible := (TCK_USER_PER.SMS_Send = '1');

{    if (TCK_USER_PER.SMS_Send          = '1') or
       (TCK_USER_PER.SMS_Advertisement = '1') or
       (TCK_USER_PER.SMS_Result        = '1') or
       (TCK_USER_PER.SMS_Detail_Result = '1') or
       (TCK_USER_PER.SMS_NoSms         = '1') then
      AdvMainMenu.MenuItems[9].Enabled := True
    else
      AdvMainMenu.MenuItems[9].Enabled := False;}

{   AdvToolBarButton17.Enabled := (TCK_USER_PER.JON_CIDView = '1'); }

    if (GB_365System) Or (GB_CallLine) then     // 365프로그램시 메뉴 변경
    begin
      Menu1200.Caption := '원격연결';
      Menu1200.Visible := GB_CallLine; // 콜마너 원격연결

      Menu1415.Visible := False; // 콜마너고객센터채팅
      Menu1416.Visible := False; // 콜마너고객센터쪽지
      Menu1413.Visible := False; // 콜마너홈페이지

      Menu814.Caption := 'SMS발송내역';
      Menu816.Caption := 'SMS발송일별통계';
    end;

    AdvTPTab.Panels.BeginUpdate;
    try
      AdvTPTab.Visible := False;
      enablefalse1.Enabled := (TCK_USER_PER.WOR_MngModify = '1');

      _SetLeftMenuAuth(TCK_USER_PER.LFT_BrList = '1',     advTPTPna1);
      _SetLeftMenuAuth(TCK_USER_PER.LFT_WkConnect = '1',  advTPTPna2);
      _SetLeftMenuAuth(TCK_USER_PER.LFT_BrCall = '1',     advTPTPna3);
      _SetLeftMenuAuth(TCK_USER_PER.LFT_ShareCall = '1',  advTPTPna4);
      _SetLeftMenuAuth(TCK_USER_PER.LFT_Group = '1',      advTPTPna5);
      _SetLeftMenuAuth(TCK_USER_PER.LFT_WKAttend = '1',   advTPTPna6);
    finally
      AdvTPTab.Panels.EndUpdate;
      AdvTPTab.Visible := True;
    end;

		////네이버 인증키 관리/////2019.03.12 KHS
		gslNaverClientID := TStringList.create;
		gslNaverClientKey := TStringList.create;
///////////////////////cmnp///////////////////////////////////////////////////////////
		gslNaverClientID.add('b3d9eecuru'); //CMNP1
		gslNaverClientID.add('h54sbn7gos'); //CMNP2
		gslNaverClientID.add('g62jd6l3di'); //CMNP3
		gslNaverClientID.add('v4jkbi7t5h'); //CMNP4
		gslNaverClientID.add('2f3wipc151'); //CMNP5

		gslNaverClientKey.add('5wkNifyOUIKyf8bijDjQ5egdPOi1DfZa41Vi3XCG'); //CMNP1
		gslNaverClientKey.add('r98v1JH6u1UurtPPMG6zDAHSG4TnT73Hgvs4wfFe'); //CMNP2
		gslNaverClientKey.add('UprC3xv5n6B7aR2DLbzuRdwcHeFQP1noEJcqbQWP'); //CMNP3
		gslNaverClientKey.add('0AvRZPNis9ZaEd43kdcyGLaukYTy3CBU4GWM5NX9'); //CMNP4
		gslNaverClientKey.add('rOtE396IWxNiuPC90mzCx9P665AGSTc1yLJHm9wU'); //CMNP5
///////////////////////cmnp///////////////////////////////////////////////////////////
///////////////////////SNTECT///////////////////////////////////////////////////////////
//		gslNaverClientID.add('l2rcola66c'); //callmaner
//		gslNaverClientID.add('67qbt4rt4m'); //freedrive
//		gslNaverClientID.add('zlhyxq6fto'); //AI-Callmaner
//		gslNaverClientID.add('k2pdnc15cq'); //SNTECT

//		gslNaverClientKey.add('GnVuiD7B41aqS7S9O5OEHNmYJ6NK7lPPGi3oPHVi'); //callmaner
//		gslNaverClientKey.add('uEyPF4Z19T1Bb94821STZgCb84E1H3D6g5bfSejB'); //freedrive
//		gslNaverClientKey.add('5re3hYQhxwdb4gLQp30TFM0EBJ4iSXCz7gCugZAe'); //AI-Callmaner
//		gslNaverClientKey.add('zoMPy3HK25lkGOQKGV91C3c2rjrOwuBpMp52L9Uv'); //SNTECT
///////////////////////SNTECT///////////////////////////////////////////////////////////

//		if j30 = 0 then
//		begin
//			//미니맵생성
//			Frm_JON30 := TFrm_JON30.Create(Self);
//			Frm_JON30.Show;
//			Frm_JON30.Hide;
//
//	{    Frm_JON56 := TFrm_JON56.Create(Self);
//			Frm_JON56.Show;
//			Frm_JON56.Hide;   }
//			j30 := 1;
//		end;

//		GS_PORTAL_SEL := 'A';   // 처음 로그인시에는 무조건 네이버 포탈 //통합으로 변경 팀장님 지시 20191202 KHS
//		Frm_JON30.pnlSelND.Caption := '통합';//'N사';
//		Frm_JON30.pnlSelND.Color   := $00C4DBFD;//$0088CAAF;
//    Frm_JON30.pnlSelND.Repaint;
//
//    GB_PORTAL_AutoChk := True;

//		Frm_JON31 := TFrm_JON31.Create(Self);
//    Frm_JON31.Show;
//    Frm_JON31.Hide;

		cxPageControl2.ActivePageIndex := 0;  // 이걸 안해주면 통화관리 화면이 약간 깨짐(통화건수 위치 이상 )  2016.01.13 LYB

		// 통화관리
		Frm_JON54 := TFrm_JON54.Create(Self);
		Frm_JON54.Parent := cxTabSheet1;
		Frm_JON54.Align := alClient;
		Frm_JON54.Show;
    LoadUserFavoriteNumber;
		Frm_JON54.proc_FavoriteNumber;

    // 대기요금 조회
    pDefLoadWaitFare;   //기본대기요금조회
    GB_JON_WAITFARE_USE := GS_EnvFile.ReadString('COUNSEL', 'GB_JON_WAITFARE_USE', 'D');
    if GB_JON_WAITFARE_USE = 'L' then pLocLoadWaitFare else
    if GB_JON_WAITFARE_USE = 'S' then pSvrLoadWaitFare(GT_USERIF.CT);

    LoadUserBigo;       // 사용자 출도착지 상용구 목록
    LoadUserBigo1;      // 사용자 적요 상용구 목록
    LoadUserCancelEtc;  // 오더취소 기타 상용구 목록
    LoadUserShortMenu;  // 사용자 단축메뉴
    // 단축관리
    Frm_Jon05 := TFrm_Jon05.Create(Nil);
    Frm_Jon05.Hide;

//    if TCK_USER_PER.BTM_MENUSCH = '1' then
//    begin
//			// 메뉴찾기
//      Frm_JON51 := TFrm_JON51.Create(Self);
//      Frm_JON51.Parent := tsBtmMenu8;
//      Frm_JON51.Align := alClient;
//      Frm_JON51.Show;
//      Frm_JON51.SetGrantCheck;
//    end else
//    begin
      cxPageControl2.Pages[7].TabVisible := False;
      Menu1500.Visible := False;
//    end;

    // 콜지도보기
  //  Frm_JON52[5] := TFrm_JON52.Create(Nil);
//    Frm_JON52[5].Parent := tsBtmMenu5;
//    Frm_JON52[5].Align := alClient;
//
//    Frm_JON52[5].pnlRight.Align := alRight;
//    Frm_JON52[5].pnlRight.Width := 60;
//
//    Frm_JON52[5].shp_Mod1.Width := 15;
//    Frm_JON52[5].shp_Mod2.Width := 15;
//    Frm_JON52[5].shp_Mod3.Width := 15;
//    Frm_JON52[5].shp_Mod4.Width := 15;
//
//    Frm_JON52[5].shp_Mod1.Left := 1;
//    Frm_JON52[5].shp_Mod1.Top := 4;
//
//    Frm_JON52[5].shp_Mod2.Left := Frm_JON52[5].shp_Mod1.Left;
//    Frm_JON52[5].shp_Mod2.Top  := Frm_JON52[5].shp_Mod1.Top + 31;
//
//    Frm_JON52[5].shp_Mod3.Left := Frm_JON52[5].shp_Mod1.Left;
//    Frm_JON52[5].shp_Mod3.Top  := Frm_JON52[5].shp_Mod2.Top + 31;
//
//    Frm_JON52[5].shp_Mod4.Left := Frm_JON52[5].shp_Mod1.Left;
//    Frm_JON52[5].shp_Mod4.Top  := Frm_JON52[5].shp_Mod3.Top + 31;
//
//    Frm_JON52[5].btn_Mod1.Width := 40;
//    Frm_JON52[5].btn_Mod2.Width := 40;
//    Frm_JON52[5].btn_Mod3.Width := 40;
//    Frm_JON52[5].btn_Mod4.Width := 40;
//
//    Frm_JON52[5].btn_Mod1.Left := Frm_JON52[5].shp_Mod1.Left + 17;
//    Frm_JON52[5].btn_Mod1.Top := 4;
//
//    Frm_JON52[5].btn_Mod2.Left := Frm_JON52[5].shp_Mod2.Left + 17;
//    Frm_JON52[5].btn_Mod2.Top  := Frm_JON52[5].btn_Mod1.Top + 31;
//
//    Frm_JON52[5].btn_Mod3.Left := Frm_JON52[5].shp_Mod3.Left + 17;
//    Frm_JON52[5].btn_Mod3.Top  := Frm_JON52[5].btn_Mod2.Top + 31;
//
//    Frm_JON52[5].btn_Mod4.Left := Frm_JON52[5].shp_Mod4.Left + 17;
//    Frm_JON52[5].btn_Mod4.Top  := Frm_JON52[5].btn_Mod3.Top + 31;
//
//    Frm_JON52[5].cbRoute.Left := 1;
//    Frm_JON52[5].cbRoute.Top := Frm_JON52[5].btn_Mod4.Top + 31;
//
//    Frm_JON52[5].cxLabel1.Left := 3;
//    Frm_JON52[5].cxLabel1.Top := Frm_JON52[5].cbRoute.Top + 31;
//
//    Frm_JON52[5].Show;

    cxPageControl2.ActivePageIndex := 4;

    if TCK_USER_PER.BTM_CALLCNL = '1' then
    begin
//      // 부정취소콜
//      Frm_JON53 := TFrm_JON53.Create(Self);
//      Frm_JON53.Parent := tsBtmMenu6;
//      Frm_JON53.Align := alClient;
//      Frm_JON53.Show;
    end else
    begin
      cxPageControl2.Pages[5].TabVisible := False;
    end;

    if TCK_USER_PER.BTM_CALLOUT = '1' then
    begin
//      // 부재중전화
//      Frm_JON55 := TFrm_JON55.Create(Self);
//      Frm_JON55.Parent := tsBtmMenu2;
//      Frm_JON55.Align := alClient;
//      Frm_JON55.Show;
    end else
    begin
      cxPageControl2.Pages[1].TabVisible := False;
    end;

    cxPageControl2.ActivePageIndex := 0;

//--    if (GT_USERIF.HD = 'A876') And (GT_USERIF.BR = 'D615') then cxMemo1.Visible := True;
//--    if (GT_USERIF.ID = 'sntest') then cxMemo1.Visible := True;

    // 접수 검색의 지사 변경
    for i := 0 to JON03_MAX_CNT - 1 do
    begin
      if Assigned(Frm_JON03[i]) then
      begin
        // 접수 검색의 즉시 배차 지사 변경
        Frm_JON03[i].proc_UserPer;
      end;
    end;
  except
    on E: Exception do
    begin
      showmessage('proc_UserPermission _ error');
			Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_wkConnect(iType: Integer);
var
  ls_TxLoad: string; // XML File Load
  rv_str : string;
  ls_rxxml: string;
  slReceive: TStringList;
	ErrCode: integer;
	AWKstr: string;
begin
  SetDebugeWrite('Main.proc_wkConnect');
  if fGetChk_Search_HdBrNo('접속기사') then Exit;

	try
		Screen.Cursor := crHourGlass;
		ls_TxLoad := GTx_UnitXmlLoad('C069.XML');
		ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'Main'+'C069', [rfReplaceAll]);

		///////////////////검색할 본사(비어있으면 소속본사)///////////////////
		if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then
				 ls_TxLoad := StringReplace(ls_TxLoad, 'WK_HEADstr', GT_SEL_BRNO.HDNO, [rfReplaceAll])
		else ls_TxLoad := StringReplace(ls_TxLoad, 'WK_HEADstr', '', [rfReplaceAll]);
		///////////////////검색할 본사(비어있으면 소속본사)///////////////////
		if cb_Search.ItemIndex = 6 then
		begin
			AWKstr := '';
			ls_TxLoad := StringReplace(ls_TxLoad, 'WK_STATUSstr', 'WS00', [rfReplaceAll]);
			AWKstr := 'W1,W2,W3';
			ls_TxLoad := StringReplace(ls_TxLoad, 'WK_SEARCHStr', '' , [rfReplaceAll]);
			ls_TxLoad := StringReplace(ls_TxLoad, 'WK_WORDStr', '', [rfReplaceAll]);
		end else
		begin
			AWKstr := '';
			if (iType = 0) or (iType = 2) then
			begin
				///////////////////기사등록상태(비어있으면 모든상태, WS00:정상상태)///////////////////
				if btnWknormalcy.Down then
						 ls_TxLoad := StringReplace(ls_TxLoad, 'WK_STATUSstr', 'WS00', [rfReplaceAll])
				else ls_TxLoad := StringReplace(ls_TxLoad, 'WK_STATUSstr', 'WSN00', [rfReplaceAll]);
				///////////////////기사등록상태(비어있으면 모든상태, WS00:정상상태)///////////////////
				if btnWkToday.Down   then                 //출근
				begin
					if AWKstr <> '' then AWKstr := AWKstr + ',W2'
					else                 AWKstr := AWKstr +  'W2';
				end;
				if btnWkConnect.Down then                 //단순접속
				begin
					if AWKstr <> '' then AWKstr := AWKstr + ',W3'
					else                 AWKstr := AWKstr +  'W3';
				end;
				if btnWkConnect_order.Down then           //오더접속
				begin
					if AWKstr <> '' then AWKstr := AWKstr + ',W4'
					else                 AWKstr := AWKstr +  'W4';
				end;
				if btnWkRun.Down then                     //운행
				begin
					if AWKstr <> '' then AWKstr := AWKstr + ',W5'
					else                 AWKstr := AWKstr +  'W5';
				end;
				if btnWkNoToday.Down   then               //미출근
				begin
					if AWKstr <> '' then AWKstr := AWKstr + ',W1'
					else                 AWKstr := AWKstr +  'W1'
				end;

				if iType = 0 then
				begin
					if ed_Condition.text <> '' then
					begin
						ls_TxLoad := StringReplace(ls_TxLoad, 'WK_SEARCHStr', IntToStr(cb_Search.ItemIndex + 1) , [rfReplaceAll]);
						ls_TxLoad := StringReplace(ls_TxLoad, 'WK_WORDStr', StringReplace(Param_Filtering(ed_Condition.text), '-', '', [rfReplaceAll]), [rfReplaceAll]);
					end	else
					begin
						GMessagebox('검색어를 입력하세요', CDMSE);
						Screen.Cursor := crDefault;
						Exit;
					end;
				end	else
        if iType = 2 then
				begin
					ls_TxLoad := StringReplace(ls_TxLoad, 'WK_SEARCHStr', '' , [rfReplaceAll]);
					ls_TxLoad := StringReplace(ls_TxLoad, 'WK_WORDStr', '', [rfReplaceAll]);
				end;
			end	else
      if iType = 1 then
			begin
  			ls_TxLoad := StringReplace(ls_TxLoad, 'WK_SEARCHStr', '7' , [rfReplaceAll]);
				ls_TxLoad := StringReplace(ls_TxLoad, 'WK_WORDStr', StringReplace(Param_Filtering(ed_Condition.text), '-', '', [rfReplaceAll]), [rfReplaceAll]);
				ls_TxLoad := StringReplace(ls_TxLoad, 'WK_STATUSstr', 'WSALL', [rfReplaceAll]);
				AWKstr := 'W1,W2,W3,W4,W5';
			end;
		end;
		ls_TxLoad := StringReplace(ls_TxLoad, 'WK_CONNStr', AWKstr, [rfReplaceAll]);

		try
      slReceive := TStringList.Create;
			if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
				rv_str := slReceive[0];
        if rv_str <> '' then
				begin
					ls_rxxml := rv_str;
					Application.ProcessMessages;
					proc_recieve(ls_rxxml);
        end;
			end;
    finally
      Frm_Flash.Hide;
			Screen.Cursor := crDefault;
      FreeAndNil(slReceive);
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_wkCount;
var
  ls_TxLoad: String;
  ls_TxQry, rv_str, ls_AndCon1, sQueryTemp : string;
  ls_rxxml: String;
  slReceive: TStringList;
  ErrCode: integer;
begin
  SetDebugeWrite('Main.proc_wkCount');
	try
    //접속기사 가져오기
		if GT_SEL_BRNO.GUBUN <> '1' then
		begin
			case StrToIntDef(GT_USERIF.LV, 99) of
				10: ls_AndCon1 := Format(' AND BR_NO IN (SELECT BR_NO FROM CDMS_BRANCH WHERE CALLCENTER = ''%S'') ', [GT_USERIF.CT]);
				40: ls_AndCon1 := Format(' AND BR_NO = ''%s'' ', [GT_USERIF.BR]);
				60: begin
							if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
								ls_AndCon1 := Format(' AND BR_NO IN (SELECT BR_NO FROM CDMS_BRANCH WHERE HD_NO = ''%s'') ', [GT_SEL_BRNO.HDNO])
							else
								ls_AndCon1 := Format(' AND BR_NO IN (SELECT BR_NO FROM CDMS_BRANCH WHERE HD_NO = ''%s'') ', [GT_USERIF.HD]);
						end;
			end;
		end	else
		begin
			ls_AndCon1 := Format(' AND BR_NO = ''%s'' ', [GT_SEL_BRNO.BrNo]);
		end;

    fGet_BlowFish_Query(GSQ_Wk_COUNT, sQueryTemp);
    ls_TxQry := Format(sQueryTemp, [ls_AndCon1, ls_AndCon1, ls_AndCon1, ls_AndCon1]);
    ls_TxLoad := GetSel01('Main' + 'WKCOUNT', ls_TxQry);

    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
					Application.ProcessMessages;
          proc_recieve(ls_rxxml);
				end;
      end;
		finally
      Frm_Flash.Hide;
      FreeAndNil(slReceive);
		end;
	except
		on E: Exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

procedure TFrm_Main.proc_Word_Search(s: string;
  cxGrid: TcxGridDBBandedTableView);
  procedure _AddRow(AView: TcxGridDBBandedTableView; AData: TGroupInfoRec);
  var
    Row: Integer;
  begin
    Row := AView.DataController.AppendRecord;
    with AView.DataController do
    begin
      Values[Row, 0] := AData.Share;;
      Values[Row, 1] := AData.Head;
      Values[Row, 2] := AData.BrNo;
      Values[Row, 3] := AData.BrName;
      Values[Row, 4] := AData.KeyNum;
      Values[Row, 5] := AData.LBS;
      Values[Row, 6] := AData.BrTel;
      Values[Row, 7] := AData.ShareLv;
      Values[Row, 8] := AData.Area;
      Values[Row, 9] := AData.Addr1;
      Values[Row, 10] := AData.Addr2;
      Values[Row, 11] := AData.WkCnt;
    end;
  end;

var
  i, iSortIndex : Integer;
begin
  SetDebugeWrite('Main.proc_Word_Search');
  try
    cxGrid.BeginUpdate;
    try
      cxGrid.DataController.SetRecordCount(0);
      for I := 0 to Length(FGroupInfos) - 1 do
      begin
        if (s = '') or (Pos(s, FGroupInfos[I].Head) > 0) or (Pos(s, FGroupInfos[I].BrName) > 0) then
          _AddRow(cxGrid, FGroupInfos[I]);
      end;
    finally
      cxGrid.EndUpdate;
      iSortIndex := cxGrid.GetColumnByFieldName('지사명').Index;
      cxGrid.Columns[iSortIndex].SortOrder := soAscending;
      cxGrid.Columns[iSortIndex].SortIndex := 0;
      cxGrid.ViewData.Expand(True);
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_AutoShareNo;
var
  ls_TxLoad, rv_str, sNode, sDate: string;
  ls_rxxml: String;
  xdom: msDomDocument;
  lst_Node: IXMLDOMNodeList;
  lst_clon: IXMLDOMNode;
  slReceive: TStringList;
  ErrCode: integer;
begin
  SetDebugeWrite('Main.proc_AutoShareNo');
  try
    if cxLabel14.Caption <> '' then Exit;
    ls_rxxml := GTx_UnitXmlLoad('SEL04.XML');
    xdom := ComsDomDocument.Create;
    try
      if (not xdom.loadXML(ls_rxxml)) then
      begin
        Screen.Cursor := crDefault;
        ShowMessage('전문 Error입니다. 다시조회하여주십시요.');
        Exit;
      end;

      sDate := FormatDateTime('yyyymmdd', StrToDate(Date8to10(StartDateTime('yyyymmdd'))) - 1);
      sNode := '/cdms/header/UserID';
      lst_Node := xdom.documentElement.selectNodes(sNode);
      lst_Node.item[0].attributes.getNamedItem('Value').Text := En_Coding(GT_USERIF.ID);
      sNode := '/cdms/header/ClientVer';
      lst_Node := xdom.documentElement.selectNodes(sNode);
      lst_Node.item[0].attributes.getNamedItem('Value').Text := VERSIONINFO;
      sNode := '/cdms/header/ClientKey';
      lst_Node := xdom.documentElement.selectNodes(sNode);
      lst_Node.item[0].attributes.getNamedItem('Value').Text := 'Main' + 'GROUP2';
      sNode := '/cdms/Service/Data/Query';
      lst_Node := xdom.documentElement.selectNodes(sNode);
      lst_Node.item[0].attributes.getNamedItem('Key').Text := 'CALLSHARE3';
      sNode := '/cdms/Service/Data/Query/Param';
      lst_Node := xdom.documentElement.selectNodes(sNode);
      lst_clon := lst_node.item[0].cloneNode(True);
      sNode := '/cdms/Service/Data/Query';
      lst_Node := xdom.documentElement.selectNodes(sNode);
      lst_Node.item[0].appendChild(lst_clon);

      sNode := '/cdms/Service/Data/Query/Param';
      lst_Node := xdom.documentElement.selectNodes(sNode);
      lst_clon := lst_node.item[0].cloneNode(True);
      sNode := '/cdms/Service/Data/Query';
      lst_Node := xdom.documentElement.selectNodes(sNode);
      lst_Node.item[0].appendChild(lst_clon);

      sNode := '/cdms/Service/Data/Query/Param';
      lst_Node := xdom.documentElement.selectNodes(sNode);
      lst_Node.item[0].attributes.getNamedItem('Seq').Text := '1';
      lst_Node.item[0].attributes.getNamedItem('Value').Text := sDate;
      lst_Node.item[1].attributes.getNamedItem('Seq').Text := '2';
      lst_Node.item[1].attributes.getNamedItem('Value').Text := sDate;
      lst_Node.item[2].attributes.getNamedItem('Seq').Text := '3';
      if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
        lst_Node.item[2].attributes.getNamedItem('Value').Text := GT_SEL_BRNO.HDNO
      else
        lst_Node.item[2].attributes.getNamedItem('Value').Text := GT_USERIF.HD;
      ls_TxLoad := '<?xml version="1.0" encoding="euc-kr"?>' + #13#10 + xDom.documentElement.xml;

      slReceive := TStringList.Create;
      try
        if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False, 13000) then
        begin
          rv_str := slReceive[0];
          if trim(rv_str) <> '' then
          begin
            ls_rxxml := rv_str;
            proc_recieve(ls_rxxml);
          end;
        end;
      finally
        FreeAndNil(slReceive);
        Frm_Flash.Hide;
      end;
    finally
      xdom := Nil;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_BrOrder;
var
	ls_TxLoad: String;
	ls_TxQry, rv_str, ls_Table, ls_AndCon1, ls_AndCon2, sysdate, sQueryTemp, sTmp : string;
	ls_rxxml: String;
	slReceive: TStringList;
	ErrCode, i, j, iRow : integer;
  sCancelRate : Double;
	sFBr_no : string;
	slTmp : TStringList;
begin
	SetDebugeWrite('Frm_Main.proc_BrOrder');
	try
    sysdate := func_sysdate;
    if sysdate = '' then exit;
		if FormatDateTime('yyyymmdd', dtBrCallSt.Date) = StartDateTime('yyyymmdd') then
		begin
			dtBrCallEd.Date := dtBrCallSt.Date + 1;
		end	else
		begin
			if dtBrCallEd.Date < dtBrCallSt.Date then
			begin
				GMessagebox('검색 시작일자가 종료일자보다 큽니다.' +#13#10 + '기간설정을 변경하십시오.', CDMSE);
				Exit;
			end;
			if dtBrCallEd.Date = dtBrCallSt.Date then
			begin
				GMessagebox('검색 시작일자와 종료일자가 같을경우 검색되지 않습니다.' +#13#10 + '기간설정을 변경하십시오.', CDMSE);
				Exit;
			end;
			if (length(sysdate) <> 14) or ((StrToInt(copy(sysdate, 9, 4)) > 2100) or (StrToInt(copy(sysdate, 9, 4)) < 100)) then
			begin
				if (DaysBetween(dtBrCallSt.Date,dtBrCallEd.Date) > 1) then
				begin
					GMessagebox('기간검색(1일 이상)의 경우에는 오후 9시부터 오전 1시 사이 조회가 불가합니다.'
					 + #13#10 + '이 시간에는 [당일 지사콜 현황]만 검색할 수 있습니다.'
					 + #13#10#13#10 + '해당시간에 과거의 지사콜을 조회하시려면 1일단위로 검색하여 주십시오.', CDMSE);
//					dtBrCallSt.Date := StrToDate(Date8to10(StartDateTime('yyyymmdd')));
					dtBrCallEd.Date := dtBrCallSt.Date + 1;
					Exit;
				end;

{        GMessagebox('오후 9시부터 오전 1시 사이에는 당일 지사콜 현황만 검색할 수 있습니다.', CDMSE);
				dtBrCallSt.Date := StrToDate(Date8to10(StartDateTime('yyyymmdd')));
				dtBrCallEd.Date := dtBrCallSt.Date + 1;
				Exit;                                    }
			end;
		end;

		cxSgHdOrder.DataController.SetRecordCount(0);
    cxSgBrOrder.DataController.SetRecordCount(0);
		cxGridSetG1.DataController.SetRecordCount(0);
		cxGridSetG2.DataController.SetRecordCount(0);
		cxGridSetG3.DataController.SetRecordCount(0);
		cxGridSetK1.DataController.SetRecordCount(0);
		cxGridSetK2.DataController.SetRecordCount(0);
		cxGridSetK3.DataController.SetRecordCount(0);
		ls_AndCon2 := '';
		//접속기사 가져오기
    if GT_SEL_BRNO.GUBUN <> '1' then
    begin
      case StrToIntDef(GT_USERIF.LV, 99) of
				10: ls_AndCon1 := Format(' A.CALLCENTER = ''%S'' ', [GT_USERIF.CT]);
        // 상담원
				40:
          begin
            ls_AndCon1 := Format(' CONF_BRCH = ''%s'' ', [GT_USERIF.BR]);
            // 지사관리자
            ls_AndCon1 := ls_AndCon1 + Format(' AND CONF_HEAD = ''%s'' ',
              [func_search_hdNo(GT_USERIF.BR)]); // 본사코드 체크
					end;
				60:
					 begin
						 if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
						 begin
							 ls_AndCon1 := Format(' CONF_HEAD = ''%s'' ', [GT_SEL_BRNO.HDNO]);
							 if (GT_SEL_BRNO.GUBUN = '0') and (not Check_ALLHD(GT_SEL_BRNO.HDNO)) then
							 begin
								 for i := 0 to scb_FamilyBrCode.Count -1 do
								 begin
									 if i = 0 then sFBr_no := '''' + scb_FamilyBrCode[i] + ''''
									 else
										 sFBr_no := sFBr_no + ', ' + '''' + scb_FamilyBrCode[i] + '''';
								 end;
								 ls_AndCon1 := ' CONF_BRCH IN (' + sFBr_no + ')';
							 end;
						 end	else
							ls_AndCon1 := Format(' CONF_HEAD = ''%s'' ', [GT_USERIF.HD]);
					 end;
				// 본사관리자
			else
      end;
    end else
    if GT_SEL_BRNO.GUBUN = '1' then
		begin
			ls_AndCon1 := Format(' CONF_BRCH = ''%s'' ', [GT_SEL_BRNO.BrNo]);
			// 지사관리자
			ls_AndCon2 := Format(' AND CONF_HEAD = ''%s'' ',
        [func_search_hdNo(GT_SEL_BRNO.BrNo)]); // 본사코드
    end;

    if FormatDateTime('yyyymmdd', dtBrCallSt.Date) = StartDateTime('yyyymmdd') then
		begin
			ls_Table := 'CDMS_A01_TODAY';
    end else
    begin
			ls_Table := 'CDMS_A01';
			ls_AndCon2 := ' AND A.IN_DATE BETWEEN TO_DATE(''' +
				FormatDateTime('yyyymmdd', dtBrCallSt.Date) + '090000'',''yyyymmddHH24MISS'') '
        + 'AND TO_DATE(''' + FormatDateTime('yyyymmdd', dtBrCallEd.Date) + '090000'', ''yyyymmddHH24MISS'') ';
    end;

		fGet_BlowFish_Query(GSQ_BRCH_CALLCOUNT, sQueryTemp);
		if chk_Family.Checked then	//패밀리전체일경우
		begin
			sTmp := '';
//      cxSgHdOrder.BeginUpdate();
      try
        for i := 0 to scb_HdNo.Count -1 do
        begin
          giH0 := 0; giH1 := 0; giH2 := 0; giH3 := 0; giH4 := 0;
          giH5 := 0; giH6 := 0; giH7 := 0; giH8 := 0; giH9 := 0;

          if sTmp = scb_HdNo[i] then Continue;
          sTmp := scb_HdNo[i];
          ls_AndCon1 := Format(' CONF_HEAD = ''%s'' ', [sTmp]);

          if (GT_SEL_BRNO.GUBUN = '0') and (not Check_ALLHD(sTmp)) then
          begin
            slTmp := TStringList.Create;
            Try
              func_MngBranch(sTmp, slTmp);
              for j := 0 to slTmp.Count -1 do
              begin
                if j = 0 then sFBr_no := '''' + slTmp[j] + ''''
                else
                  sFBr_no := sFBr_no + ', ' + '''' + slTmp[j] + '''';
              end;
            Finally
              slTmp.Free;
            end;
            ls_AndCon1 := ' CONF_BRCH IN (' + sFBr_no + ')';
          end;

          ls_TxQry := Format(sQueryTemp, [ls_Table, '1=1 ', ls_AndCon1+ls_AndCon2]);//, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1])

          ls_TxLoad := GetSel01('Main' +'BRCALL', ls_TxQry);
          slReceive := TStringList.Create;
          try
            if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
            begin
              rv_str := slReceive[0];
              if rv_str <> '' then
              begin
                ls_rxxml := rv_str;
                Application.ProcessMessages;
                proc_recieve(ls_rxxml);
              end;
            end;
          finally
            Frm_Flash.Hide;
            FreeAndNil(slReceive);
          end;

          if giH0 > 0 then
          begin
            iRow := cxSgHdOrder.DataController.AppendRecord;
            SetGridData(cxSgHdOrder, iRow,  0, iRow+1);
            SetGridData(cxSgHdOrder, iRow,  1, scb_HdNm[i]);
            SetGridData(cxSgHdOrder, iRow,  2, sTmp);
            SetGridData(cxSgHdOrder, iRow,  3, '');
            SetGridData(cxSgHdOrder, iRow,  4, giH0); //총건수
            SetGridData(cxSgHdOrder, iRow,  5, giH1); //접수
            SetGridData(cxSgHdOrder, iRow,  6, giH2); //운행
            SetGridData(cxSgHdOrder, iRow,  7, giH3); //완료
            SetGridData(cxSgHdOrder, iRow,  8, giH4); //완료금액
            SetGridData(cxSgHdOrder, iRow,  9, giH5); //대기
            SetGridData(cxSgHdOrder, iRow, 10, giH6); //예약
            SetGridData(cxSgHdOrder, iRow, 11, giH7); //취소
            SetGridData(cxSgHdOrder, iRow, 12, giH8); //취소금액
            if giH0 = 0 then
            begin
              sCancelRate := 0;
            end else
            begin
              if GS_PRJ_AREA = 'S' then
                sCancelRate := roundto((giH7 / giH0 * 100), 0)
              else
                sCancelRate := roundto((giH7 / giH0 * 100), -1);
            end;
            SetGridData(cxSgHdOrder, iRow, 13, FloatToStr(sCancelRate)+'%'); //취소율
            SetGridData(cxSgHdOrder, iRow, 14, giH9); //문의
          end;
        end;
      finally
//        cxSgHdOrder.EndUpdate();
			end;
		end else
		begin
			if not Check_ID(GT_USERIF.ID, GT_SEL_BRNO.BrNo) then
				ls_TxQry := Format(sQueryTemp, [ls_Table, '1=1 ', ls_AndCon1+ls_AndCon2])//, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1])
			else
				ls_TxQry := Format(sQueryTemp, [ls_Table, 'A.CONF_BRCH &lt;&gt; ''E717'' ', ls_AndCon1+ls_AndCon2]);//, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1]);
			ls_TxLoad := GetSel01('Main' +'BRCALL', ls_TxQry);

			slReceive := TStringList.Create;
			try
				if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
				begin
					rv_str := slReceive[0];
					if rv_str <> '' then
					begin
						ls_rxxml := rv_str;
						Application.ProcessMessages;
						proc_recieve(ls_rxxml);
					end;
				end;
			finally
				Frm_Flash.Hide;
				FreeAndNil(slReceive);
			end;
		end;
		
	except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_BrWk;
var
  ls_TxLoad: string; // XML File Load
  rv_str: string;
  ls_rxxml: String;
  slReceive: TStringList;
  ErrCode: integer;
begin
  SetDebugeWrite('Main.proc_BrWk');
  try
    Screen.Cursor := crHourGlass;
    cxSgBrWk.DataController.SetRecordCount(0);

    ls_TxLoad := GTx_UnitXmlLoad('C018.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'Main' + 'BRWKCONNECT', [rfReplaceAll]);
    case StrToIntDef(GT_USERIF.LV, 0) of
      10:
        begin
          ls_TxLoad := StringReplace(ls_TxLoad, 'LevelString', '10', [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'HdNoString', '', [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'BrNoString', '', [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'CallCenterString', GT_USERIF.CT, [rfReplaceAll]);
        end;
      40:
        begin
          ls_TxLoad := StringReplace(ls_TxLoad, 'LevelString', '40', [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'HdNoString', '', [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'BrNoString', GT_USERIF.BR, [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'CallCenterString', '', [rfReplaceAll]);
        end;
      60:
        begin
          ls_TxLoad := StringReplace(ls_TxLoad, 'LevelString', '60', [rfReplaceAll]);
          if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
            ls_TxLoad := StringReplace(ls_TxLoad, 'HdNoString', GT_SEL_BRNO.HDNO, [rfReplaceAll])
          else
            ls_TxLoad := StringReplace(ls_TxLoad, 'HdNoString', GT_USERIF.HD, [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'BrNoString', '', [rfReplaceAll]);
          ls_TxLoad := StringReplace(ls_TxLoad, 'CallCenterString', '', [rfReplaceAll]);
        end;
    else
      Exit;
    end;

    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
					proc_recieve(ls_rxxml);
        end;
      end;
    finally
      Frm_Flash.Hide;
      FreeAndNil(slReceive);
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_bSSIOCTIRead(AStr: string);
var sStr, sData, sResult, sTmp : string;
begin
	try
		gsCIDMessage := AStr;//Socket.ReceiveText; // 전문읽기.

		if ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'J610')) or 
			 ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'Z780')) or
				(GT_USERIF.BR = 'B100')  then
		begin
			Log('proc_bSSIOCTIRead ', LOGDATAPATHFILE);  //천안로그 20191125 KHS
		end;

		sData := copy(AStr, 1, 77);
		if Length(sData) = 0 then Exit;

//		if gsCIDMsgFront <> gsCIDMessage then
		begin
			gsCIDMsgFront := gsCIDMessage;
			iSSIOCidHeartBeat := 0;
			if Copy(sData, 2, 4) = '8111' then    // 2601. 신규콜
			begin
				sResult := Copy(sData, 30, 2);    //'#00005001                    110234008522     16886618                      $'#$D#$A
        if Assigned(Frm_JON60) then
        begin
          Frm_JON60.gsResult := sResult;
          if sResult = '00' then
          begin
            sTmp := '1. 고객 ARS 청취중입니다';
            Frm_JON60.mmo_Result.lines.Add(sTmp);
            Frm_JON60.lb_Listen.caption := sTmp;
          end	else
  //				if sResult = '01' then
          begin
            Frm_JON60.lb_Listen.style.color := $004444FF;
            sTmp := '2. ARS 요청실패' + #13#10 + '  통화가 종료 되었는지 확인하세요.' + #13#10 + #13#10 + '[ARS 다시요청]버튼 클릭하세요.';
            Frm_JON60.btn_ARS.Visible := True;
            Frm_JON60.mmo_Result.lines.Add(sTmp);
            Frm_JON60.lb_Listen.caption := sTmp;
            Frm_JON60.proc_progress(1);
          end;
        end;
			end else
			if Copy(sData, 2, 4) = '2601' then    // 2601. 신규콜
      begin
				try
					sResult := Copy(sData, 30, 2);
					if sResult = '00' then
					begin
						GS_JONCidInput.PhoneNumber := Trim(Copy(AStr, 32, 15));  // 수신번호
						GS_JONCidInput.KeyNumber   := Trim(Copy(AStr, 62, 15));  // 대표번호
						GS_JONCidInput.CidCall     := True;
						
    				if GS_JONCidInput.PhoneNumber <> '' then
            begin
              // CID XE 서버와 SSIO서버에서 자료를 동시에 받을때 같은 자료이면 무시 처리 2초 사이에
							//--------------------------------------------------------------------
              if ( GS_NKTCidInput.KeyNumber <> '' ) And ( GT_NKTXE = 'NKT' ) then
              begin
                if ( GS_NKTCidInput.KeyNumber   = GS_JONCidInput.KeyNumber   ) And
                   ( GS_NKTCidInput.PhoneNumber = GS_JONCidInput.PhoneNumber ) then
                begin
                  if SecondsBetween(GS_NKTCidInput.InDate, Now) <= 2 then
                  begin
										GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
										GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;
										GS_NKTCidInput.InDate      := Now;
										GS_NKTCidInput.InDate      := Now;

										Exit;
									end;
								end;
							end;

							GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
							GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;
							GS_NKTCidInput.InDate      := Now;
							//--------------------------------------------------------------------
							TimerOCX.Enabled := True;

							if bSSIO_CTI.Socket.Connected then
              begin
                // 3601. 신규콜 응답 성공 패킷
								sStr := '#';
                sStr := sStr + '3601';
                sStr := sStr + Rpad('5001',   4, ' ');
								sStr := sStr + Rpad(''    ,  20, ' ');
                sStr := sStr + Rpad('00'  ,   2, ' ');
                sStr := sStr + Rpad(''    ,  15, ' ');
                sStr := sStr + Rpad(''    ,  15, ' ');
                sStr := sStr + Rpad(''    ,  15, ' ');
                sStr := sStr + '$';
                bSSIO_CTI.Socket.SendText(sStr);
                SetDebugeWrite('bSSIO_CTI Send: '+ sStr);
              end;
            end;
          end else
          begin
            if bSSIO_CTI.Socket.Connected then
            begin
              // 3601. 신규콜 응답 실패 패킷
              sStr := '#';
              sStr := sStr + '3601';
              sStr := sStr + Rpad('5001' ,   4, ' ');
              sStr := sStr + Rpad(''     ,  20, ' ');
              sStr := sStr + Rpad(sResult,   2, ' ');
              sStr := sStr + Rpad(''     ,  15, ' ');
              sStr := sStr + Rpad(''     ,  15, ' ');
              sStr := sStr + Rpad(''     ,  15, ' ');
              sStr := sStr + '$';
              bSSIO_CTI.Socket.SendText(sStr);
              SetDebugeWrite('bSSIO_CTI Send: '+ sStr);
            end;

    				ShowMessage('시사일오 CID 수신 실패!'  + #13#10 + fSSIO_ErrMsg(sResult));
            Exit;
          end;
  			except on E: Exception do
  				Assert(False, E.Message);
  			end;
			end else
			if Copy(sData, 2, 4) = '2602' then    // 2602. 팝업전송 신규콜
      begin
				try
					sResult := Copy(sData, 30, 2);
					if sResult = '00' then
					begin
						GS_JONCidInput.PhoneNumber := Trim(Copy(AStr, 32, 15));  // 수신번호
						GS_JONCidInput.KeyNumber   := Trim(Copy(AStr, 62, 15));  // 대표번호
						GS_JONCidInput.CidCall     := False;
						
    				if GS_JONCidInput.PhoneNumber <> '' then
            begin
              // CID XE 서버와 SSIO서버에서 자료를 동시에 받을때 같은 자료이면 무시 처리 2초 사이에
							//--------------------------------------------------------------------
              if ( GS_NKTCidInput.KeyNumber <> '' ) And ( GT_NKTXE = 'NKT' ) then
              begin
                if ( GS_NKTCidInput.KeyNumber   = GS_JONCidInput.KeyNumber   ) And
                   ( GS_NKTCidInput.PhoneNumber = GS_JONCidInput.PhoneNumber ) then
								begin
                  if SecondsBetween(GS_NKTCidInput.InDate, Now) <= 2 then
									begin
										GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
										GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;
										GS_NKTCidInput.InDate      := Now;
										Exit;
									end;
								end;
							end;

							GS_NKTCidInput.KeyNumber   := GS_JONCidInput.KeyNumber;
							GS_NKTCidInput.PhoneNumber := GS_JONCidInput.PhoneNumber;
							GS_NKTCidInput.InDate      := Now;
							//--------------------------------------------------------------------
    					TimerOCX.Enabled := True;

							if bSSIO_CTI.Socket.Connected then
              begin
                // 3601. 신규콜 응답 성공 패킷
								sStr := '#';
                sStr := sStr + '3601';
                sStr := sStr + Rpad('5001',   4, ' ');
                sStr := sStr + Rpad(''    ,  20, ' ');
                sStr := sStr + Rpad('00'  ,   2, ' ');
                sStr := sStr + Rpad(''    ,  15, ' ');
                sStr := sStr + Rpad(''    ,  15, ' ');
                sStr := sStr + Rpad(''    ,  15, ' ');
                sStr := sStr + '$';
                bSSIO_CTI.Socket.SendText(sStr);
                SetDebugeWrite('bSSIO_CTI Send: '+ sStr);
              end;
            end;
          end else
          begin
            if bSSIO_CTI.Socket.Connected then
            begin
              // 3601. 신규콜 응답 실패 패킷
              sStr := '#';
              sStr := sStr + '3601';
              sStr := sStr + Rpad('5001' ,   4, ' ');
              sStr := sStr + Rpad(''     ,  20, ' ');
              sStr := sStr + Rpad(sResult,   2, ' ');
              sStr := sStr + Rpad(''     ,  15, ' ');
              sStr := sStr + Rpad(''     ,  15, ' ');
              sStr := sStr + Rpad(''     ,  15, ' ');
              sStr := sStr + '$';
              bSSIO_CTI.Socket.SendText(sStr);
              SetDebugeWrite('bSSIO_CTI Send: '+ sStr);
            end;

    				ShowMessage('시사일오 CID 수신 실패!'  + #13#10 + fSSIO_ErrMsg(sResult));
            Exit;
          end;
  			except on E: Exception do
  				Assert(False, E.Message);
  			end;
			end else
  	  if Copy(sData, 2, 4) = '3501' then    // 3501. 신규콜
      begin
        sResult := Copy(sData, 30, 2);
        if sResult = '00' then
        begin

        end else
        begin
  				ShowMessage('전화걸기가 실패했습니다' + #13#10 + fSSIO_ErrMsg(sResult));
          Exit;
        end;
      end else
  	  if Copy(sData, 2, 4) = '9000' then    // 9000. Ping
      begin
        sResult := Copy(sData, 30, 2);
        if sResult = '00' then
        begin

        end else
        begin
  				ShowMessage(fSSIO_ErrMsg(sResult));
          Exit;
        end;
      end;
		end;

	except
		on e: Exception do
		begin
			sStr := 'proc_bSSIOCTIRead Error:' + e.Message;
			Assert(False, E.Message);
			GMessagebox(PChar(sStr), CDMSE);
		end;
	end;
end;

procedure TFrm_Main.proc_bubinlist_insert;
var
  ls_TxLoad: String;
  rv_str : string;
  ls_AndCon1, sQueryTemp : string;

  slReceive: TStringList;
	ErrCode: Integer;
	i : integer;
	sTmp, sBHdNo : string;
begin
  SetDebugeWrite('Main.proc_bubinlist_insert');
  try
    //법인명 가져오기
    case StrToIntDef(GT_USERIF.LV, 99) of
      10: ls_AndCon1 := Format(' WHERE BR_NO IN (SELECT BR_NO FROM CDMS_BRANCH WHERE CALLCENTER = ''%s'' AND USE_YN = ''y'') ', [GT_USERIF.CT]);
      40: ls_AndCon1 := Format(' WHERE BR_NO = ''%s'' OR BR_NO IN (SELECT BR_NO FROM CDMS_BRANCH WHERE CALLCENTER = ''%s'' AND USE_YN = ''y'') ', [GT_USERIF.BR, GT_USERIF.BR]);
			60: begin
						if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) And ( GT_SEL_BRNO.HDNO <> '') then     // 20120629 LYB
						begin
              sBHdNo := '';
							sTmp := '';
							for i := 0 to scb_HdNo.count -1 do
							begin
								if sBHdNo <> scb_HdNo[i] then
								begin
									if i = 0 then sTmp := sTmp + '''' + scb_HdNo[i] + '''' else sTmp := sTmp + ',' + '''' + scb_HdNo[i] + ''''; 
								end;
								sBHdNo := scb_HdNo[i];
							end;
							ls_AndCon1 := Format(' WHERE HD_NO in (%s) OR BR_NO IN (SELECT BR_NO FROM CDMS_BRANCH WHERE CALLCENTER IN (SELECT BR_NO FROM CDMS_BRANCH WHERE HD_NO in (%s) AND USE_YN = ''y'')) ', [sTmp, sTmp])
						end
						else
							ls_AndCon1 := Format(' WHERE HD_NO = ''%s'' OR BR_NO IN (SELECT BR_NO FROM CDMS_BRANCH WHERE CALLCENTER IN (SELECT BR_NO FROM CDMS_BRANCH WHERE HD_NO = ''%s'' AND USE_YN = ''y'')) ', [GT_USERIF.HD, GT_USERIF.HD]);
          end;
    end;

    fGet_BlowFish_Query(GSQ_BUBIN_LIST, sQueryTemp);
    ls_TxLoad := GetSel01('Main' + 'LISTBUBIN', Format(sQueryTemp, [ls_AndCon1]));

    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        proc_recieve(rv_str);
      end;
    finally
      Frm_Flash.Hide;
      FreeAndNil(slReceive);
    end;
  except
    on e: exception do
    begin
      ls_TxLoad := 'frmMain[proc_bubinlist_insert]:' + e.Message;
      Assert(False, E.Message);
      ShowMessage(ls_TxLoad);
    end;
  end;
end;

procedure TFrm_Main.proc_change_brNo;
Var LeftTreePtr : PTreeRec;
    ErrLine : String;
begin
  SetDebugeWrite('Main.proc_change_brNo');
  tmrDiffSosok.Enabled := False;
  if ( Assigned(gSosokName) ) And (gSosokName <> Nil) then
  begin
    gSosokName.Style.Color := clBtnFace;
    gSosokName.Style.TextColor := clWindowText;
    gSosokName := Nil;
    gSosokTime := 0;
  end;

  tmrDiffJSosok.Enabled := False;
  if ( Assigned(gSosokTabSheet) ) And (gSosokTabSheet <> Nil) then
  begin
    gSosokTabSheet.Caption := gSosokTabSheet.Hint;
		gSosokTabSheet := Nil;
    gSosokTime := 0;
  end;

	try
		if cxPageControl1.ActivePageIndex <= 0 then Exit;

		if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag < 20 then
    begin
      try
        LeftTreePtr := Tree_List.FocusedNode.Data;
        JON03MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag].HdNo  := LeftTreePtr.HDCode;
        JON03MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag].BrNo  := LeftTreePtr.BRCode;
        JON03MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag].Index := LeftTreePtr.FIndex;

				JON03MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag].AllSearch := mLEFT_SectionIndex = 0;
      except
        on e: exception do
        begin
          JON03MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag].Index := 0;

          Log('proc_change_brNo Error : Index 0 , Msg - ' + E.Message, LOGDATAPATHFILE);
          Assert(False, 'proc_change_brNo Error : Index 0 , Msg - ' + E.Message);
        end;
      end;
			if Tree_List.Tag = 0 then
      begin
				if Frm_Jon03[GI_JON03_LastFromIdx].pnl_KakaoList.Visible = False then //카카오 수주콜리스트 조회가 아니면
					Frm_Jon03[GI_JON03_LastFromIdx].rb_Search.Click;
				cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Caption := '접수-' + Trim(advTPTPna1.Hint);
        cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Hint    := '접수-' + Trim(advTPTPna1.Hint);
      end;

      if Tree_List.Tag = 1 then
      begin
				gSosokTabSheet := cxPageControl1.Pages[cxPageControl1.ActivePageIndex];
        tmrDiffJSosok.Enabled := True;
			end;
			Frm_Jon03[GI_JON03_LastFromIdx].LoadPayMethod_FastSearch15;
			Frm_Jon03[GI_JON03_LastFromIdx].lblSosokName.Caption := GetSosokInfo;
		end else
    if ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag > 20 ) And
       ( cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag < 26 ) then
    begin
      try
        LeftTreePtr := Tree_List.FocusedNode.Data;
        WORA1MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag-21].HdNo  := LeftTreePtr.HDCode;
        WORA1MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag-21].BrNo  := LeftTreePtr.BRCode;
        WORA1MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag-21].Index := LeftTreePtr.FIndex;
      except
        on e: exception do
        begin
          WORA1MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag-21].Index := 0;

          Log('proc_change_brNo Error : Index 1 , Msg - ' + E.Message, LOGDATAPATHFILE);
          Assert(False, 'proc_change_brNo Error : Index 1 , Msg - ' + E.Message);
        end;
      end;
      if Tree_List.Tag = 0 then
      begin
        Frm_WORA1[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag - 21].lblSosokNameA1.Caption := GetSosokInfo;
      end;

      if Tree_List.Tag = 1 then
      begin
        gSosokName := Frm_WORA1[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag - 21].lblSosokNameA1;
        tmrDiffSosok.Enabled := True;
      end;
    end else
    begin
      proc_FormCodeChange(cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag, 99);
      cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Hint := fGetHdBrGubunInfo;
    end;
  except
    on e: exception do
    begin
      Log('proc_change_brNo Error : GI_JON03_LastFromIdx - ' + ErrLine + ', Msg - ' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'proc_change_brNo Error : GI_JON03_LastFromIdx - ' + ErrLine + ', Msg - ' + E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_change_HdNo(AHdNo : string);
Var i, j : Integer;
    ls_Ins : String;
begin
  SetDebugeWrite('Main.proc_change_HdNo');
  try
    if ( IsFamily) Or ( GS_BRLISTVIEWMODE ) then     // 20120629 LYB
    begin
      if AHdNo <> '' then
      begin
        try
          i := 0;
          scb_FamilyBrCode.Clear;
          scb_FamilyBrName.Clear;
          scb_FamilyBranch.Clear;
          scb_FamilyWkBranchCode.Clear;
          scb_FamilyWkBranchName.Clear;
					scb_FamilyTaksong.Clear;
					scb_FamilyShuttle4.Clear;

          scb_FamilyDsBranchCode.Clear;
          scb_FamilyDsBranchName.Clear;
  				scb_FamilyKeyNumber.Clear;
          scb_FamilySituation_Tel.Clear;  // 지사대표번호- 상황실번호(엔젤 전화걸기-기사 에 사용)
					scb_FamilyHeadCode.Clear;

          cxGridQRate.DataController.SetRecordCount(0);    // 요금문의 자료 초기화 - 본사가 틀린 지사는 요금문의를 할수가 없음
          cxGridCShare.DataController.SetRecordCount(0);   // 신규접수공유 자료 초기화 - 본사가 틀린 지사는 공유를 할수가 없음

					while true do
					begin
						if GSL_HD_LIST[i, 0] = '' then
							break;

						try
							if AHdNo = GSL_HD_LIST[i, 5] then
							begin
								ls_Ins := GSL_HD_LIST[i, 0] + '(' + GSL_HD_LIST[i, 1] + ')';
								// 지사추가
								if (scb_FamilyBranch.IndexOf(ls_Ins) < 0) and (ls_Ins <> '()') then
								begin
									scb_FamilyBranch.Add(ls_Ins);
									scb_FamilyBrCode.add(GSL_HD_LIST[i, 0]); // 지사코드
									scb_FamilyBrName.Add(GSL_HD_LIST[i, 1]); // 지사명
									scb_FamilyTaksong.Add(GSL_HD_LIST[i, 19]);
									scb_FamilyShuttle4.Add(GSL_HD_LIST[i, 32]);

									if StrToInt(GSL_HD_LIST[i, 20]) > 0 then
									begin
										 scb_FamilyWkBranchCode.Add(GSL_HD_LIST[i, 0]);
										 scb_FamilyWkBranchName.Add(GSL_HD_LIST[i, 1]);
									end;
								end;

								if (0 > scb_KeyNumber.IndexOf(ls_Ins)) and (ls_Ins <> '') then
								begin
									scb_FamilyDsBranchCode.add(GSL_HD_LIST[i, 0]); // 대표번호 연동 지사코드 저장
									scb_FamilyDsBranchName.Add(GSL_HD_LIST[i, 1]); // 대표번호 연동 지사명 저장
									scb_FamilyKeyNumber.Add(Trim(GSL_HD_LIST[i, 2])); // 대표번호
                  scb_FamilySituation_Tel.Add(Trim(GSL_HD_LIST[i, 7]));  // 지사대표번호- 상황실번호(엔젤 전화걸기-기사 에 사용)
									scb_FamilyKeyNumberAuth.Add(GSL_HD_LIST[i, 38]);      //대표번호 증명원 여부
									scb_FamilyHeadCode.Add(GSL_HD_LIST[i, 5]); // 본사코드 CDS.
								end;
							end;
						finally
							Inc(i);
						end;
					end;
				except
          on e: exception do
          begin
            Assert(False, E.Message);
            ShowMessage('frmMain[FamilySel]: BrCord생성:' + e.message);
          end;
        end;
      end;

      if scbBranchInitChk then
      begin
        // 법인 리스트 변경
//;				proc_bubinlist_insert; 20161007 LYB

        // 고객등급 변경
//        Proc_CustGroup;       20161007 LYB

        // 기사 관련 지사 변
        if Assigned(Frm_WORA1[0]) then
          Frm_WORA1[0].pnlWkBrChange.Visible := False;

        if Assigned(Frm_AdminMap) then
        begin
          if Area_CenterName = '' then
            frm_AdminMap.lbl2.Caption := '기준위치 미설정. 시도청기준'
          else
            frm_AdminMap.lbl2.Caption := Area_CenterName;
        end;

        // 기사->공유콜배차현황의 차단할지사 변경
        if Assigned(Frm_WOR09) then Frm_WOR09.proc_init;

        if Assigned(Frm_AdminMap) then Frm_AdminMap.SetCboBrName;

				if ( IsFamily ) then     // 20120629 LYB
        begin
          cb_brName.Properties.Items.Clear;
          cb_brName.Properties.Items.Assign(scb_FamilyBrName);

					// 접수 검색의 지사 변경
					for j := 0 to JON03_MAX_CNT - 1 do
          begin
						if (Assigned(Frm_JON03[j])) and (Frm_JON03[j].cb_branch_Name2 <> nil) then
						begin
              // 접수 검색의 즉시 배차 지사 변경
              Frm_JON03[j].cb_branch_Name2.Properties.Items.Clear;
              Frm_JON03[j].cb_branch_Name2.Properties.Items.Assign(scb_FamilyBrName);
              Frm_JON03[j].cb_branch_Name2.ItemIndex := 0;
              Frm_JON03[j].InitBubInWindow(AHdNo);
            end;
          end;
    		end else
    		begin
          cb_brName.Properties.Items.Clear;
          cb_brName.Properties.Items.Assign(scb_BranchName);

          // 접수 검색의 지사 변경
          for j := 0 to JON03_MAX_CNT - 1 do
          begin
            if Assigned(Frm_JON03[j]) and (Frm_JON03[j].cb_branch_Name2 <> nil) then
            begin
              // 접수 검색의 즉시 배차 지사 변경
              Frm_JON03[j].cb_branch_Name2.Properties.Items.Clear;
              Frm_JON03[j].cb_branch_Name2.Properties.Items.Assign(scb_BranchName);
              Frm_JON03[j].cb_branch_Name2.ItemIndex := 0;
              Frm_JON03[j].InitBubInWindow(AHdNo);
            end;
          end;
    		end;

        // 해당접수화면에서 열린 접수창만 초기화
        for i := 0 to JON_MAX_CNT - 1 do
        begin
          if JON01MNG[i].Use = True then
          begin
            if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = Frm_JON01N[i].Jon03Tag then
            begin
              if (Pos('수정', Frm_Jon01N[i].Caption) = 0 ) then
              begin
                Frm_JON01N[i].cboBranch.Tag := 10;
                Frm_JON01N[i].cboBranch.Properties.Items.Clear;
                Frm_JON01N[i].slCboBranch.Clear;
                for j := 0 to scb_DsBranchCode.Count - 1 do
                begin
//                if AhdNo = scb_HeadCode[j] then
//                  Frm_JON01N[i].cboBranch.Properties.Items.Add(scb_DsBranchName[j] + '[' + scb_KeyNumber[j] + '] ' +
//                           Copy(scb_HeadCode[j] + '     ', 1, 5) + '.' + Copy(scb_DsBranchCode[j] + '     ', 1, 5));
                  Frm_JON01N[i].cboBranch.Properties.Items.Add(scb_DsBranchName[j] + '[' + scb_KeyNumber[j] + ']');
                  Frm_JON01N[i].slCboBranch.Add(Copy(scb_HeadCode[j] + '     ', 1, 5) + '.' + Copy(scb_DsBranchCode[j] + '     ', 1, 5));
                end;

                if Frm_JON01N[i].pJON01Dock.GUBUN = '0' then
                begin // 지사리스트에서 지사코드, 본사코드로 첫번째 대표번호 index를 찾는다.  CDS. 080818.
                  if not Frm_JON01N[i].Proc_HeNoBrNoListIdxFind(Trim(scb_FamilyHeadCode[0]), Trim(scb_FamilyDsBranchCode[0])) then
                  begin
                    Frm_JON01N[i].cboBranch.Tag := 10;      // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
                    Frm_JON01N[i].cboBranch.ItemIndex := 0; // 기본값으로 세팅한다.
                    Frm_JON01N[i].cboBranch.Tag := 0;       // 지사 선택 정보가 변경되면 일부 컨트롤을 초기화 되는 현상을 방지한다.
                  end;
                end;

                Frm_JON01N[i].cboBrOnly.Tag := 10;
                Frm_JON01N[i].cboBrOnly.Properties.Items.Clear;
                if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
                begin
                  Frm_JON01N[i].cboBrOnly.Properties.Items.Assign(scb_FamilyBrName);
                end else
                begin
                  Frm_JON01N[i].cboBrOnly.Properties.Items.Assign(scb_BranchName);
                end;
                Frm_JON01N[i].cboBrOnly.Properties.Items.Insert(0, '지사전체');
                Frm_JON01N[i].cboBrOnly.ItemIndex := 0;
                Frm_JON01N[i].cboBrOnly.Tag := 0;
              end;
            end;
          end;
        end;

        // 접수화면의 지사 변경
  {      for j := 0 to JON_MAX_CNT - 1 do
        begin
					if Assigned(Frm_JON01[j]) then
          begin
            Frm_JON01[j].cboBranch.Tag := 10;
            Frm_JON01[j].cboBranch.Properties.Items.Clear;
            for i := 0 to scb_DsBranchCode.Count - 1 do
            begin
              if AhdNo = scb_HeadCode[i] then
                Frm_JON01[j].cboBranch.Properties.Items.Add(scb_DsBranchName[i] + '[' + scb_KeyNumber[i] + '] ' +
                         Copy(scb_HeadCode[i] + '     ', 1, 5) + '.' + Copy(scb_DsBranchCode[i] + '     ', 1, 5));
            end;
            Frm_JON01[j].cboBranch.Tag := 0;
          end;
        end;}
        // - 접수 화면의 지사는 실행시의 접수 지사로 그대로 놔둔다.

        // 고객수정의 지사 정보 수정
        if Assigned(frm_CUT011) then
        begin
          frm_CUT011.cboBranch.Tag := 10;
          frm_CUT011.cboBranch.Properties.Items.Clear; // 지사명
          // 지사리스트를 담는다.
          for i := 0 to scb_DsBranchCode.Count - 1 do
          begin
            // 본사코드   // 지사코드   // 지사명   // 대표번호
              if scb_HdNo[scb_HdNo.IndexOf(AHdNo)] = scb_HeadCode[i] then
                frm_CUT011.cboBranch.Properties.Items.Add(scb_HeadCode[i] + '.' +
                  scb_DsBranchCode[i] + ': ' + scb_DsBranchName[i] + '[' +
                  scb_KeyNumber[i] + ']');
          end;
          if frm_CUT011.cboBranch.Properties.Items.Count > 0 then
            frm_CUT011.cboBranch.ItemIndex := 0;
          frm_CUT011.cboBranch.Tag := 0;
        end;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.Proc_Change_KeyNumber;
Var LeftTreePtr : PTreeRec;
    i : Integer;
begin
  SetDebugeWrite('Main.Proc_Change_KeyNumber');
	try
    if cxPageControl1.ActivePageIndex <= 0 then Exit;

    if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag < 20 then
    begin
      try
        LeftTreePtr := Tree_List.FocusedNode.Data;
        JON03MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag].KeyNumber := LeftTreePtr.KeyNumber;

        for i := 0 to JON_MAX_CNT - 1 do
        begin
          if JON01MNG[i].Use = True then
          begin
  					if cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag = Frm_JON01N[i].Jon03Tag then
            begin
              Frm_JON01N[i].Proc_BrNoListIdxFind(LeftTreePtr.BRCode, LeftTreePtr.KeyNumber);
            end;
          end;
        end;

        if JON03MNG[GI_JON03_LastFromIdx].Use then
        begin
          cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Caption := '접수-' + Trim(advTPTPna1.Hint);
          cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Hint    := '접수-' + Trim(advTPTPna1.Hint);
        end;
      Except
        on e: exception do
        begin
          JON03MNG[cxPageControl1.Pages[cxPageControl1.ActivePageIndex].Tag].Index := 0;

          Log('Proc_Change_KeyNumber Index 0 : ' + E.Message, LOGDATAPATHFILE);
          Assert(False, 'Proc_Change_KeyNumber Index 0 : ' + E.Message);
        end;
      end;
    end;
  except
    on e: exception do
    begin
      Log('Proc_Change_KeyNumber Error : ' + E.Message, LOGDATAPATHFILE);
      Assert(False, 'Proc_Change_KeyNumber Error : ' + E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_Change_Title;
var
  i: Integer;
  ln_envfile: TIniFile;
  sTemp: string;
begin
  SetDebugeWrite('Main.proc_Change_Title');
  try
    // 접속기사 그리드 컬럼이동 설정값 저장.
    ln_envfile := TIniFile.Create(ENVPATHFILE);
    try
      ln_envfile.EraseSection('WkConnect');
      ln_envFile.EraseSection('WkTitleSize');
      for i := 0 to tvWkConnect.ColumnCount - 1 do
      begin
        sTemp := tvWkConnect.Columns[i].DataBinding.FieldName;
        ln_envfile.WriteString('WkConnect', IntToStr(i), sTemp);

        if tvWkConnect.Columns[i].Visible then
          ln_envfile.WriteInteger('WkTitleSize', IntToStr(i), tvWkConnect.Columns[i].Width)
        else
          ln_envfile.WriteInteger('WkTitleSize', IntToStr(i), 0)
      end;
    finally
      FreeAndNil(ln_envfile);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_ChartBrCall_Init;
var i : integer;
begin
	gFromIdx := 0;
	btn_PlayBack.Enabled := False;
	btn_Play.Enabled := False;
	for I := 0 to 5 do
	begin
		gChartPageCnt[i] := 0;  //0:대표번호-일반, 1: 대표번호-실시간, 2:대표번호-취소, 3:지사-일반, 4: 지사-실시간, 5:지사-취소
		gChartNowPage[i] := 0;
	end;
end;

procedure TFrm_Main.proc_ChartBrCall_MakeGrid(AChartUnit : integer);
var i, iTmp, iTmp2, iRow : integer;
	slTmp0, slTmp1, slTmp2, slTmp3, slTmp4, slTmp5, slTmp6 : TStringList;
	dTmp : Double;
	iCol1, iCol2, iCol3, iCol4, iCol5, iCol6, iCol7, iCol8, iCol9, iCol10, iCol11, iCol12, iCol13 : integer;
begin
	SetDebugeWrite('Frm_Main.proc_ChartBrCall_MakeGrid');
	try
		iCol1 := cxSgBrOrder.GetColumnByFieldName('지사명').Index;
		iCol2 := cxSgBrOrder.GetColumnByFieldName('지사코드').Index;
		iCol3 := cxSgBrOrder.GetColumnByFieldName('대표번호').Index;
		iCol4 := cxSgBrOrder.GetColumnByFieldName('총건수').Index;
		iCol5 := cxSgBrOrder.GetColumnByFieldName('접수').Index;
		iCol6 := cxSgBrOrder.GetColumnByFieldName('운행').Index;
		iCol7 := cxSgBrOrder.GetColumnByFieldName('완료').Index;
		iCol8 := cxSgBrOrder.GetColumnByFieldName('대기').Index;
		iCol9 := cxSgBrOrder.GetColumnByFieldName('문의').Index;
		iCol10 := cxSgBrOrder.GetColumnByFieldName('예약').Index;
		iCol11 := cxSgBrOrder.GetColumnByFieldName('취소').Index;
		iCol12 := cxSgBrOrder.GetColumnByFieldName('취소율').Index;
		iCol13 := cxSgBrOrder.GetColumnByFieldName('No').Index;

		Try
			cxGridSetK1.BeginUpdate;
			cxGridSetK2.BeginUpdate;
			cxGridSetK3.BeginUpdate;
			for i := 1 to cxSgBrOrder.DataController.RecordCount -1 do
			begin
				///차트-대표번호별 그리드      cxGridSetK1.DataController.Values[i, 0]
				iRow := cxGridSetK1.DataController.AppendRecord;
				SetGridData(cxGridSetK1, iRow, 0, cxSgBrOrder.DataController.Values[i, iCol2]);
				SetGridData(cxGridSetK1, iRow, 1, cxSgBrOrder.DataController.Values[i, iCol3]);
				SetGridData(cxGridSetK1, iRow, 2, StrToIntDef(cxSgBrOrder.DataController.Values[i, iCol5], 0)
																				+ StrToIntDef(cxSgBrOrder.DataController.Values[i, iCol8], 0)
																				+ StrToIntDef(cxSgBrOrder.DataController.Values[i, iCol10], 0)); //접+대+예
 				SetGridData(cxGridSetK1, iRow, 3, StrToIntDef(cxSgBrOrder.DataController.Values[i, iCol6], 0)
  																			+ StrToIntDef(cxSgBrOrder.DataController.Values[i, iCol7], 0)); //운+완
				SetGridData(cxGridSetK1, iRow, 4, StrToIntDef(cxSgBrOrder.DataController.Values[i, iCol9], 0)
																				+ StrToIntDef(cxSgBrOrder.DataController.Values[i, iCol11], 0)); //문+취
				SetGridData(cxGridSetK1, iRow, 5, cxSgBrOrder.DataController.Values[i, iCol1]);
				SetGridData(cxGridSetK1, iRow, 6, i);
				SetGridData(cxGridSetK1, iRow, 7, cxSgBrOrder.DataController.Values[i, iCol4]);

				iRow := cxGridSetK2.DataController.AppendRecord;
				SetGridData(cxGridSetK2, iRow, 0, cxSgBrOrder.DataController.Values[i, iCol2]);
				SetGridData(cxGridSetK2, iRow, 1, cxSgBrOrder.DataController.Values[i, iCol3]);
				SetGridData(cxGridSetK2, iRow, 2, cxSgBrOrder.DataController.Values[i, iCol5]);  //접수
				SetGridData(cxGridSetK2, iRow, 3, cxSgBrOrder.DataController.Values[i, iCol6]); //운행
  			SetGridData(cxGridSetK2, iRow, 4, cxSgBrOrder.DataController.Values[i, iCol7]);  //완료
				SetGridData(cxGridSetK2, iRow, 5, cxSgBrOrder.DataController.Values[i, iCol11]);  //취소
				SetGridData(cxGridSetK2, iRow, 6, cxSgBrOrder.DataController.Values[i, iCol1]);
				SetGridData(cxGridSetK2, iRow, 7, i);
				SetGridData(cxGridSetK2, iRow, 8, cxSgBrOrder.DataController.Values[i, iCol4]);

				iRow := cxGridSetK3.DataController.AppendRecord;
				SetGridData(cxGridSetK3, iRow, 0, cxSgBrOrder.DataController.Values[i, iCol2]);
				SetGridData(cxGridSetK3, iRow, 1, cxSgBrOrder.DataController.Values[i, iCol3]);
				SetGridData(cxGridSetK3, iRow, 2, cxSgBrOrder.DataController.Values[i, iCol4]);  //총건수
				SetGridData(cxGridSetK3, iRow, 3, cxSgBrOrder.DataController.Values[i, iCol11]); //운행

				SetGridData(cxGridSetK3, iRow, 4, StrToFloat(StringReplace(cxSgBrOrder.DataController.Values[i, iCol12], '%', '', [rfReplaceAll])));  //취소율
				SetGridData(cxGridSetK3, iRow, 5, cxSgBrOrder.DataController.Values[i, iCol1]);
				SetGridData(cxGridSetK3, iRow, 6, i);

				if cbKindA22.Properties.Items.IndexOf(cxSgBrOrder.DataController.Values[i, iCol1]) < 0 then
					cbKindA22.Properties.Items.Add(cxSgBrOrder.DataController.Values[i, iCol1]);
				cbKindA23.Properties.Items.Add(cxSgBrOrder.DataController.Values[i, iCol3]);
			end;
    Finally
			cxGridSetK1.EndUpdate;
			cxGridSetK2.EndUpdate;
			cxGridSetK3.EndUpdate;
		End;

		slTmp0 := TStringList.Create; slTmp1 := TStringList.Create; slTmp2 := TStringList.Create; slTmp3 := TStringList.Create;
		slTmp4 := TStringList.Create; slTmp5 := TStringList.Create; slTmp6 := TStringList.Create;

		iTmp := 0;
		iTmp := cxGridSetK1.DataController.RecordCount div AChartUnit;
		if cxGridSetK1.DataController.RecordCount mod AChartUnit > 0 then iTmp := iTmp + 1;
		gChartPageCnt[0] := iTmp; //대표번호-일반모드 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetK2.DataController.RecordCount div AChartUnit;
		if cxGridSetK2.DataController.RecordCount mod AChartUnit > 0 then iTmp := iTmp + 1;
		gChartPageCnt[1] := iTmp; //대표번호-실시간 페이지 카운트

		iTmp := 0;
		iTmp := cxGridSetK3.DataController.RecordCount div AChartUnit;
		if cxGridSetK3.DataController.RecordCount mod AChartUnit > 0 then iTmp := iTmp + 1;
		gChartPageCnt[2] := iTmp; //대표번호-취소 페이지 카운트


		slTmp0.Clear; slTmp1.Clear; slTmp2.Clear; slTmp3.Clear; slTmp4.Clear; slTmp5.Clear; slTmp6.Clear;
		for i := 0 to cxGridSetK1.DataController.RecordCount-1 do
		begin
			iRow := slTmp4.IndexOf(cxGridSetK1.DataController.Values[i, 5]);
			if iRow < 0 then
			begin
				slTmp0.Add(cxGridSetK1.DataController.Values[i, 0]); //지사코드
				slTmp1.Add(cxGridSetK1.DataController.Values[i, 2]); //접+대+예
				slTmp2.Add(cxGridSetK1.DataController.Values[i, 3]); //운+완
				slTmp3.Add(cxGridSetK1.DataController.Values[i, 4]); //문+취
				slTmp4.Add(cxGridSetK1.DataController.Values[i, 5]); //지사명
				slTmp5.Add(cxGridSetK1.DataController.Values[i, 7]); //총건수
			end	else
			begin
				slTmp0[iRow] := cxGridSetK1.DataController.Values[i, 0]; //지사코드
				iTmp := StrToIntDef(slTmp1[iRow], 0) + StrToIntDef(cxGridSetK1.DataController.Values[i, 2], 0);
				slTmp1[iRow] := IntToStr(iTmp); //접+대+예
				iTmp := StrToIntDef(slTmp2[iRow], 0) + StrToIntDef(cxGridSetK1.DataController.Values[i, 3], 0);
				slTmp2[iRow] := IntToStr(iTmp);//운+완
				iTmp := StrToIntDef(slTmp3[iRow], 0) + StrToIntDef(cxGridSetK1.DataController.Values[i, 4], 0);
				slTmp3[iRow] := IntToStr(iTmp);//문+취
				slTmp4[iRow] := cxGridSetK1.DataController.Values[i, 5]; //지사명
				iTmp := StrToIntDef(slTmp5[iRow], 0) + StrToIntDef(cxGridSetK1.DataController.Values[i, 7], 0);
				slTmp5[iRow] := IntToStr(iTmp);//총건수
			end;
		end;
		cxGridSetG1.BeginUpdate;
		for i := 0 to slTmp0.Count-1 do
		begin
			iRow := cxGridSetG1.DataController.AppendRecord;
			SetGridData(cxGridSetG1, iRow, 0, slTmp0[i]);
			SetGridData(cxGridSetG1, iRow, 1, '');
			SetGridData(cxGridSetG1, iRow, 2, slTmp1[i]); //접+대+예
			SetGridData(cxGridSetG1, iRow, 3, slTmp2[i]); //운+완
			SetGridData(cxGridSetG1, iRow, 4, slTmp3[i]); //문+취
			SetGridData(cxGridSetG1, iRow, 5, slTmp4[i]);
			SetGridData(cxGridSetG1, iRow, 6, i);
			SetGridData(cxGridSetG1, iRow, 7, slTmp5[i]); //총건수
		end;
		cxGridSetG1.EndUpdate;

		iTmp := 0;
		iTmp := cxGridSetG1.DataController.RecordCount div AChartUnit;
		if cxGridSetG1.DataController.RecordCount mod AChartUnit > 0 then iTmp := iTmp + 1;
		gChartPageCnt[3] := iTmp; //지사-일반모드 페이지 카운트

		slTmp0.Clear; slTmp1.Clear; slTmp2.Clear; slTmp3.Clear; slTmp4.Clear; slTmp5.Clear; slTmp6.Clear;
		for i := 0 to cxGridSetK2.DataController.RecordCount-1 do
		begin
			iRow := slTmp5.IndexOf(cxGridSetK2.DataController.Values[i, 6]);
			if iRow < 0 then
			begin
				slTmp0.Add(cxGridSetK2.DataController.Values[i, 0]); //지사코드
				slTmp1.Add(cxGridSetK2.DataController.Values[i, 2]); //접수
				slTmp2.Add(cxGridSetK2.DataController.Values[i, 3]); //운행
				slTmp3.Add(cxGridSetK2.DataController.Values[i, 4]); //완료
				slTmp4.Add(cxGridSetK2.DataController.Values[i, 5]); //취소
				slTmp5.Add(cxGridSetK2.DataController.Values[i, 6]); //지사명
				slTmp6.Add(cxGridSetK2.DataController.Values[i, 8]); //총건수
			end	else
			begin
				slTmp0[iRow] := cxGridSetK2.DataController.Values[i, 0]; //지사코드
				iTmp := StrToIntDef(slTmp1[iRow], 0) + StrToIntDef(cxGridSetK2.DataController.Values[i, 2], 0);
				slTmp1[iRow] := IntToStr(iTmp); //접수

				iTmp := StrToIntDef(slTmp2[iRow], 0) + StrToIntDef(cxGridSetK2.DataController.Values[i, 3], 0);
				slTmp2[iRow] := IntToStr(iTmp);//운행

				iTmp := StrToIntDef(slTmp3[iRow], 0) + StrToIntDef(cxGridSetK2.DataController.Values[i, 4], 0);
				slTmp3[iRow] := IntToStr(iTmp);//완료

				iTmp := StrToIntDef(slTmp4[iRow], 0) + StrToIntDef(cxGridSetK2.DataController.Values[i, 5], 0);
				slTmp4[iRow] := IntToStr(iTmp);//완료

				slTmp5[iRow] := cxGridSetK2.DataController.Values[i, 6]; //지사명

				iTmp := StrToIntDef(slTmp6[iRow], 0) + StrToIntDef(cxGridSetK2.DataController.Values[i, 8], 0);
				slTmp6[iRow] := IntToStr(iTmp);//완료
			end;
		end;
		cxGridSetG2.BeginUpdate;
		for i := 0 to slTmp0.Count-1 do
		begin
			iRow := cxGridSetG2.DataController.AppendRecord;
			SetGridData(cxGridSetG2, iRow, 0, slTmp0[i]);
			SetGridData(cxGridSetG2, iRow, 1, '');
			SetGridData(cxGridSetG2, iRow, 2, slTmp1[i]); //접수
			SetGridData(cxGridSetG2, iRow, 3, slTmp2[i]); //운행
			SetGridData(cxGridSetG2, iRow, 4, slTmp3[i]); //완료
			SetGridData(cxGridSetG2, iRow, 5, slTmp4[i]); //취소
			SetGridData(cxGridSetG2, iRow, 6, slTmp5[i]); //지사명
			SetGridData(cxGridSetG2, iRow, 7, i);
			SetGridData(cxGridSetG2, iRow, 8, slTmp6[i]); //총건수
		end;
		cxGridSetG2.EndUpdate;
		iTmp := 0;
		iTmp := cxGridSetG2.DataController.RecordCount div AChartUnit;
		if cxGridSetG2.DataController.RecordCount mod AChartUnit > 0 then iTmp := iTmp + 1;
		gChartPageCnt[4] := iTmp; //지사-실시간모드 페이지 카운트

		slTmp0.Clear; slTmp1.Clear; slTmp2.Clear; slTmp3.Clear; slTmp4.Clear; slTmp5.Clear; slTmp6.Clear;
		for i := 0 to cxGridSetK3.DataController.RecordCount-1 do
		begin
			iRow := slTmp4.IndexOf(cxGridSetK3.DataController.Values[i, 5]);
			if iRow < 0 then
			begin
				slTmp0.Add(cxGridSetK3.DataController.Values[i, 0]); //지사코드
				slTmp1.Add(cxGridSetK3.DataController.Values[i, 2]); //총건수
				slTmp2.Add(cxGridSetK3.DataController.Values[i, 3]); //취소
				slTmp3.Add(cxGridSetK3.DataController.Values[i, 4]); //취소율
				slTmp4.Add(cxGridSetK3.DataController.Values[i, 5]); //지사명
			end	else
			begin
				slTmp0[iRow] := cxGridSetK3.DataController.Values[i, 0]; //지사코드
				iTmp := StrToIntDef(slTmp1[iRow], 0) + StrToIntDef(cxGridSetK3.DataController.Values[i, 2], 0);
				slTmp1[iRow] := IntToStr(iTmp); //총건수

				iTmp2 := StrToIntDef(slTmp2[iRow], 0) + StrToIntDef(cxGridSetK3.DataController.Values[i, 3], 0);
				slTmp2[iRow] := IntToStr(iTmp2);//취소

				dTmp := roundto((iTmp2 / iTmp * 100),-1);
				slTmp3[iRow] := FloatToStr(dTmp);//취소율

				slTmp4[iRow] := cxGridSetK3.DataController.Values[i, 5]; //지사명
			end;
		end;
		cxGridSetG3.BeginUpdate;
		for i := 0 to slTmp0.Count-1 do
		begin
			iRow := cxGridSetG3.DataController.AppendRecord;
			SetGridData(cxGridSetG3, iRow, 0, slTmp0[i]);
			SetGridData(cxGridSetG3, iRow, 1, '');
			SetGridData(cxGridSetG3, iRow, 2, slTmp1[i]); //총건수
			SetGridData(cxGridSetG3, iRow, 3, slTmp2[i]); //취소
			SetGridData(cxGridSetG3, iRow, 4, slTmp3[i]); //취소율
			SetGridData(cxGridSetG3, iRow, 5, slTmp4[i]); //지사명
			SetGridData(cxGridSetG3, iRow, 6, i);
		end;
		cxGridSetG3.EndUpdate;
		iTmp := 0;
		iTmp := cxGridSetG2.DataController.RecordCount div AChartUnit;
		if cxGridSetG2.DataController.RecordCount mod AChartUnit > 0 then iTmp := iTmp + 1;
		gChartPageCnt[5] := iTmp; //지사-취소모드 페이지 카운트

		slTmp0.Free; slTmp1.Free; slTmp2.Free; slTmp3.Free; slTmp4.Free; slTmp5.Free; slTmp6.Free;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.RbButton9Click(Sender: TObject);
begin
  SetDebugeWrite('Main.RbButton9Click');
  if cb_Search.ItemIndex = 7 then
   	proc_wkConnect(1)
  else
  begin
    proc_wkConnect(2);
    lbWkcountTime.Caption := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);
  end;
end;

procedure TFrm_Main.rb_HeadSetClick(Sender: TObject);
var sStr : string;
begin
  SetDebugeWrite('Main.rb_HeadSetClick');
  try
  	if TcxRadioButton(Sender).Checked then
  	begin
  		Sleep(500);
      if bNKT_4BS.Socket.Connected then
      begin
    		if TcxRadioButton(Sender).Caption = '헤드셋' then
    			GT_RECEIVER_KIND := '1'
    		else if TcxRadioButton(Sender).Caption = '수화기' then
    			GT_RECEIVER_KIND := '0';
    		sStr := '';
    		sStr := sStr + '211';
    		sStr := sStr + Rpad('C', 15, ' ');
    		sStr := sStr + Rpad('', 2, ' ');
    		sStr := sStr + '137';
    		sStr := sStr + Rpad('', 15, ' ');
    		sStr := sStr + Rpad('', 30, ' ');
    		sStr := sStr + Rpad('', 60, ' ');
    		sStr := sStr + GT_RECEIVER_KIND;
    		sStr := sStr + Rpad('', 1, ' ');
    		sStr := sStr + Rpad('', 15, ' ');
    		sStr := sStr + Rpad('', 15, ' ');

    		bNKT_4BS.Socket.SendText(sStr);
    		SetDebugeWrite('NKT Send: '+ sStr);
      end;
    	GS_EnvFile.WriteString('POSS_TEL', 'GT_RECEIVER_KIND', GT_RECEIVER_KIND);
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.rb_TimeClick(Sender: TObject);
begin
  SetDebugeWrite('Main.rb_TimeClick');
  GB_CALLMNG_DATEDISP := TcxRadioButton(Sender).Tag;
  GS_EnvFile.WriteInteger('COUNSEL', 'CallMngDateDisp', GB_CALLMNG_DATEDISP);
end;

procedure TFrm_Main.rchk_UseClick(Sender: TObject);
begin
  SetDebugeWrite('Main.rchk_UseClick');
  if rchk_Use.Checked then
  begin
    GS_EnvFile.WriteString('CID_COMM', 'CID_AUTO', 'Y');

    RB_SvrUse1.Enabled := True;
    RB_SvrUse2.Enabled := True;

    ed_CID_Ip1.Enabled := True;
    ed_CID_Ip2.Enabled := True;

    ed_Number.Enabled := True;

		btn_Win10CIDXE.Visible := True;
		btn_Win10CIDXE.Enabled := True;
		chkWin10CIDXE.Enabled := True;
  end else
  begin
    GS_EnvFile.WriteString('CID_COMM', 'CID_AUTO', 'N');

		if cxCIDList.ItemIndex = 3 then
    begin
      RB_SvrUse1.Enabled := False;
      RB_SvrUse2.Enabled := False;

      ed_CID_Ip1.Enabled := False;
      ed_CID_Ip2.Enabled := False;

      if cxChkCidSvrIPUse.Checked then ed_Number.Enabled := True
                                  else ed_Number.Enabled := False;
    end else
    begin
      RB_SvrUse1.Enabled := True;
      RB_SvrUse2.Enabled := True;

      ed_CID_Ip1.Enabled := True;
      ed_CID_Ip2.Enabled := True;

			ed_Number.Enabled := True;
    end;
		chkWin10CIDXE.Enabled := False;
		btn_Win10CIDXE.Enabled := False;
		btn_Win10CIDXE.Visible := False;
		lb_Win10CIDXE.Visible := False;
		chkWin10CIDXE.Visible := False;
  end;
end;

procedure TFrm_Main.rdo_Phone_UseClick(Sender: TObject);
begin
	if TcxRadioButton(Sender).Tag = 1 then
	begin
		btn_PBXLogIn.Caption := 'LOGIN-콜마너PHONE 실행';
		edt_PBXID.Enabled  := True;
		edt_PBXPW.Enabled  := True;
		edt_PBXEXT.Enabled := True;
	end	
	else
	begin
		btn_PBXLogIn.Caption := 'LOGIN정보저장';
		edt_PBXID.Enabled  := False;
		edt_PBXPW.Enabled  := False;
		edt_PBXEXT.Enabled := False;
	end;
end;

procedure TFrm_Main.ReadINISection(AHd_no: string);
begin
  SetDebugeWrite('Main.ReadINISection');
///////////////////////////////////////지사별 실시간 콜통계문자발송 설정.2012.08.27.KHS//////////////////////////////////////
  Try
		if not Assigned(GS_EnvFile) then
      GS_EnvFile := TIniFile.Create(ENVPATHFILE);

    GS_ONOFF_CHK       := GS_EnvFile.ReadBool(AHd_no, 'ONOFF_CHK', False);
    GS_MMS_STR         := GS_EnvFile.ReadString(AHd_no, 'MMS_STR', '');
    GS_ALL_CHK         := GS_EnvFile.ReadBool(AHd_no, 'ALL_CHK', False);
    GS_ALLBR_CHK       := GS_EnvFile.ReadBool(AHd_no, 'ALLBR_CHK', False);
    GS_BRNAME_CHK      := GS_EnvFile.ReadBool(AHd_no, 'BRNAME_CHK', False);
    GS_BRMTEL_CHK      := GS_EnvFile.ReadBool(AHd_no, 'BRMTEL_CHK', False);
    GS_TOTCNT_CHK      := GS_EnvFile.ReadBool(AHd_no, 'TOTCNT_CHK', False);
    GS_ORDER_CHK       := GS_EnvFile.ReadBool(AHd_no, 'ORDER_CHK', False);
    GS_STANDBY_CHK     := GS_EnvFile.ReadBool(AHd_no, 'STANDBY_CHK', False);
    GS_RUN_CHK         := GS_EnvFile.ReadBool(AHd_no, 'RUN_CHK', False);
    GS_FINISHED_CHK    := GS_EnvFile.ReadBool(AHd_no, 'FINISHED_CHK', False);
    GS_FINISHEDper_CHK := GS_EnvFile.ReadBool(AHd_no, 'FINISHEDper_CHK', False);
    GS_CANCEL_CHK      := GS_EnvFile.ReadBool(AHd_no, 'CANCEL_CHK', False);
    GS_CANCELPer_CHK   := GS_EnvFile.ReadBool(AHd_no, 'CANCELPer_CHK', False);
    GS_INQUIRE_CHK     := GS_EnvFile.ReadBool(AHd_no, 'INQUIRE_CHK', False);
    GS_BOOKING_CHK     := GS_EnvFile.ReadBool(AHd_no, 'BOOKING_CHK', False);
    GS_DATETIME_CHK    := GS_EnvFile.ReadBool(AHd_no, 'DATETIME_CHK', False);

    GS_FIR_CHK         := GS_EnvFile.ReadBool(AHd_no,   'FIR_CHK', False);
    GS_FIR_FTIME       := GS_EnvFile.ReadString(AHd_no, 'FIR_FTIME', '');
    GS_FIR_ETIME       := GS_EnvFile.ReadString(AHd_no, 'FIR_ETIME', '');
    GS_FIR_DTIME       := GS_EnvFile.ReadString(AHd_no, 'FIR_DTIME', '0');
    GS_SEC_CHK         := GS_EnvFile.ReadBool(AHd_no,   'SEC_CHK', False);
    GS_SEC_FTIME       := GS_EnvFile.ReadString(AHd_no, 'SEC_FTIME', '');
    GS_SEC_ETIME       := GS_EnvFile.ReadString(AHd_no, 'SEC_ETIME', '');
    GS_SEC_DTIME       := GS_EnvFile.ReadString(AHd_no, 'SEC_DTIME', '0');
    GS_THI_CHK         := GS_EnvFile.ReadBool(AHd_no,   'THI_CHK', False);
    GS_THI_FTIME       := GS_EnvFile.ReadString(AHd_no, 'THI_FTIME', '');
    GS_THI_ETIME       := GS_EnvFile.ReadString(AHd_no, 'THI_ETIME', '');
    GS_THI_DTIME       := GS_EnvFile.ReadString(AHd_no, 'THI_DTIME', '0');
    GS_FOU_CHK         := GS_EnvFile.ReadBool(AHd_no,   'FOU_CHK', False);
    GS_FOU_FTIME       := GS_EnvFile.ReadString(AHd_no, 'FOU_FTIME', '');
    GS_FOU_ETIME       := GS_EnvFile.ReadString(AHd_no, 'FOU_ETIME', '');
    GS_FOU_DTIME       := GS_EnvFile.ReadString(AHd_no, 'FOU_DTIME', '0');
    GS_FIF_CHK         := GS_EnvFile.ReadBool(AHd_no,   'FIF_CHK', False);
    GS_FIF_FTIME       := GS_EnvFile.ReadString(AHd_no, 'FIF_FTIME', '');
    GS_FIF_ETIME       := GS_EnvFile.ReadString(AHd_no, 'FIF_ETIME', '');
    GS_FIF_DTIME       := GS_EnvFile.ReadString(AHd_no, 'FIF_DTIME', '0');

    GS_TOTAL_CHK       := GS_EnvFile.ReadBool(AHd_no,   'TOTAL_CHK', False);
    GS_TOTAL_CNT       := GS_EnvFile.ReadString(AHd_no, 'TOTAL_CNT', '');
    GS_ORDERT_CHK      := GS_EnvFile.ReadBool(AHd_no,   'ORDERT_CHK', False);
    GS_ORDERT_CNT      := GS_EnvFile.ReadString(AHd_no, 'ORDERT_CNT', '');
    GS_CANCELT_CHK     := GS_EnvFile.ReadBool(AHd_no,   'CANCELT_CHK', False);
    GS_CANCELT_PER     := GS_EnvFile.ReadString(AHd_no, 'CANCELT_PER', '');

    GS_HEAD_NAME       := GS_EnvFile.ReadString(AHd_no, 'HEAD_NAME', '');
    GS_HEAD_NO         := GS_EnvFile.ReadString(AHd_no, 'HEAD_NO', '');
    GS_BRNO_LIST       := GS_EnvFile.ReadString(AHd_no, 'BRNO_LIST', '');
    GS_BRNM_LIST       := GS_EnvFile.ReadString(AHd_no, 'BRNM_LIST', '');
    GS_BRTEL_LIST      := GS_EnvFile.ReadString(AHd_no, 'BRTEL_LIST', '');
    GS_RECEIVER_TEL    := GS_EnvFile.ReadString(AHd_no, 'RECEIVER_TEL', '');
    GS_SEND_TEL        := GS_EnvFile.ReadString(AHd_no, 'SEND_TEL', '');

    if GS_ONOFF_CHK then trmAUTOSMS.Enabled := True;
  except
  end;
///////////////////////////////////////지사별 실시간 콜통계문자발송 설정.2012.08.27.KHS//////////////////////////////////////
end;

procedure TFrm_Main.RequestDataArea(AcxComboGugun: TcxComboBox;
  const ASido: string; AGugun: string; AUseAll: Boolean);
var
  TxData, TxQry: string;
  RxData: msDomDocument;
  I: Integer;
  lst_Result: IXMLDomNodeList;
begin
  SetDebugeWrite('Main.RequestDataArea');
  try
    if (ASido = '전체') then
    begin
      AcxComboGugun.Properties.Items.Text := '전체';
      AcxComboGugun.ItemIndex := 0;
      Exit;
    end;

    RxData := ComsDomDocument.Create;
    try
      TxData := GTx_UnitXmlLoad('C064N1.xml');

      TxData := ReplaceAll(TxData, 'cityStr',   ASido);
      TxData := ReplaceAll(TxData, 'wardStr',   AGugun);

      TxData := StringReplace(TxData, 'QueryString', TxQry, [rfReplaceAll]);

      if RequestDataBase(TxData, RxData) then
      begin
        if AGugun = '' then
        begin
          lst_Result := RxData.documentElement.selectNodes('/cdms/Service/Response/Ward');

          AcxComboGugun.Properties.Items.Clear;
          if AUseAll then
            AcxComboGugun.Properties.Items.Add('전체');
          for I := 0 to lst_Result.length - 1 do
          begin
            AcxComboGugun.Properties.Items.Add(lst_Result.item[I].Text);
          end;

          if AcxComboGugun.Properties.Items.Count > 0 then
            AcxComboGugun.ItemIndex := 0;
        end;
      end;
    finally
      RxData := Nil;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.RequestDataBase(ATxData: string;
  var ARxDataDom: msDomDocument): Boolean;
var
  StrList: TStringList;
  ErrCode: Integer;
  ErrorCode, RxData: string;
begin
  Result := False;
  try
    ATxData := StringReplace(ATxData, 'UserIDString',     GT_USERIF.ID, [rfReplaceAll]);
    ATxData := StringReplace(ATxData, 'ClientVerString',  VERSIONINFO, [rfReplaceAll]);

    StrList := TStringList.Create;
    Screen.Cursor := crHourGlass;
    try
      if not dm.SendSock(ATxData, StrList, ErrCode, False) then
      begin
        GMessagebox('데이터 전송에 실패했습니다.'#13#10'다시시도 하세요.', CDMSE);
        Exit;
      end;

      try
        if StrList.Count = 0 then
        begin
          GMessagebox('검색된 데이터가 없습니다.', CDMSE);
          Exit;
        end;

        RxData := StrList[0];
        if not ARxDataDom.loadXML(RxData) then
        begin
          GMessagebox('수신데이터가 잘못되었습니다.[XML Format error]', CDMSE);
          Exit;
        end;

        ErrorCode := GetXmlErrorCode(RxData);
        if ErrorCode <> '0000' then
        begin
          GMessagebox(Format('데이터 조회 중 오류가 발생했습니다.'#13#10'[오류내용: %s]', [GetXmlErrorMsg(RxData)]), CDMSE);
          Exit;
        end;

        Result := True;
      except on E: Exception do
        begin
          Assert(False, E.Message);
          GMessagebox(Format('데이터 조회 중 오류가 발생했습니다.'#13#10'[오류내용: %s]', [E.Message]), CDMSE);
        end;
      end;
    finally
      Frm_Flash.Hide;
      StrList.Free;
      Screen.Cursor := crDefault;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_recieve(ls_rxxml: string);
var
  xdom: msDomDocument;
	lst_Result, lst_Result1: IXMLDomNodeList;
	ls_ClientKey, ls_Msg_Err, sTemp, sShareNum, sInCall, sOutCall, sRate: string;
	ls_Rcrd, ls_SubArea, slTemp, slTemp1, slTemp2 : TStringList;
	i, j, k, iRow, iSum, iIndex, iCnt, iWKname, iTmp: Integer;
	iCancelCnt, iTotal: Integer;
	hdname, tmpStr: string;
	sCancelRate : Double;
	iwkTitle: array[0..24] of integer;
	A, fIdx :Integer;
	AView: TcxCustomGridTableView;
	sGstr, sWK_POI, sDate, sTmp : string;
	iTitle: array[0..8] of integer;
begin
	SetDebugeWrite('Frm_Main.proc_recieve');
	xdom := ComsDomDocument.Create;
  try
    try
      if not xdom.loadXML(ls_rxxml) then
      begin
  			advTPTPna2.Enabled := True;
  			Exit;
      end;

      ls_MSG_Err := GetXmlErrorCode(ls_rxxml);
      if ('0000' = ls_MSG_Err) then
      begin
        ls_ClientKey := GetXmlClientKey(ls_rxxml);
        ls_ClientKey := Copy(ls_ClientKey, 5, Length(ls_ClientKey) - 4);
        if ls_ClientKey = 'LISTBUBIN' then
        begin
          GT_BUBIN_INFO.brNo_KeyNum.Clear;
          GT_BUBIN_INFO.cbcode.Clear;
          GT_BUBIN_INFO.cbEtc.Clear;
          GT_BUBIN_INFO.cbCorpNm.Clear;
          GT_BUBIN_INFO.cbDeptNm.Clear;
          GT_BUBIN_INFO.cbSCorpNm.Clear;
          GT_BUBIN_INFO.cbSDeptNm.Clear;
          GT_BUBIN_INFO.cbPayMethod.Clear;
          GT_BUBIN_INFO.cbCustYn.Clear;
          GT_BUBIN_INFO.cbUseYn.Clear;
  				lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
          if lst_Result.length > 0 then
          begin
            ls_Rcrd := TStringList.Create;
            try
              for i := 0 to lst_Result.length - 1 do
  						begin
  							GetTextSeperationEx('│', lst_Result.item[i].attributes.getNamedItem('Value').Text, ls_Rcrd);
                if ls_Rcrd.Count <= 1 then Continue;

                GT_BUBIN_INFO.brNo_KeyNum.Add(Rpad(ls_Rcrd[0], 5, ' ') + Rpad(ls_Rcrd[1], 15, ' '));
                GT_BUBIN_INFO.cbcode.Add(ls_Rcrd[2] + ',' + ls_Rcrd[0]);
								sTemp := Rpad(ls_Rcrd[3], 60, ' ') + Rpad(ls_Rcrd[4], 60, ' ') +
                         Rpad(ls_Rcrd[5], 30, ' ') + Rpad(ls_Rcrd[6], 30, ' ') +
                         ls_Rcrd[7] + ls_Rcrd[8] + ls_Rcrd[9] + ls_Rcrd[10];
                GT_BUBIN_INFO.cbEtc.Add(sTemp);
                GT_BUBIN_INFO.cbCorpNm.Add(CutString(ls_Rcrd[3], 60));
                GT_BUBIN_INFO.cbDeptNm.Add(CutString(ls_Rcrd[4], 60));
                GT_BUBIN_INFO.cbSCorpNm.Add(CutString(ls_Rcrd[5], 30));
                GT_BUBIN_INFO.cbSDeptNm.Add(CutString(ls_Rcrd[6], 30));
                GT_BUBIN_INFO.cbPayMethod.Add(ls_Rcrd[7]);
                GT_BUBIN_INFO.cbCustYn.Add(ls_Rcrd[8]);
                GT_BUBIN_INFO.cbUseYn.Add(ls_Rcrd[9]);
              end;
            finally
              ls_Rcrd.Free;
            end;
          end;
        end else
        if ls_ClientKey = 'WKCOUNT' then
        begin
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
            ls_Rcrd := TStringList.Create;
            try
              lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
              GetTextSeperationEx('│', lst_Result.item[0].attributes.getNamedItem('Value').Text, ls_Rcrd);
              lbWknormalcy.Caption := ls_Rcrd[1];
              GetTextSeperationEx('│', lst_Result.item[1].attributes.getNamedItem('Value').Text, ls_Rcrd);
              lbWkToday.Caption := ls_Rcrd[1];
  						GetTextSeperationEx('│', lst_Result.item[2].attributes.getNamedItem('Value').Text, ls_Rcrd);
  						lbWkConnect_order.Caption := ls_Rcrd[1];
  						GetTextSeperationEx('│', lst_Result.item[3].attributes.getNamedItem('Value').Text, ls_Rcrd);
  						lbWkConnect.Caption := ls_Rcrd[1];
  						lbWkRun.Caption := IntToStr(StrToIntDef(lbWkToday.Caption, 0) - StrToIntDef(lbWkConnect_order.Caption, 0));
              lbWkNoToday.Caption := IntToStr(StrToIntDef(lbWknormalcy.Caption, 0)
                                            - StrToIntDef(lbWkToday.Caption, 0));
  					finally
              ls_Rcrd.Free;
            end;
          end;
          Application.ProcessMessages;
          proc_wkConnect(2);
        end else
				if ls_ClientKey = 'BRCALL' then        //지사콜
				begin
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
						cbKindA22.Properties.Items.Clear;
						cbKindA22.Properties.Items.Add('지사전체');
						cbKindA23.Properties.Items.Clear;
						cbKindA23.Properties.Items.Add('대표번호전체');

						lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
						cxSgBrOrder.BeginUpdate;
						ls_Rcrd := TStringList.Create;
						try
              // 처음 한번만 합계 Row 추가및 초기화
              if cxSgBrOrder.DataController.RecordCount = 0 then
              begin
                giS0 := 0; giS1 := 0; giS2 := 0; giS3 := 0; giS4 := 0;
                giS5 := 0; giS6 := 0; giS7 := 0; giS8 := 0; giS9 := 0;
                cxSgBrOrder.DataController.AppendRecord;
              end;
              for i := 0 to lst_Result.length - 1 do
							begin
                GetTextSeperationEx('│', lst_Result.item[i].attributes.getNamedItem('Value').Text, ls_Rcrd);
								iRow := cxSgBrOrder.DataController.AppendRecord;
								ls_Rcrd.Insert(0, IntToStr(iRow));
								// 1 Record 추가
								Application.ProcessMessages;
                for J := 4 to 14 do
									if ls_Rcrd[J] = '' then
                    ls_Rcrd[J] := '0';

                iCancelCnt := StrToIntDef(ls_Rcrd[13], 0);
                iTotal := StrToIntDef(ls_Rcrd[4], 0);
                if iTotal = 0 then
                begin
                  sCancelRate := 0;
                end else
                begin
              		if GS_PRJ_AREA = 'S' then
              			sCancelRate := roundto((iCancelCnt / iTotal * 100), 0)
              		else
              			sCancelRate := roundto((iCancelCnt / iTotal * 100), -1);
                end;

								SetGridData(cxSgBrOrder, iRow, 0, ls_Rcrd[0]);
								SetGridData(cxSgBrOrder, iRow, 1, ls_Rcrd[1]);
								SetGridData(cxSgBrOrder, iRow, 2, ls_Rcrd[2]);
								SetGridData(cxSgBrOrder, iRow, 3, strtocall(ls_Rcrd[3]));
								SetGridData(cxSgBrOrder, iRow, 4, StrToIntDef(ls_Rcrd[4], 0));  //총건수
                giH0 := giH0 + StrToIntDef(ls_Rcrd[4], 0);
                giS0 := giS0 + StrToIntDef(ls_Rcrd[4], 0);
								SetGridData(cxSgBrOrder, iRow, 5, StrToIntDef(ls_Rcrd[5], 0));  //접수
                giH1 := giH1 + StrToIntDef(ls_Rcrd[5], 0);
                giS1 := giS1 + StrToIntDef(ls_Rcrd[5], 0);
								if not chkBrCallFinAndRun.Checked then
                begin
									SetGridData(cxSgBrOrder, iRow, 6, StrToIntDef(ls_Rcrd[6], 0)); //운행
                  giH2 := giH2 + StrToIntDef(ls_Rcrd[6], 0);
                  giS2 := giS2 + StrToIntDef(ls_Rcrd[6], 0);
                end else
                begin
									SetGridData(cxSgBrOrder, iRow, 6, 0);         //운행
                end;

								if not chkBrCallFinAndRun.Checked then
                begin
									SetGridData(cxSgBrOrder, iRow, 7, StrToIntDef(ls_Rcrd[8], 0));  //완료
									SetGridData(cxSgBrOrder, iRow, 8, StrToInt64Def(ls_Rcrd[9], 0));  //완료금액

                  giH3 := giH3 + StrToIntDef(ls_Rcrd[8], 0);
                  giH4 := giH4 + StrToInt64Def(ls_Rcrd[9], 0);
                  giS3 := giS3 + StrToIntDef(ls_Rcrd[8], 0);
                  giS4 := giS4 + StrToInt64Def(ls_Rcrd[9], 0);
								end else
                begin
									SetGridData(cxSgBrOrder, iRow, 7, StrToIntDef(ls_Rcrd[6], 0) + StrToIntDef(ls_Rcrd[8], 0)); //운행+완료
									SetGridData(cxSgBrOrder, iRow, 8, StrToInt64Def(ls_Rcrd[7], 0) + StrToInt64Def(ls_Rcrd[9], 0)); //운행+완료금액

                  giH3 := giH3 + StrToIntDef(ls_Rcrd[6], 0) + StrToIntDef(ls_Rcrd[8], 0);
                  giH4 := giH4 + StrToIntDef(ls_Rcrd[7], 0) + StrToIntDef(ls_Rcrd[9], 0);
                  giS3 := giS3 + StrToIntDef(ls_Rcrd[6], 0) + StrToIntDef(ls_Rcrd[8], 0);
                  giS4 := giS4 + StrToInt64Def(ls_Rcrd[7], 0) + StrToInt64Def(ls_Rcrd[9], 0);
                end;
								SetGridData(cxSgBrOrder, iRow,  9, StrToIntDef(ls_Rcrd[10], 0)); //대기
                giH5 := giH5 + StrToIntDef(ls_Rcrd[10], 0);
                giS5 := giS5 + StrToIntDef(ls_Rcrd[10], 0);
								SetGridData(cxSgBrOrder, iRow, 10, StrToIntDef(ls_Rcrd[12], 0)); //예약
                giH6 := giH6 + StrToIntDef(ls_Rcrd[12], 0);
                giS6 := giS6 + StrToIntDef(ls_Rcrd[12], 0);
								SetGridData(cxSgBrOrder, iRow, 11, StrToIntDef(ls_Rcrd[13], 0)); //취소
                giH7 := giH7 + StrToIntDef(ls_Rcrd[13], 0);
                giS7 := giS7 + StrToIntDef(ls_Rcrd[13], 0);
								SetGridData(cxSgBrOrder, iRow, 12, StrToInt64Def(ls_Rcrd[14], 0)); //취소금액
                giH8 := giH8 + StrToIntDef(ls_Rcrd[14], 0);
                giS8 := giS8 + StrToIntDef(ls_Rcrd[14], 0);
								SetGridData(cxSgBrOrder, iRow, 13, FloatToStr(sCancelRate)+'%'); //취소율
								SetGridData(cxSgBrOrder, iRow, 14, StrToIntDef(ls_Rcrd[11], 0)); //문의
                giH9 := giH9 + StrToIntDef(ls_Rcrd[11], 0);
                giS9 := giS9 + StrToIntDef(ls_Rcrd[11], 0);
							end;
						finally
							ls_Rcrd.Free;
						end;

            SetGridData(cxSgBrOrder, 0,  4, giS0); //총건수
   					SetGridData(cxSgBrOrder, 0,  5, giS1); //접수
            SetGridData(cxSgBrOrder, 0,  6, giS2); //운행
						SetGridData(cxSgBrOrder, 0,  7, giS3); //완료
						SetGridData(cxSgBrOrder, 0,  8, giS4); //완료금액
            SetGridData(cxSgBrOrder, 0,  9, giS5); //대기
            SetGridData(cxSgBrOrder, 0, 10, giS6); //예약
            SetGridData(cxSgBrOrder, 0, 11, giS7); //취소
            SetGridData(cxSgBrOrder, 0, 12, giS8); //취소금액
            if giS0 = 0 then
            begin
              sCancelRate := 0;
            end else
            begin
              if GS_PRJ_AREA = 'S' then
                sCancelRate := roundto((giS7 / giS0 * 100), 0)
              else
                sCancelRate := roundto((giS7 / giS0 * 100), -1);
            end;

            SetGridData(cxSgBrOrder, 0, 13, FloatToStr(sCancelRate)+'%'); //취소율
            SetGridData(cxSgBrOrder, 0, 14, giS9); //문의

						cxSgBrOrder.EndUpdate;
            TcxGridDataRow(cxSgBrOrder.ViewData.Rows[0]).FixedState := rfsFixedToTop;

						cbKindA22.Tag := 99;
						cbKindA22.ItemIndex := 0;
						cbKindA23.ItemIndex := 0;
						cbKindA24.ItemIndex := 0;
						cbKindA25.ItemIndex := 0;

						cbKindA22.Tag := 0;
						if btnChartShow2.Caption = '그래프닫기' then
						begin
							gChartUnitCntAC := 7;  //바 그래프는 5
							gChartUnitCntB := 5;
							if cbChartKindA2.ItemIndex = 1 then iTmp := gChartUnitCntB else iTmp := gChartUnitCntAC;

							proc_ChartBrCall_Init; //차트 공통변수 초기화
							proc_ChartBrCall_MakeGrid(iTmp);

							if cbKindA21.ItemIndex = 0 then
							begin
								if cxGridSetG1.DataController.RecordCount > iTmp then btn_Play.Enabled := True;
								lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[3]);
							end	else
							begin
								if cxGridSetK1.DataController.RecordCount > iTmp then btn_Play.Enabled := True;
								lbPage.Caption := '1 / ' + IntToStr(gChartPageCnt[0]);
							end;
							cbKindA22.Tag := 99;
							cbKindA22.ItemIndex := 0;
							cbKindA23.ItemIndex := 0;
							cbKindA24.ItemIndex := 0;
							cbKindA25.ItemIndex := 0;

							cbKindA22.Tag := 0;

							gFromIdx := 0;
							btn_Play.Tag := 1;
							btn_PlayBack.Tag := 0; //지사-일반조회
							pnl_ChartBrCall.Height := advTPTPna3.Height Div 3;
							gPnl_ChartBrCallHeight := advTPTPna3.Height Div 3;
							btnChartShow2.Caption := '그래프닫기';
							btnChartA2.Click;
            end;
					end;
				end else
				if ls_ClientKey = 'BRCALL_SMS' then
        begin
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
            ls_Rcrd := TStringList.Create;
            try
							FOrderTotal.BrTOT   := '';            //총건수
              FOrderTotal.BrOrder := '';            //접수
              FOrderTotal.BrRun   := '';     // 운행
              FOrderTotal.Br_Complete := '';       //완료
              FOrderTotal.BrStandby   := '';       //대기
              FOrderTotal.BrINQUIRE   := '';       //문의
              FOrderTotal.BrBooking   := '';       //예약
              FOrderTotal.BrCancel    := '';       //취소
              if not GS_ALLBR_CHK then
              begin
                for i := 0 to lst_Result.length - 1 do
                begin
                  GetTextSeperationEx('│', lst_Result.item[i].attributes.getNamedItem('Value').Text, ls_Rcrd);
                  ls_Rcrd.Insert(0, IntToStr(i + 1));

                  Application.ProcessMessages;
                  for J := 4 to 11 do
                    if ls_Rcrd[J] = '' then
                      ls_Rcrd[J] := '0';

                  iCancelCnt := StrToIntDef(ls_Rcrd[11], 0);
                  iTotal := StrToIntDef(ls_Rcrd[4], 0);
									if iTotal = 0 then
                    sCancelRate := 0
  								else
  								begin
  									if GS_PRJ_AREA = 'S' then
  										sCancelRate := round(iCancelCnt / iTotal * 100)
  									else
  										sCancelRate := roundto((iCancelCnt / iTotal * 100), -1)
  								end;

                  FOrderTotal.BrNM := ls_Rcrd[1];   //지사명
                  FOrderTotal.BrNO := ls_Rcrd[2];   //지사코드
                  FOrderTotal.BrTel := ls_Rcrd[3];  //대표번호
                  FOrderTotal.BrTOT := ls_Rcrd[4];              //총건수
                  FOrderTotal.BrOrder := ls_Rcrd[5];            //접수
                  FOrderTotal.BrRun := ls_Rcrd[6];              // 운행
                  FOrderTotal.Br_Complete := ls_Rcrd[7];        //완료
                  FOrderTotal.Br_CompletePer := FormatFloat('#,##0.#', (StrToFloat(FOrderTotal.Br_Complete) / StrToFloat(FOrderTotal.BrOrder)) * 100);//완료율
                  FOrderTotal.BrStandby := ls_Rcrd[8];          //대기
                  FOrderTotal.BrINQUIRE := ls_Rcrd[9];          //문의
                  FOrderTotal.BrBooking := ls_Rcrd[10];         //예약
                  FOrderTotal.BrCancel := ls_Rcrd[11];          //취소
                  FOrderTotal.BrCancelPer := FormatFloat('#,##0.#', sCancelRate);       //취소율

                  MakeSMS(FOrderTotal);
                end;
              end else
              if GS_ALLBR_CHK then
              begin
                for i := 0 to lst_Result.length - 1 do
                begin
                  GetTextSeperationEx('│', lst_Result.item[i].attributes.getNamedItem('Value').Text, ls_Rcrd);
                  ls_Rcrd.Insert(0, IntToStr(i + 1));

                  Application.ProcessMessages;
                  for J := 4 to 11 do
                    if ls_Rcrd[J] = '' then
                      ls_Rcrd[J] := '0';

                  if i = 0 then
                  begin
                    FOrderTotal.BrNM  := ls_Rcrd[1];   //지사명
                    FOrderTotal.BrNO  := ls_Rcrd[2];   //지사코드
                    FOrderTotal.BrTel := ls_Rcrd[3];  //대표번호
                  end;
                  FOrderTotal.BrTOT   := IntToStr(StrToIntDef(FOrderTotal.BrTOT, 0) + StrToIntDef(ls_Rcrd[4], 0));              //총건수
                  FOrderTotal.BrOrder := IntToStr(StrToIntDef(FOrderTotal.BrOrder, 0) + StrToIntDef(ls_Rcrd[5], 0));            //접수
                  FOrderTotal.BrRun   := IntToStr(StrToIntDef(FOrderTotal.BrRun, 0) + StrToIntDef(ls_Rcrd[6], 0));              // 운행
                  FOrderTotal.Br_Complete    := IntToStr(StrToIntDef(FOrderTotal.Br_Complete, 0) + StrToIntDef(ls_Rcrd[7], 0));        //완료
                  FOrderTotal.BrStandby   := IntToStr(StrToIntDef(FOrderTotal.BrStandby, 0) + StrToIntDef(ls_Rcrd[8], 0));          //대기
                  FOrderTotal.BrINQUIRE   := IntToStr(StrToIntDef(FOrderTotal.BrINQUIRE, 0) + StrToIntDef(ls_Rcrd[9], 0));          //문의
                  FOrderTotal.BrBooking   := IntToStr(StrToIntDef(FOrderTotal.BrBooking, 0) + StrToIntDef(ls_Rcrd[10], 0));         //예약
                  FOrderTotal.BrCancel    := IntToStr(StrToIntDef(FOrderTotal.BrCancel, 0) + StrToIntDef(ls_Rcrd[11], 0));          //취소
                end;
                FOrderTotal.Br_CompletePer := FormatFloat('#,##0.#', (StrToFloat(FOrderTotal.Br_Complete)
                                                                    / StrToFloat(FOrderTotal.BrOrder)) * 100);//완료율
                if strtointDef(FOrderTotal.BrTOT,0) = 0 then sCancelRate := 0
                else sCancelRate := round(strtointDef(FOrderTotal.BrCancel,0) / strtointDef(FOrderTotal.BrTOT,0) * 100);
                FOrderTotal.BrCancelPer := FormatFloat('#,##0.#', sCancelRate);       //취소율
                MakeSMS(FOrderTotal);
              end;
            finally
              ls_Rcrd.Free;
            end;
          end;
        end else
        if ls_ClientKey = 'SRCH0001' then
        begin
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
            cxShareCall.DataController.SetRecordCount(0);
  					cxShareCall.BeginUpdate;
  					ls_Rcrd := TStringList.Create;
            try
              for i := 0 to lst_Result.length - 1 do
              begin
                GetTextSeperationEx('│', lst_Result.item[i].attributes.getNamedItem('Value').Text, ls_Rcrd);
                iRow := cxShareCall.DataController.AppendRecord;

                cxShareCall.DataController.Values[iRow, 0] := StrToIntDef(ls_Rcrd[0], 0);
                cxShareCall.DataController.Values[iRow, 1] := ls_Rcrd[1];
                cxShareCall.DataController.Values[iRow, 2] := ls_Rcrd[2];
              end;
            finally
              ls_Rcrd.Free;
            end;
            // 2010.11.30
            lblShareCallCnt.Caption := FormatFloat('#,##0', cxShareCall.DataController.RecordCount);
            cxShareCall.EndUpdate;

            gfSetIndexNo(cxShareCall, 1, GS_SortNoChange);
          end;
        end else
        if ls_ClientKey = 'GROUP' then
        begin
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');

  					// 대전연합은 마킹
  					if IsDaeJeonShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo) then
  					begin
  						gCurProperties.EchoMode := eemPassword;
  					end	else
  					begin
  						gCurProperties.EchoMode := eemNormal;
  					end;
  					cxGroup.Columns[11].Properties := gCurProperties;

            iSum := 0;
            SetLength(FGroupInfos, lst_Result.length);
            ZeroMemory(FGroupInfos, Length(FGroupInfos));
            for I := 0 to lst_Result.length - 1 do
            begin
  						with lst_Result.item[i].attributes do
              begin
                hdname := getNamedItem('HdDName').Text;
                if (hdName = '') or (hdName = 'null') then
  								hdname := copy(getNamedItem('HdNo').Text,1,1) + '****'
  							else
  								hdname := copy(getNamedItem('HdNo').Text,1,1) + '****' + '(' + hdName + ')';

                FGroupInfos[I].Share  := Format(' %s', [lst_Result.item[i].attributes.getNamedItem('ShareName').Text]);
  							FGroupInfos[I].Head   := Format('[ %s ] %s', [hdname, lst_Result.item[i].attributes.getNamedItem('HdName').Text]);
                FGroupInfos[I].BrNo   := copy(lst_Result.item[i].attributes.getNamedItem('BrNo').Text,1,1) + '***';
                FGroupInfos[I].BrName := lst_Result.item[i].attributes.getNamedItem('BrName').Text;
  							FGroupInfos[I].KeyNum := strtocall(lst_Result.item[i].attributes.getNamedItem('KeyNumber').Text);
                FGroupInfos[I].Lbs    := lst_Result.item[i].attributes.getNamedItem('Lbs').Text;
                FGroupInfos[I].BrTel  := strtocall(lst_Result.item[i].attributes.getNamedItem('BrTel').Text);
                FGroupInfos[I].ShareLv:= lst_Result.item[i].attributes.getNamedItem('ShareLv').Text;
                FGroupInfos[I].Area   := lst_Result.item[i].attributes.getNamedItem('Area').Text;
                FGroupInfos[I].Addr1  := lst_Result.item[i].attributes.getNamedItem('Addr1').Text;
                FGroupInfos[I].Addr2  := lst_Result.item[i].attributes.getNamedItem('Addr2').Text;
  							FGroupInfos[I].WkCnt  := StrToIntDef(lst_Result.item[i].attributes.getNamedItem('WorkerCnt').Text, 0);
  							iSum := iSum + FGroupInfos[I].WkCnt;
  						end;
            end;

  					proc_Word_Search('', cxGroup);

            // 대전연합은 마킹
            if IsDaeJeonShare(GS_PRJ_AREA = 'O', GT_USERIF.ShareNo) then
              cxLabel2.Caption := '***'
            else
  						cxLabel2.Caption := IntToStr(iSum);
          end;
        end else
        if ls_ClientKey = 'GROUP2' then
        begin
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
            ls_Rcrd := TStringList.Create;
            try
              GetTextSeperationEx('│', lst_Result.item[0].attributes.getNamedItem('Value').Text, ls_Rcrd);
              sShareNum := ls_Rcrd[0];
              sInCall   := IfThen(ls_Rcrd[1] = '', '0', ls_Rcrd[1]);
              sOutCall  := IfThen(ls_Rcrd[2] = '', '0', ls_Rcrd[2]);
              sRate := IntToStr(Round(StrToIntDef(sInCall, 0) / StrToIntDef(IfThen(sOutCall = '0', '1', sOutCall), 1) * 100));
              cxLabel14.Caption := Format('%s차 ( 발주 / 수주 = %s / %s = %s%% )', [sShareNum, sInCall, sOutCall, sRate]);
            finally
              ls_Rcrd.Free;
            end;
          end;
        end else
				if ls_ClientKey = 'BRWKCONNECT' then
				begin
					cbKindA11.Properties.Items.Clear;
					cbKindA11.Properties.Items.Add('지사전체');
					if (0 < GetXmlRecordCount(ls_rxxml)) then
					begin
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
            cxSgBrWk.BeginUpdate;
            ls_Rcrd := TStringList.Create;
            try
							for i := 0 to lst_Result.length - 1 do
              begin
                GetTextSeperationEx('│', lst_Result.item[i].attributes.getNamedItem('Value').Text, ls_Rcrd);
  //              ls_Rcrd := GetTextSeperation('│', lst_Result.item[i].attributes.getNamedItem('Value').Text);
								Application.ProcessMessages;

  							if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB   패밀리지사일때
  							begin
  								if not Check_ALLHD(GT_SEL_BRNO.HDNO) then      //전체지사권한이 없을때
  								begin
  									if scb_FamilyBrCode.IndexOf(ls_Rcrd[6]) = -1 then   //권한있는 지사일경우만 그리드표기
  									else
  									begin
  										iRow := cxSgBrWk.DataController.AppendRecord; // 1 Record 추가

  										if StrToIntDef(ls_Rcrd[0], -1) = -1 then ls_Rcrd[0] := '0';
  										if StrToIntDef(ls_Rcrd[2], -1) = -1 then ls_Rcrd[2] := '0';
  										if StrToIntDef(ls_Rcrd[3], -1) = -1 then ls_Rcrd[3] := '0';
  										if StrToIntDef(ls_Rcrd[4], -1) = -1 then ls_Rcrd[4] := '0';
  										if StrToIntDef(ls_Rcrd[5], -1) = -1 then ls_Rcrd[5] := '0';
  										if StrToIntDef(ls_Rcrd[8], -1) = -1 then ls_Rcrd[8] := '0';

  										cxSgBrWk.DataController.Values[iRow, 0] := ls_Rcrd[0];
											cxSgBrWk.DataController.Values[iRow, 1] := ls_Rcrd[1];
  										cxSgBrWk.DataController.Values[iRow, 2] := ls_Rcrd[2];
  										cxSgBrWk.DataController.Values[iRow, 3] := ls_Rcrd[3];
  										cxSgBrWk.DataController.Values[iRow, 4] := ls_Rcrd[4];
  										cxSgBrWk.DataController.Values[iRow, 5] := ls_Rcrd[5];
  										cxSgBrWk.DataController.Values[iRow, 6] := ls_Rcrd[8];
											cxSgBrWk.DataController.Values[iRow, 7] := ls_Rcrd[6];
										end;
									end else
									begin
										iRow := cxSgBrWk.DataController.AppendRecord; // 1 Record 추가

										if StrToIntDef(ls_Rcrd[0], -1) = -1 then ls_Rcrd[0] := '0';
										if StrToIntDef(ls_Rcrd[2], -1) = -1 then ls_Rcrd[2] := '0';
										if StrToIntDef(ls_Rcrd[3], -1) = -1 then ls_Rcrd[3] := '0';
										if StrToIntDef(ls_Rcrd[4], -1) = -1 then ls_Rcrd[4] := '0';
										if StrToIntDef(ls_Rcrd[5], -1) = -1 then ls_Rcrd[5] := '0';
										if StrToIntDef(ls_Rcrd[8], -1) = -1 then ls_Rcrd[8] := '0';

										cxSgBrWk.DataController.Values[iRow, 0] := ls_Rcrd[0];
										cxSgBrWk.DataController.Values[iRow, 1] := ls_Rcrd[1];
										cxSgBrWk.DataController.Values[iRow, 2] := ls_Rcrd[2];
										cxSgBrWk.DataController.Values[iRow, 3] := ls_Rcrd[3];
										cxSgBrWk.DataController.Values[iRow, 4] := ls_Rcrd[4];
										cxSgBrWk.DataController.Values[iRow, 5] := ls_Rcrd[5];
										cxSgBrWk.DataController.Values[iRow, 6] := ls_Rcrd[8];
										cxSgBrWk.DataController.Values[iRow, 7] := ls_Rcrd[6];
									end;
  							end else
  							begin
									iRow := cxSgBrWk.DataController.AppendRecord; // 1 Record 추가

  								if StrToIntDef(ls_Rcrd[0], -1) = -1 then ls_Rcrd[0] := '0';
  								if StrToIntDef(ls_Rcrd[2], -1) = -1 then ls_Rcrd[2] := '0';
  								if StrToIntDef(ls_Rcrd[3], -1) = -1 then ls_Rcrd[3] := '0';
  								if StrToIntDef(ls_Rcrd[4], -1) = -1 then ls_Rcrd[4] := '0';
  								if StrToIntDef(ls_Rcrd[5], -1) = -1 then ls_Rcrd[5] := '0';
									if StrToIntDef(ls_Rcrd[8], -1) = -1 then ls_Rcrd[8] := '0';

									cxSgBrWk.DataController.Values[iRow, 0] := ls_Rcrd[0];
  								cxSgBrWk.DataController.Values[iRow, 1] := ls_Rcrd[1];
  								cxSgBrWk.DataController.Values[iRow, 2] := ls_Rcrd[2];
  								cxSgBrWk.DataController.Values[iRow, 3] := ls_Rcrd[3];
  								cxSgBrWk.DataController.Values[iRow, 4] := ls_Rcrd[4];
  								cxSgBrWk.DataController.Values[iRow, 5] := ls_Rcrd[5];
  								cxSgBrWk.DataController.Values[iRow, 6] := ls_Rcrd[8];
  								cxSgBrWk.DataController.Values[iRow, 7] := ls_Rcrd[6];
								end;
								cbKindA11.Properties.Items.Add(ls_Rcrd[1]);
							end;
            finally
							ls_Rcrd.Free;
						end;
						cxSgBrWk.EndUpdate;
						cbKindA11.ItemIndex := 0;
						cbKindA12.ItemIndex := 0;
						if btnChartShow1.Caption = '그래프닫기' then
						begin
							pnl_Chart.Height := advTPTPna6.Height Div 3;
							btnChartShow1.Caption := '그래프닫기';
							btnChartA1.Click;
						end;
					end;
        end else
				if ls_ClientKey = 'C069' then
				begin
					ls_SubArea := TStringList.Create;
  				ls_SubArea.Delimiter := '|';
  				tvWkConnect.BeginUpdate;
  				tvWkConnect.DataController.SetRecordCount(0);
  				iWKname := tvWkConnect.GetColumnByFieldName('기사명').Index;
  				for i := 0 to tvWkConnect.ColumnCount - 1 do
  					iwkTitle[i] := tvWkConnect.GetColumnByFieldName(lbWkTitle.Items.Strings[i]).Index;
  				iCnt := 0;
  				lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Response/Data/Item');
  				try
  					for i := 0 to lst_Result.length - 1 do
  					begin
  						if (cb_Search.ItemIndex = 6) and (StrToIntDef(lst_Result.item[I].attributes.getNamedItem('FINISH_CNT').Text,0) > 0) then
  							Continue;

              if Not Check_ALLHD(GT_SEL_BRNO.HDNO) then
              begin
                if scb_FamilyBrCode.IndexOf(lst_Result.item[I].attributes.getNamedItem('BR_NO').Text) = -1 then Continue;
              end;

  						iRow := tvWkConnect.DataController.AppendRecord;
  						iCnt := iCnt + 1;
  						Application.ProcessMessages;

  						tvWkConnect.DataController.Values[iRow, iwkTitle[0]] := IntToStr(iCnt);
  						tvWkConnect.DataController.Values[iRow, iwkTitle[1]] := lst_Result.item[I].attributes.getNamedItem('BR_NAME').Text;
  						tvWkConnect.DataController.Values[iRow, iwkTitle[2]] := lst_Result.item[I].attributes.getNamedItem('WK_SABUN').Text;
  						tvWkConnect.DataController.Values[iRow, iwkTitle[3]] := lst_Result.item[I].attributes.getNamedItem('BR_WK_NUM').Text;
  						tvWkConnect.DataController.Values[iRow, iwkTitle[4]] := lst_Result.item[I].attributes.getNamedItem('WK_NAME').Text;
  						if lst_Result.item[I].attributes.getNamedItem('FINISH_CNT').Text <> '' then
								tvWkConnect.DataController.Values[iRow, iwkTitle[5]] := lst_Result.item[I].attributes.getNamedItem('FINISH_CNT').Text
  						else
  							tvWkConnect.DataController.Values[iRow, iwkTitle[5]] := '0';

  						if lst_Result.item[I].attributes.getNamedItem('FINISH_CHARGE').Text <> '' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[6]] := lst_Result.item[I].attributes.getNamedItem('FINISH_CHARGE').Text
  						else
  							tvWkConnect.DataController.Values[iRow, iwkTitle[6]] := '0';

  						if lst_Result.item[I].attributes.getNamedItem('FINISH_COMMISSION').Text <> '' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[7]] := lst_Result.item[I].attributes.getNamedItem('FINISH_COMMISSION').Text
  						else
  							tvWkConnect.DataController.Values[iRow, iwkTitle[7]] := '0';
  						if lst_Result.item[I].attributes.getNamedItem('CONN_STATE').Text = 'W1' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[8]] := '미출근'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('CONN_STATE').Text = 'W2' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[8]] := '출근'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('CONN_STATE').Text = 'W3' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[8]] := '단순접속'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('CONN_STATE').Text = 'W4' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[8]] := '오더접속'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('CONN_STATE').Text = 'W5' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[8]] := '운행'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('CONN_STATE').Text = 'W6' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[8]] := '픽업대기/접속'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('CONN_STATE').Text = 'W7' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[8]] := '픽업대기/미접속'
  						else
  							tvWkConnect.DataController.Values[iRow, iwkTitle[8]] := lst_Result.item[I].attributes.getNamedItem('CONN_STATE').Text;

  						if (lst_Result.item[I].attributes.getNamedItem('WK_EDAREA').Text <> '') and
  							 (lst_Result.item[I].attributes.getNamedItem('WK_EDAREA').Text <> '') then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[9]] := lst_Result.item[I].attributes.getNamedItem('WK_EDAREA').Text
  																															+ '/' + lst_Result.item[I].attributes.getNamedItem('WK_EDAREA2').Text
  						else
  						if (lst_Result.item[I].attributes.getNamedItem('WK_EDAREA').Text <> '') and
  							 (lst_Result.item[I].attributes.getNamedItem('WK_EDAREA').Text = '') then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[9]] := lst_Result.item[I].attributes.getNamedItem('WK_EDAREA').Text
  						else
  						if (lst_Result.item[I].attributes.getNamedItem('WK_EDAREA').Text = '') and
  							 (lst_Result.item[I].attributes.getNamedItem('WK_EDAREA').Text <> '') then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[9]] := lst_Result.item[I].attributes.getNamedItem('WK_EDAREA2').Text
  						else tvWkConnect.DataController.Values[iRow, iwkTitle[9]] := '';

  						tvWkConnect.DataController.Values[iRow, iwkTitle[10]] := lst_Result.item[I].attributes.getNamedItem('WK_EDAREA3').Text;
  						tvWkConnect.DataController.Values[iRow, iwkTitle[11]] := lst_Result.item[I].attributes.getNamedItem('FINISH_CNT').Text;

  						ls_SubArea.Clear;
  						slTemp := TStringList.Create;
  						slTemp1 := TStringList.Create;
  						slTemp2 := TStringList.Create;
  						sWK_POI := lst_Result.item[I].attributes.getNamedItem('WK_POI').Text;
  						if copy(sWK_POI,1,1) = 'G' then
  						begin
  							sGstr := 'G';
  							sWK_POI := copy(sWK_POI,2, length(sWK_POI)-1);
  						end
  						else sGstr := '';
  						GetTextSeperationEx('|', sWK_POI, slTemp);
  						if slTemp.Count = 0 then
  						begin
  							ls_SubArea.Add('');
  							ls_SubArea.Add('');
  						end else
  						if slTemp.Count = 1 then
  						begin
  							GetTextSeperationEx('/', slTemp[0], slTemp1);
  							if slTemp1.Count = 1 then
  								sTemp := slTemp1[0]
  							else if slTemp1.Count = 2 then
  								sTemp := slTemp1[1] + '/' + slTemp1[0];
  							ls_SubArea.Add(sTemp);
  							ls_SubArea.Add('');
  						end else
              if slTemp.Count = 2 then
  						begin
  							GetTextSeperationEx('/', slTemp[1], slTemp1);
  							if slTemp1.Count = 1 then
  								sTemp := slTemp1[0]
  							else if slTemp1.Count = 2 then
  								sTemp := slTemp1[1] + '/' + slTemp1[0];
  							ls_SubArea.Add(sTemp);

  							slTemp1.Clear;

  							GetTextSeperationEx('/', slTemp[0], slTemp1);
  							sTemp := slTemp1[1] + '/' + slTemp1[0];
  							ls_SubArea.Add(sTemp);
  						end
  						else sTemp := ls_Rcrd[31];
  						FreeAndNil(slTemp);
  						FreeAndNil(slTemp1);
  						FreeAndNil(slTemp2);

  						tvWkConnect.DataController.Values[iRow, iwkTitle[12]] := ls_SubArea[1];
  						tvWkConnect.DataController.Values[iRow, iwkTitle[13]] := sGstr + ls_SubArea[0];

  						sTemp := lst_Result.item[I].attributes.getNamedItem('CONN_DATE').Text;
  						if sTemp <> '' then
  							sTemp := Copy(sTemp, 1, 10) + ' ' + Copy(sTemp, 11, 8) + '  '; // 기사 VM접속시간 추가.
  						tvWkConnect.DataController.Values[iRow, iwkTitle[14]] := sTemp;
  						// 지사명

  						tvWkConnect.DataController.Values[iRow, iwkTitle[15]] := strtocall(lst_Result.item[I].attributes.getNamedItem('WK_PHONE').Text); // 지사명
  						if lst_Result.item[I].attributes.getNamedItem('WK_CASH').Text <> '' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[16]] := lst_Result.item[I].attributes.getNamedItem('WK_CASH').Text
  						else
  							tvWkConnect.DataController.Values[iRow, iwkTitle[16]] := '0';

  						tvWkConnect.DataController.Values[iRow, iwkTitle[17]] := '0'; //직선거리
  						tvWkConnect.DataController.Values[iRow, iwkTitle[18]] := lst_Result.item[I].attributes.getNamedItem('WK_LAT').Text;
  						tvWkConnect.DataController.Values[iRow, iwkTitle[19]] := lst_Result.item[I].attributes.getNamedItem('WK_LNG').Text;
  						tvWkConnect.DataController.Values[iRow, iwkTitle[20]] := lst_Result.item[I].attributes.getNamedItem('BR_NO').Text;
  						tvWkConnect.DataController.Values[iRow, iwkTitle[21]] := lst_Result.item[I].attributes.getNamedItem('WK_STATUS').Text;
  						tvWkConnect.DataController.Values[iRow, iwkTitle[22]] := '0';
  						if lst_Result.item[I].attributes.getNamedItem('BAECHA_TYPE').Text = '0' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[23]] := '기사배차'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('BAECHA_TYPE').Text = '1' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[23]] := '강제배차'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('BAECHA_TYPE').Text = '2' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[23]] := '문자배차'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('BAECHA_TYPE').Text = '3' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[23]] := '차감문자'
  						else
  						if lst_Result.item[I].attributes.getNamedItem('BAECHA_TYPE').Text = 'R' then
  							tvWkConnect.DataController.Values[iRow, iwkTitle[23]] := '예약배차'
  						else
  							tvWkConnect.DataController.Values[iRow, iwkTitle[23]] := '';
							tvWkConnect.DataController.Values[iRow, iwkTitle[24]] := lst_Result.item[I].attributes.getNamedItem('BAECHA_TYPE').Text;
  					end;
  				finally
  					tvWkConnect.EndUpdate;
  					if not aHeadSort then
            begin
             	tvWkConnect.Columns[iWKname].SortOrder := soAscending;
              tvWkConnect.Columns[iWKname].SortIndex := 0;

              gfSetIndexNo(tvWkConnect, iWKname, GS_SortNoChange);
            end;
//  					if not aHeadSort then gfSetIndexNo(tvWkConnect, iWKname, GS_SortNoChange);

  					if not GS_WKCON_AUTOSCROLLTOP and (tvWkConnect.DataController.RecordCount > 0) then
  					begin
  						tvWkConnect.DataController.SelectRows(0, 0);
  						tvWkConnect.DataController.FocusedRowIndex := 0;
  						tvWkConnect.DataController.Scroll(0);
  					end	else
  					if GS_WKCON_AUTOSCROLLTOP and (tvWkConnect.DataController.RecordCount > 0) then
  					begin
  						Try
  							fIdx := tvWkConnect.DataController.FindRecordIndexByText(0,2,aWKCONLIST,False,False,True);
  							tvWkConnect.DataController.FocusedRecordIndex := fIdx;
  						except
  							tvWkConnect.DataController.SelectRows(0, 0);
  							tvWkConnect.DataController.FocusedRowIndex := 0;
  							tvWkConnect.DataController.Scroll(0);
  						end
  					end;
  					ls_Rcrd.Free;
  				end;

  				lst_Result1 := xdom.documentElement.selectNodes('/cdms/Service/Response/Data/Statistic');
  				lbWkNoToday.Caption       := lst_Result1.item[0].attributes.getNamedItem('W1').Text;
  				lbWkToday.Caption         := lst_Result1.item[0].attributes.getNamedItem('W2').Text;
  				lbWkConnect.Caption       := lst_Result1.item[0].attributes.getNamedItem('W3').Text;
  				lbWkConnect_order.Caption := lst_Result1.item[0].attributes.getNamedItem('W4').Text;
  				lbWkRun.Caption           := lst_Result1.item[0].attributes.getNamedItem('W5').Text;
					lbWknormalcy.Caption      := lst_Result1.item[0].attributes.getNamedItem('WS00').Text;

  				FreeAndNil(ls_SubArea);
					cxlbWkCnt.Caption := IntToStr(iCnt) + ' 명';

					if btnChartShow3.Caption = '그래프닫기' then
					begin
						pnl_WkConnect.Height := advTPTPna2.Height Div 3;
						btnChartShow3.Caption := '그래프닫기';
						btnChartA3.Click;
					end;
				end else
				if ls_ClientKey = 'CASH0001' then
        begin
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
            ls_Rcrd := TStringList.Create;
            try
              GetTextSeperationEx('│', lst_Result.item[0].attributes.getNamedItem('Value').Text, ls_Rcrd);
							if TCK_USER_PER.JON_BrchCashView = '1' then
              begin
                sbar_Message.Panels.Items[0].Text := '지사캐쉬 : ' + formatfloat('#,##0', StrToFloat(ls_Rcrd[1])) + '원';
                sbar_Message.Panels.Items[1].Text := 'SMS캐쉬 : ' + formatfloat('#,##0', StrToFloat(ls_Rcrd[2])) + '원';

								GetTextSeperationEx('│', lst_Result.item[1].attributes.getNamedItem('Value').Text, ls_Rcrd);
                sbar_Message.Panels.Items[2].Text := '기사공용 : ' + formatfloat('#,##0', StrToFloat(ls_Rcrd[1])) + '원';
                sbar_Message.Panels.Items[3].Text := '기사자체 : ' + formatfloat('#,##0', StrToFloat(ls_Rcrd[2])) + '원';
              end else
              begin
                sbar_Message.Panels.Items[0].Text := '지사캐쉬 : **,***원';
                sbar_Message.Panels.Items[1].Text := 'SMS캐쉬 : **,***원';
                sbar_Message.Panels.Items[2].Text := '공용캐쉬 : **,***원';
                sbar_Message.Panels.Items[3].Text := '자체캐쉬 : **,***원';
              end;
            finally
              ls_Rcrd.Free;
            end;
          end;
        end else
		    if ls_ClientKey = 'AiReHis' then
        begin
          if (0 < GetXmlRecordCount(ls_rxxml)) then
          begin
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
						if ( Not Assigned(Frm_JON08) ) Or ( Frm_JON08 = Nil ) then Frm_JON08 := TFrm_JON08.Create(Nil);
						frm_JON08.stg_His_View.DataController.SetRecordCount(0);
						frm_JON08.stg_His_View.DataController.BeginUpdate;

            ls_Rcrd := TStringList.Create;
            try
							for i := 0 to frm_JON08.lbTitle.Items.Count - 1 do
								iTitle[i] := frm_JON08.stg_His_View.GetColumnByFieldName(frm_JON08.lbTitle.Items.Strings[i]).Index;
              for i := 0 to lst_Result.length - 1 do
							begin
								sTmp := lst_Result.item[i].attributes.getNamedItem('Value').Text;
								sTmp := StringReplace(sTmp, #$A, '', [rfReplaceAll]);

								GetTextSeperationEx2('│', sTmp{lst_Result.item[i].attributes.getNamedItem('Value').Text}, ls_Rcrd);
								iRow := frm_JON08.stg_His_View.DataController.AppendRecord;

								frm_JON08.stg_His_View.DataController.Values[iRow, iTitle[0]] := ls_Rcrd[0];
								frm_JON08.stg_His_View.DataController.Values[iRow, iTitle[1]] := ls_Rcrd[1];
								frm_JON08.stg_His_View.DataController.Values[iRow, iTitle[2]] := ls_Rcrd[2];
								frm_JON08.stg_His_View.DataController.Values[iRow, iTitle[3]] := ls_Rcrd[3];
								frm_JON08.stg_His_View.DataController.Values[iRow, iTitle[4]] := ls_Rcrd[4];
								frm_JON08.stg_His_View.DataController.Values[iRow, iTitle[5]] := ls_Rcrd[5];
								frm_JON08.stg_His_View.DataController.Values[iRow, iTitle[6]] := ls_Rcrd[6];
								frm_JON08.stg_His_View.DataController.Values[iRow, iTitle[7]] := ls_Rcrd[6] + '-' + ls_Rcrd[1];
								frm_JON08.stg_His_View.DataController.Values[iRow, iTitle[8]] := '';
              end;

						finally
							frm_JON08.stg_His_View.DataController.EndUpdate;
							ls_Rcrd.Free;
						end;
						frm_JON08.Show;
          end else
          begin
            GMessagebox('녹취내역이 없습니다.', CDMSI);
          end;
        end else
        if ls_ClientKey = 'BAECHA' then
        begin
          GMessagebox('배차 되었습니다.', CDMSI);
					Frm_JON03[Self.Tag].proc_Acc_Search(1, lbWkSlip.Caption, 'Main-1');
        end;
        Screen.Cursor := crDefault;
      end else
      begin
				Screen.Cursor := crDefault;
  			GMessagebox(MSG012 + CRLF + ls_MSG_Err, CDMSE);
      end;
    finally
      xdom := Nil;
    end;
	except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_Resize;
Var iLeft : Integer;
begin
  btnRemoteMenu.Visible := True;
  btnRemoteMenu.Left := btnMainMenu13.Left + btnMainMenu13.Width+3;
  if btnIpccMenu.Visible then
  begin
    btnIpccMenu.Left := btnRemoteMenu.Left + btnRemoteMenu.Width+3;
    if btnCallBellMenu.Visible then
    begin
      btnCallBellMenu.Left := btnIpccMenu.Left + btnIpccMenu.Width+3;
      iLeft := btnCallBellMenu.Left + btnCallBellMenu.Width+3;
    end else
    begin
      iLeft := btnIpccMenu.Left + btnIpccMenu.Width+3;
    end;
  end else
  begin
    if btnCallBellMenu.Visible then
    begin
      btnCallBellMenu.Left := btnRemoteMenu.Left + btnRemoteMenu.Width+3;
      iLeft := btnCallBellMenu.Left + btnCallBellMenu.Width+3;
    end else
    begin
      iLeft := btnIpccMenu.Left + btnIpccMenu.Width+3;
    end;
  end;

  BtnPrePage.Left := iLeft;
	btnWide.Left := BtnPrePage.Left + BtnPrePage.Width - 1;
  BtnNexPage.Left := btnWide.Left + btnWide.Width - 1;
end;

procedure TFrm_Main.proc_SetLoginList;
const
	cKeyS = '\SYSTEM\CMNPMng\S';
	cKeyO = '\SYSTEM\CMNPMng\O';
var
	slTmp, slTmp2, slSort, slLogInList, slID, slServer : TStringList;
	sList: TStrings;
	sNo, sMemo, sId, sPw, sTmp : string;
	Registry: TRegistry;
	bMatch, bTmp : Boolean;
	LogEncryptData: TIdBytes;
	iTmp, i, j, iRow : Integer;
	sAnsiTmp, sDecode : AnsiString;
	fSetServer : TConnectionType;
	sArray : Array [1..20] of Array [0..6] of String;
begin
	SetDebugeWrite('Main.proc_SetLoginList');
	Try
		//로그인일시, 수/지, ID, PW, 유저명, 본사명, 지사명
		slTmp := TStringList.Create;
		sList := TStringList.Create;
		slLogInList := TStringList.Create;

		Registry := TRegistry.Create;
		Registry.RootKey := HKEY_LOCAL_MACHINE;
		if GS_PRJ_AREA = 'S' then 
		begin
			slLogInList.Assign(gslLoginListAreaS);
			Registry.OpenKey(cKeyS, True); //True면 Key가 없을 경우 생성합니다.
		end else 
		begin
			slLogInList.Assign(gslLoginListAreaO);
			Registry.OpenKey(cKeyO, True);  
		end;
		
		Try
			slID := TStringList.Create;
			slServer := TStringList.Create;
			Try
				//ID, Server 정보 따로 저장 
				for i := 1 to slLogInList.Count do
				begin
					GetTextSeperationEx2('¶', slLogInList[i-1], slTmp);
					slID.Add(slTmp[2]);
					if slTmp.Count < 8 then slServer.Add('운영서버') 
														 else	slServer.Add(slTmp[7]);
				end;
				iRow := -1;
				//동일정보가 있는지 확인
				for i := 0 to slID.Count-1 do
				begin
					if slID[i] = GT_USERIF.ID then
					begin
						if GT_ConnectionType = ctTest then sTmp := '테스트서버' else sTmp := '운영서버';
						if slServer[i] = sTmp then
						begin
							iRow := i; //아이디와 계정이 같은 순번
						end;
					end;
				end;
			finally
				slID.Free;
				slServer.Free;
			end;
				
      slTmp.Clear;
			for i := 1 to 100 do
			begin
				if i < 10 then sNo := '0' + IntToStr(i) else sNo := IntToStr(i);

				if i > slLogInList.count then Break; //기존 내용보다 큰 경우 빠져나감      

				if i = (iRow+1) then Break; //동일 아이디+서버가 있을경우 빠져나감			

				//기존에 들어있는 값을 저장한다
				sTmp := slLogInList[i-1];
				slTmp.Add(sNo + '¶' + sTmp);
			end;

			//최대 갯수가 넘을경우 가장 오래된 인덱스 찾아서 삭제
			if slTmp.Count = 100 then
			begin
				slSort := TStringList.Create;
				slTmp2 := TStringList.Create;
				Try
					for i := 0 to slTmp.Count -1 do
					begin
						GetTextSeperationEx2('¶', slTmp[i], slTmp2);
						slSort.Add(slTmp2[1] + slTmp2[0]);  // 로그인시간 + Reg_Name
					end;
					slSort.Sort;
					sNo := RightStr(slSort[0], 2);
				Finally
					slSort.Free;
					slTmp2.Free;
				End;
			end;
			//로그인일시, 수/지, ID, PW, 유저명, 본사명, 지사명
			slTmp.Clear;
			slTmp.Add(StrToEncrypt(FormatDateTime('YYYY-MM-DD HH:NN:SS', Now))); //로그인일시
			slTmp.Add(StrToEncrypt(GS_PRJ_AREA));                                //수/지
			slTmp.Add(StrToEncrypt(GT_USERIF.ID));                               //ID
			slTmp.Add(StrToEncrypt(GT_USERIF.PW));                               //PW
			slTmp.Add(StrToEncrypt(GT_USERIF.NM));                               //유저명

			iTmp := scb_HdNo.InDexOf(GT_USERIF.HD);
			if iTmp > -1 then sTmp := scb_HdNm[iTmp] else sTmp := '';
			slTmp.Add(StrToEncrypt(sTmp)); 
																		//본사명
			iTmp := scb_BranchCode.InDexOf(GT_USERIF.BR);
			if iTmp > -1 then sTmp := scb_BranchName[iTmp] else sTmp := '';
			slTmp.Add(StrToEncrypt(sTmp));                               //지사명

			if GT_ConnectionType = ctTest then sTmp := '테스트서버' else sTmp := '운영서버';
			slTmp.Add(StrToEncrypt(sTmp));                               //서버설정

			Registry.WriteMultiSz(sNo, slTmp);

			Registry.CloseKey;
		finally
			slTmp.Free;
			sList.Free;
			Registry.Free;
			slLogInList.Free;
		end;
	except
		on E: Exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

procedure TFrm_Main.proc_Share;
var
  ls_TxQry, ls_TxLoad, rv_str, sQueryTemp : string;
  ls_rxxml: String;
  slReceive: TStringList;
  ErrCode: integer;
  tmAP :string;
  tmtime: string;
  tmtimeStr: string;
  sWhere : string;
  sOrderby : string;
begin
  SetDebugeWrite('Main.proc_Share');
  try
  // 2010.11.30
  //  ls_TxQry := Format(GSQ_SHERED_INFO, [En_Coding(GT_USERIF.ID), GT_USERIF.SA]);
    sWhere := '';
    tmtimeStr:=FormatDateTime('AM/PMhhmmss',now);
    tmAP:=Copy(tmtimeStr,1,2);
    tmtime:=Copy(tmtimeStr,3,6);

    if GONGuCALLYN = 'y' then
    begin
      if cbbSido.ItemIndex <> 0  then sWhere := ' AND A.CONF_AREA = ''' + cbbSido.Text + ''' ';
      if cbbGugun.ItemIndex <> 0 then sWhere := sWhere + ' AND A.CONF_AREA2 = ''' + cbbGugun.text + ''' ';
    end;

    sOrderby := GS_EnvFile.ReadString('WORKER_TR', 'ORDERBY', '0');
    // 2010.12.09 공유콜리스트 수도권이라도 오전7시부터 10시까지는 뷰에서 제외
    if (GS_PRJ_AREA = 'S') and not((tmAP='AM') and (tmtime>='070000') and (tmtime<='100000')) then
    begin
      fGet_BlowFish_Query(GSQ_SHERED_INFO_S, sQueryTemp);
      if Copy(sOrderby,1,1) = '0' then
      begin
        ls_TxQry := Format(sQueryTemp, [En_Coding(GT_USERIF.ID), GT_USERIF.SA, sWhere, 'ORDER BY RNUM ' + Copy(sOrderby,2,Length(sOrderby)-1)])
      end else
      if Copy(sOrderby,1,1) = '2' then
      begin
        ls_TxQry := Format(sQueryTemp, [En_Coding(GT_USERIF.ID), GT_USERIF.SA, sWhere, 'ORDER BY AREA ' + Copy(sOrderby,2,Length(sOrderby)-1)])
      end;
    end else
    begin
      fGet_BlowFish_Query(GSQ_SHERED_INFO_P, sQueryTemp);
      if Copy(sOrderby,1,1) = '0' then
      begin
        ls_TxQry := Format(sQueryTemp, [En_Coding(GT_USERIF.ID), GT_USERIF.SA, sWhere, 'ORDER BY RNUM ' + Copy(sOrderby,2,Length(sOrderby)-1)])
      end else
      if Copy(sOrderby,1,1) = '2' then
      begin
        ls_TxQry := Format(sQueryTemp, [En_Coding(GT_USERIF.ID), GT_USERIF.SA, sWhere, 'ORDER BY AREA ' + Copy(sOrderby,2,Length(sOrderby)-1)])
      end;
    end;

    ls_TxLoad := GetSel01('Main' + 'SRCH0001', ls_TxQry);
    lblShareCallCnt.Caption := '0';
    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);
        end;
      end;
    finally
      Frm_Flash.Hide;
      FreeAndNil(slReceive);
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_SI415_AdminLoginSet(AData: string);    //사용안함
Var
	subObj : TJSONObject;
	arrjObj : TJSONArray;
	i : Integer;
	sJson : string;
begin
	SetDebugeWrite('TFrm_Main.proc_SI415_AdminLoginSet');
	Try
		GT_Admin_Q_exten.clear; 
		GT_Admin_Service_no.clear;
		GT_Admin_Dnis_no.clear; 
		GT_Admin_Buz_name.clear;

			
		sJson := Copy(AData, 86, Length(AData) - 85);
		arrjObj := TJSONObject.ParseJSONValue(sJson) as TJSONArray;
		Try
			GT_Admin_Q_exten   .Add('전체');
			GT_Admin_Service_no.Add('전체');
			GT_Admin_Dnis_no   .Add('전체');
			GT_Admin_Buz_name  .Add('전체');
			Try
				for i := 0 to arrjObj.Size - 1 do
				begin	
					subObj := arrjObj.Get(i) as TJSONObject;
//					GT_Admin_Q_exten.Add   (subObj.Get('Q_exten').JsonValue.Value);      //		호분배 그룹 ( 9000 ~ 9999 까지)
//					GT_Admin_Service_no.Add(CallToStr(subObj.Get('Service_no').JsonValue.Value));  	  //		대표번호
//					GT_Admin_Dnis_no.Add   (CallToStr(subObj.Get('Dnis_no').JsonValue.Value));  	  //		착신번호
//					GT_Admin_Buz_name.Add  (CallToStr(subObj.Get('Buz_name').JsonValue.Value));  	  //		서비스명
				end;
			except
				SetDebugeWrite('[proc_SI415_AdminLoginSet] Json arrjObj error');	
			end;
		except
		End;
	except
	end;

end;

// 프로그램을 종료 한다.
function TFrm_Main.proc_ProgramLogOut: Boolean;
begin
	if not func_logout then
	begin
  end;
  Result := True;
end;

function TFrm_Main.func_logout: Boolean;
var
  ErrMsg: string;
  ErrCode: integer;
begin
	Result := False;

  if RequestBase(GetC001Logout('LOGOUT'), ErrCode, ErrMsg) then
    Result := True;
end;

procedure TFrm_Main.Func_New_KLCnsCid;
var ls_LogMsg : AnsiString;
	sTmp : string;
begin
	SetDebugeWrite('Main.Func_New_KLCnsCid');
  try
		// 고객전화번호 없으면 그냥 빠져나감.
		if gs_JONCidInput.PhoneNumber = '' then Exit;

		CID_GET_TIME := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);      //2012.07.19 KHS

		if (GT_OCX = 'SSIO') Or (GT_OCX = 'SSIT') Or (GT_OCX = 'SI415') then
			ls_LogMsg := GS_JONCidInput.KeyNumber + '/' + GS_JONCidInput.PhoneNumber + '/' + CID_GET_TIME + '/' + GT_USERIF.ID + '/' + GS_JONCidInput.ExtNumber
		else
      ls_LogMsg := GS_JONCidInput.KeyNumber + '/' + GS_JONCidInput.PhoneNumber + '/' + CID_GET_TIME + '/' + GT_USERIF.ID;

		if ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'J610')) or (GT_USERIF.BR = 'B100') or 
			 ((GS_PRJ_AREA = 'O') and (GT_USERIF.CT = 'H227')) or 
			 ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'Z780')) then  
		begin
			sTmp := Trim(GS_JONCidInput.PhoneNumber);
			sTmp := System.StrUtils.RightStr(sTmp, 4);

			Log('Func_New_KLCnsCid : ' + sTmp, LOGDATAPATHFILE);  //천안로그 20191125 KHS
		end;

		Try
			Proc_CidLog(90, ls_LogMsg); // 로그 기록.
		except
		end;

		if scb_KeyNumber.IndexOf(GS_JONCidInput.KeyNumber) < 0 then
			GS_CIDINFO_OUR_KEYNUMBER := False;

		procJON03Open; // 접수현황 Open 여부 체크

		//---------------------------------------------------------------------------------
		//        실제 접수창 생성
    //---------------------------------------------------------------------------------
		// 접수창을 생성한다.
		Proc_JoinFromView(GI_JON03_LastFromIdx, GS_JONCidInput.PhoneNumber);

		if ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'J610')) or (GT_USERIF.BR = 'B100') or 
			 ((GS_PRJ_AREA = 'O') and (GT_USERIF.CT = 'H227')) or 
			 ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'Z780')) then  
		begin
			sTmp := Trim(GS_JONCidInput.PhoneNumber);
			sTmp := System.StrUtils.RightStr(sTmp, 4);

			Log('Proc_JoinFromView 접수창 생성 : No['+IntToStr(GI_JON01_LastFromIdx)+'] ' + sTmp, LOGDATAPATHFILE);
		end;

		JON01MNG[GI_JON01_LastFromIdx].CidInputPhoneNumber := GS_JONCidInput.PhoneNumber;//인입된 전화번호 저장

    Frm_JON01N[GI_JON01_LastFromIdx].locCustHP_MainNum_Search := '';
    Frm_JON01N[GI_JON01_LastFromIdx].Proc_CIDEventAutoSearch(GS_JONCidInput.PhoneNumber, GS_JONCidInput.KeyNumber, GS_JONCidInput.ExtNumber, '', '', 'N');

    pJON01Show(GI_JON01_LastFromIdx);

    if (GT_OCX = 'SSIT') or (GT_OCX = 'SI415') then
    begin
      Frm_JON01N[GI_JON01_LastFromIdx].btn_LBS.Visible := True;
      Frm_JON01N[GI_JON01_LastFromIdx].meoStartArea.Width := 476;
    end else
    begin
      Frm_JON01N[GI_JON01_LastFromIdx].btn_LBS.Visible := False;
      Frm_JON01N[GI_JON01_LastFromIdx].meoStartArea.Width := 517;
    end;
	except on E: Exception do
		begin
			Assert(False, E.Message);
		end;		
	end;
end;

procedure TFrm_Main.proc_SlipHis(sConfSlip, sAccTime: string; iJon03 : Integer; bPass : Boolean = False);
var
	ErrCode : integer;
	sParam, ErrMsg, XmlData, ls_Msg_Err, sTmp, sTmp0, sTmp1, tmpStr, sDate, sGrpNo : string;
	xdom: msDomDocument;
	lst_Result: IXMLDomNodeList;
	ls_Rcrd, slList : TStringList;
	iRow, i, j, jj, k, iIndex, iCol, ij, iGrp, iCount : integer;
	iTitle : array[0..21] of integer;
  aNode, bNode : TcxTreeListNode;
  bChild : Boolean;
begin
	SetDebugeWrite('Frm_Main.proc_SlipHis');
	if (Trim(sConfSlip) = '') or (sAccTime = '') then	Exit;

  try
		sAccTime := StringReplace(sAccTime, '-', '', [rfReplaceAll]);
		sAccTime := StringReplace(sAccTime, '/', '', [rfReplaceAll]);
		sAccTime := StringReplace(sAccTime, ' ', '', [rfReplaceAll]);
    sAccTime := StringReplace(sAccTime, ':', '', [rfReplaceAll]);
    sAccTime := Copy(sAccTime, 1, 8);

		sParam := '';
		if StartDateTime('yyyymmdd') = sAccTime then sParam := '0' else sParam := '1';
		sParam := sParam + '│' + sConfSlip;

		Screen.Cursor := crHourGlass;
		slList := TStringList.Create;
		try
			//20210818 박성현팀장 요청으로 패키지 MNG->A01 로변경
			if not RequestBasePaging(GetSel06('GET_ORDER_HIS', 'A01.GET_ORDER_HIS', '100', sParam), slList, ErrCode, ErrMsg) then
			begin
				GMessagebox(Format('상세이력 조회 오류'#13#10'[%d]%s', [ErrCode, ErrMsg]), CDMSE);
				Screen.Cursor := crDefault;
				Exit;
      end;

			Frm_Flash.cxPBar1.Properties.Max := slList.Count;
			Frm_Flash.cxPBar1.Position := 0;
			Frm_JON07.stg_His_View.DataController.SetRecordCount(0);
			Frm_JON07.stg_His_D.DataController.SetRecordCount(0);
      Frm_JON07.pnlBottom.Visible := False;

      SetLength(Frm_JON07.STG_HIS, 0);
      SetLength(Frm_JON07.STG_HIS, 10000);
      ZeroMemory(Frm_JON07.STG_HIS, Length(Frm_JON07.STG_HIS));

      Frm_JON07.gGroupIndex.Clear;
      sTmp0 := '';     sTmp1 := '';
      ij := -1;
			for j := 0 to slList.Count - 1 do
			begin
				Frm_Flash.cxPBar1.Position := j + 1;
				Frm_Flash.lblCnt.Caption := IntToStr(j + 1) + '/' + IntToStr(slList.Count);
				Application.ProcessMessages;
				xmlData := slList.Strings[j];

				xdom := ComsDomDocument.Create;

				if not xdom.loadXML(XmlData) then
				begin
					advTPTPna2.Enabled := True;
					Exit;
				end;

				try
					if not xdom.loadXML(XmlData) then Exit;

					ls_MSG_Err := GetXmlErrorCode(XmlData);
					if ('0000' = ls_MSG_Err) then
					begin
            iCount := GetXmlRecordCount(XmlData);
						if (0 < iCount) then
						begin
							lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
							Frm_JON07.stg_His_View.DataController.BeginUpdate;

							ls_Rcrd := TStringList.Create;
							try
								for i := 0 to Length(Frm_JON07.COLUUMNLIST) - 1 do
									iTitle[i] := Frm_JON07.stg_His_View.GetColumnByFieldName(Frm_JON07.COLUUMNLIST[i].CName).Index;

                iGrp   := Frm_JON07.stg_His_View.GetColumnByFieldName('Group').Index;
								for i := 0 to iCount - 1 do
								begin
									sTmp := lst_Result.item[i].attributes.getNamedItem('Value').Text;
									sTmp := StringReplace(sTmp, #$A, '', [rfReplaceAll]);

									GetTextSeperationEx('│', sTmp, ls_Rcrd);
									if ls_Rcrd[10] <> '' then
									begin
										tmpStr := ls_Rcrd[10];
										if tmpStr[Length(tmpStr)] = ',' then
											tmpStr := Copy(tmpStr, 1, Length(tmpStr) - 1);
										ls_Rcrd[10] := tmpStr;
									end;
									if ls_Rcrd[11] = '/' then ls_Rcrd[11] := '';
									if ls_Rcrd[12] = '/' then ls_Rcrd[12] := '';
									ls_Rcrd[4] := strtocall(ls_Rcrd[4]);

									if (GS_PRJ_AREA = 'O') and (Pos('㉹', Frm_JON07.WkName) = 1) and (GT_USERIF.WKVPhone = 'y') then
									begin
										sDate := Frm_JON07.AccTime;
										sDate := StringReplace(sDate, '-', '', [rfReplaceAll]);
										sDate := StringReplace(sDate, ' ', '', [rfReplaceAll]);
										sDate := StringReplace(sDate, ':', '', [rfReplaceAll]);

										if StartDateTime('yyyymmddhhmmss') >= sDate then        // 과거 오더
										begin
											ls_Rcrd[7] := strtocall(ls_Rcrd[16]);
											ls_Rcrd[8] := strtocall(ls_Rcrd[17]);
										end else                    // 당일오더
										begin
											if Trim(ls_Rcrd[16]) <> '' then	ls_Rcrd[7] := strtocall(ls_Rcrd[16]);
										  if Trim(ls_Rcrd[17]) <> '' then	ls_Rcrd[8] := strtocall(ls_Rcrd[17]);
										end;
									end else
									begin
										ls_Rcrd[7] := strtocall(ls_Rcrd[7]);
										ls_Rcrd[8] := strtocall(ls_Rcrd[8]);
									end;
									Application.ProcessMessages;

                  bChild := False;
                  if i Mod 2 = 0 then
                  begin
                    if (i = 0) Or (sTmp0 = '') Or (sTmp0 <> ls_Rcrd[10]) then
                    begin
                      bChild := True;
                      sTmp0 := ls_Rcrd[10];
                    end;
                  end else
                  if i Mod 2 = 1 then
                  begin
                    if (i = 1) Or (sTmp1 = '') Or (sTmp1 <> ls_Rcrd[10]) then
                    begin
                      bChild := True;
                      sTmp1 := ls_Rcrd[10];
                    end;
                  end;

                  if Not GB_JON07_OPT1 then bChild := True;  // 중복내역 따로보기 아니면 무조건 표시

									//ls_Rcrd.Count - 3을 한 이유는 가상번호로 인해 2개항목이 추가 되었으나 필드에는 표시해주지 않음
									//16,17번째 스킵(가상번호)
									//18 : 기사본사코드
									//19 : OdbWkSabun
									//20 : OdbEtc
                  if bChild then
                  begin
   									iRow := Frm_JON07.stg_His_View.DataController.AppendRecord;
                  end else
                  begin
                    Inc(ij);
                  end;
									k := 0;
									for jj := 0 to ls_Rcrd.Count-1 do
									begin
										if jj in [16,17] then continue;
                    if bChild then
  										Frm_JON07.stg_His_View.DataController.Values[iRow, iTitle[k]] := ls_Rcrd[jj]
                    else
                    begin
                      case k of
                         0 : Frm_JON07.STG_HIS[ij].List00 := ls_Rcrd[jj];
                         1 : Frm_JON07.STG_HIS[ij].List01 := ls_Rcrd[jj];
                         2 : Frm_JON07.STG_HIS[ij].List02 := ls_Rcrd[jj];
                         3 : Frm_JON07.STG_HIS[ij].List03 := ls_Rcrd[jj];
                         4 : Frm_JON07.STG_HIS[ij].List04 := ls_Rcrd[jj];
                         5 : Frm_JON07.STG_HIS[ij].List05 := ls_Rcrd[jj];
                         6 : Frm_JON07.STG_HIS[ij].List06 := ls_Rcrd[jj];
												 7 : Frm_JON07.STG_HIS[ij].List07 := ls_Rcrd[jj];
                         8 : Frm_JON07.STG_HIS[ij].List08 := ls_Rcrd[jj];
                         9 : Frm_JON07.STG_HIS[ij].List09 := ls_Rcrd[jj];
                        10 : Frm_JON07.STG_HIS[ij].List10 := ls_Rcrd[jj];
                        11 : Frm_JON07.STG_HIS[ij].List11 := ls_Rcrd[jj];
                        12 : Frm_JON07.STG_HIS[ij].List12 := ls_Rcrd[jj];
                        13 : Frm_JON07.STG_HIS[ij].List13 := ls_Rcrd[jj];
                        14 : Frm_JON07.STG_HIS[ij].List14 := ls_Rcrd[jj];
                        15 : Frm_JON07.STG_HIS[ij].List15 := ls_Rcrd[jj];
                        16 : Frm_JON07.STG_HIS[ij].List16 := ls_Rcrd[jj];
                        17 : Frm_JON07.STG_HIS[ij].List17 := ls_Rcrd[jj];
												18 : Frm_JON07.STG_HIS[ij].List18 := ls_Rcrd[jj];
												19 : Frm_JON07.STG_HIS[ij].List19 := ls_Rcrd[jj];
											end;
                    end;
										inc(k);
									end;
                  if Not bChild then Frm_JON07.STG_HIS[ij].ListNo := iRow;
                  Frm_JON07.stg_His_View.DataController.Values[iRow, iGrp] := iRow;
                  Frm_JON07.gStCnt := ij;

									tmpStr := ls_Rcrd[1];
									case tmpStr[1] of
                    '5': tmpStr := GS_EnvFile.ReadString('StatusSort', '대기',  '0');
                    'R': tmpStr := GS_EnvFile.ReadString('StatusSort', '예약',  '1');
                    '0': tmpStr := GS_EnvFile.ReadString('StatusSort', '접수',  '2');
                    'C', 'M' : tmpStr := GS_EnvFile.ReadString('StatusSort', '근배',  '3');
                    'B': tmpStr := GS_EnvFile.ReadString('StatusSort', '배차중','4');
                    '3': tmpStr := GS_EnvFile.ReadString('StatusSort', '강제',  '5');
                    '1': tmpStr := GS_EnvFile.ReadString('StatusSort', '배차',  '6');
                    'D': tmpStr := GS_EnvFile.ReadString('StatusSort', '운행',  '7');
                    '2': tmpStr := GS_EnvFile.ReadString('StatusSort', '완료',  '8');
                    '8': tmpStr := GS_EnvFile.ReadString('StatusSort', '취소',  '9');
                    '4': tmpStr := GS_EnvFile.ReadString('StatusSort', '문의',  'A');
									end;
									iIndex := Frm_JON07.stg_His_View.GetColumnByFieldName('상태정렬').Index;
									Frm_JON07.stg_His_View.DataController.Values[iRow, iIndex] := tmpStr;  // 상태정렬
									iIndex := Frm_JON07.stg_His_View.GetColumnByFieldName('OdbWkSabun').Index;
									Frm_JON07.stg_His_View.DataController.Values[iRow, iIndex] := ls_Rcrd[19];  // OdbWkSabun
									iIndex := Frm_JON07.stg_His_View.GetColumnByFieldName('OdbEtc').Index;
									Frm_JON07.stg_His_View.DataController.Values[iRow, iIndex] := ls_Rcrd[20];  // OdbEtc    카카오 기타정보
									iIndex := Frm_JON07.stg_His_View.GetColumnByFieldName('처리자ID').Index;
									Frm_JON07.stg_His_View.DataController.Values[iRow, iIndex] := ls_Rcrd[21];  // 처리자ID
								end;
							finally
                for i := 0 to Frm_JON07.gStCnt - 1  do
                begin
                  sGrpNo := IntToStr(Frm_JON07.STG_HIS[i].ListNo);
                  if Frm_JON07.gGroupIndex.IndexOf(sGrpNo) < 0 then Frm_JON07.gGroupIndex.Add(sGrpNo);
                end;

								Frm_JON07.stg_His_View.DataController.EndUpdate;

								iCol := Frm_JON07.stg_His_View.GetColumnByFieldName('처리일시').Index;
								Frm_JON07.stg_His_View.Columns[iCol].SortIndex := 0;
								Frm_JON07.stg_His_View.Columns[iCol].SortOrder := soDescending;
								iCol := Frm_JON07.stg_His_View.GetColumnByFieldName('상태정렬').Index;
								Frm_JON07.stg_His_View.Columns[iCol].SortIndex := 1;
								Frm_JON07.stg_His_View.Columns[iCol].SortOrder := soDescending;

								ls_Rcrd.Free;
							end;
							Frm_JON07.Show;
						end;
					end;
				finally
					xdom := Nil;
        end;
			end;
		finally
			Frm_Flash.hide;
			FreeAndNil(slList);
			Screen.Cursor := crDefault;
		end;
	except on E: Exception do
		begin
			Assert(False, E.Message);
			Screen.Cursor := crDefault;
		end;
	end;
end;

procedure TFrm_Main.proc_AiRecHis(sConfSlip : string; iJon03 : Integer);
var
  ls_TxQry, ls_TxLoad, sQueryTemp : string;
  rv_str: string;
  ls_rxxml: String;
  slReceive: TStringList;
  ErrCode: integer;
begin
  SetDebugeWrite('Main.proc_AiRecHis');
  if (Trim(sConfSlip) = '') then Exit;

  try
		Screen.Cursor := crHourGlass;

		fGet_BlowFish_Query(GSQ_AI_RECORD_HIS, sQueryTemp);
		ls_TxQry := Format(sQueryTemp, [En_Coding(sConfSlip)]); // 과거건 상세조회
		ls_TxLoad := GetSel01('Main' +'AiReHis', ls_TxQry);

    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
				begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;

					proc_recieve(ls_rxxml);
				end;
      end;
    finally
			Frm_Flash.Hide;
      FreeAndNil(slReceive);
			Screen.Cursor := crDefault;
		end;
  except on E: Exception do
    begin
      Assert(False, E.Message);
      Screen.Cursor := crDefault;
	  end;
  end;
end;

procedure TFrm_Main.pCallingCID(sCust_Tel, sKeyNumber, sSlip, sGubun : String);
var
	sCustTel, sip, sNaesun, sKey, str, sKeyNum, sSelSvr, sIp1, sIp2, sStr, Param, sBrNo, XmlData, ErrMsg : string;
	ErrCode, iCnt, i : Integer;
	iTempFile: Tinifile;
	sTime: TDateTime;
	bSendOk : Boolean;
	sTmp, sUDPSend : string;
begin
	SetDebugeWrite('Main.pCallingCID');

	bSendOk := False;

	sCustTel := sCust_Tel;

  if pos('*', sCustTel) > 0 then
  begin
    GMessagebox('전화걸기 권한이 없습니다.', CDMSE);
    Exit;
  end;

  if Copy(Trim(sCustTel), 1, 3) = '989' then
  begin
    GMessagebox('통신사 데이터 쉐어링 번호로는 전화 할 수 없습니다.' +#13#10+
                '<기사번호['+ sCustTel + '] 수발신 불가폰>', CDMSE);
    Exit;
  end;

  if Length(Trim(sCustTel)) < 8 then
  begin
    GMessagebox('전화번호를 확인 하세요!', CDMSE);
    Exit;
  end;

  // 1분이 지나면 자동으로 해제 된다. 2011-11-15.
  if ((Now - gtCTI_Calling_Time) > (1 / 24 / 60 / 10)) then
  begin
    gbCTI_Calling_Status := False;
    //gtCTI_Calling_Time   := Now;   // :: [분초(시간) 저장]
  end;

	if (gbCTI_Calling_Status = True) then
  begin
    GMessagebox('이미 전화를 걸고 있는 중이므로 중복으로 전화를 걸수 없습니다.', CDMSE);
    Exit;
  end;

	if sKeyNumber = '' then sKeyNumber := GT_POSS_KEYNUM;

	Log(Format('CTI --> CALLING [%s, %s, %s]', [GT_OCX, GT_POSS_IP, System.StrUtils.Rightstr(sCustTel, 4)]), HEARTLOGPATHFILE);

	if ( GT_OCX = 'SSIO' ) Or ( GT_OCX = 'SSIT' ) then
  begin
		sKeyNum := sKeyNumber;
		sKeyNum := StringReplace(sKeyNum, '-', '', [rfReplaceAll]);
		if sKeyNum = '' then
		begin
			GMessagebox('상황실번호가 등록되지 않았습니다.'#13#10'[설정>CID설정]CTI상황실 항목에 번호를 입력해 주세요.', CDMSE);
			Exit;
		end;

		try
			// 서버에 연결
			if Not bSSIO_CTI.Socket.Connected then
      begin
        if GT_OCX = 'SSIT' then
        begin
          iCnt := 0;
          while Not bSSIOCTIConnected do
          begin
            tmr_SSIO_check.Tag := 0;
            tmr_SSIO_check.Interval := 10;
            tmr_SSIO_check.Enabled := True;
            Application.ProcessMessages;
            Sleep(10);
            Inc(iCnt);
            if iCnt > 50 then
            begin
               SetDebugeWrite('bSSIO_CTI Socket Active Error ');
               Break;
            end;
          end;
        end;
      end;
		except
			on e:Exception do
			begin
				ShowMessage('전화걸기ErrorSSIO:'+e.Message);
			end;
		end;

    if bSSIO_CTI.Socket.Connected then
    begin
  		gbCTI_Calling_Status := True;
  		gtCTI_Calling_Time   := Now;   // :: [분초(시간) 저장]

      // 2501. 전화걸기 요청 패킷
      sStr := '#';
      sStr := sStr + '2501';                    // 패킷 구분 값
      sStr := sStr + Rpad('5001'  ,   4, ' ');  // 사업자 구분 코드 ( 5001 )
      sStr := sStr + Rpad(''      ,  20, ' ');  // 사업자 자체 패킷 구분 번호
      sStr := sStr + Rpad(''      ,   2, ' ');  // 결과값
      sStr := sStr + Rpad(sCustTel,  15, ' ');  // 전화걸번호
      sStr := sStr + Rpad(sKeyNum  ,  15, ' ');  // 발신번호
      sStr := sStr + Rpad(''      ,  15, ' ');  // 대표번호
      sStr := sStr + '$';

      bSSIO_CTI.Socket.SendText(sStr);
      bSendOk := True;
      SetDebugeWrite('bSSIO_CTI Send: '+ sStr);

//      bSSIO_CTI.Active := False;         // 전화걸기 성공후 연결 종료  // 종료 없이 계속 연결 상태로 유지 2017.04.27. LYB
    end else
    begin
      SetDebugeWrite('bSSIO_CTI Send Not Connected : '+ sStr);
    end;
  end else
	if ( GT_OCX = 'SI415' ) then
	begin
		sKeyNum := sKeyNumber;
		sKeyNum := StringReplace(sKeyNum, '-', '', [rfReplaceAll]);
		if sKeyNum = '' then
		begin
			GMessagebox('상황실번호가 등록되지 않았습니다.'#13#10'[설정>CID설정]CTI상황실 항목에 번호를 입력해 주세요.', CDMSE);
			Exit;
		end;

		try
			// 서버에 연결
			if Not bSI415_2601.Socket.Connected then
			begin
				iCnt := 0;
				while Not bSI415CTIConnected do
				begin
					tmr_SI415check.Tag := 0;
					tmr_SI415check.Interval := 10;
					tmr_SI415check.Enabled := True;
					tmr_SI415check.Interval := 3000;
					Application.ProcessMessages;
					Sleep(10);
					Inc(iCnt);
					if iCnt > 50 then 
					begin
						Break;
					end;
				end;
			end;
		except
			on e:Exception do
			begin
				ShowMessage('전화걸기ErrorSSIO:'+e.Message);
			end;
		end;
		gbCTI_Calling_Status := True;
		gtCTI_Calling_Time   := Now;   // :: [분초(시간) 저장]

		sStr := fSI_2501_Send(sCustTel, sKeyNum);
		bSI415_2601.Socket.SendText(sStr);
		SetDebugeWrite('bSI415_2601 Send: '+ sStr);
	end else
	if GT_OCX = 'NKT' then
	begin
		sKeyNum := sKeyNumber;
		sKeyNum := StringReplace(sKeyNum, '-', '', [rfReplaceAll]);
		if sKeyNum = '' then
		begin
			GMessagebox('상황실번호가 등록되지 않았습니다.'#13#10'[설정>CID설정]CTI상황실 항목에 NKT SoftPhone 번호를 입력해 주세요.', CDMSE);
			Frm_JON54.btn_Calling.Enabled := True;
			Exit;
		end;

		try
			// 서버에 연결
			if bNKT_4BS.Socket.Connected = False then
				bNKT_4BS.Active := True;
		except
			on e:Exception do
			begin
				ShowMessage('전화걸기ErrorNKT:'+e.Message);
			end;
		end;

  	if bNKT_4BS.Socket.Connected then
    begin
  		gbCTI_Calling_Status := True;
	  	gtCTI_Calling_Time   := Now;   // :: [분초(시간) 저장]

      sStr := '';
      sStr := sStr + '201';
      sStr := sStr + Rpad('C', 15, ' ');;
      sStr := sStr + Rpad('', 2, ' ');;
      sStr := sStr + '137';
      sStr := sStr + Rpad(sKeyNum, 15, ' '); //대표번호
      sStr := sStr + Rpad(sCustTel, 30, ' ');
      sStr := sStr + Rpad('', 60, ' ');
      sStr := sStr + GT_RECEIVER_KIND;
      sStr := sStr + Rpad('', 1, ' ');
      sStr := sStr + Rpad('', 15, ' ');
      sStr := sStr + Rpad('', 15, ' ');

  		bNKT_4BS.Socket.SendText(sStr);
      bSendOk := True;
  		SetDebugeWrite('NKT Send: '+ sStr);
    end else
    begin
      GMessagebox('전화걸기 서버(CTI서버)에 연결 할 수 없습니다.', CDMSE);
  		SetDebugeWrite('NKT Send Not Connected : '+ sStr);
    end;
		GT_NKT := 1;
	end else
	if (GT_POSS_TEL = 1) and (GT_POSS_IP <> '') then
	begin
		SetDebugeWrite('GT_POSS_IP : ' + GT_POSS_IP + ',' + sCustTel);
		if GS_CleanSKYUse then    //맑은하늘 사용 체크시
		begin
			sTmp := func_OB_ClearSky(sCustTel, sKeyNumber); 
			if sTmp <> '00' then
			begin
				if sTmp = '01' then
				begin
					GMessagebox('맑은하늘 통화중입니다.'+#13#10+#13#10
										+ 'errorCode[' + sTmp + ']', CDMSE);
					exit;
				end else
				if sTmp = '99' then
				begin
					GMessagebox('맑은하늘에서 지사정보를 찾을 수 없습니다.'+#13#10+#13#10
										+ 'errorCode[' + sTmp + ']', CDMSE);
					exit;
				end else
				begin
					GMessagebox('맑은하늘에서 전화걸기가 거부되었습니다.'+#13#10+#13#10
										+ 'errorCode[' + sTmp + ']', CDMSE);
					exit;
				end;
			end;
		end else   
		begin
			try
				if Tapi_CTI.Socket.Connected = True then
					Tapi_CTI.Active := False;

				Tapi_CTI.Host := GT_POSS_IP;
				Tapi_CTI.Port := 21859;
			except
				on e:Exception do
				begin
					ShowMessage('전화걸기 Error:' + e.Message);
				end;
			end;

			try
				try
					// 서버에 연결
					if Tapi_CTI.Socket.Connected = False then
						Tapi_CTI.Active := True;
				except
					on e:Exception do
					begin
						ShowMessage('Error Msg: ' + e.Message );
						Exit;
					end;
				end;

				gbCTI_Calling_Status := True;
				gtCTI_Calling_Time   := Now;   // :: [분초(시간) 저장]

				sTime := Now;

				while True do
				begin
					if (Now - sTime) > (1 / 24 / 60 / 10) then
					begin
						break;
					end else
					begin
						Application.ProcessMessages;
						Sleep(200);
						if Tapi_CTI.Socket.Connected = True then
						begin
							break;
						end;
					end;
				end;

				try
					iTempFile := TIniFile.Create(ENVPATHFILE);

					sSelSvr := iTempFile.ReadString('CID_COMM', 'CID_SELSVR', '1');
					sIp1 := iTempFile.ReadString('CID_COMM', 'CID_IP', '');
					sIp2 := iTempFile.ReadString('CID_COMM', 'CID_IP2', '');

					if sSelSvr = '1' then sip := sIp1
													 else sip := sIp2;

					snaesun := gsInternalNumber;
					if Pos(',', snaesun) > 0 then
						snaesun := Copy(snaesun, 1, Pos(',', snaesun) - 1);

					if Tapi_CTI.Socket.Connected = True then
					begin
						sKeyNum := sKeyNumber;
						sKeyNum := StringReplace(sKeyNum, '-', '', [rfReplaceAll]);
						// 전화걸기 요청
						gtOUTB.sType := '100';
						gtOUTB.sRltc := '00';
						//gtOUTB.sLine := Trim(edtLine.Text) + '    ';
						gtOUTB.sLine := '    ';
						gtOUTB.sRLin := Rpad(snaesun, 4, ' ');
						gtOUTB.sTell := Rpad(sCustTel, 15, ' ');
						gtOUTB.sCLin := Rpad(sKeyNum, 15, ' '); //대표번호

						str := gtOUTB.sType + gtOUTB.sRltc + gtOUTB.sLine + gtOUTB.sRLin + gtOUTB.sTell + gtOUTB.sCLin;
						SetDebugeWrite('전화걸기 : ' + str);
						Tapi_CTI.Socket.SendText(str);
						bSendOk := True;
					end else
					begin
						Log(Format('CTI --> Connect Error [CTI IP:%s, LocalIP:%s, PublicIP:%s, 내선:%s, 전화번호:%s]', [GT_POSS_IP, GT_USERIF.IP, GS_PublicIP, gsInternalNumber, sCustTel]), HEARTLOGPATHFILE);
            if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
              Assert(False, Format('CTI Not Connect [CTI IP:%s, LocalIP:%s, PublicIP:%s, 내선:%s, 전화번호:%s]', [GT_POSS_IP, GT_USERIF.IP, GS_PublicIP, gsInternalNumber, sCustTel]));
						GMessagebox('전화걸기 서버(CTI서버)에 연결 할 수 없습니다.', CDMSE);
					end;
				finally
					FreeAndNil(iTempFile);
				end;
			except
				on e:Exception do
				begin
					gbCTI_Calling_Status := False;
					Log(Format('CTI --> Error [%s]', [e.Message]), HEARTLOGPATHFILE);
					ShowMessage('전화걸기Error:' + e.Message );
					Exit;
				end;
			end;
		end;
	end else
  if ((GT_POSS_TEL = 1) or (GT_POSS_TEL = 0)) and (GT_POSS_IP = '') then
	begin
    if ( GT_OCX = 'KLCNS' ) Or ( GT_OCX = 'LGUCT' ) then
    begin
      try
        if xCTI_CTI.Socket.Connected = True then
          xCTI_CTI.Active := False;

				xCTI_CTI.Host := '127.0.0.1';
        xCTI_CTI.Port := 18753;
      except
        on e:Exception do
        begin
          ShowMessage('전화걸기 Error:' + e.Message);
        end;
      end;

      try
        // 서버에 연결
				if xCTI_CTI.Socket.Connected = False then
					xCTI_CTI.Active := True;
      except
        on e:Exception do
        begin
          ShowMessage('전화걸기 Error:' + e.Message);
        end;
      end;

      sTime := Now;

      while True do
      begin
        if (Now - sTime) > (1 / 24 / 60 / 10) then
        begin
          break;
        end else
        begin
          Application.ProcessMessages;
          Sleep(200);
          if xCTI_CTI.Socket.Connected then
          begin
            break;
          end;
        end;
      end;

      snaesun := gsInternalNumber;
      if Pos(',', snaesun) > 0 then
        snaesun := Copy(snaesun, 1, Pos(',', snaesun) - 1);

      if GT_POSS_KEYNUM <> '' then
        sKeyNum := GT_POSS_KEYNUM;

      if xCTI_CTI.Socket.Connected = True then
      begin
        // 전화걸기 요청
				sKeyNum := StringReplace(sKeyNumber, '-', '', [rfReplaceAll]);
				gtOUTB.sType := '200';
				gtOUTB.sTell := Rpad(sCustTel,   14, ' ');
				gtOUTB.sCLin := Rpad(sKeyNum,  14, ' '); //대표번호
				gtOUTB.sRltc := '  ';
				gtOUTB.sLine := '    ';

        xCTI_CTI.Socket.SendText(#2 + gtOUTB.sType + gtOUTB.sTell + Rpad(Trim(snaesun), 5,  ' ') + gtOUTB.sCLin + gtOUTB.sRltc + #3);
        bSendOk := True;
      end;
    end else
    if GT_OCX = 'BCTI' then
    begin
      //전화걸기 기능하고 IP등록이 되어있으면 전화걸기 기능을 사용한다.
      //전화걸기 요청
      try
        if bCTI_CTI.Socket.Connected = True then
          bCTI_CTI.Active := False;

        bCTI_CTI.Host := '127.0.0.1';
        bCTI_CTI.Port := 18753;
      except
        on e:Exception do
        begin
          ShowMessage('전화걸기 Error:' + e.Message);
        end;
      end;

      try
        // 서버에 연결
        if bCTI_CTI.Socket.Connected = False then
          bCTI_CTI.Active := True;
      except
        on e:Exception do
        begin
          ShowMessage('전화걸기 Error:' + e.Message);
        end;
      end;

      sTime := Now;

      while True do
      begin
        if (Now - sTime) > (1 / 24 / 60 / 10) then
        begin
          break;
        end else
        begin
          Application.ProcessMessages;
          Sleep(200);
          if bCTI_CTI.Socket.Connected then
          begin
            break;
          end;
        end;
      end;

      snaesun := gsInternalNumber;
      if Pos(',', snaesun) > 0 then
        snaesun := Copy(snaesun, 1, Pos(',', snaesun) - 1);

      if GT_POSS_KEYNUM <> '' then
        sKeyNum := GT_POSS_KEYNUM;

      if bCTI_CTI.Socket.Connected = True then
      begin
        // 전화걸기 요청
        sKeyNum := StringReplace(sKeyNumber, '-', '', [rfReplaceAll]);
        gtOUTB.sType := '200';
        gtOUTB.sTell := Rpad(sCustTel,   14, ' ');
        gtOUTB.sCLin := Rpad(sKeyNum,  14, ' '); //대표번호
        gtOUTB.sRltc := '  ';
        gtOUTB.sLine := '    ';

        bCTI_CTI.Socket.SendText(#2 + gtOUTB.sType + gtOUTB.sTell + Rpad(Trim(snaesun), 5,  ' ') + gtOUTB.sCLin + gtOUTB.sRltc + #3);
        bSendOk := True;
      end;
    end else
    if (GT_OCX = '1004') or (GT_OCX = '1002') then
    begin
      try
        IdClient.Disconnect;

        IdClient.Host := GT_USERIF.IP;
        IdClient.Port := GT_CAT_PORT.OutboundPort;
        // 5114 --> 5115 추가 2007-12-12 최도순
        IdClient.Connect();
        IdClient.IOHandler.Write(sCustTel);
				bSendOk := True;
      except
        on E: Exception do
        begin
					Log('TelNo : ' + sCustTel + ' : Error :' + E.Message,
            LOGDATADIRECTORY + '1004_log_error.txt');
        end;
      end;
		end else
    if GT_OCX = 'OJ' then
    begin
      try
        iTempFile := TIniFile.Create(ENVPATHFILE);

        sSelSvr := iTempFile.ReadString('CID_COMM', 'CID_SELSVR', '1');
        sIp1 := iTempFile.ReadString('CID_COMM', 'CID_IP', '');
        sIp2 := iTempFile.ReadString('CID_COMM', 'CID_IP2', '');

        if sSelSvr = '1' then sip := sIp1
                         else sip := sIp2;

        sNaesun := gsInternalNumber;

        if Pos(',', snaesun) > 0 then
          snaesun := Copy(snaesun, 1, Pos(',', snaesun) - 1);
				sCust_Tel := sCustTel;
        if copy(sCust_Tel, 1, 2) = '01' then
          sKey := '0'
        else
          if copy(sCust_Tel, 1, 2) = '02' then
        begin
          sKey := '02';
          sCust_Tel := copy(sCust_Tel, 3, length(sCust_Tel) - 2);
        end else
        begin
          sKey := copy(sCust_Tel, 1, 3);
					sCust_Tel := copy(sCust_Tel, 4, length(sCust_Tel) - 3);
				end;
        IdClient.Disconnect;

        if gsCidVersion = 'CAT' then
        begin // CAT:신버전, OLD:구버전
					IdClient.Host := 'localhost';
        end else
        begin
          IdClient.Host := sIp;
        end;
        IdClient.Port := GT_CAT_PORT.OutboundPort;
        // 5114 --> 5115 추가 2007-12-12 최도순
				IdClient.Connect();
				IdClient.IOHandler.Write(sNaesun + ',' + sCust_Tel + ',' + sKey);
				bSendOk := True;
      except
        on E: Exception do
        begin
          Assert(False, E.Message);
					Log('TelNo : ' + sNaesun + ',' + sCust_Tel + ',' + sKey + ' : Error :' + E.Message, LOGDATADIRECTORY + 'OJ_log_error.txt');
        end;
      end;
      FreeAndNil(iTempFile);
    end else
		if GT_OCX = 'DAEJEN' then
		begin
			try
				iTempFile := TIniFile.Create(ENVPATHFILE);
				sSelSvr := iTempFile.ReadString('CID_COMM', 'CID_SELSVR', '1');
				sIp1 := iTempFile.ReadString('CID_COMM', 'CID_IP', '');
				sIp2 := iTempFile.ReadString('CID_COMM', 'CID_IP2', '');

				if sSelSvr = '1' then sip := sIp1
												 else sip := sIp2;
				sNaesun := gsInternalNumber;

				if Pos(',', snaesun) > 0 then
					snaesun := Copy(snaesun, 1, Pos(',', snaesun) - 1);
				sCust_Tel := sCustTel;
				IdClient.Disconnect;

				if gsCidVersion = 'CAT' then
				begin // CAT:신버전, OLD:구버전
					IdClient.Host := 'localhost';
				end else
				begin
					IdClient.Host := sIp;
				end;
				IdClient.Port := GT_CAT_PORT.OutboundPort;
				IdClient.Connect();
				IdClient.IOHandler.Write(sNaesun + ',' + sCust_Tel);
				bSendOk := True;
			except
				on E: Exception do
				begin
					Assert(False, E.Message);
					Log('TelNo : ' + sNaesun + ',' + sCust_Tel + ' : Error :' +
						E.Message, LOGDATADIRECTORY + 'DAEJEN_TAPHI_ERR.txt');
				end;
			end;
			FreeAndNil(iTempFile);
		end else
		if GT_OCX = 'SKY' then
		begin
			if GS_CleanSKYUse then    //맑은하늘 사용 체크시
			begin
				sTmp := func_OB_ClearSky(sCustTel, sKeyNumber);
				if sTmp <> '00' then
				begin
					if sTmp = '01' then
					begin
						GMessagebox('맑은하늘 통화중입니다.'+#13#10+#13#10
											+ 'errorCode[' + sTmp + ']', CDMSE);
						exit;
					end else
					if sTmp = '99' then
					begin
						GMessagebox('맑은하늘에서 지사정보를 찾을 수 없습니다.'+#13#10+#13#10
											+ 'errorCode[' + sTmp + ']', CDMSE);
						exit;
					end else
					begin
						GMessagebox('맑은하늘에서 전화걸기가 거부되었습니다.'+#13#10+#13#10
											+ 'errorCode[' + sTmp + ']', CDMSE);
						exit;
					end;
				end;
			end;
		end;
  end;

	//콜마너XECID 사용하면서 옵션을 체크할 경우 20200928 KHS 팀장님 지시
	if (GS_COUNSEL_OutCallCidSync) and (cxCIDList.ItemIndex = 0) then
	begin
		Try
			IdUDPClient1.Host := GT_CIDINFO.SERVER_IP;
			IdUDPClient1.Port := 30192;
			IdUDPClient1.Connect;

			if IdUDPClient1.Connected then
			begin
				sKeyNum := sKeyNumber;
				sKeyNum := StringReplace(sKeyNum, '-', '', [rfReplaceAll]);
				sBrNo := GetBrNoFromKeyNum(sKeyNum);

				sNaesun  := Rpad(gsInternalNumber,  4, ' ');
				sCustTel := Rpad(sCust_Tel       , 12, ' ');
				sBrNo    := Rpad(sBrNo           ,  5, ' ');
				sKeyNum  := Rpad(sKeyNum         , 12, ' ');
				sUDPSend := sNaesun + sCustTel + sBrNo + sKeyNum;

				IdUDPClient1.Send(sUDPSend);
				sleep(300);
				IdUDPClient1.Disconnect;
			end;
		except
		end;
	end;

  try
    if Trim(sSlip) <> '' then
    begin
      Param := sSlip + '│' + sCust_Tel + '│' + sGubun;
			if not RequestBase(GetCallable06('SET_ORDER_CALLING_HIS', 'MNG.SET_ORDER_CALLING_HIS', Param), XmlData, ErrCode, ErrMsg) then
      begin
        GMessageBox(Format('[%d] %s', [ErrCode, ErrMsg]), CDMSE);
				Exit;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// sLine1 : 상담원내선번호, sLine2 : 당겨받을 내선번호
procedure TFrm_Main.pCallingOFFERING(sCust_Tel, sKeyNumber, sTargetLine : String);
var
	sCustTel, sip, sNaesun, sKey, str, sKeyNum, sSelSvr, sIp1, sIp2, sStr, Param, sBrNo, XmlData, ErrMsg : string;
	ErrCode, iCnt, i : Integer;
	iTempFile: Tinifile;
	sTime: TDateTime;
	bSendOk : Boolean;
	sTmp, sUDPSend : string;
begin
	SetDebugeWrite('Main.pCallingOFFERING');

	bSendOk := False;
	sCustTel := sCust_Tel;

//    RequestCode = Trim(Mid(strReciveData, 1, 3))
//    errCode = Trim(Mid(strReciveData, 4, 2))
//    Line1 = Trim(Mid(strReciveData, 6, 4))
//    Line2 = Trim(Mid(strReciveData, 10, 4))
//    PhoneNumber = Trim(Mid(strReciveData, 14, 15))
//    LineNumber = Trim(Mid(strReciveData, 29, 15))

  if ( Trim(sTargetLine) = '' ) then
  begin
    GMessagebox('당겨받을 내선번호를 확인 하세요!', CDMSE);
    Exit;
  end;

  // 1분이 지나면 자동으로 해제 된다. 2011-11-15.
  if ((Now - gtCTI_Calling_Time) > (1 / 24 / 60 / 10)) then
  begin
    gbCTI_Calling_Status := False;
  end;

	if (gbCTI_Calling_Status = True) then
  begin
    GMessagebox('이미 전화기를 사용 중이므로 중복으로 전화를 사용 할 수 없습니다.', CDMSE);
    Exit;
  end;

	if sKeyNumber = '' then sKeyNumber := GT_POSS_KEYNUM;

	Log(Format('CTI --> OFFERING [%s, %s, %s, %s, %s]', [GT_OCX, GT_POSS_IP, gsInternalNumber, sTargetLine, System.StrUtils.Rightstr(sCustTel, 4)]), HEARTLOGPATHFILE);

	begin
		SetDebugeWrite('GT_POSS_IP : ' + GT_POSS_IP + ',' + sCustTel);
		try
			if Tapi_CTI.Socket.Connected = True then
				Tapi_CTI.Active := False;

			Tapi_CTI.Host := GT_POSS_IP;
			Tapi_CTI.Port := 21859;
		except
			on e:Exception do
			begin
				ShowMessage('당겨받기 Error:' + e.Message);
			end;
		end;

		try
			try
				// 서버에 연결
				if Tapi_CTI.Socket.Connected = False then
					Tapi_CTI.Active := True;
			except
				on e:Exception do
				begin
					ShowMessage('Error Msg: ' + e.Message );
					Exit;
				end;
			end;

			gbCTI_Calling_Status := True;
			gtCTI_Calling_Time   := Now;   // :: [분초(시간) 저장]

			sTime := Now;

			while True do
			begin
				if (Now - sTime) > (1 / 24 / 60 / 10) then
				begin
					break;
				end else
				begin
					Application.ProcessMessages;
					Sleep(200);
					if Tapi_CTI.Socket.Connected = True then
					begin
						break;
					end;
				end;
			end;

      snaesun := gsInternalNumber;
      if Pos(',', snaesun) > 0 then
        snaesun := Copy(snaesun, 1, Pos(',', snaesun) - 1);

      if Tapi_CTI.Socket.Connected = True then
      begin
        sKeyNum := sKeyNumber;
        sKeyNum := StringReplace(sKeyNum, '-', '', [rfReplaceAll]);
        // 당겨받기 요청
        gtOUTB.sType := '120';
        gtOUTB.sRltc := '00';
        gtOUTB.sLine := Rpad(sTargetLine,  4, ' ');
        gtOUTB.sRLin := Rpad(snaesun    ,  4, ' ');
        gtOUTB.sTell := Rpad(sCustTel   , 15, ' ');
        gtOUTB.sCLin := Rpad(sKeyNum    , 15, ' '); //대표번호

        str := gtOUTB.sType + gtOUTB.sRltc + gtOUTB.sLine + gtOUTB.sRLin + gtOUTB.sTell + gtOUTB.sCLin;
        SetDebugeWrite('당겨받기 : ' + str);
        Tapi_CTI.Socket.SendText(str);
        bSendOk := True;
      end else
      begin
        Log(Format('CTI --> Connect Error [CTI IP:%s, LocalIP:%s, PublicIP:%s, 내선1:%s, 내선2:%s, 전화번호:%s]', [GT_POSS_IP, GT_USERIF.IP, GS_PublicIP, gsInternalNumber, sTargetLine, sCustTel]), HEARTLOGPATHFILE);
        if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
          Assert(False, Format('CTI Not Connect [CTI IP:%s, LocalIP:%s, PublicIP:%s, 내선1:%s, 내선2:%s, 전화번호:%s]', [GT_POSS_IP, GT_USERIF.IP, GS_PublicIP, gsInternalNumber, sTargetLine, sCustTel]));
        GMessagebox('서버(CTI서버)에 연결 할 수 없습니다.', CDMSE);
      end;
		except
			on e:Exception do
			begin
				gbCTI_Calling_Status := False;
				Log(Format('CTI --> Error [%s]', [e.Message]), HEARTLOGPATHFILE);
				ShowMessage('당겨받기 Error:' + e.Message );
				Exit;
			end;
		end;
  end;
end;

procedure TFrm_Main.btn_CallListNeasunClick(Sender: TObject);
var sTmp : string;
begin
  SetDebugeWrite('Main.btn_CallListNeasunClick');
  try
    sTmp := mmo_CallListNeasun.Text;
    sTmp := StringReplace(mmo_CallListNeasun.Text, ' ', '', [rfReplaceAll]);
    sTmp := StringReplace(sTmp, #13, '', [rfReplaceAll]);
    sTmp := StringReplace(sTmp, #10, '', [rfReplaceAll]);

    if not func_SetCallListNeasun(sTmp) then
    begin
      GMessageBox('관리내선 설정오류', CDMSE);
      Exit;
    end else
    begin
      GMessageBox('관리내선 저장완료', CDMSE);
     	GS_EnvFile.WriteString('COUNSEL', 'CallListNeasun', sTmp);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.btn_KDWKSearchClick(Sender: TObject);
var iRow : integer;
	sKMShare, sStCd : string;
	AView: TcxGridDBTableView;
begin

	if not Assigned(Frm_JON03[GI_JON03_LastFromIdx]) then exit;
	AView := Frm_JON03[GI_JON03_LastFromIdx].GetCurrentView;

	iRow := AView.DataController.FocusedRecordIndex;
	if (iRow = -1) then
  begin
		GMessagebox('선택된 오더가 없습니다.', CDMSE);
		Exit;
  end;

	sKMShare := AView.DataController.Values[iRow, Frm_JON03[GI_JON03_LastFromIdx].giKMShare];
	sStCd    := AView.DataController.Values[iRow, Frm_JON03[GI_JON03_LastFromIdx].giStCd];
	if (sKMShare = '공유중') and (sStCd[1] in ['0']) then //, '4', '5', '8']
	begin
		cb_KMSearch.ItemIndex := 0;
		cb_SType.ItemIndex := 0;
		cb_LType.ItemIndex := 0;
		cb_GType.ItemIndex := 0;
		edt_KMSearch.text := '';
		pnl_KMWKList.visible := True;
		pnl_KMWkList.Align := alClient;
	end else
	begin
		GMessagebox('동의배정은 접수상태+ KM공유(공유중)일때만 가능합니다' + CRLF + CRLF
							+ '오더상태와 KM공유상태를 확인해주세요.', CDMSE);
		Exit;
	end;
end;

procedure TFrm_Main.btn_KMSearchClick(Sender: TObject);
begin
	Proc_KDWkSearch;
end;

procedure TFrm_Main.btn_PBXLogInClick(Sender: TObject);
var sTmp : string;
	bTmp : Boolean;
begin
	SetDebugeWrite('Frm_Main.btn_PBXLogInClick');
	try
		try
			if cb_PBXLevel.ItemIndex = 0 then
			begin
				if (edt_PBXID.Text = '') and (rdo_Phone_Use.Checked) then 
				begin
					GMessagebox('상담원ID를 입력하여 주십시오.', CDMSE);
					edt_PBXID.SetFocus;
					exit;
				end;
				if (edt_PBXEXT.Text = '') and (rdo_Phone_Use.Checked) then 
				begin
					GMessagebox('내선번호를 입력하여 주십시오.', CDMSE);
					edt_PBXEXT.SetFocus;
					exit;
				end;
				if (edt_PBXIP.Text = '') then 
				begin
					GMessagebox('서버IP 입력하여 주십시오.', CDMSE);
					edt_PBXIP.SetFocus;
					exit;
				end;
			end else
			begin
				if (edt_PBXID.Text = '') and (rdo_Phone_Use.Checked) then 
				begin
					GMessagebox('관리자도 전화기 사용시에는 상담원 정보를 입력하여야 합니다.' +#13#10 +
											'상담원ID를 입력하여 주십시오.', CDMSE);
					edt_PBXID.SetFocus;
					exit;
				end;
				if (edt_PBXEXT.Text = '') and (rdo_Phone_Use.Checked) then 
				begin
					GMessagebox('관리자도 전화기 사용시에는 상담원 정보를 입력하여야 합니다.' +#13#10 +
											'내선번호를 입력하여 주십시오.', CDMSE);
					edt_PBXEXT.SetFocus;
					exit;
				end;
				if (edt_PBXIP.Text = '') then 
				begin
					GMessagebox('서버IP 입력하여 주십시오.', CDMSE);
					edt_PBXIP.SetFocus;
					exit;
				end;
				if (edt_AdminID.Text = '') then 
				begin
//					GMessagebox('관리자ID를 입력하여 주십시오.', CDMSE);
//					edt_AdminID.SetFocus;
//					exit;
				end;
				if (edt_AdminPW.Text = '') then 
				begin
//					GMessagebox('관리자 비밀번호를 입력하여 주십시오.', CDMSE);
//					edt_AdminPW.SetFocus;
//					exit;
				end;
			end;


			btn_PBXLogIn.Enabled := False;

			if (GT_USERIF.ID = 'sntest') or (GT_USERIF.ID = 'si415ipcc') then
			begin
				GT_ComID := UpperCase(edt_ComID.Text);
			end;

			GS_EnvFile.WriteString('CID_COMM', 'PBX_ID' , Trim(edt_PBXID.Text));
			GS_EnvFile.WriteString('CID_COMM', 'PBX_PW' , Trim(edt_PBXPW.Text));
			GS_EnvFile.WriteString('CID_COMM', 'PBX_EXT', Trim(edt_PBXEXT.Text));
			GS_EnvFile.WriteString('CID_COMM', 'PBX_IP' , Trim(edt_PBXIP.Text));
			GS_EnvFile.WriteString('CID_COMM', 'PBX_ComID' , Trim(GT_ComID));

			GS_EnvFile.WriteString('CID_COMM', 'ADMIN_ID', Trim(edt_AdminID.Text));
			GS_EnvFile.WriteString('CID_COMM', 'ADMIN_PW', Trim(edt_AdminPW.Text));
			case cb_PBXLevel.ItemIndex of
{			0 : sTmp := '0';
			1 : sTmp := '1';
			2 : sTmp := '2';
			3 : sTmp := '4';
			4 : sTmp := '6'; }
			0 : sTmp := '0';
			1 : sTmp := '6';
			end;
			GS_EnvFile.WriteString('CID_COMM', 'PBX_LV' , Trim(sTmp)); 
			sTmp := '';
			if rdo_Phone_Use.Checked then sTmp := '1' else if rdo_Phone_NOUse.Checked then sTmp := '2';
			GS_EnvFile.WriteString('CID_COMM', 'PBX_OP' , Trim(sTmp));
			gSI415AliveData := '';
			GMessagebox('저장하였습니다.', CDMSI);

			if sTmp = '1' then     //전화기 사용
			begin
				btn_SI415PBX.Click;
			end else //전화기 미사용
			begin
				if cb_PBXLevel.ItemIndex = 0 then //상담원
				begin
					ProcessKill_Pro('CMNIPCC.exe');	
					frm_JON54.cxPageControl1.Pages[4].TabVisible := False;
//					frm_JON54.cxPageControl1.ActivePageIndex := 4;
				end else
				begin
					if grpSetPBXLogin.Tag = 1 then //관리자 로그인 완료
					begin
						frm_JON54.cxPageControl1.Pages[4].TabVisible := True;
						frm_JON54.cxPageControl1.ActivePageIndex := 4;
						bTmp := IsRun('CMNIPCC.exe');
						//------------------------------------------------------
						if not bTmp then pExecSI415OEM(True);
					end;
					
				end;
				frm_JON54.cxPageControl1.Pages[3].TabVisible := False;
				ProcessKill_Pro('CMNSoftPhone.exe');	
			end;
		finally

			btn_PBXLogIn.Enabled := True;
		end;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.btn_PlayBackClick(Sender: TObject);
var iTmp : integer;
begin
	btn_Play.Enabled := True;

	if cbChartKindA2.ItemIndex = 1 then iTmp := gChartUnitCntB else iTmp := gChartUnitCntAC;

	if btn_PlayBack.Tag <= 1 then btn_PlayBack.Enabled := False;
	if btn_PlayBack.Tag > 1 then btn_PlayBack.Enabled := True;

	Case cbKindA21.ItemIndex of
		0:
		begin
			Case cbKindA24.ItemIndex of
				0:
				begin
					lbPage.Caption := IntToStr(gChartNowPage[3]) + ' / ' + IntToStr(gChartPageCnt[3]);
					gChartNowPage[3] := btn_PlayBack.Tag-1;
					gFromIdx := gChartNowPage[3] * iTmp;
				end;
				1:
				begin
					lbPage.Caption := IntToStr(gChartNowPage[4]) + ' / ' + IntToStr(gChartPageCnt[4]);
					gChartNowPage[4] := btn_PlayBack.Tag-1;
					gFromIdx := gChartNowPage[4] * iTmp;
				end;
				2:
				begin
					lbPage.Caption := IntToStr(gChartNowPage[5]) + ' / ' + IntToStr(gChartPageCnt[5]);
					gChartNowPage[5] := btn_PlayBack.Tag-1;
					gFromIdx := gChartNowPage[5] * iTmp;
				end;
			End;
		end;
		1:
		begin
			Case cbKindA24.ItemIndex of
				0:
				begin
					lbPage.Caption := IntToStr(gChartNowPage[0]) + ' / ' + IntToStr(gChartPageCnt[0]);
					gChartNowPage[0] := btn_PlayBack.Tag-1;
					gFromIdx := gChartNowPage[0] * iTmp;
				end;
				1:
				begin
					lbPage.Caption := IntToStr(gChartNowPage[1]) + ' / ' + IntToStr(gChartPageCnt[1]);
					gChartNowPage[1] := btn_PlayBack.Tag-1;
					gFromIdx := gChartNowPage[1] * iTmp;
				end;
				2:
				begin
					lbPage.Caption := IntToStr(gChartNowPage[2]) + ' / ' + IntToStr(gChartPageCnt[2]);
					gChartNowPage[2] := btn_PlayBack.Tag-1;
					gFromIdx := gChartNowPage[2] * iTmp;
				end;
			End;
		end;
	End;
	btn_PlayBack.Tag := btn_PlayBack.Tag - 1;
	btn_Play.Tag := btn_Play.Tag - 1;
	btnChartA2.Click;
end;

procedure TFrm_Main.btn_PlayClick(Sender: TObject);
var iTmp : integer;
begin
	//play     1 2 3 4 5
	//playBack 0 1 2 3 4
	btn_PlayBack.Enabled := True;

	if cbChartKindA2.ItemIndex = 1 then iTmp := gChartUnitCntB else iTmp := gChartUnitCntAC;

	if btn_Play.Tag > 1 then btn_PlayBack.Enabled := True;
	Case cbKindA21.ItemIndex of
		0:
		begin
			Case cbKindA24.ItemIndex of
				0:
				begin
					gChartNowPage[3] := btn_Play.Tag;
					gFromIdx := gChartNowPage[3] * iTmp;
					btn_Play.Tag := btn_Play.Tag + 1;
					if btn_Play.Tag >= gChartPageCnt[3] then btn_Play.Enabled := False;
					lbPage.Caption := IntToStr(gChartNowPage[3]+1) + ' / ' + IntToStr(gChartPageCnt[3]);
				end;
				1:
				begin
					gChartNowPage[4] := btn_Play.Tag;
					gFromIdx := gChartNowPage[4] * iTmp;
					btn_Play.Tag := btn_Play.Tag + 1;
					if btn_Play.Tag >= gChartPageCnt[4] then btn_Play.Enabled := False;
					lbPage.Caption := IntToStr(gChartNowPage[4]+1) + ' / ' + IntToStr(gChartPageCnt[4]);
				end;
				2:
				begin
					gChartNowPage[5] := btn_Play.Tag;
					gFromIdx := gChartNowPage[5] * iTmp;
					btn_Play.Tag := btn_Play.Tag + 1;
					if btn_Play.Tag >= gChartPageCnt[5] then btn_Play.Enabled := False;
					lbPage.Caption := IntToStr(gChartNowPage[5]+1) + ' / ' + IntToStr(gChartPageCnt[5]);
				end;
			End;
		end;
		1:
		begin
			Case cbKindA24.ItemIndex of
				0:
				begin
					gChartNowPage[0] := btn_Play.Tag;
					gFromIdx := gChartNowPage[0] * iTmp;
					btn_Play.Tag := btn_Play.Tag + 1;
					if btn_Play.Tag >= gChartPageCnt[0] then btn_Play.Enabled := False;
					lbPage.Caption := IntToStr(gChartNowPage[0]+1) + ' / ' + IntToStr(gChartPageCnt[0]);
				end;
				1:
				begin
					gChartNowPage[1] := btn_Play.Tag;
					gFromIdx := gChartNowPage[1] * iTmp;
					btn_Play.Tag := btn_Play.Tag + 1;
					if btn_Play.Tag >= gChartPageCnt[1] then btn_Play.Enabled := False;
					lbPage.Caption := IntToStr(gChartNowPage[1]+1) + ' / ' + IntToStr(gChartPageCnt[1]);
				end;
				2:
				begin
					gChartNowPage[2] := btn_Play.Tag;
					gFromIdx := gChartNowPage[2] * iTmp;
					btn_Play.Tag := btn_Play.Tag + 1;
					if btn_Play.Tag >= gChartPageCnt[2] then btn_Play.Enabled := False;
					lbPage.Caption := IntToStr(gChartNowPage[2]+1) + ' / ' + IntToStr(gChartPageCnt[2]);
				end;
			End;
		end;
	End;
	btn_PlayBack.Tag := btn_Play.Tag - 1;
	btnChartA2.Click;
end;

procedure TFrm_Main.btn_RemoteForIPCCcloseClick(Sender: TObject);
begin
	pnl_RemoteForIPCC.Visible := False;
end;

procedure TFrm_Main.btn_SI415PBXClick(Sender: TObject);
begin
	procExecPBX(True, 'CMNSoftPhone');
end;

procedure TFrm_Main.btn_sms_conClick(Sender: TObject);
begin
	SetDebugeWrite('Main.btn_sms_conClick');
  try
    if edit1.Text = Label32.Caption then
		begin
			grpSetExcel.Visible := False;
      grpSetBrch_select.Visible := False;
      proc_ExcelDB_NoSms(grpSetExcel.Tag);
		end else
    begin
			GMessagebox('인증번호가 다릅니다.' + #13#10 + '다시 입력하세요', cdmsw);
      edit1.Text := '';
      edit1.SetFocus;
      Exit;
    end;
  except
    GMessagebox('실패하였습니다.', CDMSE);
  end;
end;

procedure TFrm_Main.btn_Win10CIDXEClick(Sender: TObject);
begin
	if chkWin10CIDXE.Visible then
	begin
		if not chkWin10CIDXE.Checked then
			chkWin10CIDXE.Visible := False;
	end else
	begin
		chkWin10CIDXE.Visible := True;
	end;
	chkWin10CIDXE.Enabled := True;
	lb_Win10CIDXE.Visible := False;
end;

procedure TFrm_Main.btn_wL1Click(Sender: TObject);
begin
  SetDebugeWrite('Main.btn_wL1Click');
	try
    application.processmessages;
		if Assigned(WebBrowser1) then WebBrowser1.GoBack;
  Except

	end;
end;

procedure TFrm_Main.btn_wR1Click(Sender: TObject);
begin
	SetDebugeWrite('Main.btn_wR1Click');
  try
    Application.ProcessMessages;
    if Assigned(WebBrowser1) then WebBrowser1.GoForward;
  Except

  end;
end;

procedure TFrm_Main.WebBrowser1CommandStateChange(Sender: TObject; Command: Integer; Enable: WordBool);
begin
  try
   case Command of
     CSC_NAVIGATEBACK   : btn_wL1.Enabled := Enable;
     CSC_NAVIGATEFORWARD: btn_wR1.Enabled := Enable;
   end;
  Except

  end;
end;

procedure TFrm_Main.btn_wRef1Click(Sender: TObject);
begin
  SetDebugeWrite('Main.btn_wRef1Click');

  mw_login;
end;

function TFrm_Main.Proc_JoinFromView(  i03Tag : Integer; sCID: string; sSlip : String) : boolean;
var
  sCaption, sTemp, sHead, sJonsel_Brno, sReport : string;
	iCnt, iMCnt, i, hMsg, iUse, iJon01Left, iJon01Top, iJon01Width, iJon00Left, iJon00Top, iScreenWidth, iJon01Monitor : Integer;
	bTF: boolean;
begin
	SetDebugeWrite('Main.Proc_JoinFromView');
	try
    Result := True;
    sJonsel_Brno := GS_JONSEL_BRNO;

     //---------- 접수화면 실행. CDS. ------------
    if Not Frm_JON03[i03Tag].pJON03Dock.bUNDock then gbfrmJON00Show := True;
		if Frm_JON03[i03Tag].pJON03Dock.bUNDock then Frm_JON03[i03Tag].bJON01View := True;

    proc_First_Create;  // tmrCrate 전에 실행될수 있으므로 한번더 체크

    iCnt := 0;
    iMCnt := 0;
    try
      { TODO : 타입별 접수창 사용안하는거 초기화 처리
			for i := 0 to JON_MAX_CNT - 1 do
			begin
        if ( JON01MNG[i].Use = False ) And ( GS_JON01_TYPE <> JON01MNG[i].FrmGubun ) then
        begin
          if JON01MNG[i].FrmGubun = -1 then Continue;
					Frm_JON01N[i].Close;
     			Frm_JON01N[i].Free;

					JON01MNG[i].CreateYN := False;
					JON01MNG[i].Use := False;
					JON01MNG[i].FrmGubun := -1;
					JON01MNG[i].CidInputPhoneNumber := ''; //CID로 들어온 고객연락처
				end;
			end;
      }
			{ TODO : 접수창을 순서대로 사용하기 위함 }
			iUse := -1;
			if ( Not JON01MNG[JON01LastIdx].Use ) And ( sCID <> '수정' ) And ( Not JON01MNG[JON01LastIdx].bModify ) then
      begin
        iUse := JON01LastIdx;
        if (iUse + 1) < JON01LastMax then JON01LastIdx := iUse + 1
                                     else JON01LastIdx := 0;
      end else
			begin
        if ( sCID = '수정' ) then
        begin
          for i := 0 to JON_MAX_CNT - 1 do
          begin
            if ( Not JON01MNG[i].Use ) And ( JON01MNG[i].bModify ) then
            begin
              //-------- 수정창 초기에 생성을 안할경우 생성을 해줘야 됨
              if JON01MNG[i].CreateYN = False then
              begin
                JON01MNG[i].CreateYN := True;
                JON01MNG[i].TabIndex := -1;
                JON01MNG[i].CidInputPhoneNumber := ''; //CID로 들어온 고객연락처

                Frm_Jon01N[i] := TFrm_JON01N.Create(nil); // 폼 객체를 생성한다.
                Frm_Jon01N[i].Caption := '';

                // 지사리스트 초기화
                Frm_JON01N[i].cboBranch.Tag := 10;
                Frm_JON01N[i].cboBranch.Properties.Items.Clear; // 지사명
                Frm_JON01N[i].cboBranch.Tag := 0;

                if Not Assigned(Frm_JON012[i]) Or ( Frm_JON012[i] = Nil ) then
                begin
                  Frm_JON012[i] := TFrm_JON012.Create(Self); // 폼 객체를 생성한다.
                  fSetFont(Frm_Jon012[i], GS_FONTNAME, True);
                  fSetSkin(Frm_Jon012[i], True);
                  JON012MNG[i].CreateYN := True;
                  JON012MNG[i].Tag := i;
                end;

								if Not Assigned(Frm_JON17[i]) Or ( Frm_JON17[i] = Nil ) then
								begin
									Frm_JON17[i] := TFrm_JON17.Create(Self); // 폼 객체를 생성한다.
									fSetFont(Frm_JON17[i], GS_FONTNAME, True);
									fSetSkin(Frm_JON17[i], True);
									JON17MNG[i].CreateYN := True;
									JON17MNG[i].USE := True;
									JON17MNG[i].Tag := i;
								end;
                Inc(JON01LastMax);
              end;
              iUse := i;
              GI_JON01_LastModifyIdx := i;
              Break;
            end;
          end;
        end else
        begin
          for i := 0 to JON01LastMax - 1 do
          begin
            if ( Not JON01MNG[i].Use ) And ( Not JON01MNG[i].bModify ) then
            begin
              iUse := i;
              if (iUse + 1) < JON01LastMax then JON01LastIdx := iUse + 1
                                           else JON01LastIdx := 0;
              Break;
            end;
          end;
        end;
      end;

      for i := 0 to JON_MAX_CNT - 1 do
      begin
        if ( JON01MNG[i].Use ) And ( Not JON01MNG[i].bModify )  then Inc(ICnt);
        if ( JON01MNG[i].Use ) And ( JON01MNG[i].bModify )  then Inc(IMCnt);
      end;

      if ( sCID <> '수정' ) And (iCnt >= JON_MAX_CNT - 4)  then   // 접수창6개 최대갯수 체크
      begin
        hMsg := FindWindow('TMessageForm', 'CMNAGTXE');
        if hMsg <> 0 then
          SendMessage(hMsg, WM_CLOSE, 0, 0);

        GMessagebox('접수창 최대 생성수를 초과하였습니다. '+ #13#10 + '접수창을 닫고 사용하세요~ @_@', CDMSE);
				GB_JON03SELECT_GB := True;
        Result := False;
        Exit;
      end;

      if ( sCID = '수정' ) And (iMCnt >= 3)  then   // 수정창3개 최대갯수 체크
      begin
        hMsg := FindWindow('TMessageForm', 'CMNAGTXE');
        if hMsg <> 0 then
          SendMessage(hMsg, WM_CLOSE, 0, 0);

        GMessagebox('수정창 최대 생성수를 초과하였습니다.'+ #13#10 + '수정창을 닫고 사용하세요~ @_@', CDMSE);
				GB_JON03SELECT_GB := True;
        Result := False;
        Exit;
      end;

      if ( iUse < 0 ) Or (JON01MNG[iUse].CreateYN = False) then
      begin
        for i := 0 to JON_MAX_CNT - 1 do
        begin
					if JON01MNG[i].Use = False then
          begin
            if JON01MNG[i].CreateYN = False then
            begin
							JON01MNG[i].CreateYN := True;
              JON01MNG[i].TabIndex := -1;
							JON01MNG[i].CidInputPhoneNumber := ''; //CID로 들어온 고객연락처

							Frm_Jon01N[i] := TFrm_JON01N.Create(nil); // 폼 객체를 생성한다.
							Frm_Jon01N[i].Caption := '';
              // 지사리스트 초기화
              Frm_JON01N[i].cboBranch.Tag := 10;
              Frm_JON01N[i].cboBranch.Properties.Items.Clear; // 지사명
              Frm_JON01N[i].cboBranch.Tag := 0;

              if Not Assigned(Frm_JON012[i]) Or ( Frm_JON012[i] = Nil ) then
              begin
                Frm_JON012[i] := TFrm_JON012.Create(Self); // 폼 객체를 생성한다.
                fSetFont(Frm_Jon012[i], GS_FONTNAME, True);
                fSetSkin(Frm_Jon012[i], True);
                JON012MNG[i].CreateYN := True;
                JON012MNG[i].Tag := i;
              end;

							if Not Assigned(Frm_JON17[i]) Or ( Frm_JON17[i] = Nil ) then
							begin
								Frm_JON17[i] := TFrm_JON17.Create(Self); // 폼 객체를 생성한다.
								fSetFont(Frm_JON17[i], GS_FONTNAME, True);
								fSetSkin(Frm_JON17[i], True);
								JON17MNG[i].CreateYN := True;
								JON17MNG[i].USE := True;
								JON17MNG[i].Tag := i;
							end;  
							Inc(JON01LastMax);
						end;

            if JON01MNG[i].bModify then Continue;     // 수정창 전용창은 제외 처리

            iUse := i;
						if (iUse + 1) < JON01LastMax then JON01LastIdx := iUse + 1
																				 else JON01LastIdx := 0;
						Break;
          end;
				end;
      end;

      GS_JONSEL_BRNO := sJonsel_Brno;   //  JON01 Create할때 GS_JONSEL_BRNO변수가 초기화되서 기존 자료 유지시켜주기 위해 작업

      bTF := False;
      JON01MNG[iUse].bNoChangeBr := False;      // 지사,대표번호 변경여부

			if sCID = '수정' then
      begin
        sHead := '(수정) ';
        sCaption := sHead + IntToStr(iUse);
        // CID들어와서 생성할때는 C1, C2,,, C19 형식으로 생성한다.
        JON01MNG[iUse].bNoChangeBr := (GS_PRJ_AREA = 'S') And (GT_USERIF.ShareNo = 'G18');
  		end else
			if sCID = '조회' then
  		begin
				sHead := '(조회) ';
        sCaption := sHead;
        // CID들어와서 생성할때는 C1, C2,,, C19 형식으로 생성한다.
			end	else
			if sCID = '추가접수' then
			begin
				sHead := '(신규) ';
				sCaption := sHead + IntToStr(iUse);
				// 추가접수 화면 생성,,   [수정] 형식으로 생성한다.
			end else
			if sCID = '앱접수' then
			begin
				sHead := '(앱접수) ';
				sCaption := sHead + IntToStr(iUse);
				// 앱접수 화면 생성,,   [수정] 형식으로 생성한다.
        JON01MNG[iUse].bNoChangeBr := (GS_PRJ_AREA = 'S') And (GT_USERIF.ShareNo = 'G18');
			end else
			if sCID <> '' then
			begin // sCID :[0117521720]고객전화번호가 넘어옴..
//        bTF := True;
				sHead := '(콜링) ';
				sCaption := sHead + IntToStr(iUse) + '-' + sCID;
				// CID들어와서 생성할때는 [C1-0117521720,,,,] 형식으로 생성한다.
        JON01MNG[iUse].bNoChangeBr := (GS_PRJ_AREA = 'S') And (GT_USERIF.ShareNo = 'G18');
			end else
			begin
//        bTF := True;
				sHead := '(신규) ';
				sCaption := sHead + IntToStr(iUse);
      end;

      bTF := True;

			JON01MNG[iUse].Use := True;
			JON01MNG[iUse].Tag := iUse;
			JON01MNG[iUse].Jon03Tag := i03Tag;
			JON01MNG[iUse].CidInputPhoneNumber := ''; //CID로 들어온 고객연락처
      JON01MNG[iUse].Slip := sSlip;

			iJon01Width := 615;

			try
				if Screen.MonitorCount = 1 then iScreenWidth := Screen.Width
																	 else iScreenWidth := Screen.Monitors[Monitor.MonitorNum].Width;
			except
				iScreenWidth := Screen.Width;
      end;

      if GS_JON01_TAB = 1 then
      begin
        if Not Assigned(Frm_JON00) Or (Frm_JON00 = Nil) then Frm_JON00 := TFrm_JON00.Create(Nil);

        if Frm_JON00.cxTabControl1.Tabs.Count = 0 then
        begin
          iJon00Left := GS_EnvFile.ReadInteger('WinPos', 'Jon00Left', 1);
          iJon00Top  := GS_EnvFile.ReadInteger('WinPos', 'JOn00Top' , 1);

          if iJon00Left < -100 then iJon01Left := 1;
          if iJon00Top < -100 then iJon01Top := 1;

          if ( ( iJon00Left > -100 ) And ( iJon00Top > -100 ) ) And
             ( ( iJon00Left <>   1 ) And ( iJon00Top <>   1 ) ) then
          begin
            Frm_JON00.Left := iJon00Left;
            Frm_JON00.Top := iJon00Top;
          end else
          begin
            if GB_JON01_SHORTMENU_USE then Frm_JON00.Left := iScreenWidth - (Frm_JON00.Width + Frm_JON05.Width + 5)
                                      else Frm_JON00.Left := iScreenWidth - (Frm_JON00.Width + 5);
            Frm_JON00.Top := 60;
          end;
        end;
      end else
      begin
        if GB_JON_FIXMODE then
        begin
          if ( ( iJonLeft > -100 ) And ( iJonTop > -100 ) And ( ( iCnt + iMCnt ) >= 1 ) ) then
          begin
       			sReport := 'A - 1';
            Frm_JON01N[iUse].DefaultMonitor := dmDesktop;
            Frm_JON01N[iUse].Left := iJonLeft - 40;
            Frm_JON01N[iUse].Top  := iJonTop  + 40;
            if Screen.Height - (iJonTop  + 130) < Frm_JON01N[iUse].Height  then
            begin
              if GB_JON01_SHORTMENU_USE then Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + Frm_JON05.Width + 5)
                                        else Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + 5);
              Frm_JON01N[iUse].Top := 60;
            end;
          end else
          begin
            iJon01Left := GS_EnvFile.ReadInteger('WinPos', 'Jon01Left', 1);
            iJon01Top  := GS_EnvFile.ReadInteger('WinPos', 'JOn01Top' , 1);
            iJon01Monitor := GS_EnvFile.ReadInteger('WinPos', 'Jon01Monitor' , 0);
            if ( iJon01Monitor = 1 ) And ( iJon01Left < 0 ) then  // 모니터2를 우측으로 사용할때
            begin
              if ( ( iCnt + iMCnt ) >= 1 )  then
              begin
          			sReport := 'A - 2';
                Frm_JON01N[iUse].Left := iJonLeft - 40;
                Frm_JON01N[iUse].Top  := iJonTop  + 40;
                if Screen.Height - (iJonTop  + 130) < Frm_JON01N[iUse].Height  then
                begin
                  if GB_JON01_SHORTMENU_USE then Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + Frm_JON05.Width + 5)
                                            else Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + 5);
                  Frm_JON01N[iUse].Top := 60;
                end;
              end else
              begin
          			sReport := 'A - 3';
                Frm_JON01N[iUse].DefaultMonitor := dmDesktop;
                Frm_JON01N[iUse].Left := iJon01Left;
                Frm_JON01N[iUse].Top := iJon01Top;
              end;
            end else
            begin
              if iJon01Left < -100 then iJon01Left := 1;
              if iJon01Top < -100 then iJon01Top := 1;

              if ( ( iJon01Left > -100 ) And ( iJon01Top > -100 ) ) And
                 ( ( iJon01Left <>   1 ) And ( iJon01Top <>   1 ) ) then
              begin
          			sReport := 'A - 4';
    //            if ( Screen.MonitorCount > 1 ) And ( iJon01Left < Screen.Monitors[0].Width ) then
                Frm_JON01N[iUse].DefaultMonitor := dmDesktop;
                Frm_JON01N[iUse].Left := iJon01Left;
                Frm_JON01N[iUse].Top := iJon01Top;
              end else
              begin
          			sReport := 'A - 5';
                if GB_JON01_SHORTMENU_USE then Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + Frm_JON05.Width + 5)
                                          else Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + 5);
                Frm_JON01N[iUse].Top := 60;
              end;
            end;
          end;
        end else
        begin
          if ( ( iJonLeft > -100 ) And ( iJonTop > -100 ) And ( ( iCnt + iMCnt ) >= 1 ) ) then
          begin
       			sReport := 'B - 1';
            Frm_JON01N[iUse].Left := iJonLeft - 40;
            Frm_JON01N[iUse].Top  := iJonTop  + 40;
            if Screen.Height - (iJonTop  + 130) < Frm_JON01N[iUse].Height  then
            begin
              if GB_JON01_SHORTMENU_USE then Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + Frm_JON05.Width + 5)
                                        else Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + 5);
              Frm_JON01N[iUse].Top := 60;
            end;
          end else
          begin
            iJon01Left := GS_EnvFile.ReadInteger('WinPos', 'Jon01Left', 1);
            iJon01Top  := GS_EnvFile.ReadInteger('WinPos', 'JOn01Top' , 1);

            if iJon01Left < -100 then iJon01Left := 1;
            if iJon01Top < -100 then iJon01Top := 1;

            if ( ( iJon01Left > -100 ) And ( iJon01Top > -100 ) ) And
               ( ( iJon01Left <>   1 ) And ( iJon01Top <>   1 ) ) then
            begin
         			sReport := 'B - 2';
              Frm_JON01N[iUse].Left := iJon01Left;
              Frm_JON01N[iUse].Top := iJon01Top;
            end else
            begin
         			sReport := 'B - 3';
              if GB_JON01_SHORTMENU_USE then Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + Frm_JON05.Width + 5)
                                        else Frm_JON01N[iUse].Left := iScreenWidth - (iJon01Width + 5);
              Frm_JON01N[iUse].Top := 60;
            end;
          end;
        end;

   			SetDebugeWrite(Format('Form iLeft : %d, iTop : %d, FrmLeft : %d, FrmTop : %d, Moad : %s', [iJon01Left, iJon01Top, Frm_JON01N[iUse].Left, Frm_JON01N[iUse].Top, sReport]));

        iJonLeft := Frm_JON01N[iUse].Left;
        iJonTop  := Frm_JON01N[iUse].Top;
      end;

      Frm_JON01N[iUse].Constraints.MinWidth := iJon01Width;
      Frm_JON01N[iUse].Width := iJon01Width;
      Frm_JON01N[iUse].Caption := sCaption;
      Frm_JON01N[iUse].Tag := iUse;

      JON01MNG[iUse].Tag := iUse;
      JON01MNG[iUse].Caption := sCaption;
      JON01MNG[iUse].Hint    := sCaption;

      if GS_JON01_TAB = 1 then
      begin
        Frm_JON01N[iUse].Parent := Frm_JON00.pnlMain;
        Frm_JON01N[iUse].Align := alNone;
        Frm_JON01N[iUse].Left := 0;
        Frm_JON01N[iUse].Top  := 0;

        JON01MNG[iUse].Dock := True;
        JON01MNG[iUse].TabIndex := Frm_JON00.cxTabControl1.Tabs.Count;
      end;

      Frm_JON01N[iUse].Jon03Tag := i03Tag;
      Frm_JON01N[iUse].cxCallTitle.Caption := sCaption;
      Frm_JON01N[iUse].cxCallTitle.Hint := sHead;
//      Frm_JON01N[iUse].pnlCustAppinfo.Visible := False;

      Frm_JON01N[iUse].pJON01Dock.bUnDock := Frm_JON03[i03Tag].pJON03Dock.bUnDock;
      Frm_JON01N[iUse].pJON01Dock.HdNO    := Frm_JON03[i03Tag].pJON03Dock.HdNo;
      Frm_JON01N[iUse].pJON01Dock.BrNO    := Frm_JON03[i03Tag].pJON03Dock.BrNo;
      Frm_JON01N[iUse].pJON01Dock.Gubun   := Frm_JON03[i03Tag].pJON03Dock.Gubun;
      Frm_JON01N[iUse].pJON01Dock.Idx     := Frm_JON03[i03Tag].pJON03Dock.Idx;
      Frm_JON01N[iUse].pJON01Dock.Callcenter := Frm_JON03[i03Tag].pJON03Dock.Callcenter;
      Frm_JON01N[iUse].pJON01Dock.BrName  := Frm_JON03[i03Tag].pJON03Dock.BrName;

      if GT_USERIF.HD = 'A1531' then
        Frm_JON01N[iUse].LbmeoBigo3.Caption := '적요③ ( 기사에게 안보임 ) ▶ 결제정보 기재'
      else
        Frm_JON01N[iUse].LbmeoBigo3.Caption := '적요③ ( 기사에게 안보임 ) - 다음날 일마감후 자동 삭제됨';

      GI_JON01_LastFromIdx := iUse; // 마지막 로드된 접수창의 index 번호 저장.

      if sCID = '' then
      begin
        Frm_JON01N[iUse].FControlInitial(True, True);   // 입력컨트롤 초기화. True : 재초기화 하지 않는다.
      end else
      begin
        Frm_JON01N[iUse].pInitFormSize;
      end;

      //--------------- 카드결제 관련 초기화.   20180622 KHS 카드승인 초기화 추가
      Frm_JON01N[iUse].locCardPaySeq := '';   // 결제일련번호
      Frm_JON01N[iUse].gsUpdateCardPaySeq := ''; // 결제일련번호(수정창에서 사용)
      Frm_JON01N[iUse].locCardTranNo := '';   // 거래번호
      Frm_JON01N[iUse].locCardPayInfo:= '';   // 카드결제 정보

      Frm_JON01N[iUse].cxtCuTel.Visible := True;
      Frm_JON01N[iUse].btnCmdExit.Tag := -1;
      Frm_JON01N[iUse].bAUTOCMDQUESTION := True;  // 접수설정에서 종료 시 자동 문의 처리 할경우 종료 무한 루프 방지 위함 20120801  LYB
      Frm_JON01N[iUse].btnGroup.Tag  := 10;
      Frm_JON01N[iUse].btnGroup.Down := GS_JON01_GROUPMOVE;
    	if GS_JON01_GROUPMOVE then Frm_JON01N[iUse].btnGroup.LookAndFeel.SkinName := 'Office2010Silver'
                            else Frm_JON01N[iUse].btnGroup.LookAndFeel.SkinName := 'Sharp';
      Frm_JON01N[iUse].btnGroup.Tag  := 0;
      Frm_JON01N[iUse].pInitShow;

      for i := 0 to JON_MAX_CNT - 1 do
      begin
        gbJON01Click[i] := False;
        gbJON012Click[i] := False;
      end;

      JON01_MSGList[iUse].sType.Clear;
      JON01_MSGList[iUse].sMsg.Clear;

      if JON01MNG[iUse].bNoChangeBr then
        Frm_JON01N[iUse].cxTSearchMainTel.Enabled := False;

			if bTF then // 신규 일때만 먼저 띄어줌
      begin
				if GS_JON01_TAB = 1 then
        begin
          Frm_JON00.slTabTag.Add(IntToStr(iUse));
          Frm_JON00.cxTabControl1.Tabs.Insert(Frm_JON00.cxTabControl1.Tabs.Count, sCaption);
          Frm_JON00.cxTabControl1.TabIndex := Frm_JON00.cxTabControl1.Tabs.Count - 1;
          Frm_JON00.Jon03Tag := i03Tag;

          fSetFont(Frm_JON00, GS_FONTNAME, True);
          Frm_JON00.Show;
          fSetFont(Frm_JON01N[iUse], GS_FONTNAME, True);
          Frm_JON01N[iUse].Show;
          Application.ProcessMessages;
        end else
        begin
          fSetFont(Frm_JON01N[iUse], GS_FONTNAME, True);
					Frm_JON01N[iUse].Show;
        end;

        if ( GB_JON01_SHORTMENU_USE ) And ( Assigned(Frm_JON05) ) then Frm_JON05.Show;

        if sCID = '' then
          Frm_JON01N[iUse].cxtCuTel.SetFocus;

        GS_JON01OPEN_CHECK := True;    //사용자 지점 사용을 위한 동기화 시 jon01 오픈여부 판단 2013.06.26 KHS
        ShowWindow(Frm_JON01N[iUse].Handle, SW_SHOW);   //접수창 이중 팝업의 원인일까? 20191201 KHS
      end;

      // 콜링후에 접수창 오픈 시점 로그 남김
      if sCID <> '' then
        Log(Format('SHOW [%s, %s]',[GT_CIDINFO.NaeSun, System.StrUtils.Rightstr(sCid, 4)]), HEARTLOGPATHFILE);

      SetDebugeWrite_CID('Proc_JoinFromView Open NO[' + IntToStr(GI_JON01_LastFromIdx) + ']-' + sCid);
//  		if ( (GT_USERIF.BR = 'B100') Or ((GS_PRJ_AREA = 'O') and (GT_USERIF.CT = 'V274')) ) And ( sHead = '(콜링) ') then Assert(False, 'CIDINFO.A[' + IntToStr(GI_JON01_LastFromIdx) + ']-' + sCid);
		except
			on e: exception do
			begin
				Log('Proc_JoinFromView Error :' + E.Message, LOGDATAPATHFILE);
        Assert(False, 'Proc_JoinFromView Error :' + E.Message);
      end;
    end;
  except
    on e: exception do
    begin
      sTemp := 'Jon03[Proc_JoinFromView]:State=' + sCaption + ':' + e.Message;
      Assert(False, sTemp);
      GMessagebox(PChar(sTemp), CDMSE);
    end;
  end;
end;

procedure TFrm_Main.proc_First_Create;
Var i : Integer;
begin
  try
    pBarJON01Start.Properties.Max := 3;
    pBarJON01Start.Position := 0;
    for I := 0 to 2 do
    begin
      pBarJON01Start.Position := i+1;
      Application.ProcessMessages;
      if Not Assigned(Frm_JON012[i]) Or ( Frm_JON012[i] = Nil ) then
      begin
        Frm_JON012[i] := TFrm_JON012.Create(Self); // 폼 객체를 생성한다.
        fSetFont(Frm_Jon012[i], GS_FONTNAME, True);
        fSetSkin(Frm_Jon012[i], True);
        JON012MNG[i].CreateYN := True;
        JON012MNG[i].Tag := i;
      end;
    end;
  except
  end;
end;

procedure TFrm_Main.CustTelNum_MainNum_Search(sHP, sMainNum: string);
begin
  SetDebugeWrite('Main.CustTelNum_MainNum_Search');
  try
    if trim(sHP) <> '' then
    begin
  		if scb_KeyNumber.IndexOf(sMainNum) < 0 then
	  		GS_CIDINFO_OUR_KEYNUMBER := False;
      //---------------------------------------------------------------------------------
      //        실제 접수창 생성
      //---------------------------------------------------------------------------------
      // 접수창을 생성한다.
  		Proc_JoinFromView(GI_JON03_LastFromIdx, sHP);

      if (GT_ConnectionType = ctTest) and (SERVER_IP_TEST = '192.168.1.106') then
        Frm_JON01N[GI_JON01_LastFromIdx].locCustHP_MainNum_Search := ''
      else
        Frm_JON01N[GI_JON01_LastFromIdx].locCustHP_MainNum_Search := 'CUSTHP';
      // JON03에서 고객 전화번호로  조회시 사용함.
      // CID 정보 들어왔을경우 고객정보를 자동 조회 시킨다...
      Frm_JON01N[GI_JON01_LastFromIdx].Proc_CIDEventAutoSearch(sHP, sMainNum, '', '', '', 'N');

      pJON01Show(GI_JON01_LastFromIdx);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.func_Excel_Check(sHd_No, sBr_No: string): string;
var
  ls_TxLoad, rv_str : string;
  ls_rxxml: String;
  slReceive: TStringList;
  ErrCode: integer;
begin
  try
    if ( GT_USERIF.LV = '60' ) Or ( GT_USERIF.LV = '40' ) then     // 본사관리자
    begin
      if sHd_No = '' then sHd_No := GT_SEL_BRNO.HDNO;
      if sBr_No = '' then sBr_No := GT_SEL_BRNO.BrNo;
    end else
    if ( GT_USERIF.LV = '10' ) then     // 상담원
    begin
      if sHd_No = '' then sHd_No := GT_USERIF.HD;
      if sBr_No = '' then sBr_No := GT_USERIF.BR;
    end;

    if ( GT_USERIF.LV = '60' ) then     // 본사관리자
  	begin
      if Not fGetCheck_BlowFish_HdBrNo( GT_SEL_BRNO.HDNO, GT_SEL_BRNO.BrNo ) then
      begin
        GMessagebox('다운 권한이 없는 본사.지사 입니다.', CDMSE);
        Assert(False, '[N지사코드변조]' + sgExcel + ' : fGetCheck_BlowFish_HdBrNo : ' + GT_SEL_BRNO.HDNO + GT_SEL_BRNO.BrNo + ' - ' + GS_BlowFish_HdBrNo);
        Exit;
      end;
  	end else
    if ( GT_USERIF.LV = '40' ) then     // 지사관리자
  	begin
      if Not fGetCheck_BlowFish_HdBrNo( GT_SEL_BRNO.HDNO, GT_SEL_BRNO.BrNo ) then
      begin
        GMessagebox('다운 권한이 없는 본사.지사 입니다.', CDMSE);
        Assert(False, '[N지사코드변조]' + sgExcel + ' : fGetCheck_BlowFish_HdBrNo : ' + GT_USERIF.HD + GT_SEL_BRNO.BrNo + ' - ' + GS_BlowFish_HdBrNo);
        Exit;
      end;
    end else
    if ( GT_USERIF.LV = '10' ) then     // 상담원
    begin
      if Not fGetCheck_BlowFish_HdBrNo( GT_USERIF.HD, GT_USERIF.BR ) then
      begin
        GMessagebox('다운 권한이 없는 본사.지사 입니다.', CDMSE);
        Assert(False, '[N지사코드변조]' + sgExcel + ' : fGetCheck_BlowFish_HdBrNo : ' + GT_USERIF.HD + GT_USERIF.BR + ' - ' + GS_BlowFish_HdBrNo);
        Exit;
      end;
    end;

    ls_TxLoad := GTx_UnitXmlLoad('C017.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString'    , En_Coding(GT_USERIF.ID)     , [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString' , VERSIONINFO                 , [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'HdNoString'      , sHd_No                      , [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'BrNoString'      , sBr_No                      , [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'MacAddressString', GT_USERIF.MC                , [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ExcelString'     , en_coding(sgRpExcel)        , [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'HDDSNString'     , RemoveAll(GT_USERIF.HS, '-'), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'LocalIPString'   , GT_USERIF.IP                , [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CompNameString'  , SysInfoRec.ComputerName     , [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'LoginDateString' , GT_USERIF.LoginTime         , [rfReplaceAll]);

    if TCK_USER_PER.COM_ExcelNoSMS = '1' then
    begin
      ls_TxLoad := StringReplace(ls_TxLoad, 'AuthYNString', 'N', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'AUTH0002', [rfReplaceAll]);   // 인증번호 미발송
    end else
    begin
      ls_TxLoad := StringReplace(ls_TxLoad, 'AuthYNString', 'Y', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'AUTH0001', [rfReplaceAll]);
    end;

    Result := '';
    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          Result := func_License(ls_rxxml);
        end;
      end;
    finally
      Frm_Flash.Hide;
      FreeAndNil(slReceive);
    end;
  except
    on E: Exception do
    begin
      ls_TxLoad := 'wor[func_excel_check]:' + e.Message;
      GMessagebox(PChar(ls_TxLoad), CDMSE);
      Assert(False, E.Message);
    end;
  end;
  Screen.Cursor := crDefault;
end;

function TFrm_Main.func_License(ss_rxxml: string): string;
var
  xdom: msDomDocument;
  ls_Msg_Err, ls_ClientKey, ls_rxxml: string;
  lst_Result: IXMLDomNodeList;
begin
  xdom := ComsDomDocument.Create;
  try
    Result := '';
    if not xdom.loadXML(ss_rxxml) then Exit;

    try
      ls_rxxml := ss_rxxml;
      ls_ClientKey := GetXmlClientKey(ls_rxxml);
      if ls_ClientKey = 'AUTH0001' then
      begin
        ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
        if ls_Msg_Err = '0000' then
        begin
          lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Auth');
          GMessagebox('엑셀 인증번호를 발송하였습니다.', CDMSE);
          Result := lst_Result.item[0].attributes.getNamedItem('Code').Text;
        end else
        begin
          GMessagebox(ls_Msg_Err, CDMSE);
          Result := '';
          Exit;
        end;
      end else
      if ls_ClientKey = 'AUTH0002' then
      begin
        ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
        if ls_Msg_Err = '0000' then
          Result := '0000'
        else
        begin
          GMessagebox(ls_Msg_Err, CDMSE);
          Result := '';
          Exit;
        end;
      end else
      begin  // 2011.05.18 Add. CDS.
        ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
        GMessagebox(ls_Msg_Err, CDMSE);
        Result := '';
        Exit;
      end;
    except on E: Exception do
      Assert(False, E.Message);
    end;
  finally
    xdom := Nil;
  end;
end;

procedure TFrm_Main.proc_ExcelDB_NoSms(iType : Integer);
  procedure _RunExcelDownload(AGrid: TcxGrid; AExcelName, AFieldName: string);
  var
    Idx, ColWidth: Integer;
    AView: TcxGridDBTableView;
  begin
    Idx := -1;
    try
      if AFieldName <> '' then
      begin
        AView := AGrid.ActiveLevel.GridView as TcxGridDBTableView;
        Idx   := AView.GetColumnByFieldName(AFieldName).Index;
      end;

      // 고객번호 감춤 처리
      if (GT_USERIF.Excel_Use = 'm') and (Idx > -1) then
      begin
        AView.BeginUpdate;
        ColWidth := AView.Columns[Idx].Width;
				AView.Columns[Idx].Width := 0;
				AView.Columns[Idx].Visible := False;
        AView.EndUpdate;
        try
          SaveDialog1.FileName := AExcelName;
          if SaveDialog1.Execute then
          begin
            CustomExportGridToHTML(SaveDialog1.FileName, AGrid, False, True, 'XLS');
          end;
        finally
          AView.BeginUpdate;
          AView.Columns[Idx].Width := ColWidth;
          AView.Columns[Idx].Visible := True;
          AView.EndUpdate;
        end;
      end else
      begin
        if Not bgExcelOPT then
        begin
          SaveDialog1.FileName := AExcelName;
          if SaveDialog1.Execute then
          begin
            CustomExportGridToHTML(SaveDialog1.FileName, AGrid, False, True, 'XLS')
          end;
				end else
        if bgExcelOPT then
        begin
					ExcelNOPT(AGrid);
				end;

        SaveDialog1.FileName := AExcelName;
        if SaveDialog1.Execute then
        begin
          CustomExportGridToHTML(SaveDialog1.FileName, AGrid, False, True, 'XLS')
        end;
      end;
    except
      raise;
    end;
  end;
var
  iBrNo, iSNum, iAddr1, iAddr2, iTel, iInsNum, iLic, iShortMemo, iFreeCnt: Integer;
  sFile, sExe : String;
begin
  SetDebugeWrite('Main.proc_ExcelDB_NoSms');
  try
    if iType = 0 then
    begin
      if Not bgExcelOPT then
      begin
        SaveDialog1.FileName := sgExcel;
        if SaveDialog1.Execute then
        begin
          CustomExportGridToHTML(SaveDialog1.FileName, cxGridExcel, False, True, 'XLS')
        end;
  		end else
      if bgExcelOPT then
      begin
  			ExcelNOPT(cxGridExcel);
  		end;
    end else
    if iType = 2 then
    begin
  		SaveDialog1.FileName := sgExcel;
  		if SaveDialog1.Execute then
  		begin
  			cxExportTLToHTML(SaveDialog1.FileName, cxTreeView, True, True, 'XLS');
        try
    			ShellExecute(Self.Handle, 'open', PChar(SaveDialog1.FileName), nil, nil, SW_SHOWNORMAL);
        except

        end;
  		end;
    end else
    if iType = 3 then
    begin
      SaveDialog1.FileName := sgExcel;
  		if SaveDialog1.Execute then
  		begin
  			sFile := SaveDialog1.FileName;
  			sExe := UpperCase(ExtractFileExt(sFile));
  			if (sExe = '.XLS') or (sExe = '.XLSX') then
  				func_cxGridToExcel(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar1)
  			else if (sExe = '.TXT') or (sExe = '.CSV') then
  				func_cxGridToTxt(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar1);
  		end;
    end else
    if iType = 4 then
    begin
      SaveDialog1.FileName := sgExcel;
  		if SaveDialog1.Execute then
  		begin
  			sFile := SaveDialog1.FileName;
  			sExe := UpperCase(ExtractFileExt(sFile));
  			if (sExe = '.XLS') or (sExe = '.XLSX') then
  				func_cxGridToExcel(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar2)
  			else if (sExe = '.TXT') or (sExe = '.CSV') then
  				func_cxGridToTxt(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar2);
  		end;
    end else
    if iType = 5 then
    begin
      SaveDialog1.FileName := sgExcel;
  		if SaveDialog1.Execute then
  		begin
  			sFile := SaveDialog1.FileName;
  			sExe := UpperCase(ExtractFileExt(sFile));
  			if (sExe = '.XLS') or (sExe = '.XLSX') then
  				func_cxGridToExcel(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar3)
  			else if (sExe = '.TXT') or (sExe = '.CSV') then
  				func_cxGridToTxt(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar3);
  		end;
    end else
    if iType = 6 then
    begin
      SaveDialog1.FileName := sgExcel;
  		if SaveDialog1.Execute then
  		begin
  			sFile := SaveDialog1.FileName;
  			sExe := UpperCase(ExtractFileExt(sFile));
  			if (sExe = '.XLS') or (sExe = '.XLSX') then
  				func_cxGridToExcel(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar4)
  			else if (sExe = '.TXT') or (sExe = '.CSV') then
  				func_cxGridToTxt(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar4);
  		end;
    end else
    if iType = 7 then
    begin
      SaveDialog1.FileName := sgExcel;
  		if SaveDialog1.Execute then
  		begin
  			sFile := SaveDialog1.FileName;
  			sExe := UpperCase(ExtractFileExt(sFile));
  			if (sExe = '.XLS') or (sExe = '.XLSX') then
  				func_cxGridToExcel(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar5)
  			else if (sExe = '.TXT') or (sExe = '.CSV') then
					func_cxGridToTxt(sFile, cxGridDBViewExcel, Frm_SET.cxProgressBar5);
			end;
		end else
		if iType = 8 then
    begin
      SaveDialog1.FileName := sgExcel;
  		if SaveDialog1.Execute then
  		begin
				sFile := SaveDialog1.FileName;
  			sExe := UpperCase(ExtractFileExt(sFile));
				if (sExe = '.XLS') or (sExe = '.XLSX') then
					func_cxGridToExcel(sFile, cxGridDBViewExcel, Frm_CUT1.cxProgressBar1);
			end;
		end else
		begin
      if sgExcel = '기사현황.xls' then
      begin
        SaveDialog1.FileName := '기사현황.xls';
        if SaveDialog1.Execute then
        begin
          cxGridDBViewExcel.BeginUpdate;
          iBrNo := cxGridDBViewExcel.GetColumnByFieldName('지사코드').Index;
          iSNum := cxGridDBViewExcel.GetColumnByFieldName('주민등록번호').Index;
          iAddr1 := cxGridDBViewExcel.GetColumnByFieldName('주소1').Index;
          iAddr2 := cxGridDBViewExcel.GetColumnByFieldName('주소2').Index;
          iTel := cxGridDBViewExcel.GetColumnByFieldName('유선전화번호').Index;
          iInsNum := cxGridDBViewExcel.GetColumnByFieldName('보험번호').Index;
          iLic := cxGridDBViewExcel.GetColumnByFieldName('면허번호').Index;
          iShortMemo := cxGridDBViewExcel.GetColumnByFieldName('간단메모').Index;
          iFreeCnt := cxGridDBViewExcel.GetColumnByFieldName('무료콜수').Index;
          cxGridDBViewExcel.Columns[iBrNo].Visible := True;
          cxGridDBViewExcel.Columns[iSNum].Visible := True;
          cxGridDBViewExcel.Columns[iAddr1].Visible := True;
          cxGridDBViewExcel.Columns[iAddr2].Visible := True;
          cxGridDBViewExcel.Columns[iTel].Visible := True;
//          cxGridDBViewExcel.Columns[iInsNum].Visible := True;
//          cxGridDBViewExcel.Columns[iLic].Visible := True;
//          cxGridDBViewExcel.Columns[iShortMemo].Visible := True;
//          cxGridDBViewExcel.Columns[iFreeCnt].Visible := True;
          cxGridDBViewExcel.EndUpdate;
          CustomExportGridToHTML(SaveDialog1.FileName, cxGridExcel, False, True, 'XLS');
          cxGridDBViewExcel.Columns[iBrNo].Visible := False;
          cxGridDBViewExcel.Columns[iSNum].Visible := False;
          cxGridDBViewExcel.Columns[iAddr1].Visible := False;
          cxGridDBViewExcel.Columns[iAddr2].Visible := False;
          cxGridDBViewExcel.Columns[iTel].Visible := False;
        end;
      end else
      begin
        // 부재중전화만 처리 -- 혹시 필드에 "전화번호" 항목이 없으면 오류발생
        _RunExcelDownload(cxGridExcel, sgExcel, '전화번호');
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.func_BrSmsCash(sBrNo: string): Integer;
var
  ls_TxLoad, sNode, rv_str, ls_MSG_Err: string;
  ls_rxxml: String;
  xdom: msDomDocument;
  lst_Node: IXMLDOMNodeList;
  slReceive: TStringList;
  ErrCode: integer;
begin
  Result := 0;
  try
    ls_rxxml := GTx_UnitXmlLoad('SEL04.XML');
    xdom := ComsDomDocument.Create;
    if (not xdom.loadXML(ls_rxxml)) then
    begin
      Screen.Cursor := crDefault;
      ShowMessage('전문 Error입니다. 다시조회하여주십시요.');
      Exit;
    end;
    sNode := '/cdms/header/UserID';
    lst_Node := xdom.documentElement.selectNodes(sNode);
    lst_Node.item[0].attributes.getNamedItem('Value').Text := En_Coding(GT_USERIF.ID);
    sNode := '/cdms/header/ClientVer';
    lst_Node := xdom.documentElement.selectNodes(sNode);
    lst_Node.item[0].attributes.getNamedItem('Value').Text := VERSIONINFO;
    sNode := '/cdms/header/ClientKey';
    lst_Node := xdom.documentElement.selectNodes(sNode);
    lst_Node.item[0].attributes.getNamedItem('Value').Text := 'BRCA0001';
    sNode := '/cdms/Service/Data/Query';
    lst_Node := xdom.documentElement.selectNodes(sNode);
    lst_Node.item[0].attributes.getNamedItem('Key').Text := 'SMSCASH';
    sNode := '/cdms/Service/Data/Query/Param';
    lst_Node := xdom.documentElement.selectNodes(sNode);
    lst_Node.item[0].attributes.getNamedItem('Seq').Text := '1';
    lst_Node.item[0].attributes.getNamedItem('Value').Text := sBrNo;
    ls_TxLoad := '<?xml version="1.0" encoding="euc-kr"?>' + #13#10 + xDom.documentElement.xml;

    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          if not xdom.loadXML(ls_rxxml) then Exit;
         ls_MSG_Err := GetXmlErrorCode(ls_rxxml);
          if ('0000' = ls_MSG_Err) then
          begin
            lst_Node := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
            Result := Trunc(StrToFloatDef(lst_Node.item[0].attributes.getNamedItem('Value').Text, 0));
          end else
          begin
            Screen.Cursor := crDefault;
            GMessagebox(MSG012 + CRLF + ls_MSG_Err, CDMSE);
          end;
        end;
      end;
    finally
      xdom := Nil;
      Frm_Flash.Hide;
      FreeAndNil(slReceive);
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.func_brcash_check(br_no: string; icharge: Integer): Boolean;
var
  ls_TxQry, ls_TxLoad, sQueryTemp : string;
  rv_str, swhere: string;
  ls_rxxml: String;
  ibrCharge : Integer;

  xdom: msDomDocument;
  lst_Result: IXMLDomNodeList;
  slReceive: TStringList;
  ErrCode: integer;
begin
  Result := False;
  try
    sWhere := format('WHERE BR_NO = ''%s'' ', [br_no]);
    fGet_BlowFish_Query(GSQ_BRANCH_CASH, sQueryTemp);
    ls_TxQry := Format(sQueryTemp, [sWhere]);
    ls_TxLoad := GetSel01('BRCA0002', ls_TxQry);

    Screen.Cursor := crHandPoint;
    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if trim(rv_str) <> '' then
        begin
          ls_rxxml := rv_str;
          xdom := ComsDomDocument.Create;
          try
            if not xdom.loadXML(ls_rxxml) then Exit;
            lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
            ibrCharge := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Value').Text, 0);
            if iCharge <= ibrCharge then
              Result := True;
          finally
            xdom := Nil;
          end;
        end;
      end;
    finally
      FreeAndNil(slReceive);
    end;
    Screen.Cursor := crDefault;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.proc_excel(iType : Integer);
begin
  SetDebugeWrite('Main.proc_excel');
  try
		if TCK_USER_PER.COM_ExcelNoSMS <> '1' then
    begin
      try
        // 본사관리자의 경우 지사를 선택해야 함(SMS캐쉬 차감)
				if (GT_USERIF.LV = '60') then
        begin
					cb_brName.Properties.Items.Clear;
					if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
						cb_brName.Properties.Items.Assign(scb_FamilyBrName)
          else
            cb_brName.Properties.Items.Assign(scb_BranchName);

          Lbl_SmsCash.Caption := '  SMS캐쉬';

          cb_brName.ItemIndex := 0;
          grpSetBrch_select.Left := (Width  - grpSetBrch_select.Width ) div 2;
          grpSetBrch_select.Top  := (Height - grpSetBrch_select.Height) div 2;
          grpSetBrch_select.Tag  := iType;
					grpSetBrch_select.Visible := True;
					grpSetBrch_select.BringToFront;
          Exit;
        end;

        Label32.Caption := func_Excel_Check();

        if Label32.Caption <> '' then
				begin
          grpSetExcel.Left := (Width  - grpSetExcel.Width ) div 2;
          grpSetExcel.Top  := (Height - grpSetExcel.Height) div 2;
					grpSetExcel.Visible := True;
          grpSetExcel.BringToFront;
          grpSetExcel.Tag  := iType;
          btn_sms_con.Enabled := True;
					Edit1.Text := '';
          Edit1.SetFocus;
        end;
			except
				ShowMessage('인증번호 전송이 실패하였습니다.' + #13#10 +
					'다시 엑셀다운을 클릭해 주세요');
      end;
    end else
    begin
      // 2011.01.13 라이센스실패(result='')시 엑셀처리실패
      if func_Excel_Check() <> '' then
				proc_ExcelDB_NoSms(iType);
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.Proc_CIDConnect;
var
  ln_envfile: TIniFile;
  sTemp, sTemp2, sUseSvr : string;
begin
  SetDebugeWrite('Main.Proc_CIDConnect');
  try
//    Log('4. GT_PRG_DUAL_MAIN : ' + IntToStr(GT_PRG_DUAL_MAIN) + ' GS_EXEC_GUBUN : ' + IntToStr(GS_EXEC_GUBUN), LOGDATAPATHFILE);
		// 구버전 일때,, 그냥 종료. CIDServer 접속 하지 않음. 20080811.
    if (GS_EXEC_GUBUN = 0) or (GT_PRG_DUAL_MAIN <> 0) then
    begin
      sTemp := GS_APPNAME + ' (구)프로그램이 실행 중이므로 신버전에서는 발신번호(CID), 로컬요금DB 연동이 제한 됩니다.' + #13#10 + #13#10
        + GS_APPNAME + ' (신)버전에서 발신번호(CID), 로컬요금DB를 사용하려면, (신)버전 먼저 실행후 (구)프로그램 실행하세요!';
      ShowMessage(sTemp);
      Exit;
    end;

    try
      ln_envfile := TIniFile.Create(ENVPATHFILE);

			// CID 연결을 한다. CDS. 080725.
			if (GT_OCX = '1004') or (GT_OCX = '1002') then
			begin
        pSetCIDState(2);
			end else
      if ( GT_OCX = 'KLCNS' ) then
			begin
				imgCID.Visible := True;
			end else
			if (GT_OCX = 'BCTI') then
			begin
				imgCID.Visible := True;
			end else
      begin
        sTemp := Trim(ln_envFile.ReadString('CID_COMM', 'CID_AUTO', 'N'));
        if sTemp = 'Y' then
        begin
					imgCID.Visible := True;
					sUseSvr := ln_envFile.ReadString('CID_COMM', 'CID_SELSVR', '1');
					sTemp  := ln_envFile.ReadString('CID_COMM', 'CID_IP', '');
					sTemp2 := ln_envFile.ReadString('CID_COMM', 'CID_IP2', '');

					if sUseSvr = '1' then RB_SvrUse1.Checked := True else
					if sUseSvr = '2' then RB_SvrUse2.Checked := True;

          if ( sTemp = '' ) And (sUseSvr = '1') then
          begin
            try
              ed_Number.Text := '';
              ed_CID_Ip1.Text := '';
							Frm_JON54.BtnBtm1Setting.Click;
            finally
            end;
					end else
					if ( sTemp2 = '' ) And (sUseSvr = '2') then
					begin
						try
							ed_Number.Text := '';
							ed_CID_Ip2.Text := '';
							Frm_JON54.BtnBtm1Setting.Click;
						finally
						end;
					end else
					begin
						sTemp := ln_envFile.ReadString('CID_COMM', 'NAESUN', '');
						gsInternalNumber := sTemp;
						// 로그인을 한다.
						if not fnc_cid_conf then
            begin
              try
                ed_Number.Text := ln_envFile.ReadString('CID_COMM', 'NAESUN', '');
                ed_CID_Ip1.Text := ln_envFile.ReadString('CID_COMM', 'CID_IP', '');
                ed_CID_Ip2.Text := ln_envFile.ReadString('CID_COMM', 'CID_IP2', '');
   							Frm_JON54.BtnBtm1Setting.Click;
							finally
              end;
            end;
          end;
        end;
      end;
    finally
      FreeAndNil(ln_envfile);
    end;
	except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// CID Server 와 연결설정을 한다.  수정. 080811.
function TFrm_Main.fnc_cid_conf: Boolean;
var
  ln_envfile: TIniFile;
  ss_SendText, ls_msg, sNumber, sIp, sTmp, sSelSvr, sIP1, sIP2 : string;
  iCnt: integer;
begin
	Result := False;

  // 구버전 일때,, 그냥 종료. CIDServer 접속 하지 않음. 20080811.
  if (GS_EXEC_GUBUN = 0) then
  begin
    sTmp := '콜마너 상담원 프로그램이 중복 실행 중이므로 현재 실행 프로그램에서는 발신번호(CID), 로컬요금DB 연동이 제한 됩니다.';
    ShowMessage(sTmp);
    Exit;
  end;

  try
    if (GT_CAT_PORT.InboundPort < 1000) or (gsInternalNumber = '') or (gsCidVersion = '') then Exit;

    ln_envfile := TIniFile.Create(ENVPATHFILE);
    try
      sNumber := gsInternalNumber;
      sSelSvr := ln_envfile.ReadString('CID_COMM', 'CID_SELSVR', '1');
      sIp1 := ln_envfile.ReadString('CID_COMM', 'CID_IP' , '');
      sIp2 := ln_envfile.ReadString('CID_COMM', 'CID_IP2', '');

      GT_CIDINFO.Win10CIDXE_YN := ln_envfile.ReadBool('CID_COMM', 'WIN10_CIDXE_USE', False);
		finally
      FreeAndNil(ln_envfile);
    end;

		if ( gsCidVersion = 'OLD' ) Or ( gsCidVersion = 'CAT' ) then
		begin
			if gsCidVersion <> 'CAT' then
			begin
				try // CID 구버전 프로그램으로 로그인 시도를 한다.
					if sSelSvr = '1' then sIp := sIP1 else
					if sSelSvr = '2' then sIp := sIP2;
					Try
						if GS_EnvFile.ReadString('CID_COMM', 'CID_SELSVRUSE', 'Y') = 'Y' then
						begin
							if GS_EnvFile.ReadString('CID_COMM', 'CID_SELSVRIP', '') <> '' then
								sIp := GS_EnvFile.ReadString('CID_COMM', 'CID_SELSVRIP', '');
						end; 
					except
					end;

					if UpperCase(copy(sIp, 1, 2)) = 'LO' then
						sIp := GT_USERIF.IP;
						
					ipwCID.Close;
					Sleep(200);
          ipwCID.Host := sIp;
          ipwCID.Port := 8888;
          //ipwCID.Timeout := 1000;
          Log(Format('OLD try Connect [%s]',[ipwCID.Host]), HEARTLOGPATHFILE);
          ipwCID.Active := True;
          iCnt := 0;
          while ((iCnt < 15) and (ipwCID.Socket.Connected = False)) do
          begin
            Application.ProcessMessages;
            // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
            Sleep(200);
            Inc(iCnt);
          end;
          if ipwCID.Socket.Connected = True then
          begin
            ss_SendText := sNumber + '/' + GT_USERIF.IP + #13#10;
            ipwCID.Socket.SendText(ss_SendText);
            // 구버전으로 로그인 전문을 보낸다.
            pSetCIDState(2);
          end else
          begin
            pSetCIDState(3);
          end;
        except
          pSetCIDState(3);
        end;
      end else
      begin
        pSetCIDState(3);
      end;

      //-------------------------------------------------------------------------------
      //  CID_NEW : 클라이언트소켓으로 CID 자료 수신함  [CIDServer 신버전 로그인]
      //-------------------------------------------------------------------------------
      try
        if cxCIDImgList.Tag = 3 then
        begin
//          tmr_xeCID_check.Tag   := 20;  // cid 연결유지 타이머 정지.
          tmr_CID_check.Enabled := False;

          if ipwCID.Socket.Connected = True then
            ipwCID.Close;

          ipwCID.Port := GT_CAT_PORT.InboundPort;
          // 9457. 2008-08-09 최도순
          ipwCID.Host := sIp;
          //ipwCID.Timeout := 1000;
          Log(Format('OLD try Connect [%s]',[ipwCID.Host]), HEARTLOGPATHFILE);
          ipwCID.Active := True;
          //sleep(500);
          iCnt := 0;
          while ((iCnt < 15) and (ipwCID.Socket.Connected = False)) do
          begin
            Application.ProcessMessages;
            // CIDServer 로 연결 될 때까지 대기한다. 최대 3초 대기.
            Sleep(200);
            Inc(iCnt);
          end;
          ss_SendText := CTI_MakeLoginStruct(sNumber);

          //if cs_Cid_Com.Connected then
          if ipwCID.Socket.Connected = True then
          begin
            gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
            iCnt := 0;
            ipwCID.Tag := 77;   // 데이터 받았는지 체크위해 초기화 한다.
            ipwCID.Socket.SendText(ss_SendText);
            while ((iCnt < 16) and (ipwCID.Tag = 77)) do
		  			begin
		  				Application.ProcessMessages;
              // CIDServer 로 부터 연결성공 전문 받을때까지 대기한다.
              Sleep(200);
              Inc(iCnt);
            end;
            // 결과값[로그인 성공에 대한 응답 전문] 확인.  gsCIDMessage --> ipwCID 이밴트에서 읽어온다.
						if ((gsCIDMessage <> '') and (Func_New_Cid(gsCIDMessage))) then
            begin
              GT_CID_NEW := '1';
              pSetCIDState(0);
            end else
            begin
              GT_CID_NEW := '0';
              pSetCIDState(2);
            end;
          end else
          begin
            GMessagebox('CID서버와 연결을 할 수 없습니다. CID서버 IP를 확인해주세요!', CDMSE);
          end;
          tmr_CID_check.Tag := 0;
          tmr_CID_check.Enabled := True;

  				if not IdUDPCidRecvServer.Active then
          begin
            IdUDPCidRecvServer.Tag := 0;
            IdUDPCidRecvServer.DefaultPort := 25376;
            IdUDPCidRecvServer.Active := True;
  					// UDP 서버 : CID서버에서 CID정보를 전송해준다.
          end;
        end;
      except
        //GT_CID_NEW := '0';
        ipwCID.Close;

        if GT_CID_NEW = '1' then
        begin
          pSetCIDState(1);
          SetDebugeWrite_CID( 'xCTI_CTI - DisConnect 16471');
        end else
        begin
          pSetCIDState(3);
        end;
      end;

      if gsCidVersion = 'CAT' then
      begin // CAT:신버전, OLD:구버전
        tmr_CID_check.Tag := 0;
        tmr_CID_check.Enabled := True;
        // CID Server 신버전 연결 감시 타이머 시작.
      end;
    end else
		if gsCidVersion = 'CXE' then
    begin
      if GT_CIDINFO.Win10CIDXE_YN then
      begin
        try
          if idXECID.Connected = False then
          begin
            tmr_xeCID_check.Enabled := False;

            idXECID.Port := 9497;

            Log(Format('IXE try Connect [%s]',[IdXECID.Host]), HEARTLOGPATHFILE);
            idXECID.Connect;

            iCnt := 0;
            while ((iCnt < 15) and (idXECID.Connected = False)) do
            begin
              Application.ProcessMessages;
              Sleep(200);
              Inc(iCnt);
            end;
            ss_SendText := CTIXE_MakeLoginStruct(sNumber);
            if idXECID.Connected then
            begin
              gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
              iCnt := 0;
              idXECID.Tag := 77;   // 데이터 받았는지 체크위해 초기화 한다.
              SetDebugeWrite_CID('16338 tmr_xeCID_Login : ' + ss_SendText);

              if gsCIDEnCoding = 'enUTF8' then IdXECID.IOHandler.WriteLn(ss_SendText + #13#10, enUTF8)
                                          else IdXECID.IOHandler.WriteLn(ss_SendText + #13#10);

              while ((iCnt < 16) and (idXECID.Tag = 77)) do
              begin
                Application.ProcessMessages;
                Sleep(200);
                Inc(iCnt);
              end;
              // 결과값[로그인 성공에 대한 응답 전문] 확인.  gsCIDMessage --> ipwCID 이밴트에서 읽어온다.
              if ((gsCIDMessage <> '') and (Func_New_Cid(gsCIDMessage))) then
              begin
                GT_CID_NEW := '2';
                pSetCIDState(0);
              end;
            end else
            begin
              GMessagebox('CID서버와 연결을 할 수 없습니다. CID서버 IP를 확인해주세요!', CDMSE);
            end;
            tmr_xeCID_check.Tag := 0;
            tmr_xeCID_check.Enabled := True;

            if not IdUDPCidRecvServer.Active then
            begin
              IdUDPCidRecvServer.Tag := 0;
              IdUDPCidRecvServer.DefaultPort := 25376;
              IdUDPCidRecvServer.Active := True;
              // UDP 서버 : CID서버에서 CID정보를 전송해준다.
            end;
            iXeCidHeartBeat := 0;
          end;
        except
          try
            IdXECID.Disconnect;
          except
          end;
          pSetCIDState(1);
          SetDebugeWrite_CID('xCTI_CTI - DisConnect 16542');
        end;
      end else
      begin
        try
          if xeCID.Socket.Connected = False then
          begin
  //-          tmr_xeCID_check.Tag   := 20;  // cid 연결유지 타이머 정지.
            tmr_xeCID_check.Enabled := False;

            xeCID.Close;
            xeCID.Port := 9457;
  //					xeCID.Host := sIp;
            Log(Format('CID try Connect [%s]',[xeCID.Host]), HEARTLOGPATHFILE);
            xeCID.Active := True;
            iCnt := 0;
            while ((iCnt < 15) and (xeCID.Socket.Connected = False)) do
            begin
              Application.ProcessMessages;
              Sleep(200);
              Inc(iCnt);
            end;
            ss_SendText := CTIXE_MakeLoginStruct(sNumber);
            if xeCID.Socket.Connected = True then
            begin
              gsCIDMessage := ''; // CID 로그인 성공 전문 담을 전역변수.
              iCnt := 0;
              xeCID.Tag := 77;   // 데이터 받았는지 체크위해 초기화 한다.
              SetDebugeWrite_CID('16338 tmr_xeCID_Login : ' + ss_SendText);
              xeCID.Socket.SendText(ss_SendText);
              while ((iCnt < 16) and (xeCID.Tag = 77)) do
              begin
                Application.ProcessMessages;
                Sleep(200);
                Inc(iCnt);
              end;
              // 결과값[로그인 성공에 대한 응답 전문] 확인.  gsCIDMessage --> ipwCID 이밴트에서 읽어온다.
              if ((gsCIDMessage <> '') and (Func_New_Cid(gsCIDMessage))) then
              begin
                GT_CID_NEW := '2';
                pSetCIDState(0);
              end;
            end else
            begin
              GMessagebox('CID서버와 연결을 할 수 없습니다. CID서버 IP를 확인해주세요!', CDMSE);
            end;
            tmr_xeCID_check.Tag := 0;
            tmr_xeCID_check.Enabled := True;
            if not IdUDPCidRecvServer.Active then
            begin
              IdUDPCidRecvServer.Tag := 0;
              IdUDPCidRecvServer.DefaultPort := 25376;
              IdUDPCidRecvServer.Active := True;
              // UDP 서버 : CID서버에서 CID정보를 전송해준다.
            end;
            iXeCidHeartBeat := 0;
          end;
        except
          xeCID.Close;
          pSetCIDState(1);
          SetDebugeWrite_CID('xCTI_CTI - DisConnect 16542');
        end;
      end;
			tmr_xeCID_check.Tag := 0;
			tmr_xeCID_check.Enabled := True;
			iXeCidHeartBeat := 0;
		end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
      pSetCIDState(3);
      ls_msg := '서버접속 중 문제가 발생했습니다' + #13#10 + 'CID_IP를 확인하세요';
      if GMessagebox(ls_msg, CDMSE) = IDOK then
      begin
        try
          ed_Number.Text := gsInternalNumber;
          ed_CID_Ip1.Text := sIp1;
          ed_CID_Ip2.Text := sIp2;
					Frm_JON54.BtnBtm1Setting.Click;
        finally
        end;
      end;
      Exit;
    end;
  end;

  Result := True;
end;

procedure TFrm_Main.Exec_bCTIOCXAgent;
var
  sParam : String;
  isActive : Boolean;
begin
  SetDebugeWrite('Main.Exec_bCTIOCXAgent');
  try
    if GT_OCX = 'BCTI' then
    begin
        ProcessKill;

        ShellExecute(
					Self.Handle,
          'open',
					PChar(ExtractFilePath(ParamStr(0)) + 'CMNOCXAgent.exe'),
          PChar('A08FB1D3VOP957G'),
          nil,
          SW_SHOWNORMAL
        );
    end else
    begin
      isActive := False;
			if GT_OCX = 'KLCNS' then
      begin
        if ( ( FileExists('C:\Windows\System32\KLCns\IPCallrabi.ocx') ) Or
             ( FileExists('C:\Windows\SysWOW64\KLCns\IPCallrabi.ocx') ) ) And ( GT_CIDINFO.Use_yn = 'Y' ) then
        begin
					ProcessKill;

					sParam := 'A08FB1D3VOP957G ' + GT_CIDINFO.SERVER_IP + ' ' + GT_CIDINFO.NaeSun;
					ShellExecute(
						Self.Handle,
						'open',
						PChar(ExtractFilePath(ParamStr(0)) + 'CMNOCXXEAgent.exe'),
						PChar(sParam),
						nil,
						SW_SHOWNORMAL
					);
				end;
			end else
      if GT_OCX = 'LGUCT' then
      begin
        GT_CIDINFO.LGUSERVERID := GS_EnvFile.ReadString('CID_COMM', 'LGU_ID' , '');
        GT_CIDINFO.LGUSERVERPW := GS_EnvFile.ReadString('CID_COMM', 'LGU_PW' , '');

        if ( GT_CIDINFO.LGUSERVERID = '' ) Or ( GT_CIDINFO.LGUSERVERPW = '' ) then Exit;
        ProcessKill;

        sParam := 'A08FB1D3VOP9LGU ' + GT_CIDINFO.LGUSERVERID + ' ' + GT_CIDINFO.LGUSERVERPW;
        ShellExecute(
					Self.Handle,
          'open',
					PChar(ExtractFilePath(ParamStr(0)) + 'CMNOCXXEAgent.exe'),
          PChar(sParam),
          nil,
          SW_SHOWNORMAL
        );
      end;

      if (GT_USERIF.HD = 'A1531') or (GT_USERIF.HD = 'A100') then
      begin
        if ( FileExists('C:\Windows\System32\SangACD.ocx') ) And ( GT_CIDINFO.ACDSERVERUSE ) Then
        begin
          if Trim(GT_CIDINFO.ACDSERVERIP) = '' then
          begin
            GMessagebox('ACD서버 IP를 입력하세요', CDMSE);
            Exit;
          end;
          ProcessKill;

          sParam := 'A08FB1D3VOP9ACD ' + GT_CIDINFO.ACDSERVERIP + ' ' + GT_CIDINFO.NaeSun + ' ' + GT_USERIF.ID + ' ' + IntToStr(GS_EXEC_GUBUN);
          ShellExecute(
            Self.Handle,
            'open',
            PChar(ExtractFilePath(ParamStr(0)) + 'CMNOCXXEAgent.exe'),
            PChar(sParam),
            nil,
            SW_SHOWNORMAL
          );
        end;
      end;
    end;
  except on e: exception do
    begin
      Assert(False, E.Message);
      ShowMessage('Main.Exec_bCTIOCXAgent :' + e.Message);
    end;
  end;
end;

function TFrm_Main.fGetHdBrGubunInfo: String;
Var LeftTreePtr : PTreeRec;
begin
  if Tree_List.FocusedNode.Data = nil then
  begin
     Result := '';
     Exit;
  end;

  try
    LeftTreePtr := Tree_List.FocusedNode.Data;
    Result := LeftTreePtr.HDCode + '/' + LeftTreePtr.BRCode + '/' + IntToStr(LeftTreePtr.FIndex);
  Except
    Result := '';
  end;
end;

procedure TFrm_Main.pSetHdBrGubunInfo( sInfo : String; Var sHdNo, sBrNo, sIdx : String );
Var sList : TStringList;
begin
  try
    sList := TStringList.Create;
    try
      sList.Delimiter := '/';
      sList.DelimitedText := sInfo;

      sHdNo := sList[0];
      sBrNo := sList[1];
      sIdx  := sList[2];
    Finally
      sList.Free;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// Process를 찾는다.
function TFrm_Main.ProcessLive: Boolean;
var
  ProcID: DWORD;
begin
  SetDebugeWrite('Main.ProcessLive');
  Result := False;

  try
    // java1.exe check.
    if GT_OCX = 'BCTI' then
      ProcID:= Process32ListFind('CMNOCXAgent.exe')
    else
      ProcID:= Process32ListFind('CMNOCXXEAgent.exe');

    if ProcID <> 0 then Result := True;
  except

  end;
end;

procedure TFrm_Main.Proc_KDWkBeacha;
var
	ls_MSG_Err, tmpCntStr : string;
	slRcvList: TStringList;
	xdom: msDomDocument;

	ls_TxLoad, sKeyString: string;
  rv_str, sBaechSMS, sMsg : string;
  ls_rxxml: WideString;
	iRow, iWkSabun, iCol, j, i03Row : Integer;
  slReceive: TStringList;
	ErrCode: integer;
	XmlData, sParams, ErrMsg, sTmp, sWkSabun, sCuSeq, sKeyNumber, sSlip: string;
	AView: TcxGridDBTableView;
begin

	Try
		AView := Frm_JON03[GI_JON03_LastFromIdx].GetCurrentView;
		iRow := cxGrid_KDWkList.DataController.FocusedRecordIndex;
		if iRow = -1 then
		begin
			GMessagebox('기사를 클릭하세요', CDMSE);
			exit;
		end;

		iWkSabun := cxGrid_KDWkList.GetColumnByFieldName('사번').Index;
		sWkSabun := cxGrid_KDWkList.DataController.Values[iRow, iWkSabun];

		i03Row := AView.DataController.FocusedRecordIndex;
		sSlip   := AView.DataController.Values[i03Row, Frm_JON03[GI_JON03_LastFromIdx].giSlip];
		ls_TxLoad := GTx_UnitXmlLoad('KM00020.XML');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'KM00020');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strKdDriverId', Trim(sWkSabun));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strConfSlip', Trim(sSlip));

		slRcvList := TStringList.Create;
		try
			if dm.SendSock(ls_TxLoad, slRcvList, ErrCode, False) then
			begin
				for j := 0 to slRcvList.Count - 1 do
				begin
					Application.ProcessMessages;
					xmlData := slRcvList.Strings[j];

					xdom := ComsDomDocument.Create;

					if not xdom.loadXML(XmlData) then Exit;

					ls_MSG_Err := GetXmlErrorCode(XmlData);
					if ('0000' = ls_MSG_Err) then
					begin
						Frm_JON03[Self.Tag].proc_Acc_Search(1, lbWkSlip.Caption, 'Main-2');
						GMessagebox('동의배정 되었습니다.', CDMSI);
					end else
					begin
						GMessagebox('동의배정에 실패하였습니다.' +CRLF+CRLF + ls_MSG_Err, CDMSI);
					end;
				end;
			end;
		finally
			xdom := Nil;
		end;
	except

	End;
end;

procedure TFrm_Main.Proc_KDWkSearch;
var
	ls_TxLoad, XmlData, ls_MSG_Err, tmpCntStr : string;
	slRcvList: TStringList;
	xdom: msDomDocument;
	lst_Result: IXMLDomNodeList;
	I, ErrCode, j, tmpCnt, iRow, i03Row : Integer;
	sTmp, sSubcontracts : string;
	iGridIdex : integer;
	dTmpDate : TDateTime;
	sKDId, sKDNm, sKDPhone, sKDSType, sLat, sLng, sLType, sGType: string; 
	AView: TcxGridDBTableView;
begin

	try
		AView := Frm_JON03[GI_JON03_LastFromIdx].GetCurrentView;
		sKDId := ''; sKDNm := ''; sKDPhone := '';
		case cb_KMSearch.ItemIndex of
			0: sKDId := edt_KMSearch.text;
			1: sKDNm := edt_KMSearch.text;
			2: sKDPhone := edt_KMSearch.text;
		end;

		case cb_SType.ItemIndex of
			0: sKDSType := 'normal';
			1: sKDSType := 'vip';
		end;
		i03Row := AView.DataController.FocusedRecordIndex;
		sLat := AView.DataController.Values[i03Row, Frm_JON03[GI_JON03_LastFromIdx].giLat]; 
		sLat := SetWGS84(sLat);
		sLng := AView.DataController.Values[i03Row, Frm_JON03[GI_JON03_LastFromIdx].giLng]; 
		sLng := SetWGS84(sLng);

		case cb_LType.ItemIndex of
			0: sLType := 'c2_regular';
			1: sLType := 'c1_regular';
			2: sLType := 'c1_large';
		end;
		case cb_GType.ItemIndex of
			1: sGType := 'auto';
			2: sGType := 'manual';
		end;

		ls_TxLoad := GTx_UnitXmlLoad('KM00010.XML');
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'UserIDString', GT_USERIF.ID);
    ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientVerString', VERSIONINFO);
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'ClientKeyString', 'KM00010');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strKdDriverId', Trim(sKDId));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strKdDriverName', Trim(sKDNm));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strKdDriverPhone', Trim(sKDPhone));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strServiceType', Trim(sKDSType));   
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strLat', Trim(sLat));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strLng', Trim(sLng));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strLicenseType', Trim(sLType));   
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strGearType', Trim(sGType));
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strDist', '5');
		ls_TxLoad := ReplaceAll(ls_TxLoad, 'strPer', '100');   

//			Log('Jon054 종료콜요청: ' + ls_TxLoad, LOGDATAPATHFILE);

		slRcvList := TStringList.Create;
		try
			if dm.SendSock(ls_TxLoad, slRcvList, ErrCode, False, 180000) then
			begin
				if slRcvList.Count > 0 then
				begin
					Frm_Flash.cxPBar1.Properties.Max := slRcvList.Count;
					Frm_Flash.cxPBar1.Position := 0;
					cxGrid_KDWkList.DataController.SetRecordCount(0);

					for j := 0 to slRcvList.Count - 1 do
					begin
						Frm_Flash.cxPBar1.Position := j + 1;
						Frm_Flash.lblCnt.Caption := IntToStr(j + 1) + '/' + IntToStr(slRcvList.Count);
						Application.ProcessMessages;
						xmlData := slRcvList.Strings[j];

						xdom := ComsDomDocument.Create;

						if not xdom.loadXML(XmlData) then Exit;

						ls_MSG_Err := GetXmlErrorCode(XmlData);
						if ('0000' = ls_MSG_Err) then
						begin
							lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Response/DataInfo');
							tmpCnt := StrToIntDef(lst_Result.item[0].attributes.getNamedItem('Count').Text,0);

							if (0 < tmpCnt) then
							begin
								cxGrid_KDWkList.BeginUpdate;
								try
									lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Response/DataInfo/Data');
									for i := 0 to lst_Result.length - 1 do
									begin
										iRow := cxGrid_KDWkList.DataController.AppendRecord;

										cxGrid_KDWkList.DataController.Values[iRow, 0] := lst_Result.item[i].attributes.getNamedItem('Id')				  .Text; //카카오 기사 id
										cxGrid_KDWkList.DataController.Values[iRow, 1] := lst_Result.item[i].attributes.getNamedItem('Name')				.Text; //카카오 기사 이름"
										cxGrid_KDWkList.DataController.Values[iRow, 2] := lst_Result.item[i].attributes.getNamedItem('Phone')				.Text; //카카오 기사 전화번호"
										cxGrid_KDWkList.DataController.Values[iRow, 3] := lst_Result.item[i].attributes.getNamedItem('Birthday')		.Text; //카카오 기사 생년월일"
										cxGrid_KDWkList.DataController.Values[iRow, 4] := lst_Result.item[i].attributes.getNamedItem('ProfileImage').Text; //카카오 기사 프로필 사진"
										cxGrid_KDWkList.DataController.Values[iRow, 5] := lst_Result.item[i].attributes.getNamedItem('Address')			.Text; //카카오 기사 현재 위치 (출근 시)"

										if lst_Result.item[i].attributes.getNamedItem('GearType').Text = 'manual' then sTmp := '수동' else sTmp := '자동';
										cxGrid_KDWkList.DataController.Values[iRow, 6] := sTmp;                                                            //카카오 기사 수동 기어 가능 여부"

										sSubcontracts := '';
										sTmp := lst_Result.item[i].attributes.getNamedItem('Subcontracts').Text;
										if Pos('angel_normal', sTmp) > 0 then sSubcontracts := '도급일반';
										if Pos('angel_vip', sTmp) > 0 then 
										begin
											if sSubcontracts = '' then sSubcontracts := '도급VIP' else sSubcontracts := sSubcontracts + ',도급VIP';
										end;
										cxGrid_KDWkList.DataController.Values[iRow, 7] := sSubcontracts;                                                            //도급 계약 타입"
										if lst_Result.item[i].attributes.getNamedItem('License').Text = 'c2_regular' then sTmp := '2종보통' else
										if lst_Result.item[i].attributes.getNamedItem('License').Text = 'c1_regular' then sTmp := '1종보통' else 
										if lst_Result.item[i].attributes.getNamedItem('License').Text = 'c1_large'   then sTmp := '1종대형' else sTmp := '';
										cxGrid_KDWkList.DataController.Values[iRow, 8] := sTmp;                                                            //면허정보 1종보통 "
										cxGrid_KDWkList.DataController.Values[iRow, 9] := lst_Result.item[i].attributes.getNamedItem('Insurances')	.Text; //보험정보"
										cxGrid_KDWkList.DataController.Values[iRow,10] := lst_Result.item[i].attributes.getNamedItem('ExtraInfo')		.Text; //카카오 기사 운행/사고/벌금 횟수"							
									end;
								finally
									cxGrid_KDWkList.EndUpdate;
								end;
							end;
						end;
					end;
				end;
			end;
		finally
      xdom := Nil;
		end;
  except
    on e: Exception do
    begin
			sTmp := 'COM01[Proc_KDWkSearch]Error : ' + e.Message;
			Assert(False, E.Message);
		end;
	end;    
end;

procedure TFrm_Main.Proc_KillAndStart;
var ProcID: DWORD;
    iCnt : Integer;
begin
  SetDebugeWrite('Main.Proc_KillAndStart');
  try
    tmrbCTIConnect.Enabled:= False;
    tmrxCTIConnect.Enabled:= False;

    ProcessKill;   // Process를 찾아서 종료 시킨다.
    Sleep(1000);

    iCnt := 0;
    while ((iCnt < 120) and (ProcID <> 0)) do
    begin
      if GT_OCX = 'BCTI' then
        ProcID:= Process32ListFind('CMNOCXAgent.exe')
      else
        ProcID:= Process32ListFind('CMNOCXXEAgent.exe');

      Application.ProcessMessages;
      Sleep(500);
      iCnt := iCnt + 1;
    end;

    if ProcID <> 0 then
    begin
      ProcessKill;   // Process를 찾아서 종료 시킨다.
      Sleep(1000);

      // 상담원 App. Process Kill 되었는지 확인 한다.(30초 대기 체크)
      iCnt := 0;
      while ((iCnt < 120) and (ProcID <> 0)) do
      begin
        if GT_OCX = 'BCTI' then
          ProcID:= Process32ListFind('CMNOCXAgent.exe')
        else
          ProcID:= Process32ListFind('CMNOCXXEAgent.exe');
        Application.ProcessMessages;
        Sleep(500);
        iCnt := iCnt + 1;
      end;
    end;

    Exec_bCTIOCXAgent;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// Process를 찾아서 종료 시킨다.
function TFrm_Main.ProcessKill: Boolean;
var
  ProcID: DWORD;
  hProcess: THandle;
  TermSucc: BOOL;
begin
  Result := False;

  try
    if (GT_OCX = 'BCTI')  then
      ProcID:= Process32ListFind('CMNOCXAgent.exe')
    else
      ProcID:= Process32ListFind('CMNOCXXEAgent.exe');

    // 존재하는 process object의 handle을 return한다
    hProcess := OpenProcess(PROCESS_ALL_ACCESS, TRUE, ProcID);
    Sleep(500);

    // 명시한 process를 강제 종료시킨다
    TermSucc := TerminateProcess(hProcess, 0);
    if TermSucc = True then
    begin
      Result := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;


function TFrm_Main.ProcessKill_Pro(AName: string): Boolean;
var
	ProcID: DWORD;
	hProcess: THandle;
	TermSucc: BOOL;
begin
	Result := False;

	try
		ProcID:= Process32ListFind(AName);

		// 존재하는 process object의 handle을 return한다
		hProcess := OpenProcess(PROCESS_ALL_ACCESS, TRUE, ProcID);
		Sleep(500);

		// 명시한 process를 강제 종료시킨다
		TermSucc := TerminateProcess(hProcess, 0);
		if TermSucc = True then
		begin
			Result := True;
		end;
	except on E: Exception do
		Assert(False, E.Message);
	end;
end;

function TFrm_Main.Func_New_Cid(sRecieve: string): Boolean;
  function IsNumericString(const inStr: string): Boolean;
  var
    i: extended;
  begin
    Result := TryStrToFloat(inStr,i);
  end;
var
  ls_key_num, ls_Cust_Tel : string;
	ls_LogMsg : AnsiString;
	sTmp : string;
begin
	Result := False;

	SetDebugeWrite_CID('Func_New_Cid : ' + sRecieve);
	try
    //로그 기록
		if tmr_JoinView.Tag = 100 then     // TCP 인입시..
    begin
			if gsCidVersion = 'CXE' then
         CTIXE_Check_Save(sRecieve) // 전문 Parsing.
      else
         CTI_Check_Save(sRecieve); // 전문 Parsing.
    end else
    if tmr_JoinView.Tag = 200 then    // UDP 인입시..
    begin
			if Length(sRecieve) = 63 then
				 CTIXE_Check_Save(sRecieve) // 전문 Parsing.
			else
         CTI_Check_Save(sRecieve); // 전문 Parsing.
    end else
      CTI_Check_Save(sRecieve); // 전문 Parsing.

    if Length(sRecieve) = 63 then
    begin
      if (gXeRecvHeader.sType = T_LOGIN_RESPONSE) then
      begin
        Result := True;
        Exit;
      end else
      if (gXeRecvHeader.sType = T_HEARTBEAT) then
      begin
        // Heartbeat 수신
        Result := True;
        Exit;
      end else
      if ( gXeRecvHeader.sType = T_CALLING_INFO ) Or ( gXeRecvHeader.sType = T_AUTOCALL ) then
      begin
        // CID XE 서버와 NKT서버에서 자료를 동시에 받을때 같은 자료이면 무시 처리 2초 사이에
        //--------------------------------------------------------------------
				if ( GS_NKTCidInput.KeyNumber <> '' ) And ( GT_NKTXE = 'NKT' ) then
        begin
					if ( GS_NKTCidInput.KeyNumber   = gXeRecvHeader.sMainLn   ) And
						 ( GS_NKTCidInput.PhoneNumber = gXeRecvHeader.sTelNum ) then
          begin
						if SecondsBetween(GS_NKTCidInput.InDate, Now) <= 2 then
            begin
              GS_NKTCidInput.KeyNumber   := gXeRecvHeader.sMainLn;
							GS_NKTCidInput.PhoneNumber := gXeRecvHeader.sTelNum;
							GS_NKTCidInput.InDate      := Now;

							if ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'J610')) or (GT_USERIF.BR = 'B100') or 
								 ((GS_PRJ_AREA = 'O') and (GT_USERIF.CT = 'H227')) or 
								 ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'Z780')) then  
							begin
								sTmp := Trim(gXeRecvHeader.sTelNum);
								sTmp := System.StrUtils.RightStr(sTmp, 4);

								Log('Func_New_Cid Exit : ' + gXeRecvHeader.sMainLn + ',' + sTmp, LOGDATAPATHFILE);
							end;
							Exit;
						end;
					end;
        end;

        GS_NKTCidInput.KeyNumber   := gXeRecvHeader.sMainLn;
        GS_NKTCidInput.PhoneNumber := gXeRecvHeader.sTelNum;
        GS_NKTCidInput.InDate      := Now;
        //--------------------------------------------------------------------

        if ( Not IsNumericString(Trim(gXERecvHeader.sTelNum))) Or
           (Trim(gXERecvHeader.sTelNum) = '0NOCIDINFO') Or
           (Trim(gXERecvHeader.sTelNum) = '0routing'  ) then
        begin
					if not gbCallMartFileJON01 then
					begin
						GMessagebox(#13#10 + '장치(키폰주장치,기타CID장치,,,)에서 발신번호가 안들어 왔습니다.' + #13#10 +
												#13#10 + '==== 고객님에게 전화번호를 물어보세요! ====' + #13#10, CDMSE);
						Log('[NOCIDINFO] 키폰주장치에서 발신번호가 들어오지 않음.', LOGDATAPATHFILE);
					end;
					// 접수창 만을 생성 해준다.
					Proc_JoinFromView(GI_JON03_LastFromIdx);
					//콜마트 파일콜링의 경우
					if gbCallMartFileJON01 then
					begin
						Try
						
							Frm_JON01N[GI_JON01_LastFromIdx].proc_CallMartJon01(gCALLMART);
						Except
							gbCallMartFileJON01 := False;
						End;
						GMessagebox(#13#10 + '장치(키폰주장치,기타CID장치,,,)에서 발신번호가 안들어 왔습니다.' + #13#10 +
												#13#10 + '==== 고객님에게 전화번호를 물어보세요! ====' + #13#10, CDMSE);
						Log('[NOCIDINFO] 키폰주장치에서 발신번호가 들어오지 않음.', LOGDATAPATHFILE);
					end;
          Exit;
        end;

        // 신버전 CID 값 받기 성공!!
        ls_Cust_Tel := gXeRecvHeader.sTelNum; // 고객전화번호
        ls_Key_num := gXeRecvHeader.sMainLn; // 대표번호

        // 고객전화번호 없으면 그냥 빠져나감.
        if ls_Cust_Tel = '' then Exit;

        CID_GET_TIME := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);      //2012.07.19 KHS
        CID_CUST_TEL := ls_Cust_Tel;
        ls_LogMsg := ls_Key_num + '/' + ls_Cust_Tel + '/' + CID_GET_TIME + '/' + GT_USERIF.ID + '/' + gXeRecvHeader.sLine;

				Try
					Proc_CidLog(90, ls_LogMsg); // 로그 기록.
				except
				end;

				Result := True;

				if scb_KeyNumber.IndexOf(ls_Key_num) < 0 then
					GS_CIDINFO_OUR_KEYNUMBER := False;

				procJON03Open; // 접수창 Open 여부 체크

				if tmr_JoinView.Tag = 100 then
        begin
					SetDebugeWrite_CID('TCP [' + gsCidVersion + '] Read > Func_New_Cid > Proc_JoinFromView ' + gsCIDMessage);
          sTmp := 'CIDINFO.TCP[' + gsCidVersion + '-' + GT_OCX + '] = ' + gsCIDMessage;
				end else
        if tmr_JoinView.Tag = 200 then
        begin
					SetDebugeWrite_CID('UDP [' + gsCidVersion + '] Read > Func_New_Cid > Proc_JoinFromView ' + gsCIDMessage);
          sTmp := 'CIDINFO.UDP[' + gsCidVersion + '-' + GT_OCX + '] = ' + gsCIDMessage;
        end;

        // 콜링중 일시정지 기능 사용일 경우에만
        if Not GB_JON54CALLSTOP then
        begin
          GT_CALL_LIST_STATUS := clsNew;
          if ( Frm_JON54.cxPageControl1.Pages[2].TabVisible ) And
             ( Frm_JON54.btnCallListAutoSearch.Tag = 0 ) And
             ( Not Frm_JON54.pnlCallListLock.Visible ) then
          begin
            Frm_JON54.pnlMain.Enabled := False;
            Frm_JON54.pnlCallListLock.Left :=  7; //(Frm_JON54.Width  - Frm_JON54.pnlCallListLock.Width ) div 2;
            Frm_JON54.pnlCallListLock.Top  := 94; //(Frm_JON54.Height - Frm_JON54.pnlCallListLock.Height) div 2;
            Frm_JON54.pnlCallListLock.BringToFront;
            Frm_JON54.pnlCallListLock.Visible := True;
          end;
        end;
				// 접수창을 생성한다.
				Proc_JoinFromView(GI_JON03_LastFromIdx, gXeRecvHeader.sTelNum);

				SetDebugeWrite_CID('Func_New_Cid 접수창 생성 CXE: No['+IntToStr(GI_JON01_LastFromIdx)+'] ' + gXeRecvHeader.sTelNum);
        sTmp := 'CIDINFO.B[' + gXeRecvHeader.sType + '-' + IntToStr(GI_JON01_LastFromIdx)+'] ' + gXeRecvHeader.sTelNum;

        Frm_JON01N[GI_JON01_LastFromIdx].locCustHP_MainNum_Search := '';
        if ( gXeRecvHeader.sType = T_CALLING_INFO ) then
          Frm_JON01N[GI_JON01_LastFromIdx].Proc_CIDEventAutoSearch(gXeRecvHeader.sTelNum, gXeRecvHeader.sMainLn, gXeRecvHeader.sLine, gXeRecvHeader.sSndTime, gXeRecvHeader.sBrNo, '')
        else
        if ( gXeRecvHeader.sType = T_AUTOCALL ) then
          Frm_JON01N[GI_JON01_LastFromIdx].Proc_CIDEventAutoSearch(gXeRecvHeader.sTelNum, gXeRecvHeader.sMainLn, gXeRecvHeader.sLine, gXeRecvHeader.sSndTime, gXeRecvHeader.sBrNo, 'Y');

        pJON01Show(GI_JON01_LastFromIdx);
//				if (GT_USERIF.BR = 'B100') Or ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'I130')) then Assert(False, sTmp);
      end;
    end else
    begin
      if (gRecvHeader.sType = PTYPE_LOGIN_SUCCESS) and (gRecvHeader.sResult = '00') then
      begin
				Result := True;
        Exit;
      end else
      if (gRecvHeader.sType = PTYPE_INCONNECTED) and (gRecvHeader.sResult = '00') then
			begin
        if ( Not IsNumericString(Trim(gRecvHeader.sTelNum))) Or
           (Trim(gRecvHeader.sTelNum) = '0NOCIDINFO') Or
           (Trim(gRecvHeader.sTelNum) = '0routing'  ) then
        begin
          GMessagebox(#13#10 + '장치(키폰주장치,기타CID장치,,,)에서 발신번호가 안들어 왔습니다.' + #13#10 +
                      #13#10 + '==== 고객님에게 전화번호를 물어보세요! ====' + #13#10, CDMSE);
					Log('[NOCIDINFO] 키폰주장치에서 발신번호가 들어오지 않음.', LOGDATAPATHFILE);
          // 접수창 만을 생성 해준다.
          Proc_JoinFromView(GI_JON03_LastFromIdx);
          Exit;
        end;

        // 구버전 CID 값 받기 성공!!
        ls_Cust_Tel := gRecvHeader.sTelNum; // 고객전화번호
        ls_Key_num := gRecvHeader.sMainLn; // 대표번호

        // 고객전화번호 없으면 그냥 빠져나감.
        if ls_Cust_Tel = '' then Exit;

        CID_GET_TIME := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);      //2012.07.19 KHS
        CID_CUST_TEL := ls_Cust_Tel;
        ls_LogMsg := ls_Key_num + '/' + ls_Cust_Tel + '/' + CID_GET_TIME + '/' + GT_USERIF.ID + '/' + gRecvHeader.sLine;
        Proc_CidLog(90, ls_LogMsg); // 로그 기록.
        Result := True;

  			if scb_KeyNumber.IndexOf(ls_Key_num) < 0 then
  				GS_CIDINFO_OUR_KEYNUMBER := False;

        procJON03Open; // 접수창 Open 여부 체크

				if tmr_JoinView.Tag = 100 then
        begin
					SetDebugeWrite_CID('TCP [' + gsCidVersion + '] Read > Func_New_Cid > Proc_JoinFromView ' + gsCIDMessage);
          sTmp := 'CIDINFO.TCP[' + gsCidVersion + '-' + GT_OCX + '] = ' + gsCIDMessage;
				end else
        if tmr_JoinView.Tag = 200 then
        begin
					SetDebugeWrite_CID('UDP [' + gsCidVersion + '] Read > Func_New_Cid > Proc_JoinFromView ' + gsCIDMessage);
          sTmp := 'CIDINFO.UDP[' + gsCidVersion + '-' + GT_OCX + '] = ' + gsCIDMessage;
        end;

        // 콜링중 일시정지 기능 사용일 경우에만
        if Not GB_JON54CALLSTOP then
        begin
          GT_CALL_LIST_STATUS := clsNew;
          if ( Frm_JON54.cxPageControl1.Pages[2].TabVisible ) And
             ( Frm_JON54.btnCallListAutoSearch.Tag = 0 ) And
             ( Not Frm_JON54.pnlCallListLock.Visible ) then
          begin
            Frm_JON54.pnlMain.Enabled := False;
            Frm_JON54.pnlCallListLock.Left :=  7; //(Frm_JON54.Width  - Frm_JON54.pnlCallListLock.Width ) div 2;
            Frm_JON54.pnlCallListLock.Top  := 94; //(Frm_JON54.Height - Frm_JON54.pnlCallListLock.Height) div 2;
            Frm_JON54.pnlCallListLock.BringToFront;
            Frm_JON54.pnlCallListLock.Visible := True;
          end;
        end;
        // 접수창을 생성한다.
        Proc_JoinFromView(GI_JON03_LastFromIdx, gRecvHeader.sTelNum);

				SetDebugeWrite_CID('Func_New_Cid 접수창 생성 : No['+IntToStr(GI_JON01_LastFromIdx)+'] ' + gXeRecvHeader.sTelNum);
        sTmp := 'CIDINFO.B[' + gXeRecvHeader.sType + '-' + IntToStr(GI_JON01_LastFromIdx)+'] ' + gXeRecvHeader.sTelNum;

				if ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'J610')) or (GT_USERIF.BR = 'B100') or 
					 ((GS_PRJ_AREA = 'O') and (GT_USERIF.CT = 'H227')) or 
					 ((GS_PRJ_AREA = 'S') and (GT_USERIF.CT = 'Z780')) then  
				begin
					sTmp := Trim(gXeRecvHeader.sTelNum);
					sTmp := System.StrUtils.RightStr(sTmp, 4);
					Log('Proc_JoinFromView 접수창 생성 CXE: No['+IntToStr(GI_JON01_LastFromIdx)+'] ' + sTmp, LOGDATAPATHFILE);
				end;

        Frm_JON01N[GI_JON01_LastFromIdx].locCustHP_MainNum_Search := '';
        Frm_JON01N[GI_JON01_LastFromIdx].Proc_CIDEventAutoSearch(gRecvHeader.sTelNum, gRecvHeader.sMainLn, gRecvHeader.sLine, '', '', 'N');

        pJON01Show(GI_JON01_LastFromIdx);
      end;
		end;
	except on E: Exception do
		begin
			Assert(False, 'Func_New_Cid Error : ' + E.Message);
      SetDebugeWrite_CID('Func_New_Cid error : ' + E.Message);

			Result := False;
		end;
	end;
end;

procedure TFrm_Main.proc_BrOrder_SMS;
var
  ls_TxLoad: String;
  ls_TxQry, rv_str, ls_Table, ls_AndCon1, sysdate, sQueryTemp : string;
  ls_rxxml: String;
  slReceive: TStringList;
  ErrCode: integer;
  sDate, eDate : Tdate;
begin
  SetDebugeWrite('Main.proc_BrOrder_SMS');
  try
    sysdate := func_sysdate;
    sDate := StrToDate(Date8to10(StartDateTime('yyyymmdd')));
    eDate := sDate+ 1;

    //접속기사 가져오기
    if GT_SEL_BRNO.GUBUN <> '1' then
    begin
      case StrToIntDef(GT_USERIF.LV, 99) of
        10: ls_AndCon1 := Format(' A.CALLCENTER = ''%S'' ', [GT_USERIF.CT]);
        // 상담원
        40:
          begin
            ls_AndCon1 := Format(' CONF_BRCH = ''%s'' ', [GT_USERIF.BR]);
            // 지사관리자
            ls_AndCon1 := ls_AndCon1 + Format(' AND CONF_HEAD = ''%s'' ',
              [func_search_hdNo(GT_USERIF.BR)]); // 본사코드 체크
          end;
        60: begin
              if ( GT_USERIF.Family = 'y' ) And ( GT_USERIF.LV = '60' ) then     // 20120629 LYB
                ls_AndCon1 := Format(' CONF_HEAD = ''%s'' ', [GT_SEL_BRNO.HDNO])
              else
                ls_AndCon1 := Format(' CONF_HEAD = ''%s'' ', [GT_USERIF.HD]);
            end;
        // 본사관리자
      else
      end;
    end else
    if GT_SEL_BRNO.GUBUN = '1' then
    begin
      ls_AndCon1 := Format(' CONF_BRCH = ''%s'' ', [GT_SEL_BRNO.BrNo]);
      // 지사관리자
      ls_AndCon1 := ls_AndCon1 + Format(' AND CONF_HEAD = ''%s'' ',
        [func_search_hdNo(GT_SEL_BRNO.BrNo)]); // 본사코드
    end;

    if FormatDateTime('yyyymmdd', dtBrCallSt.Date) = StartDateTime('yyyymmdd') then
    begin
      ls_Table := 'CDMS_A01_TODAY';
    end else
    begin
      ls_Table := 'CDMS_A01';
      ls_AndCon1 := ls_AndCon1 + ' AND A.IN_DATE BETWEEN TO_DATE(''' +
        FormatDateTime('yyyymmdd', dtBrCallSt.Date) + '090000'',''yyyymmddHH24MISS'') '
        + 'AND TO_DATE(''' + FormatDateTime('yyyymmdd', dtBrCallEd.Date) + '090000'', ''yyyymmddHH24MISS'') ';
    end;

    fGet_BlowFish_Query(GSQ_BRCH_CALLCOUNT, sQueryTemp);
    if not Check_ID(GT_USERIF.ID, GT_SEL_BRNO.BrNo) then
      ls_TxQry := Format(sQueryTemp, [ls_Table, '1=1 ', ls_AndCon1, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1])
    else
      ls_TxQry := Format(sQueryTemp, [ls_Table, 'A.CONF_BRCH &lt;&gt; ''E717'' ', ls_AndCon1, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1, ls_Table, ls_AndCon1]);

    ls_TxLoad := GetSel01('Main' +'BRCALL_SMS', ls_TxQry);

    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if rv_str <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          proc_recieve(ls_rxxml);
        end;
      end;
    finally
      FreeAndNil(slReceive);
      Frm_Flash.Hide;
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

function TFrm_Main.RunIE(AURL: string): Boolean;
var
  IE: Variant;
begin
  SetDebugeWrite('Main.RunIE');
  Result := False;

  try
    IE := CreateOleObject('InternetExplorer.Application');
    IE.Visible := True;
    IE.height := 650;
    IE.width := 800;
    IE.left := 0;
    IE.top := 0;
{
    IE.MenuBar := True;
    IE.AddressBar := True;
    IE.Resizable := True;
    IE.StatusBar := True;
    IE.ToolBar := True;
    IE.Silent := True;
}
    IE.Navigate(AURL);
  except on E: Exception do
  end;
end;

procedure TFrm_Main.sc_wk_trError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  SetDebugeWrite('Main.sc_wk_trError - ' + IntToStr(ErrorCode));
  try
    ErrorCode := 0;

    GT_TR_INFO.USE := 'n';
    cxCIDImgList.GetIcon(5, Frm_JON54.imgTRS.Picture.Icon); // TRS OFF;
    GS_EnvFile.WriteString('WORKER_TR', 'USE', 'n');
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.sc_wk_trRead(Sender: TObject; Socket: TCustomWinSocket);
var
  sTime1, sTemp, sBrSabun1: string;
begin
  SetDebugeWrite('Main.sc_wk_trRead');
  try
    sTime1  := FormatDateTime('ddhhmmss', now);
    sTemp   := socket.ReceiveText;

    if sTemp = sWkBrSabun then
    begin
      if (StrToInt(sTime1) - StrToInt(sWkBrSaTime)) < 10 then Exit;
    end;

    sWkBrSabun  := sTemp;
    sWkBrSaTime := sTime1;

    sTemp     := StringReplace(sTemp, 'iDEN:', '', [rfReplaceAll]);
    sBrSabun1 := Copy(sTemp, 1, Pos(',', sTemp) - 1);

{    try
      if not frm_JON08.Visible then frm_JON08.Show;
    except
    end;
    //로그 기록
    frm_JON08.proc_tr_Receive(sBrSabun1);
}

  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 접수화면 중에 "수정" 화면을 찾는다. CDS. 080730.
function TFrm_Main.Proc_UpdateFromFindView( sSlip : String ): boolean;
var
  i, iFnd : Integer;
begin
  Result := False;
  try
    // 접수화면 폼 배열에서 비어있는 화면을 찾는다.
    if GB_JON_MULTI_MODIFY then  // 멀티수정창 사용시
    begin
      iFnd := -1;

      for i := 0 to JON_MAX_CNT - 1 do
      begin
        // 수정창 3개중 동일접수번호로 열려 있는 창 체크
        if (JON01MNG[i].Use) And (JON01MNG[i].bModify) And (JON01MNG[i].Slip = sSlip) then
        begin
          iFnd := i;
          Break;
        end;
      end;

//   수정창은 동일 접수번호로 열려있지 안으면 무조건 새창으로 사용
//      if iFnd < 0 then
//      begin
//        for i := 0 to JON_MAX_CNT - 1 do
//        begin
//          // 수정창 3개중 안쓰고 있는 창이 있으면 새로운창 사용
//          if (Not JON01MNG[i].Use) And (JON01MNG[i].bModify) then
//          begin
//            iFnd := i;
//            Break;
//          end;
//        end;
//
//        if iFnd < 0 then
//        begin
//          // 수정창을 모두 사용하고 있다면 오래된 순으로 수정창에 정보 표시
//          if GI_JON01_LastModifyIdx = 0 then iFnd := 8 else
//          if GI_JON01_LastModifyIdx = 8 then iFnd := 9 else
//          if GI_JON01_LastModifyIdx = 9 then iFnd := 0;
//        end else
//        begin
//          // 사용하지 않는 수정창이 있으므로 새로운 창을 열어주기 위해 -1 처리
//          iFnd := -1;
//        end;
//      end;
    end else
    begin
      iFnd := -1;
      // 수정창1개만 사용시 idx = 0번만 사용해서 0번만 체크하면 됨
      if (JON01MNG[0].Use) And (JON01MNG[0].bModify) then iFnd := 0;
    end;

    if (iFnd < 0) then
    begin
      // 수정 화면 떠있는게 없음.
      Result := False;
      Exit;
    end;

    Result := True;

    JON01MNG[iFnd].Slip := sSlip;
    fSetFont(Frm_Jon01N[iFnd], GS_FONTNAME, True);
    Frm_Jon01N[iFnd].Show;
    GI_JON01_LastFromIdx := iFnd; // 방금 찾은 접수창의 index 번호 저장.
    GI_JON01_LastModifyIdx := iFnd;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_SocketWork(bCheck: Boolean);
begin
  SetDebugeWrite('Main.proc_SocketWork');
  cxPageControl2.Enabled := bCheck;
  AdvTPTab.Enabled := bCheck;
end;

procedure TFrm_Main.acAwayTimer2Timer(Sender: TObject);
Var Msg, sDmsg : String;
    i : Integer;
    bJon01NoUse : Boolean;
begin
  try
    acAwayTimer2.Enabled := False;
    try
      // Thread에서 오류 발생한 내역 처리
      if Trim(GS_DebugError) <> '' then
      begin
        Assert(False, GS_DebugError);
        GS_DebugError := '';
      end;
	  
			if Trim(GS_UUIDError) <> '' then
			begin
				Assert(False, GS_UUIDError);
				GS_UUIDError := '';
			end;	  

      if cxPageControl2.ActivePageIndex = 3 then
      begin
        procQR_lap_time;
      end;

      if cxPageControl2.ActivePageIndex = 2 then
      begin
        procCS_lap_time;
      end;

      // 매년 12월 31일 접수시간 정렬로 인한 오류로 인해 접수시간을 년/월/일로 변경 메시지 처리
      if ( FormatDateTime('MM-DD HH:NN', Now) = '12-31 23:55' ) And ( Not bMAIN_VIEW_TIME ) then
      begin
        if ( GT_MAIN_VIEW_TIME2 <> 3 ) Or ( GT_MAIN_VIEW_TIME3 <> 3 ) Or ( GT_MAIN_VIEW_TIME4 <> 3 ) Or ( GT_MAIN_VIEW_TIME5 <> 3 ) then
        begin
          Msg := '접수현황 조회시 년도가 변경되면 배차/완료/운행시작/최초접수시간 기준 정렬일 경우 순서가 변경될수 있습니다.' + #13#10 +
                 '배차시간/완료시간/운행시작/최초접수시간 보기 타입설정을 [년도+날짜+시간 ( 0000-00-00 00:00:00 )]으로 변경하시겠습니까?';

          bMAIN_VIEW_TIME := True;
          if Application.MessageBox(PChar(Msg), CDMSI, MB_YESNO + MB_ICONQUESTION + MB_DEFBUTTON1) = IDYES then
          begin
            GT_MAIN_VIEW_TIME2 := 3;
            GS_EnvFile.WriteInteger('MAIN_VIEW', 'TIME2', GT_MAIN_VIEW_TIME2);
            GT_MAIN_VIEW_TIME3 := 3;
            GS_EnvFile.WriteInteger('MAIN_VIEW', 'TIME3', GT_MAIN_VIEW_TIME3);
            GT_MAIN_VIEW_TIME4 := 3;
            GS_EnvFile.WriteInteger('MAIN_VIEW', 'TIME4', GT_MAIN_VIEW_TIME4);
            GT_MAIN_VIEW_TIME5 := 3;
            GS_EnvFile.WriteInteger('MAIN_VIEW', 'TIME5', GT_MAIN_VIEW_TIME5);
          end;
        end;
      end;

      // 버전 업데이트 알림시 접수창이 모두 닫혀 있을 경우에만 알리기 위해
      bJon01NoUse := True;
      if ( GB_CUPDATE_CHK ) And ( Trim(GS_CUPDATE_TYPE) <> '' ) then
      begin
        for i := 0 to Length(JON01MNG) - 1 do
        begin
          if JON01MNG[i].Use then
          begin
            bJon01NoUse := False;
            Break;
          end;
        end;

        if bJon01NoUse then
        begin
          if GS_PRJ_AREA = 'S' then
          begin
            if ( GS_CUPDATE_TYPE = '32' ) And ( Trim(GS_CUPDATE_VER) > ReplaceAll(GS_PRJ_VERSION, '.', '') ) then
            begin
              sDmsg := GS_APPNAME + ' 최신 업데이트 버전이 있습니다.'#13#10#13#10
                     + '즉시 업데이트를 하시겠습니까?';
            end else
            if ( GS_CUPDATE_TYPE = '33' ) And ( Trim(GS_CUPDATE_VER) < ReplaceAll(GS_PRJ_VERSION, '.', '') ) then
            begin
              sDmsg := '현재 사용하시는 버전은 문제가 발생할수 있는 버전입니다.'#13#10#13#10
                     + '즉시 업데이트를 하시겠습니까?';
            end;
          end else
          if GS_PRJ_AREA = 'O' then
          begin
            if ( GS_CUPDATE_TYPE = '36' ) And ( Trim(GS_CUPDATE_VER) > ReplaceAll(GS_PRJ_VERSION, '.', '') ) then
            begin
              sDmsg := GS_APPNAME + ' 최신 업데이트 버전이 있습니다.'#13#10#13#10
                     + '즉시 업데이트를 하시겠습니까?';
            end else
            if ( GS_CUPDATE_TYPE = '37' ) And ( Trim(GS_CUPDATE_VER) < ReplaceAll(GS_PRJ_VERSION, '.', '') ) then
            begin
              sDmsg := '현재 사용하시는 버전은 문제가 발생할수 있는 버전입니다.'#13#10#13#10
                     + '즉시 업데이트를 하시겠습니까?';
            end;
          end;

    			Frm_UpdateBox := TFrm_UpdateBox.Create(nil);
          if ( GS_CUPDATE_TYPE = '33' ) Or ( GS_CUPDATE_TYPE = '37' ) then
          begin
            Frm_UpdateBox.cbAlarm.Visible := False;
            Frm_UpdateBox.cbAlarm.ItemIndex := 0;
            Frm_UpdateBox.btnNo.Left := 277;
            Frm_UpdateBox.btnNo.Caption := '3분후알림';
          end else
          begin
            Frm_UpdateBox.cbAlarm.Visible := True;
            Frm_UpdateBox.cbAlarm.ItemIndex := 0;
            Frm_UpdateBox.btnNo.Left := 352;
            Frm_UpdateBox.btnNo.Caption := '알림';
          end;
    			Frm_UpdateBox.lbStatus.Caption := sDmsg;
    			Frm_UpdateBox.ShowModal;

          GB_CUPDATE_CHK := False;
          GS_CUPDATE_TYPE := '';
          GS_CUPDATE_VER := '';
        end;
      end;

      if GT_OCX = 'SSIT' then
      begin
    		if (GT_USERIF.ID <> '') and (GS_EXEC_GUBUN = 1) and (GT_PRG_DUAL_MAIN = 0) then
        begin
          if ( IdUDPCidRecvServer.Tag = 0 ) And ( not IdUDPCidRecvServer.Active ) then
          begin
            IdUDPCidRecvServer.DefaultPort := 25376;
            IdUDPCidRecvServer.Active := True;

            pSetCIDState(0);
          end;
        end;
      end;

//      // 로그파일 5분단위 저장 처리
//      try
//        if Trim(gsTempLogFileDateTime) <> '' then
//        begin
//          if MinutesBetween( StrToDateTimeDef(gsTempLogFileDateTime, 0), Now) >= 5  then
//          begin
//            if FileExists(WINTEMPDIRECTORY + 'CXELog1.log') then DeleteFile(WINTEMPDIRECTORY + 'CXELog1.log');
//            RenameFile(WINTEMPDIRECTORY + 'CXELog.log', WINTEMPDIRECTORY + 'CXELog1.log');
//            gsTempLogFileDateTime := '';
//          end;
//        end;
//      except
//
//      end;

      try
        // cid건수 저장후 5분지났는지 여부 체크
        if (GI_CIDINFOSAVETIME <= 300) then Inc(GI_CIDINFOSAVETIME) else
        if (GI_CIDINFOSAVETIME <> 999) then GI_CIDINFOSAVETIME := 999;
      except
      end;

      Inc(gst_CidLogTime);
      try
        if gst_CidLogTime > 120 then
        begin
          Proc_CidLog(88, '');
          gst_CidLogTime := 0;
        end;
      except

      end;

      if IdleTime > 60 then
      begin
        if Assigned(Frm_JON30) then
        begin
          if (Frm_JON30.iNaverSerachStartCnt > 0) or (Frm_JON30.iNaverSerachEndCnt > 0) Or
             (Frm_JON30.iDaumSerachStartCnt > 0) or (Frm_JON30.iDaumSerachEndCnt > 0) then
          begin
            Assert(False, Format('Naver : 출 - %d 도 - %d : Daum : 출 - %d 도 - %d',
                                [Frm_JON30.iNaverSerachStartCnt, Frm_JON30.iNaverSerachEndCnt,
                                 Frm_JON30.iDaumSerachStartCnt , Frm_JON30.iDaumSerachEndCnt]));
            Frm_JON30.iNaverSerachStartCnt :=0; Frm_JON30.iNaverSerachEndCnt := 0;
            Frm_JON30.iDaumSerachStartCnt  :=0; Frm_JON30.iDaumSerachEndCnt := 0;

            if GT_USERIF.HD = 'A100' then
              Log(Format('Naver : 출 - %d 도 - %d : Daum : 출 - %d 도 - %d',
                                [Frm_JON30.iNaverSerachStartCnt, Frm_JON30.iNaverSerachEndCnt,
                                 Frm_JON30.iDaumSerachStartCnt , Frm_JON30.iDaumSerachEndCnt]), LOGDATAPATHFILE );
          end;
        end;
      end;
    finally
      acAwayTimer2.Enabled := True;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

// 오더수정, 추가접수 화면을 띄운다.  CDS. 080730.
procedure TFrm_Main.AcceptFromCreate(sConfSlip, AFirstDatetime, sInsGubun: string; iJon03Tag : Integer);
var
  sBizDate, sBizDate2 : string;
begin
	SetDebugeWrite('Main.AcceptFromCreate');
  if AFirstDatetime = '' then
  begin
    GB_JON03SELECT_GB := True;
    // 접수현황에서 수정전문 요청시 결과받았는지의 여부.  CDS. 080825.
    Exit;
  end;

  try
    // 접수창을 생성한다.
		if sInsGubun = '수정' then
    begin
      // 접수화면 중에 "수정" 화면을 찾는다.
      if Proc_UpdateFromFindView(sConfSlip) = False then
      begin
        // 접수화면을 생성한다.
				if Not Proc_JoinFromView(iJon03Tag, '수정', sConfSlip) then Exit;
//				Proc_JoinFromView(iJon03Tag, '수정', sConfSlip);
        Frm_JON01N[GI_JON01_LastFromIdx].grpCustView.Visible := False;
      end;
		end else
		if sInsGubun = '조회' then
		begin
			Proc_JoinFromView(iJon03Tag, '조회'); // 접수화면을 생성한다.
		end else
		if sInsGubun = '앱접수' then
		begin
			Proc_JoinFromView(iJon03Tag, '앱접수'); // 접수화면을 생성한다.
		end else
			Proc_JoinFromView(iJon03Tag, '추가접수'); // 접수화면을 생성한다.

    // 그리드 상의 접수일자
    sBizDate := StartDateTime('yyyy-mm-dd hh:nn:ss'); // 영업일자 얻기..
//    sBizDate2 := StartDateTime('yyyy-mm-dd'); // 전(-1일) 영업일자 얻기..
    sBizDate2 := UpDateDateTime('yyyy-mm-dd'); // 전(-7일) 영업일자 얻기..  2021.05.12 CDS

		//if Copy(sDate,1,10) < Copy(sBizDate2,1,10) then begin
    // 2008-08-08 12:20:00 < 2008-08-09 09:00:00
    if AFirstDatetime < sBizDate2 then
    begin
      //GMessagebox('이용한지 24시간이 지난 오더는 수정 할 수 없고, 내용만 볼 수 있습니다.',CDMSE);
      Frm_JON01N[GI_JON01_LastFromIdx].btnCmdUpdSave.Tag := 99
      // 수정 할 수 없음.
    end else
    begin
      Frm_JON01N[GI_JON01_LastFromIdx].btnCmdUpdSave.Tag := 0
      // 수정 할 수 있음.
    end;

    if (AFirstDatetime >= sBizDate) or (GT_OrderInfo[iJon03Tag].Status = 'R') then
      // 오더 일련번호를 받아 오더 수정창을 열어 준다. [당일오더]
      Frm_JON01N[GI_JON01_LastFromIdx].Proc_OrderUpdate_Select(sConfSlip, '1', sInsGubun)
    else
      // 오더 일련번호를 받아 오더 수정창을 열어 준다. [과거오더]
      Frm_JON01N[GI_JON01_LastFromIdx].Proc_OrderUpdate_Select(sConfSlip, '2', sInsGubun);

    pJON01Show(GI_JON01_LastFromIdx);

		if Frm_JON03[iJon03Tag].grpSetCallBellList.visible then
			Frm_JON03[iJon03Tag].cxGrid6.Enabled := True;
		if Frm_JON03[iJon03Tag].pnl_AIList.visible then
			Frm_JON03[iJon03Tag].cxGrid2.Enabled := True;
	except
		on e: exception do
    begin
			if Frm_JON03[iJon03Tag].grpSetCallBellList.visible then
				Frm_JON03[iJon03Tag].cxGrid6.Enabled := True;
			if Frm_JON03[iJon03Tag].pnl_AIList .visible then 	
				Frm_JON03[iJon03Tag].cxGrid2.Enabled := True;
			GB_JON03SELECT_GB := True;
			// 접수현황에서 수정전문 요청시 결과받았는지의 여부.  CDS. 080825.
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.CatAgentPortSet(sGB: string);
begin
  SetDebugeWrite('Main.proc_wkOrder');
  try
		GT_CAT_PORT.InboundPort := 9457; // 9457  기본설정 값[CIDServer 버전]
		GT_CAT_PORT.XmlCIDPort := 8800; // 8800
		GT_CAT_PORT.OutboundPort := 5114; // 5114
    GT_CAT_PORT.HoTransPort := 6001; // 신버전에서는 직접 호전환 서버에 연결함.
    GT_CAT_PORT.HoTransIP := '61.74.195.70';
		// 신버전에서는 직접 호전환 서버에 연결함.
    GT_CAT_PORT.HoTransRltPort := 9999; // 신버전  ==> 결과받는 포트는 미사용.

    ipwCID.Close;
    ipwCID.Port := GT_CAT_PORT.InboundPort;
    // 9457 --> 9557 : CID서버와 항상 연결 한 상태에서 CID정보를 받는다.
		Server_CID.Active := False;
		Server_CID.Port := GT_CAT_PORT.XmlCIDPort;
		// 8800 --> 8780 : CID서버에서 cdms_client.exe 로 CID정보를 날려준다.
    IdClient.Disconnect;
		IdClient.Port := GT_CAT_PORT.OutboundPort;
    // 5114 --> 5154 : 전화걸기시에 발신정보를 전송한다.
  except on E: Exception do
    Assert(False, E.Message);
	end;
end;

procedure TFrm_Main.proc_wkOrder(AOrderView: TcxGridDBTableView);
var
  i, iDis, iX, iY, iOrderX, iOrderY, iSlip, iGpsDis, iArea, iArea2: Integer;
  fDis: Double;
  sOrderX, sOrderY, sWkX, sWkY, sArea, sArea2: string;
begin
  SetDebugeWrite('Main.proc_wkOrder');
	if not chk_DisOrder.Checked then Exit;

  try
    iSlip := AOrderView.GetColumnByFieldName('접수번호').Index;
    if (AOrderView.DataController.RecordCount > 0) and (tvWkConnect.DataController.RecordCount > 0) then
    begin
      if lbWkSlip.Caption <> AOrderView.DataController.Values[AOrderView.DataController.FocusedRecordIndex, iSlip] then
      begin
        for i := 0 to tvWkConnect.ColumnCount - 1 do
				begin
					tvWkConnect.Columns[i].SortIndex := -1;
					tvWkConnect.Columns[i].SortOrder := soNone;
        end;
        lbWkSlip.Caption := AOrderView.DataController.Values[AOrderView.DataController.FocusedRecordIndex, iSlip];
				iDis    := tvWkConnect.GetColumnByFieldName('직선거리').Index;
				iGpsDis := tvWkConnect.GetColumnByFieldName('우선거리').Index;
				iArea   := tvWkConnect.GetColumnByFieldName('설정시/도').Index;
        iArea2  := tvWkConnect.GetColumnByFieldName('설정위치').Index;
				iX      := tvWkConnect.GetColumnByFieldName('위치X').Index;
        iY      := tvWkConnect.GetColumnByFieldName('위치Y').Index;
				iOrderX := AOrderView.GetColumnByFieldName('출발지X').Index;
        iOrderY := AOrderView.GetColumnByFieldName('출발지Y').Index;
        sOrderX := AOrderView.DataController.Values[AOrderView.DataController.FocusedRecordIndex, iOrderX];
        sOrderY := AOrderView.DataController.Values[AOrderView.DataController.FocusedRecordIndex, iOrderY];
        if (sOrderX <> '') and (sOrderY <> '') then
        begin
          cxLabel13.Caption := '';
          cxLabel13.Visible := False;

          tvWkConnect.BeginUpdate;
          for i := 0 to tvWkConnect.DataController.RecordCount - 1 do
          begin
            sWkX := tvWkConnect.DataController.Values[i, iX];
            if Copy(sWkX, 1, 1) <> '0' then
              sWkX := '0' + sWkX;
            sWkY := tvWkConnect.DataController.Values[i, iY];
            if (sWkX <> '') and (sWkY <> '') then
            begin
              sArea := tvWkConnect.DataController.Values[i, iArea];
              sArea2 := tvWkConnect.DataController.Values[i, iArea2];
							fDis :=
								StrToFloatDef(FloatToStrF(GetRoadLength(STANDFUNCPATHFILE,
                sWkX, sWkY, sOrderX, sOrderY), ffNumber, 3, 1), 0.0);
              if (chk_DisGPS.Checked) then
              begin
                if (Pos('G', sArea) = 1) or (Pos('G', sArea2) = 1) then
                begin
                  tvWkConnect.DataController.Values[i, iDis] := fDis;
                  tvWkConnect.DataController.Values[i, iGpsDis] := fDis;
                end else
								begin
									tvWkConnect.DataController.Values[i, iDis] := fDis;
									tvWkConnect.DataController.Values[i, iGpsDis] := fDis + 1000;
                end;
              end else
              begin
                tvWkConnect.DataController.Values[i, iDis] := fDis;
                tvWkConnect.DataController.Values[i, iGpsDis] := fDis;
              end;
            end else
            begin
              tvWkConnect.DataController.Values[i, iDis] := 999999;
              tvWkConnect.DataController.Values[i, iGpsDis] := 999999;
            end;
          end;
					tvWkConnect.Columns[iGpsDis].SortOrder := soAscending;
					tvWkConnect.EndUpdate;
          tvWkConnect.DataController.FocusedRowIndex := 0;

          if (chkOnlyWK) and (sOrderX <> '') and (sOrderY <> '') then
          begin
            if ( not Assigned(Frm_AdminMap) ) Or ( Frm_AdminMap = Nil ) then Frm_AdminMap := TFrm_AdminMap.Create(Self);
            Frm_AdminMap.Skm := '';
            Frm_AdminMap.Show;
            Application.ProcessMessages;
            Frm_AdminMap.Mark_WK(sOrderX, sOrderY, 2);
          end;
        end else
        begin
          cxLabel13.Caption := '출발지에 좌표값이 없습니다.';
          cxLabel13.Visible := True;
        end;
      end else
      begin
        if (chkOnlyWK)  then
        begin
          iOrderX := AOrderView.GetColumnByFieldName('출발지X').Index;
          iOrderY := AOrderView.GetColumnByFieldName('출발지Y').Index;
          sOrderX := AOrderView.DataController.Values[AOrderView.DataController.FocusedRecordIndex, iOrderX];
          sOrderY := AOrderView.DataController.Values[AOrderView.DataController.FocusedRecordIndex, iOrderY];
          if (sOrderX <> '') and (sOrderY <> '') then
          begin
            if ( not Assigned(Frm_AdminMap) ) Or ( Frm_AdminMap = Nil ) then Frm_AdminMap := TFrm_AdminMap.Create(Self);
            Frm_AdminMap.Skm := '';
            Frm_AdminMap.Show;
            Application.ProcessMessages;
            Frm_AdminMap.Mark_WK(sOrderX, sOrderY, 2);
          end else
          begin
            cxLabel13.Caption := '출발지에 좌표값이 없습니다.';
            cxLabel13.Visible := True;
          end;
        end;
      end;
    end;
  except
    on E: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.TelWorkerByBrSabun(AWkHp, AKeyNum, sSlip, sGubun : String);
begin
  SetDebugeWrite('Main.TelWorkerByBrSabun');
  try
  	if AWkHp = '' then
    begin
      GMessagebox('기사님의 휴대폰 번호을(를) 등록하세요', CDMSE);
      Exit;
    end;

    pCallingCID(AWkHp, AKeyNum, sSlip, sGubun);

  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.func_mdrive(s_Accept: string): string;
const
  lc_stArea = '<Depart Area1="stArea1String" Area2="stArea2String" Area3="stArea3String" '
    + 'Area4="stArea4String" Area5="stArea5String" '
    + 'Charge="ChargeString" ConfInfo="ConfInfoString" '
    + 'MapX="stMapXString" MapY="stMapYString" PayGubun="PayGubunString" Unpriced="UnpricedString" MCharge="MChargeString" MPayer="" URLReq="" />';
  lc_edArea = '<Dest Area1="edArea1String" Area2="edArea2String" Area3="edArea3String" '
    + 'Area4="edArea4String" Area5="edArea5String" MapX="edMapXString" MapY="edMapYString" />';
  lc_ViaInfoString =
    '<Via Area1="Area1String" Area2="Area2String" Area3="Area3String" Area4="Area4String" Area5="Area5String" MapX="MapXString" MapY="MapYString" />';

var
  ls_TxLoad, rv_str: string;
  ls_stArea, ls_stArea_Tot, ls_edArea, ls_edArea_Tot, ls_ViaInto, s_x, s_y:
  string;
  ls_rxxml, sArea: String;
  sl_Accept, sList: TStringList;
  sBrNo, sCuSeq, sKeyNum, sHdNo, sCuTel, sTemp, sCbCode, sShortNm, sShortDp:
  string;
  i: Integer;
  slReceive: TStringList;
  ErrCode: integer;
begin
  try
    sl_Accept := TStringList.Create;
    sl_Accept.Delimiter := '│';
    sl_Accept.DelimitedText := s_Accept;
    ls_stArea := '';
    ls_edArea := '';
    ls_stArea_Tot := '';
    ls_edArea_Tot := '';

    sKeyNum := sl_Accept[2];
    sBrNo := func_search_brno(sKeyNum);
    sHdNo := func_search_hdNo(sBrNo);
    sCuTel := En_Coding(sl_Accept[5]);
    sTemp := func_cust_seq(sHdNo, sBrNo, sKeyNum, sCuTel);
    sList := TStringList.Create;
    sList.CommaText := sTemp;
    if sList.Count = 2 then
    begin
      sCuSeq := sList.Strings[0];
      sCbCode := sList.Strings[1];
    end else
    begin
      sCuSeq := '';
      sCbCode := '';
    end;
    FreeAndNil(sList);

    ls_TxLoad := GTx_UnitXmlLoad('C003.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'WkSabunString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'BaechaSMSString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'SMSString', 'y', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'Client KeyString', 'SAVE0000', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'StatusString', '0', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CustTelString', En_Coding(sCuTel), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CustTel2String', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CIDString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CallCenterString', En_Coding(GT_USERIF.CT), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'MaddBrchString', En_Coding(sBrNo), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'KeyNumberString', En_Coding(sKeyNum), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ConfMemoString', En_Coding(sl_Accept[26]), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ConfBrchString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ConfPretimeString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'GroupNoString', En_Coding(sHdNo), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'BrTelYnString', 'n', [rfReplaceAll]);

    if sCbCode = '' then
    begin
      ls_TxLoad := StringReplace(ls_TxLoad, 'ConfBarString', '0', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BGroupString', '', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BNameString', '', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BName2String', '', [rfReplaceAll]);
    end else
    begin
      i := GT_BUBIN_INFO.cbcode.IndexOf(sCbCode + ',' + sBrNo);
      sShortNm := Trim(GT_BUBIN_INFO.cbSCorpNm.Strings[i]);
      sShortDp := Trim(GT_BUBIN_INFO.cbSDeptNm.Strings[i]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'ConfBarString', '3', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BGroupString', sCbCode, [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BNameString', sShortNm, [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BName2String', sShortDp, [rfReplaceAll]);
    end;

    ls_TxLoad := StringReplace(ls_TxLoad, 'CuSeqString', sCuSeq, [rfReplaceAll]);

    // --------------------------------------------------------------------------------------------
    // 2006.06.06 추가(고객명, 차량정보, 후불, 맵번호에서 좌표로 변경)
    ls_TxLoad := StringReplace(ls_TxLoad, 'CustNameString', En_Coding(sl_Accept[4]), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CarInfoString', En_Coding(sl_Accept[26]), [rfReplaceAll]);

    // --------------------------------------------------------------------------------------------

    ls_TxLoad := StringReplace(ls_TxLoad, 'AddressCountString', '1', [rfReplaceAll]);

    ls_stArea := lc_stArea;
    ls_edArea := lc_edArea;

//-    if Trim(sl_Accept[6]) = '' then
//-     sl_Accept[6] := frm_JON03.cb_City.Properties.Items.Strings[1];

//-   if Trim(sl_Accept[18]) = '' then
//-     sl_Accept[18] := frm_JON03.cb_City.Properties.Items.Strings[1];

    sArea := sl_Accept[6];
    if Trim(sArea) <> '' then
      sArea := copy(sArea, 1, 2);
    ls_stArea := StringReplace(ls_stArea, 'stArea1String', En_Coding(sArea), [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'stArea2String', En_Coding(sl_Accept[7]), [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'stArea3String', En_Coding(sl_Accept[8]), [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'stArea4String', '', [rfReplaceAll]);
    if sl_Accept[15] <> '' then
      ls_stArea := StringReplace(ls_stArea, 'stArea5String', En_Coding(sl_Accept[9] + '/' + sl_Accept[15]), [rfReplaceAll])
    else
      ls_stArea := StringReplace(ls_stArea, 'stArea5String', En_Coding(sl_Accept[9]), [rfReplaceAll]);

    s_x := StringReplace(sl_Accept[11], '.', '', [rfReplaceAll]);
    s_y := StringReplace(sl_Accept[10], '.', '', [rfReplaceAll]);
    // 2006.06.06 맵번호 대신 좌표로 수정한다.
    if (s_x <> '') and (s_x[1] <> '0') then
      s_x := '0' + s_x;

    ls_stArea := StringReplace(ls_stArea, 'stMapXString', s_x, [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'stMapYString', s_y, [rfReplaceAll]);

    if sl_Accept[25] = '후불' then
      ls_stArea := StringReplace(ls_stArea, 'PayGubunString', '2', [rfReplaceAll])
    else
      ls_stArea := StringReplace(ls_stArea, 'PayGubunString', '0', [rfReplaceAll]);

    ls_stArea := StringReplace(ls_stArea, 'UnpricedString', 'n', [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'ConfInfoString', '', [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'MChargeString', '', [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'ChargeString', sl_Accept[24], [rfReplaceAll]);

    sArea := sl_Accept[18];
    if Trim(sArea) <> '' then
      sArea := copy(sArea, 1, 2);

    ls_edArea := StringReplace(ls_edArea, 'edArea1String', En_Coding(sArea), [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edArea2String', En_Coding(sl_Accept[19]), [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edArea3String', En_Coding(sl_Accept[20]), [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edArea4String', '', [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edArea5String',  En_Coding(sl_Accept[21]), [rfReplaceAll]);

    // 2006.07.24 도착지좌표 추가한다.

    s_x := StringReplace(sl_Accept[23], '.', '', [rfReplaceAll]);
    s_y := StringReplace(sl_Accept[22], '.', '', [rfReplaceAll]);
    // 2006.06.06 맵번호 대신 좌표로 수정한다.
    if (s_x <> '') and (s_x[1] <> '0') then
      s_x := '0' + s_x;

    ls_edArea := StringReplace(ls_edArea, 'edMapXString', s_x, [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edMapYString', s_y, [rfReplaceAll]);

    ls_stArea_Tot := ls_stArea_Tot + ls_stArea;
    ls_edArea_Tot := ls_edArea_Tot + ls_edArea;

    if sl_Accept[15] = '' then
    begin
      ls_TxLoad := StringReplace(ls_TxLoad, 'ViaInfoCountString', '0', [rfReplaceAll]);
      ls_ViaInto := lc_ViaInfoString;
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area1String', '', [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area2String', '', [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area3String', '', [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area4String', '', [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area5String', '', [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'MapXString', '', [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'MapYString', '', [rfReplaceAll]);
    end else
    begin
      s_x := StringReplace(sl_Accept[17], '.', '', [rfReplaceAll]);
      s_y := StringReplace(sl_Accept[16], '.', '', [rfReplaceAll]);
      // 2006.06.06 맵번호 대신 좌표로 수정한다.
      if (s_x <> '') and (s_x[1] <> '0') then
        s_x := '0' + s_x;

      ls_ViaInto := lc_ViaInfoString;

      sArea := sl_Accept[12];
      if Trim(sArea) <> '' then
        sArea := copy(sArea, 1, 2);
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area1String', sArea, [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area2String', sl_Accept[13], [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area3String', sl_Accept[14], [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area4String', '', [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'Area5String', sl_Accept[15], [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'MapXString', s_x, [rfReplaceAll]);
      ls_ViaInto := StringReplace(ls_ViaInto, 'MapYString', s_y, [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'ViaInfoCountString', '1', [rfReplaceAll]);
    end;

    // ------------------------------------------------------------------------
    ls_TxLoad := StringReplace(ls_TxLoad, 'ViaInfoString', ls_ViaInto, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'DepartInfoString', ls_stArea_Tot, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'DestInfoString', ls_edArea_Tot, [rfReplaceAll]);

    Result := '';

    sl_Accept.Free;
    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        if trim(rv_str) <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          result := func_mdrive_Recieve(ls_rxxml);
        end;
      end;
    finally
      FreeAndNil(slReceive);
    end;
  except
		on e: Exception do
    begin
      ls_TxLoad := 'frmMain[func_mdrive]Error:' + e.Message;
      Log(ls_TxLoad, LOGDATADIRECTORY + 'Accept_Err.log');
      Result := '';
      Assert(False, E.Message);
    end;
  end;
end;

function Tfrm_Main.func_mdrive_Recieve(ss_rxxml: string): string;
var
  ls_ClientKey, ls_Msg_Err: string;
begin
  try
    ls_ClientKey := GetXmlClientKey(ss_rxxml);

    if copy(ls_ClientKey, 1, 4) = 'SAVE' then
    begin
      ls_Msg_Err := GetXmlErrorCode(ss_rxxml);
      if ls_msg_Err <> '0000' then
        Result := ls_Msg_Err
      else
        Result := 'S';
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.func_MngBranch(AHdNo: string; var ABrList : TStringList): string;
var i : integer;
	slTmp, slResult : TStringList;
	ls_Ins : string;
begin
	Try
		slTmp := TStringList.Create;
		slResult := TStringList.Create;
		Try
			i := 0;
			while true do
			begin
				if GSL_HD_LIST[i, 0] = '' then
					break;

				try
					if AHdNo = GSL_HD_LIST[i, 5] then
					begin
						ls_Ins := GSL_HD_LIST[i, 0] + '(' + GSL_HD_LIST[i, 1] + ')';
						// 지사추가
						if (slTmp.IndexOf(ls_Ins) < 0) and (ls_Ins <> '()') then
						begin
							slTmp.Add(ls_Ins);
							slResult.add(GSL_HD_LIST[i, 0]); // 지사코드
						end;;
					end;
				finally
					Inc(i);
				end;
			end;
			ABrList.Assign(slResult);
			Result := '';
		finally
			slTmp.Free;
		end;
	except
		on e: Exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

function Tfrm_Main.func_search_brno(sKeyNum: string): string;
var
  i: Integer;
begin
  Result := '';
  try
    for i := 0 to GT_BR_KN_CNT do
    begin
      if GSL_HD_LIST[i, 2] = sKeyNum then
      begin
        Result := GSL_HD_LIST[i, 0];
        break;
      end;
    end;
	except
		on e: Exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

function Tfrm_Main.func_cust_seq(sHdNO, sBrNo, sKeyNum,
  sCuTel: string): string;
var
  ls_TxLoad, rv_str, ls_TxQry, sQueryTemp : string;
  ls_rxxml: String;
  xdom: msDomDocument;
  ls_Msg_Err: string;
  lst_Result: IXMLDomNodeList;
  ls_Rcrd: TStringList;
  slReceive: TStringList;
  ErrCode: integer;
begin
  Result := '';
  try
    fGet_BlowFish_Query(GSQ_CUSTOMER_SEQ_SEARCH, sQueryTemp);
    ls_TxQry := Format(sQueryTemp, [sHdNo, sBrNo, sKeyNum, sCuTel]);
    ls_TxLoad := GetSel01('Main' +'CUST0001', ls_TxQry);

    Screen.Cursor := crHandPoint;
    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
      begin
        rv_str := slReceive[0];
        Screen.Cursor := crDefault;
        if trim(rv_str) <> '' then
        begin
          ls_rxxml := rv_str;
          xdom := ComsDomDocument.Create;
          try
            if not xdom.loadXML(ls_rxxml) then Exit;
            ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
            if ls_msg_Err <> '0000' then Exit;
            if (0 < GetXmlRecordCount(ls_rxxml)) then
            begin
              lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
              ls_Rcrd := TStringList.Create;
              try
                GetTextSeperationEx('│', lst_Result.item[0].attributes.getNamedItem('Value').Text, ls_Rcrd);
                Result := ls_Rcrd[0];
              finally
                ls_Rcrd.Free;
              end;
            end;
          except
            Result := '';
          end;
          xdom := Nil;
        end;
      end;
    finally
      FreeAndNil(slReceive);
    end;
  except
    on e: Exception do
    begin
      Assert(False, E.Message);
    end;
  end;
  Screen.Cursor := crDefault;
end;

function TFrm_Main.func_SEL01(AGUBUN, APARAM: string): String;
var ls_rxxml : string;
	ls_TxLoad, rv_str, Param, XmlData, ls_MSG_Err, ErrMsg, sTmp, ls_TxQry: string;
	slReceive, slTmp: TStringList;
	xdom: msDomDocument;
	lst_Result: IXMLDomNodeList;
	ls_Rcrd: TStringList;
	ErrCode, iRow, i, iTmp: integer;
	sl_CPCnt, ls_Tmp : TStringList;
begin
	Try
		Result := '';
		slTmp := TStringList.Create;
		Try
			GetTextSeperationEx2('│', APARAM, slTmp);
			if AGUBUN = 'SURVEY1' then  //로그인시 정보 확인
			begin                                                                                         
				sTmp := 'SELECT * FROM CDMS_EXT_SURVEY WHERE MEM_ID = ''%s'' '
							+ '   AND SV_SEQ = (SELECT MAX(SV_SEQ) FROM CDMS_EXT_SURVEY WHERE MEM_ID = ''%s'' AND SURVEY_NM = ''%s'') '
							+ '   AND SURVEY_NM = ''%s'' '
							+ ' ORDER BY SV_SEQ desc ';
				ls_TxQry := Format(sTmp, [GT_USERIF.ID, GT_USERIF.ID, AGUBUN, AGUBUN]);     
			end;
			ls_TxLoad := GetSel01('SURVEY1', ls_TxQry);

{			ls_TxLoad := GTx_UnitXmlLoad('QUERY.XML');
			ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
			ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
			ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'SURVEY01', [rfReplaceAll]);
			ls_TxLoad := StringReplace(ls_TxLoad, 'QueryString', En_Coding(ls_TxQry), [rfReplaceAll]);  }

			slReceive := TStringList.Create;
			try
				if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False) then
				begin
					rv_str := slReceive[0];
					if rv_str <> '' then
					begin
						ls_rxxml := rv_str;
						Application.ProcessMessages;
						try
							xdom := ComsDomDocument.Create;
							if not xdom.loadXML(ls_rxxml) then Exit;
							ls_MSG_Err := GetXmlErrorCode(ls_rxxml);
							if ('0000' = ls_MSG_Err) then
							begin
								lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Data/Result');
								Result := lst_Result.item[0].attributes.getNamedItem('Value').Text;
							end	else 
							begin
							end;	

							xdom := Nil;
						except
						end;
					end;
				end;
			finally
				FreeAndNil(slReceive);
			end;
		FINALLY	
			slTmp.Free;
		end;
	
	except
		on E: Exception do
		begin
			SetDebugeWrite_CID('proc_SEL01 error[' + AGUBUN+ ', ' + APARAM +']');
			Assert(False, 'proc_SEL01 Error : ' + e.Message);
		end;
	end;
end;

function TFrm_Main.func_SI415SendText(ACode: String): Boolean;
var iCnt : integer;
	sStr : string;
begin
	Result := False;
	if ( GT_OCX = 'SI415' ) then
	begin
		try
			// 서버에 연결
			if Not bSI415.Socket.Connected then
			begin
				if GT_OCX = 'SI415' then
				begin
					iCnt := 0;
					while Not bSI415CTIConnected do
					begin
						tmr_SI415check.Tag := 0;
						tmr_SI415check.Interval := 10;
						tmr_SI415check.Enabled := True;
						tmr_SI415check.Interval := 3000;
						Application.ProcessMessages;
						Sleep(10);
						Inc(iCnt);
						if iCnt > 50 then Break;
          end;
				end;
      end;
		except
			on e:Exception do
			begin
				Assert(False, 'SI415 SendText Error :'+e.Message);
			end;
		end;

		sStr := fSI_MakeHeader(ACode, '0');

		bSI415.Socket.SendText(sStr);
		SetDebugeWrite('bSI415 Send: '+ sStr);
		Result := True;
	end;
end;

function Tfrm_Main.func_Speed(s_Accept: string): string;
const
  lc_stArea = '<Depart Area1="stArea1String" Area2="stArea2String" Area3="stArea3String" '
    + 'Area4="stArea4String" Area5="stArea5String" '
    + 'Charge="ChargeString" ConfInfo="ConfInfoString" '
    + 'MapX="stMapXString" MapY="stMapYString" PayGubun="PayGubunString" Unpriced="UnpricedString" MCharge="MChargeString" MPayer="" URLReq="" />';
  lc_edArea = '<Dest Area1="edArea1String" Area2="edArea2String" Area3="edArea3String" '
    + 'Area4="edArea4String" Area5="edArea5String" MapX="edMapXString" MapY="edMapYString" />';
  lc_ViaInfoString =
    '<Via Area1="Area1String" Area2="Area2String" Area3="Area3String" Area4="Area4String" Area5="Area5String" MapX="MapXString" MapY="MapYString" />';
var
  ls_TxLoad, rv_str: string;
  ls_stArea, ls_stArea_Tot, ls_edArea, ls_edArea_Tot, ls_ViaInto, s_x, s_y,
    sTemp1, sTemp2: string;
  sBrNo, sCuSeq, sKeyNum, sHdNo, sCuTel, sTemp, sCbCode, sShortNm, sShortDp:
  string;
  ls_rxxml, sArea: String;
  sl_Accept, sXY, sList: TStringList;
  i: Integer;
  slReceive: TStringList;
  ErrCode: integer;
begin
  try
    sl_Accept := TStringList.Create;
    sl_Accept.Delimiter := '│';
    sl_Accept.DelimitedText := s_Accept;
    ls_stArea := '';
    ls_edArea := '';
    ls_stArea_Tot := '';
    ls_edArea_Tot := '';

    sKeyNum := sl_Accept[2];
    sBrNo := func_search_brno(sKeyNum);
    sHdNo := func_search_hdNo(sBrNo);
    sCuTel := En_Coding(sl_Accept[5]);
    sTemp := func_cust_seq(sHdNo, sBrNo, sKeyNum, sCuTel);
    sList := TStringList.Create;
    sList.CommaText := sTemp;
    if sList.Count = 2 then
    begin
      sCuSeq := sList.Strings[0];
      sCbCode := sList.Strings[1];
    end else
    begin
      sCuSeq := '';
      sCbCode := '';
    end;
    FreeAndNil(sList);

    ls_TxLoad := GTx_UnitXmlLoad('C003.XML');
    ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString', GT_USERIF.ID, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString', VERSIONINFO, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'WkSabunString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'BaechaSMSString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'SMSString', 'y', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString', 'SAVE0001', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'StatusString', '0', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CustTelString', sCuTel, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CustTel2String', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CIDString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'InSabunString', En_Coding(GT_USERIF.ID), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CallCenterString', En_Coding(GT_USERIF.CT), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'MaddBrchString', En_Coding(sBrNo), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'KeyNumberString', En_Coding(sKeyNum), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ConfMemoString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ConfBrchString', '', [rfReplaceAll]);

    if sCbCode = '' then
    begin
      ls_TxLoad := StringReplace(ls_TxLoad, 'ConfBarString', '0', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BGroupString', '', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BNameString', '', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BName2String', '', [rfReplaceAll]);
    end else
    begin
      i := GT_BUBIN_INFO.cbcode.IndexOf(sCbCode + ',' + sBrNo);
      sShortNm := Trim(GT_BUBIN_INFO.cbSCorpNm.Strings[i]);
      sShortDp := Trim(GT_BUBIN_INFO.cbSDeptNm.Strings[i]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'ConfBarString', '3', [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BGroupString', sCbCode, [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BNameString', sShortNm, [rfReplaceAll]);
      ls_TxLoad := StringReplace(ls_TxLoad, 'BName2String', sShortDp, [rfReplaceAll]);
    end;

    ls_TxLoad := StringReplace(ls_TxLoad, 'CuSeqString', sCuSeq, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'ConfPretimeString', '', [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'GroupNoString', En_Coding(sHdNo), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'BrTelYnString', 'n', [rfReplaceAll]);

    // --------------------------------------------------------------------------------------------
    // 2006.06.06 추가(고객명, 차량정보, 후불, 맵번호에서 좌표로 변경)
    ls_TxLoad := StringReplace(ls_TxLoad, 'CustNameString', En_Coding(sl_Accept[4]), [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'CarInfoString', En_Coding(sl_Accept[26]), [rfReplaceAll]);

    // --------------------------------------------------------------------------------------------

    ls_TxLoad := StringReplace(ls_TxLoad, 'AddressCountString', '1', [rfReplaceAll]);

    ls_stArea := lc_stArea;
    ls_edArea := lc_edArea;

//-   if Trim(sl_Accept[6]) = '' then
//-     sl_Accept[6] := frm_JON03.cb_City.Properties.Items.Strings[1];

//-   if Trim(sl_Accept[18]) = '' then
//-     sl_Accept[18] := frm_JON03.cb_City.Properties.Items.Strings[1];

    sArea := sl_Accept[6];
    if Trim(sArea) <> '' then
      sArea := copy(sArea, 1, 2);
    ls_stArea := StringReplace(ls_stArea, 'stArea1String', En_Coding(sArea), [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'stArea2String', En_Coding(sl_Accept[7]), [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'stArea3String', En_Coding(sl_Accept[8]), [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'stArea4String', '', [rfReplaceAll]);
    if sl_Accept[15] <> '' then
      ls_stArea := StringReplace(ls_stArea, 'stArea5String', En_Coding(sl_Accept[9] + '/' + sl_Accept[15]), [rfReplaceAll])
    else
      ls_stArea := StringReplace(ls_stArea, 'stArea5String', En_Coding(sl_Accept[9]), [rfReplaceAll]);
    s_X := '';
    s_Y := '';
    sXY := TStringList.Create;
    sXY.Clear;
    sXY.Delimiter := ':';
    sXY.DelimitedText := sl_Accept[10];
    if (sXY.Count > 2) and (sl_Accept[10] <> '') then
    begin
      s_X := '0' + sXy.Strings[0] + LPad(sXy.Strings[1], '0', 2);
      if pos('.', sXy.Strings[2]) > 0 then
      begin
        sTemp1 := copy(sXy.Strings[2], 1, pos('.', sXy.Strings[2]) - 1);
        sTemp2 := copy(sXy.Strings[2], pos('.', sXy.Strings[2]) + 1, 2);
      end else
      begin
        sTemp1 := sXy.Strings[2];
        sTemp2 := '0';
      end;
      sTemp1 := Lpad(sTemp1, '0', 2);
      sTemp2 := RPad(sTemp2, 2, '0');
      s_X := s_X + sTemp1 + sTemp2;
    end;
    sXy.Clear;
    sXy.DelimitedText := sl_Accept[11];
    if (sXY.Count > 2) and (sl_Accept[11] <> '') then
    begin
      s_y := sXy.Strings[0] + LPad(sXy.Strings[1], '0', 2);
      if pos('.', sXy.Strings[2]) > 0 then
      begin
        sTemp1 := copy(sXy.Strings[2], 1, pos('.', sXy.Strings[2]) - 1);
        sTemp2 := copy(sXy.Strings[2], pos('.', sXy.Strings[2]) + 1, 2);
      end else
      begin
        sTemp1 := sXy.Strings[2];
        sTemp2 := '0';
      end;
      sTemp1 := Lpad(sTemp1, '0', 2);
      sTemp2 := RPad(sTemp2, 2, '0');
      s_y := s_y + sTemp1 + sTemp2;
    end;

    ls_stArea := StringReplace(ls_stArea, 'stMapXString', s_x, [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'stMapYString', s_y, [rfReplaceAll]);

    if sl_Accept[25] = '후불' then
      ls_stArea := StringReplace(ls_stArea, 'PayGubunString', '2', [rfReplaceAll])
    else
      ls_stArea := StringReplace(ls_stArea, 'PayGubunString', '0', [rfReplaceAll]);

    ls_stArea := StringReplace(ls_stArea, 'UnpricedString', 'n', [rfReplaceAll]);

    //    ls_stArea := StringReplace(ls_stArea, 'ConfInfoString', '스피드콜변환', [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'ConfInfoString', '전화먼저', [rfReplaceAll]);
    //    ls_stArea := StringReplace(ls_stArea, 'ConfInfoString', '타사', [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'MChargeString', '', [rfReplaceAll]);
    ls_stArea := StringReplace(ls_stArea, 'ChargeString', En_Coding(sl_Accept[24]), [rfReplaceAll]);

    sArea := sl_Accept[18];
    if Trim(sArea) <> '' then
      sArea := copy(sArea, 1, 2);

    ls_edArea := StringReplace(ls_edArea, 'edArea1String', En_Coding(sArea), [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edArea2String', En_Coding(sl_Accept[19]), [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edArea3String', En_Coding(sl_Accept[20]), [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edArea4String', '', [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edArea5String', En_Coding(sl_Accept[21]), [rfReplaceAll]);

    // 2006.07.24 도착지좌표 추가한다.
    s_x := '';
    s_y := '';
    sXY.Clear;
    sXY.Delimiter := ':';
    sXY.DelimitedText := sl_Accept[22];
    if (sXY.Count > 2) and (sl_Accept[22] <> '') then
    begin
      s_X := '0' + sXy.Strings[0] + LPad(sXy.Strings[1], '0', 2);
      if pos('.', sXy.Strings[2]) > 0 then
      begin
        sTemp1 := copy(sXy.Strings[2], 1, pos('.', sXy.Strings[2]) - 1);
        sTemp2 := copy(sXy.Strings[2], pos('.', sXy.Strings[2]) + 1, 2);
      end else
      begin
        sTemp1 := sXy.Strings[2];
        sTemp2 := '0';
      end;
      sTemp1 := Lpad(sTemp1, '0', 2);
      sTemp2 := RPad(sTemp2, 2, '0');
      s_X := s_X + sTemp1 + sTemp2;
    end;
    sXy.Clear;
    sXy.DelimitedText := sl_Accept[23];
    if (sXY.Count > 2) and (sl_Accept[23] <> '') then
    begin
      s_y := sXy.Strings[0] + LPad(sXy.Strings[1], '0', 2);
      if pos('.', sXy.Strings[2]) > 0 then
      begin
        sTemp1 := copy(sXy.Strings[2], 1, pos('.', sXy.Strings[2]) - 1);
        sTemp2 := copy(sXy.Strings[2], pos('.', sXy.Strings[2]) + 1, 2);
      end else
      begin
        sTemp1 := sXy.Strings[2];
        sTemp2 := '0';
      end;
      sTemp1 := Lpad(sTemp1, '0', 2);
      sTemp2 := RPad(sTemp2, 2, '0');
      s_y := s_y + sTemp1 + sTemp2;
    end;

    sXY.Free;

    sl_Accept.Free;

    ls_edArea := StringReplace(ls_edArea, 'edMapXString', s_x, [rfReplaceAll]);
    ls_edArea := StringReplace(ls_edArea, 'edMapYString', s_y, [rfReplaceAll]);

    ls_stArea_Tot := ls_stArea_Tot + ls_stArea;
    ls_edArea_Tot := ls_edArea_Tot + ls_edArea;

    ls_TxLoad := StringReplace(ls_TxLoad, 'ViaInfoCountString', '0', [rfReplaceAll]);
    ls_ViaInto := lc_ViaInfoString;
    ls_ViaInto := StringReplace(ls_ViaInto, 'Area1String', '', [rfReplaceAll]);
    ls_ViaInto := StringReplace(ls_ViaInto, 'Area2String', '', [rfReplaceAll]);
    ls_ViaInto := StringReplace(ls_ViaInto, 'Area3String', '', [rfReplaceAll]);
    ls_ViaInto := StringReplace(ls_ViaInto, 'Area4String', '', [rfReplaceAll]);
    ls_ViaInto := StringReplace(ls_ViaInto, 'Area5String', '', [rfReplaceAll]);
    ls_ViaInto := StringReplace(ls_ViaInto, 'MapXString', '', [rfReplaceAll]);
    ls_ViaInto := StringReplace(ls_ViaInto, 'MapYString', '', [rfReplaceAll]);

    // ------------------------------------------------------------------------
    ls_TxLoad := StringReplace(ls_TxLoad, 'ViaInfoString', ls_ViaInto, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'DepartInfoString', ls_stArea_Tot, [rfReplaceAll]);
    ls_TxLoad := StringReplace(ls_TxLoad, 'DestInfoString', ls_edArea_Tot, [rfReplaceAll]);

    slReceive := TStringList.Create;
    try
      if dm.SendSock(ls_TxLoad, slReceive, ErrCode, False, 10000) then
      begin
        rv_str := slReceive[0];
        if trim(rv_str) <> '' then
        begin
          ls_rxxml := rv_str;
          Application.ProcessMessages;
          result := func_mdrive_Recieve(ls_rxxml);
        end;
      end;
    finally
      FreeAndNil(slReceive);
    end;
  except
    on e: Exception do
    begin
      ls_TxLoad := 'frmMain[func_Speed]Error:' + e.Message;
      Log(ls_TxLoad, LOGDATADIRECTORY + 'Accept_Err.log');
			Result := '';

      Assert(False, E.Message);
    end;
  end;
end;

function TFrm_Main.IsRunRivalProgram(AClassName, ASubClass, AWindowName: string; AFileSize, AMemSize: Int64): Boolean;
var
  H, SH: THandle;
begin
	Result := False;

  try
   if AClassName = '' then
      Exit;

    H := 0;
    while true do
    begin
      H := FindWindowEx(GetDesktopWindow, H, PChar(AClassName), nil);

      if H = 0 then
        Break;

      if ASubClass <> '' then
      begin
        SH := FindWindowEx(H, 0, PChar(ASubClass), nil);
        if SH = 0 then
          Continue;
      end;

      if (H <> 0) and (SH <> 0) then
      begin
        Break;
      end;
    end;

    if H = 0 then
      Exit;

    if AWindowName <> '' then
    begin
      H := FindWindow(nil, PChar(AWindowName));
      if H = 0 then
        Exit;
    end;

    Result := True;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.KillRivalProgram(AName: string; AKill: Boolean);
const
	_MSG_FMT = '[KILL][%s][%s]';
var
	Msg, Area: string;
	iHandle: THandle;
	CopyData: TCopyDataStruct;
begin
	SetDebugeWrite('Main.KillRivalProgram');
  try
    if Pos(AName, FRivalInfoSend) = 0 then
    begin
      if (GS_PRJ_AREA = 'O') then
        Area := '지'
      else
        Area := '수';

      if AKill then
        AKill := IsKillTarget(GT_USERIF.HD, GS_PRJ_AREA = 'S');

      Msg := Format(_MSG_FMT, [Area, AName]);

      if AKill then
        Msg := Msg + '[종료]';

      Assert(False, Msg);
      FRivalInfoSend := FRivalInfoSend + AName;

      if AKill then
      begin
        Assert(False, Msg + '[Application.Terminate]');

        iHandle := FindWindow('TfrmMain', 'CMessenger');
        if iHandle <> 0 then
        begin
          CopyData.cbData := Length('CLOSE') + 1;
          CopyData.lpData := pChar('CLOSE' + #0);
          SendMessage(iHandle, WM_COPYDATA, 0, LongInt(@CopyData));
        end;
        Application.Terminate;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
	end;
end;

function TFrm_Main.IsCheckRivalProgram(AProgram : string): Boolean;
var
	ProcID: DWORD;
begin
	SetDebugeWrite('Frm_Main.IsCheckRivalProgram');
	Result := False;
	try
		ProcID:= Process32ListFind(AProgram);
		if ProcID <> 0 then
		begin
			Result := True;
		end;
	except on e: exception do
		begin
			Assert(False, E.Message);
		end;
	end;
end;

function TFrm_Main.IsKillTarget(AHdNo: string;
  ACity: Boolean): Boolean;
var
  I: Integer;
begin
  try
    Result := True;
    if not ACity then
    begin
      Result := False;
      Exit;
    end;
    Exit;

    // [2009.09.03] 특정업체에 대한 아이콘 사용허용 기능 제한(전체 아이콘 제한)
    for I := 0 to Length(KillHdNoList) - 1 do
    begin
      if KillHdNoList[I] = AHdNo then
      begin
        Result := False;
        Exit;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.Proc_CIDSetSave;
var
  ln_envfile: TIniFile;
  sSvrIp : String;
begin
  SetDebugeWrite('Main.Proc_CIDSetSave');
  try
    try
      ln_envfile := TIniFile.Create(ENVPATHFILE);

      // IP, 내선 정보를 저장.[CID서버 자동찾기 일때 사용됨]
      ln_envfile.WriteString('CID_COMM', 'CID_IP' , Trim(ed_CID_Ip1.Text));
			ln_envfile.WriteString('CID_COMM', 'CID_IP2', Trim(ed_CID_Ip2.Text));

      if RB_SvrUse1.Checked then
      begin
        ln_envfile.WriteString('CID_COMM', 'CID_SELSVR', '1');
        GT_CIDINFO.Use_Sel := '1';
        GT_CIDINFO.SERVER_IP     := Trim(ed_CID_Ip1.Text);
        GT_CAT_PORT.InboundSvrIP  := Trim(ed_CID_Ip1.Text);
      end else
      if RB_SvrUse2.Checked then
      begin
        ln_envfile.WriteString('CID_COMM', 'CID_SELSVR', '2');
        GT_CIDINFO.Use_Sel := '2';
        GT_CIDINFO.SERVER_IP      := Trim(ed_CID_Ip2.Text);
        GT_CAT_PORT.InboundSvrIP  := Trim(ed_CID_Ip2.Text);
      end;

      ln_envfile.WriteString('CID_COMM', 'NAESUN' , Trim(ed_Number.Text));
      gsInternalNumber := ed_Number.Text;

      // 전역 구조체에 세팅한다.
      GT_CIDINFO.NaeSun         := Trim(ed_Number.Text);

      ln_envfile.WriteString('CID_COMM', 'CIDSERVERIPFIND', 'N');
      GT_CIDINFO.Auto_Search := 'N';

      if rchk_Use.Checked then
      begin
        ln_envfile.WriteString('CID_COMM', 'CID_AUTO', 'Y');
        GT_CIDINFO.Use_yn := 'Y';
      end else
      begin
        ln_envfile.WriteString('CID_COMM', 'CID_AUTO', 'N');
        GT_CIDINFO.Use_yn := 'N';
      end;

      if ( cxChkCidSvrIPUse.Checked ) And ( GT_CIDINFO.Use_yn = 'N' ) then
      begin
        sSvrIp := Copy(CbCidSvrIP.Text, Pos('[', CbCidSvrIP.Text)+1, Length(CbCidSvrIP.Text)-2);
        sSvrIP := ReplaceAll(sSvrIP, ']', '');

        ln_envfile.WriteString('CID_COMM', 'CID_SELSVRIP', sSvrIP);
        GT_CIDINFO.SERVER_IP      := Trim(sSvrIP);
        GT_CAT_PORT.InboundSvrIP  := Trim(sSvrIP);
        GT_CIDINFO.Use_yn := 'Y';
      end;
    finally
      FreeAndNil(ln_envfile);
    end;
  except on E: Exception do
		Assert(False, E.Message);
  end;
end;

function TFrm_Main.GetWebBrowserHTML(const WebBrowser: TWebBrowser): String;
var
  LStream: TStringStream;
  Stream : IStream;
  LPersistStreamInit : IPersistStreamInit;
begin
  try
    if not Assigned(WebBrowser.Document) then Exit;
    LStream := TStringStream.Create('');
    try
      LPersistStreamInit := WebBrowser.Document as IPersistStreamInit;
      Stream := TStreamAdapter.Create(LStream,soReference);
      LPersistStreamInit.Save(Stream,true);
      result := LStream.DataString;
    finally
      LStream.Free();
    end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.GetHTML(w: TWebBrowser; bText : Boolean): String;
Var
  e: IHTMLElement;
begin
  try
    Result := '';
    if Assigned(w.Document) then
    begin
      e := (w.Document as IHTMLDocument2).body;

      while e.parentElement <> nil do
      begin
        e := e.parentElement;
      end;

      if bText then
        Result := e.outerText
      else
        Result := M_SGParseTXT(Html_DeCoding(e.outerHtml));
    end;
  except
    on E: Exception do
    begin
      Result := '';
      Assert(False, E.Message);
    end;
  end;
end;

procedure TFrm_Main.CheckRivalProgram(ATitle, AName: string; AKill: Boolean);
const
	_MSG_FMT = '[%s][%s][%s]';
var
	Msg, Area: string;
	iHandle: THandle;
	CopyData: TCopyDataStruct;
begin
	SetDebugeWrite('Main.CheckRivalProgram');
	try
		if Pos(AName, FRivalInfoSend) = 0 then
		begin
      if (GS_PRJ_AREA = 'O') then
        Area := '지'
			else
        Area := '수';

			Msg := Format(_MSG_FMT, [Area, ATitle, AName]);

			Assert(False, Msg);
			FRivalInfoSend := FRivalInfoSend + AName;

			if AKill then
			begin
				Assert(False, Msg + '[Application.Terminate]');

				iHandle := FindWindow('TfrmMain', 'CMessenger');
				if iHandle <> 0 then
				begin
					CopyData.cbData := Length('CLOSE') + 1;
					CopyData.lpData := pChar('CLOSE' + #0);
					SendMessage(iHandle, WM_COPYDATA, 0, LongInt(@CopyData));
        end;
        Application.Terminate;
      end;
    end;
  except on E: Exception do
    Assert(False, E.Message);
	end;
end;

function TFrm_Main.Check_LEFTSECTION(ATag: integer): Boolean;
begin
  try
  	if (mLEFT_SectionIndex <= 1) and ( ATag > 20 ) then
  	begin
  		GMessagebox('패밀리 전체조회는 [접수현황]에서만 사용 가능합니다.', CDMSE);
      SetTree_ListItem( mLEFT_HdCd, mLEFT_BrCd, mLEFT_Idx);
  		Result := True;
  	end else
  	begin
  		Result := False;
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

function TFrm_Main.Check_LEFTSECTION1(ATag: integer): Boolean;
Var i, j : Integer;
    bCheck : Boolean;
begin
  try
  	if ( ATag > 20 ) And ( ATag <> 100 ) then
  	begin
      bCheck := False;
      i := Tree_List.FocusedNode.Index;
      for j := 0 to Tree_List.Items[i].Count - 1 do
      begin
        if Tree_List.Items[i].Items[j].ImageIndex = 37 then
        begin
          Tree_List.Items[i].Items[j].Selected := True;
          procChangeTreeBrNo;
          bCheck := True;
          Break;
        end;
      end;

      if Not bCheck then
      begin
        Tree_List.Items[i].Items[0].Selected := True;
        procChangeTreeBrNo;
      end;

      Result := True;
  	end else
  	begin
  		Result := False;
  	end;
  except on E: Exception do
    Assert(False, E.Message);
  end;
end;

procedure TFrm_Main.proc_AdminAuthCheck;
begin
  TCK_USER_PER.JON_MainView := '0';           // 메인화면

  // 좌측메뉴
//  TCK_USER_PER.LFT_BrList := '0';                                      // 지사현황
//  TCK_USER_PER.LFT_WkConnect := '0';                                   // 접속기사
//  TCK_USER_PER.LFT_BrCall := '0';                                      // 지사콜현황
//  TCK_USER_PER.LFT_ShareCall := '0';                                   // 공유콜
  TCK_USER_PER.LFT_Group := '0';                                       // 연합사
//  TCK_USER_PER.LFT_WKAttend := '0';                                    // 출근기사현황

  // 하단메뉴
  TCK_USER_PER.BTM_CALLMNG   := '0';                                   // 통화관리
  TCK_USER_PER.BTM_CALLMNGCNT := '0';                                  // 통화관리 통화종료/전화종료건수 보기 권한
  TCK_USER_PER.BTM_CALLOUT   := '0';                                   // 부재중전화관리
  TCK_USER_PER.BTM_CALLCNL   := '0';                                   // 부정취소콜관리
  TCK_USER_PER.BTM_MENUSCH   := '0';                                   // 메뉴찾기

  // 기사 관련 메뉴
//  TCK_USER_PER.WOR_StatView := '0';   TCK_USER_PER.WOR_Manage := '0';  // 301.기사현황관리
  TCK_USER_PER.WOR_CashMng := '0';                                     // 302.기사캐쉬관리
  TCK_USER_PER.WOR_Attend := '0';                                      // 303.기사배차현황
  TCK_USER_PER.WOR_ShareBaecha := '0';                                 // 304.공유콜배차제한
  TCK_USER_PER.WOR_Blacklist := '0';                                   // 305.블랙리스트
  TCK_USER_PER.WOR_PeekTimeBlock := '0';                               // 306.심야배차제한현황
  TCK_USER_PER.WOR_513TimeCard := '0';                                 // 307.기사출근표
  TCK_USER_PER.WOR_Pickup := '0';                                      // 310.기사픽업
//  TCK_USER_PER.WOR_Gongji := '0';                                      // 311.기사공지

  // 고객 관련 메뉴
  TCK_USER_PER.CUR_Manager := '0';                                     // 401.고객관리
  TCK_USER_PER.CUR_General := '0';                                     // 402.일반검색
  TCK_USER_PER.CUR_High := '0';                                        // 403.고급검색
  TCK_USER_PER.CUR_Detail := '0';                                      // 404.상세검색
  TCK_USER_PER.CUR_Virture := '0';                                     // 405.안심번호관리
  TCK_USER_PER.CUR_Dormancy := '0';                                    // 406.휴먼고객
  TCK_USER_PER.CUR_CustLevel := '0';                                   // 407.고객등급관리

  TCK_USER_PER.CUR_Mileage := '0';                                     // 408.마일리지설정
  TCK_USER_PER.CUR_MileageStat := '0';                                 // 409.마일리지현황(고객별)
  TCK_USER_PER.CUR_MileageDetail := '0';                               // 410.마일리지상세(적립+지급)
  TCK_USER_PER.CUR_OKCashBack := '0';                                  // 411.OK캐쉬백적립현황
                                                                       // 412.동부화재 보험가입현황

  // 법인 관련 메뉴
  TCK_USER_PER.CUR_BubinMng := '0';  TCK_USER_PER.CUR_BubinMngModify := '0';  // 501.법인관리
  TCK_USER_PER.CUR_BubinHis := '0';                                           // 502.법인이용내역
  TCK_USER_PER.CUR_BubinAcc := '0';                                           // 503.법인일일정산
  TCK_USER_PER.CUR_BubinAuth := '0';                                          // 504.법인인증

  // 정산 관련 메뉴
  TCK_USER_PER.ACC_BrchCash := '0';                                    // 601.지사캐쉬내역
  TCK_USER_PER.ACC_BankBook := '0';                                    // 602.통장식로그
  TCK_USER_PER.ACC_Order := '0';                                       // 603.오더정산
	TCK_USER_PER.ACC_BrchCharge := '0';                                  // 604.지사충전내역
  TCK_USER_PER.ACC_WkCharge := '0';                                    // 605.기사충전내역
  TCK_USER_PER.ACC_WKSolution := '0';                                  // 606.기사사용료
  TCK_USER_PER.ACC_BrchGainCash := '0';                                // 607.공유콜정산
  TCK_USER_PER.ACC_CASH_MOVIE := '0';                                  // 608.캐쉬이동
	TCK_USER_PER.ACC_SMS_CASH := '0';                                    // 609.SMS캐쉬충전
	TCK_USER_PER.ACC_Gain_List := '0';                                   // 610.수익금리스트
	TCK_USER_PER.ACC_Gain_12 := '0';                                     // 611.수익금계산
  TCK_USER_PER.ACC_Gain_13 := '0';                                     // 612.콜운행정산
  TCK_USER_PER.ACC_Gain_14 := '0';                                     // 613.기사수수료현황
  TCK_USER_PER.ACC_Gain_15 := '0';                                     // 614.콜대행수수료
  TCK_USER_PER.ACC_COUPON_APP := '0';                                  // 615.쿠폰승인현황
  TCK_USER_PER.ACC_COUPON_USE := '0';                                  // 616.쿠폰사용현황
  TCK_USER_PER.ACC_CARD_PAY := '0';                                    // 617.카드결제현황
  TCK_USER_PER.ACC_CASH_OUT := '0';                                    // 618.출금요청권한
	TCK_USER_PER.ACC_BRCOUPON_USE := '0';                                // 619,620.자체쿠폰등록/사용현황
	TCK_USER_PER.ACC_SMS_CASH_PCK := '0';                                // 621.SMS캐쉬일괄충전

  // 통계 관련 메뉴
	TCK_USER_PER.STT_Keynumber   := '0';                                 // 701.대표번호별통계
	TCK_USER_PER.STT_Worker 		 := '0';                                 // 702.기사별통계
	TCK_USER_PER.STT_Customer 	 := '0';                                 // 703.고객별통계
	TCK_USER_PER.STT_Owner 		   := '0';								   	             // 704.자사통계
	TCK_USER_PER.STT_OwnerACC		 := '0';  							                 // 715.지사별콜정산통계
	TCK_USER_PER.STT_Share 			 := '0';                                 // 705.공유콜통계
	TCK_USER_PER.STT_Local 			 := '0';                                 // 706.지역별통계
	TCK_USER_PER.STT_NewCustRate := '0';                                 // 707.신규고객통계
	TCK_USER_PER.STT_TimeCall 	 := '0'; 								                 // 708.시간대별콜수통계
	TCK_USER_PER.STT_Day 			   := '0';                                 // 709.일일콜수통계
	TCK_USER_PER.STT_NewCall 		 := '0';                                 // 710.신규콜수통계
	TCK_USER_PER.STT_CanCelCall  := '0';                                 // 711.취소콜통계   (*)
	TCK_USER_PER.STT_TimeLocal   := '0';                                 // 712.시간대별출/도지역통계
	TCK_USER_PER.STT_OrderCharge := '0';                                 // 713.오더요금별통계
	TCK_USER_PER.STT_OrderGrade  := '0';                                 // 714.오더별평가조회
  // 회사 관련 메뉴
  TCK_USER_PER.CMP_Head := '0';                                        // 801.본사관리
  TCK_USER_PER.CMP_Branch := '0'; TCK_USER_PER.CMP_BrchModify := '0';  // 802.지사관리
  TCK_USER_PER.CMP_SMSSet := '0';                                      // 803.SMS발송
  TCK_USER_PER.CMP_FreeSet := '0';                                     // 804.자율수수료 설정
                                                                       // 805.오토콜설정 ( GT_USERIF.LV = '60' )
  TCK_USER_PER.CMP_BrchKeyNumMng := '0';                               // 806.대표번호증명원등록

  // 고객 앱 관련 메뉴
  TCK_USER_PER.APP_Setup := '0';                                       // 811.앱/스마트푸시설정
  TCK_USER_PER.APP_Notice := '0';                                      // 812.앱게시물관리
  TCK_USER_PER.APP_Push := '0';                                        // 813.앱푸시관리
  TCK_USER_PER.APP_SMSLIST := '0';                                     // 814.콜마너SMS발송내역
  TCK_USER_PER.APP_PushLIST := '0';                                    // 815.스마트PUSH발송내역
  TCK_USER_PER.APP_SMSSTT := '0';                                      // 816.콜마너SMS발송일별통계
  TCK_USER_PER.APP_PushSTT := '0';                                     // 817.스마트PUSH발송일별통계

  // 직원 관련 메뉴
  TCK_USER_PER.USR_Manage := '0';   TCK_USER_PER.USR_MngModify := '0';      // 901.직원관리
  TCK_USER_PER.USR_Permission := '0';  TCK_USER_PER.USR_PerModify := '0';   // 902.권한설정
  TCK_USER_PER.USR_AuthStat := '0';                                         // 903.인증현황
  TCK_USER_PER.USR_UserAuthSel := '0';                                      // 904.인증관리(사용자)
  TCK_USER_PER.USR_PCAuthSel := '0';                                        // 905.인증관리(PC)
  TCK_USER_PER.USR_ExcelDownList := '0';                                    // 906.엑셀다운현황
  TCK_USER_PER.USR_UserCall := '0';                                         // 907.직원별콜현황
  TCK_USER_PER.USR_HourCall := '0';                                         // 908.직원별시간통계
  TCK_USER_PER.USR_LoginCheck := '0';                                       // 909.직원근태현황
//  GT_USERIF.Family := 'y';    GT_USERIF.Master := 'y';                      // 910.패밀리관리자설정

  // 광고 관련 메뉴
	TCK_USER_PER.SMS_Send := '0';                                             // 1001.SMS발송
  TCK_USER_PER.SMS_Advertisement := '0';                                    // 1002.대량파일SMS발송
  TCK_USER_PER.SMS_Result := '0';                                           // 1003.조회결과(상세)
  TCK_USER_PER.SMS_Detail_Result := '0';                                    // 1004.조회결과(일별)
  TCK_USER_PER.SMS_NoSms := '0';                                            // 1005.수신거부관리

  // 관제지도
//  TCK_USER_PER.MAP_Accept := '0';
  // 원격
//  TCK_USER_PER.HEL_REMOTE := '0';
  // SMS 전송 여부
//  TCK_USER_PER.SMS_Send := '0';
end;

procedure TFrm_Main.proc_AdminLogin_Q_exten(AJson: string);
Var
	subObj : TJSONObject;
	arrjObj : TJSONArray;
	i : Integer;
begin
	SetDebugeWrite('Tfrm_PBX.proc_AdminLogin_Q_exten');
	Try
		GT_Q_exten.clear; 
		GT_Service_no.clear;
		GT_Dnis_no.clear; 
		GT_Buz_name.clear;

		GT_Q_exten.Add('전체');
		GT_Service_no.Add('전체');
		GT_Dnis_no.Add('전체');
		GT_Buz_name.Add('전체');
		
		arrjObj := TJSONObject.ParseJSONValue(AJson) as TJSONArray;
		Try
			for i := 0 to arrjObj.Size - 1 do
			begin
				subObj := arrjObj.Get(i) as TJSONObject;

				GT_Q_exten.Add(subObj.Get('Q_exten').JsonValue.Value);	   //호분배 그룹 
				GT_Service_no.Add(subObj.Get('Service_no').JsonValue.Value);
				GT_Dnis_no.Add(subObj.Get('Dnis_no').JsonValue.Value);
				GT_Buz_name.Add(subObj.Get('Buz_name').JsonValue.Value);
			end;

		except
			SetDebugeWrite('[proc_AdminLogin_Q_exten] Json arrjObj error');	
		End;
	except
  end;
end;


procedure TFrm_Main.procQR_lap_time;
var i, iQTime, iState : Integer;
    nDate : String;
begin
  if cxGridQRate.DataController.RecordCount = 0 then Exit;

  iQTime := cxGridQRate.GetColumnByFieldName('문의시간').Index;
  iState := cxGridQRate.GetColumnByFieldName('상태').Index;
  nDate := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);
  try
    cxGridQRate.BeginUpdate;
    for i := 0 to cxGridQRate.DataController.RecordCount - 1 do
    begin
      if cxGridQRate.DataController.Values[i, iState] = '요금문의' then
      begin
        cxGridQRate.DataController.Values[i, 1] := func_lap_time(cxGridQRate.DataController.Values[i, iQTime], nDate);
      end;
    end;
  finally
    cxGridQRate.EndUpdate;
  end;
end;

procedure TFrm_Main.procCS_lap_time;
var i, iQTime, iSecond : Integer;
    nDate : String;
begin
  if GB_NS_NOACCEPTSHARE then Exit;  
  if cxGridCShare.DataController.RecordCount = 0 then Exit;  

  iQTime := cxGridCShare.GetColumnByFieldName('콜링시간').Index;
  iSecond := cxGridCShare.GetColumnByFieldName('경과(초)').Index;
  nDate := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);
  try
    cxGridCShare.BeginUpdate;
    for i := 0 to cxGridCShare.DataController.RecordCount - 1 do
    begin
      cxGridCShare.DataController.Values[i, iSecond] := func_lap_time(cxGridCShare.DataController.Values[i, iQTime], nDate);
    end;
  finally
    cxGridCShare.EndUpdate;
  end;
end;

function TFrm_Main.func_lap_time(in_date, ndate : string): string;
var
  sTime, dTime: TDateTime;
  sDate: string;
begin
  Result:= '';
  try
    sDate := ndate;
    sDate := GetStrToLongDateTimeStr(sDate);
    sTime := StrToDateTime(sDate);

    sDate := GetStrToLongDateTimeStr(in_date);
    dTime := StrToDateTime(sDate);

    sDate := FormatDateTime('hhmmss', sTime - dTime);

//    if (StrToIntDef(copy(sDate, 1, 4), 100) >= 20) and (iType = 0) then
//    begin
//      Exit;
//    end else
    begin
      if (StrToIntDef(copy(sDate, 1, 2), 0) = 0) then
        sDate := FormatFloat('00', StrToIntDef(copy(sDate, 3, 2), 0)) + '분' +
                 FormatFloat('00', StrToIntDef(copy(sDate, 5, 2), 0)) + '초'
      else
        sDate := FormatFloat('00', StrToIntDef(copy(sDate, 1, 2), 0)) + '시간' +
                 FormatFloat('00', StrToIntDef(copy(sDate, 3, 2), 0)) + '분' +
                 FormatFloat('00', StrToIntDef(copy(sDate, 5, 2), 0)) + '초';

      Result := sDate;
    end;
  except
    Result:= '';
  end;
end;

procedure TFrm_Main.pSetCIDState(iImgIndex : Integer);
begin
  try
		cxCIDImgList.GetIcon(iImgIndex, imgCID.Picture.Icon);
    cxCIDImgList.Tag := iImgIndex;

    if iImgIndex In [0, 2] then   // 켜기
    begin
      lblCidState.Caption := FCID_CON_Y;
    end else
    if iImgIndex In [1, 3] then   // 끄기
    begin
      lblCidState.Caption := FCID_CON_N;
    end;

    imgCID.Visible := True;
  except
  end;
end;

procedure TFrm_Main.HScrollHandler(Sender: TObject; ScrollCode: TScrollCode; var ScrollPos: Integer);
begin
  cxSgHdOrder.Controller.Scroll(sbHorizontal, scTrack, ScrollPos);
  cxSgBrOrder.Controller.Scroll(sbHorizontal, scTrack, ScrollPos);
end;

procedure TFrm_Main.pCallMapPopup( bChange : Boolean );
begin
	GB_CALLMAP_POPUP := bChange;
	GS_EnvFile.WriteBool('COUNSEL', 'CALLMAP_POPUP', GB_CALLMAP_POPUP);

  try
    if Assigned(Frm_JON52[JON03_MAX_CNT]) then
    begin
      Frm_JON52[JON03_MAX_CNT].Tag := 99;
      Frm_JON52[JON03_MAX_CNT].Close;
      FreeAndNil(Frm_JON52[JON03_MAX_CNT]);
    end;
  finally
    try
      pJON52Create;
    except;
    end;
  end;

  try
    if GB_CALLMAP_POPUP then
    begin
      GT_DISTANCE_ST := 1;            //경탐사용으로 변경
      SR1ErrCnt := 0; SR2ErrCnt := 0; //경탐체크시 경탐에러횟수 초기화
      GS_EnvFile.WriteString('CHARGE', 'GT_DISTANCE_ST', IntToStr(GT_DISTANCE_ST));

      Frm_JON52[JON03_MAX_CNT].Show;
      Frm_JON52[JON03_MAX_CNT].Hide;
      cxPageControl2.Pages[4].TabVisible := False;
    end else
    begin
      cxPageControl2.Pages[4].TabVisible := True;
    end;
  except
  end;
end;

procedure TFrm_Main.pJON52Create;
begin
  try
    if Not Assigned(Frm_JON52[JON03_MAX_CNT]) then
    begin
      Frm_JON52[JON03_MAX_CNT] := TFrm_JON52.Create(Nil);

      if Not GB_CALLMAP_POPUP then
      begin
        Frm_JON52[JON03_MAX_CNT].BorderStyle := bsNone;
        Frm_JON52[JON03_MAX_CNT].Parent := tsBtmMenu5;
        Frm_JON52[JON03_MAX_CNT].Align := alClient;
      end else
      begin
        Frm_JON52[JON03_MAX_CNT].BorderStyle := bsSizeable;
        Frm_JON52[JON03_MAX_CNT].Parent := Nil;
        Frm_JON52[JON03_MAX_CNT].Align := alNone;
      end;

      Frm_JON52[JON03_MAX_CNT].pnlRight.Align := alRight;
      Frm_JON52[JON03_MAX_CNT].pnlRight.Width := 60;

      Frm_JON52[JON03_MAX_CNT].shp_Mod1.Width := 15;
      Frm_JON52[JON03_MAX_CNT].shp_Mod2.Width := 15;
      Frm_JON52[JON03_MAX_CNT].shp_Mod3.Width := 15;
      Frm_JON52[JON03_MAX_CNT].shp_Mod4.Width := 15;

      Frm_JON52[JON03_MAX_CNT].shp_Mod1.Left := 1;
      Frm_JON52[JON03_MAX_CNT].shp_Mod1.Top := 4;

      Frm_JON52[JON03_MAX_CNT].shp_Mod2.Left := Frm_JON52[JON03_MAX_CNT].shp_Mod1.Left;
      Frm_JON52[JON03_MAX_CNT].shp_Mod2.Top  := Frm_JON52[JON03_MAX_CNT].shp_Mod1.Top + 31;

      Frm_JON52[JON03_MAX_CNT].shp_Mod3.Left := Frm_JON52[JON03_MAX_CNT].shp_Mod1.Left;
      Frm_JON52[JON03_MAX_CNT].shp_Mod3.Top  := Frm_JON52[JON03_MAX_CNT].shp_Mod2.Top + 31;

      Frm_JON52[JON03_MAX_CNT].shp_Mod4.Left := Frm_JON52[JON03_MAX_CNT].shp_Mod1.Left;
      Frm_JON52[JON03_MAX_CNT].shp_Mod4.Top  := Frm_JON52[JON03_MAX_CNT].shp_Mod3.Top + 31;

      Frm_JON52[JON03_MAX_CNT].btn_Mod1.Width := 40;
      Frm_JON52[JON03_MAX_CNT].btn_Mod2.Width := 40;
      Frm_JON52[JON03_MAX_CNT].btn_Mod3.Width := 40;
      Frm_JON52[JON03_MAX_CNT].btn_Mod4.Width := 40;

      Frm_JON52[JON03_MAX_CNT].btn_Mod1.Left := Frm_JON52[JON03_MAX_CNT].shp_Mod1.Left + 17;
      Frm_JON52[JON03_MAX_CNT].btn_Mod1.Top := 4;

      Frm_JON52[JON03_MAX_CNT].btn_Mod2.Left := Frm_JON52[JON03_MAX_CNT].shp_Mod2.Left + 17;
      Frm_JON52[JON03_MAX_CNT].btn_Mod2.Top  := Frm_JON52[JON03_MAX_CNT].btn_Mod1.Top + 31;

      Frm_JON52[JON03_MAX_CNT].btn_Mod3.Left := Frm_JON52[JON03_MAX_CNT].shp_Mod3.Left + 17;
      Frm_JON52[JON03_MAX_CNT].btn_Mod3.Top  := Frm_JON52[JON03_MAX_CNT].btn_Mod2.Top + 31;

      Frm_JON52[JON03_MAX_CNT].btn_Mod4.Left := Frm_JON52[JON03_MAX_CNT].shp_Mod4.Left + 17;
      Frm_JON52[JON03_MAX_CNT].btn_Mod4.Top  := Frm_JON52[JON03_MAX_CNT].btn_Mod3.Top + 31;

      Frm_JON52[JON03_MAX_CNT].cbRoute.Left := 1;
      Frm_JON52[JON03_MAX_CNT].cbRoute.Top := Frm_JON52[JON03_MAX_CNT].btn_Mod4.Top + 31;

      Frm_JON52[JON03_MAX_CNT].chkCallMapPopup.Visible := False;
      Frm_JON52[JON03_MAX_CNT].chkCallMapPopup.Left := 1;
      Frm_JON52[JON03_MAX_CNT].chkCallMapPopup.Top := Frm_JON52[JON03_MAX_CNT].cbRoute.Top + 31;

      Frm_JON52[JON03_MAX_CNT].cxLabel1.Left := 3;
      Frm_JON52[JON03_MAX_CNT].cxLabel1.Top := Frm_JON52[JON03_MAX_CNT].chkCallMapPopup.Top + 31;

      fSetFont(Frm_JON52[JON03_MAX_CNT], GS_FONTNAME);
      fSetSkin(Frm_JON52[JON03_MAX_CNT]);

      if Not GB_CALLMAP_POPUP then Frm_JON52[JON03_MAX_CNT].Show;
    end;
  except
  end;
end;

function TFrm_Main.fSetIniFile(vType, vHdNo, vOpt : String; var slFile: TStringList; bMsg : Boolean) : Boolean;
var
  ls_TxLoad: string;
  slRcvList: TStringList;
  rv_str, ls_rxxml, ls_Msg_Err, sDate, sbackFile : string;
  ErrCode, isPos, iePos : integer;
	xdom : msDomDocument;
  lst_Result: IXMLDomNodeList;
  ln_Env : TIniFile;
begin
  Result := False;
	try
		ls_TxLoad := GTx_UnitXmlLoad('COM00030.XML');
		ls_TxLoad := StringReplace(ls_TxLoad, 'UserIDString'   ,    GT_USERIF.ID         , [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientVerString',    VERSIONINFO          , [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'ClientKeyString',    'COM00030'           , [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'HdNoStr'        ,    vHdNo                , [rfReplaceAll]);
		ls_TxLoad := StringReplace(ls_TxLoad, 'typeStr'        ,    vType                , [rfReplaceAll]);  // 1.저장, 2.조회
		ls_TxLoad := StringReplace(ls_TxLoad, 'UpdateOptionStr',    vOpt                 , [rfReplaceAll]);  // 1.저장, 2.조회
		ls_TxLoad := StringReplace(ls_TxLoad, 'fileString'     ,    slFile.Text          , [rfReplaceAll]);

		Screen.Cursor := crHourGlass;
    slRcvList := TStringList.Create;
		try
			if dm.SendSock(ls_TxLoad, slRcvList, ErrCode, False) then
			begin
        rv_str := slRcvList[0];
				if rv_str <> '' then
				begin
          ls_rxxml := rv_str;
					xdom := ComsDomDocument.Create;
					try
						if not xdom.loadXML(ls_rxxml) then Exit;

            ls_Msg_Err := GetXmlErrorCode(ls_rxxml);
						if ('0000' = ls_Msg_Err) then
            begin
              if vType = '2' then
              begin
                // CDATA XML 추출방법을 몰라 Copy로 추출
                isPos := Pos('<![CDATA', ls_rxxml);
                iePos := Pos(']]></Data>', ls_rxxml);

                slFile.Text := Copy(ls_rxxml, isPos+9, (iePos-(isPos+9)));

                if Trim(slFile.Text) <> '' then
                begin
                  sbackFile := StringReplace(ENVPATHFILE, '.ini', '', [rfReplaceAll]);
                  sbackFile := Format('%s.ini', [sbackFile + '_' + FormatDateTime('YYMMDDHHNNSS', Now)]);
                  if FileExists(ENVPATHFILE) then
                  begin
                    RenameFile(ENVPATHFILE, sbackFile);
                  end;

                  slFile.SaveToFile(ENVPATHFILE);

                  // 서버 변경 일자
                  lst_Result := xdom.documentElement.selectNodes('/cdms/Service/Request/Data');
                  GS_SVRCONFIG_UPDATE := lst_Result.item[0].attributes.getNamedItem('iniCasUpDate').Text;

                  ln_Env := TIniFile.Create(ENVPATHFILE);
                  try
                    ln_Env.WriteString('GER', 'SVRCONFIG_UPDATE', GS_SVRCONFIG_UPDATE);
                  finally
                    FreeAndNil(ln_Env);
                  end;
                  // 원본환경에서 남겨야 할것들 copy
                  pDownConfigCopy(sbackFile, ENVPATHFILE);

                  Assert(False, Format('[본사설정저장]%s-%s-%s-%s', [ENVPATHFILE, sbackFile, GS_SVRCONFIG_UPDATE, vOpt]));

                  if bMsg then
                    GMessagebox('내려받기 완료.' + CRLF +
                                '본사설정을 적용하시려면 재시작 해주세요', CDMSE);
                end else
                begin
                  if bMsg then
                    GMessagebox('본사설정 내역이 없습니다.', CDMSE);
                end;
              end;
              Result := True;
						end else
						begin
							GMessagebox('본사 설정 파일 저장 중 에러가 발생 하였습니다.' + #10#13 + ls_Msg_Err, CDMSE);
            end;
          finally
            xDom := Nil;
          end;
        end;
      end;
    finally
      FreeAndNil(slRcvList);
      Screen.Cursor := crDefault;
    end;
  except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
	end;
end;

procedure TFrm_Main.pGetCidCount(Var iCuCnt, iWkCnt : Integer; Var sBizDate : String);
Var i, ipCuCnt, ipWkCnt : Integer;
    ls_StartTime, sPBizDate : String;
begin
  try
    iCuCnt := 0;
    iWkCnt := 0;

    iPCuCnt := 0;
    iPWkCnt := 0;

    ls_StartTime := StartDateTime('yyyy-mm-dd hh:nn:ss');
    sBizDate := Copy(ls_StartTime, 1, 10);
    for i := 0 to gst_CidLogOrg1.Count - 1 do
    begin
      // 당일 콜수
      if ls_StartTime < gst_CidLogOrg1[i] then
      begin
  			if gst_CidLogOrg2[i] = '기사' then Inc(iWkCnt)
                                      else Inc(iCuCnt);
      end else
      // 전일 콜수 - 로그인후 영업일자가 변경될 경우
      begin
  			if gst_CidLogOrg2[i] = '기사' then Inc(iPWkCnt)
                                      else Inc(iPCuCnt);
      end;
    end;

    // 영업일이전 콜링건수가 있으면 따로 저장
    if (iPWkCnt + iPCuCnt) > 0 then
    begin
      ls_StartTime := StartDateTime('yyyy-mm-dd');
      sPBizDate := Copy(ls_StartTime, 1, 10);
      pSaveCidInfo( ipCuCnt, ipWkCnt, spBizDate );
    end;
  except
    on e: exception do
    begin
      Assert(False, E.Message);
    end;
	end;
end;

end.

